{"version":3,"file":"po-ui-ng-storage.js","sources":["../../../projects/storage/src/lib/drivers/lokijs/po-loki-driver.ts","../../../projects/storage/src/lib/services/po-storage.service.ts","../../../projects/storage/src/lib/po-storage.module.ts","../../../projects/storage/src/po-ui-ng-storage.ts"],"sourcesContent":["import Loki from 'lokijs';\r\nimport LokiIndexedAdapter from 'lokijs/src/loki-indexed-adapter';\r\n\r\nconst keyField = 'key';\r\n\r\nexport class PoLokiDriver {\r\n  private collection;\r\n  private db: any;\r\n  private driver: any;\r\n\r\n  constructor() {\r\n    const self = this;\r\n    this.driver = {\r\n      _driver: 'lokijs',\r\n      _initStorage: function (options: any) {\r\n        return self.initStorage(options);\r\n      },\r\n      clear: function () {\r\n        return self.clear(this);\r\n      },\r\n      getItem: function (key: any) {\r\n        return self.getItem(this, key);\r\n      },\r\n      iterate: function (iteratorCallback: any) {\r\n        return self.iterate(this, iteratorCallback);\r\n      },\r\n      key: function (n: any) {\r\n        return self.key(this, n);\r\n      },\r\n      keys: function () {\r\n        return self.keys(this);\r\n      },\r\n      length: function () {\r\n        return self.length(this);\r\n      },\r\n      removeItem: function (key: any) {\r\n        return self.removeItem(this, key);\r\n      },\r\n      setItem: function (key: any, value: any) {\r\n        return self.setItem(this, key, value);\r\n      }\r\n    };\r\n  }\r\n\r\n  // Funções de iteração\r\n\r\n  private clear(localforage: any) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollectionAndDataInCollection()) {\r\n          this.clearCollection();\r\n        }\r\n        resolve(null);\r\n      });\r\n    });\r\n  }\r\n\r\n  private getItem(localforage: any, key: any) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollectionAndDataInCollection()) {\r\n          const item = this.getItemInCollectionBy(keyField, key);\r\n          if (item) {\r\n            resolve(item.value);\r\n          }\r\n        }\r\n        resolve(null);\r\n      });\r\n    });\r\n  }\r\n\r\n  private initStorage(options: any) {\r\n    return new Promise(resolve => {\r\n      try {\r\n        this.configureLokiStorage(options, this.databaseInitialize.bind(this, options, resolve));\r\n      } catch {\r\n        throw new Error(`Cannot configure Loki Storage`);\r\n      }\r\n    });\r\n  }\r\n\r\n  private iterate(localforage: any, iteratorCallback: Function) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollectionAndDataInCollection()) {\r\n          this.iterateWithDataItem(iteratorCallback);\r\n        }\r\n        resolve(null);\r\n      });\r\n    });\r\n  }\r\n\r\n  private key(localforage: any, n: string | number) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollection()) {\r\n          const map = this.getLokiMap();\r\n          resolve(map[n]);\r\n        }\r\n        resolve(null);\r\n      });\r\n    });\r\n  }\r\n\r\n  private keys(localforage: any) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollection()) {\r\n          const keys = [];\r\n          const map = this.getLokiMap();\r\n          for (const key of Object.keys(map)) {\r\n            keys.push(map[key]);\r\n          }\r\n          resolve(keys);\r\n        }\r\n        resolve(null);\r\n      });\r\n    });\r\n  }\r\n\r\n  private length(localforage: any) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollection()) {\r\n          resolve(this.getNumberItensInCollection());\r\n        }\r\n        resolve(0);\r\n      });\r\n    });\r\n  }\r\n\r\n  private removeItem(localforage: any, key: any) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollection()) {\r\n          this.findAndRemoveItem(key);\r\n        }\r\n        resolve(null);\r\n      });\r\n    });\r\n  }\r\n\r\n  private setItem(localforage: any, key: any, value: any) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollection()) {\r\n          let item: any;\r\n          if (this.hasDataInCollection()) {\r\n            item = this.getItemInCollectionBy(keyField, key);\r\n          }\r\n          this.insertOrUpdate(item, value, key);\r\n        }\r\n        resolve(value);\r\n      });\r\n    });\r\n  }\r\n\r\n  // Funções de acesso ao storage\r\n\r\n  // eslint-disable-next-line @typescript-eslint/member-ordering\r\n  getDriver() {\r\n    return this.driver;\r\n  }\r\n\r\n  private addCollection(options: any): any {\r\n    return this.db.addCollection(options.storeName, { unique: [keyField] });\r\n  }\r\n\r\n  private clearCollection() {\r\n    this.collection.clear({ removeIndices: false });\r\n  }\r\n\r\n  private configureLokiStorage(options: any, databaseInitialize: any) {\r\n    const idbAdapter = new LokiIndexedAdapter();\r\n    this.db = new Loki(options.name, {\r\n      adapter: idbAdapter,\r\n      autoload: true,\r\n      autoloadCallback: databaseInitialize,\r\n      autosave: true,\r\n      autosaveInterval: 4000\r\n    });\r\n  }\r\n\r\n  private findAndRemoveItem(key: any) {\r\n    this.collection.findAndRemove({ [keyField]: key });\r\n  }\r\n\r\n  private getCollection(options: any): any {\r\n    return this.db.getCollection(options.storeName);\r\n  }\r\n\r\n  private databaseInitialize(options: any, resolve: Function) {\r\n    this.collection = this.getCollection(options);\r\n    if (!this.hasCollection()) {\r\n      this.collection = this.addCollection(options);\r\n    }\r\n    resolve();\r\n  }\r\n\r\n  private getItemInCollectionBy(fieldKey: string, key: any) {\r\n    return this.collection.by(fieldKey, key);\r\n  }\r\n\r\n  private getLokiMap() {\r\n    return this.collection.constraints.unique[keyField].lokiMap;\r\n  }\r\n\r\n  private hasCollection() {\r\n    return this.collection;\r\n  }\r\n\r\n  private hasDataInCollection() {\r\n    return this.collection.data && this.collection.data.length;\r\n  }\r\n\r\n  private hasCollectionAndDataInCollection() {\r\n    return this.hasCollection() && this.hasDataInCollection();\r\n  }\r\n\r\n  private insertOrUpdate(item: any, value: any, key: any) {\r\n    if (item) {\r\n      item.value = value;\r\n      this.collection.update(item);\r\n    } else {\r\n      this.collection.insert({ [keyField]: key, value: value });\r\n    }\r\n  }\r\n\r\n  private iterateWithDataItem(iteratorcallback: Function) {\r\n    this.collection.data.forEach(element => {\r\n      iteratorcallback(element.value, element[keyField], element.$loki);\r\n    });\r\n  }\r\n\r\n  private getNumberItensInCollection(): number {\r\n    return this.collection.count();\r\n  }\r\n}\r\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\r\n\r\nimport * as LocalForage from 'localforage';\r\nimport 'localforage';\r\n\r\nimport IdleQueue from 'custom-idle-queue';\r\n\r\nimport { PoLokiDriver } from '../drivers/lokijs/po-loki-driver';\r\nimport { PoStorageConfig } from './po-storage-config.interface';\r\n\r\nexport const PO_STORAGE_CONFIG_TOKEN = new InjectionToken('PO_STORAGE_CONFIG_TOKEN');\r\n\r\n/**\r\n * @description\r\n *\r\n * O PO Storage é uma biblioteca que fornece um serviço para armazenamento de dados no dispositivo local, sendo semelhante\r\n * ao funcionamento do [IonicStorage](https://ionicframework.com/docs/storage/).\r\n * É possível utilizar os drivers [Websql](https://dev.w3.org/html5/webdatabase/), [Indexeddb](https://www.w3.org/TR/IndexedDB/),\r\n * [LocalStorage](https://html.spec.whatwg.org/multipage/webstorage.html) e também [LokiJS](https://github.com/techfort/LokiJS/wiki).\r\n *\r\n * Para um melhor ganho de performance ao buscar e salvar dados, recomendamos a utilização do `LokiJS`, um *database*\r\n * orientado a documento semelhante ao MongoDB, que além de permitir a persistência dos dados no dispositivo possibilita\r\n * também o armazenamento dos dados em memória. Outra vantagem, é o aumento do limite de armazenamento para\r\n * aproximadamente `300mb`.\r\n *\r\n * A estrutura utilizada para armazenar os dados é a de chave/valor, onde uma chave funciona como um identificador exclusivo.\r\n *\r\n * #### Instalando o PO Storage\r\n *\r\n * Para instalar o `po-storage` em sua aplicação execute o seguinte comando:\r\n *\r\n * ```shell\r\n * ng add @po-ui/ng-storage\r\n * ```\r\n * Será instalado o pacote `@po-ui/ng-storage` e também já importará `PoStorageModule` no módulo principal da sua aplicação, conforme abaixo:\r\n *\r\n * ```typescript\r\n * import { PoStorageModule } from '@po-ui/ng-storage';\r\n *\r\n * @NgModule({\r\n *  declarations: [...],\r\n *  imports: [\r\n *    // Importação do módulo PoStorageModule\r\n *    PoStorageModule.forRoot(),\r\n *  ],\r\n *  bootstrap: [IonicApp],\r\n *  providers: [...]\r\n * })\r\n * export class AppModule {}\r\n * ```\r\n *\r\n * Com a declaração do módulo, é criada uma base de dados no armazenamento local e o serviço `PoStorageService` estará\r\n * pronto para ser utilizada na sua aplicação.\r\n *\r\n * #### Configurando as opções de armazenamento\r\n *\r\n * Na importação do módulo, o método `PoStorageModule.forRoot()` pode receber como parâmetro um objeto do tipo\r\n * [`PoStorageConfig`](documentation/po-storage#po-storage-config),\r\n * que serve para configurar as opções personalizadas do armazenamento, como por exemplo: o tipo de armazenamento\r\n * preferêncial.\r\n *\r\n * Caso não seja passada nenhuma configuração a ordem padrão será: ['websql', 'indexeddb', 'localstorage', 'lokijs'].\r\n *\r\n * Abaixo segue um exemplo de configuração onde o storage preferencial passa a ser o `lokijs`:\r\n *\r\n * ```typescript\r\n * import { PoStorageModule } from '@po-ui/ng-storage';\r\n *\r\n * @NgModule({\r\n *  declarations: [...],\r\n *  imports: [\r\n *    // Importação do módulo PoStorageModule com a configuração personalizada\r\n *    PoStorageModule.forRoot({\r\n *      name: 'mystorage',\r\n *      storeName: '_mystore',\r\n *      driverOrder: ['lokijs', 'websql', 'indexeddb', 'localstorage']\r\n *    }),\r\n *  ],\r\n *  bootstrap: [IonicApp],\r\n *  providers: [...]\r\n * })\r\n * export class AppModule {}\r\n * ```\r\n */\r\n@Injectable()\r\nexport class PoStorageService {\r\n  private driver: string = null;\r\n  private idleQueue = new IdleQueue();\r\n  private storagePromise: Promise<LocalForage>;\r\n  private lokijsDriver: PoLokiDriver;\r\n\r\n  constructor(@Inject(PO_STORAGE_CONFIG_TOKEN) config?: PoStorageConfig) {\r\n    this.lokijsDriver = new PoLokiDriver();\r\n    this.setStoragePromise(config);\r\n  }\r\n\r\n  /**\r\n   * Retorna a configuração padrão para o armazenamento. Caso nenhuma configuração seja inserida,\r\n   * essa configuração será utilizada.\r\n   *\r\n   * @returns {PoStorageConfig} Objeto com a configuração padrão do armazenamento.\r\n   */\r\n  static getDefaultConfig(): PoStorageConfig {\r\n    return {\r\n      name: '_postorage',\r\n      storeName: '_pokv',\r\n      driverOrder: ['websql', 'indexeddb', 'localstorage', 'lokijs']\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Cria uma instância do `PoStorageService` com a configuração de armazenamento passada como parâmetro.\r\n   *\r\n   * @param {PoStorageConfig} storageConfig Configuração para o armazenamento.\r\n   * @returns {PoStorageService} Instância do `PoStorageService`.\r\n   */\r\n  static providePoStorage(storageConfig?: PoStorageConfig): PoStorageService {\r\n    return new PoStorageService(PoStorageService.getConfig(storageConfig));\r\n  }\r\n\r\n  private static getConfig(storageConfig?: PoStorageConfig) {\r\n    return storageConfig || PoStorageService.getDefaultConfig();\r\n  }\r\n\r\n  /**\r\n   * Busca uma lista armazenada pela chave e concatena com a lista passada por parâmetro.\r\n   *\r\n   * Por exemplo:\r\n   *\r\n   * ``` typescript\r\n   * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n   *\r\n   * this.poStorageService.set('clientKey', clients).then(() => {});\r\n   *\r\n   * ...\r\n   *\r\n   * const newClients = [ { name: 'Lisa', age: 36 }, { name: 'Bruce', age: 18 } ];\r\n   *\r\n   * this.poStorageService.appendArrayToArray('clientKey', newClients).then(() => {\r\n   *   // A lista agora será:\r\n   *   // [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }, { name: 'Lisa', age: 36 }, { name: 'Bruce', age: 18 }];\r\n   * });\r\n   * ```\r\n   *\r\n   * @param {string} key Chave da lista armazenada.\r\n   * @param {Array} value Lista que será concatenada.\r\n   *\r\n   * @returns {Promise<any>} Promessa que é resolvida após as duas listas serem concatenadas e armazenadas localmente.\r\n   */\r\n  async appendArrayToArray(key: string, value: Array<any>): Promise<any> {\r\n    const data = await this.getArrayOfStorage(key);\r\n\r\n    const newData = [...data, ...value];\r\n    return this.set(key, newData);\r\n  }\r\n\r\n  /**\r\n   * Acrescenta um item em uma lista armazenada pela chave.\r\n   *\r\n   * @param {string} key Chave da lista armazenada.\r\n   * @param {Array} value Item que será acrescentado na lista.\r\n   *\r\n   * @returns {Promise<any>} Promessa que é resolvida após o item ser acrescentado na lista armazenada.\r\n   */\r\n  async appendItemToArray(key: string, value: any): Promise<any> {\r\n    const data = await this.getArrayOfStorage(key);\r\n\r\n    data.push(value);\r\n    return this.set(key, data);\r\n  }\r\n\r\n  /**\r\n   * Remove todos os itens da base de dados local configurada na declaração do módulo `PoStorageModule`.\r\n   *\r\n   * > Utilize este método com cautela, para evitar a perda indesejada de dados.\r\n   *\r\n   * @returns {Promise<void>} Promessa que é resolvida após todos os itens da base de dados local serem removidos.\r\n   */\r\n  clear(): Promise<void> {\r\n    return this.storagePromise.then(store => store.clear());\r\n  }\r\n\r\n  /**\r\n   * Verifica se existe um valor dentro de uma determinada chave.\r\n   *\r\n   * @param {string} key Chave que será verificada.\r\n   *\r\n   * @returns {Promise<boolean>} Promessa que é resolvida quando a verificação da existência do valor na chave é concluída.\r\n   */\r\n  exists(key: string): Promise<boolean> {\r\n    return this.get(key).then(data => Promise.resolve(data !== null));\r\n  }\r\n\r\n  /**\r\n   * Itera sobre todas as chaves armazenadas.\r\n   *\r\n   * @param {any} iteratorCallback Função de `callback` que é chamada a cada iteração, com os seguintes parâmetros:\r\n   * valor, chave e número da iteração.\r\n   *\r\n   * Exemplo de utilização:\r\n   *\r\n   * ``` typescript\r\n   * this.poStorageService.forEach((value: any, key: string, iterationNumber: number) => {\r\n   *   // Iteração sobre cada chave armazenada.\r\n   * });\r\n   * ```\r\n   *\r\n   * @returns {Promise<void>} Promessa que é resolvida após a iteração sobre todas as chaves armazenadas.\r\n   */\r\n  forEach(iteratorCallback: (value: any, key: string, iterationNumber: number) => any): Promise<void> {\r\n    return this.storagePromise.then(store => store.iterate(iteratorCallback));\r\n  }\r\n\r\n  /**\r\n   * Retorna o valor armazenado em uma determinada chave.\r\n   *\r\n   * @param {string} key Chave que identifica o item.\r\n   * @param {boolean} lock Define se irá travar a leitura e a escrita da base de dados para não ser acessada de forma paralela.\r\n   * Caso outra leitura/escrita já tenha sido iniciada, este método irá esperar o outro terminar para então começar.\r\n   *\r\n   * Padrão: `false`.\r\n   *\r\n   * > Esta definição só será válida se o outro acesso paralelo a este método também estiver com o parâmetro *lock* ativado.\r\n   * @returns {Promise<any>} Promessa que é resolvida após o item ser buscado.\r\n   */\r\n  async get(key: string, lock: boolean = false): Promise<any> {\r\n    if (lock) {\r\n      await this.requestIdlePromise();\r\n      return await this.idleQueue.wrapCall(async () => {\r\n        await this.getImmutableItem(key);\r\n      });\r\n    }\r\n    return await this.getImmutableItem(key);\r\n  }\r\n\r\n  /**\r\n   * Retorna o nome do *driver* que está sendo usado para armazenar os dados, por exemplo: localStorage.\r\n   *\r\n   * @returns {string | null} Nome do *driver*.\r\n   */\r\n  getDriver(): string {\r\n    return this.driver;\r\n  }\r\n\r\n  /**\r\n   * Retorna o primeiro item de uma lista para uma determinada chave.\r\n   *\r\n   * @param {string} key Chave da lista.\r\n   * @returns {Promise<any>} Promessa que é resolvida após o primeiro item ser encontrado.\r\n   */\r\n  getFirstItem(key: string): Promise<any> {\r\n    return this.get(key).then((data: Array<any>) => Promise.resolve(data ? data[0] : null));\r\n  }\r\n\r\n  /**\r\n   * Remove o primeiro item de uma lista a partir da chave.\r\n   *\r\n   * @param {string} key Chave da lista que será removido o primeiro item.\r\n   * @returns {Promise<any>} Promessa que é resolvida após o primeiro item da lista ser removido.\r\n   */\r\n  getItemAndRemove(key: string): Promise<any> {\r\n    return this.get(key).then((data: Array<any>) => {\r\n      if (data === null) {\r\n        return null;\r\n      }\r\n\r\n      const item = data.shift();\r\n      return this.set(key, data).then(() => Promise.resolve(item));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Busca o primeiro objeto encontrado dentro de uma lista pelo do valor de um campo.\r\n   *\r\n   * Por exemplo:\r\n   *\r\n   * ``` typescript\r\n   * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n   *\r\n   * this.poStorageService.set('clientKey', clients).then(() => {});\r\n   *\r\n   * ...\r\n   *\r\n   * this.poStorageService.getItemByField('clientKey', 'name', 'Marie').then(client => {\r\n   *   // Resultado do console.log: { name: 'Marie', age: 23 }\r\n   *   console.log(client);\r\n   * });\r\n   * ```\r\n   *\r\n   * @param {string} key Chave da lista.\r\n   * @param {string} fieldName O campo a ser filtrado.\r\n   * @param {any} fieldValue O valor do campo.\r\n   * @returns {Promise<any>} Promessa que é resolvida com o item que foi encontrado.\r\n   */\r\n  getItemByField(key: string, fieldName: string, fieldValue: any): Promise<any> {\r\n    return this.get(key).then((storageRecords: Array<any>) => {\r\n      let storageRecordsFiltered = storageRecords.find(storageRecord => storageRecord[fieldName] === fieldValue);\r\n      storageRecordsFiltered = storageRecordsFiltered || null;\r\n\r\n      return Promise.resolve(storageRecordsFiltered);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Lista com todas as chaves armazenadas.\r\n   *\r\n   * @returns {Promise<Array<string>>} Promessa que é resolvida com todas as chaves armazenadas.\r\n   */\r\n  keys(): Promise<Array<string>> {\r\n    return this.storagePromise.then(store => store.keys());\r\n  }\r\n\r\n  /**\r\n   * Quantidade de chaves armazenadas.\r\n   *\r\n   * @returns {Promise<number>} Promessa que é resolvida com o número de chaves armazenadas.\r\n   */\r\n  length(): Promise<number> {\r\n    return this.storagePromise.then(store => store.length());\r\n  }\r\n\r\n  /**\r\n   * Utilizado para gerenciar o bloqueio e desbloqueio de recursos no `PoStorageService`.\r\n   * Aguardando a liberação da utilização dos recursos que participam deste comportamento e posteriormente envolve o recurso\r\n   * passado como parâmetro em um comportamento de bloqueio e desbloqueio.\r\n   *\r\n   * Este método se comporta igual a utilização em conjunta dos métodos: `PoStorageService.requestIdlePromise()`,\r\n   * `PoStorageService.lock()` e `PoStorageService.unlook()`.\r\n   *\r\n   * Veja mais no método: [`PoStorage.requestIdlePromise()`](documentation/po-storage#request-idle-promise).\r\n   *\r\n   * @param {Function} limitedResource Função que será envolvida no comportamento de bloqueio e desbloqueio.\r\n   */\r\n  async limitedCallWrap(limitedResource: Function): Promise<any> {\r\n    await this.requestIdlePromise();\r\n    return this.idleQueue.wrapCall(limitedResource);\r\n  }\r\n\r\n  /**\r\n   * Incrementa um valor na fila de bloqueio do `PoStorageService`. Utilizado juntamente com o método `unlock` para poder\r\n   * controlar a execução de uma determinada tarefa com o `PoStorage.requestIdlePromise()`.\r\n   *\r\n   * Veja mais no método: [`PoStorage.requestIdlePromise()`](documentation/po-storage#request-idle-promise).\r\n   */\r\n  lock() {\r\n    this.idleQueue.lock();\r\n  }\r\n\r\n  /**\r\n   * Determina se o processo de inicialização do *driver* assíncrono foi concluído.\r\n   *\r\n   * @returns {Promise<LocalForage>} Promessa que é resolvida quando o processo de inicialização do *driver* assíncrono\r\n   * for concluído.\r\n   */\r\n  ready(): Promise<LocalForage> {\r\n    return this.storagePromise;\r\n  }\r\n\r\n  /**\r\n   * Remove um valor associado a uma chave.\r\n   *\r\n   * @param {key} key Chave do valor que será removido.\r\n   * @returns {Promise<any>} Promessa que é resolvida após o valor ser removido.\r\n   */\r\n  remove(key: string): Promise<any> {\r\n    return this.storagePromise.then(store => store.removeItem(key));\r\n  }\r\n\r\n  /**\r\n   * Remove uma propriedade de um objeto armazenado.\r\n   *\r\n   * @param {string} key Chave do objeto armazenado.\r\n   * @param {string} property Propriedade que será removida.\r\n   *\r\n   * @returns {Promise<any>} Promessa que é resolvida após a propriedade ser removida.\r\n   */\r\n  async removeIndexFromObject(key: string, property: string): Promise<any> {\r\n    const data = await this.getObjectOfStorage(key);\r\n\r\n    delete data[property];\r\n    return this.set(key, data);\r\n  }\r\n\r\n  /**\r\n   * Remove um objeto de uma lista armazenada pelo valor de uma propriedade.\r\n   *\r\n   * Por exemplo:\r\n   *\r\n   * ``` typescript\r\n   * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n   *\r\n   * this.poStorageService.set('clientKey', clients).then(() => {});\r\n   *\r\n   * ...\r\n   *\r\n   * this.poStorageService.removeItemFromArray('clientKey', 'name', 'Marie').then(() => {\r\n   *   // O objeto { name: 'Marie', age: 23 } foi removido da lista que está na chave 'clientKey'\r\n   * });\r\n   * ```\r\n   *\r\n   * @param {string} key Chave da lista que contém o item que será removido.\r\n   * @param {string} field O campo a ser filtrado no item.\r\n   * @param {string} value O valor do filtro.\r\n   * @returns {Promise<any>} Promessa que é resolvida quando o objeto for removido da lista.\r\n   */\r\n  async removeItemFromArray(key: string, field: string, value: any): Promise<any> {\r\n    let data = await this.getArrayOfStorage(key);\r\n\r\n    data = data.filter(item => item[field] !== value);\r\n    return this.set(key, data);\r\n  }\r\n\r\n  /**\r\n   * <a id=\"request-idle-promise\"></a>\r\n   * Método que verifica se o acesso a base de dados configurada está liberado.\r\n   *\r\n   * Utilizado em conjunto com os métodos `lock()` e `unlock()` entre tarefas que não podem ser executadas de forma\r\n   * paralela, para não causar inconsistências nos dados.\r\n   *\r\n   * Exemplo de utilização:\r\n   *\r\n   * ```\r\n   * // Aguarda a liberação para continuar\r\n   * await this.poStorage.requestIdlePromise();\r\n   *\r\n   * this.poStorage.lock();\r\n   *\r\n   * // Executa uma tarefa que irá ler e/ou escrever na base de dados configurada.\r\n   *\r\n   * this.poStorage.unlock();\r\n   * ```\r\n   *\r\n   * > É importante sempre utilizá-lo antes de executar os métodos `lock()` e `unlock()` para garantir que a tarefa só\r\n   * será executada caso o acesso esteja livre.\r\n   *\r\n   * @returns {Promise<any>} Promessa que é resolvida quando o acesso a base de dados configurada estiver liberado.\r\n   */\r\n  requestIdlePromise(): Promise<any> {\r\n    return this.idleQueue.requestIdlePromise();\r\n  }\r\n\r\n  /**\r\n   * Grava um valor em uma determinada chave.\r\n   *\r\n   * @param {string} key Chave para o valor que será gravado.\r\n   * @param {any} value Valor que será gravado.\r\n   * @param {boolean} lock Define se irá travar a leitura e a escrita da base de dados para não ser acessada de forma paralela.\r\n   * Caso outra leitura/escrita já tenha sido iniciada, este método irá esperar o outro terminar para então começar.\r\n   *\r\n   * Padrão: `false`.\r\n   *\r\n   * > Esta definição só será válida se o outro acesso paralelo a este método também estiver com o parâmetro *lock* ativado.\r\n   * @returns {Promise<any>} Promessa que é resolvida após o valor ter sido gravado.\r\n   */\r\n  async set(key: string, value: any, lock: boolean = false): Promise<any> {\r\n    const store = await this.storagePromise;\r\n    const newValue = typeof value === 'object' ? JSON.parse(JSON.stringify(value)) : value;\r\n\r\n    if (lock) {\r\n      await this.requestIdlePromise();\r\n      return this.idleQueue.wrapCall(() => store.setItem(key, newValue));\r\n    }\r\n\r\n    return store.setItem(key, newValue);\r\n  }\r\n\r\n  /**\r\n   * Atribui um valor a uma propriedade de um objeto armazenado pela chave.\r\n   *\r\n   * Por exemplo:\r\n   *\r\n   * ``` typescript\r\n   * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n   *\r\n   * this.poStorageService.set('clientKey', clients).then(() => {});\r\n   *\r\n   * ...\r\n   *\r\n   * this.poStorageService.setIndexToObject('clientKey', 'name', 'Clare').then(() => {\r\n   *   // O objeto { name: 'Marie', age: 23 } passa a ser { name: 'Clare', age: 23 }\r\n   * });\r\n   * ```\r\n   *\r\n   * @param {string} key Chave do objeto.\r\n   * @param {string} property Nome da propriedade do objeto.\r\n   * @param {any} value Valor que será gravado na propriedade do objeto.\r\n   */\r\n  async setIndexToObject(key: string, property: string, value: any): Promise<any> {\r\n    const data = await this.getObjectOfStorage(key);\r\n\r\n    data[property] = value;\r\n    return this.set(key, data);\r\n  }\r\n\r\n  /**\r\n   * Decrementa um valor na fila de bloqueio. Utilizado juntamente com o método `lock` para poder\r\n   * controlar a execução de uma determinada tarefa com o `PoStorage.requestIdlePromise()`.\r\n   *\r\n   * Veja mais no método: [`PoStorage.requestIdlePromise()`](documentation/po-storage#request-idle-promise).\r\n   */\r\n  unlock() {\r\n    this.idleQueue.unlock();\r\n  }\r\n\r\n  private async getArrayOfStorage(key: string) {\r\n    const data = await this.get(key);\r\n    return data || [];\r\n  }\r\n\r\n  private async getImmutableItem(key: string) {\r\n    const store = await this.storagePromise;\r\n    const items = await store.getItem(key);\r\n    return items ? JSON.parse(JSON.stringify(items)) : null;\r\n  }\r\n\r\n  private async defineLocalForageDriver(localForageInstance: any, driverOrder) {\r\n    await localForageInstance.defineDriver(this.lokijsDriver.getDriver());\r\n    await this.setDriver(localForageInstance, driverOrder);\r\n    return localForageInstance;\r\n  }\r\n\r\n  private getDriverOrder(driverOrder: Array<string>): Array<string> {\r\n    return driverOrder.map(driver => {\r\n      switch (driver) {\r\n        case 'indexeddb':\r\n          return LocalForage.INDEXEDDB;\r\n        case 'websql':\r\n          return LocalForage.WEBSQL;\r\n        case 'localstorage':\r\n          return LocalForage.LOCALSTORAGE;\r\n        default:\r\n          return driver;\r\n      }\r\n    });\r\n  }\r\n\r\n  private async getObjectOfStorage(key: string) {\r\n    const data = await this.get(key);\r\n    return data || {};\r\n  }\r\n\r\n  private async setDriver(localForageInstance: LocalForage, driverOrder) {\r\n    await localForageInstance.setDriver(this.getDriverOrder(driverOrder));\r\n    this.driver = localForageInstance.driver();\r\n  }\r\n\r\n  private setStoragePromise(config: PoStorageConfig) {\r\n    this.storagePromise = this.getStorageInstance(config);\r\n  }\r\n\r\n  private async getStorageInstance(config: PoStorageConfig) {\r\n    const defaultConfig = PoStorageService.getDefaultConfig();\r\n    const actualConfig = Object.assign(defaultConfig, config || {});\r\n\r\n    const localForageInstance = LocalForage.createInstance(actualConfig);\r\n\r\n    try {\r\n      return await this.defineLocalForageDriver(localForageInstance, actualConfig.driverOrder);\r\n    } catch {\r\n      throw new Error(`Cannot use this drivers: ${actualConfig.driverOrder.join(', ')}.`);\r\n    }\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\nimport { PoStorageConfig } from './services/po-storage-config.interface';\r\nimport { PoStorageService, PO_STORAGE_CONFIG_TOKEN } from './services/po-storage.service';\r\n\r\n/**\r\n * @description\r\n *\r\n * Módulo do componente PoStorage responsável por manipular o storage do browser.\r\n */\r\n\r\n@NgModule()\r\nexport class PoStorageModule {\r\n  static forRoot(storageConfig?: PoStorageConfig): ModuleWithProviders<PoStorageModule> {\r\n    return {\r\n      ngModule: PoStorageModule,\r\n      providers: [\r\n        {\r\n          provide: PO_STORAGE_CONFIG_TOKEN,\r\n          useValue: storageConfig || PoStorageService.getDefaultConfig()\r\n        },\r\n        {\r\n          provide: PoStorageService,\r\n          useFactory: PoStorageService.providePoStorage,\r\n          deps: [PO_STORAGE_CONFIG_TOKEN]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {PO_STORAGE_CONFIG_TOKEN as ɵa} from './lib/services/po-storage.service';"],"names":[],"mappings":"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"}