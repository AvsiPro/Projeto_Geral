import Loki from 'lokijs';
import LokiIndexedAdapter from 'lokijs/src/loki-indexed-adapter';
const keyField = 'key';
export class PoLokiDriver {
    constructor() {
        const self = this;
        this.driver = {
            _driver: 'lokijs',
            _initStorage: function (options) {
                return self.initStorage(options);
            },
            clear: function () {
                return self.clear(this);
            },
            getItem: function (key) {
                return self.getItem(this, key);
            },
            iterate: function (iteratorCallback) {
                return self.iterate(this, iteratorCallback);
            },
            key: function (n) {
                return self.key(this, n);
            },
            keys: function () {
                return self.keys(this);
            },
            length: function () {
                return self.length(this);
            },
            removeItem: function (key) {
                return self.removeItem(this, key);
            },
            setItem: function (key, value) {
                return self.setItem(this, key, value);
            }
        };
    }
    // Funções de iteração
    clear(localforage) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollectionAndDataInCollection()) {
                    this.clearCollection();
                }
                resolve(null);
            });
        });
    }
    getItem(localforage, key) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollectionAndDataInCollection()) {
                    const item = this.getItemInCollectionBy(keyField, key);
                    if (item) {
                        resolve(item.value);
                    }
                }
                resolve(null);
            });
        });
    }
    initStorage(options) {
        return new Promise(resolve => {
            try {
                this.configureLokiStorage(options, this.databaseInitialize.bind(this, options, resolve));
            }
            catch (_a) {
                throw new Error(`Cannot configure Loki Storage`);
            }
        });
    }
    iterate(localforage, iteratorCallback) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollectionAndDataInCollection()) {
                    this.iterateWithDataItem(iteratorCallback);
                }
                resolve(null);
            });
        });
    }
    key(localforage, n) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollection()) {
                    const map = this.getLokiMap();
                    resolve(map[n]);
                }
                resolve(null);
            });
        });
    }
    keys(localforage) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollection()) {
                    const keys = [];
                    const map = this.getLokiMap();
                    for (const key of Object.keys(map)) {
                        keys.push(map[key]);
                    }
                    resolve(keys);
                }
                resolve(null);
            });
        });
    }
    length(localforage) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollection()) {
                    resolve(this.getNumberItensInCollection());
                }
                resolve(0);
            });
        });
    }
    removeItem(localforage, key) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollection()) {
                    this.findAndRemoveItem(key);
                }
                resolve(null);
            });
        });
    }
    setItem(localforage, key, value) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollection()) {
                    let item;
                    if (this.hasDataInCollection()) {
                        item = this.getItemInCollectionBy(keyField, key);
                    }
                    this.insertOrUpdate(item, value, key);
                }
                resolve(value);
            });
        });
    }
    // Funções de acesso ao storage
    // eslint-disable-next-line @typescript-eslint/member-ordering
    getDriver() {
        return this.driver;
    }
    addCollection(options) {
        return this.db.addCollection(options.storeName, { unique: [keyField] });
    }
    clearCollection() {
        this.collection.clear({ removeIndices: false });
    }
    configureLokiStorage(options, databaseInitialize) {
        const idbAdapter = new LokiIndexedAdapter();
        this.db = new Loki(options.name, {
            adapter: idbAdapter,
            autoload: true,
            autoloadCallback: databaseInitialize,
            autosave: true,
            autosaveInterval: 4000
        });
    }
    findAndRemoveItem(key) {
        this.collection.findAndRemove({ [keyField]: key });
    }
    getCollection(options) {
        return this.db.getCollection(options.storeName);
    }
    databaseInitialize(options, resolve) {
        this.collection = this.getCollection(options);
        if (!this.hasCollection()) {
            this.collection = this.addCollection(options);
        }
        resolve();
    }
    getItemInCollectionBy(fieldKey, key) {
        return this.collection.by(fieldKey, key);
    }
    getLokiMap() {
        return this.collection.constraints.unique[keyField].lokiMap;
    }
    hasCollection() {
        return this.collection;
    }
    hasDataInCollection() {
        return this.collection.data && this.collection.data.length;
    }
    hasCollectionAndDataInCollection() {
        return this.hasCollection() && this.hasDataInCollection();
    }
    insertOrUpdate(item, value, key) {
        if (item) {
            item.value = value;
            this.collection.update(item);
        }
        else {
            this.collection.insert({ [keyField]: key, value: value });
        }
    }
    iterateWithDataItem(iteratorcallback) {
        this.collection.data.forEach(element => {
            iteratorcallback(element.value, element[keyField], element.$loki);
        });
    }
    getNumberItensInCollection() {
        return this.collection.count();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9raS1kcml2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zdG9yYWdlL3NyYy9saWIvZHJpdmVycy9sb2tpanMvcG8tbG9raS1kcml2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sUUFBUSxDQUFDO0FBQzFCLE9BQU8sa0JBQWtCLE1BQU0saUNBQWlDLENBQUM7QUFFakUsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDO0FBRXZCLE1BQU0sT0FBTyxZQUFZO0lBS3ZCO1FBQ0UsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxNQUFNLEdBQUc7WUFDWixPQUFPLEVBQUUsUUFBUTtZQUNqQixZQUFZLEVBQUUsVUFBVSxPQUFZO2dCQUNsQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbkMsQ0FBQztZQUNELEtBQUssRUFBRTtnQkFDTCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDMUIsQ0FBQztZQUNELE9BQU8sRUFBRSxVQUFVLEdBQVE7Z0JBQ3pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDakMsQ0FBQztZQUNELE9BQU8sRUFBRSxVQUFVLGdCQUFxQjtnQkFDdEMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzlDLENBQUM7WUFDRCxHQUFHLEVBQUUsVUFBVSxDQUFNO2dCQUNuQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzNCLENBQUM7WUFDRCxJQUFJLEVBQUU7Z0JBQ0osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pCLENBQUM7WUFDRCxNQUFNLEVBQUU7Z0JBQ04s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InNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMb2tpIGZyb20gJ2xva2lqcyc7XHJcbmltcG9ydCBMb2tpSW5kZXhlZEFkYXB0ZXIgZnJvbSAnbG9raWpzL3NyYy9sb2tpLWluZGV4ZWQtYWRhcHRlcic7XHJcblxyXG5jb25zdCBrZXlGaWVsZCA9ICdrZXknO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvTG9raURyaXZlciB7XHJcbiAgcHJpdmF0ZSBjb2xsZWN0aW9uO1xyXG4gIHByaXZhdGUgZGI6IGFueTtcclxuICBwcml2YXRlIGRyaXZlcjogYW55O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgdGhpcy5kcml2ZXIgPSB7XHJcbiAgICAgIF9kcml2ZXI6ICdsb2tpanMnLFxyXG4gICAgICBfaW5pdFN0b3JhZ2U6IGZ1bmN0aW9uIChvcHRpb25zOiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gc2VsZi5pbml0U3RvcmFnZShvcHRpb25zKTtcclxuICAgICAgfSxcclxuICAgICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gc2VsZi5jbGVhcih0aGlzKTtcclxuICAgICAgfSxcclxuICAgICAgZ2V0SXRlbTogZnVuY3Rpb24gKGtleTogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGYuZ2V0SXRlbSh0aGlzLCBrZXkpO1xyXG4gICAgICB9LFxyXG4gICAgICBpdGVyYXRlOiBmdW5jdGlvbiAoaXRlcmF0b3JDYWxsYmFjazogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGYuaXRlcmF0ZSh0aGlzLCBpdGVyYXRvckNhbGxiYWNrKTtcclxuICAgICAgfSxcclxuICAgICAga2V5OiBmdW5jdGlvbiAobjogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGYua2V5KHRoaXMsIG4pO1xyXG4gICAgICB9LFxyXG4gICAgICBrZXlzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGYua2V5cyh0aGlzKTtcclxuICAgICAgfSxcclxuICAgICAgbGVuZ3RoOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGYubGVuZ3RoKHRoaXMpO1xyXG4gICAgICB9LFxyXG4gICAgICByZW1vdmVJdGVtOiBmdW5jdGlvbiAoa2V5OiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gc2VsZi5yZW1vdmVJdGVtKHRoaXMsIGtleSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHNldEl0ZW06IGZ1bmN0aW9uIChrZXk6IGFueSwgdmFsdWU6IGFueSkge1xyXG4gICAgICAgIHJldHVybiBzZWxmLnNldEl0ZW0odGhpcywga2V5LCB2YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBGdW7Dp8O1ZXMgZGUgaXRlcmHDp8Ojb1xyXG5cclxuICBwcml2YXRlIGNsZWFyKGxvY2FsZm9yYWdlOiBhbnkpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgbG9jYWxmb3JhZ2UucmVhZHkoKS50aGVuKCgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5oYXNDb2xsZWN0aW9uQW5kRGF0YUluQ29sbGVjdGlvbigpKSB7XHJcbiAgICAgICAgICB0aGlzLmNsZWFyQ29sbGVjdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXNvbHZlKG51bGwpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRJdGVtKGxvY2FsZm9yYWdlOiBhbnksIGtleTogYW55KSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgIGxvY2FsZm9yYWdlLnJlYWR5KCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzQ29sbGVjdGlvbkFuZERhdGFJbkNvbGxlY3Rpb24oKSkge1xyXG4gICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZ2V0SXRlbUluQ29sbGVjdGlvbkJ5KGtleUZpZWxkLCBrZXkpO1xyXG4gICAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgcmVzb2x2ZShpdGVtLnZhbHVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdFN0b3JhZ2Uob3B0aW9uczogYW55KSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdGhpcy5jb25maWd1cmVMb2tpU3RvcmFnZShvcHRpb25zLCB0aGlzLmRhdGFiYXNlSW5pdGlhbGl6ZS5iaW5kKHRoaXMsIG9wdGlvbnMsIHJlc29sdmUpKTtcclxuICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY29uZmlndXJlIExva2kgU3RvcmFnZWApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXRlcmF0ZShsb2NhbGZvcmFnZTogYW55LCBpdGVyYXRvckNhbGxiYWNrOiBGdW5jdGlvbikge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICBsb2NhbGZvcmFnZS5yZWFkeSgpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmhhc0NvbGxlY3Rpb25BbmREYXRhSW5Db2xsZWN0aW9uKCkpIHtcclxuICAgICAgICAgIHRoaXMuaXRlcmF0ZVdpdGhEYXRhSXRlbShpdGVyYXRvckNhbGxiYWNrKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUga2V5KGxvY2FsZm9yYWdlOiBhbnksIG46IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICBsb2NhbGZvcmFnZS5yZWFkeSgpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmhhc0NvbGxlY3Rpb24oKSkge1xyXG4gICAgICAgICAgY29uc3QgbWFwID0gdGhpcy5nZXRMb2tpTWFwKCk7XHJcbiAgICAgICAgICByZXNvbHZlKG1hcFtuXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc29sdmUobnVsbCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGtleXMobG9jYWxmb3JhZ2U6IGFueSkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICBsb2NhbGZvcmFnZS5yZWFkeSgpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmhhc0NvbGxlY3Rpb24oKSkge1xyXG4gICAgICAgICAgY29uc3Qga2V5cyA9IFtdO1xyXG4gICAgICAgICAgY29uc3QgbWFwID0gdGhpcy5nZXRMb2tpTWFwKCk7XHJcbiAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhtYXApKSB7XHJcbiAgICAgICAgICAgIGtleXMucHVzaChtYXBba2V5XSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXNvbHZlKGtleXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXNvbHZlKG51bGwpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBsZW5ndGgobG9jYWxmb3JhZ2U6IGFueSkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICBsb2NhbGZvcmFnZS5yZWFkeSgpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmhhc0NvbGxlY3Rpb24oKSkge1xyXG4gICAgICAgICAgcmVzb2x2ZSh0aGlzLmdldE51bWJlckl0ZW5zSW5Db2xsZWN0aW9uKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXNvbHZlKDApO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZW1vdmVJdGVtKGxvY2FsZm9yYWdlOiBhbnksIGtleTogYW55KSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgIGxvY2FsZm9yYWdlLnJlYWR5KCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzQ29sbGVjdGlvbigpKSB7XHJcbiAgICAgICAgICB0aGlzLmZpbmRBbmRSZW1vdmVJdGVtKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc29sdmUobnVsbCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldEl0ZW0obG9jYWxmb3JhZ2U6IGFueSwga2V5OiBhbnksIHZhbHVlOiBhbnkpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgbG9jYWxmb3JhZ2UucmVhZHkoKS50aGVuKCgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5oYXNDb2xsZWN0aW9uKCkpIHtcclxuICAgICAgICAgIGxldCBpdGVtOiBhbnk7XHJcbiAgICAgICAgICBpZiAodGhpcy5oYXNEYXRhSW5Db2xsZWN0aW9uKCkpIHtcclxuICAgICAgICAgICAgaXRlbSA9IHRoaXMuZ2V0SXRlbUluQ29sbGVjdGlvbkJ5KGtleUZpZWxkLCBrZXkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5pbnNlcnRPclVwZGF0ZShpdGVtLCB2YWx1ZSwga2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBGdW7Dp8O1ZXMgZGUgYWNlc3NvIGFvIHN0b3JhZ2VcclxuXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9tZW1iZXItb3JkZXJpbmdcclxuICBnZXREcml2ZXIoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kcml2ZXI7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFkZENvbGxlY3Rpb24ob3B0aW9uczogYW55KTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLmRiLmFkZENvbGxlY3Rpb24ob3B0aW9ucy5zdG9yZU5hbWUsIHsgdW5pcXVlOiBba2V5RmllbGRdIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjbGVhckNvbGxlY3Rpb24oKSB7XHJcbiAgICB0aGlzLmNvbGxlY3Rpb24uY2xlYXIoeyByZW1vdmVJbmRpY2VzOiBmYWxzZSB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY29uZmlndXJlTG9raVN0b3JhZ2Uob3B0aW9uczogYW55LCBkYXRhYmFzZUluaXRpYWxpemU6IGFueSkge1xyXG4gICAgY29uc3QgaWRiQWRhcHRlciA9IG5ldyBMb2tpSW5kZXhlZEFkYXB0ZXIoKTtcclxuICAgIHRoaXMuZGIgPSBuZXcgTG9raShvcHRpb25zLm5hbWUsIHtcclxuICAgICAgYWRhcHRlcjogaWRiQWRhcHRlcixcclxuICAgICAgYXV0b2xvYWQ6IHRydWUsXHJcbiAgICAgIGF1dG9sb2FkQ2FsbGJhY2s6IGRhdGFiYXNlSW5pdGlhbGl6ZSxcclxuICAgICAgYXV0b3NhdmU6IHRydWUsXHJcbiAgICAgIGF1dG9zYXZlSW50ZXJ2YWw6IDQwMDBcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBmaW5kQW5kUmVtb3ZlSXRlbShrZXk6IGFueSkge1xyXG4gICAgdGhpcy5jb2xsZWN0aW9uLmZpbmRBbmRSZW1vdmUoeyBba2V5RmllbGRdOiBrZXkgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldENvbGxlY3Rpb24ob3B0aW9uczogYW55KTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLmRiLmdldENvbGxlY3Rpb24ob3B0aW9ucy5zdG9yZU5hbWUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkYXRhYmFzZUluaXRpYWxpemUob3B0aW9uczogYW55LCByZXNvbHZlOiBGdW5jdGlvbikge1xyXG4gICAgdGhpcy5jb2xsZWN0aW9uID0gdGhpcy5nZXRDb2xsZWN0aW9uKG9wdGlvbnMpO1xyXG4gICAgaWYgKCF0aGlzLmhhc0NvbGxlY3Rpb24oKSkge1xyXG4gICAgICB0aGlzLmNvbGxlY3Rpb24gPSB0aGlzLmFkZENvbGxlY3Rpb24ob3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICByZXNvbHZlKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEl0ZW1JbkNvbGxlY3Rpb25CeShmaWVsZEtleTogc3RyaW5nLCBrZXk6IGFueSkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvbi5ieShmaWVsZEtleSwga2V5KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0TG9raU1hcCgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24uY29uc3RyYWludHMudW5pcXVlW2tleUZpZWxkXS5sb2tpTWFwO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYXNDb2xsZWN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvbjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFzRGF0YUluQ29sbGVjdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24uZGF0YSAmJiB0aGlzLmNvbGxlY3Rpb24uZGF0YS5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhc0NvbGxlY3Rpb25BbmREYXRhSW5Db2xsZWN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaGFzQ29sbGVjdGlvbigpICYmIHRoaXMuaGFzRGF0YUluQ29sbGVjdGlvbigpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbnNlcnRPclVwZGF0ZShpdGVtOiBhbnksIHZhbHVlOiBhbnksIGtleTogYW55KSB7XHJcbiAgICBpZiAoaXRlbSkge1xyXG4gICAgICBpdGVtLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgIHRoaXMuY29sbGVjdGlvbi51cGRhdGUoaXRlbSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNvbGxlY3Rpb24uaW5zZXJ0KHsgW2tleUZpZWxkXToga2V5LCB2YWx1ZTogdmFsdWUgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGl0ZXJhdGVXaXRoRGF0YUl0ZW0oaXRlcmF0b3JjYWxsYmFjazogRnVuY3Rpb24pIHtcclxuICAgIHRoaXMuY29sbGVjdGlvbi5kYXRhLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgIGl0ZXJhdG9yY2FsbGJhY2soZWxlbWVudC52YWx1ZSwgZWxlbWVudFtrZXlGaWVsZF0sIGVsZW1lbnQuJGxva2kpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldE51bWJlckl0ZW5zSW5Db2xsZWN0aW9uKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uLmNvdW50KCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==