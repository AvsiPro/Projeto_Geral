{"version":3,"file":"po-storage.service.d.ts","sources":["po-storage.service.d.ts"],"names":[],"mappingssourcesContent":["import { InjectionToken } from '@angular/core';\r\nimport 'localforage';\r\nimport { PoStorageConfig } from './po-storage-config.interface';\r\nexport declare const PO_STORAGE_CONFIG_TOKEN: InjectionToken<unknown>;\r\n/**\r\n * @description\r\n *\r\n * O PO Storage é uma biblioteca que fornece um serviço para armazenamento de dados no dispositivo local, sendo semelhante\r\n * ao funcionamento do [IonicStorage](https://ionicframework.com/docs/storage/).\r\n * É possível utilizar os drivers [Websql](https://dev.w3.org/html5/webdatabase/), [Indexeddb](https://www.w3.org/TR/IndexedDB/),\r\n * [LocalStorage](https://html.spec.whatwg.org/multipage/webstorage.html) e também [LokiJS](https://github.com/techfort/LokiJS/wiki).\r\n *\r\n * Para um melhor ganho de performance ao buscar e salvar dados, recomendamos a utilização do `LokiJS`, um *database*\r\n * orientado a documento semelhante ao MongoDB, que além de permitir a persistência dos dados no dispositivo possibilita\r\n * também o armazenamento dos dados em memória. Outra vantagem, é o aumento do limite de armazenamento para\r\n * aproximadamente `300mb`.\r\n *\r\n * A estrutura utilizada para armazenar os dados é a de chave/valor, onde uma chave funciona como um identificador exclusivo.\r\n *\r\n * #### Instalando o PO Storage\r\n *\r\n * Para instalar o `po-storage` em sua aplicação execute o seguinte comando:\r\n *\r\n * ```shell\r\n * ng add @po-ui/ng-storage\r\n * ```\r\n * Será instalado o pacote `@po-ui/ng-storage` e também já importará `PoStorageModule` no módulo principal da sua aplicação, conforme abaixo:\r\n *\r\n * ```typescript\r\n * import { PoStorageModule } from '@po-ui/ng-storage';\r\n *\r\n * @NgModule({\r\n *  declarations: [...],\r\n *  imports: [\r\n *    // Importação do módulo PoStorageModule\r\n *    PoStorageModule.forRoot(),\r\n *  ],\r\n *  bootstrap: [IonicApp],\r\n *  providers: [...]\r\n * })\r\n * export class AppModule {}\r\n * ```\r\n *\r\n * Com a declaração do módulo, é criada uma base de dados no armazenamento local e o serviço `PoStorageService` estará\r\n * pronto para ser utilizada na sua aplicação.\r\n *\r\n * #### Configurando as opções de armazenamento\r\n *\r\n * Na importação do módulo, o método `PoStorageModule.forRoot()` pode receber como parâmetro um objeto do tipo\r\n * [`PoStorageConfig`](documentation/po-storage#po-storage-config),\r\n * que serve para configurar as opções personalizadas do armazenamento, como por exemplo: o tipo de armazenamento\r\n * preferêncial.\r\n *\r\n * Caso não seja passada nenhuma configuração a ordem padrão será: ['websql', 'indexeddb', 'localstorage', 'lokijs'].\r\n *\r\n * Abaixo segue um exemplo de configuração onde o storage preferencial passa a ser o `lokijs`:\r\n *\r\n * ```typescript\r\n * import { PoStorageModule } from '@po-ui/ng-storage';\r\n *\r\n * @NgModule({\r\n *  declarations: [...],\r\n *  imports: [\r\n *    // Importação do módulo PoStorageModule com a configuração personalizada\r\n *    PoStorageModule.forRoot({\r\n *      name: 'mystorage',\r\n *      storeName: '_mystore',\r\n *      driverOrder: ['lokijs', 'websql', 'indexeddb', 'localstorage']\r\n *    }),\r\n *  ],\r\n *  bootstrap: [IonicApp],\r\n *  providers: [...]\r\n * })\r\n * export class AppModule {}\r\n * ```\r\n */\r\nexport declare class PoStorageService {\r\n    private driver;\r\n    private idleQueue;\r\n    private storagePromise;\r\n    private lokijsDriver;\r\n    constructor(config?: PoStorageConfig);\r\n    /**\r\n     * Retorna a configuração padrão para o armazenamento. Caso nenhuma configuração seja inserida,\r\n     * essa configuração será utilizada.\r\n     *\r\n     * @returns {PoStorageConfig} Objeto com a configuração padrão do armazenamento.\r\n     */\r\n    static getDefaultConfig(): PoStorageConfig;\r\n    /**\r\n     * Cria uma instância do `PoStorageService` com a configuração de armazenamento passada como parâmetro.\r\n     *\r\n     * @param {PoStorageConfig} storageConfig Configuração para o armazenamento.\r\n     * @returns {PoStorageService} Instância do `PoStorageService`.\r\n     */\r\n    static providePoStorage(storageConfig?: PoStorageConfig): PoStorageService;\r\n    private static getConfig;\r\n    /**\r\n     * Busca uma lista armazenada pela chave e concatena com a lista passada por parâmetro.\r\n     *\r\n     * Por exemplo:\r\n     *\r\n     * ``` typescript\r\n     * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n     *\r\n     * this.poStorageService.set('clientKey', clients).then(() => {});\r\n     *\r\n     * ...\r\n     *\r\n     * const newClients = [ { name: 'Lisa', age: 36 }, { name: 'Bruce', age: 18 } ];\r\n     *\r\n     * this.poStorageService.appendArrayToArray('clientKey', newClients).then(() => {\r\n     *   // A lista agora será:\r\n     *   // [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }, { name: 'Lisa', age: 36 }, { name: 'Bruce', age: 18 }];\r\n     * });\r\n     * ```\r\n     *\r\n     * @param {string} key Chave da lista armazenada.\r\n     * @param {Array} value Lista que será concatenada.\r\n     *\r\n     * @returns {Promise<any>} Promessa que é resolvida após as duas listas serem concatenadas e armazenadas localmente.\r\n     */\r\n    appendArrayToArray(key: string, value: Array<any>): Promise<any>;\r\n    /**\r\n     * Acrescenta um item em uma lista armazenada pela chave.\r\n     *\r\n     * @param {string} key Chave da lista armazenada.\r\n     * @param {Array} value Item que será acrescentado na lista.\r\n     *\r\n     * @returns {Promise<any>} Promessa que é resolvida após o item ser acrescentado na lista armazenada.\r\n     */\r\n    appendItemToArray(key: string, value: any): Promise<any>;\r\n    /**\r\n     * Remove todos os itens da base de dados local configurada na declaração do módulo `PoStorageModule`.\r\n     *\r\n     * > Utilize este método com cautela, para evitar a perda indesejada de dados.\r\n     *\r\n     * @returns {Promise<void>} Promessa que é resolvida após todos os itens da base de dados local serem removidos.\r\n     */\r\n    clear(): Promise<void>;\r\n    /**\r\n     * Verifica se existe um valor dentro de uma determinada chave.\r\n     *\r\n     * @param {string} key Chave que será verificada.\r\n     *\r\n     * @returns {Promise<boolean>} Promessa que é resolvida quando a verificação da existência do valor na chave é concluída.\r\n     */\r\n    exists(key: string): Promise<boolean>;\r\n    /**\r\n     * Itera sobre todas as chaves armazenadas.\r\n     *\r\n     * @param {any} iteratorCallback Função de `callback` que é chamada a cada iteração, com os seguintes parâmetros:\r\n     * valor, chave e número da iteração.\r\n     *\r\n     * Exemplo de utilização:\r\n     *\r\n     * ``` typescript\r\n     * this.poStorageService.forEach((value: any, key: string, iterationNumber: number) => {\r\n     *   // Iteração sobre cada chave armazenada.\r\n     * });\r\n     * ```\r\n     *\r\n     * @returns {Promise<void>} Promessa que é resolvida após a iteração sobre todas as chaves armazenadas.\r\n     */\r\n    forEach(iteratorCallback: (value: any, key: string, iterationNumber: number) => any): Promise<void>;\r\n    /**\r\n     * Retorna o valor armazenado em uma determinada chave.\r\n     *\r\n     * @param {string} key Chave que identifica o item.\r\n     * @param {boolean} lock Define se irá travar a leitura e a escrita da base de dados para não ser acessada de forma paralela.\r\n     * Caso outra leitura/escrita já tenha sido iniciada, este método irá esperar o outro terminar para então começar.\r\n     *\r\n     * Padrão: `false`.\r\n     *\r\n     * > Esta definição só será válida se o outro acesso paralelo a este método também estiver com o parâmetro *lock* ativado.\r\n     * @returns {Promise<any>} Promessa que é resolvida após o item ser buscado.\r\n     */\r\n    get(key: string, lock?: boolean): Promise<any>;\r\n    /**\r\n     * Retorna o nome do *driver* que está sendo usado para armazenar os dados, por exemplo: localStorage.\r\n     *\r\n     * @returns {string | null} Nome do *driver*.\r\n     */\r\n    getDriver(): string;\r\n    /**\r\n     * Retorna o primeiro item de uma lista para uma determinada chave.\r\n     *\r\n     * @param {string} key Chave da lista.\r\n     * @returns {Promise<any>} Promessa que é resolvida após o primeiro item ser encontrado.\r\n     */\r\n    getFirstItem(key: string): Promise<any>;\r\n    /**\r\n     * Remove o primeiro item de uma lista a partir da chave.\r\n     *\r\n     * @param {string} key Chave da lista que será removido o primeiro item.\r\n     * @returns {Promise<any>} Promessa que é resolvida após o primeiro item da lista ser removido.\r\n     */\r\n    getItemAndRemove(key: string): Promise<any>;\r\n    /**\r\n     * Busca o primeiro objeto encontrado dentro de uma lista pelo do valor de um campo.\r\n     *\r\n     * Por exemplo:\r\n     *\r\n     * ``` typescript\r\n     * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n     *\r\n     * this.poStorageService.set('clientKey', clients).then(() => {});\r\n     *\r\n     * ...\r\n     *\r\n     * this.poStorageService.getItemByField('clientKey', 'name', 'Marie').then(client => {\r\n     *   // Resultado do console.log: { name: 'Marie', age: 23 }\r\n     *   console.log(client);\r\n     * });\r\n     * ```\r\n     *\r\n     * @param {string} key Chave da lista.\r\n     * @param {string} fieldName O campo a ser filtrado.\r\n     * @param {any} fieldValue O valor do campo.\r\n     * @returns {Promise<any>} Promessa que é resolvida com o item que foi encontrado.\r\n     */\r\n    getItemByField(key: string, fieldName: string, fieldValue: any): Promise<any>;\r\n    /**\r\n     * Lista com todas as chaves armazenadas.\r\n     *\r\n     * @returns {Promise<Array<string>>} Promessa que é resolvida com todas as chaves armazenadas.\r\n     */\r\n    keys(): Promise<Array<string>>;\r\n    /**\r\n     * Quantidade de chaves armazenadas.\r\n     *\r\n     * @returns {Promise<number>} Promessa que é resolvida com o número de chaves armazenadas.\r\n     */\r\n    length(): Promise<number>;\r\n    /**\r\n     * Utilizado para gerenciar o bloqueio e desbloqueio de recursos no `PoStorageService`.\r\n     * Aguardando a liberação da utilização dos recursos que participam deste comportamento e posteriormente envolve o recurso\r\n     * passado como parâmetro em um comportamento de bloqueio e desbloqueio.\r\n     *\r\n     * Este método se comporta igual a utilização em conjunta dos métodos: `PoStorageService.requestIdlePromise()`,\r\n     * `PoStorageService.lock()` e `PoStorageService.unlook()`.\r\n     *\r\n     * Veja mais no método: [`PoStorage.requestIdlePromise()`](documentation/po-storage#request-idle-promise).\r\n     *\r\n     * @param {Function} limitedResource Função que será envolvida no comportamento de bloqueio e desbloqueio.\r\n     */\r\n    limitedCallWrap(limitedResource: Function): Promise<any>;\r\n    /**\r\n     * Incrementa um valor na fila de bloqueio do `PoStorageService`. Utilizado juntamente com o método `unlock` para poder\r\n     * controlar a execução de uma determinada tarefa com o `PoStorage.requestIdlePromise()`.\r\n     *\r\n     * Veja mais no método: [`PoStorage.requestIdlePromise()`](documentation/po-storage#request-idle-promise).\r\n     */\r\n    lock(): void;\r\n    /**\r\n     * Determina se o processo de inicialização do *driver* assíncrono foi concluído.\r\n     *\r\n     * @returns {Promise<LocalForage>} Promessa que é resolvida quando o processo de inicialização do *driver* assíncrono\r\n     * for concluído.\r\n     */\r\n    ready(): Promise<LocalForage>;\r\n    /**\r\n     * Remove um valor associado a uma chave.\r\n     *\r\n     * @param {key} key Chave do valor que será removido.\r\n     * @returns {Promise<any>} Promessa que é resolvida após o valor ser removido.\r\n     */\r\n    remove(key: string): Promise<any>;\r\n    /**\r\n     * Remove uma propriedade de um objeto armazenado.\r\n     *\r\n     * @param {string} key Chave do objeto armazenado.\r\n     * @param {string} property Propriedade que será removida.\r\n     *\r\n     * @returns {Promise<any>} Promessa que é resolvida após a propriedade ser removida.\r\n     */\r\n    removeIndexFromObject(key: string, property: string): Promise<any>;\r\n    /**\r\n     * Remove um objeto de uma lista armazenada pelo valor de uma propriedade.\r\n     *\r\n     * Por exemplo:\r\n     *\r\n     * ``` typescript\r\n     * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n     *\r\n     * this.poStorageService.set('clientKey', clients).then(() => {});\r\n     *\r\n     * ...\r\n     *\r\n     * this.poStorageService.removeItemFromArray('clientKey', 'name', 'Marie').then(() => {\r\n     *   // O objeto { name: 'Marie', age: 23 } foi removido da lista que está na chave 'clientKey'\r\n     * });\r\n     * ```\r\n     *\r\n     * @param {string} key Chave da lista que contém o item que será removido.\r\n     * @param {string} field O campo a ser filtrado no item.\r\n     * @param {string} value O valor do filtro.\r\n     * @returns {Promise<any>} Promessa que é resolvida quando o objeto for removido da lista.\r\n     */\r\n    removeItemFromArray(key: string, field: string, value: any): Promise<any>;\r\n    /**\r\n     * <a id=\"request-idle-promise\"></a>\r\n     * Método que verifica se o acesso a base de dados configurada está liberado.\r\n     *\r\n     * Utilizado em conjunto com os métodos `lock()` e `unlock()` entre tarefas que não podem ser executadas de forma\r\n     * paralela, para não causar inconsistências nos dados.\r\n     *\r\n     * Exemplo de utilização:\r\n     *\r\n     * ```\r\n     * // Aguarda a liberação para continuar\r\n     * await this.poStorage.requestIdlePromise();\r\n     *\r\n     * this.poStorage.lock();\r\n     *\r\n     * // Executa uma tarefa que irá ler e/ou escrever na base de dados configurada.\r\n     *\r\n     * this.poStorage.unlock();\r\n     * ```\r\n     *\r\n     * > É importante sempre utilizá-lo antes de executar os métodos `lock()` e `unlock()` para garantir que a tarefa só\r\n     * será executada caso o acesso esteja livre.\r\n     *\r\n     * @returns {Promise<any>} Promessa que é resolvida quando o acesso a base de dados configurada estiver liberado.\r\n     */\r\n    requestIdlePromise(): Promise<any>;\r\n    /**\r\n     * Grava um valor em uma determinada chave.\r\n     *\r\n     * @param {string} key Chave para o valor que será gravado.\r\n     * @param {any} value Valor que será gravado.\r\n     * @param {boolean} lock Define se irá travar a leitura e a escrita da base de dados para não ser acessada de forma paralela.\r\n     * Caso outra leitura/escrita já tenha sido iniciada, este método irá esperar o outro terminar para então começar.\r\n     *\r\n     * Padrão: `false`.\r\n     *\r\n     * > Esta definição só será válida se o outro acesso paralelo a este método também estiver com o parâmetro *lock* ativado.\r\n     * @returns {Promise<any>} Promessa que é resolvida após o valor ter sido gravado.\r\n     */\r\n    set(key: string, value: any, lock?: boolean): Promise<any>;\r\n    /**\r\n     * Atribui um valor a uma propriedade de um objeto armazenado pela chave.\r\n     *\r\n     * Por exemplo:\r\n     *\r\n     * ``` typescript\r\n     * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n     *\r\n     * this.poStorageService.set('clientKey', clients).then(() => {});\r\n     *\r\n     * ...\r\n     *\r\n     * this.poStorageService.setIndexToObject('clientKey', 'name', 'Clare').then(() => {\r\n     *   // O objeto { name: 'Marie', age: 23 } passa a ser { name: 'Clare', age: 23 }\r\n     * });\r\n     * ```\r\n     *\r\n     * @param {string} key Chave do objeto.\r\n     * @param {string} property Nome da propriedade do objeto.\r\n     * @param {any} value Valor que será gravado na propriedade do objeto.\r\n     */\r\n    setIndexToObject(key: string, property: string, value: any): Promise<any>;\r\n    /**\r\n     * Decrementa um valor na fila de bloqueio. Utilizado juntamente com o método `lock` para poder\r\n     * controlar a execução de uma determinada tarefa com o `PoStorage.requestIdlePromise()`.\r\n     *\r\n     * Veja mais no método: [`PoStorage.requestIdlePromise()`](documentation/po-storage#request-idle-promise).\r\n     */\r\n    unlock(): void;\r\n    private getArrayOfStorage;\r\n    private getImmutableItem;\r\n    private defineLocalForageDriver;\r\n    private getDriverOrder;\r\n    private getObjectOfStorage;\r\n    private setDriver;\r\n    private setStoragePromise;\r\n    private getStorageInstance;\r\n}\r\n"]}