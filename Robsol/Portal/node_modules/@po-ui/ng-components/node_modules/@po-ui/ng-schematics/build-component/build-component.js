"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildComponent = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const find_module_1 = require("@schematics/angular/utility/find-module");
const core_1 = require("@angular-devkit/core");
const parse_name_1 = require("@schematics/angular/utility/parse-name");
const validation_1 = require("@schematics/angular/utility/validation");
const supported_css_extensions_1 = require("../utils/supported-css-extensions");
const project_1 = require("../project");
const module_1 = require("../module");
function buildComponent(options) {
    return (host) => {
        var _a;
        const workspace = (_a = project_1.getWorkspaceConfigGracefully(host)) !== null && _a !== void 0 ? _a : {};
        const project = project_1.getProjectFromWorkspace(workspace, options.project);
        if (options.path === undefined && project) {
            options.path = project_1.getDefaultPath(project);
        }
        options.module = find_module_1.findModuleFromOptions(host, options);
        const parsedPath = parse_name_1.parseName(options.path, options.name);
        options.name = parsedPath.name;
        options.path = parsedPath.path;
        options.selector = buildSelector(options, (project && project.prefix) || '');
        if (!supported_css_extensions_1.supportedCssExtensions.includes(options.style)) {
            options.style = 'css';
        }
        validation_1.validateName(options.name);
        validation_1.validateHtmlSelector(options.selector);
        const templateSource = schematics_1.apply(schematics_1.url('./files'), [
            options.routing ? schematics_1.noop() : schematics_1.filter(path => !path.endsWith('-routing.module.ts.template')),
            options.createModule ? schematics_1.noop() : schematics_1.filter(path => !path.endsWith('.module.ts.template')),
            options.skipTests ? schematics_1.filter(path => !path.endsWith('.spec.ts.template')) : schematics_1.noop(),
            schematics_1.applyTemplates(Object.assign(Object.assign({}, core_1.strings), options)),
            schematics_1.move(null, parsedPath.path)
        ]);
        return schematics_1.chain([
            options.createModule ? addImportToModule(options) : addDeclarationToModule(options),
            schematics_1.mergeWith(templateSource)
        ]);
    };
}
exports.buildComponent = buildComponent;
function buildSelector(options, projectPrefix) {
    let selector = core_1.strings.dasherize(options.name);
    if (options.prefix) {
        selector = `${options.prefix}-${selector}`;
    }
    else if (options.prefix === undefined && projectPrefix) {
        selector = `${projectPrefix}-${selector}`;
    }
    return selector;
}
function addImportToModule(options) {
    return (tree) => {
        if (!options.module || options.routing) {
            return tree;
        }
        const modulePath = options.module;
        const componentModulePath = core_1.normalize(`/${options.path}/` + core_1.strings.dasherize(options.name) + '/' + core_1.strings.dasherize(options.name) + '.module');
        const relativePath = find_module_1.buildRelativePath(modulePath, componentModulePath);
        const classifiedModuleName = core_1.strings.classify(`${options.name}Module`);
        return module_1.addModuleImportToModule(tree, modulePath, classifiedModuleName, relativePath);
    };
}
function addDeclarationToModule(options) {
    return (tree) => {
        if (!options.module) {
            return tree;
        }
        const modulePath = options.module;
        const componentPath = core_1.normalize(`/${options.path}/` + core_1.strings.dasherize(options.name) + '/' + core_1.strings.dasherize(options.name) + '.component');
        const relativePath = find_module_1.buildRelativePath(modulePath, componentPath);
        const classifiedName = core_1.strings.classify(`${options.name}Component`);
        module_1.addDeclarationComponentToModule(tree, modulePath, classifiedName, relativePath);
        if (options.export) {
            module_1.addExportComponentToModule(tree, modulePath, classifiedName, relativePath);
        }
    };
}
//# sourceMappingURL=build-component.js.map