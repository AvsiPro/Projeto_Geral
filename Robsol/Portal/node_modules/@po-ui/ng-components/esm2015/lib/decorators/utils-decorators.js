/**
 * Função utilizada pela fábrica de decoradores para validar uma propriedade de uma classe durante
 * o ciclo de vida do Angular.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param lifecycleName clico de vida que se deseja executar com a validação.
 * @param callback função que será executada para validadar a propriedade.
 */
export function validatePropertyOnLifeCycle(decoratorProperties, lifecycleName, callback) {
    const { target, property } = decoratorProperties;
    const emptyFunction = () => { };
    const lifecycleFunctionClone = target[lifecycleName] || emptyFunction;
    Object.defineProperty(target, lifecycleName, {
        value: function () {
            callback.call(this, property, target);
            lifecycleFunctionClone.call(this);
        }
    });
}
/**
 * Função utilizada pela fábrica de decoradores para alterar/manipular o valor de uma propriedade.
 *
 * > Este decorator irá criar os métodos get e set internamente. Portanto,
 * é importante **não** criar nomes privados para as propriedades utilizando
 * `$$__nomeDaPropriedade` ao utilizar este decorator, pois ela será sobrescrita pela propriedade privada
 * criada pelo decorator.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param decoratorName nome do decorator
 * @param callback função que será executada para alterar o valor da propriedade
 */
export function changeValueByCallback(decoratorProperties, decoratorName, callback) {
    const { target, property, originalDescriptor } = decoratorProperties;
    const privatePropertyName = createPrivateProperty(target, property, decoratorName);
    return {
        get: getter(originalDescriptor, privatePropertyName),
        set: setter(originalDescriptor, callback, privatePropertyName)
    };
}
function setter(originalDescriptor, callback, privatePropertyName) {
    return function (value) {
        if (originalDescriptor && originalDescriptor.set) {
            originalDescriptor.set.bind(this)(callback(value));
        }
        this[privatePropertyName] = callback(value);
    };
}
function getter(originalDescriptor, privatePropName) {
    return function () {
        return originalDescriptor && originalDescriptor.get ? originalDescriptor.get.bind(this)() : this[privatePropName];
    };
}
export function createPrivateProperty(target, propertyName, decoratorName) {
    const privatePropName = `$$__${propertyName}`;
    if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {
        console.warn(`The prop "${privatePropName}" is already exist, it will be overrided by ${decoratorName} decorator.`);
    }
    Object.defineProperty(target, privatePropName, {
        configurable: true,
        writable: true
    });
    return privatePropName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMtZGVjb3JhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvZGVjb3JhdG9ycy91dGlscy1kZWNvcmF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsMkJBQTJCLENBQ3pDLG1CQUErQyxFQUMvQyxhQUFxQixFQUNyQixRQUFrQjtJQUVsQixNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLG1CQUFtQixDQUFDO0lBQ2pELE1BQU0sYUFBYSxHQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztJQUMvQixNQUFNLHNCQUFzQixHQUFvQixNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksYUFBYSxDQUFDO0lBRXZGLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRTtRQUMzQyxLQUFLLEVBQUU7WUFDTCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdEMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLENBQUM7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQ7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxNQUFNLFVBQVUscUJBQXFCLENBQ25DLG1CQUErQyxFQUMvQyxhQUFxQixFQUNyQixRQUFrQjtJQUVsQixNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRSxHQUFHLG1CQUFtQixDQUFDO0lBQ3JFLE1BQU0sbUJBQW1CLEdBQUcscUJBQXFCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUVuRixPQUFPO1FBQ0wsR0FBRyxFQUFFLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxtQkFBbUIsQ0FBQztRQUNwRCxHQUFHLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixFQUFFLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQztLQUMvRCxDQUFDO0FBQ0osQ0FBQztBQUNELFNBQVMsTUFBTSxDQUFDLGtCQUFrQixFQUFFLFFBQWtCLEVBQUUsbUJBQTJCO0lBQ2pGLE9BQU8sVUFBVSxLQUFLO1FBQ3BCLElBQUksa0JBQWtCLElBQUksa0JBQWtCLENBQUMsR0FBRyxFQUFFO1lBQ2hELGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDcEQ7UUFFRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLGtCQUFnRCxFQUFFLGVBQXVCO0lBQ3ZGLE9BQU87UUFDTCxPQUFPLGtCQUFrQixJQUFJLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDcEgsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxNQUFXLEVBQUUsWUFBb0IsRUFBRSxhQUFxQjtJQUM1RixNQUFNLGVBQWUsR0FBRyxPQUFPLFlBQVksRUFBRSxDQUFDO0lBRTlDLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsRUFBRTtRQUNqRSxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsZUFBZSwrQ0FBK0MsYUFBYSxhQUFhLENBQUMsQ0FBQztLQUNySDtJQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLGVBQWUsRUFBRTtRQUM3QyxZQUFZLEVBQUUsSUFBSTtRQUNsQixRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUMsQ0FBQztJQUVILE9BQU8sZUFBZSxDQUFDO0FBQ3pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9wZXJ0eURlY29yYXRvckludGVyZmFjZSB9IGZyb20gJy4vcHJvcGVydHktZGVjb3JhdG9yLmludGVyZmFjZSc7XHJcblxyXG4vKipcclxuICogRnVuw6fDo28gdXRpbGl6YWRhIHBlbGEgZsOhYnJpY2EgZGUgZGVjb3JhZG9yZXMgcGFyYSB2YWxpZGFyIHVtYSBwcm9wcmllZGFkZSBkZSB1bWEgY2xhc3NlIGR1cmFudGVcclxuICogbyBjaWNsbyBkZSB2aWRhIGRvIEFuZ3VsYXIuXHJcbiAqXHJcbiAqIEBwYXJhbSBkZWNvcmF0b3JQcm9wZXJ0aWVzIHByb3ByaWVkYWRlcyBkYSBpbnRlcmZhY2UgUG9Qcm9wZXJ0eURlY29yYXRvckludGVyZmFjZS5cclxuICogQHBhcmFtIGxpZmVjeWNsZU5hbWUgY2xpY28gZGUgdmlkYSBxdWUgc2UgZGVzZWphIGV4ZWN1dGFyIGNvbSBhIHZhbGlkYcOnw6NvLlxyXG4gKiBAcGFyYW0gY2FsbGJhY2sgZnVuw6fDo28gcXVlIHNlcsOhIGV4ZWN1dGFkYSBwYXJhIHZhbGlkYWRhciBhIHByb3ByaWVkYWRlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUHJvcGVydHlPbkxpZmVDeWNsZShcclxuICBkZWNvcmF0b3JQcm9wZXJ0aWVzOiBQcm9wZXJ0eURlY29yYXRvckludGVyZmFjZSxcclxuICBsaWZlY3ljbGVOYW1lOiBzdHJpbmcsXHJcbiAgY2FsbGJhY2s6IEZ1bmN0aW9uXHJcbikge1xyXG4gIGNvbnN0IHsgdGFyZ2V0LCBwcm9wZXJ0eSB9ID0gZGVjb3JhdG9yUHJvcGVydGllcztcclxuICBjb25zdCBlbXB0eUZ1bmN0aW9uID0gKCkgPT4ge307XHJcbiAgY29uc3QgbGlmZWN5Y2xlRnVuY3Rpb25DbG9uZTogRnVuY3Rpb24gfCBudWxsID0gdGFyZ2V0W2xpZmVjeWNsZU5hbWVdIHx8IGVtcHR5RnVuY3Rpb247XHJcblxyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGxpZmVjeWNsZU5hbWUsIHtcclxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgcHJvcGVydHksIHRhcmdldCk7XHJcbiAgICAgIGxpZmVjeWNsZUZ1bmN0aW9uQ2xvbmUuY2FsbCh0aGlzKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZ1bsOnw6NvIHV0aWxpemFkYSBwZWxhIGbDoWJyaWNhIGRlIGRlY29yYWRvcmVzIHBhcmEgYWx0ZXJhci9tYW5pcHVsYXIgbyB2YWxvciBkZSB1bWEgcHJvcHJpZWRhZGUuXHJcbiAqXHJcbiAqID4gRXN0ZSBkZWNvcmF0b3IgaXLDoSBjcmlhciBvcyBtw6l0b2RvcyBnZXQgZSBzZXQgaW50ZXJuYW1lbnRlLiBQb3J0YW50byxcclxuICogw6kgaW1wb3J0YW50ZSAqKm7Do28qKiBjcmlhciBub21lcyBwcml2YWRvcyBwYXJhIGFzIHByb3ByaWVkYWRlcyB1dGlsaXphbmRvXHJcbiAqIGAkJF9fbm9tZURhUHJvcHJpZWRhZGVgIGFvIHV0aWxpemFyIGVzdGUgZGVjb3JhdG9yLCBwb2lzIGVsYSBzZXLDoSBzb2JyZXNjcml0YSBwZWxhIHByb3ByaWVkYWRlIHByaXZhZGFcclxuICogY3JpYWRhIHBlbG8gZGVjb3JhdG9yLlxyXG4gKlxyXG4gKiBAcGFyYW0gZGVjb3JhdG9yUHJvcGVydGllcyBwcm9wcmllZGFkZXMgZGEgaW50ZXJmYWNlIFBvUHJvcGVydHlEZWNvcmF0b3JJbnRlcmZhY2UuXHJcbiAqIEBwYXJhbSBkZWNvcmF0b3JOYW1lIG5vbWUgZG8gZGVjb3JhdG9yXHJcbiAqIEBwYXJhbSBjYWxsYmFjayBmdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIHBhcmEgYWx0ZXJhciBvIHZhbG9yIGRhIHByb3ByaWVkYWRlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlVmFsdWVCeUNhbGxiYWNrKFxyXG4gIGRlY29yYXRvclByb3BlcnRpZXM6IFByb3BlcnR5RGVjb3JhdG9ySW50ZXJmYWNlLFxyXG4gIGRlY29yYXRvck5hbWU6IHN0cmluZyxcclxuICBjYWxsYmFjazogRnVuY3Rpb25cclxuKSB7XHJcbiAgY29uc3QgeyB0YXJnZXQsIHByb3BlcnR5LCBvcmlnaW5hbERlc2NyaXB0b3IgfSA9IGRlY29yYXRvclByb3BlcnRpZXM7XHJcbiAgY29uc3QgcHJpdmF0ZVByb3BlcnR5TmFtZSA9IGNyZWF0ZVByaXZhdGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBkZWNvcmF0b3JOYW1lKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGdldDogZ2V0dGVyKG9yaWdpbmFsRGVzY3JpcHRvciwgcHJpdmF0ZVByb3BlcnR5TmFtZSksXHJcbiAgICBzZXQ6IHNldHRlcihvcmlnaW5hbERlc2NyaXB0b3IsIGNhbGxiYWNrLCBwcml2YXRlUHJvcGVydHlOYW1lKVxyXG4gIH07XHJcbn1cclxuZnVuY3Rpb24gc2V0dGVyKG9yaWdpbmFsRGVzY3JpcHRvciwgY2FsbGJhY2s6IEZ1bmN0aW9uLCBwcml2YXRlUHJvcGVydHlOYW1lOiBzdHJpbmcpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKTogdm9pZCB7XHJcbiAgICBpZiAob3JpZ2luYWxEZXNjcmlwdG9yICYmIG9yaWdpbmFsRGVzY3JpcHRvci5zZXQpIHtcclxuICAgICAgb3JpZ2luYWxEZXNjcmlwdG9yLnNldC5iaW5kKHRoaXMpKGNhbGxiYWNrKHZhbHVlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpc1twcml2YXRlUHJvcGVydHlOYW1lXSA9IGNhbGxiYWNrKHZhbHVlKTtcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXR0ZXIob3JpZ2luYWxEZXNjcmlwdG9yOiBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjxhbnk+LCBwcml2YXRlUHJvcE5hbWU6IHN0cmluZykge1xyXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gb3JpZ2luYWxEZXNjcmlwdG9yICYmIG9yaWdpbmFsRGVzY3JpcHRvci5nZXQgPyBvcmlnaW5hbERlc2NyaXB0b3IuZ2V0LmJpbmQodGhpcykoKSA6IHRoaXNbcHJpdmF0ZVByb3BOYW1lXTtcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJpdmF0ZVByb3BlcnR5KHRhcmdldDogYW55LCBwcm9wZXJ0eU5hbWU6IHN0cmluZywgZGVjb3JhdG9yTmFtZTogc3RyaW5nKSB7XHJcbiAgY29uc3QgcHJpdmF0ZVByb3BOYW1lID0gYCQkX18ke3Byb3BlcnR5TmFtZX1gO1xyXG5cclxuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgcHJpdmF0ZVByb3BOYW1lKSkge1xyXG4gICAgY29uc29sZS53YXJuKGBUaGUgcHJvcCBcIiR7cHJpdmF0ZVByb3BOYW1lfVwiIGlzIGFscmVhZHkgZXhpc3QsIGl0IHdpbGwgYmUgb3ZlcnJpZGVkIGJ5ICR7ZGVjb3JhdG9yTmFtZX0gZGVjb3JhdG9yLmApO1xyXG4gIH1cclxuXHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJpdmF0ZVByb3BOYW1lLCB7XHJcbiAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICB3cml0YWJsZTogdHJ1ZVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gcHJpdmF0ZVByb3BOYW1lO1xyXG59XHJcbiJdfQ==