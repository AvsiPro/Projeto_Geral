import { Input, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { PoButtonGroupToggle } from './po-button-group-toggle.enum';
const PO_TOGGLE_TYPE_DEFAULT = 'none';
/**
 * @description
 *
 * O componente `po-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `po-button-group` com apenas 1 ação, para isso utilize o `po-button`.
 * - Procure utilizar no máximo 3 ações para cada `po-button-group`.
 *
 * > As recomendações do `po-button` também valem para o `po-button-group`.
 */
export class PoButtonGroupBaseComponent {
    constructor() {
        /** Lista de botões. */
        this.buttons = [];
        this._small = false;
        this._toggle = PO_TOGGLE_TYPE_DEFAULT;
    }
    /**
     * @optional
     *
     * @description
     *
     * Torna o grupo de botões com tamanho minificado.
     *
     * @default `false`
     */
    set small(value) {
        this._small = value === '' ? true : convertToBoolean(value);
    }
    get small() {
        return this._small;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de seleção de botões.
     *
     * > Veja os valores válidos no *enum* `PoMultiselectFilterMode`.
     *
     * @default `none`
     */
    set toggle(value) {
        this._toggle = Object.values(PoButtonGroupToggle).includes(value) ? value : PO_TOGGLE_TYPE_DEFAULT;
        this.checkSelecteds(this._toggle);
    }
    get toggle() {
        return this._toggle;
    }
    onButtonClick(buttonClicked, buttonIndex) {
        if (this.toggle === PoButtonGroupToggle.Single) {
            this.buttons.forEach((button, index) => (button.selected = index === buttonIndex ? !buttonClicked.selected : false));
        }
        else if (this.toggle === PoButtonGroupToggle.Multiple) {
            buttonClicked.selected = !buttonClicked.selected;
        }
    }
    checkSelecteds(toggleMode) {
        if (toggleMode === PoButtonGroupToggle.None) {
            this.deselectAllButtons();
        }
        else if (toggleMode === PoButtonGroupToggle.Single) {
            const hasMoreOneSelected = this.buttons.filter(button => button.selected).length > 1;
            if (hasMoreOneSelected) {
                this.deselectAllButtons();
            }
        }
    }
    deselectAllButtons() {
        this.buttons.forEach(button => (button.selected = false));
    }
}
PoButtonGroupBaseComponent.decorators = [
    { type: Directive }
];
PoButtonGroupBaseComponent.propDecorators = {
    buttons: [{ type: Input, args: ['p-buttons',] }],
    small: [{ type: Input, args: ['p-small',] }],
    toggle: [{ type: Input, args: ['p-toggle',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnV0dG9uLWdyb3VwLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWJ1dHRvbi1ncm91cC9wby1idXR0b24tZ3JvdXAtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFcEUsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLENBQUM7QUFFdEM7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCRztBQUVILE1BQU0sT0FBTywwQkFBMEI7SUFEdkM7UUFFRSx1QkFBdUI7UUFDSCxZQUFPLEdBQTZCLEVBQUUsQ0FBQztRQUVuRCxXQUFNLEdBQWEsS0FBSyxDQUFDO1FBQ3pCLFlBQU8sR0FBWSxzQkFBc0IsQ0FBQztJQWdFcEQsQ0FBQztJQTlEQzs7Ozs7Ozs7T0FRRztJQUNILElBQXNCLEtBQUssQ0FBQyxLQUFjO1FBQ3hDLElBQUksQ0FBQyxNQUFNLEdBQVEsS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHO0lBQ0gsSUFBdUIsTUFBTSxDQUFDLEtBQWE7UUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBUyxNQUFPLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDO1FBRTFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELGFBQWEsQ0FBQyxhQUFnQyxFQUFFLFdBQW1CO1FBQ2pFLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUU7WUFDOUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQ2xCLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLEtBQUssS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQy9GLENBQUM7U0FDSDthQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUU7WUFDdkQsYUFBYSxDQUFDLFFBQVEsR0FBRyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7U0FDbEQ7SUFDSCxDQUFDO0lBRU8sY0FBYyxDQUFDLFVBQWtCO1FBQ3ZDLElBQUksVUFBVSxLQUFLLG1CQUFtQixDQUFDLElBQUksRUFBRTtZQUMzQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztTQUMzQjthQUFNLElBQUksVUFBVSxLQUFLLG1CQUFtQixDQUFDLE1BQU0sRUFBRTtZQUNwRCxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDckYsSUFBSSxrQkFBa0IsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7YUFDM0I7U0FDRjtJQUNILENBQUM7SUFFTyxrQkFBa0I7UUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDOzs7WUFyRUYsU0FBUzs7O3NCQUdQLEtBQUssU0FBQyxXQUFXO29CQWNqQixLQUFLLFNBQUMsU0FBUztxQkFtQmYsS0FBSyxTQUFDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XHJcbmltcG9ydCB7IFBvQnV0dG9uR3JvdXBJdGVtIH0gZnJvbSAnLi9wby1idXR0b24tZ3JvdXAtaXRlbS5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0J1dHRvbkdyb3VwVG9nZ2xlIH0gZnJvbSAnLi9wby1idXR0b24tZ3JvdXAtdG9nZ2xlLmVudW0nO1xyXG5cclxuY29uc3QgUE9fVE9HR0xFX1RZUEVfREVGQVVMVCA9ICdub25lJztcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogTyBjb21wb25lbnRlIGBwby1idXR0b24tZ3JvdXBgIMOpIGZvcm1hZG8gcG9yIHVtIGNvbmp1bnRvIGRlIGJvdMO1ZXMgZGlzdHJpYnXDrWRvcyBob3Jpem9udGFsbWVudGUuXHJcbiAqIENhZGEgYm90w6NvIGRvIGdydXBvIMOpIHRyYXRhZG8gZGUgZm9ybWEgaW5kaXZpZHVhbCwgcmVjZWJlbmRvIGFzc2ltIHVtIHLDs3R1bG8sIHVtYSBhw6fDo28gYmVtIGNvbW8gc2UgZGV2ZXLDoSBlc3RhciBoYWJpbGl0YWRvIG91IG7Do28uXHJcbiAqXHJcbiAqIEVzdGUgY29tcG9uZW50ZSBhbMOpbSBkZSBzZXJ2aXIgY29tbyB1bSBhZ3J1cGFkb3IgZGUgYm90w7VlcyBwYXJhIGHDp8OjbywgdGFtYsOpbSBwZXJtaXRlIHF1ZSBzZWphbSB1dGlsaXphZG9zXHJcbiAqIHBhcmEgc2VsZcOnw7VlcyBtdWx0aXBsYXMgZSDDum5pY2FzLlxyXG4gKlxyXG4gKiBPIGdydXBvIGRlIGJvdMO1ZXMgZGV2ZSBzZXIgdXRpbGl6YWRvIHBhcmEgb3JnYW5pemFyIGFzIGHDp8O1ZXMgZGUgbWFuZWlyYSB1bmlmb3JtZSBlIHRyYW5zbWl0aXIgYSBpZGVpYSBkZSBxdWUgb3MgYm90w7VlcyBmYXplbVxyXG4gKiBwYXJ0ZSBkZSB1bSBtZXNtbyBjb250ZXh0by5cclxuICpcclxuICogIyMjIyBCb2FzIHByw6F0aWNhc1xyXG4gKlxyXG4gKiAtIEV2aXRlIHVzYXIgbyBgcG8tYnV0dG9uLWdyb3VwYCBjb20gYXBlbmFzIDEgYcOnw6NvLCBwYXJhIGlzc28gdXRpbGl6ZSBvIGBwby1idXR0b25gLlxyXG4gKiAtIFByb2N1cmUgdXRpbGl6YXIgbm8gbcOheGltbyAzIGHDp8O1ZXMgcGFyYSBjYWRhIGBwby1idXR0b24tZ3JvdXBgLlxyXG4gKlxyXG4gKiA+IEFzIHJlY29tZW5kYcOnw7VlcyBkbyBgcG8tYnV0dG9uYCB0YW1iw6ltIHZhbGVtIHBhcmEgbyBgcG8tYnV0dG9uLWdyb3VwYC5cclxuICovXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgY2xhc3MgUG9CdXR0b25Hcm91cEJhc2VDb21wb25lbnQge1xyXG4gIC8qKiBMaXN0YSBkZSBib3TDtWVzLiAqL1xyXG4gIEBJbnB1dCgncC1idXR0b25zJykgYnV0dG9uczogQXJyYXk8UG9CdXR0b25Hcm91cEl0ZW0+ID0gW107XHJcblxyXG4gIHByaXZhdGUgX3NtYWxsPzogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIHByaXZhdGUgX3RvZ2dsZT86IHN0cmluZyA9IFBPX1RPR0dMRV9UWVBFX0RFRkFVTFQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBUb3JuYSBvIGdydXBvIGRlIGJvdMO1ZXMgY29tIHRhbWFuaG8gbWluaWZpY2Fkby5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcclxuICAgKi9cclxuICBASW5wdXQoJ3Atc21hbGwnKSBzZXQgc21hbGwodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuX3NtYWxsID0gPGFueT52YWx1ZSA9PT0gJycgPyB0cnVlIDogY29udmVydFRvQm9vbGVhbih2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBnZXQgc21hbGwoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fc21hbGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3B0aW9uYWxcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogRGVmaW5lIG8gbW9kbyBkZSBzZWxlw6fDo28gZGUgYm90w7Vlcy5cclxuICAgKlxyXG4gICAqID4gVmVqYSBvcyB2YWxvcmVzIHbDoWxpZG9zIG5vICplbnVtKiBgUG9NdWx0aXNlbGVjdEZpbHRlck1vZGVgLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgYG5vbmVgXHJcbiAgICovXHJcbiAgQElucHV0KCdwLXRvZ2dsZScpIHNldCB0b2dnbGUodmFsdWU6IHN0cmluZykge1xyXG4gICAgdGhpcy5fdG9nZ2xlID0gKDxhbnk+T2JqZWN0KS52YWx1ZXMoUG9CdXR0b25Hcm91cFRvZ2dsZSkuaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBQT19UT0dHTEVfVFlQRV9ERUZBVUxUO1xyXG5cclxuICAgIHRoaXMuY2hlY2tTZWxlY3RlZHModGhpcy5fdG9nZ2xlKTtcclxuICB9XHJcblxyXG4gIGdldCB0b2dnbGUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl90b2dnbGU7XHJcbiAgfVxyXG5cclxuICBvbkJ1dHRvbkNsaWNrKGJ1dHRvbkNsaWNrZWQ6IFBvQnV0dG9uR3JvdXBJdGVtLCBidXR0b25JbmRleDogbnVtYmVyKSB7XHJcbiAgICBpZiAodGhpcy50b2dnbGUgPT09IFBvQnV0dG9uR3JvdXBUb2dnbGUuU2luZ2xlKSB7XHJcbiAgICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKFxyXG4gICAgICAgIChidXR0b24sIGluZGV4KSA9PiAoYnV0dG9uLnNlbGVjdGVkID0gaW5kZXggPT09IGJ1dHRvbkluZGV4ID8gIWJ1dHRvbkNsaWNrZWQuc2VsZWN0ZWQgOiBmYWxzZSlcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy50b2dnbGUgPT09IFBvQnV0dG9uR3JvdXBUb2dnbGUuTXVsdGlwbGUpIHtcclxuICAgICAgYnV0dG9uQ2xpY2tlZC5zZWxlY3RlZCA9ICFidXR0b25DbGlja2VkLnNlbGVjdGVkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjaGVja1NlbGVjdGVkcyh0b2dnbGVNb2RlOiBzdHJpbmcpIHtcclxuICAgIGlmICh0b2dnbGVNb2RlID09PSBQb0J1dHRvbkdyb3VwVG9nZ2xlLk5vbmUpIHtcclxuICAgICAgdGhpcy5kZXNlbGVjdEFsbEJ1dHRvbnMoKTtcclxuICAgIH0gZWxzZSBpZiAodG9nZ2xlTW9kZSA9PT0gUG9CdXR0b25Hcm91cFRvZ2dsZS5TaW5nbGUpIHtcclxuICAgICAgY29uc3QgaGFzTW9yZU9uZVNlbGVjdGVkID0gdGhpcy5idXR0b25zLmZpbHRlcihidXR0b24gPT4gYnV0dG9uLnNlbGVjdGVkKS5sZW5ndGggPiAxO1xyXG4gICAgICBpZiAoaGFzTW9yZU9uZVNlbGVjdGVkKSB7XHJcbiAgICAgICAgdGhpcy5kZXNlbGVjdEFsbEJ1dHRvbnMoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkZXNlbGVjdEFsbEJ1dHRvbnMoKSB7XHJcbiAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4gKGJ1dHRvbi5zZWxlY3RlZCA9IGZhbHNlKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==