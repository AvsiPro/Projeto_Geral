import { Input, Directive } from '@angular/core';
import { convertToInt } from '../../utils/util';
const PO_BADGE_COLORS = [
    'color-01',
    'color-02',
    'color-03',
    'color-04',
    'color-05',
    'color-06',
    'color-07',
    'color-08',
    'color-09',
    'color-10',
    'color-11',
    'color-12'
];
const PO_BADGE_COLOR_DEFAULT = 'color-07';
/**
 * @description
 *
 * @docsPrivate
 *
 * Componente utilizado no `po-menu` para exibir por exemplo a quantidade de tarefas pendentes.
 */
export class PoBadgeBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Define a cor de fundo do componente e aceita os valores:
     *
     * <span class="dot po-color-01"></span> `color-01`
     *
     * <span class="dot po-color-02"></span> `color-02`
     *
     * <span class="dot po-color-03"></span> `color-03`
     *
     * <span class="dot po-color-04"></span> `color-04`
     *
     * <span class="dot po-color-05"></span> `color-05`
     *
     * <span class="dot po-color-06"></span> `color-06`
     *
     * <span class="dot po-color-07"></span> `color-07`
     *
     * <span class="dot po-color-08"></span> `color-08`
     *
     * <span class="dot po-color-09"></span> `color-09`
     *
     * <span class="dot po-color-10"></span> `color-10`
     *
     * <span class="dot po-color-11"></span> `color-11`
     *
     * <span class="dot po-color-12"></span> `color-12`
     *
     * @default `color-07`
     */
    set color(value) {
        this._color = PO_BADGE_COLORS.includes(value) ? value : PO_BADGE_COLOR_DEFAULT;
    }
    get color() {
        return this._color;
    }
    /**
     * @description
     *
     * Número exibido no componente, caso o mesmo seja maior que 99 o valor exibido será 99+.
     */
    set value(value) {
        this._value = convertToInt(value);
        this.setBadgeValue(this._value);
    }
    get value() {
        return this._value;
    }
    setBadgeValue(value) {
        const validRangeValue = (value || value === 0) && value >= 0 && value < 100;
        this.badgeValue = validRangeValue ? value.toString() : value > 99 ? '99+' : undefined;
    }
}
PoBadgeBaseComponent.decorators = [
    { type: Directive }
];
PoBadgeBaseComponent.propDecorators = {
    color: [{ type: Input, args: ['p-color',] }],
    value: [{ type: Input, args: ['p-value',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYmFkZ2UtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tYmFkZ2UvcG8tYmFkZ2UtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWhELE1BQU0sZUFBZSxHQUFHO0lBQ3RCLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtDQUNYLENBQUM7QUFDRixNQUFNLHNCQUFzQixHQUFHLFVBQVUsQ0FBQztBQUUxQzs7Ozs7O0dBTUc7QUFFSCxNQUFNLE9BQU8sb0JBQW9CO0lBTS9COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQWdDRztJQUNILElBQXNCLEtBQUssQ0FBQyxLQUFhO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQztJQUNqRixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBc0IsS0FBSyxDQUFDLEtBQWE7UUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRU8sYUFBYSxDQUFDLEtBQWE7UUFDakMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxLQUFLLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUM1RSxJQUFJLENBQUMsVUFBVSxHQUFHLGVBQWUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUN4RixDQUFDOzs7WUFqRUYsU0FBUzs7O29CQXdDUCxLQUFLLFNBQUMsU0FBUztvQkFhZixLQUFLLFNBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IGNvbnZlcnRUb0ludCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xyXG5cclxuY29uc3QgUE9fQkFER0VfQ09MT1JTID0gW1xyXG4gICdjb2xvci0wMScsXHJcbiAgJ2NvbG9yLTAyJyxcclxuICAnY29sb3ItMDMnLFxyXG4gICdjb2xvci0wNCcsXHJcbiAgJ2NvbG9yLTA1JyxcclxuICAnY29sb3ItMDYnLFxyXG4gICdjb2xvci0wNycsXHJcbiAgJ2NvbG9yLTA4JyxcclxuICAnY29sb3ItMDknLFxyXG4gICdjb2xvci0xMCcsXHJcbiAgJ2NvbG9yLTExJyxcclxuICAnY29sb3ItMTInXHJcbl07XHJcbmNvbnN0IFBPX0JBREdFX0NPTE9SX0RFRkFVTFQgPSAnY29sb3ItMDcnO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBAZG9jc1ByaXZhdGVcclxuICpcclxuICogQ29tcG9uZW50ZSB1dGlsaXphZG8gbm8gYHBvLW1lbnVgIHBhcmEgZXhpYmlyIHBvciBleGVtcGxvIGEgcXVhbnRpZGFkZSBkZSB0YXJlZmFzIHBlbmRlbnRlcy5cclxuICovXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgY2xhc3MgUG9CYWRnZUJhc2VDb21wb25lbnQge1xyXG4gIGJhZGdlVmFsdWU6IHN0cmluZztcclxuXHJcbiAgcHJpdmF0ZSBfY29sb3I6IHN0cmluZztcclxuICBwcml2YXRlIF92YWx1ZTogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBAb3B0aW9uYWxcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogRGVmaW5lIGEgY29yIGRlIGZ1bmRvIGRvIGNvbXBvbmVudGUgZSBhY2VpdGEgb3MgdmFsb3JlczpcclxuICAgKlxyXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTAxXCI+PC9zcGFuPiBgY29sb3ItMDFgXHJcbiAgICpcclxuICAgKiA8c3BhbiBjbGFzcz1cImRvdCBwby1jb2xvci0wMlwiPjwvc3Bhbj4gYGNvbG9yLTAyYFxyXG4gICAqXHJcbiAgICogPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMDNcIj48L3NwYW4+IGBjb2xvci0wM2BcclxuICAgKlxyXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA0XCI+PC9zcGFuPiBgY29sb3ItMDRgXHJcbiAgICpcclxuICAgKiA8c3BhbiBjbGFzcz1cImRvdCBwby1jb2xvci0wNVwiPjwvc3Bhbj4gYGNvbG9yLTA1YFxyXG4gICAqXHJcbiAgICogPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMDZcIj48L3NwYW4+IGBjb2xvci0wNmBcclxuICAgKlxyXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA3XCI+PC9zcGFuPiBgY29sb3ItMDdgXHJcbiAgICpcclxuICAgKiA8c3BhbiBjbGFzcz1cImRvdCBwby1jb2xvci0wOFwiPjwvc3Bhbj4gYGNvbG9yLTA4YFxyXG4gICAqXHJcbiAgICogPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMDlcIj48L3NwYW4+IGBjb2xvci0wOWBcclxuICAgKlxyXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTEwXCI+PC9zcGFuPiBgY29sb3ItMTBgXHJcbiAgICpcclxuICAgKiA8c3BhbiBjbGFzcz1cImRvdCBwby1jb2xvci0xMVwiPjwvc3Bhbj4gYGNvbG9yLTExYFxyXG4gICAqXHJcbiAgICogPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMTJcIj48L3NwYW4+IGBjb2xvci0xMmBcclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IGBjb2xvci0wN2BcclxuICAgKi9cclxuICBASW5wdXQoJ3AtY29sb3InKSBzZXQgY29sb3IodmFsdWU6IHN0cmluZykge1xyXG4gICAgdGhpcy5fY29sb3IgPSBQT19CQURHRV9DT0xPUlMuaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBQT19CQURHRV9DT0xPUl9ERUZBVUxUO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGNvbG9yKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29sb3I7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIE7Dum1lcm8gZXhpYmlkbyBubyBjb21wb25lbnRlLCBjYXNvIG8gbWVzbW8gc2VqYSBtYWlvciBxdWUgOTkgbyB2YWxvciBleGliaWRvIHNlcsOhIDk5Ky5cclxuICAgKi9cclxuICBASW5wdXQoJ3AtdmFsdWUnKSBzZXQgdmFsdWUodmFsdWU6IG51bWJlcikge1xyXG4gICAgdGhpcy5fdmFsdWUgPSBjb252ZXJ0VG9JbnQodmFsdWUpO1xyXG4gICAgdGhpcy5zZXRCYWRnZVZhbHVlKHRoaXMuX3ZhbHVlKTtcclxuICB9XHJcblxyXG4gIGdldCB2YWx1ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRCYWRnZVZhbHVlKHZhbHVlOiBudW1iZXIpIHtcclxuICAgIGNvbnN0IHZhbGlkUmFuZ2VWYWx1ZSA9ICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkgJiYgdmFsdWUgPj0gMCAmJiB2YWx1ZSA8IDEwMDtcclxuICAgIHRoaXMuYmFkZ2VWYWx1ZSA9IHZhbGlkUmFuZ2VWYWx1ZSA/IHZhbHVlLnRvU3RyaW5nKCkgOiB2YWx1ZSA+IDk5ID8gJzk5KycgOiB1bmRlZmluZWQ7XHJcbiAgfVxyXG59XHJcbiJdfQ==