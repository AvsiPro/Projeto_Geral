import { Component, Input, ViewChild, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';
export class PoGridCellComponent {
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.align = 'left';
        this.freeze = false;
        this.tabIndex = -1;
        this.position = '';
        this.readonly = false;
        this.required = false;
        this.valueChange = new EventEmitter();
        this._value = '';
        this.edit = false;
        this.editValue = '';
    }
    set width(value) {
        this._width = value;
        if (this.freeze && !this._width) {
            this._width = 100;
        }
    }
    get width() {
        return this._width ? `${this._width}px` : '100%';
    }
    set value(value) {
        this._value = value;
        this.valueChange.emit(this._value);
    }
    get value() {
        return this._value;
    }
    onKeyDownContent(event) {
        // BACKSPACE / DELETE
        if (!event.ctrlKey && (event.keyCode === 8 || event.keyCode === 46)) {
            if (this.readonly) {
                return;
            }
            event.preventDefault();
            this.value = '';
            return;
        }
        // ENTER
        if (event.keyCode === 13) {
            event.preventDefault();
            this.onEditCell(this.value);
            return;
        }
        // A..Z - 0..9
        if ((event.keyCode >= 65 && event.keyCode <= 90) || (event.keyCode >= 48 && event.keyCode <= 57)) {
            event.preventDefault();
            this.onEditCell(event.key);
        }
    }
    dblclick(event) {
        event.preventDefault();
        this.onEditCell(this.value);
    }
    onBlurInput() {
        this.value = this.editValue;
        this.editValue = undefined;
        this.edit = false;
    }
    onKeyDownInput(event) {
        // ENTER
        if (event.keyCode === 13) {
            event.target.blur();
            this.changeDetectorRef.detectChanges();
            this.contentElement.nativeElement.focus();
        }
        // ESCAPE
        if (event.keyCode === 27) {
            this.editValue = undefined;
            this.edit = false;
            this.changeDetectorRef.detectChanges();
            this.contentElement.nativeElement.focus();
            event.stopPropagation();
        }
    }
    onEditCell(value) {
        if (this.readonly) {
            return;
        }
        this.editValue = value;
        this.edit = true;
        this.changeDetectorRef.detectChanges();
        this.inputElement.nativeElement.focus();
    }
}
PoGridCellComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-grid-cell',
                template: "<div>\r\n  <ng-container *ngIf=\"edit; then input; else content\"></ng-container>\r\n\r\n  <ng-template #content>\r\n    <div\r\n      #contentElement\r\n      [id]=\"position\"\r\n      class=\"po-grid-cell-content po-grid-cell-{{ align }} {{ !value && required ? 'po-grid-cell-required' : '' }}\"\r\n      (keydown)=\"onKeyDownContent($event)\"\r\n      tabindex=\"{{ readonly ? -1 : 0 }}\"\r\n      (dblclick)=\"dblclick($event)\"\r\n    >\r\n      <span>{{ value || '&nbsp;' }}</span>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-template #input>\r\n    <input\r\n      [id]=\"position\"\r\n      #inputElement\r\n      class=\"po-grid-cell-input\"\r\n      [(ngModel)]=\"editValue\"\r\n      (keydown.arrowup)=\"$event.stopPropagation()\"\r\n      (keydown.arrowdown)=\"$event.stopPropagation()\"\r\n      (keydown.arrowleft)=\"$event.stopPropagation()\"\r\n      (keydown.arrowright)=\"$event.stopPropagation()\"\r\n      (keydown)=\"onKeyDownInput($event)\"\r\n      (blur)=\"onBlurInput()\"\r\n    />\r\n  </ng-template>\r\n</div>\r\n"
            },] }
];
PoGridCellComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PoGridCellComponent.propDecorators = {
    align: [{ type: Input, args: ['p-align',] }],
    freeze: [{ type: Input, args: ['p-freeze',] }],
    tabIndex: [{ type: Input, args: ['p-tab-index',] }],
    position: [{ type: Input, args: ['p-position',] }],
    readonly: [{ type: Input, args: ['p-readonly',] }],
    required: [{ type: Input, args: ['p-required',] }],
    valueChange: [{ type: Output, args: ['p-valueChange',] }],
    inputElement: [{ type: ViewChild, args: ['inputElement',] }],
    contentElement: [{ type: ViewChild, args: ['contentElement',] }],
    width: [{ type: Input, args: ['p-width',] }],
    value: [{ type: Input, args: ['p-value',] }]
};
//# sourceMappingURL=data:application/json;base64,