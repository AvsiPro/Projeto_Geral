import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isIE } from '../../../../utils/util';
import { PoLanguageService } from '../../../../services/po-language/po-language.service';
import { poRichTextLiteralsDefault } from '../po-rich-text-literals';
import { PoRichTextImageModalComponent } from '../po-rich-text-image-modal/po-rich-text-image-modal.component';
import { PoRichTextLinkModalComponent } from '../po-rich-text-link-modal/po-rich-text-link-modal.component';
const poRichTextDefaultColor = '#000000';
export class PoRichTextToolbarComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.command = new EventEmitter();
        this.modal = new EventEmitter();
        this.linkEditing = new EventEmitter();
        this.literals = Object.assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.alignButtons = [
            {
                command: 'justifyleft',
                icon: 'po-icon-align-left',
                tooltip: this.literals.left,
                action: this.emitAlignCommand.bind(this, 'justifyleft'),
                selected: true
            },
            {
                command: 'justifycenter',
                icon: 'po-icon-align-center',
                tooltip: this.literals.center,
                action: this.emitAlignCommand.bind(this, 'justifycenter')
            },
            {
                command: 'justifyright',
                icon: 'po-icon-align-right',
                tooltip: this.literals.right,
                action: this.emitAlignCommand.bind(this, 'justifyright')
            },
            {
                command: 'justifyfull',
                icon: 'po-icon-align-justify',
                tooltip: this.literals.justify,
                action: this.emitAlignCommand.bind(this, 'justifyfull')
            }
        ];
        this.formatButtons = [
            {
                command: 'bold',
                icon: 'po-icon-text-bold',
                tooltip: this.literals.bold,
                action: this.emitCommand.bind(this, 'bold')
            },
            {
                command: 'italic',
                icon: 'po-icon-text-italic',
                tooltip: this.literals.italic,
                action: this.emitCommand.bind(this, 'italic')
            },
            {
                command: 'underline',
                icon: 'po-icon-text-underline',
                tooltip: this.literals.underline,
                action: this.emitCommand.bind(this, 'underline')
            }
        ];
        this.listButtons = [
            {
                command: 'insertUnorderedList',
                icon: 'po-icon-list',
                tooltip: this.literals.unorderedList,
                action: this.emitCommand.bind(this, 'insertUnorderedList')
            }
        ];
        this.linkButtons = [
            {
                command: 'Createlink',
                icon: 'po-icon-link',
                tooltip: `${this.literals.insertLink} (Ctrl + K)`,
                action: () => this.richTextLinkModal.openModal(this.selectedLinkElement)
            }
        ];
        this.mediaButtons = [
            {
                tooltip: this.literals.insertImage,
                icon: 'po-icon-picture',
                action: () => this.richTextImageModal.openModal()
            }
        ];
    }
    set readonly(value) {
        this._readonly = value;
        this.toggleDisableButtons(this._readonly);
    }
    get readonly() {
        return this._readonly;
    }
    get isInternetExplorer() {
        return isIE();
    }
    ngAfterViewInit() {
        this.removeButtonFocus();
        this.setColorInColorPicker(poRichTextDefaultColor);
    }
    changeTextColor(value) {
        const command = 'foreColor';
        this.command.emit({ command, value });
    }
    emitLinkEditing(isLinkEdit) {
        this.linkEditing.emit(isLinkEdit);
    }
    selectedLink(selectedLinkElement) {
        this.selectedLinkElement = selectedLinkElement;
    }
    setButtonsStates(obj) {
        if (!this.readonly) {
            this.alignButtons.forEach(button => (button.selected = obj.commands.includes(button.command)));
            this.formatButtons.forEach(button => (button.selected = obj.commands.includes(button.command)));
            this.listButtons[0].selected = obj.commands.includes(this.listButtons[0].command);
            this.linkButtons[0].selected = obj.commands.includes(this.linkButtons[0].command);
            this.setColorInColorPicker(obj.hexColor);
        }
    }
    shortcutTrigger() {
        this.richTextLinkModal.openModal(this.selectedLinkElement);
    }
    emitCommand(command) {
        this.command.emit(command);
    }
    emitAlignCommand(command) {
        const index = this.alignButtons.findIndex(btn => btn.command === command);
        if (this.alignButtons[index].selected) {
            this.alignButtons[index].selected = false;
        }
        this.command.emit(command);
    }
    removeButtonFocus() {
        const buttons = this.toolbarElement.nativeElement.querySelectorAll('button');
        buttons.forEach(button => button.setAttribute('tabindex', '-1'));
    }
    setColorInColorPicker(color) {
        this.colorPickerInput.nativeElement.value = color;
    }
    toggleDisableButtons(state) {
        this.alignButtons.forEach(button => (button.disabled = state));
        this.formatButtons.forEach(button => (button.disabled = state));
        this.listButtons[0].disabled = state;
        this.linkButtons[0].disabled = state;
        this.mediaButtons[0].disabled = state;
    }
}
PoRichTextToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-rich-text-toolbar',
                template: "<div class=\"po-rich-text-toolbar\" #toolbarElement>\r\n  <div class=\"po-rich-text-toolbar-button-align\">\r\n    <po-button-group p-toggle=\"multiple\" [p-buttons]=\"formatButtons\"> </po-button-group>\r\n  </div>\r\n\r\n  <div *ngIf=\"!isInternetExplorer\" class=\"po-rich-text-toolbar-button-align\">\r\n    <div class=\"po-rich-text-toolbar-color-picker-container\">\r\n      <button\r\n        class=\"po-button po-text-ellipsis po-rich-text-toolbar-color-picker-button\"\r\n        [disabled]=\"readonly\"\r\n        [p-tooltip]=\"literals.textColor\"\r\n      >\r\n        <input\r\n          #colorPickerInput\r\n          class=\"po-rich-text-toolbar-color-picker-input\"\r\n          type=\"color\"\r\n          [disabled]=\"readonly\"\r\n          (change)=\"changeTextColor($event.target.value)\"\r\n        />\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"po-rich-text-toolbar-button-align\">\r\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"alignButtons\"> </po-button-group>\r\n  </div>\r\n\r\n  <div class=\"po-rich-text-toolbar-button-align\">\r\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"listButtons\"> </po-button-group>\r\n  </div>\r\n\r\n  <div class=\"po-rich-text-toolbar-button-align\">\r\n    <po-button-group [p-buttons]=\"linkButtons\"> </po-button-group>\r\n  </div>\r\n\r\n  <div class=\"po-rich-text-toolbar-button-align\">\r\n    <po-button-group [p-buttons]=\"mediaButtons\"> </po-button-group>\r\n  </div>\r\n</div>\r\n\r\n<po-rich-text-image-modal #richTextImageModal (p-command)=\"emitCommand($event)\"> </po-rich-text-image-modal>\r\n\r\n<po-rich-text-link-modal\r\n  #richTextLinkModal\r\n  (p-command)=\"emitCommand($event)\"\r\n  (p-link-editing)=\"emitLinkEditing($event)\"\r\n>\r\n</po-rich-text-link-modal>\r\n"
            },] }
];
PoRichTextToolbarComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoRichTextToolbarComponent.propDecorators = {
    colorPickerInput: [{ type: ViewChild, args: ['colorPickerInput', { read: ElementRef },] }],
    toolbarElement: [{ type: ViewChild, args: ['toolbarElement', { static: true },] }],
    richTextImageModal: [{ type: ViewChild, args: [PoRichTextImageModalComponent, { static: true },] }],
    richTextLinkModal: [{ type: ViewChild, args: [PoRichTextLinkModalComponent, { static: true },] }],
    command: [{ type: Output, args: ['p-command',] }],
    modal: [{ type: Output, args: ['p-modal',] }],
    linkEditing: [{ type: Output, args: ['p-link-editing',] }],
    readonly: [{ type: Input, args: ['p-readonly',] }]
};
//# sourceMappingURL=data:application/json;base64,