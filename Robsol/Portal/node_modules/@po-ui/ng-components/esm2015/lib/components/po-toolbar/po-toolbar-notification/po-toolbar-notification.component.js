import { Component, Input } from '@angular/core';
import { PoControlPositionService } from '../../../services/po-control-position/po-control-position.service';
/**
 * @docsPrivate
 *
 * @usedBy PoToolbarComponent
 *
 * @description
 *
 * O componente `po-toolbar-notification` tem como objetivo notificar o usuário de novas ações da aplicação que necessitam de atenção,
 * como por exemplo um alerta de nova mensagem.
 *
 * O mesmo também permite que a cada nova notificação seja incrementado e exibido, ou não, este número em uma *tag* ao lado do
 * ícone de notificações.
 */
export class PoToolbarNotificationComponent {
    constructor() {
        this._notificationNumber = 0;
    }
    /** Define o número de notificações. */
    set notificationNumber(value) {
        this._notificationNumber = Number.isInteger(value) ? value : 0;
    }
    get notificationNumber() {
        return this._notificationNumber;
    }
}
PoToolbarNotificationComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-toolbar-notification',
                template: "<div class=\"po-toolbar-notification po-clickable\" (click)=\"popup.toggle()\">\r\n  <span #notification class=\"po-icon po-icon-notification po-toolbar-icon\"></span>\r\n  <div *ngIf=\"notificationNumber\" class=\"po-toolbar-notification-badge\">\r\n    {{ notificationNumber }}\r\n  </div>\r\n</div>\r\n\r\n<po-popup #popup [p-actions]=\"notificationActions\" [p-target]=\"notification\"> </po-popup>\r\n",
                providers: [PoControlPositionService]
            },] }
];
PoToolbarNotificationComponent.propDecorators = {
    notificationActions: [{ type: Input, args: ['p-notification-actions',] }],
    notificationNumber: [{ type: Input, args: ['p-notification-number',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdG9vbGJhci1ub3RpZmljYXRpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXRvb2xiYXIvcG8tdG9vbGJhci1ub3RpZmljYXRpb24vcG8tdG9vbGJhci1ub3RpZmljYXRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG1FQUFtRSxDQUFDO0FBSTdHOzs7Ozs7Ozs7Ozs7R0FZRztBQU1ILE1BQU0sT0FBTyw4QkFBOEI7SUFMM0M7UUFTVSx3QkFBbUIsR0FBWSxDQUFDLENBQUM7SUFVM0MsQ0FBQztJQVJDLHVDQUF1QztJQUN2QyxJQUFvQyxrQkFBa0IsQ0FBQyxLQUFhO1FBQ2xFLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsSUFBSSxrQkFBa0I7UUFDcEIsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUM7SUFDbEMsQ0FBQzs7O1lBbEJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUseUJBQXlCO2dCQUNuQyxrYUFBdUQ7Z0JBQ3ZELFNBQVMsRUFBRSxDQUFDLHdCQUF3QixDQUFDO2FBQ3RDOzs7a0NBR0UsS0FBSyxTQUFDLHdCQUF3QjtpQ0FLOUIsS0FBSyxTQUFDLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFBvQ29udHJvbFBvc2l0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3BvLWNvbnRyb2wtcG9zaXRpb24vcG8tY29udHJvbC1wb3NpdGlvbi5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IFBvVG9vbGJhckFjdGlvbiB9IGZyb20gJy4uL3BvLXRvb2xiYXItYWN0aW9uLmludGVyZmFjZSc7XHJcblxyXG4vKipcclxuICogQGRvY3NQcml2YXRlXHJcbiAqXHJcbiAqIEB1c2VkQnkgUG9Ub29sYmFyQ29tcG9uZW50XHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBPIGNvbXBvbmVudGUgYHBvLXRvb2xiYXItbm90aWZpY2F0aW9uYCB0ZW0gY29tbyBvYmpldGl2byBub3RpZmljYXIgbyB1c3XDoXJpbyBkZSBub3ZhcyBhw6fDtWVzIGRhIGFwbGljYcOnw6NvIHF1ZSBuZWNlc3NpdGFtIGRlIGF0ZW7Dp8OjbyxcclxuICogY29tbyBwb3IgZXhlbXBsbyB1bSBhbGVydGEgZGUgbm92YSBtZW5zYWdlbS5cclxuICpcclxuICogTyBtZXNtbyB0YW1iw6ltIHBlcm1pdGUgcXVlIGEgY2FkYSBub3ZhIG5vdGlmaWNhw6fDo28gc2VqYSBpbmNyZW1lbnRhZG8gZSBleGliaWRvLCBvdSBuw6NvLCBlc3RlIG7Dum1lcm8gZW0gdW1hICp0YWcqIGFvIGxhZG8gZG9cclxuICogw61jb25lIGRlIG5vdGlmaWNhw6fDtWVzLlxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdwby10b29sYmFyLW5vdGlmaWNhdGlvbicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXRvb2xiYXItbm90aWZpY2F0aW9uLmNvbXBvbmVudC5odG1sJyxcclxuICBwcm92aWRlcnM6IFtQb0NvbnRyb2xQb3NpdGlvblNlcnZpY2VdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQb1Rvb2xiYXJOb3RpZmljYXRpb25Db21wb25lbnQge1xyXG4gIC8qKiBEZWZpbmUgdW1hIGxpc3RhIGRlIGHDp8O1ZXMuICovXHJcbiAgQElucHV0KCdwLW5vdGlmaWNhdGlvbi1hY3Rpb25zJykgbm90aWZpY2F0aW9uQWN0aW9ucz86IEFycmF5PFBvVG9vbGJhckFjdGlvbj47XHJcblxyXG4gIHByaXZhdGUgX25vdGlmaWNhdGlvbk51bWJlcj86IG51bWJlciA9IDA7XHJcblxyXG4gIC8qKiBEZWZpbmUgbyBuw7ptZXJvIGRlIG5vdGlmaWNhw6fDtWVzLiAqL1xyXG4gIEBJbnB1dCgncC1ub3RpZmljYXRpb24tbnVtYmVyJykgc2V0IG5vdGlmaWNhdGlvbk51bWJlcih2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLl9ub3RpZmljYXRpb25OdW1iZXIgPSBOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSA/IHZhbHVlIDogMDtcclxuICB9XHJcblxyXG4gIGdldCBub3RpZmljYXRpb25OdW1iZXIoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fbm90aWZpY2F0aW9uTnVtYmVyO1xyXG4gIH1cclxufVxyXG4iXX0=