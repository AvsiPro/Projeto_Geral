import { ChangeDetectorRef, Component, ContentChild, ElementRef, IterableDiffers, Renderer2, ViewChild, ViewChildren, ContentChildren } from '@angular/core';
import { DecimalPipe } from '@angular/common';
import { Router } from '@angular/router';
import { convertToBoolean } from '../../utils/util';
import { PoDateService } from '../../services/po-date/po-date.service';
import { PoLanguageService } from '../../services/po-language/po-language.service';
import { PoTableBaseComponent } from './po-table-base.component';
import { PoTableRowTemplateDirective } from './po-table-row-template/po-table-row-template.directive';
import { PoTableCellTemplateDirective } from './po-table-cell-template/po-table-cell-template.directive';
import { PoTableColumnTemplateDirective } from './po-table-column-template/po-table-column-template.directive';
import { PoTableRowTemplateArrowDirection } from './enums/po-table-row-template-arrow-direction.enum';
import { PoTableService } from './services/po-table.service';
/**
 * @docsExtends PoTableBaseComponent
 *
 * @example
 *
 * <example name="po-table-basic" title="PO Table Basic">
 *  <file name="sample-po-table-basic/sample-po-table-basic.component.ts"> </file>
 *  <file name="sample-po-table-basic/sample-po-table-basic.component.html"> </file>
 * </example>
 *
 * <example name="po-table-labs" title="PO Table Labs">
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.ts"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.html"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.po.ts"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.service.ts"> </file>
 * </example>
 *
 * <example name="po-table-with-api" title="PO Table using API">
 *  <file name="sample-po-table-with-api/sample-po-table-with-api.component.ts"> </file>
 *  <file name="sample-po-table-with-api/sample-po-table-with-api.component.html"> </file>
 * </example>
 *
 * <example name="po-table-transport" title="PO Table - Transport">
 *  <file name="sample-po-table-transport/sample-po-table-transport.component.ts"> </file>
 *  <file name="sample-po-table-transport/sample-po-table-transport.component.html"> </file>
 *  <file name="sample-po-table-transport/sample-po-table-transport.service.ts"> </file>
 * </example>
 *
 * <example name="po-table-airfare" title="PO Table - Airfare">
 *  <file name="sample-po-table-airfare/sample-po-table-airfare.component.ts"> </file>
 *  <file name="sample-po-table-airfare/sample-po-table-airfare.component.html"> </file>
 *  <file name="sample-po-table-airfare/sample-po-table-airfare.service.ts"> </file>
 * </example>
 *
 * <example name="po-table-components" title="PO Table - Po Field Components">
 *  <file name="sample-po-table-components/sample-po-table-components.component.ts"> </file>
 *  <file name="sample-po-table-components/sample-po-table-components.enum.ts"> </file>
 *  <file name="sample-po-table-components/sample-po-table-components.component.html"> </file>
 *  <file name="sample-po-table-components/sample-po-table-components.service.ts"> </file>
 *  <file name="sample-po-table-components/sample-po-table-components.component.css"> </file>
 * </example>
 *
 */
export class PoTableComponent extends PoTableBaseComponent {
    constructor(poDate, differs, renderer, poLanguageService, changeDetector, decimalPipe, router, defaultService) {
        super(poDate, poLanguageService, defaultService);
        this.changeDetector = changeDetector;
        this.decimalPipe = decimalPipe;
        this.router = router;
        this.defaultService = defaultService;
        this.tableOpacity = 0;
        this.initialized = false;
        this.visibleElement = false;
        this.differ = differs.find([]).create(null);
        // TODO: #5550 ao remover este listener, no portal, quando as colunas forem fixas não sofrem
        // alteração de largura, pois o ngDoCheck não é executado.
        this.clickListener = renderer.listen('document', 'click', () => { });
        this.resizeListener = renderer.listen('window', 'resize', (event) => {
            this.debounceResize();
        });
    }
    set columnManagerTarget(value) {
        this._columnManagerTarget = value;
        this.changeDetector.detectChanges();
    }
    get columnManagerTarget() {
        return this._columnManagerTarget;
    }
    get hasRowTemplateWithArrowDirectionRight() {
        var _a;
        return ((_a = this.tableRowTemplate) === null || _a === void 0 ? void 0 : _a.tableRowTemplateArrowDirection) === PoTableRowTemplateArrowDirection.Right;
    }
    get columnCount() {
        const columnCount = this.mainColumns.length +
            (this.actions.length > 0 ? 1 : 0) +
            (this.selectable ? 1 : 0) +
            (!this.hideDetail && this.columnMasterDetail !== undefined ? 1 : 0);
        return columnCount || 1;
    }
    get columnCountForMasterDetail() {
        // caso tiver ações será utilizado a sua coluna para exibir o columnManager
        const columnManager = this.actions.length ? 0 : 1;
        return this.mainColumns.length + 1 + (this.actions.length > 0 ? 1 : 0) + (this.selectable ? 1 : 0) + columnManager;
    }
    get detailHideSelect() {
        const masterDetail = this.columnMasterDetail;
        return masterDetail && masterDetail.detail ? masterDetail.detail.hideSelect : false;
    }
    get hasVisibleActions() {
        return !!this.visibleActions.length;
    }
    get firstAction() {
        return this.visibleActions && this.visibleActions[0];
    }
    get hasFooter() {
        return this.hasItems && this.hasVisibleSubtitleColumns;
    }
    get hasMasterDetailColumn() {
        return (this.hasMainColumns && this.hasItems && !this.hideDetail && !!(this.columnMasterDetail || this.hasRowTemplate));
    }
    get hasRowTemplate() {
        return !!this.tableRowTemplate;
    }
    get hasSelectableColumn() {
        return this.selectable && this.hasItems && this.hasMainColumns;
    }
    get hasValidColumns() {
        return !!this.validColumns.length;
    }
    get hasVisibleSubtitleColumns() {
        return this.subtitleColumns.some(column => column.visible !== false);
    }
    get isSingleAction() {
        return this.visibleActions.length === 1;
    }
    get visibleActions() {
        return this.actions && this.actions.filter(action => action && action.visible !== false);
    }
    ngAfterViewInit() {
        this.initialized = true;
    }
    showMoreInfiniteScroll({ target }) {
        const scrollPosition = target.offsetHeight + target.scrollTop;
        if (!this.showMoreDisabled && scrollPosition >= target.scrollHeight * (this.infiniteScrollDistance / 110)) {
            this.onShowMore();
        }
    }
    ngDoCheck() {
        var _a;
        this.checkChangesItems();
        this.verifyCalculateHeightTableContainer();
        // Permite que os cabeçalhos sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (((_a = this.tableWrapperElement) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth) && !this.visibleElement && this.initialized) {
            this.debounceResize();
            this.checkInfiniteScroll();
            this.visibleElement = true;
        }
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    /**
     * Método responsável por realizar busca no serviço de dados podendo informar filtros e com o retorno, atualiza a tabela.
     *
     * Caso não seja informado parâmetro, nada será adicionado ao GET, conforme abaixo:
     * ```
     * url + ?page=1&pageSize=10
     * ```
     * > Obs: os parâmetros `page` e `pageSize` sempre serão chamados independente de ser enviados outros parâmetros.
     *
     * Caso sejam informados os parâmetros `{ name: 'JOHN', age: '23' }`, todos serão adicionados ao GET, conforme abaixo:
     * ```
     * url + ?page=1&pageSize=10&name=JOHN&age=23
     * ```
     *
     * @param { { key: value } } queryParams Formato do objeto a ser enviado.
     * > Pode ser utilizada qualquer string como key, e qualquer string ou number como value.
     */
    applyFilters(queryParams) {
        this.page = 1;
        this.initializeData(queryParams);
    }
    /**
     * Método que colapsa uma linha com detalhe quando executada.
     *
     * @param { number } rowIndex Índice da linha que será colapsada.
     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
     */
    collapse(rowIndex) {
        this.setShowDetail(rowIndex, false);
    }
    /**
     * Método que expande uma linha com detalhe quando executada.
     *
     * @param { number } rowIndex Índice da linha que será expandida.
     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
     */
    expand(rowIndex) {
        this.setShowDetail(rowIndex, true);
    }
    /**
     * Retorna as linhas do `po-table` que estão selecionadas.
     */
    getSelectedRows() {
        return this.items.filter(item => item.$selected);
    }
    /**
     * Retorna as linhas do `po-table` que não estão selecionadas.
     */
    getUnselectedRows() {
        return this.items.filter(item => !item.$selected);
    }
    /**
     * Desmarca as linhas que estão selecionadas.
     */
    unselectRows() {
        const columnDetail = this.nameColumnDetail;
        this.items.forEach(item => {
            const detailItems = columnDetail ? item[columnDetail] : null;
            if (Array.isArray(detailItems)) {
                detailItems.forEach(detailItem => {
                    detailItem.$selected = false;
                });
            }
            item.$selected = false;
        });
        this.selectAll = false;
    }
    checkDisabled(row, column) {
        return column.disabled ? column.disabled(row) : false;
    }
    containsMasterDetail(row) {
        return row[this.nameColumnDetail] && row[this.nameColumnDetail].length;
    }
    executeTableAction(row, tableAction) {
        if (!row.disabled && !this.validateTableAction(row, tableAction)) {
            tableAction.action(row);
            this.toggleRowAction(row);
        }
    }
    /**
     * Desmarca uma linha que está selecionada.
     */
    unselectRowItem(itemfn) {
        this.toggleSelect(itemfn, false);
        if (this.items.every(item => !item.$selected)) {
            this.selectAll = false;
        }
        else {
            this.selectAll = null;
        }
    }
    /**
     * Seleciona uma linha do 'po-table'.
     */
    selectRowItem(itemfn) {
        this.toggleSelect(itemfn, true);
        if (this.items.every(item => item.$selected)) {
            this.selectAll = true;
        }
        else {
            this.selectAll = null;
        }
    }
    formatNumber(value, format) {
        if (!format) {
            return value;
        }
        return this.decimalPipe.transform(value, format);
    }
    getBooleanLabel(rowValue, columnBoolean) {
        if (rowValue || rowValue === false || rowValue === 0) {
            rowValue = convertToBoolean(rowValue);
            if (columnBoolean.boolean) {
                return rowValue ? columnBoolean.boolean.trueLabel || 'Sim' : columnBoolean.boolean.falseLabel || 'Não';
            }
            else {
                return rowValue ? 'Sim' : 'Não';
            }
        }
        return rowValue;
    }
    getColumnIcons(row, column) {
        const rowIcons = row[column.property];
        if (column.icons) {
            if (Array.isArray(rowIcons)) {
                return this.mergeCustomIcons(rowIcons, column.icons);
            }
            else {
                return this.findCustomIcon(rowIcons, column);
            }
        }
        return rowIcons;
    }
    getColumnLabel(row, columnLabel) {
        return columnLabel.labels.find(labelItem => row[columnLabel.property] === labelItem.value);
    }
    getSubtitleColumn(row, subtitleColumn) {
        return subtitleColumn.subtitles.find(subtitleItem => row[subtitleColumn.property] === subtitleItem.value);
    }
    isShowMasterDetail(row) {
        return (!this.hideDetail &&
            this.nameColumnDetail &&
            row.$showDetail &&
            this.containsMasterDetail(row) &&
            !this.hasRowTemplate);
    }
    isShowRowTemplate(row, index) {
        if (this.tableRowTemplate && this.tableRowTemplate.poTableRowTemplateShow) {
            return this.tableRowTemplate.poTableRowTemplateShow(row, index);
        }
        return true;
    }
    onClickLink(event, row, column) {
        if (!this.checkDisabled(row, column)) {
            event.stopPropagation();
        }
    }
    onChangeVisibleColumns(columns) {
        this.changeVisibleColumns.emit(columns);
    }
    onVisibleColumnsChange(columns) {
        this.columns = columns;
        this.changeDetector.detectChanges();
    }
    tooltipMouseEnter(event, column, row) {
        this.tooltipText = undefined;
        if (this.hideTextOverflow && event.target.offsetWidth < event.target.scrollWidth && event.target.innerText.trim()) {
            return (this.tooltipText = event.target.innerText);
        }
        if (column) {
            this.checkingIfColumnHasTooltip(column, row);
        }
    }
    tooltipMouseLeave() {
        this.tooltipText = undefined;
    }
    togglePopup(row, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.poPopupComponent.toggle(row);
    }
    trackBy(index) {
        return index;
    }
    validateTableAction(row, tableAction) {
        if (typeof tableAction.disabled === 'function') {
            return tableAction.disabled(row);
        }
        else {
            return tableAction.disabled;
        }
    }
    onOpenColumnManager() {
        this.lastVisibleColumnsSelected = [...this.columns];
    }
    /**
     * Método que remove um item da tabela.
     *
     * @param { number | { key: value } } item Índice da linha ou o item que será removido.
     * > Ao remover o item, a linha que o representa será excluída da tabela.
     */
    removeItem(item) {
        if (item instanceof Object) {
            this.items = this.items.filter(filterItem => filterItem !== item);
        }
        else if (typeof item === 'number') {
            const index = item;
            this.items.splice(index, 1);
        }
    }
    /**
     * Método que atualiza um item da tabela.
     *
     * @param { number | { key: value } } item Índice da linha ou o item que será atualizado.
     * @param { { key: value } } updatedItem Item que foi atualizado.
     * > Ao atualizar o item, a informação será alterada na tabela.
     */
    updateItem(item, updatedItem) {
        if (typeof item === 'number') {
            this.items.splice(item, 1, updatedItem);
        }
        else {
            const index = this.items.findIndex(indexItem => indexItem === item);
            this.items.splice(index, 1, updatedItem);
        }
    }
    getTemplate(column) {
        const template = this.tableColumnTemplates.find(tableColumnTemplate => tableColumnTemplate.targetProperty === column.property);
        if (!template) {
            console.warn(`Não foi possível encontrar o template para a coluna: ${column.property}, por gentileza informe a propriedade [p-property]`);
            return null;
        }
        return template.templateRef;
    }
    calculateHeightTableContainer(height) {
        const value = parseFloat(height);
        this.heightTableContainer = value ? value - this.getHeightTableFooter() : undefined;
        this.setTableOpacity(1);
        this.changeDetector.detectChanges();
    }
    calculateWidthHeaders() {
        setTimeout(() => {
            if (this.height) {
                this.headersTable.forEach(header => {
                    const divHeader = header.nativeElement.querySelector('.po-table-header-fixed-inner');
                    if (divHeader) {
                        divHeader.style.width = `${header.nativeElement.offsetWidth}px`;
                    }
                });
            }
        });
    }
    checkInfiniteScroll() {
        if (this.hasInfiniteScroll()) {
            if (this.poTableTbody.nativeElement.scrollHeight > this.height) {
                this.includeInfiniteScroll();
            }
            else {
                this.infiniteScroll = false;
            }
        }
        this.changeDetector.detectChanges();
    }
    checkChangesItems() {
        const changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && !this.hasColumns && this.hasItems) {
            this.columns = this.getDefaultColumns(this.items[0]);
        }
    }
    checkingIfColumnHasTooltip(column, row) {
        if (column.type === 'link' && column.tooltip && !this.checkDisabled(row, column)) {
            return (this.tooltipText = column.tooltip);
        }
        if (column.type === 'label') {
            const columnLabel = this.getColumnLabel(row, column);
            return (this.tooltipText = columnLabel === null || columnLabel === void 0 ? void 0 : columnLabel.tooltip);
        }
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            this.calculateWidthHeaders();
            // show the table
            this.setTableOpacity(1);
        });
    }
    findCustomIcon(rowIcons, column) {
        const customIcon = column.icons.find(icon => rowIcons === icon.value);
        return customIcon ? [customIcon] : undefined;
    }
    getHeightTableFooter() {
        return this.tableFooterElement ? this.tableFooterElement.nativeElement.offsetHeight : 0;
    }
    hasInfiniteScroll() {
        return (this.infiniteScroll &&
            this.hasItems &&
            !this.subscriptionScrollEvent &&
            this.height &&
            this.poTableTbody.nativeElement.scrollHeight);
    }
    includeInfiniteScroll() {
        this.scrollEvent$ = this.defaultService.scrollListener(this.poTableTbody.nativeElement);
        this.subscriptionScrollEvent = this.scrollEvent$.subscribe(event => this.showMoreInfiniteScroll(event));
    }
    mergeCustomIcons(rowIcons, customIcons) {
        const mergedIcons = [];
        rowIcons.forEach(columnValue => {
            const foundCustomIcon = customIcons.find(customIcon => columnValue === customIcon.icon || columnValue === customIcon.value);
            foundCustomIcon ? mergedIcons.push(foundCustomIcon) : mergedIcons.push(columnValue);
        });
        return mergedIcons;
    }
    removeListeners() {
        if (this.resizeListener) {
            this.resizeListener();
        }
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.subscriptionScrollEvent) {
            this.subscriptionScrollEvent.unsubscribe();
        }
    }
    setTableOpacity(value) {
        this.tableOpacity = value;
    }
    verifyChangeHeightInFooter() {
        return this.footerHeight !== this.getHeightTableFooter();
    }
    verifyCalculateHeightTableContainer() {
        if (this.height && this.verifyChangeHeightInFooter()) {
            this.footerHeight = this.getHeightTableFooter();
            this.calculateHeightTableContainer(this.height);
        }
    }
    toggleSelect(compare, selectValue) {
        if (typeof compare !== 'function') {
            this.items.forEach(item => {
                if (item === compare) {
                    item.$selected = selectValue;
                }
            });
        }
        else {
            this.items.forEach(item => {
                if (compare(item)) {
                    item.$selected = selectValue;
                }
            });
        }
    }
}
PoTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-table',
                template: "<po-container *ngIf=\"container; else tableContainerTemplate\" p-no-padding [p-no-shadow]=\"container === 'border'\">\r\n  <ng-container *ngTemplateOutlet=\"tableContainerTemplate\"></ng-container>\r\n</po-container>\r\n\r\n<ng-template #tableContainerTemplate>\r\n  <div [class.po-table-container-relative]=\"loading\">\r\n    <div *ngIf=\"loading\" class=\"po-table-overlay\">\r\n      <po-loading class=\"po-table-overlay-content\" [p-text]=\"literals.loadingData\"></po-loading>\r\n    </div>\r\n\r\n    <div class=\"po-table-main-container\">\r\n      <div\r\n        #tableWrapper\r\n        class=\"po-table-wrapper\"\r\n        [class.po-table-header-fixed-columns-pixels]=\"allColumnsWidthPixels\"\r\n        [style.opacity]=\"tableOpacity\"\r\n      >\r\n        <div *ngIf=\"height\" class=\"po-table-container\" [style.height.px]=\"heightTableContainer\">\r\n          <div class=\"po-table-header-fixed po-table-header\"></div>\r\n          <div #poTableTbody class=\"po-table-container-fixed-inner\">\r\n            <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container>\r\n          </div>\r\n        </div>\r\n\r\n        <div *ngIf=\"!height\">\r\n          <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"po-table-footer\" *ngIf=\"hasFooter\">\r\n    <ng-container *ngFor=\"let column of subtitleColumns; trackBy: trackBy\">\r\n      <po-table-subtitle-footer [p-literals]=\"literals\" [p-subtitles]=\"column.subtitles\"> </po-table-subtitle-footer>\r\n    </ng-container>\r\n  </div>\r\n</ng-template>\r\n\r\n<div\r\n  *ngIf=\"!infiniteScroll\"\r\n  class=\"po-row po-table-footer-show-more\"\r\n  [class.po-invisible]=\"showMore.observers.length === 0 && !hasService\"\r\n  #tableFooter\r\n>\r\n  <po-button\r\n    class=\"po-offset-xl-4 po-offset-lg-4 po-offset-md-3 po-lg-4 po-md-6\"\r\n    [p-disabled]=\"showMoreDisabled\"\r\n    [p-label]=\"literals.loadMoreData\"\r\n    [p-loading]=\"loadingShowMore\"\r\n    (p-click)=\"onShowMore()\"\r\n  >\r\n  </po-button>\r\n</div>\r\n\r\n<ng-template #tableTemplate>\r\n  <table class=\"po-table\" [class.po-table-striped]=\"striped\" [class.po-table-layout-fixed]=\"hideTextOverflow\">\r\n    <thead>\r\n      <tr [class.po-table-header]=\"!height\">\r\n        <th *ngIf=\"hasSelectableColumn\" class=\"po-table-column-selectable\">\r\n          <div [class.po-table-header-fixed-inner]=\"height\">\r\n            <input\r\n              *ngIf=\"!hideSelectAll\"\r\n              type=\"checkbox\"\r\n              class=\"po-table-checkbox\"\r\n              [class.po-table-checkbox-checked]=\"selectAll\"\r\n              [class.po-table-checkbox-indeterminate]=\"selectAll === null\"\r\n            />\r\n            <label *ngIf=\"!hideSelectAll\" class=\"po-table-checkbox-label po-clickable\" (click)=\"selectAllRows()\">\r\n            </label>\r\n          </div>\r\n        </th>\r\n\r\n        <th\r\n          *ngIf=\"(hasMasterDetailColumn || hasRowTemplate) && !hasRowTemplateWithArrowDirectionRight\"\r\n          class=\"po-table-header-column po-table-header-master-detail\"\r\n        ></th>\r\n\r\n        <th *ngIf=\"!hasMainColumns\" #noColumnsHeader class=\"po-table-header-column po-text-center\">\r\n          <ng-container *ngIf=\"height; then noColumnsWithHeight; else noColumnsWithoutHeight\"> </ng-container>\r\n        </th>\r\n\r\n        <th\r\n          *ngFor=\"let column of mainColumns; let i = index; trackBy: trackBy\"\r\n          #headersTable\r\n          class=\"po-table-header-ellipsis\"\r\n          [style.width]=\"column.width\"\r\n          [style.max-width]=\"column.width\"\r\n          [style.min-width]=\"column.width\"\r\n          [class.po-clickable]=\"(sort && column.sortable !== false) || hasService\"\r\n          [class.po-table-header-subtitle]=\"column.type === 'subtitle'\"\r\n          (click)=\"sortColumn(column)\"\r\n        >\r\n          <div\r\n            class=\"po-table-header-flex\"\r\n            [class.po-table-header-fixed-inner]=\"height\"\r\n            [class.po-table-header-flex-right]=\"column.type === 'currency' || column.type === 'number'\"\r\n            [class.po-table-header-flex-center]=\"column.type === 'subtitle'\"\r\n          >\r\n            <ng-container *ngTemplateOutlet=\"contentHeaderTemplate; context: { $implicit: column }\"> </ng-container>\r\n          </div>\r\n        </th>\r\n\r\n        <th\r\n          *ngIf=\"hasRowTemplateWithArrowDirectionRight && (hasVisibleActions || hideColumnsManager)\"\r\n          class=\"po-table-header-column po-table-header-master-detail\"\r\n        ></th>\r\n\r\n        <th\r\n          *ngIf=\"hasVisibleActions && hideColumnsManager\"\r\n          [class.po-table-header-single-action]=\"isSingleAction\"\r\n          [class.po-table-header-actions]=\"!isSingleAction\"\r\n        ></th>\r\n\r\n        <th\r\n          #columnManager\r\n          *ngIf=\"hasValidColumns && !hideColumnsManager\"\r\n          [class.po-table-header-column-manager]=\"!isSingleAction\"\r\n          [class.po-table-header-column-manager-border]=\"!height && container\"\r\n          [class.po-table-header-single-action]=\"isSingleAction\"\r\n        >\r\n          <div\r\n            [class.po-table-header-column-manager-border]=\"height && container\"\r\n            [class.po-table-header-column-manager-fixed-inner]=\"height\"\r\n            [style.width.px]=\"height && visibleActions.length ? columnManager.offsetWidth : undefined\"\r\n          >\r\n            <button\r\n              #columnManagerTarget\r\n              class=\"po-table-header-column-manager-button po-icon po-icon-settings po-clickable\"\r\n              p-tooltip-position=\"left\"\r\n              [p-tooltip]=\"literals.columnsManager\"\r\n              (click)=\"onOpenColumnManager()\"\r\n            ></button>\r\n          </div>\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n\r\n    <tbody class=\"po-table-group-row\" *ngIf=\"!hasItems || !hasMainColumns\">\r\n      <tr class=\"po-table-row\">\r\n        <td [colSpan]=\"columnCount\" class=\"po-table-no-data po-text-center\">\r\n          <span> {{ literals.noData }} </span>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n\r\n    <ng-container *ngIf=\"hasMainColumns\">\r\n      <tbody class=\"po-table-group-row\" *ngFor=\"let row of items; let rowIndex = index; trackBy: trackBy\">\r\n        <tr class=\"po-table-row\" [class.po-table-row-active]=\"row.$selected || (row.$selected === null && selectable)\">\r\n          <td *ngIf=\"selectable\" class=\"po-table-column po-table-column-selectable\">\r\n            <ng-container *ngTemplateOutlet=\"singleSelect ? inputRadio : inputCheckbox; context: { $implicit: row }\">\r\n            </ng-container>\r\n          </td>\r\n\r\n          <!-- Valida se a origem do detail \u00E9 pelo input do po-table -->\r\n          <td\r\n            *ngIf=\"columnMasterDetail && !hideDetail && !hasRowTemplate\"\r\n            class=\"po-table-column-detail-toggle\"\r\n            (click)=\"toggleDetail(row)\"\r\n          >\r\n            <ng-template\r\n              [ngTemplateOutlet]=\"poTableColumnDetail\"\r\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\r\n            >\r\n            </ng-template>\r\n          </td>\r\n\r\n          <!-- Valida se a origem do detail \u00E9 pela diretiva -->\r\n          <td\r\n            *ngIf=\"hasRowTemplate && !hasRowTemplateWithArrowDirectionRight\"\r\n            class=\"po-table-column-detail-toggle\"\r\n            (click)=\"toggleDetail(row)\"\r\n          >\r\n            <ng-template\r\n              [ngTemplateOutlet]=\"poTableColumnDetail\"\r\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\r\n            >\r\n            </ng-template>\r\n          </td>\r\n\r\n          <td\r\n            *ngFor=\"let column of mainColumns; let columnIndex = index; trackBy: trackBy\"\r\n            [style.width]=\"column.width\"\r\n            [style.max-width]=\"column.width\"\r\n            [style.min-width]=\"column.width\"\r\n            [class.po-table-column]=\"column.type !== 'icon'\"\r\n            [class.po-table-column-right]=\"column.type === 'currency' || column.type === 'number'\"\r\n            [class.po-table-column-center]=\"column.type === 'subtitle'\"\r\n            [class.po-table-column-icons]=\"column.type === 'icon'\"\r\n            [ngClass]=\"getClassColor(row, column)\"\r\n            (click)=\"selectable ? selectRow(row) : 'javascript:;'\"\r\n          >\r\n            <div\r\n              class=\"po-table-column-cell notranslate\"\r\n              [class.po-table-body-ellipsis]=\"hideTextOverflow\"\r\n              [ngSwitch]=\"column.type\"\r\n              [p-tooltip]=\"tooltipText\"\r\n              (mouseenter)=\"tooltipMouseEnter($event, column, row)\"\r\n              (mouseleave)=\"tooltipMouseLeave()\"\r\n            >\r\n              <span *ngSwitchCase=\"'columnTemplate'\">\r\n                <ng-container *ngTemplateOutlet=\"getTemplate(column); context: { $implicit: row[column.property] }\">\r\n                </ng-container>\r\n              </span>\r\n\r\n              <span *ngSwitchCase=\"'cellTemplate'\">\r\n                <ng-container *ngTemplateOutlet=\"tableCellTemplate?.templateRef; context: { row: row, column: column }\">\r\n                </ng-container>\r\n              </span>\r\n\r\n              <span *ngSwitchCase=\"'boolean'\">\r\n                {{ getBooleanLabel(row[column.property], column) }}\r\n              </span>\r\n\r\n              <span *ngSwitchCase=\"'currency'\">\r\n                {{ row[column.property] | currency: column.format:'symbol':'1.2-2' }}\r\n              </span>\r\n\r\n              <span *ngSwitchCase=\"'date'\">\r\n                {{ row[column.property] | date: column.format || 'dd/MM/yyyy' }}\r\n              </span>\r\n\r\n              <span *ngSwitchCase=\"'time'\">\r\n                {{ row[column.property] | po_time: column.format || 'HH:mm:ss.ffffff' }}\r\n              </span>\r\n\r\n              <span *ngSwitchCase=\"'dateTime'\">\r\n                {{ row[column.property] | date: column.format || 'dd/MM/yyyy HH:mm:ss' }}\r\n              </span>\r\n\r\n              <span *ngSwitchCase=\"'number'\">\r\n                {{ formatNumber(row[column.property], column.format) }}\r\n              </span>\r\n\r\n              <po-table-column-link\r\n                *ngSwitchCase=\"'link'\"\r\n                [p-action]=\"column.action\"\r\n                [p-disabled]=\"checkDisabled(row, column)\"\r\n                [p-link]=\"row[column.link]\"\r\n                [p-row]=\"row\"\r\n                [p-value]=\"row[column.property]\"\r\n                (click)=\"onClickLink($event, row, column)\"\r\n              >\r\n              </po-table-column-link>\r\n\r\n              <po-table-column-icon\r\n                *ngSwitchCase=\"'icon'\"\r\n                [p-column]=\"column\"\r\n                [p-icons]=\"getColumnIcons(row, column)\"\r\n                [p-row]=\"row\"\r\n              >\r\n              </po-table-column-icon>\r\n\r\n              <span *ngSwitchCase=\"'subtitle'\">\r\n                <po-table-subtitle-circle [p-subtitle]=\"getSubtitleColumn(row, column)\"></po-table-subtitle-circle>\r\n              </span>\r\n              <span *ngSwitchCase=\"'label'\">\r\n                <po-table-column-label [p-value]=\"getColumnLabel(row, column)\"></po-table-column-label>\r\n              </span>\r\n              <span *ngSwitchDefault>{{ row[column.property] }}</span>\r\n            </div>\r\n          </td>\r\n\r\n          <td\r\n            *ngIf=\"hasRowTemplateWithArrowDirectionRight\"\r\n            class=\"po-table-column-detail-toggle\"\r\n            (click)=\"toggleDetail(row)\"\r\n          >\r\n            <ng-template\r\n              [ngTemplateOutlet]=\"poTableColumnDetail\"\r\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\r\n            >\r\n            </ng-template>\r\n          </td>\r\n\r\n          <td *ngIf=\"isSingleAction\" class=\"po-table-column po-table-column-single-action\">\r\n            <div\r\n              *ngIf=\"firstAction.visible !== false\"\r\n              class=\"po-table-single-action po-clickable\"\r\n              [class.po-table-action-disabled]=\"firstAction.disabled ? validateTableAction(row, firstAction) : false\"\r\n              (click)=\"executeTableAction(row, firstAction)\"\r\n            >\r\n              <po-icon\r\n                *ngIf=\"firstAction.icon\"\r\n                class=\"po-table-single-action-content\"\r\n                [p-icon]=\"firstAction.icon\"\r\n              ></po-icon>\r\n              {{ firstAction.label }}\r\n            </div>\r\n          </td>\r\n\r\n          <td *ngIf=\"visibleActions.length > 1\" class=\"po-table-column-actions\">\r\n            <span #popupTarget class=\"po-icon po-icon-more po-clickable\" (click)=\"togglePopup(row, popupTarget)\"></span>\r\n          </td>\r\n          <!-- Column Manager -->\r\n          <td\r\n            *ngIf=\"!hasVisibleActions && !hideColumnsManager && !hasRowTemplateWithArrowDirectionRight\"\r\n            class=\"po-table-column\"\r\n          ></td>\r\n        </tr>\r\n\r\n        <tr *ngIf=\"hasMainColumns && hasRowTemplate && row.$showDetail && isShowRowTemplate(row, rowIndex)\">\r\n          <td class=\"po-table-row-template-container\" [colSpan]=\"columnCountForMasterDetail\">\r\n            <ng-template\r\n              [ngTemplateOutlet]=\"tableRowTemplate.templateRef\"\r\n              [ngTemplateOutletContext]=\"{ $implicit: row, rowIndex: rowIndex }\"\r\n            >\r\n            </ng-template>\r\n          </td>\r\n        </tr>\r\n\r\n        <tr *ngIf=\"hasMainColumns && isShowMasterDetail(row)\">\r\n          <td class=\"po-table-column-detail\" [colSpan]=\"columnCountForMasterDetail\">\r\n            <po-table-detail\r\n              [p-selectable]=\"selectable && !detailHideSelect\"\r\n              [p-detail]=\"columnMasterDetail.detail\"\r\n              [p-items]=\"row[nameColumnDetail]\"\r\n              (p-select-row)=\"selectDetailRow($event)\"\r\n            >\r\n            </po-table-detail>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </ng-container>\r\n  </table>\r\n</ng-template>\r\n\r\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"popupTarget\"> </po-popup>\r\n\r\n<ng-template #poTableColumnDetail let-row=\"row\" let-rowIndex=\"rowIndex\">\r\n  <span\r\n    *ngIf=\"(containsMasterDetail(row) && !hasRowTemplate) || (isShowRowTemplate(row, rowIndex) && hasRowTemplate)\"\r\n    class=\"po-icon po-clickable\"\r\n    [class.po-icon-arrow-up]=\"row.$showDetail\"\r\n    [class.po-icon-arrow-down]=\"!row.$showDetail\"\r\n  >\r\n  </span>\r\n</ng-template>\r\n\r\n<ng-template #inputRadio let-row>\r\n  <input type=\"radio\" class=\"po-table-radio\" [class.po-table-radio-checked]=\"row.$selected\" />\r\n  <label class=\"po-table-radio-label po-clickable\" (click)=\"selectable ? selectRow(row) : 'javascript:;'\"></label>\r\n</ng-template>\r\n\r\n<ng-template #inputCheckbox let-row>\r\n  <input type=\"checkbox\" class=\"po-table-checkbox\" [class.po-table-checkbox-checked]=\"row.$selected\" />\r\n  <label class=\"po-table-checkbox-label po-clickable\" (click)=\"selectable ? selectRow(row) : 'javascript:;'\"></label>\r\n</ng-template>\r\n\r\n<ng-template #contentHeaderTemplate let-column>\r\n  <span\r\n    #columnHeader\r\n    class=\"po-table-header-ellipsis\"\r\n    [p-tooltip]=\"tooltipText\"\r\n    (mouseenter)=\"tooltipMouseEnter($event)\"\r\n    (mouseleave)=\"tooltipMouseLeave()\"\r\n  >\r\n    {{ column.label || (column.property | titlecase) }}\r\n  </span>\r\n  <span\r\n    *ngIf=\"sort && column.sortable !== false\"\r\n    [class.po-table-header-icon-unselected]=\"sortedColumn?.property !== column\"\r\n    [class.po-table-header-icon-descending]=\"sortedColumn?.property === column && sortedColumn.ascending\"\r\n    [class.po-table-header-icon-ascending]=\"sortedColumn?.property === column && !sortedColumn.ascending\"\r\n  >\r\n  </span>\r\n</ng-template>\r\n\r\n<ng-template #noColumnsWithHeight>\r\n  <div class=\"po-table-header-fixed-inner\" [style.width.px]=\"noColumnsHeader?.nativeElement.offsetWidth\">\r\n    {{ hasValidColumns ? literals.noVisibleColumn : literals.noColumns }}\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #noColumnsWithoutHeight>\r\n  {{ hasValidColumns ? literals.noVisibleColumn : literals.noColumns }}\r\n</ng-template>\r\n\r\n<po-table-column-manager\r\n  *ngIf=\"!hideColumnsManager\"\r\n  [p-columns]=\"columns\"\r\n  [p-max-columns]=\"maxColumns\"\r\n  [p-target]=\"columnManagerTarget\"\r\n  [p-last-visible-columns-selected]=\"lastVisibleColumnsSelected\"\r\n  (p-visible-columns-change)=\"onVisibleColumnsChange($event)\"\r\n  (p-change-visible-columns)=\"onChangeVisibleColumns($event)\"\r\n>\r\n</po-table-column-manager>\r\n",
                providers: [PoDateService]
            },] }
];
PoTableComponent.ctorParameters = () => [
    { type: PoDateService },
    { type: IterableDiffers },
    { type: Renderer2 },
    { type: PoLanguageService },
    { type: ChangeDetectorRef },
    { type: DecimalPipe },
    { type: Router },
    { type: PoTableService }
];
PoTableComponent.propDecorators = {
    tableRowTemplate: [{ type: ContentChild, args: [PoTableRowTemplateDirective, { static: true },] }],
    tableCellTemplate: [{ type: ContentChild, args: [PoTableCellTemplateDirective,] }],
    tableColumnTemplates: [{ type: ContentChildren, args: [PoTableColumnTemplateDirective,] }],
    noColumnsHeader: [{ type: ViewChild, args: ['noColumnsHeader', { read: ElementRef },] }],
    poPopupComponent: [{ type: ViewChild, args: ['popup',] }],
    tableFooterElement: [{ type: ViewChild, args: ['tableFooter', { read: ElementRef, static: false },] }],
    tableWrapperElement: [{ type: ViewChild, args: ['tableWrapper', { read: ElementRef, static: false },] }],
    poTableTbody: [{ type: ViewChild, args: ['poTableTbody', { read: ElementRef, static: false },] }],
    actionsIconElement: [{ type: ViewChildren, args: ['actionsIconElement', { read: ElementRef },] }],
    actionsElement: [{ type: ViewChildren, args: ['actionsElement', { read: ElementRef },] }],
    headersTable: [{ type: ViewChildren, args: ['headersTable',] }],
    columnManagerTarget: [{ type: ViewChild, args: ['columnManagerTarget',] }]
};
//# sourceMappingURL=data:application/json;base64,