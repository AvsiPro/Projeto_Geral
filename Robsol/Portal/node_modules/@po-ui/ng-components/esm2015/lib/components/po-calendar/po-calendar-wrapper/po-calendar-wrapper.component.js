import { ChangeDetectionStrategy, Component, Input, Output, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { PoCalendarLangService } from '../services/po-calendar.lang.service';
import { PoCalendarService } from '../services/po-calendar.service';
import { PoDateService } from '../../../services/po-date/po-date.service';
export class PoCalendarWrapperComponent {
    constructor(poCalendarService, poCalendarLangService, poDate) {
        this.poCalendarService = poCalendarService;
        this.poCalendarLangService = poCalendarLangService;
        this.poDate = poDate;
        this.mode = 'day';
        this.responsive = false;
        this.range = false;
        this.activateDate = new Date();
        this.headerChange = new EventEmitter();
        this.selectDate = new EventEmitter();
        this.hoverDate = new Subject().pipe(debounceTime(100));
        this.displayMonths = Array();
        this.displayWeekDays = Array();
        this.today = new Date();
    }
    set locale(value) {
        this._locale = value;
        this.initializeLanguage();
    }
    get locale() {
        return this._locale;
    }
    get monthLabel() {
        return this.poCalendarLangService.getMonthLabel();
    }
    get yearLabel() {
        return this.poCalendarLangService.getYearLabel();
    }
    get isDayVisible() {
        return this.mode === 'day';
    }
    get isMonthVisible() {
        return this.mode === 'month';
    }
    get isYearVisible() {
        return this.mode === 'year';
    }
    get isStartPart() {
        return this.partType === 'start';
    }
    get isEndPart() {
        return this.partType === 'end';
    }
    ngOnInit() {
        this.init();
    }
    ngOnChanges(changes) {
        const { activateDate } = changes;
        if (activateDate) {
            this.updateDate(activateDate.currentValue);
        }
    }
    getBackgroundColor(displayValue, propertyValue) {
        return displayValue === propertyValue ? 'po-calendar-box-background-selected' : 'po-calendar-box-background';
    }
    getDayBackgroundColor(date) {
        return this.getDayColor(date, 'background');
    }
    getDayForegroundColor(date) {
        return this.getDayColor(date, 'foreground');
    }
    getForegroundColor(displayValue, propertyValue) {
        return displayValue === propertyValue ? 'po-calendar-box-foreground-selected' : 'po-calendar-box-foreground';
    }
    isTodayUnavailable() {
        return this.minDate > this.today || this.maxDate < this.today;
    }
    onNextMonth() {
        this.displayMonthNumber < 11
            ? this.updateDisplay(this.displayYear, this.displayMonthNumber + 1)
            : this.updateDisplay(this.displayYear + 1, 0);
        this.headerChange.emit({ month: this.displayMonthNumber, year: this.displayYear });
    }
    onPreviousMonth() {
        if (this.displayMonthNumber > 0) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
        }
        else {
            this.updateDisplay(this.displayYear - 1, 11);
        }
        this.headerChange.emit({ month: this.displayMonthNumber, year: this.displayYear });
    }
    onMouseEnter(day) {
        this.hoverDate.next(day);
    }
    onMouseLeave() {
        this.hoverDate.next(null);
    }
    // Ao selecionar uma data
    onSelectDate(date) {
        this.selectDate.emit(date);
    }
    // Ao selecionar um mês
    onSelectMonth(year, month) {
        this.selectDisplayMode('day');
        this.updateDisplay(year, month);
        this.headerChange.emit({ month, year });
    }
    // Ao selecionar um ano
    onSelectYear(year, month) {
        // Se veio da tela de seleção de mês
        this.selectDisplayMode(this.lastDisplay === 'month' ? 'month' : 'day');
        this.currentYear = year;
        this.updateDisplay(year, month);
        this.headerChange.emit({ month, year });
    }
    selectDisplayMode(mode) {
        this.lastDisplay = this.mode;
        this.mode = mode;
    }
    updateYear(value) {
        this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
    }
    addAllYearsInDecade(year) {
        let i;
        for (i = year; i < year + 10; i++) {
            this.displayDecade.push(i);
        }
    }
    equalsDate(date1, date2) {
        try {
            return (date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate());
        }
        catch (error) {
            return false;
        }
    }
    // Obtém um array de todos os anos desta década
    getDecadeArray(year) {
        this.displayDecade = Array();
        if (year % 10 !== 0) {
            while (year % 10 !== 0) {
                year--;
            }
        }
        this.updateDecade(year);
    }
    getColorForDate(date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
            ? `po-calendar-box-${local}-selected`
            : `po-calendar-box-${local}-selected-disabled`;
    }
    getColorForDefaultDate(date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
            ? `po-calendar-box-${local}`
            : `po-calendar-box-${local}-disabled`;
    }
    getColorForToday(date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
            ? `po-calendar-box-${local}-today`
            : `po-calendar-box-${local}-today-disabled`;
    }
    getColorForDateRange(date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
            ? `po-calendar-box-${local}-in-range`
            : `po-calendar-box-${local}-in-range-disabled`;
    }
    getDayColor(date, local) {
        var _a, _b;
        const start = (_a = this.selectedValue) === null || _a === void 0 ? void 0 : _a.start;
        const end = (_b = this.selectedValue) === null || _b === void 0 ? void 0 : _b.end;
        if (this.range && (this.equalsDate(date, start) || this.equalsDate(date, end))) {
            return this.getColorForDate(date, local);
        }
        else if (this.range && start && end && date > start && date < end) {
            return this.getColorForDateRange(date, local);
        }
        else if (this.range && start && !end && date > start && date < this.hoverValue) {
            return `po-calendar-box-${local}-hover`;
        }
        else if (!this.range && this.equalsDate(date, this.value)) {
            return this.getColorForDate(date, local);
        }
        else if (this.equalsDate(date, this.today)) {
            return this.getColorForToday(date, local);
        }
        else {
            return this.getColorForDefaultDate(date, local);
        }
    }
    init() {
        this.updateDate(this.activateDate);
        this.initializeLanguage();
        this.selectDisplayMode('day');
    }
    initializeLanguage() {
        this.poCalendarLangService.setLanguage(this.locale);
        this.displayWeekDays = this.poCalendarLangService.getWeekDaysArray();
        this.displayMonths = this.poCalendarLangService.getMonthsArray();
        this.displayMonth = this.displayMonths[this.displayMonthNumber];
        this.displayToday = this.poCalendarLangService.getTodayLabel();
    }
    updateDate(value = new Date()) {
        const date = new Date(value);
        this.currentMonthNumber = date.getMonth();
        this.currentYear = date.getFullYear();
        this.updateDisplay(this.currentYear, this.currentMonthNumber);
    }
    updateDecade(year) {
        this.addAllYearsInDecade(year);
        this.displayStartDecade = year;
        this.displayFinalDecade = year + 9;
    }
    updateDisplay(year, month) {
        const calendarArray = this.poCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getDecadeArray(year);
    }
}
PoCalendarWrapperComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-calendar-wrapper',
                template: "<div class=\"po-calendar-wrapper\">\r\n  <ng-container *ngIf=\"isDayVisible\">\r\n    <po-calendar-header\r\n      [p-hide-previous]=\"isEndPart\"\r\n      [p-hide-next]=\"isStartPart && !responsive\"\r\n      (p-previous)=\"onPreviousMonth()\"\r\n      (p-next)=\"onNextMonth()\"\r\n    >\r\n      <span class=\"po-clickable po-mr-1\" (click)=\"selectDisplayMode('month')\">{{ displayMonth }}</span>\r\n      <span class=\"po-clickable\" (click)=\"selectDisplayMode('year')\">{{ displayYear }}</span>\r\n    </po-calendar-header>\r\n\r\n    <div class=\"po-calendar-content\">\r\n      <div class=\"po-calendar-labels\">\r\n        <div class=\"po-calendar-label\" *ngFor=\"let weekDay of displayWeekDays\">\r\n          {{ weekDay }}\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"po-calendar-content-list-day\">\r\n        <div\r\n          *ngFor=\"let day of displayDays\"\r\n          class=\"po-calendar-day\"\r\n          [ngClass]=\"getDayBackgroundColor(day)\"\r\n          (click)=\"onSelectDate(day)\"\r\n          (mouseenter)=\"onMouseEnter(day)\"\r\n          (mouseleave)=\"onMouseLeave()\"\r\n          attr-calendar\r\n        >\r\n          <span *ngIf=\"day !== 0\" [ngClass]=\"getDayForegroundColor(day)\">\r\n            {{ day.getDate() }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"isMonthVisible\">\r\n    <po-calendar-header (p-previous)=\"updateYear(-1)\" (p-next)=\"updateYear(1)\">\r\n      <span class=\"po-clickable\" (click)=\"selectDisplayMode('year')\">\r\n        {{ displayYear }}\r\n      </span>\r\n    </po-calendar-header>\r\n\r\n    <div class=\"po-calendar-content\">\r\n      <div class=\"po-calendar-labels\">\r\n        <div class=\"po-calendar-label\">\r\n          {{ monthLabel }}\r\n        </div>\r\n      </div>\r\n      <div class=\"po-calendar-content-list-month\">\r\n        <div\r\n          *ngFor=\"let month of displayMonths; let i = index\"\r\n          class=\"po-calendar-month\"\r\n          [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\"\r\n          (click)=\"onSelectMonth(displayYear, i)\"\r\n          attr-calendar\r\n        >\r\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\r\n            {{ month }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"isYearVisible\">\r\n    <po-calendar-header (p-previous)=\"updateYear(-10)\" (p-next)=\"updateYear(10)\">\r\n      {{ displayStartDecade }} - {{ displayFinalDecade }}\r\n    </po-calendar-header>\r\n\r\n    <div class=\"po-calendar-content\">\r\n      <div class=\"po-calendar-labels\">\r\n        <div class=\"po-calendar-label\">\r\n          {{ yearLabel }}\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"po-calendar-content-list-year\">\r\n        <div\r\n          *ngFor=\"let year of displayDecade; let i = index\"\r\n          class=\"po-calendar-year\"\r\n          [ngClass]=\"getBackgroundColor(year, currentYear)\"\r\n          (click)=\"onSelectYear(year, displayMonthNumber)\"\r\n          attr-calendar\r\n        >\r\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\r\n            {{ year }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"!range\">\r\n    <div class=\"po-calendar-footer\">\r\n      <div class=\"po-calendar-footer-today\">\r\n        <button class=\"po-calendar-footer-today-button\" (click)=\"onSelectDate(today)\" [disabled]=\"isTodayUnavailable()\">\r\n          {{ displayToday }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n",
                providers: [PoCalendarService],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PoCalendarWrapperComponent.ctorParameters = () => [
    { type: PoCalendarService },
    { type: PoCalendarLangService },
    { type: PoDateService }
];
PoCalendarWrapperComponent.propDecorators = {
    value: [{ type: Input, args: ['p-value',] }],
    mode: [{ type: Input, args: ['p-mode',] }],
    responsive: [{ type: Input, args: ['p-responsive',] }],
    partType: [{ type: Input, args: ['p-part-type',] }],
    range: [{ type: Input, args: ['p-range',] }],
    activateDate: [{ type: Input, args: ['p-activate-date',] }],
    selectedValue: [{ type: Input, args: ['p-selected-value',] }],
    minDate: [{ type: Input, args: ['p-min-date',] }],
    maxDate: [{ type: Input, args: ['p-max-date',] }],
    hoverValue: [{ type: Input, args: ['p-hover-value',] }],
    headerChange: [{ type: Output, args: ['p-header-change',] }],
    selectDate: [{ type: Output, args: ['p-select-date',] }],
    hoverDate: [{ type: Output, args: ['p-hover-date',] }],
    locale: [{ type: Input, args: ['p-locale',] }]
};
//# sourceMappingURL=data:application/json;base64,