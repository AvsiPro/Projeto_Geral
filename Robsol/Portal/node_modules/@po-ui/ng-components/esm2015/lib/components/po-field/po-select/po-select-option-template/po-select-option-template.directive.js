import { Directive, TemplateRef } from '@angular/core';
/**
 * @usedBy PoSelectComponent
 *
 * @description
 *
 * Esta diretiva permite personalizar o conteúdo dos itens exibidos na lista suspensa do componente.
 *
 * > Quando utilizada em _mobile_ será exibido o componente nativo.
 *
 * Para personalizar o conteúdo de cada item da lista deve-se utilizar a diretiva `p-select-option-template` com `ng-template`
 * dentro da tag `po-select`.
 *
 * Para obter a referência do item atual, use `let-option`, com isso você terá acesso aos valores e poderá personalizar sua exibição.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-select
 *   name="select"
 *   [(ngModel)]="select"
 *   [p-options]="options">
 *     <ng-template p-select-option-template let-option>
 *       <option-template [option]="option"></option-template>
 *     </ng-template>
 * </po-select>
 * ...
 * ```
 *
 * ```
 * ...
 * <po-select
 *   name="select"
 *   [(ngModel)]="select"
 *   [p-options]="options">
 *     <div *p-select-option-template="let option">
 *       <option-template [option]="option"></option-template>
 *     </div>
 * </po-select>
 * ...
 *
 * ```
 */
export class PoSelectOptionTemplateDirective {
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
PoSelectOptionTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[p-select-option-template]'
            },] }
];
PoSelectOptionTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2VsZWN0LW9wdGlvbi10ZW1wbGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tc2VsZWN0L3BvLXNlbGVjdC1vcHRpb24tdGVtcGxhdGUvcG8tc2VsZWN0LW9wdGlvbi10ZW1wbGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTBDRztBQUlILE1BQU0sT0FBTywrQkFBK0I7SUFDMUMsc0VBQXNFO0lBQ3RFLFlBQW1CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUFHLENBQUM7OztZQUxyRCxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDRCQUE0QjthQUN2Qzs7O1lBL0NtQixXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEB1c2VkQnkgUG9TZWxlY3RDb21wb25lbnRcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIEVzdGEgZGlyZXRpdmEgcGVybWl0ZSBwZXJzb25hbGl6YXIgbyBjb250ZcO6ZG8gZG9zIGl0ZW5zIGV4aWJpZG9zIG5hIGxpc3RhIHN1c3BlbnNhIGRvIGNvbXBvbmVudGUuXHJcbiAqXHJcbiAqID4gUXVhbmRvIHV0aWxpemFkYSBlbSBfbW9iaWxlXyBzZXLDoSBleGliaWRvIG8gY29tcG9uZW50ZSBuYXRpdm8uXHJcbiAqXHJcbiAqIFBhcmEgcGVyc29uYWxpemFyIG8gY29udGXDumRvIGRlIGNhZGEgaXRlbSBkYSBsaXN0YSBkZXZlLXNlIHV0aWxpemFyIGEgZGlyZXRpdmEgYHAtc2VsZWN0LW9wdGlvbi10ZW1wbGF0ZWAgY29tIGBuZy10ZW1wbGF0ZWBcclxuICogZGVudHJvIGRhIHRhZyBgcG8tc2VsZWN0YC5cclxuICpcclxuICogUGFyYSBvYnRlciBhIHJlZmVyw6puY2lhIGRvIGl0ZW0gYXR1YWwsIHVzZSBgbGV0LW9wdGlvbmAsIGNvbSBpc3NvIHZvY8OqIHRlcsOhIGFjZXNzbyBhb3MgdmFsb3JlcyBlIHBvZGVyw6EgcGVyc29uYWxpemFyIHN1YSBleGliacOnw6NvLlxyXG4gKlxyXG4gKiBFc3RhIGRpcmV0aXZhIGNvbXDDtWUtc2UgZGUgZG9pcyBtZWlvcyBwYXJhIHVzbywgZGUgZm9ybWEgZXhwbMOtY2l0YSB0YWwgY29tbyBlbSAqc3ludGF4IHN1Z2FyKi4gVmVqYSBhIHNlZ3VpciBhbWJvcywgcmVzcGVjdGl2YW1lbnRlOlxyXG4gKlxyXG4gKiBgYGBcclxuICogLi4uXHJcbiAqIDxwby1zZWxlY3RcclxuICogICBuYW1lPVwic2VsZWN0XCJcclxuICogICBbKG5nTW9kZWwpXT1cInNlbGVjdFwiXHJcbiAqICAgW3Atb3B0aW9uc109XCJvcHRpb25zXCI+XHJcbiAqICAgICA8bmctdGVtcGxhdGUgcC1zZWxlY3Qtb3B0aW9uLXRlbXBsYXRlIGxldC1vcHRpb24+XHJcbiAqICAgICAgIDxvcHRpb24tdGVtcGxhdGUgW29wdGlvbl09XCJvcHRpb25cIj48L29wdGlvbi10ZW1wbGF0ZT5cclxuICogICAgIDwvbmctdGVtcGxhdGU+XHJcbiAqIDwvcG8tc2VsZWN0PlxyXG4gKiAuLi5cclxuICogYGBgXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiAuLi5cclxuICogPHBvLXNlbGVjdFxyXG4gKiAgIG5hbWU9XCJzZWxlY3RcIlxyXG4gKiAgIFsobmdNb2RlbCldPVwic2VsZWN0XCJcclxuICogICBbcC1vcHRpb25zXT1cIm9wdGlvbnNcIj5cclxuICogICAgIDxkaXYgKnAtc2VsZWN0LW9wdGlvbi10ZW1wbGF0ZT1cImxldCBvcHRpb25cIj5cclxuICogICAgICAgPG9wdGlvbi10ZW1wbGF0ZSBbb3B0aW9uXT1cIm9wdGlvblwiPjwvb3B0aW9uLXRlbXBsYXRlPlxyXG4gKiAgICAgPC9kaXY+XHJcbiAqIDwvcG8tc2VsZWN0PlxyXG4gKiAuLi5cclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1twLXNlbGVjdC1vcHRpb24tdGVtcGxhdGVdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUG9TZWxlY3RPcHRpb25UZW1wbGF0ZURpcmVjdGl2ZSB7XHJcbiAgLy8gTmVjZXNzw6FyaW8gbWFudGVyIHRlbXBsYXRlUmVmIHBhcmEgbyBmdW5jaW9uYW1lbnRvIGRvIHJvdyB0ZW1wbGF0ZS5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHt9XHJcbn1cclxuIl19