import { Directive, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { poLocaleDefault } from '../../../services/po-language/po-language.constant';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
import { PoPageContentComponent } from '../po-page-content/po-page-content.component';
export const poPageEditLiteralsDefault = {
    en: {
        cancel: 'Cancel',
        save: 'Save',
        saveNew: 'Save and New'
    },
    es: {
        cancel: 'Cancelar',
        save: 'Guardar',
        saveNew: 'Guardar y Nuevo'
    },
    pt: {
        cancel: 'Cancelar',
        save: 'Salvar',
        saveNew: 'Salvar e Novo'
    },
    ru: {
        cancel: 'отменить',
        save: 'экономить',
        saveNew: 'Сохранить и новый'
    }
};
/**
 * @description
 *
 * O componente **po-page-edit** é utilizado como container principal para tela de edição ou adição de um
 * registro, tendo a possibilidade de usar as ações de "Salvar", "Salvar e Novo" e "Cancelar".
 *
 * Os botões "Salvar" e "Salvar e Novo" podem ser habilitados/desabilitados utilizando a propriedade `p-disable-submit`.
 * Esta propriedade pode ser utilizada para desabilitar os botões caso exista um formulário inválido na página ou alguma
 * regra de negócio não tenha sido atendida.
 */
export class PoPageEditBaseComponent {
    constructor(languageService) {
        /**
         * Evento que será disparado ao clicar no botão de "Cancelar".
         *
         * ```
         * <po-page-edit (p-cancel)="myCancelFunction()">
         * </po-page-edit>
         * ```
         *
         * > Caso não utilizar esta propriedade, o botão de "Cancelar" não será exibido.
         */
        this.cancel = new EventEmitter();
        /**
         * Evento que será disparado ao clicar no botão de "Salvar".
         *
         * ```
         * <po-page-edit (p-save)="mySaveFunction()">
         * </po-page-edit>
         * ```
         *
         * > Caso não utilizar esta propriedade, o botão de "Salvar" não será exibido.
         */
        this.save = new EventEmitter();
        /**
         * Evento que será disparado ao clicar no botão de "Salvar e Novo".
         *
         * ```
         * <po-page-edit (p-save-new)="mySaveNewFunction()">
         * </po-page-edit>
         * ```
         *
         * > Caso não utilizar esta propriedade, o botão de "Salvar e Novo" não será exibido.
         */
        this.saveNew = new EventEmitter();
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-edit`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageEditLiterals = {
     *    cancel: 'Voltar',
     *    save: 'Confirmar',
     *    saveNew: 'Confirmar e criar um novo'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageEditLiterals = {
     *    cancel: 'Cancelar processo'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-edit
     *   [p-literals]="customLiterals">
     * </po-page-edit>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poPageEditLiteralsDefault[poLocaleDefault]), poPageEditLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poPageEditLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageEditLiteralsDefault[this.language];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        setTimeout(() => this.poPageContent.recalculateHeaderSize());
    }
    get title() {
        return this._title;
    }
}
PoPageEditBaseComponent.decorators = [
    { type: Directive }
];
PoPageEditBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoPageEditBaseComponent.propDecorators = {
    poPageContent: [{ type: ViewChild, args: [PoPageContentComponent, { static: true },] }],
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    disableSubmit: [{ type: Input, args: ['p-disable-submit',] }],
    cancel: [{ type: Output, args: ['p-cancel',] }],
    save: [{ type: Output, args: ['p-save',] }],
    saveNew: [{ type: Output, args: ['p-save-new',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    title: [{ type: Input, args: ['p-title',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1lZGl0LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXBhZ2UvcG8tcGFnZS1lZGl0L3BvLXBhZ2UtZWRpdC1iYXNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDckYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFHdEYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFHdEYsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUc7SUFDdkMsRUFBRSxFQUFzQjtRQUN0QixNQUFNLEVBQUUsUUFBUTtRQUNoQixJQUFJLEVBQUUsTUFBTTtRQUNaLE9BQU8sRUFBRSxjQUFjO0tBQ3hCO0lBQ0QsRUFBRSxFQUFzQjtRQUN0QixNQUFNLEVBQUUsVUFBVTtRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE9BQU8sRUFBRSxpQkFBaUI7S0FDM0I7SUFDRCxFQUFFLEVBQXNCO1FBQ3RCLE1BQU0sRUFBRSxVQUFVO1FBQ2xCLElBQUksRUFBRSxRQUFRO1FBQ2QsT0FBTyxFQUFFLGVBQWU7S0FDekI7SUFDRCxFQUFFLEVBQXNCO1FBQ3RCLE1BQU0sRUFBRSxVQUFVO1FBQ2xCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE9BQU8sRUFBRSxtQkFBbUI7S0FDN0I7Q0FDRixDQUFDO0FBRUY7Ozs7Ozs7OztHQVNHO0FBRUgsTUFBTSxPQUFPLHVCQUF1QjtJQThHbEMsWUFBWSxlQUFrQztRQXJHOUM7Ozs7Ozs7OztXQVNHO1FBQ2lCLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRWhEOzs7Ozs7Ozs7V0FTRztRQUNlLFNBQUksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTVDOzs7Ozs7Ozs7V0FTRztRQUNtQixZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQW9FakQsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNyRCxDQUFDO0lBL0REOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQW1DRztJQUNILElBQXlCLFFBQVEsQ0FBQyxLQUF5QjtRQUN6RCxJQUFJLEtBQUssWUFBWSxNQUFNLElBQUksQ0FBQyxDQUFDLEtBQUssWUFBWSxLQUFLLENBQUMsRUFBRTtZQUN4RCxJQUFJLENBQUMsU0FBUyxpREFDVCx5QkFBeUIsQ0FBQyxlQUFlLENBQUMsR0FDMUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUN4QyxLQUFLLENBQ1QsQ0FBQztTQUNIO2FBQU07WUFDTCxJQUFJLENBQUMsU0FBUyxHQUFHLHlCQUF5QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMzRDtJQUNILENBQUM7SUFDRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLElBQUkseUJBQXlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCx3QkFBd0I7SUFDeEIsSUFBc0IsS0FBSyxDQUFDLEtBQWE7UUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7O1lBN0dGLFNBQVM7OztZQXZDRCxpQkFBaUI7Ozs0QkF5Q3ZCLFNBQVMsU0FBQyxzQkFBc0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7eUJBR2xELEtBQUssU0FBQyxjQUFjOzRCQUdwQixLQUFLLFNBQUMsa0JBQWtCO3FCQVl4QixNQUFNLFNBQUMsVUFBVTttQkFZakIsTUFBTSxTQUFDLFFBQVE7c0JBWWYsTUFBTSxTQUFDLFlBQVk7dUJBMENuQixLQUFLLFNBQUMsWUFBWTtvQkFnQmxCLEtBQUssU0FBQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgcG9Mb2NhbGVEZWZhdWx0IH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2UuY29uc3RhbnQnO1xyXG5pbXBvcnQgeyBQb0xhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgUG9CcmVhZGNydW1iIH0gZnJvbSAnLi4vLi4vcG8tYnJlYWRjcnVtYi9wby1icmVhZGNydW1iLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvUGFnZUNvbnRlbnRDb21wb25lbnQgfSBmcm9tICcuLi9wby1wYWdlLWNvbnRlbnQvcG8tcGFnZS1jb250ZW50LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBvUGFnZUVkaXRMaXRlcmFscyB9IGZyb20gJy4vcG8tcGFnZS1lZGl0LWxpdGVyYWxzLmludGVyZmFjZSc7XHJcblxyXG5leHBvcnQgY29uc3QgcG9QYWdlRWRpdExpdGVyYWxzRGVmYXVsdCA9IHtcclxuICBlbjogPFBvUGFnZUVkaXRMaXRlcmFscz57XHJcbiAgICBjYW5jZWw6ICdDYW5jZWwnLFxyXG4gICAgc2F2ZTogJ1NhdmUnLFxyXG4gICAgc2F2ZU5ldzogJ1NhdmUgYW5kIE5ldydcclxuICB9LFxyXG4gIGVzOiA8UG9QYWdlRWRpdExpdGVyYWxzPntcclxuICAgIGNhbmNlbDogJ0NhbmNlbGFyJyxcclxuICAgIHNhdmU6ICdHdWFyZGFyJyxcclxuICAgIHNhdmVOZXc6ICdHdWFyZGFyIHkgTnVldm8nXHJcbiAgfSxcclxuICBwdDogPFBvUGFnZUVkaXRMaXRlcmFscz57XHJcbiAgICBjYW5jZWw6ICdDYW5jZWxhcicsXHJcbiAgICBzYXZlOiAnU2FsdmFyJyxcclxuICAgIHNhdmVOZXc6ICdTYWx2YXIgZSBOb3ZvJ1xyXG4gIH0sXHJcbiAgcnU6IDxQb1BhZ2VFZGl0TGl0ZXJhbHM+e1xyXG4gICAgY2FuY2VsOiAn0L7RgtC80LXQvdC40YLRjCcsXHJcbiAgICBzYXZlOiAn0Y3QutC+0L3QvtC80LjRgtGMJyxcclxuICAgIHNhdmVOZXc6ICfQodC+0YXRgNCw0L3QuNGC0Ywg0Lgg0L3QvtCy0YvQuSdcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIE8gY29tcG9uZW50ZSAqKnBvLXBhZ2UtZWRpdCoqIMOpIHV0aWxpemFkbyBjb21vIGNvbnRhaW5lciBwcmluY2lwYWwgcGFyYSB0ZWxhIGRlIGVkacOnw6NvIG91IGFkacOnw6NvIGRlIHVtXHJcbiAqIHJlZ2lzdHJvLCB0ZW5kbyBhIHBvc3NpYmlsaWRhZGUgZGUgdXNhciBhcyBhw6fDtWVzIGRlIFwiU2FsdmFyXCIsIFwiU2FsdmFyIGUgTm92b1wiIGUgXCJDYW5jZWxhclwiLlxyXG4gKlxyXG4gKiBPcyBib3TDtWVzIFwiU2FsdmFyXCIgZSBcIlNhbHZhciBlIE5vdm9cIiBwb2RlbSBzZXIgaGFiaWxpdGFkb3MvZGVzYWJpbGl0YWRvcyB1dGlsaXphbmRvIGEgcHJvcHJpZWRhZGUgYHAtZGlzYWJsZS1zdWJtaXRgLlxyXG4gKiBFc3RhIHByb3ByaWVkYWRlIHBvZGUgc2VyIHV0aWxpemFkYSBwYXJhIGRlc2FiaWxpdGFyIG9zIGJvdMO1ZXMgY2FzbyBleGlzdGEgdW0gZm9ybXVsw6FyaW8gaW52w6FsaWRvIG5hIHDDoWdpbmEgb3UgYWxndW1hXHJcbiAqIHJlZ3JhIGRlIG5lZ8OzY2lvIG7Do28gdGVuaGEgc2lkbyBhdGVuZGlkYS5cclxuICovXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgY2xhc3MgUG9QYWdlRWRpdEJhc2VDb21wb25lbnQge1xyXG4gIEBWaWV3Q2hpbGQoUG9QYWdlQ29udGVudENvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSkgcG9QYWdlQ29udGVudDogUG9QYWdlQ29udGVudENvbXBvbmVudDtcclxuXHJcbiAgLyoqIE9iamV0byBjb20gcHJvcHJpZWRhZGVzIGRvIGJyZWFkY3J1bWIuICovXHJcbiAgQElucHV0KCdwLWJyZWFkY3J1bWInKSBicmVhZGNydW1iPzogUG9CcmVhZGNydW1iO1xyXG5cclxuICAvKiogRGVzYWJpbGl0YSBib3TDtWVzIGRlIHN1Ym1pc3PDo28gKHNhdmUgZSBzYXZlTmV3KSAqL1xyXG4gIEBJbnB1dCgncC1kaXNhYmxlLXN1Ym1pdCcpIGRpc2FibGVTdWJtaXQ/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBFdmVudG8gcXVlIHNlcsOhIGRpc3BhcmFkbyBhbyBjbGljYXIgbm8gYm90w6NvIGRlIFwiQ2FuY2VsYXJcIi5cclxuICAgKlxyXG4gICAqIGBgYFxyXG4gICAqIDxwby1wYWdlLWVkaXQgKHAtY2FuY2VsKT1cIm15Q2FuY2VsRnVuY3Rpb24oKVwiPlxyXG4gICAqIDwvcG8tcGFnZS1lZGl0PlxyXG4gICAqIGBgYFxyXG4gICAqXHJcbiAgICogPiBDYXNvIG7Do28gdXRpbGl6YXIgZXN0YSBwcm9wcmllZGFkZSwgbyBib3TDo28gZGUgXCJDYW5jZWxhclwiIG7Do28gc2Vyw6EgZXhpYmlkby5cclxuICAgKi9cclxuICBAT3V0cHV0KCdwLWNhbmNlbCcpIGNhbmNlbCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgLyoqXHJcbiAgICogRXZlbnRvIHF1ZSBzZXLDoSBkaXNwYXJhZG8gYW8gY2xpY2FyIG5vIGJvdMOjbyBkZSBcIlNhbHZhclwiLlxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogPHBvLXBhZ2UtZWRpdCAocC1zYXZlKT1cIm15U2F2ZUZ1bmN0aW9uKClcIj5cclxuICAgKiA8L3BvLXBhZ2UtZWRpdD5cclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqID4gQ2FzbyBuw6NvIHV0aWxpemFyIGVzdGEgcHJvcHJpZWRhZGUsIG8gYm90w6NvIGRlIFwiU2FsdmFyXCIgbsOjbyBzZXLDoSBleGliaWRvLlxyXG4gICAqL1xyXG4gIEBPdXRwdXQoJ3Atc2F2ZScpIHNhdmUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIEV2ZW50byBxdWUgc2Vyw6EgZGlzcGFyYWRvIGFvIGNsaWNhciBubyBib3TDo28gZGUgXCJTYWx2YXIgZSBOb3ZvXCIuXHJcbiAgICpcclxuICAgKiBgYGBcclxuICAgKiA8cG8tcGFnZS1lZGl0IChwLXNhdmUtbmV3KT1cIm15U2F2ZU5ld0Z1bmN0aW9uKClcIj5cclxuICAgKiA8L3BvLXBhZ2UtZWRpdD5cclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqID4gQ2FzbyBuw6NvIHV0aWxpemFyIGVzdGEgcHJvcHJpZWRhZGUsIG8gYm90w6NvIGRlIFwiU2FsdmFyIGUgTm92b1wiIG7Do28gc2Vyw6EgZXhpYmlkby5cclxuICAgKi9cclxuICBAT3V0cHV0KCdwLXNhdmUtbmV3Jykgc2F2ZU5ldyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgcHJpdmF0ZSBfbGl0ZXJhbHM6IFBvUGFnZUVkaXRMaXRlcmFscztcclxuICBwcml2YXRlIF90aXRsZTogc3RyaW5nO1xyXG4gIHByaXZhdGUgbGFuZ3VhZ2U6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIE9iamV0byBjb20gYXMgbGl0ZXJhaXMgdXNhZGFzIG5vIGBwby1wYWdlLWVkaXRgLlxyXG4gICAqXHJcbiAgICogRXhpc3RlbSBkdWFzIG1hbmVpcmFzIGRlIGN1c3RvbWl6YXIgbyBjb21wb25lbnRlLCBwYXNzYW5kbyB1bSBvYmpldG8gY29tIHRvZGFzIGFzIGxpdGVyYWlzIGRpc3BvbsOtdmVpczpcclxuICAgKlxyXG4gICAqIGBgYFxyXG4gICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogUG9QYWdlRWRpdExpdGVyYWxzID0ge1xyXG4gICAqICAgIGNhbmNlbDogJ1ZvbHRhcicsXHJcbiAgICogICAgc2F2ZTogJ0NvbmZpcm1hcicsXHJcbiAgICogICAgc2F2ZU5ldzogJ0NvbmZpcm1hciBlIGNyaWFyIHVtIG5vdm8nXHJcbiAgICogIH07XHJcbiAgICogYGBgXHJcbiAgICpcclxuICAgKiBPdSBwYXNzYW5kbyBhcGVuYXMgYXMgbGl0ZXJhaXMgcXVlIGRlc2VqYSBjdXN0b21pemFyOlxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogIGNvbnN0IGN1c3RvbUxpdGVyYWxzOiBQb1BhZ2VFZGl0TGl0ZXJhbHMgPSB7XHJcbiAgICogICAgY2FuY2VsOiAnQ2FuY2VsYXIgcHJvY2Vzc28nXHJcbiAgICogIH07XHJcbiAgICogYGBgXHJcbiAgICpcclxuICAgKiBFIHBhcmEgY2FycmVnYXIgYXMgbGl0ZXJhaXMgY3VzdG9taXphZGFzLCBiYXN0YSBhcGVuYXMgcGFzc2FyIG8gb2JqZXRvIHBhcmEgbyBjb21wb25lbnRlLlxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogPHBvLXBhZ2UtZWRpdFxyXG4gICAqICAgW3AtbGl0ZXJhbHNdPVwiY3VzdG9tTGl0ZXJhbHNcIj5cclxuICAgKiA8L3BvLXBhZ2UtZWRpdD5cclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqID4gTyBvYmpldG8gcGFkcsOjbyBkZSBsaXRlcmFpcyBzZXLDoSB0cmFkdXppZG8gZGUgYWNvcmRvIGNvbSBvIGlkaW9tYSBkb1xyXG4gICAqIFtgUG9JMThuU2VydmljZWBdKC9kb2N1bWVudGF0aW9uL3BvLWkxOG4pIG91IGRvIGJyb3dzZXIuXHJcbiAgICovXHJcbiAgQElucHV0KCdwLWxpdGVyYWxzJykgc2V0IGxpdGVyYWxzKHZhbHVlOiBQb1BhZ2VFZGl0TGl0ZXJhbHMpIHtcclxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCAmJiAhKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcbiAgICAgIHRoaXMuX2xpdGVyYWxzID0ge1xyXG4gICAgICAgIC4uLnBvUGFnZUVkaXRMaXRlcmFsc0RlZmF1bHRbcG9Mb2NhbGVEZWZhdWx0XSxcclxuICAgICAgICAuLi5wb1BhZ2VFZGl0TGl0ZXJhbHNEZWZhdWx0W3RoaXMubGFuZ3VhZ2VdLFxyXG4gICAgICAgIC4uLnZhbHVlXHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9saXRlcmFscyA9IHBvUGFnZUVkaXRMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV07XHJcbiAgICB9XHJcbiAgfVxyXG4gIGdldCBsaXRlcmFscygpIHtcclxuICAgIHJldHVybiB0aGlzLl9saXRlcmFscyB8fCBwb1BhZ2VFZGl0TGl0ZXJhbHNEZWZhdWx0W3RoaXMubGFuZ3VhZ2VdO1xyXG4gIH1cclxuXHJcbiAgLyoqIFTDrXR1bG8gZGEgcMOhZ2luYS4gKi9cclxuICBASW5wdXQoJ3AtdGl0bGUnKSBzZXQgdGl0bGUodGl0bGU6IHN0cmluZykge1xyXG4gICAgdGhpcy5fdGl0bGUgPSB0aXRsZTtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5wb1BhZ2VDb250ZW50LnJlY2FsY3VsYXRlSGVhZGVyU2l6ZSgpKTtcclxuICB9XHJcblxyXG4gIGdldCB0aXRsZSgpIHtcclxuICAgIHJldHVybiB0aGlzLl90aXRsZTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpIHtcclxuICAgIHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZVNlcnZpY2UuZ2V0U2hvcnRMYW5ndWFnZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=