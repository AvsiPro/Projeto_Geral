import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, ViewChild } from '@angular/core';
import { convertNumberToDecimal } from '../../../../../utils/util';
import { poChartGaugeSerieWidth } from '../../po-chart-circular/po-chart-circular.constant';
export class PoChartGaugeTextContentComponent {
    constructor(changeDetection) {
        this.changeDetection = changeDetection;
    }
    set gaugeWidth(value) {
        this._gaugeWidth = value;
        this.checkTextDescriptionSize();
    }
    get gaugeWidth() {
        return this._gaugeWidth;
    }
    set serie(serie) {
        if (serie) {
            this.serieValueConverted = this.convertValueInPercentFormat(serie.value);
            this._serie = Object.assign({}, serie);
        }
        else {
            this._serie = undefined;
        }
    }
    get serie() {
        return this._serie;
    }
    get hasSerieDescription() {
        return this.serie && this.serie.description;
    }
    get hasSerieValue() {
        return this.serie && this.serie.value >= 0;
    }
    get maxDescriptionWidth() {
        // Diferença contemplando a largura do path base e padding interno.
        const subtractionArea = this.gaugeWidth * poChartGaugeSerieWidth * 2 * 2;
        const descriptionWidth = this.gaugeWidth - subtractionArea;
        return { 'max-width': `${descriptionWidth}px` };
    }
    ngAfterViewInit() {
        this.checkTextDescriptionSize();
    }
    checkTextDescriptionSize() {
        if (this.descriptionElement) {
            // tooltip necessário para contornar comportamento inesperado do tooltip.
            setTimeout(() => {
                this.tooltip = this.isEllipsisActive();
            });
            this.changeDetection.detectChanges();
        }
    }
    convertValueInPercentFormat(value) {
        const decimalValue = String(convertNumberToDecimal(value, 1)).replace('.', ',');
        return `${decimalValue}%`;
    }
    isEllipsisActive() {
        const isExceededWidth = this.descriptionElement.nativeElement.offsetWidth < this.descriptionElement.nativeElement.scrollWidth;
        return isExceededWidth ? this.serie.description : undefined;
    }
}
PoChartGaugeTextContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-chart-gauge-text-content',
                template: "<div *ngIf=\"hasSerieValue\" class=\"po-chart-gauge-text-content\" tabindex=\"0\" [ngStyle]=\"maxDescriptionWidth\">\r\n  <p class=\"po-chart-gauge-text-value\">{{ serieValueConverted }}</p>\r\n  <p *ngIf=\"hasSerieDescription\" #description class=\"po-chart-gauge-text-description\" [p-tooltip]=\"tooltip\">\r\n    {{ serie?.description }}\r\n  </p>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PoChartGaugeTextContentComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PoChartGaugeTextContentComponent.propDecorators = {
    descriptionElement: [{ type: ViewChild, args: ['description', { read: ElementRef },] }],
    gaugeWidth: [{ type: Input, args: ['p-gauge-width',] }],
    serie: [{ type: Input, args: ['p-serie',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1jaGFydC9wby1jaGFydC10eXBlcy9wby1jaGFydC1nYXVnZS9wby1jaGFydC1nYXVnZS10ZXh0LWNvbnRlbnQvcG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssRUFDTCxTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFHbkUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFPNUYsTUFBTSxPQUFPLGdDQUFnQztJQWdDM0MsWUFBb0IsZUFBa0M7UUFBbEMsb0JBQWUsR0FBZixlQUFlLENBQW1CO0lBQUcsQ0FBQztJQXZCMUQsSUFBNEIsVUFBVSxDQUFDLEtBQWE7UUFDbEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFFekIsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBc0IsS0FBSyxDQUFDLEtBQXdCO1FBQ2xELElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekUsSUFBSSxDQUFDLE1BQU0scUJBQVEsS0FBSyxDQUFFLENBQUM7U0FDNUI7YUFBTTtZQUNMLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBSUQsSUFBSSxtQkFBbUI7UUFDckIsT0FBTyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO0lBQzlDLENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDZixPQUFPLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxJQUFJLG1CQUFtQjtRQUNyQixtRUFBbUU7UUFDbkUsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxzQkFBc0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUM7UUFFM0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLGdCQUFnQixJQUFJLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFTyx3QkFBd0I7UUFDOUIsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IseUVBQXlFO1lBQ3pFLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUN6QyxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdEM7SUFDSCxDQUFDO0lBRU8sMkJBQTJCLENBQUMsS0FBYTtRQUMvQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNoRixPQUFPLEdBQUcsWUFBWSxHQUFHLENBQUM7SUFDNUIsQ0FBQztJQUVPLGdCQUFnQjtRQUN0QixNQUFNLGVBQWUsR0FDbkIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7UUFFeEcsT0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDOUQsQ0FBQzs7O1lBL0VGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNkJBQTZCO2dCQUN2Qyx3WEFBMkQ7Z0JBQzNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7WUFoQkMsaUJBQWlCOzs7aUNBa0JoQixTQUFTLFNBQUMsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTt5QkFRN0MsS0FBSyxTQUFDLGVBQWU7b0JBVXJCLEtBQUssU0FBQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBBZnRlclZpZXdJbml0LFxyXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxyXG4gIENoYW5nZURldGVjdG9yUmVmLFxyXG4gIENvbXBvbmVudCxcclxuICBFbGVtZW50UmVmLFxyXG4gIElucHV0LFxyXG4gIFZpZXdDaGlsZFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgY29udmVydE51bWJlclRvRGVjaW1hbCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xyXG5cclxuaW1wb3J0IHsgUG9DaGFydEdhdWdlU2VyaWUgfSBmcm9tICcuLi9wby1jaGFydC1nYXVnZS1zZXJpZXMuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgcG9DaGFydEdhdWdlU2VyaWVXaWR0aCB9IGZyb20gJy4uLy4uL3BvLWNoYXJ0LWNpcmN1bGFyL3BvLWNoYXJ0LWNpcmN1bGFyLmNvbnN0YW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAncG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50JyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50LmNvbXBvbmVudC5odG1sJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUG9DaGFydEdhdWdlVGV4dENvbnRlbnRDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuICBAVmlld0NoaWxkKCdkZXNjcmlwdGlvbicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSBkZXNjcmlwdGlvbkVsZW1lbnQ6IEVsZW1lbnRSZWY7XHJcblxyXG4gIHNlcmllVmFsdWVDb252ZXJ0ZWQ6IHN0cmluZztcclxuICB0b29sdGlwOiBzdHJpbmc7XHJcblxyXG4gIHByaXZhdGUgX2dhdWdlV2lkdGg6IG51bWJlcjtcclxuICBwcml2YXRlIF9zZXJpZTogUG9DaGFydEdhdWdlU2VyaWU7XHJcblxyXG4gIEBJbnB1dCgncC1nYXVnZS13aWR0aCcpIHNldCBnYXVnZVdpZHRoKHZhbHVlOiBudW1iZXIpIHtcclxuICAgIHRoaXMuX2dhdWdlV2lkdGggPSB2YWx1ZTtcclxuXHJcbiAgICB0aGlzLmNoZWNrVGV4dERlc2NyaXB0aW9uU2l6ZSgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGdhdWdlV2lkdGgoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZ2F1Z2VXaWR0aDtcclxuICB9XHJcblxyXG4gIEBJbnB1dCgncC1zZXJpZScpIHNldCBzZXJpZShzZXJpZTogUG9DaGFydEdhdWdlU2VyaWUpIHtcclxuICAgIGlmIChzZXJpZSkge1xyXG4gICAgICB0aGlzLnNlcmllVmFsdWVDb252ZXJ0ZWQgPSB0aGlzLmNvbnZlcnRWYWx1ZUluUGVyY2VudEZvcm1hdChzZXJpZS52YWx1ZSk7XHJcbiAgICAgIHRoaXMuX3NlcmllID0geyAuLi5zZXJpZSB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fc2VyaWUgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXQgc2VyaWUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fc2VyaWU7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XHJcblxyXG4gIGdldCBoYXNTZXJpZURlc2NyaXB0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc2VyaWUgJiYgdGhpcy5zZXJpZS5kZXNjcmlwdGlvbjtcclxuICB9XHJcblxyXG4gIGdldCBoYXNTZXJpZVZhbHVlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc2VyaWUgJiYgdGhpcy5zZXJpZS52YWx1ZSA+PSAwO1xyXG4gIH1cclxuXHJcbiAgZ2V0IG1heERlc2NyaXB0aW9uV2lkdGgoKSB7XHJcbiAgICAvLyBEaWZlcmVuw6dhIGNvbnRlbXBsYW5kbyBhIGxhcmd1cmEgZG8gcGF0aCBiYXNlIGUgcGFkZGluZyBpbnRlcm5vLlxyXG4gICAgY29uc3Qgc3VidHJhY3Rpb25BcmVhID0gdGhpcy5nYXVnZVdpZHRoICogcG9DaGFydEdhdWdlU2VyaWVXaWR0aCAqIDIgKiAyO1xyXG4gICAgY29uc3QgZGVzY3JpcHRpb25XaWR0aCA9IHRoaXMuZ2F1Z2VXaWR0aCAtIHN1YnRyYWN0aW9uQXJlYTtcclxuXHJcbiAgICByZXR1cm4geyAnbWF4LXdpZHRoJzogYCR7ZGVzY3JpcHRpb25XaWR0aH1weGAgfTtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIHRoaXMuY2hlY2tUZXh0RGVzY3JpcHRpb25TaXplKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrVGV4dERlc2NyaXB0aW9uU2l6ZSgpIHtcclxuICAgIGlmICh0aGlzLmRlc2NyaXB0aW9uRWxlbWVudCkge1xyXG4gICAgICAvLyB0b29sdGlwIG5lY2Vzc8OhcmlvIHBhcmEgY29udG9ybmFyIGNvbXBvcnRhbWVudG8gaW5lc3BlcmFkbyBkbyB0b29sdGlwLlxyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0aGlzLmlzRWxsaXBzaXNBY3RpdmUoKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0aW9uLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY29udmVydFZhbHVlSW5QZXJjZW50Rm9ybWF0KHZhbHVlOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgZGVjaW1hbFZhbHVlID0gU3RyaW5nKGNvbnZlcnROdW1iZXJUb0RlY2ltYWwodmFsdWUsIDEpKS5yZXBsYWNlKCcuJywgJywnKTtcclxuICAgIHJldHVybiBgJHtkZWNpbWFsVmFsdWV9JWA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGlzRWxsaXBzaXNBY3RpdmUoKSB7XHJcbiAgICBjb25zdCBpc0V4Y2VlZGVkV2lkdGggPVxyXG4gICAgICB0aGlzLmRlc2NyaXB0aW9uRWxlbWVudC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoIDwgdGhpcy5kZXNjcmlwdGlvbkVsZW1lbnQubmF0aXZlRWxlbWVudC5zY3JvbGxXaWR0aDtcclxuXHJcbiAgICByZXR1cm4gaXNFeGNlZWRlZFdpZHRoID8gdGhpcy5zZXJpZS5kZXNjcmlwdGlvbiA6IHVuZGVmaW5lZDtcclxuICB9XHJcbn1cclxuIl19