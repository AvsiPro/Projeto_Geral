import { Directive, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
import { poLocaleDefault } from '../../../services/po-language/po-language.constant';
import { PoPageContentComponent } from '../po-page-content/po-page-content.component';
export const poPageDetailLiteralsDefault = {
    en: {
        back: 'Back',
        edit: 'Edit',
        remove: 'Remove'
    },
    es: {
        back: 'Volver',
        edit: 'Editar',
        remove: 'Eliminar'
    },
    pt: {
        back: 'Voltar',
        edit: 'Editar',
        remove: 'Remover'
    },
    ru: {
        back: 'возвращение',
        edit: 'редактировать',
        remove: 'удаление'
    }
};
/**
 * @description
 *
 * O componente **po-page-detail** é utilizado como container principal para a tela de
 * detalhamento de um registro, tendo a possibilidade de usar as ações de "Voltar", "Editar" e "Remover".
 */
export class PoPageDetailBaseComponent {
    constructor(languageService) {
        /**
         * Evento que será disparado ao clicar no botão de "Voltar".
         *
         * ```
         * <po-page-detail (p-back)="myBackFunction()">
         * </po-page-detail>
         * ```
         *
         * > Caso não utilizar esta propriedade, o botão de "Voltar" não será exibido.
         */
        this.back = new EventEmitter();
        /**
         * Evento que será disparado ao clicar no botão de "Editar".
         *
         * ```
         * <po-page-detail (p-edit)="myEditFunction()">
         * </po-page-detail>
         * ```
         *
         * > Caso não utilizar esta propriedade, o botão de "Editar" não será exibido.
         */
        this.edit = new EventEmitter();
        /**
         * Evento que será disparado ao clicar no botão de "Remover".
         *
         * ```
         * <po-page-detail (p-remove)="myRemoveFunction()">
         * </po-page-detail>
         * ```
         *
         * > Caso não utilizar esta propriedade, o botão de "Remover" não será exibido.
         */
        this.remove = new EventEmitter();
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-detail`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageDetailLiterals = {
     *    edit: 'Edição',
     *    remove: 'Exclusão',
     *    back: 'Menu'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageDetailLiterals = {
     *    remove: 'Excluir registro permanentemente'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-detail
     *   [p-literals]="customLiterals">
     * </po-page-detail>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poPageDetailLiteralsDefault[poLocaleDefault]), poPageDetailLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poPageDetailLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageDetailLiteralsDefault[this.language];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        setTimeout(() => this.poPageContent.recalculateHeaderSize());
    }
    get title() {
        return this._title;
    }
}
PoPageDetailBaseComponent.decorators = [
    { type: Directive }
];
PoPageDetailBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoPageDetailBaseComponent.propDecorators = {
    poPageContent: [{ type: ViewChild, args: [PoPageContentComponent, { static: true },] }],
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    back: [{ type: Output, args: ['p-back',] }],
    edit: [{ type: Output, args: ['p-edit',] }],
    remove: [{ type: Output, args: ['p-remove',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    title: [{ type: Input, args: ['p-title',] }]
};
//# sourceMappingURL=data:application/json;base64,