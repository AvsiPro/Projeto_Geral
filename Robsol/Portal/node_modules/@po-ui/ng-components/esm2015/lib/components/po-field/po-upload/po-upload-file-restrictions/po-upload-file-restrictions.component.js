import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';
import { formatBytes } from '../../../../utils/util';
import { PoLanguageService } from '../../../../services/po-language/po-language.service';
import { poLocaleDefault } from '../../../../services/po-language/po-language.constant';
import { poUploadLiteralsDefault } from '../po-upload-base.component';
export class PoUploadFileRestrictionsComponent {
    constructor(changeDetector, languageService) {
        this.changeDetector = changeDetector;
        this.language = languageService.getShortLanguage();
    }
    set allowedExtensions(value) {
        this._allowedExtensions = this.formatAllowedExtensions(value);
    }
    get allowedExtensions() {
        return this._allowedExtensions;
    }
    set maxFileSize(value) {
        this._maxFileSize = formatBytes(value);
    }
    get maxFileSize() {
        return this._maxFileSize;
    }
    set minFileSize(value) {
        this._minFileSize = formatBytes(value);
    }
    get minFileSize() {
        return this._minFileSize;
    }
    ngOnInit() {
        this.setLiterals();
    }
    formatAllowedExtensions(allowedExtensions) {
        const conjunction = { 'pt': 'e', 'en': 'and', 'es': 'y', 'ru': 'Ð¸' };
        return allowedExtensions
            ? allowedExtensions
                .join(', ')
                .toUpperCase()
                .replace(/,(?=[^,]*$)/, ` ${conjunction[this.language]}`)
            : undefined;
    }
    setLiterals() {
        this.literals = Object.assign(Object.assign({}, poUploadLiteralsDefault[poLocaleDefault]), poUploadLiteralsDefault[this.language]);
        this.changeDetector.detectChanges();
    }
}
PoUploadFileRestrictionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-upload-file-restrictions',
                template: "<p class=\"po-font-text-small\" *ngIf=\"maxFiles > 1\">\r\n  {{ literals?.numberOfFilesAllowed | poI18n: maxFiles }}\r\n</p>\r\n\r\n<p class=\"po-font-text-small\" *ngIf=\"allowedExtensions\">\r\n  {{ literals?.allowedFormats | poI18n: allowedExtensions }}\r\n</p>\r\n\r\n<p class=\"po-font-text-small\" *ngIf=\"minFileSize || maxFileSize\">\r\n  <span>{{ literals?.allowedSizes }}</span>\r\n\r\n  <span *ngIf=\"minFileSize && maxFileSize\">\r\n    {{ literals?.allowedFileSizeRange | poI18n: [minFileSize, maxFileSize] }}\r\n  </span>\r\n\r\n  <span *ngIf=\"minFileSize && !maxFileSize\">\r\n    {{ literals?.minFileSizeAllowed | poI18n: minFileSize }}\r\n  </span>\r\n\r\n  <span *ngIf=\"maxFileSize && !minFileSize\">\r\n    {{ literals?.maxFileSizeAllowed | poI18n: maxFileSize }}\r\n  </span>\r\n</p>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PoUploadFileRestrictionsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: PoLanguageService }
];
PoUploadFileRestrictionsComponent.propDecorators = {
    maxFiles: [{ type: Input, args: ['p-max-files',] }],
    allowedExtensions: [{ type: Input, args: ['p-allowed-extensions',] }],
    maxFileSize: [{ type: Input, args: ['p-max-file-size',] }],
    minFileSize: [{ type: Input, args: ['p-min-file-size',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLWZpbGUtcmVzdHJpY3Rpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1maWVsZC9wby11cGxvYWQvcG8tdXBsb2FkLWZpbGUtcmVzdHJpY3Rpb25zL3BvLXVwbG9hZC1maWxlLXJlc3RyaWN0aW9ucy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFckcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUV4RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQU90RSxNQUFNLE9BQU8saUNBQWlDO0lBa0M1QyxZQUFvQixjQUFpQyxFQUFFLGVBQWtDO1FBQXJFLG1CQUFjLEdBQWQsY0FBYyxDQUFtQjtRQUNuRCxJQUFJLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ3JELENBQUM7SUExQkQsSUFBbUMsaUJBQWlCLENBQUMsS0FBSztRQUN4RCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFNLEtBQUssQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxJQUFJLGlCQUFpQjtRQUNuQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztJQUNqQyxDQUFDO0lBRUQsSUFBOEIsV0FBVyxDQUFDLEtBQUs7UUFDN0MsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQU0sS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBOEIsV0FBVyxDQUFDLEtBQUs7UUFDN0MsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQU0sS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBTUQsUUFBUTtRQUNOLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRU8sdUJBQXVCLENBQUMsaUJBQWdDO1FBQzlELE1BQU0sV0FBVyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBRXJFLE9BQU8saUJBQWlCO1lBQ3RCLENBQUMsQ0FBQyxpQkFBaUI7aUJBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQztpQkFDVixXQUFXLEVBQUU7aUJBQ2IsT0FBTyxDQUFDLGFBQWEsRUFBRSxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUM3RCxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ2hCLENBQUM7SUFFTyxXQUFXO1FBQ2pCLElBQUksQ0FBQyxRQUFRLG1DQUNSLHVCQUF1QixDQUFDLGVBQWUsQ0FBQyxHQUN4Qyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQzFDLENBQUM7UUFFRixJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3RDLENBQUM7OztZQWpFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDZCQUE2QjtnQkFDdkMscXpCQUEyRDtnQkFDM0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7OztZQVppQyxpQkFBaUI7WUFHMUMsaUJBQWlCOzs7dUJBV3ZCLEtBQUssU0FBQyxhQUFhO2dDQVNuQixLQUFLLFNBQUMsc0JBQXNCOzBCQVE1QixLQUFLLFNBQUMsaUJBQWlCOzBCQVF2QixLQUFLLFNBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IGZvcm1hdEJ5dGVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XHJcbmltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IHBvTG9jYWxlRGVmYXVsdCB9IGZyb20gJy4uLy4uLy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLmNvbnN0YW50JztcclxuXHJcbmltcG9ydCB7IHBvVXBsb2FkTGl0ZXJhbHNEZWZhdWx0IH0gZnJvbSAnLi4vcG8tdXBsb2FkLWJhc2UuY29tcG9uZW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAncG8tdXBsb2FkLWZpbGUtcmVzdHJpY3Rpb25zJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdXBsb2FkLWZpbGUtcmVzdHJpY3Rpb25zLmNvbXBvbmVudC5odG1sJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUG9VcGxvYWRGaWxlUmVzdHJpY3Rpb25zQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBASW5wdXQoJ3AtbWF4LWZpbGVzJykgbWF4RmlsZXM6IG51bWJlcjtcclxuXHJcbiAgbGl0ZXJhbHM6IGFueTtcclxuXHJcbiAgcHJpdmF0ZSBfYWxsb3dlZEV4dGVuc2lvbnM6IHN0cmluZztcclxuICBwcml2YXRlIF9tYXhGaWxlU2l6ZTogc3RyaW5nO1xyXG4gIHByaXZhdGUgX21pbkZpbGVTaXplOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBsYW5ndWFnZTogc3RyaW5nO1xyXG5cclxuICBASW5wdXQoJ3AtYWxsb3dlZC1leHRlbnNpb25zJykgc2V0IGFsbG93ZWRFeHRlbnNpb25zKHZhbHVlKSB7XHJcbiAgICB0aGlzLl9hbGxvd2VkRXh0ZW5zaW9ucyA9IHRoaXMuZm9ybWF0QWxsb3dlZEV4dGVuc2lvbnMoPGFueT52YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBnZXQgYWxsb3dlZEV4dGVuc2lvbnMoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9hbGxvd2VkRXh0ZW5zaW9ucztcclxuICB9XHJcblxyXG4gIEBJbnB1dCgncC1tYXgtZmlsZS1zaXplJykgc2V0IG1heEZpbGVTaXplKHZhbHVlKSB7XHJcbiAgICB0aGlzLl9tYXhGaWxlU2l6ZSA9IGZvcm1hdEJ5dGVzKDxhbnk+dmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IG1heEZpbGVTaXplKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fbWF4RmlsZVNpemU7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoJ3AtbWluLWZpbGUtc2l6ZScpIHNldCBtaW5GaWxlU2l6ZSh2YWx1ZSkge1xyXG4gICAgdGhpcy5fbWluRmlsZVNpemUgPSBmb3JtYXRCeXRlcyg8YW55PnZhbHVlKTtcclxuICB9XHJcblxyXG4gIGdldCBtaW5GaWxlU2l6ZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX21pbkZpbGVTaXplO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpIHtcclxuICAgIHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZVNlcnZpY2UuZ2V0U2hvcnRMYW5ndWFnZSgpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLnNldExpdGVyYWxzKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZvcm1hdEFsbG93ZWRFeHRlbnNpb25zKGFsbG93ZWRFeHRlbnNpb25zOiBBcnJheTxzdHJpbmc+KTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGNvbmp1bmN0aW9uID0geyAncHQnOiAnZScsICdlbic6ICdhbmQnLCAnZXMnOiAneScsICdydSc6ICfQuCcgfTtcclxuXHJcbiAgICByZXR1cm4gYWxsb3dlZEV4dGVuc2lvbnNcclxuICAgICAgPyBhbGxvd2VkRXh0ZW5zaW9uc1xyXG4gICAgICAgICAgLmpvaW4oJywgJylcclxuICAgICAgICAgIC50b1VwcGVyQ2FzZSgpXHJcbiAgICAgICAgICAucmVwbGFjZSgvLCg/PVteLF0qJCkvLCBgICR7Y29uanVuY3Rpb25bdGhpcy5sYW5ndWFnZV19YClcclxuICAgICAgOiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldExpdGVyYWxzKCkge1xyXG4gICAgdGhpcy5saXRlcmFscyA9IHtcclxuICAgICAgLi4ucG9VcGxvYWRMaXRlcmFsc0RlZmF1bHRbcG9Mb2NhbGVEZWZhdWx0XSxcclxuICAgICAgLi4ucG9VcGxvYWRMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==