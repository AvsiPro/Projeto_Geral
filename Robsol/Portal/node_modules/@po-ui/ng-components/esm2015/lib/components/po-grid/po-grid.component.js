import { ChangeDetectorRef, Component, ElementRef, Input, Renderer2, ViewChild } from '@angular/core';
/**
 * @description
 *
 * > Componente em desenvolvimento, podendo haver BREAKING CHANGES nas próximas versões.
 *
 * Componente grid.
 *
 * Ações / atalhos:
 *
 * - ARROW-UP: Navega para celula superior / Na ultima linha adiciona uma linha em branco no grid;
 * - ARROW-DOWN: Navega para celula inferior;
 * - ARROW-RIGHT: Navega para celula direita;
 * - ARROW-LEFT: Navega para celula esquerda;
 * - TAB: Navega para próxima celula;
 * - SHIFT+TAB: Navega para celula anterior;
 * - CTRL+DEL: Remove linha;
 * - DEL/BACKSPACE: Limpa celula;
 * - ENTER: Edita linha com valor atual/Confirma edição da celula;
 * - DOUBLE-CLICK: Edita linha com valor atual;
 * - ESC: Cancela edição da celula / Cancela inserção de linhas em branco;
 * - A..Z/0..9: Inicia edição com valor em branco.
 *
 * @example
 *
 * <example name="po-grid-basic" title="PO Grid Basic">
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.html"> </file>
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.ts"> </file>
 * </example>
 */
export class PoGridComponent {
    constructor(changeDetectorRef, elRef, renderer) {
        this.changeDetectorRef = changeDetectorRef;
        this.elRef = elRef;
        /**
         * @description
         *
         * Ações disparadas quando uma linha do grid é manipulada.
         */
        this.rowActions = {};
        /**
         * Lista com os dados que serão exibidos no grid.
         */
        this.data = [];
        this.lastCell = '0-0';
        this.lastRow = 0;
        this.lastColumn = 0;
        this.currencyCell = '0-0';
        this.currencyRow = 0;
        this.currencyColumn = 0;
        this.logger = false;
        this.width = '100%';
        this.widporeeze = 0;
        this.widthActions = 0;
        this._columns = [];
        this.debounceResize();
        this.resizeListener = renderer.listen('window', 'resize', (event) => {
            this.debounceResize();
        });
    }
    /**
     * Colunas exibidas no grid.
     */
    set columns(value) {
        this._columns = [...value];
        this._columns.forEach(column => {
            column.label = column.label || column.property;
            if (column.freeze === true) {
                column.cssWidth = `${column.width || 100}px`;
            }
            else {
                column.cssWidth = column.width ? `${column.width}px` : '100%';
            }
        });
    }
    get columns() {
        return this._columns.filter(column => column.freeze !== true && column.action !== true);
    }
    ngOnDestroy() {
        if (this.resizeListener) {
            this.resizeListener();
        }
    }
    get freezeColumns() {
        const freezeColumns = this._columns.filter(column => column.freeze === true);
        this.widporeeze = freezeColumns.reduce((prev, current) => prev + (current.width || 100), 0);
        return freezeColumns;
    }
    get actionColumns() {
        const actionsColumns = this._columns.filter(column => column.action === true);
        this.widthActions = actionsColumns.length > 0 ? 56 : 0;
        return actionsColumns;
    }
    cancelRow(event, row) {
        const el = this.getEventPath(event).find(element => element.id);
        if (!el) {
            return;
        }
        const [x] = el.id.split('-');
        if (this.isEmptyRow(x)) {
            if (!this.removeRow(event, row)) {
                return;
            }
            this.currencyObj = Object.assign({}, this.data[this.currencyRow - 1]);
        }
        else {
            this.data[+x - 1] = Object.assign({}, this.currencyObj);
            setTimeout(() => this.selectCell(this.currencyRow, this.currencyColumn));
        }
    }
    removeRow(event, row) {
        if (this.rowActions.beforeRemove && !this.rowActions.beforeRemove(Object.assign({}, row))) {
            return false;
        }
        const index = this.data.indexOf(row);
        this.data.splice(index, 1);
        this.changeDetectorRef.detectChanges();
        if (this.data.length === 0 || index === this.data.length) {
            this.selectCell(this.currencyRow - 1, this.currencyColumn);
        }
        else {
            this.selectCell(this.currencyRow, this.currencyColumn);
        }
        return true;
    }
    tableKeydown(event, direction) {
        let [row, col] = event.target.id.split('-');
        row = +row;
        col = +col;
        let prow = +row;
        let pcol = +col;
        if (direction === 'down') {
            if (row <= this.data.length) {
                prow++;
            }
            if (row === this.data.length) {
                if (row === 0 || !this.isEmptyRow(row)) {
                    if (this.saveRow(row)) {
                        if (!this.insertRow()) {
                            return;
                        }
                    }
                    else {
                        return;
                    }
                }
                else {
                    prow--;
                }
            }
        }
        else if (direction === 'up' && row > 0) {
            prow--;
        }
        else if (direction === 'left' && col > 0) {
            pcol--;
        }
        else if (direction === 'right' && col < this._columns.length - 1) {
            pcol++;
        }
        else if (direction === 'next') {
            if (col < this._columns.length - 1) {
                pcol++;
                event.preventDefault();
            }
            else if (row < this.data.length) {
                pcol = 0;
                prow++;
                event.preventDefault();
            }
        }
        else if (direction === 'prior') {
            if (col > 0) {
                pcol--;
                event.preventDefault();
            }
            else if (row > 0) {
                pcol = this._columns.length - 1;
                prow--;
                event.preventDefault();
            }
        }
        if (this.currencyCell === `${prow}-${pcol}`) {
            return;
        }
        if (prow !== this.currencyRow && row > 0 && this.data.length >= row) {
            if (!this.isEmptyRow(row)) {
                if (!this.saveRow(row)) {
                    return;
                }
            }
            else {
                if (!this.removeRow(event, row)) {
                    return;
                }
            }
        }
        if (this.currencyRow !== prow) {
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
        }
        this.lastCell = event.target.id;
        this.lastRow = row;
        this.lastColumn = col;
        this.selectCell(prow, pcol);
    }
    tableClick(event) {
        const el = this.getEventPath(event).find(element => element.id);
        if (!el) {
            this.selectCell(this.currencyRow, this.currencyColumn);
            return;
        }
        if (this.currencyCell === el.id) {
            return;
        }
        const [row, col] = el.id.split('-');
        const prow = +row;
        const pcol = +col;
        if (prow !== this.currencyRow) {
            if (this.currencyRow > 0) {
                if (!this.isEmptyRow(this.currencyRow)) {
                    if (!this.saveRow(this.currencyRow)) {
                        this.selectCell(this.currencyRow, this.currencyColumn);
                        return;
                    }
                }
                else {
                    if (!this.removeRow(event, row)) {
                        return;
                    }
                }
            }
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
        }
        this.lastCell = this.currencyCell;
        this.lastRow = this.currencyRow;
        this.lastColumn = this.currencyColumn;
        this.currencyCell = el.id;
        this.currencyRow = prow;
        this.currencyColumn = pcol;
    }
    saveRow(row) {
        const obj = this.data[row - 1];
        if (!Object.keys(obj).some(prop => obj[prop] !== this.currencyObj[prop])) {
            return true;
        }
        if (this.rowActions.beforeSave && !this.rowActions.beforeSave(obj, this.currencyObj)) {
            return false;
        }
        const requireds = [];
        this.columns.forEach(column => {
            if (column.required === true && !obj[column.property]) {
                requireds.push(column.property);
            }
        });
        return requireds.length === 0;
    }
    insertRow() {
        const obj = {};
        if (this.rowActions.beforeInsert && !this.rowActions.beforeInsert(obj)) {
            return false;
        }
        this.data.push(obj);
        this.changeDetectorRef.detectChanges();
        return true;
    }
    isEmptyRow(row) {
        const obj = this.data[row - 1];
        if (!obj) {
            // title
            return false;
        }
        const filled = Object.keys(obj).some(property => obj[property]);
        return !filled;
    }
    selectCell(row, col) {
        const nextCell = this.elRef.nativeElement.querySelector(`[id='${row}-${col}']`);
        if (nextCell) {
            this.currencyCell = `${row}-${col}`;
            this.currencyRow = row;
            this.currencyColumn = col;
            nextCell.focus();
        }
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            const widthTableWrapper = this.tableWrapper.nativeElement.offsetWidth;
            this.width = `${widthTableWrapper - (this.widporeeze + 8) - this.widthActions}px`;
        }, 100);
    }
    getEventPath(event) {
        // firefox do not have support to event.path
        return event.path || event.composedPath();
    }
}
PoGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-grid',
                template: "<div class=\"po-grid-wrapper po-grid-row-wrapper\" #wrapper>\r\n  <div *ngIf=\"logger\">\r\n    lastCell: {{ lastCell }} | currencyCell: {{ currencyCell }} <br />\r\n    lastRow: {{ lastRow }} | currencyRow: {{ currencyRow }} <br />\r\n    lastColumn: {{ lastColumn }} | currencyColumn: {{ currencyColumn }} <br />\r\n    <hr />\r\n    currencyObj: {{ currencyObj | json }}\r\n    <hr />\r\n  </div>\r\n\r\n  <div class=\"po-grid\">\r\n    <div class=\"po-grid-body\">\r\n      <div\r\n        class=\"po-grid-row\"\r\n        #table\r\n        (keydown.arrowup)=\"tableKeydown($event, 'up')\"\r\n        (keydown.arrowdown)=\"tableKeydown($event, 'down')\"\r\n        (keydown.arrowleft)=\"tableKeydown($event, 'left')\"\r\n        (keydown.arrowright)=\"tableKeydown($event, 'right')\"\r\n        (keydown.tab)=\"tableKeydown($event, 'next')\"\r\n        (keydown.shift.tab)=\"tableKeydown($event, 'prior')\"\r\n        (click)=\"tableClick($event)\"\r\n        (contextmenu)=\"tableClick($event)\"\r\n        (dblclick)=\"tableClick($event)\"\r\n      >\r\n        <div class=\"po-grid-cell po-grid-cell-freeze\" *ngIf=\"freezeColumns.length > 0\">\r\n          <ng-container *ngTemplateOutlet=\"divFreezeColumns\"></ng-container>\r\n        </div>\r\n\r\n        <div\r\n          class=\"po-grid-cell po-grid-cell-normal\"\r\n          [style.width]=\"width\"\r\n          [style.max-width]=\"width\"\r\n          [style.min-width]=\"width\"\r\n        >\r\n          <ng-container *ngTemplateOutlet=\"divColumns\"></ng-container>\r\n        </div>\r\n\r\n        <div class=\"po-grid-cell po-grid-cell-action\" *ngIf=\"actionColumns.length > 0\">\r\n          <ng-container *ngTemplateOutlet=\"divActionColumns\"></ng-container>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Coluna com as colunas congeladas -->\r\n<ng-template #divFreezeColumns>\r\n  <div class=\"po-grid po-grid-freeze\">\r\n    <div class=\"po-grid-header-group\">\r\n      <div class=\"po-grid-row\">\r\n        <po-grid-head\r\n          *ngFor=\"let column of freezeColumns; index as i\"\r\n          class=\"po-grid-title\"\r\n          [style.width]=\"column.cssWidth\"\r\n          [style.max-width]=\"column.cssWidth\"\r\n          [style.min-width]=\"column.cssWidth\"\r\n          p-freeze=\"true\"\r\n          p-position=\"{{ '0-' + i }}\"\r\n          [p-width]=\"column.width\"\r\n          [p-align]=\"column.align\"\r\n          [p-title]=\"column.label\"\r\n        >\r\n        </po-grid-head>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"po-grid-body\">\r\n      <div\r\n        class=\"po-grid-row\"\r\n        *ngFor=\"let row of data; index as j\"\r\n        (keydown.control.delete)=\"removeRow($event, row)\"\r\n        (keydown.esc)=\"cancelRow($event, row)\"\r\n      >\r\n        <po-grid-cell\r\n          *ngFor=\"let column of freezeColumns; index as i\"\r\n          class=\"po-grid-cell\"\r\n          [style.width]=\"column.cssWidth\"\r\n          [style.max-width]=\"column.cssWidth\"\r\n          [style.min-width]=\"column.cssWidth\"\r\n          p-freeze=\"true\"\r\n          [p-align]=\"column.align\"\r\n          [p-readonly]=\"column.readonly\"\r\n          [p-required]=\"column.required\"\r\n          p-position=\"{{ j + 1 + '-' + i }}\"\r\n          [p-width]=\"column.width\"\r\n          [(p-value)]=\"row[column.property]\"\r\n        >\r\n        </po-grid-cell>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<!-- FIM: Coluna com as colunas congeladas -->\r\n\r\n<!-- Coluna com as colunas nornais -->\r\n<ng-template #divColumns>\r\n  <div class=\"po-grid po-grid-normal\">\r\n    <div class=\"po-grid-header-group\">\r\n      <div class=\"po-grid-row\">\r\n        <po-grid-head\r\n          *ngFor=\"let column of columns; index as i\"\r\n          class=\"po-grid-title\"\r\n          [style.width]=\"column.cssWidth\"\r\n          [style.max-width]=\"column.cssWidth\"\r\n          [style.min-width]=\"column.cssWidth\"\r\n          [p-align]=\"column.align\"\r\n          p-position=\"{{ '0-' + (i + freezeColumns.length) }}\"\r\n          [p-title]=\"column.label\"\r\n          [p-width]=\"column.width\"\r\n        >\r\n        </po-grid-head>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"po-grid-body\">\r\n      <div\r\n        class=\"po-grid-row\"\r\n        *ngFor=\"let row of data; index as j\"\r\n        (keydown.control.delete)=\"removeRow($event, row)\"\r\n        (keydown.esc)=\"cancelRow($event, row)\"\r\n      >\r\n        <po-grid-cell\r\n          *ngFor=\"let column of columns; index as i\"\r\n          class=\"po-grid-cell\"\r\n          [style.width]=\"column.cssWidth\"\r\n          [style.max-width]=\"column.cssWidth\"\r\n          [style.min-width]=\"column.cssWidth\"\r\n          [p-align]=\"column.align\"\r\n          [p-readonly]=\"column.readonly\"\r\n          [p-required]=\"column.required\"\r\n          p-position=\"{{ j + 1 + '-' + (i + freezeColumns.length) }}\"\r\n          [(p-value)]=\"row[column.property]\"\r\n          [p-width]=\"column.width\"\r\n        >\r\n        </po-grid-cell>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<!-- FIM: Coluna com as colunas nornais -->\r\n\r\n<!-- Coluna com as colunas de a\u00E7\u00E3o -->\r\n<ng-template #divActionColumns>\r\n  <div class=\"po-grid po-grid-actions\">\r\n    <div class=\"po-grid-header-group\">\r\n      <div class=\"po-grid-row\">\r\n        <po-grid-head\r\n          *ngFor=\"let column of actionColumns; index as i\"\r\n          class=\"po-grid-title\"\r\n          p-position=\"{{ '0-' + (i + freezeColumns.length + columns.length) }}\"\r\n          [p-title]=\"column.label\"\r\n          [p-align]=\"column.align\"\r\n        >\r\n        </po-grid-head>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"po-grid-body\">\r\n      <div\r\n        class=\"po-grid-row\"\r\n        *ngFor=\"let row of data; index as j\"\r\n        (keydown.control.delete)=\"removeRow($event, row)\"\r\n        (keydown.esc)=\"cancelRow($event, row)\"\r\n      >\r\n        <po-grid-cell-action\r\n          *ngFor=\"let column of actionColumns; index as i\"\r\n          class=\"po-grid-cell\"\r\n          p-position=\"{{ j + 1 + '-' + (i + freezeColumns.length + columns.length) }}\"\r\n          [p-value]=\"row[column.property]\"\r\n        >\r\n        </po-grid-cell-action>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<!-- FIM: Coluna com as colunas de a\u00E7\u00E3o -->\r\n"
            },] }
];
PoGridComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: Renderer2 }
];
PoGridComponent.propDecorators = {
    tableElement: [{ type: ViewChild, args: ['table', { static: true },] }],
    tableWrapper: [{ type: ViewChild, args: ['wrapper', { static: true },] }],
    rowActions: [{ type: Input, args: ['p-row-actions',] }],
    data: [{ type: Input, args: ['p-data',] }],
    columns: [{ type: Input, args: ['p-columns',] }]
};
//# sourceMappingURL=data:application/json;base64,