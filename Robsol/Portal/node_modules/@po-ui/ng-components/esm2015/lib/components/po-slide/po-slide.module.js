import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { PoContainerModule } from '../po-container/po-container.module';
import { PoSlideCirclesComponent } from './po-slide-circles/po-slide-circles.component';
import { PoSlideComponent } from './po-slide.component';
import { PoSlideContentTemplateDirective } from './directives/po-slide-content-template.directive';
import { PoSlideControlComponent } from './po-slide-control/po-slide-control.component';
import { PoSlideItemComponent } from './po-slide-item/po-slide-item.component';
/**
 * @description
 *
 * Módulo do componente `po-slide`.
 *
 * > Para o correto funcionamento do componente `po-slide`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
export class PoSlideModule {
}
PoSlideModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule, PoContainerModule],
                declarations: [
                    PoSlideCirclesComponent,
                    PoSlideComponent,
                    PoSlideControlComponent,
                    PoSlideContentTemplateDirective,
                    PoSlideItemComponent
                ],
                exports: [PoSlideComponent, PoSlideContentTemplateDirective],
                providers: [],
                schemas: []
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2xpZGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXNsaWRlL3BvLXNsaWRlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFeEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDeEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDbkcsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDeEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFFL0U7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQThCRztBQWNILE1BQU0sT0FBTyxhQUFhOzs7WUFiekIsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUsaUJBQWlCLENBQUM7Z0JBQ3hELFlBQVksRUFBRTtvQkFDWix1QkFBdUI7b0JBQ3ZCLGdCQUFnQjtvQkFDaEIsdUJBQXVCO29CQUN2QiwrQkFBK0I7b0JBQy9CLG9CQUFvQjtpQkFDckI7Z0JBQ0QsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsK0JBQStCLENBQUM7Z0JBQzVELFNBQVMsRUFBRSxFQUFFO2dCQUNiLE9BQU8sRUFBRSxFQUFFO2FBQ1oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5cclxuaW1wb3J0IHsgUG9Db250YWluZXJNb2R1bGUgfSBmcm9tICcuLi9wby1jb250YWluZXIvcG8tY29udGFpbmVyLm1vZHVsZSc7XHJcblxyXG5pbXBvcnQgeyBQb1NsaWRlQ2lyY2xlc0NvbXBvbmVudCB9IGZyb20gJy4vcG8tc2xpZGUtY2lyY2xlcy9wby1zbGlkZS1jaXJjbGVzLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBvU2xpZGVDb21wb25lbnQgfSBmcm9tICcuL3BvLXNsaWRlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBvU2xpZGVDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvcG8tc2xpZGUtY29udGVudC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBQb1NsaWRlQ29udHJvbENvbXBvbmVudCB9IGZyb20gJy4vcG8tc2xpZGUtY29udHJvbC9wby1zbGlkZS1jb250cm9sLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBvU2xpZGVJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9wby1zbGlkZS1pdGVtL3BvLXNsaWRlLWl0ZW0uY29tcG9uZW50JztcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogTcOzZHVsbyBkbyBjb21wb25lbnRlIGBwby1zbGlkZWAuXHJcbiAqXHJcbiAqID4gUGFyYSBvIGNvcnJldG8gZnVuY2lvbmFtZW50byBkbyBjb21wb25lbnRlIGBwby1zbGlkZWAsIGRldmUgc2VyIGltcG9ydGFkbyBvIG3Ds2R1bG8gYEJyb3dzZXJBbmltYXRpb25zTW9kdWxlYCBub1xyXG4gKiA+IG3Ds2R1bG8gcHJpbmNpcGFsIGRhIHN1YSBhcGxpY2HDp8Ojby5cclxuICpcclxuICogTcOzZHVsbyBkYSBhcGxpY2HDp8OjbzpcclxuICogYGBgXHJcbiAqIGltcG9ydCB7IEJyb3dzZXJBbmltYXRpb25zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci9hbmltYXRpb25zJztcclxuICogaW1wb3J0IHsgUG9Nb2R1bGUgfSBmcm9tICdAcG8tdWkvbmctY29tcG9uZW50cyc7XHJcbiAqIC4uLlxyXG4gKlxyXG4gKiBATmdNb2R1bGUoe1xyXG4gKiAgIGltcG9ydHM6IFtcclxuICogICAgIEJyb3dzZXJNb2R1bGUsXHJcbiAqICAgICBCcm93c2VyQW5pbWF0aW9uc01vZHVsZSxcclxuICogICAgIC4uLlxyXG4gKiAgICAgUG9Nb2R1bGVcclxuICogICBdLFxyXG4gKiAgIGRlY2xhcmF0aW9uczogW1xyXG4gKiAgICAgQXBwQ29tcG9uZW50LFxyXG4gKiAgICAgLi4uXHJcbiAqICAgXSxcclxuICogICBwcm92aWRlcnM6IFtdLFxyXG4gKiAgIGJvb3RzdHJhcDogW0FwcENvbXBvbmVudF1cclxuICogfSlcclxuICogZXhwb3J0IGNsYXNzIEFwcE1vZHVsZSB7IH1cclxuICogYGBgXHJcbiAqL1xyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIFJvdXRlck1vZHVsZSwgUG9Db250YWluZXJNb2R1bGVdLFxyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgUG9TbGlkZUNpcmNsZXNDb21wb25lbnQsXHJcbiAgICBQb1NsaWRlQ29tcG9uZW50LFxyXG4gICAgUG9TbGlkZUNvbnRyb2xDb21wb25lbnQsXHJcbiAgICBQb1NsaWRlQ29udGVudFRlbXBsYXRlRGlyZWN0aXZlLFxyXG4gICAgUG9TbGlkZUl0ZW1Db21wb25lbnRcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtQb1NsaWRlQ29tcG9uZW50LCBQb1NsaWRlQ29udGVudFRlbXBsYXRlRGlyZWN0aXZlXSxcclxuICBwcm92aWRlcnM6IFtdLFxyXG4gIHNjaGVtYXM6IFtdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQb1NsaWRlTW9kdWxlIHt9XHJcbiJdfQ==