import { Input, TemplateRef, Component, ChangeDetectionStrategy } from '@angular/core';
/**
 * @docsPrivate
 *
 * @usedBy PoButton
 *
 * @description
 *
 * Permite a exibição de ícones.
 */
export class PoIconComponent {
    constructor() { }
    /**
     * Define o ícone a ser exibido.
     *
     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-button p-icon="po-icon-user" p-label="PO button"></po-button>
     * ```
     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-button p-icon="fa fa-podcast" p-label="PO button"></po-button>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-button [p-icon]="template" p-label="button template ionic"></po-button>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.
     */
    set icon(value) {
        if (typeof value === 'string') {
            this.addClasses(value);
        }
        else if (value instanceof TemplateRef) {
            this._icon = value;
        }
    }
    get icon() {
        return this._icon;
    }
    addClasses(value) {
        this.class = value.startsWith('po-icon-')
            ? (this.class = `po-icon ${value}`)
            : (this.class = `po-fonts-icon ${value}`);
    }
}
PoIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-icon',
                template: "<ng-container *ngIf=\"class; then fontTemplate; else icon\"></ng-container>\r\n\r\n<ng-template #fontTemplate>\r\n  <i [class]=\"class\" aria-hidden=\"true\"></i>\r\n</ng-template>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PoIconComponent.ctorParameters = () => [];
PoIconComponent.propDecorators = {
    icon: [{ type: Input, args: ['p-icon',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8taWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8taWNvbi9wby1pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkY7Ozs7Ozs7O0dBUUc7QUFNSCxNQUFNLE9BQU8sZUFBZTtJQUkxQixnQkFBZSxDQUFDO0lBRWhCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQW9CRztJQUNILElBQXFCLElBQUksQ0FBQyxLQUFpQztRQUN6RCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3hCO2FBQU0sSUFBSSxLQUFLLFlBQVksV0FBVyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRU8sVUFBVSxDQUFDLEtBQWE7UUFDOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQztZQUN2QyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLFdBQVcsS0FBSyxFQUFFLENBQUM7WUFDbkMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxpQkFBaUIsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM5QyxDQUFDOzs7WUFoREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxTQUFTO2dCQUNuQixvTUFBdUM7Z0JBQ3ZDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7O21CQTRCRSxLQUFLLFNBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBUZW1wbGF0ZVJlZiwgQ29tcG9uZW50LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBkb2NzUHJpdmF0ZVxyXG4gKlxyXG4gKiBAdXNlZEJ5IFBvQnV0dG9uXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBQZXJtaXRlIGEgZXhpYmnDp8OjbyBkZSDDrWNvbmVzLlxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdwby1pY29uJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcG8taWNvbi5jb21wb25lbnQuaHRtbCcsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxufSlcclxuZXhwb3J0IGNsYXNzIFBvSWNvbkNvbXBvbmVudCB7XHJcbiAgY2xhc3M6IHN0cmluZztcclxuICBwcml2YXRlIF9pY29uOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICAvKipcclxuICAgKiBEZWZpbmUgbyDDrWNvbmUgYSBzZXIgZXhpYmlkby5cclxuICAgKlxyXG4gICAqIMOJIHBvc3PDrXZlbCB1c2FyIHF1YWxxdWVyIHVtIGRvcyDDrWNvbmVzIGRhIFtCaWJsaW90ZWNhIGRlIMOtY29uZXNdKC9ndWlkZXMvaWNvbnMpLiBjb25mb3JtZSBleGVtcGxvIGFiYWl4bzpcclxuICAgKiBgYGBcclxuICAgKiA8cG8tYnV0dG9uIHAtaWNvbj1cInBvLWljb24tdXNlclwiIHAtbGFiZWw9XCJQTyBidXR0b25cIj48L3BvLWJ1dHRvbj5cclxuICAgKiBgYGBcclxuICAgKiBUYW1iw6ltIMOpIHBvc3PDrXZlbCB1dGlsaXphciBvdXRyYXMgZm9udGVzIGRlIMOtY29uZXMsIHBvciBleGVtcGxvIGEgYmlibGlvdGVjYSAqRm9udCBBd2Vzb21lKiwgZGEgc2VndWludGUgZm9ybWE6XHJcbiAgICogYGBgXHJcbiAgICogPHBvLWJ1dHRvbiBwLWljb249XCJmYSBmYS1wb2RjYXN0XCIgcC1sYWJlbD1cIlBPIGJ1dHRvblwiPjwvcG8tYnV0dG9uPlxyXG4gICAqIGBgYFxyXG4gICAqIE91dHJhIG9ww6fDo28gc2VyaWEgYSBjdXN0b21pemHDp8OjbyBkbyDDrWNvbmUgYXRyYXbDqXMgZG8gYFRlbXBsYXRlUmVmYCwgY29uZm9ybWUgZXhlbXBsbyBhYmFpeG86XHJcbiAgICogYGBgXHJcbiAgICogPHBvLWJ1dHRvbiBbcC1pY29uXT1cInRlbXBsYXRlXCIgcC1sYWJlbD1cImJ1dHRvbiB0ZW1wbGF0ZSBpb25pY1wiPjwvcG8tYnV0dG9uPlxyXG4gICAqXHJcbiAgICogPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZT5cclxuICAgKiAgPGlvbi1pY29uIHN0eWxlPVwiZm9udC1zaXplOiBpbmhlcml0XCIgbmFtZT1cImhlYXJ0XCI+PC9pb24taWNvbj5cclxuICAgKiA8L25nLXRlbXBsYXRlPlxyXG4gICAqIGBgYFxyXG4gICAqID4gUGFyYSBvIMOtY29uZSBlbnF1YWRyYXIgY29ycmV0YW1lbnRlLCBkZXZlLXNlIHV0aWxpemFyIGBmb250LXNpemU6IGluaGVyaXRgIGNhc28gbyDDrWNvbmUgdXRpbGl6YWRvIG7Do28gYXBsaXF1ZS1vLlxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1pY29uJykgc2V0IGljb24odmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICB0aGlzLmFkZENsYXNzZXModmFsdWUpO1xyXG4gICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XHJcbiAgICAgIHRoaXMuX2ljb24gPSB2YWx1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBpY29uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ljb247XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFkZENsYXNzZXModmFsdWU6IHN0cmluZykge1xyXG4gICAgdGhpcy5jbGFzcyA9IHZhbHVlLnN0YXJ0c1dpdGgoJ3BvLWljb24tJylcclxuICAgICAgPyAodGhpcy5jbGFzcyA9IGBwby1pY29uICR7dmFsdWV9YClcclxuICAgICAgOiAodGhpcy5jbGFzcyA9IGBwby1mb250cy1pY29uICR7dmFsdWV9YCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==