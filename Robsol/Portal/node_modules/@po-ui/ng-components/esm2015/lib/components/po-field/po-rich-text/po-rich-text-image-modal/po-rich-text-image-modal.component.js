import { __awaiter } from "tslib";
import { Component, EventEmitter, Output, ViewChild } from '@angular/core';
import { convertImageToBase64 } from '../../../../utils/util';
import { PoLanguageService } from './../../../../services/po-language/po-language.service';
import { poRichTextLiteralsDefault } from '../po-rich-text-literals';
const uploadRestrictions = ['.apng', '.bmp', '.gif', '.ico', '.jpeg', '.jpg', '.png', '.svg'];
export class PoRichTextImageModalComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.command = new EventEmitter();
        this.selection = document.getSelection();
        this.uploadRestrictions = {
            allowedExtensions: uploadRestrictions
        };
        this.literals = Object.assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.modalCancelAction = {
            label: this.literals.cancel,
            action: () => {
                this.modal.close();
                this.command.emit();
                this.retrieveCursorPosition();
                this.cleanUpFields();
            }
        };
        this.modalConfirmAction = {
            label: this.literals.insert,
            disabled: false,
            action: () => this.insertElementRef()
        };
    }
    get isUploadValid() {
        return !!(this.uploadModel && this.uploadModel.length);
    }
    get isUrlValid() {
        return !!this.urlImage && this.modalImageForm && this.modalImageForm.valid;
    }
    openModal() {
        this.saveCursorPosition();
        this.modal.open();
    }
    cleanUpFields() {
        this.urlImage = undefined;
        this.uploadModel = undefined;
    }
    convertToBase64() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isUploadValid) {
                const uploadImage = this.uploadModel[0].rawFile;
                return yield convertImageToBase64(uploadImage);
            }
        });
    }
    emitCommand(value) {
        let command;
        if (value) {
            command = 'insertImage';
            this.command.emit({ command, value });
        }
    }
    insertElementRef() {
        return __awaiter(this, void 0, void 0, function* () {
            let uploadImage;
            if (!this.urlImage) {
                uploadImage = yield this.convertToBase64();
            }
            this.retrieveCursorPosition();
            this.modal.close();
            if (this.isUrlValid || this.isUploadValid) {
                this.emitCommand(this.urlImage || uploadImage);
            }
            this.cleanUpFields();
        });
    }
    retrieveCursorPosition() {
        this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
    }
    saveCursorPosition() {
        this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
    }
}
PoRichTextImageModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-rich-text-image-modal',
                template: "<po-modal\r\n  #modal\r\n  p-hide-close\r\n  [p-primary-action]=\"modalConfirmAction\"\r\n  [p-secondary-action]=\"modalCancelAction\"\r\n  [p-title]=\"literals.insertImage\"\r\n>\r\n  <form #modalImageForm=\"ngForm\">\r\n    <div class=\"po-row\">\r\n      <!-- po-upload desabilita o drag drop caso n\u00E3o tenha valor atribuido para a propriedade p-url -->\r\n      <po-upload\r\n        #upload\r\n        class=\"po-md-12\"\r\n        name=\"upload\"\r\n        [(ngModel)]=\"uploadModel\"\r\n        p-drag-drop-height=\"160\"\r\n        p-hide-restrictions-info\r\n        p-hide-send-button\r\n        p-url=\"x\"\r\n        [p-drag-drop]=\"!modal.isHidden\"\r\n        [p-disabled]=\"isUrlValid\"\r\n        [p-restrictions]=\"uploadRestrictions\"\r\n      >\r\n      </po-upload>\r\n    </div>\r\n\r\n    <div class=\"po-row\">\r\n      <po-url\r\n        class=\"po-md-12 po-mt-3\"\r\n        name=\"url\"\r\n        [(ngModel)]=\"urlImage\"\r\n        [p-label]=\"literals.urlImage\"\r\n        [p-disabled]=\"isUploadValid\"\r\n      >\r\n      </po-url>\r\n    </div>\r\n  </form>\r\n</po-modal>\r\n"
            },] }
];
PoRichTextImageModalComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoRichTextImageModalComponent.propDecorators = {
    modal: [{ type: ViewChild, args: ['modal', { static: true },] }],
    modalImageForm: [{ type: ViewChild, args: ['modalImageForm',] }],
    upload: [{ type: ViewChild, args: ['upload', { static: true },] }],
    command: [{ type: Output, args: ['p-command',] }]
};
//# sourceMappingURL=data:application/json;base64,