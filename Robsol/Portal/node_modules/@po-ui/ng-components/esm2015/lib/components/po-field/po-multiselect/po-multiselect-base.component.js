import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, switchMap, tap } from 'rxjs/operators';
import { convertToBoolean, isTypeof, removeDuplicatedOptions, removeUndefinedAndNullOptions, sortOptionsByProperty } from '../../../utils/util';
import { requiredFailed } from './../validators';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
import { poLocaleDefault } from '../../../services/po-language/po-language.constant';
import { PoMultiselectFilterMode } from './po-multiselect-filter-mode.enum';
import { InputBoolean } from '../../../decorators';
const PO_MULTISELECT_DEBOUNCE_TIME_DEFAULT = 400;
const PO_MULTISELECT_FIELD_LABEL_DEFAULT = 'label';
const PO_MULTISELECT_FIELD_VALUE_DEFAULT = 'value';
export const poMultiselectLiteralsDefault = {
    en: {
        noData: 'No data found',
        placeholderSearch: 'Search',
        selectAll: 'Select all'
    },
    es: {
        noData: 'Datos no encontrados',
        placeholderSearch: 'Busca',
        selectAll: 'Seleccionar todo'
    },
    pt: {
        noData: 'Nenhum dado encontrado',
        placeholderSearch: 'Buscar',
        selectAll: 'Selecionar todos'
    },
    ru: {
        noData: 'Данные не найдены',
        placeholderSearch: 'искать',
        selectAll: 'Выбрать все'
    }
};
/**
 * @description
 *
 * O po-multiselect é um componente de múltipla seleção.
 * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.
 *
 * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do po-checkbox-group, por ser mais simples
 * e mais rápido para a seleção do usuário.
 *
 * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o
 * po-select, po-combo ou po-radio-group.
 *
 * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.
 */
export class PoMultiselectBaseComponent {
    constructor(languageService) {
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Mensagem apresentada enquanto o campo estiver vazio. */
        this.placeholder = '';
        /**
         * @description
         *
         * Placeholder do campo de pesquisa.
         *
         * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
         *
         * @default `Buscar`
         */
        this.placeholderSearch = '';
        /**
         * @optional
         *
         * @description
         *
         * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new EventEmitter();
        this.selectedOptions = [];
        this.visibleOptionsDropdown = [];
        this.visibleDisclaimers = [];
        this.isServerSearching = false;
        this.isFirstFilter = true;
        this.filterSubject = new Subject();
        // eslint-disable-next-line
        this.onModelTouched = null;
        this._debounceTime = 400;
        this._disabled = false;
        this._filterMode = PoMultiselectFilterMode.startsWith;
        this._hideSearch = false;
        this._required = false;
        this._sort = false;
        this._autoHeight = false;
        this._fieldLabel = PO_MULTISELECT_FIELD_LABEL_DEFAULT;
        this._fieldValue = PO_MULTISELECT_FIELD_VALUE_DEFAULT;
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     * Nesta propriedade pode ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de itens no componente.
     *
     *Também existe a possibilidade de informar um serviço implementando a interface `PoMultiselectFilter`.
     *
     *Caso utilizado uma URL, o serviço deve ser retornado no padrão [API PO UI](https://po-ui.io/guides/api) e utilizar as propriedades `p-field-label` e `p-field-value` para a construção da lista de itens.
     *
     *Quando utilizada uma URL de serviço, então será concatenada nesta URL o valor que deseja-se filtrar da seguinte forma:
     *
     *```
     * // caso filtrar por "Peter"
     *  https://localhost:8080/api/heroes?filter=Peter
     *```
     *
     *E caso iniciar o campo com valor, os itens serão buscados da seguinte forma:
     *
     *```
     * // caso o valor do campo for [1234, 5678];
     *  https://localhost:8080/api/heroes?value=1234,5678
     *
     * //O *value* é referente ao `fieldValue`.
     *```
     *
     */
    set filterService(value) {
        if (value) {
            this._filterService = value;
            this.autoHeight = this.autoHeightInitialValue !== undefined ? this.autoHeightInitialValue : true;
            this.options = [];
        }
    }
    get filterService() {
        return this._filterService;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que a altura do componente será auto ajustável, possuindo uma altura minima porém a altura máxima será de acordo
     * com o número de itens selecionados e a extensão dos mesmos, mantendo-os sempre visíveis.
     *
     * > O valor padrão será `true` quando houver serviço (`p-filter-service`).
     *
     * @default `false`
     */
    set autoHeight(value) {
        this._autoHeight = value;
        this.autoHeightInitialValue = value;
    }
    get autoHeight() {
        return this._autoHeight;
    }
    /**
     * @optional
     *
     * @description
     * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
     *
     * > Será utilizada apenas quando houver serviço (`p-filter-service`) e somente será aceito valor maior do que *zero*.
     *
     * @default `400`
     */
    set debounceTime(value) {
        const parsedValue = parseInt(value, 10);
        this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : PO_MULTISELECT_DEBOUNCE_TIME_DEFAULT;
    }
    get debounceTime() {
        return this._debounceTime;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-multiselect`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoMultiselectLiterals = {
     *    noData: 'Nenhum dado encontrado',
     *    placeholderSearch: 'Buscar'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoMultiselectLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
     *
     * ```
     * <po-multiselect
     *   [p-literals]="customLiterals">
     * </po-po-multiselect>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poMultiselectLiteralsDefault[poLocaleDefault]), poMultiselectLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poMultiselectLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poMultiselectLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
     *
     * @default `false`
     */
    set required(required) {
        this._required = required === '' ? true : convertToBoolean(required);
        this.validateModel();
    }
    get required() {
        return this._required;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = disabled === '' ? true : convertToBoolean(disabled);
        this.validateModel();
        this.updateVisibleItems();
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Esconde o campo de pesquisa existente dentro do dropdown do po-multiselect.
     *
     * @default `false`
     */
    set hideSearch(hideSearch) {
        this._hideSearch = hideSearch === '' ? true : convertToBoolean(hideSearch);
    }
    get hideSearch() {
        return this._hideSearch;
    }
    /**
     * @description
     *
     * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoMultiselectOption.
     * Esta lista deve conter os valores e os labels que serão apresentados na tela.
     *
     * > Essa propriedade é imutável, ou seja, sempre que quiser atualizar a lista de opções disponíveis
     * atualize a referência do objeto:
     *
     * ```
     * // atualiza a referência do objeto garantindo a atualização do template
     * this.options = [...this.options, { value: 'x', label: 'Nova opção' }];
     *
     * // evite, pois não atualiza a referência do objeto podendo gerar atrasos na atualização do template
     * this.options.push({ value: 'x', label: 'Nova opção' });
     * ```
     */
    set options(options) {
        this._options = options;
        this.validAndSortOptions();
    }
    get options() {
        return this._options;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que a lista definida na propriedade p-options será ordenada pelo label antes de ser apresentada no
     * dropdown.
     *
     * @default `false`
     */
    set sort(sort) {
        this._sort = sort === '' ? true : convertToBoolean(sort);
        this.validAndSortOptions();
    }
    get sort() {
        return this._sort;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
     * Valores definidos no enum: PoMultiselectFilterMode
     *
     * @default `startsWith`
     */
    set filterMode(filterMode) {
        this._filterMode = filterMode in PoMultiselectFilterMode ? filterMode : PoMultiselectFilterMode.startsWith;
        switch (this._filterMode.toString()) {
            case 'startsWith':
                this._filterMode = PoMultiselectFilterMode.startsWith;
                break;
            case 'contains':
                this._filterMode = PoMultiselectFilterMode.contains;
                break;
            case 'endsWith':
                this._filterMode = PoMultiselectFilterMode.endsWith;
                break;
        }
    }
    get filterMode() {
        return this._filterMode;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * `PoMultiSelectOption`.
     *
     * @default `label`
     */
    set fieldLabel(value) {
        this._fieldLabel = value || PO_MULTISELECT_FIELD_LABEL_DEFAULT;
        if (isTypeof(this.filterService, 'string') && this.service) {
            this.service.fieldLabel = this._fieldLabel;
        }
    }
    get fieldLabel() {
        return this._fieldLabel;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * `PoMultiSelectOption`.
     *
     * @default `value`
     */
    set fieldValue(value) {
        this._fieldValue = value || PO_MULTISELECT_FIELD_VALUE_DEFAULT;
        if (isTypeof(this.filterService, 'string') && this.service) {
            this.service.fieldValue = this._fieldValue;
        }
    }
    get fieldValue() {
        return this._fieldValue;
    }
    ngOnInit() {
        if (this.filterService) {
            this.setService(this.filterService);
        }
        this.filterSubject
            .pipe(debounceTime(this.debounceTime), distinctUntilChanged(), tap(() => (this.isServerSearching = true)), switchMap((search) => this.applyFilter(search)), tap(() => (this.isServerSearching = false)))
            .subscribe();
        this.updateList(this.options);
    }
    setService(service) {
        if (isTypeof(service, 'object')) {
            this.service = service;
        }
        else {
            this.service = this.defaultService;
            this.service.configProperties(service, this.fieldLabel, this.fieldValue);
        }
        this.isFirstFilter = true;
    }
    validAndSortOptions() {
        if (this.options && this.options.length) {
            removeUndefinedAndNullOptions(this.options);
            removeDuplicatedOptions(this.options);
            this.setUndefinedLabels(this.options);
            if (this.sort) {
                sortOptionsByProperty(this.options, 'label');
            }
        }
    }
    setUndefinedLabels(options) {
        options.forEach(option => {
            if (!option['label']) {
                option.label = option.value;
            }
        });
    }
    updateList(options) {
        if (options) {
            this.visibleOptionsDropdown = options;
        }
    }
    callOnChange(selectedOptions) {
        if (this.onModelChange) {
            this.onModelChange(this.getValuesFromOptions(selectedOptions));
            this.eventChange(selectedOptions);
        }
    }
    eventChange(selectedOptions) {
        if (selectedOptions && this.lastLengthModel !== selectedOptions.length) {
            this.change.emit(selectedOptions);
        }
        this.lastLengthModel = selectedOptions ? selectedOptions.length : null;
    }
    getValuesFromOptions(selectedOptions) {
        return selectedOptions && selectedOptions.length ? selectedOptions.map(option => option.value) : [];
    }
    getLabelByValue(value) {
        const index = this.options.findIndex(option => option.value === value);
        return this.options[index].label;
    }
    searchByLabel(search, options, filterMode) {
        if (search && options && options.length) {
            const newOptions = [];
            options.forEach(option => {
                if (option.label && this.compareMethod(search, option, filterMode)) {
                    newOptions.push(option);
                }
            });
            this.visibleOptionsDropdown = newOptions;
        }
        else {
            this.visibleOptionsDropdown = [...options];
        }
    }
    compareMethod(search, option, filterMode) {
        switch (filterMode) {
            case PoMultiselectFilterMode.startsWith:
                return this.startsWith(search, option);
            case PoMultiselectFilterMode.contains:
                return this.contains(search, option);
            case PoMultiselectFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    }
    startsWith(search, option) {
        return option.label.toLowerCase().startsWith(search.toLowerCase());
    }
    contains(search, option) {
        return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
    }
    endsWith(search, option) {
        return option.label.toLowerCase().endsWith(search.toLowerCase());
    }
    validate(c) {
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
        return null;
    }
    updateSelectedOptions(newOptions, options = this.options) {
        this.selectedOptions = [];
        if (newOptions.length === 0) {
            this.lastLengthModel = 0;
        }
        if (this.filterService) {
            this.selectedOptions = newOptions;
        }
        else {
            newOptions.forEach(newOption => {
                options.forEach(option => {
                    if (option.value === newOption.value) {
                        this.selectedOptions.push(option);
                    }
                });
            });
        }
        this.updateVisibleItems();
    }
    writeValue(values) {
        values = values || [];
        if (this.service && values.length) {
            this.getObjectsByValuesSubscription = this.service.getObjectsByValues(values).subscribe(options => {
                this.updateSelectedOptions(options);
                this.callOnChange(this.selectedOptions);
            });
        }
        else {
            // Validar se todos os items existem entre os options, senão atualizar o model
            this.updateSelectedOptions(values.map(value => ({ value })));
            if (this.selectedOptions && this.selectedOptions.length < values.length) {
                this.callOnChange(this.selectedOptions);
            }
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
}
PoMultiselectBaseComponent.decorators = [
    { type: Directive }
];
PoMultiselectBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoMultiselectBaseComponent.propDecorators = {
    autoFocus: [{ type: Input, args: ['p-auto-focus',] }],
    label: [{ type: Input, args: ['p-label',] }],
    help: [{ type: Input, args: ['p-help',] }],
    optional: [{ type: Input, args: ['p-optional',] }],
    placeholder: [{ type: Input, args: ['p-placeholder',] }],
    placeholderSearch: [{ type: Input, args: ['p-placeholder-search',] }],
    name: [{ type: Input, args: ['name',] }],
    hideSelectAll: [{ type: Input, args: ['p-hide-select-all',] }],
    change: [{ type: Output, args: ['p-change',] }],
    filterService: [{ type: Input, args: ['p-filter-service',] }],
    autoHeight: [{ type: Input, args: ['p-auto-height',] }],
    debounceTime: [{ type: Input, args: ['p-debounce-time',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    required: [{ type: Input, args: ['p-required',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    hideSearch: [{ type: Input, args: ['p-hide-search',] }],
    options: [{ type: Input, args: ['p-options',] }],
    sort: [{ type: Input, args: ['p-sort',] }],
    filterMode: [{ type: Input, args: ['p-filter-mode',] }],
    fieldLabel: [{ type: Input, args: ['p-field-label',] }],
    fieldValue: [{ type: Input, args: ['p-field-value',] }]
};
__decorate([
    InputBoolean()
], PoMultiselectBaseComponent.prototype, "autoFocus", void 0);
__decorate([
    InputBoolean()
], PoMultiselectBaseComponent.prototype, "hideSelectAll", void 0);
__decorate([
    InputBoolean()
], PoMultiselectBaseComponent.prototype, "autoHeight", null);
//# sourceMappingURL=data:application/json;base64,