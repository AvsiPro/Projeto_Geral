import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir ícones nas colunas.
 */
export class PoTableColumnIconComponent {
    constructor() {
        this._icons = [];
    }
    /** Lista de colunas com ícones. */
    set icons(icons) {
        this._icons = this.convertToColumnIcon(icons);
    }
    get icons() {
        return this._icons;
    }
    click(columnIcon, event) {
        const isAbleAction = !this.isDisabled(columnIcon);
        if (isAbleAction) {
            if (columnIcon.action) {
                columnIcon.action(this.row, columnIcon);
            }
            else if (this.column.action) {
                this.column.action(this.row, columnIcon);
            }
            event.stopPropagation();
        }
    }
    getColor(column) {
        const color = typeof column.color === 'function' ? column.color(this.row, column) : column.color;
        if (color) {
            return `po-text-${color}`;
        }
    }
    getIcon(column) {
        return column.icon || column.value;
    }
    isClickable(columnIcon) {
        return !!(!this.isDisabled(columnIcon) && (columnIcon.action || this.column.action));
    }
    isDisabled(column) {
        return column.disabled ? column.disabled(this.row) : false;
    }
    trackByFunction(index) {
        return index;
    }
    convertToColumnIcon(rowIcons) {
        if (Array.isArray(rowIcons)) {
            return rowIcons.map(rowIcon => (typeof rowIcon === 'string' ? { value: rowIcon } : rowIcon));
        }
        if (typeof rowIcons === 'string') {
            return [{ value: rowIcons }];
        }
        return [];
    }
}
PoTableColumnIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-table-column-icon',
                template: "<po-table-icon\r\n  *ngFor=\"let column of icons; trackBy: trackByFunction\"\r\n  [p-clickable]=\"isClickable(column)\"\r\n  [p-color]=\"getColor(column)\"\r\n  [p-disabled]=\"isDisabled(column)\"\r\n  [p-icon]=\"getIcon(column)\"\r\n  [p-icon-tooltip]=\"column.tooltip\"\r\n  (p-click)=\"click(column, $event)\"\r\n>\r\n</po-table-icon>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PoTableColumnIconComponent.propDecorators = {
    column: [{ type: Input, args: ['p-column',] }],
    row: [{ type: Input, args: ['p-row',] }],
    icons: [{ type: Input, args: ['p-icons',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtY29sdW1uLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXRhYmxlL3BvLXRhYmxlLWNvbHVtbi1pY29uL3BvLXRhYmxlLWNvbHVtbi1pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUsxRTs7Ozs7O0dBTUc7QUFNSCxNQUFNLE9BQU8sMEJBQTBCO0lBTHZDO1FBWVUsV0FBTSxHQUE2QixFQUFFLENBQUM7SUEyRGhELENBQUM7SUF6REMsbUNBQW1DO0lBQ25DLElBQXNCLEtBQUssQ0FBQyxLQUF3RDtRQUNsRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBNkIsRUFBRSxLQUFLO1FBQ3hDLE1BQU0sWUFBWSxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVsRCxJQUFJLFlBQVksRUFBRTtZQUNoQixJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3JCLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQzthQUN6QztpQkFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO2dCQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO2FBQzFDO1lBQ0QsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVELFFBQVEsQ0FBQyxNQUF5QjtRQUNoQyxNQUFNLEtBQUssR0FBRyxPQUFPLE1BQU0sQ0FBQyxLQUFLLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFFakcsSUFBSSxLQUFLLEVBQUU7WUFDVCxPQUFPLFdBQVcsS0FBSyxFQUFFLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBRUQsT0FBTyxDQUFDLE1BQXlCO1FBQy9CLE9BQU8sTUFBTSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxXQUFXLENBQUMsVUFBNkI7UUFDdkMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBRUQsVUFBVSxDQUFDLE1BQXlCO1FBQ2xDLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUM3RCxDQUFDO0lBRUQsZUFBZSxDQUFDLEtBQUs7UUFDbkIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU8sbUJBQW1CLENBQUMsUUFBMkQ7UUFDckYsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzNCLE9BQWEsUUFBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxPQUFPLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUNyRztRQUVELElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ2hDLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQzlCO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDOzs7WUF0RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLGlXQUFvRDtnQkFDcEQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7OztxQkFHRSxLQUFLLFNBQUMsVUFBVTtrQkFHaEIsS0FBSyxTQUFDLE9BQU87b0JBS2IsS0FBSyxTQUFDLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgUG9UYWJsZUNvbHVtbiB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tdGFibGUtY29sdW1uLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvVGFibGVDb2x1bW5JY29uIH0gZnJvbSAnLi9wby10YWJsZS1jb2x1bW4taWNvbi5pbnRlcmZhY2UnO1xyXG5cclxuLyoqXHJcbiAqIEBkb2NzUHJpdmF0ZVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogQ29tcG9uZW50ZSByZXNwb25zw6F2ZWwgcG9yIGV4aWJpciDDrWNvbmVzIG5hcyBjb2x1bmFzLlxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdwby10YWJsZS1jb2x1bW4taWNvbicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXRhYmxlLWNvbHVtbi1pY29uLmNvbXBvbmVudC5odG1sJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUG9UYWJsZUNvbHVtbkljb25Db21wb25lbnQge1xyXG4gIC8qKiBEZWZpbmnDp8OjbyBkYSBjb2x1bmEgcXVlIHV0aWxpemEgb3MgaWNvbmVzLiAqL1xyXG4gIEBJbnB1dCgncC1jb2x1bW4nKSBjb2x1bW46IFBvVGFibGVDb2x1bW47XHJcblxyXG4gIC8qKiBEYWRvcyBkYSBsaW5oYSBkYSB0YWJlbGEuICovXHJcbiAgQElucHV0KCdwLXJvdycpIHJvdzogYW55O1xyXG5cclxuICBwcml2YXRlIF9pY29uczogQXJyYXk8UG9UYWJsZUNvbHVtbkljb24+ID0gW107XHJcblxyXG4gIC8qKiBMaXN0YSBkZSBjb2x1bmFzIGNvbSDDrWNvbmVzLiAqL1xyXG4gIEBJbnB1dCgncC1pY29ucycpIHNldCBpY29ucyhpY29uczogQXJyYXk8UG9UYWJsZUNvbHVtbkljb24+IHwgQXJyYXk8c3RyaW5nPiB8IHN0cmluZykge1xyXG4gICAgdGhpcy5faWNvbnMgPSB0aGlzLmNvbnZlcnRUb0NvbHVtbkljb24oaWNvbnMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGljb25zKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ljb25zO1xyXG4gIH1cclxuXHJcbiAgY2xpY2soY29sdW1uSWNvbjogUG9UYWJsZUNvbHVtbkljb24sIGV2ZW50KTogdm9pZCB7XHJcbiAgICBjb25zdCBpc0FibGVBY3Rpb24gPSAhdGhpcy5pc0Rpc2FibGVkKGNvbHVtbkljb24pO1xyXG5cclxuICAgIGlmIChpc0FibGVBY3Rpb24pIHtcclxuICAgICAgaWYgKGNvbHVtbkljb24uYWN0aW9uKSB7XHJcbiAgICAgICAgY29sdW1uSWNvbi5hY3Rpb24odGhpcy5yb3csIGNvbHVtbkljb24pO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuY29sdW1uLmFjdGlvbikge1xyXG4gICAgICAgIHRoaXMuY29sdW1uLmFjdGlvbih0aGlzLnJvdywgY29sdW1uSWNvbik7XHJcbiAgICAgIH1cclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRDb2xvcihjb2x1bW46IFBvVGFibGVDb2x1bW5JY29uKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGNvbG9yID0gdHlwZW9mIGNvbHVtbi5jb2xvciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbHVtbi5jb2xvcih0aGlzLnJvdywgY29sdW1uKSA6IGNvbHVtbi5jb2xvcjtcclxuXHJcbiAgICBpZiAoY29sb3IpIHtcclxuICAgICAgcmV0dXJuIGBwby10ZXh0LSR7Y29sb3J9YDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEljb24oY29sdW1uOiBQb1RhYmxlQ29sdW1uSWNvbikge1xyXG4gICAgcmV0dXJuIGNvbHVtbi5pY29uIHx8IGNvbHVtbi52YWx1ZTtcclxuICB9XHJcblxyXG4gIGlzQ2xpY2thYmxlKGNvbHVtbkljb246IFBvVGFibGVDb2x1bW5JY29uKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gISEoIXRoaXMuaXNEaXNhYmxlZChjb2x1bW5JY29uKSAmJiAoY29sdW1uSWNvbi5hY3Rpb24gfHwgdGhpcy5jb2x1bW4uYWN0aW9uKSk7XHJcbiAgfVxyXG5cclxuICBpc0Rpc2FibGVkKGNvbHVtbjogUG9UYWJsZUNvbHVtbkljb24pOiBib29sZWFuIHtcclxuICAgIHJldHVybiBjb2x1bW4uZGlzYWJsZWQgPyBjb2x1bW4uZGlzYWJsZWQodGhpcy5yb3cpIDogZmFsc2U7XHJcbiAgfVxyXG5cclxuICB0cmFja0J5RnVuY3Rpb24oaW5kZXgpIHtcclxuICAgIHJldHVybiBpbmRleDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY29udmVydFRvQ29sdW1uSWNvbihyb3dJY29uczogQXJyYXk8UG9UYWJsZUNvbHVtbkljb24+IHwgQXJyYXk8c3RyaW5nPiB8IHN0cmluZyk6IEFycmF5PFBvVGFibGVDb2x1bW5JY29uPiB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyb3dJY29ucykpIHtcclxuICAgICAgcmV0dXJuICg8YW55PnJvd0ljb25zKS5tYXAocm93SWNvbiA9PiAodHlwZW9mIHJvd0ljb24gPT09ICdzdHJpbmcnID8geyB2YWx1ZTogcm93SWNvbiB9IDogcm93SWNvbikpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygcm93SWNvbnMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiBbeyB2YWx1ZTogcm93SWNvbnMgfV07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxufVxyXG4iXX0=