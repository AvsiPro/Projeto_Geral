import { __rest } from "tslib";
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { isTypeof } from '../../../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-lookup.
 */
export class PoLookupFilterService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.headers = new HttpHeaders({
            'X-PO-No-Message': 'true'
        });
        this.multiple = false;
    }
    getFilteredItems(filteredItemsParams) {
        const { filterParams, advancedFilters } = filteredItemsParams, restFilteredItemsParams = __rest(filteredItemsParams, ["filterParams", "advancedFilters"]);
        const validatedFilterParams = this.validateParams(filterParams);
        const validatedAdvancedFilters = this.validateParams(advancedFilters);
        const params = Object.assign(Object.assign(Object.assign({}, restFilteredItemsParams), validatedFilterParams), validatedAdvancedFilters);
        return this.httpClient.get(this.url, { headers: this.headers, params });
    }
    getObjectByValue(value, filterParams) {
        const validatedFilterParams = this.validateParams(filterParams);
        let newURL;
        let encodedValue;
        if (this.multiple) {
            encodedValue = encodeURIComponent(Array.isArray(value) ? value.join(',') : value);
            newURL = `${this.url}?${this.fieldValue}=${encodedValue}`;
        }
        else {
            encodedValue = encodeURIComponent(value);
            newURL = `${this.url}/${encodedValue}`;
        }
        return this.httpClient
            .get(newURL, { headers: this.headers, params: validatedFilterParams })
            .pipe(map((response) => ('items' in response ? response.items : response)));
    }
    setConfig(url, fieldValue, multiple) {
        this.url = url;
        this.fieldValue = fieldValue;
        this.multiple = multiple;
    }
    validateParams(params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    }
}
PoLookupFilterService.decorators = [
    { type: Injectable }
];
PoLookupFilterService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLWZpbHRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWxvb2t1cC9zZXJ2aWNlcy9wby1sb29rdXAtZmlsdGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBS2xEOzs7Ozs7R0FNRztBQUVILE1BQU0sT0FBTyxxQkFBcUI7SUFTaEMsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQVJqQyxZQUFPLEdBQWdCLElBQUksV0FBVyxDQUFDO1lBQzlDLGlCQUFpQixFQUFFLE1BQU07U0FDMUIsQ0FBQyxDQUFDO1FBSUssYUFBUSxHQUFHLEtBQUssQ0FBQztJQUVvQixDQUFDO0lBRTlDLGdCQUFnQixDQUFDLG1CQUFnRDtRQUMvRCxNQUFNLEVBQUUsWUFBWSxFQUFFLGVBQWUsS0FBaUMsbUJBQW1CLEVBQS9DLHVCQUF1QixVQUFLLG1CQUFtQixFQUFuRixtQ0FBNkQsQ0FBc0IsQ0FBQztRQUUxRixNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDaEUsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRXRFLE1BQU0sTUFBTSxpREFBUSx1QkFBdUIsR0FBSyxxQkFBcUIsR0FBSyx3QkFBd0IsQ0FBRSxDQUFDO1FBRXJHLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELGdCQUFnQixDQUFDLEtBQVUsRUFBRSxZQUFrQjtRQUM3QyxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFaEUsSUFBSSxNQUFNLENBQUM7UUFDWCxJQUFJLFlBQVksQ0FBQztRQUVqQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsWUFBWSxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xGLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxZQUFZLEVBQUUsQ0FBQztTQUMzRDthQUFNO1lBQ0wsWUFBWSxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7U0FDeEM7UUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVO2FBQ25CLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsQ0FBQzthQUNyRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQVcsRUFBRSxVQUFrQixFQUFFLFFBQWlCO1FBQzFELElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVPLGNBQWMsQ0FBQyxNQUFXO1FBQ2hDLE9BQU8sUUFBUSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ25GLENBQUM7OztZQWxERixVQUFVOzs7WUFsQkYsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IGlzVHlwZW9mIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XHJcblxyXG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlciB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tbG9va3VwLWZpbHRlci5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlcmVkSXRlbXNQYXJhbXMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BvLWxvb2t1cC1maWx0ZXJlZC1pdGVtcy1wYXJhbXMuaW50ZXJmYWNlJztcclxuXHJcbi8qKlxyXG4gKiBAZG9jc1ByaXZhdGVcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIFNlcnZpw6dvIHBhZHLDo28gdXRpbGl6YWRvIHBhcmEgZmlsdHJhciBvcyBkYWRvcyBkbyBjb21wb25lbnRlIHBvLWxvb2t1cC5cclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFBvTG9va3VwRmlsdGVyU2VydmljZSBpbXBsZW1lbnRzIFBvTG9va3VwRmlsdGVyIHtcclxuICByZWFkb25seSBoZWFkZXJzOiBIdHRwSGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycyh7XHJcbiAgICAnWC1QTy1Oby1NZXNzYWdlJzogJ3RydWUnXHJcbiAgfSk7XHJcblxyXG4gIHByaXZhdGUgdXJsOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBmaWVsZFZhbHVlO1xyXG4gIHByaXZhdGUgbXVsdGlwbGUgPSBmYWxzZTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7fVxyXG5cclxuICBnZXRGaWx0ZXJlZEl0ZW1zKGZpbHRlcmVkSXRlbXNQYXJhbXM6IFBvTG9va3VwRmlsdGVyZWRJdGVtc1BhcmFtcyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCB7IGZpbHRlclBhcmFtcywgYWR2YW5jZWRGaWx0ZXJzLCAuLi5yZXN0RmlsdGVyZWRJdGVtc1BhcmFtcyB9ID0gZmlsdGVyZWRJdGVtc1BhcmFtcztcclxuXHJcbiAgICBjb25zdCB2YWxpZGF0ZWRGaWx0ZXJQYXJhbXMgPSB0aGlzLnZhbGlkYXRlUGFyYW1zKGZpbHRlclBhcmFtcyk7XHJcbiAgICBjb25zdCB2YWxpZGF0ZWRBZHZhbmNlZEZpbHRlcnMgPSB0aGlzLnZhbGlkYXRlUGFyYW1zKGFkdmFuY2VkRmlsdGVycyk7XHJcblxyXG4gICAgY29uc3QgcGFyYW1zID0geyAuLi5yZXN0RmlsdGVyZWRJdGVtc1BhcmFtcywgLi4udmFsaWRhdGVkRmlsdGVyUGFyYW1zLCAuLi52YWxpZGF0ZWRBZHZhbmNlZEZpbHRlcnMgfTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldCh0aGlzLnVybCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsIHBhcmFtcyB9KTtcclxuICB9XHJcblxyXG4gIGdldE9iamVjdEJ5VmFsdWUodmFsdWU6IGFueSwgZmlsdGVyUGFyYW1zPzogYW55KTogT2JzZXJ2YWJsZTxBcnJheTxhbnk+IHwgeyBba2V5OiBzdHJpbmddOiBhbnkgfT4ge1xyXG4gICAgY29uc3QgdmFsaWRhdGVkRmlsdGVyUGFyYW1zID0gdGhpcy52YWxpZGF0ZVBhcmFtcyhmaWx0ZXJQYXJhbXMpO1xyXG5cclxuICAgIGxldCBuZXdVUkw7XHJcbiAgICBsZXQgZW5jb2RlZFZhbHVlO1xyXG5cclxuICAgIGlmICh0aGlzLm11bHRpcGxlKSB7XHJcbiAgICAgIGVuY29kZWRWYWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywnKSA6IHZhbHVlKTtcclxuICAgICAgbmV3VVJMID0gYCR7dGhpcy51cmx9PyR7dGhpcy5maWVsZFZhbHVlfT0ke2VuY29kZWRWYWx1ZX1gO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZW5jb2RlZFZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcclxuICAgICAgbmV3VVJMID0gYCR7dGhpcy51cmx9LyR7ZW5jb2RlZFZhbHVlfWA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudFxyXG4gICAgICAuZ2V0KG5ld1VSTCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsIHBhcmFtczogdmFsaWRhdGVkRmlsdGVyUGFyYW1zIH0pXHJcbiAgICAgIC5waXBlKG1hcCgocmVzcG9uc2U6IGFueSkgPT4gKCdpdGVtcycgaW4gcmVzcG9uc2UgPyByZXNwb25zZS5pdGVtcyA6IHJlc3BvbnNlKSkpO1xyXG4gIH1cclxuXHJcbiAgc2V0Q29uZmlnKHVybDogc3RyaW5nLCBmaWVsZFZhbHVlOiBzdHJpbmcsIG11bHRpcGxlOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLnVybCA9IHVybDtcclxuICAgIHRoaXMuZmllbGRWYWx1ZSA9IGZpZWxkVmFsdWU7XHJcbiAgICB0aGlzLm11bHRpcGxlID0gbXVsdGlwbGU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHZhbGlkYXRlUGFyYW1zKHBhcmFtczogYW55KSB7XHJcbiAgICByZXR1cm4gaXNUeXBlb2YocGFyYW1zLCAnb2JqZWN0JykgJiYgIUFycmF5LmlzQXJyYXkocGFyYW1zKSA/IHBhcmFtcyA6IHVuZGVmaW5lZDtcclxuICB9XHJcbn1cclxuIl19