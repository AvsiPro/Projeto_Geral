import { ViewChild, Directive } from '@angular/core';
import { Subject } from 'rxjs';
import { PoChartType } from '../enums/po-chart-type.enum';
const Padding = 24;
/* eslint-disable @angular-eslint/directive-class-suffix */
export class PoChartDynamicTypeComponent {
    constructor() {
        this.innerRadius = 0;
        this.onSerieClick = new Subject();
        this.onSerieHover = new Subject();
        // eslint-disable-next-line
        this._series = [];
    }
    get isChartGaugeType() {
        return this.type === PoChartType.Gauge;
    }
    calculateSVGContainerDimensions(chartWrapperElement, chartHeaderElement, chartLegendElement) {
        const svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - Padding * 2;
        this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;
        this.centerX = chartWrapperElement / 2;
    }
    calculateTotalValue() {
        this.totalValue =
            this.type === PoChartType.Gauge
                ? 100
                : this.series.reduce((previousValue, serie) => previousValue + (serie.data ? serie.data : serie.value), 0);
    }
    set series(value) {
        this._series = this.getSeriesWithValue(value);
    }
    get series() {
        return this._series;
    }
    getSeriesWithValue(value) {
        return value;
    }
}
PoChartDynamicTypeComponent.decorators = [
    { type: Directive }
];
PoChartDynamicTypeComponent.propDecorators = {
    chartBody: [{ type: ViewChild, args: ['chartBody', { static: true },] }],
    svgContainer: [{ type: ViewChild, args: ['svgContainer', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZHluYW1pYy10eXBlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1jaGFydC9wby1jaGFydC10eXBlcy9wby1jaGFydC1keW5hbWljLXR5cGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHL0IsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTFELE1BQU0sT0FBTyxHQUFXLEVBQUUsQ0FBQztBQUUzQiwyREFBMkQ7QUFFM0QsTUFBTSxPQUFnQiwyQkFBMkI7SUFEakQ7UUFlRSxnQkFBVyxHQUFXLENBQUMsQ0FBQztRQUN4QixpQkFBWSxHQUErQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3pELGlCQUFZLEdBQStCLElBQUksT0FBTyxFQUFFLENBQUM7UUFXekQsMkJBQTJCO1FBQ2pCLFlBQU8sR0FBNkIsRUFBRSxDQUFDO0lBK0JuRCxDQUFDO0lBN0JDLElBQUksZ0JBQWdCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsS0FBSyxDQUFDO0lBQ3pDLENBQUM7SUFFRCwrQkFBK0IsQ0FBQyxtQkFBMkIsRUFBRSxrQkFBMEIsRUFBRSxrQkFBMEI7UUFDakgsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLGtCQUFrQixHQUFHLGtCQUFrQixHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFFbkcsSUFBSSxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUM7UUFDMUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsR0FBRyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELG1CQUFtQjtRQUNqQixJQUFJLENBQUMsVUFBVTtZQUNiLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLEtBQUs7Z0JBQzdCLENBQUMsQ0FBQyxHQUFHO2dCQUNMLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLGFBQWEsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqSCxDQUFDO0lBRUQsSUFBSSxNQUFNLENBQUMsS0FBaUI7UUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRVMsa0JBQWtCLENBQUMsS0FBSztRQUNoQyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7OztZQTNERixTQUFTOzs7d0JBRVAsU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7MkJBRXZDLFNBQVMsU0FBQyxjQUFjLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgVmlld0NoaWxkLCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IFBvQ2hhcnRHYXVnZVNlcmllIH0gZnJvbSAnLi9wby1jaGFydC1nYXVnZS9wby1jaGFydC1nYXVnZS1zZXJpZXMuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9DaGFydFR5cGUgfSBmcm9tICcuLi9lbnVtcy9wby1jaGFydC10eXBlLmVudW0nO1xyXG5cclxuY29uc3QgUGFkZGluZzogbnVtYmVyID0gMjQ7XHJcblxyXG4vKiBlc2xpbnQtZGlzYWJsZSBAYW5ndWxhci1lc2xpbnQvZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeCAqL1xyXG5ARGlyZWN0aXZlKClcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvQ2hhcnREeW5hbWljVHlwZUNvbXBvbmVudCB7XHJcbiAgQFZpZXdDaGlsZCgnY2hhcnRCb2R5JywgeyBzdGF0aWM6IHRydWUgfSkgY2hhcnRCb2R5OiBFbGVtZW50UmVmO1xyXG5cclxuICBAVmlld0NoaWxkKCdzdmdDb250YWluZXInLCB7IHN0YXRpYzogdHJ1ZSB9KSBzdmdDb250YWluZXI6IEVsZW1lbnRSZWY7XHJcblxyXG4gIGNlbnRlclg6IG51bWJlcjtcclxuICBjaGFydEVsZW1lbnRDYXRlZ29yeTogYW55O1xyXG4gIGNoYXJ0RWxlbWVudERlc2NyaXB0aW9uOiBhbnk7XHJcbiAgY2hhcnRFbGVtZW50VmFsdWU6IGFueTtcclxuICBjaGFydEhlYWRlcjogbnVtYmVyO1xyXG4gIGNoYXJ0TGVnZW5kOiBudW1iZXI7XHJcbiAgY2hhcnRXcmFwcGVyOiBudW1iZXI7XHJcbiAgY29sb3JzOiBBcnJheTxzdHJpbmc+O1xyXG4gIGhlaWdodDogbnVtYmVyO1xyXG4gIGlubmVyUmFkaXVzOiBudW1iZXIgPSAwO1xyXG4gIG9uU2VyaWVDbGljazogU3ViamVjdDxQb0NoYXJ0R2F1Z2VTZXJpZT4gPSBuZXcgU3ViamVjdCgpO1xyXG4gIG9uU2VyaWVIb3ZlcjogU3ViamVjdDxQb0NoYXJ0R2F1Z2VTZXJpZT4gPSBuZXcgU3ViamVjdCgpO1xyXG4gIHN2Z0VsZW1lbnQ6IEhUTUxPYmplY3RFbGVtZW50O1xyXG4gIHN2Z0hlaWdodDogbnVtYmVyO1xyXG4gIHRhcmdldDogSFRNTElucHV0RWxlbWVudCAmIEV2ZW50VGFyZ2V0O1xyXG4gIHRvb2x0aXBFbGVtZW50OiBIVE1MT2JqZWN0RWxlbWVudDtcclxuICB0b29sdGlwVGV4dDogc3RyaW5nO1xyXG4gIHRvdGFsVmFsdWU6IG51bWJlcjtcclxuICB0eXBlOiBQb0NoYXJ0VHlwZTtcclxuXHJcbiAgcHJvdGVjdGVkIHdpbmRvd1Jlc2l6ZUxpc3RlbmVyOiAoKSA9PiB2b2lkO1xyXG4gIHByb3RlY3RlZCB3aW5kb3dTY3JvbGxMaXN0ZW5lcjogKCkgPT4gdm9pZDtcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICBwcm90ZWN0ZWQgX3NlcmllczogQXJyYXk8UG9DaGFydEdhdWdlU2VyaWU+ID0gW107XHJcblxyXG4gIGdldCBpc0NoYXJ0R2F1Z2VUeXBlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gUG9DaGFydFR5cGUuR2F1Z2U7XHJcbiAgfVxyXG5cclxuICBjYWxjdWxhdGVTVkdDb250YWluZXJEaW1lbnNpb25zKGNoYXJ0V3JhcHBlckVsZW1lbnQ6IG51bWJlciwgY2hhcnRIZWFkZXJFbGVtZW50OiBudW1iZXIsIGNoYXJ0TGVnZW5kRWxlbWVudDogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBzdmdDb250YWluZXJIZWlnaHRDYWxjID0gdGhpcy5oZWlnaHQgLSBjaGFydEhlYWRlckVsZW1lbnQgLSBjaGFydExlZ2VuZEVsZW1lbnQgLSBQYWRkaW5nICogMjtcclxuXHJcbiAgICB0aGlzLnN2Z0hlaWdodCA9IHN2Z0NvbnRhaW5lckhlaWdodENhbGMgPD0gMCA/IDAgOiBzdmdDb250YWluZXJIZWlnaHRDYWxjO1xyXG4gICAgdGhpcy5jZW50ZXJYID0gY2hhcnRXcmFwcGVyRWxlbWVudCAvIDI7XHJcbiAgfVxyXG5cclxuICBjYWxjdWxhdGVUb3RhbFZhbHVlKCkge1xyXG4gICAgdGhpcy50b3RhbFZhbHVlID1cclxuICAgICAgdGhpcy50eXBlID09PSBQb0NoYXJ0VHlwZS5HYXVnZVxyXG4gICAgICAgID8gMTAwXHJcbiAgICAgICAgOiB0aGlzLnNlcmllcy5yZWR1Y2UoKHByZXZpb3VzVmFsdWUsIHNlcmllKSA9PiBwcmV2aW91c1ZhbHVlICsgKHNlcmllLmRhdGEgPyBzZXJpZS5kYXRhIDogc2VyaWUudmFsdWUpLCAwKTtcclxuICB9XHJcblxyXG4gIHNldCBzZXJpZXModmFsdWU6IEFycmF5PGFueT4pIHtcclxuICAgIHRoaXMuX3NlcmllcyA9IHRoaXMuZ2V0U2VyaWVzV2l0aFZhbHVlKHZhbHVlKTtcclxuICB9XHJcblxyXG4gIGdldCBzZXJpZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fc2VyaWVzO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGdldFNlcmllc1dpdGhWYWx1ZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxufVxyXG4iXX0=