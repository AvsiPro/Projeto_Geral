import { Component, EventEmitter, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { capitalizeFirstLetter, convertToInt } from '../../../utils/util';
import { PoPopoverComponent } from '../../po-popover/po-popover.component';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
import { poLocaleDefault } from '../../../services/po-language/po-language.constant';
const PoTableColumnManagerMaxColumnsDefault = 99999;
export const poTableColumnManagerLiteralsDefault = {
    en: {
        columnsManager: 'Columns manager',
        restoreDefault: 'Restore default'
    },
    es: {
        columnsManager: 'Gerente de columna',
        restoreDefault: 'Restaurar por defecto'
    },
    pt: {
        columnsManager: 'Gerenciador de colunas',
        restoreDefault: 'Restaurar padrão'
    },
    ru: {
        columnsManager: 'менеджер колонок',
        restoreDefault: 'сброс настроек'
    }
};
export class PoTableColumnManagerComponent {
    constructor(renderer, languageService) {
        this.renderer = renderer;
        this.columns = [];
        this.lastVisibleColumnsSelected = [];
        this.visibleColumnsChange = new EventEmitter();
        // Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
        // O po-table envia como parâmetro um array de string com as colunas visíveis atualizadas. Por exemplo: ["idCard", "name", "hireStatus", "age"].
        this.changeVisibleColumns = new EventEmitter();
        this.columnsOptions = [];
        this.visibleColumns = [];
        this._maxColumns = PoTableColumnManagerMaxColumnsDefault;
        this.defaultColumns = [];
        const language = languageService.getShortLanguage();
        this.literals = Object.assign(Object.assign({}, poTableColumnManagerLiteralsDefault[poLocaleDefault]), poTableColumnManagerLiteralsDefault[language]);
    }
    set maxColumns(value) {
        this._maxColumns = convertToInt(value, PoTableColumnManagerMaxColumnsDefault);
    }
    get maxColumns() {
        return this._maxColumns;
    }
    ngOnChanges(changes) {
        const { columns, maxColumns, target } = changes;
        if (target && target.firstChange) {
            this.initializeListeners();
        }
        if (columns) {
            this.onChangeColumns(columns);
        }
        if (maxColumns) {
            this.updateValues(this.columns);
        }
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    // aqui chegam os eventos do checkbox e do close do popover que também é disparado no resize
    checkChanges(event = [], emit = false) {
        this.verifyToEmitChange(event);
        if (emit) {
            // controla emissões para o dev
            this.verifyToEmitVisibleColumns();
        }
    }
    restore() {
        this.restoreDefaultEvent = true;
        const defaultColumns = this.getVisibleColumns(this.defaultColumns);
        this.checkChanges(defaultColumns, this.restoreDefaultEvent);
    }
    verifyToEmitChange(event) {
        const newColumns = [...event];
        if (this.allowsChangeVisibleColumns()) {
            this.emitChangesToSelectedColumns(newColumns);
        }
    }
    emitChangesToSelectedColumns(newColumns) {
        this.visibleColumns = [...newColumns];
        const visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
        // emite alteração nas colunas selecionadas, porém não emite para o dev.
        this.visibleColumnsChange.emit(visibleTableColumns);
    }
    allowsChangeVisibleColumns() {
        const visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
        return this.stringify(visibleTableColumns) !== this.stringify(this.columns);
    }
    verifyToEmitVisibleColumns() {
        if (this.restoreDefaultEvent) {
            // veio do restore default
            this.verifyRestoreValues();
        }
        else {
            // foi disparado no close popover;
            this.verifyOnClose();
        }
    }
    verifyRestoreValues() {
        const defaultColumns = [...this.defaultColumns];
        const defaultVisibleColumns = this.getVisibleColumns(defaultColumns);
        if (this.allowsChangeSelectedColumns(defaultVisibleColumns)) {
            this.emitChangeOnRestore(defaultVisibleColumns);
        }
        this.restoreDefaultEvent = false;
    }
    emitChangeOnRestore(defaultVisibleColumns) {
        this.visibleColumns = [...defaultVisibleColumns];
        const visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
        this.visibleColumnsChange.emit(visibleTableColumns);
    }
    allowsChangeSelectedColumns(defaultVisibleColumns) {
        const visibleColumns = this.getVisibleColumns(this.columns);
        return !this.isEqualArrays(defaultVisibleColumns, visibleColumns);
    }
    verifyOnClose() {
        if (this.allowsEmission()) {
            this.emitVisibleColumns();
        }
    }
    emitVisibleColumns() {
        this.lastEmittedValue = [...this.visibleColumns];
        this.changeVisibleColumns.emit(this.visibleColumns);
    }
    allowsEmission() {
        const updatedVisibleColumns = this.visibleColumns ? [...this.visibleColumns] : [];
        const lastEmittedValue = this.lastEmittedValue ? [...this.lastEmittedValue] : [];
        const lastVisibleColumnsSelected = this.lastVisibleColumnsSelected ? [...this.lastVisibleColumnsSelected] : [];
        const lastVisibleColumns = this.getVisibleColumns(lastVisibleColumnsSelected);
        return (this.isUpdate(updatedVisibleColumns, lastEmittedValue) ||
            this.isFirstTime(updatedVisibleColumns, lastVisibleColumns));
    }
    isFirstTime(updatedVisibleColumns, lastVisibleColumns) {
        return !this.lastEmittedValue && !this.isEqualArrays(updatedVisibleColumns, lastVisibleColumns);
    }
    isUpdate(updatedVisibleColumns, lastEmittedValue) {
        return this.lastEmittedValue && !this.isEqualArrays(updatedVisibleColumns, lastEmittedValue);
    }
    isEqualArrays(first, second) {
        const one = first ? [...first] : [];
        const two = second ? [...second] : [];
        const firstSort = one.slice().sort();
        const secondSort = two.slice().sort();
        const firstString = JSON.stringify(firstSort);
        const secondString = JSON.stringify(secondSort);
        return firstString === secondString;
    }
    // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
    disableColumnsOptions(columns = []) {
        return columns.map(column => (Object.assign(Object.assign({}, column), { disabled: this.isDisableColumn(column.value) })));
    }
    getColumnTitleLabel(column) {
        return column.label || capitalizeFirstLetter(column.property);
    }
    /** Retorna um Array de column.property das colunas que são visiveis. */
    getVisibleColumns(columns) {
        let visibleColumns = [];
        columns.forEach(column => {
            if (this.isVisibleColumn(column, visibleColumns)) {
                visibleColumns = [...visibleColumns, column.property];
            }
        });
        return visibleColumns;
    }
    isVisibleColumn(column, visibleColumns) {
        return column.visible !== false && visibleColumns.length < this.maxColumns && column.type !== 'detail';
    }
    /** Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas. */
    getVisibleTableColumns(visibleColumns) {
        const columns = this.columns ? [...this.columns] : [];
        return columns.map(column => (Object.assign(Object.assign({}, column), { visible: visibleColumns.includes(column.property) || column.type === 'detail' })));
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            if (this.popover && !this.popover.isHidden) {
                this.popover.close();
            }
        });
    }
    isDisableColumn(property) {
        return this.visibleColumns.length >= this.maxColumns ? !this.visibleColumns.includes(property) : false;
    }
    mapTableColumnsToCheckboxOptions(columns = []) {
        const tableColumns = [...columns];
        const columnsOptions = [];
        tableColumns.forEach(column => {
            if (column.type !== 'detail') {
                columnsOptions.push({
                    value: column.property,
                    label: this.getColumnTitleLabel(column),
                    disabled: this.isDisableColumn(column.property)
                });
            }
        });
        return columnsOptions;
    }
    onChangeColumns(columns) {
        const { currentValue = [], previousValue = [] } = columns;
        // atualizara o defaultColumns, quando for a primeira vez ou quando o defaultColumns for diferente do currentValue
        if (!this.lastVisibleColumnsSelected && this.stringify(this.defaultColumns) !== this.stringify(currentValue)) {
            this.defaultColumns = [...currentValue];
        }
        // verifica se o valor anterior é diferente do atual para atualizar as columnsOptions apenas quando for necessario
        if (this.stringify(previousValue) !== this.stringify(currentValue)) {
            this.updateValues(currentValue);
        }
    }
    updateValues(currentValue) {
        const visibleColumns = this.getVisibleColumns(currentValue);
        this.visibleColumns = [...visibleColumns];
        const columnsOptions = this.mapTableColumnsToCheckboxOptions(currentValue);
        this.columnsOptions = this.disableColumnsOptions(columnsOptions);
        this.checkChanges(visibleColumns, false);
    }
    removeListeners() {
        if (this.resizeListener) {
            this.resizeListener();
        }
    }
    stringify(columns) {
        // não faz o stringify da propriedade icon e searchService, pois pode conter objeto complexo e disparar um erro.
        return JSON.stringify(columns, (key, value) => {
            if (key !== 'icon' && key !== 'searchService') {
                return value;
            }
        });
    }
}
PoTableColumnManagerComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-table-column-manager',
                template: "<po-popover #popover *ngIf=\"target\" [p-target]=\"target\" p-position=\"bottom-left\" (p-close)=\"checkChanges([], true)\">\r\n  <div class=\"po-table-column-manager-header\">\r\n    <div class=\"po-table-column-manager-header-title\">{{ literals.columnsManager }}</div>\r\n\r\n    <div class=\"po-table-column-manager-header-close\">\r\n      <button\r\n        class=\"po-table-column-manager-header-close-button po-clickable po-icon po-icon-close\"\r\n        (click)=\"popover.close()\"\r\n      ></button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"po-table-column-manager-body\">\r\n    <po-checkbox-group\r\n      name=\"visibleColumns\"\r\n      [(ngModel)]=\"visibleColumns\"\r\n      p-columns=\"1\"\r\n      [p-options]=\"columnsOptions\"\r\n      (p-change)=\"checkChanges($event, false)\"\r\n    >\r\n    </po-checkbox-group>\r\n  </div>\r\n\r\n  <div class=\"po-table-column-manager-footer\">\r\n    <po-button\r\n      class=\"po-table-column-manager-footer-restore\"\r\n      p-small\r\n      p-type=\"link\"\r\n      [p-label]=\"literals.restoreDefault\"\r\n      (p-click)=\"restore()\"\r\n    >\r\n    </po-button>\r\n  </div>\r\n</po-popover>\r\n"
            },] }
];
PoTableColumnManagerComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: PoLanguageService }
];
PoTableColumnManagerComponent.propDecorators = {
    popover: [{ type: ViewChild, args: [PoPopoverComponent,] }],
    columns: [{ type: Input, args: ['p-columns',] }],
    target: [{ type: Input, args: ['p-target',] }],
    lastVisibleColumnsSelected: [{ type: Input, args: ['p-last-visible-columns-selected',] }],
    visibleColumnsChange: [{ type: Output, args: ['p-visible-columns-change',] }],
    changeVisibleColumns: [{ type: Output, args: ['p-change-visible-columns',] }],
    maxColumns: [{ type: Input, args: ['p-max-columns',] }]
};
//# sourceMappingURL=data:application/json;base64,