import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { PoDateService } from '../../services/po-date';
import { PoLanguageService } from '../../services/po-language/po-language.service';
import { poLocales } from '../../services/po-language/po-language.constant';
import { PoCalendarMode } from './po-calendar-mode.enum';
/**
 * @description
 *
 * O `po-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
 * de direcionamento e nos *labels* do ano ou mês.
 *
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * this.date = '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * this.date = '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
 * formato **Data (E8601DAw.): yyyy-mm-dd**.
 *
 * Importante:
 *
 * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
 * a data desabilitada porém o *model* não será alterado.
 * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
 */
export class PoCalendarBaseComponent {
    constructor(poDate, languageService) {
        this.poDate = poDate;
        this.languageService = languageService;
        /** Evento disparado ao selecionar um dia do calendário. */
        this.change = new EventEmitter();
        this.onTouched = null;
        this.propagateChange = null;
        this.today = new Date();
        this._locale = this.languageService.getShortLanguage();
        this.shortLanguage = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Idioma do calendário.
     *
     * > O locale padrão sera recuperado com base no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set locale(locale) {
        this._locale = poLocales.includes(locale) ? locale : this.shortLanguage;
    }
    get locale() {
        return this._locale;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data máxima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set maxDate(maxDate) {
        this._maxDate = this.poDate.getDateForDateRange(maxDate, false);
    }
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data mínima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set minDate(minDate) {
        this._minDate = this.poDate.getDateForDateRange(minDate, true);
    }
    get minDate() {
        return this._minDate;
    }
    /**
     * Propriedade que permite informar o modo de exibição do calendar.
     *
     * Implementa o enum `PoCalendarMode`.
     */
    set mode(value) {
        this._mode = value;
        this.setActivateDate();
    }
    get mode() {
        return this._mode;
    }
    get isRange() {
        return this.mode === PoCalendarMode.Range;
    }
    setActivateDate(date) {
        const activateDate = date ? date : this.verifyActivateDate();
        if (this.isRange) {
            const checkedStart = typeof activateDate === 'string' ? this.poDate.convertIsoToDate(activateDate) : new Date(activateDate);
            const checkedEnd = new Date(new Date(checkedStart).setMonth(checkedStart.getMonth() + 1));
            this.activateDate = { start: checkedStart, end: checkedEnd };
        }
        else {
            this.activateDate = new Date(activateDate);
        }
    }
    verifyActivateDate() {
        let today = this.today;
        if (this.minDate && this.minDate > this.today) {
            today = this.minDate;
        }
        else if (this.maxDate && this.maxDate < this.today) {
            today = this.maxDate;
        }
        return today;
    }
}
PoCalendarBaseComponent.decorators = [
    { type: Directive }
];
PoCalendarBaseComponent.ctorParameters = () => [
    { type: PoDateService },
    { type: PoLanguageService }
];
PoCalendarBaseComponent.propDecorators = {
    change: [{ type: Output, args: ['p-change',] }],
    locale: [{ type: Input, args: ['p-locale',] }],
    maxDate: [{ type: Input, args: ['p-max-date',] }],
    minDate: [{ type: Input, args: ['p-min-date',] }],
    mode: [{ type: Input, args: ['p-mode',] }]
};
//# sourceMappingURL=data:application/json;base64,