import { Input, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { PoLanguageService } from '../../services/po-language/po-language.service';
import { poLocaleDefault } from '../../services/po-language/po-language.constant';
export const poNavbarLiteralsDefault = {
    en: {
        navbarLinks: 'Navbar links'
    },
    es: {
        navbarLinks: 'Navbar links'
    },
    pt: {
        navbarLinks: 'Navbar links'
    },
    ru: {
        navbarLinks: 'Navbar связи'
    }
};
/**
 * @description
 *
 * O componente `po-navbar` é um cabeçalho fixo que permite apresentar uma lista de links para facilitar a navegação pelas
 * páginas da aplicação. Também possui ícones com ações.
 *
 * Quando utilizado em uma resolução menor que `768px`, o componente utilizará o menu corrente da aplicação para
 * incluir seus itens.
 *
 * Ao utilizar Navbar com Menu e ambos tiverem logo, será mantido o logo do Navbar.
 */
export class PoNavbarBaseComponent {
    constructor(languageService) {
        this._iconActions = [];
        this._items = [];
        this._shadow = false;
        this.language = poLocaleDefault;
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de ações apresentadas em ícones no lado direito do `po-navbar`.
     */
    set iconActions(value) {
        this._iconActions = Array.isArray(value) ? value : [];
    }
    get iconActions() {
        return this._iconActions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de items do `po-navbar`.
     */
    set items(value) {
        this._items = Array.isArray(value) ? value : [];
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com a literal usada na propriedade `p-literals`.
     *
     * Para customizar a literal, basta declarar um objeto do tipo `PoNavbarLiterals` conforme exemplo abaixo:
     *
     * ```
     *  const customLiterals: PoNavbarLiterals = {
     *    navbarLinks: 'Itens de navegação'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-navbar
     *   [p-literals]="customLiterals">
     * </po-navbar>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poNavbarLiteralsDefault[poLocaleDefault]), poNavbarLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poNavbarLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poNavbarLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a logo apresentada `po-navbar`.
     */
    set logo(value) {
        this._logo = value;
        if (this.applicationMenu) {
            this.validateMenuLogo();
        }
    }
    get logo() {
        return this._logo;
    }
    /**
     * @optional
     *
     * @description
     *
     * Aplica uma sombra na parte inferior do `po-navbar`.
     *
     * @default `false`
     */
    set shadow(value) {
        this._shadow = convertToBoolean(value);
    }
    get shadow() {
        return this._shadow;
    }
}
PoNavbarBaseComponent.decorators = [
    { type: Directive }
];
PoNavbarBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoNavbarBaseComponent.propDecorators = {
    menu: [{ type: Input, args: ['p-menu',] }],
    iconActions: [{ type: Input, args: ['p-icon-actions',] }],
    items: [{ type: Input, args: ['p-items',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    logo: [{ type: Input, args: ['p-logo',] }],
    shadow: [{ type: Input, args: ['p-shadow',] }]
};
//# sourceMappingURL=data:application/json;base64,