import { ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';
import { PoGaugePadding } from './po-gauge-default-values.constant';
import { PoColorService } from '../../services/po-color/po-color.service';
import { PoGaugeBaseComponent } from './po-gauge-base.component';
/**
 * @docsExtends PoGaugeBaseComponent
 *
 * @example
 *
 * <example name="po-gauge-basic" title="PO Gauge Basic">
 *  <file name="sample-po-gauge-basic/sample-po-gauge-basic.component.html"> </file>
 *  <file name="sample-po-gauge-basic/sample-po-gauge-basic.component.ts"> </file>
 * </example>
 * <example name="po-gauge-labs" title="PO Gauge Labs">
 *  <file name="sample-po-gauge-labs/sample-po-gauge-labs.component.html"> </file>
 *  <file name="sample-po-gauge-labs/sample-po-gauge-labs.component.ts"> </file>
 * </example>
 * <example name="po-gauge-summary" title="PO Gauge Summary">
 *  <file name="sample-po-gauge-summary/sample-po-gauge-summary.component.html"> </file>
 *  <file name="sample-po-gauge-summary/sample-po-gauge-summary.component.ts"> </file>
 * </example>
 */
export class PoGaugeComponent extends PoGaugeBaseComponent {
    constructor(colorService, changeDetector) {
        super(colorService);
        this.colorService = colorService;
        this.changeDetector = changeDetector;
        this.isLoaded = false;
    }
    get hasElementRef() {
        var _a;
        return !!((_a = this.svgEl) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth);
    }
    get hasRanges() {
        return this.ranges.length > 0;
    }
    ngDoCheck() {
        if (!this.isLoaded && this.hasElementRef) {
            this.isLoaded = true;
            this.svgContainerSize();
        }
    }
    svgContainerSize() {
        var _a, _b, _c, _d, _e, _f, _g;
        if ((_a = this.svgEl) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth) {
            this.changeDetector.detectChanges();
            const titleHeight = (_c = (_b = this.titleEl.nativeElement) === null || _b === void 0 ? void 0 : _b.offsetHeight) !== null && _c !== void 0 ? _c : 0;
            const legendHeight = (_e = (_d = this.legendEl.nativeElement) === null || _d === void 0 ? void 0 : _d.offsetHeight) !== null && _e !== void 0 ? _e : 0;
            const descriptionHeight = (_g = (_f = this.descriptionEl.nativeElement) === null || _f === void 0 ? void 0 : _f.offsetHeight) !== null && _g !== void 0 ? _g : 0;
            const height = this.height - titleHeight - legendHeight - descriptionHeight - PoGaugePadding * 2;
            const width = this.svgEl.nativeElement.offsetWidth;
            this.svgContainer = { width, height };
        }
    }
}
PoGaugeComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-gauge',
                template: "<div class=\"po-gauge-wrapper\" [style.height.px]=\"height\">\r\n  <po-gauge-title #titleEl [p-title]=\"title\"></po-gauge-title>\r\n\r\n  <po-gauge-description\r\n    #descriptionEl\r\n    [p-description]=\"description\"\r\n    [p-description-width]=\"height\"\r\n    [p-has-ranges]=\"hasRanges\"\r\n    [p-value]=\"value\"\r\n  ></po-gauge-description>\r\n\r\n  <po-gauge-svg #svgEl [p-container]=\"svgContainer\" [p-ranges]=\"ranges\" [p-value]=\"value\"></po-gauge-svg>\r\n\r\n  <po-gauge-legend #legendEl [p-ranges]=\"ranges\"> </po-gauge-legend>\r\n</div>\r\n"
            },] }
];
PoGaugeComponent.ctorParameters = () => [
    { type: PoColorService },
    { type: ChangeDetectorRef }
];
PoGaugeComponent.propDecorators = {
    descriptionEl: [{ type: ViewChild, args: ['descriptionEl', { read: ElementRef },] }],
    legendEl: [{ type: ViewChild, args: ['legendEl', { read: ElementRef },] }],
    titleEl: [{ type: ViewChild, args: ['titleEl', { read: ElementRef },] }],
    svgEl: [{ type: ViewChild, args: ['svgEl', { read: ElementRef },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZ2F1Z2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWdhdWdlL3BvLWdhdWdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFXLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0YsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRXBFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUUxRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUdqRTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFLSCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsb0JBQW9CO0lBVXhELFlBQXNCLFlBQTRCLEVBQVUsY0FBaUM7UUFDM0YsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBREEsaUJBQVksR0FBWixZQUFZLENBQWdCO1FBQVUsbUJBQWMsR0FBZCxjQUFjLENBQW1CO1FBRnJGLGFBQVEsR0FBWSxLQUFLLENBQUM7SUFJbEMsQ0FBQztJQUVELElBQVksYUFBYTs7UUFDdkIsT0FBTyxDQUFDLENBQUMsQ0FBQSxNQUFBLElBQUksQ0FBQyxLQUFLLDBDQUFFLGFBQWEsQ0FBQyxXQUFXLENBQUEsQ0FBQztJQUNqRCxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELFNBQVM7UUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3hDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVTLGdCQUFnQjs7UUFDeEIsSUFBSSxNQUFBLElBQUksQ0FBQyxLQUFLLDBDQUFFLGFBQWEsQ0FBQyxXQUFXLEVBQUU7WUFDekMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUVwQyxNQUFNLFdBQVcsR0FBRyxNQUFBLE1BQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLDBDQUFFLFlBQVksbUNBQUksQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sWUFBWSxHQUFHLE1BQUEsTUFBQSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsMENBQUUsWUFBWSxtQ0FBSSxDQUFDLENBQUM7WUFDcEUsTUFBTSxpQkFBaUIsR0FBRyxNQUFBLE1BQUEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLDBDQUFFLFlBQVksbUNBQUksQ0FBQyxDQUFDO1lBRTlFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxHQUFHLFlBQVksR0FBRyxpQkFBaUIsR0FBRyxjQUFjLEdBQUcsQ0FBQyxDQUFDO1lBQ2pHLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztZQUVuRCxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQzs7O1lBOUNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsVUFBVTtnQkFDcEIsaWtCQUF3QzthQUN6Qzs7O1lBMUJRLGNBQWM7WUFKZCxpQkFBaUI7Ozs0QkFnQ3ZCLFNBQVMsU0FBQyxlQUFlLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO3VCQUMvQyxTQUFTLFNBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtzQkFDMUMsU0FBUyxTQUFDLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7b0JBQ3pDLFNBQVMsU0FBQyxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRG9DaGVjaywgRWxlbWVudFJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBQb0dhdWdlUGFkZGluZyB9IGZyb20gJy4vcG8tZ2F1Z2UtZGVmYXVsdC12YWx1ZXMuY29uc3RhbnQnO1xyXG5cclxuaW1wb3J0IHsgUG9Db2xvclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9wby1jb2xvci9wby1jb2xvci5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IFBvR2F1Z2VCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9wby1nYXVnZS1iYXNlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBvR2F1Z2VTdmdDb250YWluZXIgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tZ2F1Z2Utc3ZnLWNvbnRhaW5lci5pbnRlcmZhY2UnO1xyXG5cclxuLyoqXHJcbiAqIEBkb2NzRXh0ZW5kcyBQb0dhdWdlQmFzZUNvbXBvbmVudFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tZ2F1Z2UtYmFzaWNcIiB0aXRsZT1cIlBPIEdhdWdlIEJhc2ljXCI+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWdhdWdlLWJhc2ljL3NhbXBsZS1wby1nYXVnZS1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWdhdWdlLWJhc2ljL3NhbXBsZS1wby1nYXVnZS1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxyXG4gKiA8L2V4YW1wbGU+XHJcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1nYXVnZS1sYWJzXCIgdGl0bGU9XCJQTyBHYXVnZSBMYWJzXCI+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWdhdWdlLWxhYnMvc2FtcGxlLXBvLWdhdWdlLWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1nYXVnZS1sYWJzL3NhbXBsZS1wby1nYXVnZS1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XHJcbiAqIDwvZXhhbXBsZT5cclxuICogPGV4YW1wbGUgbmFtZT1cInBvLWdhdWdlLXN1bW1hcnlcIiB0aXRsZT1cIlBPIEdhdWdlIFN1bW1hcnlcIj5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tZ2F1Z2Utc3VtbWFyeS9zYW1wbGUtcG8tZ2F1Z2Utc3VtbWFyeS5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWdhdWdlLXN1bW1hcnkvc2FtcGxlLXBvLWdhdWdlLXN1bW1hcnkuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdwby1nYXVnZScsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLWdhdWdlLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUG9HYXVnZUNvbXBvbmVudCBleHRlbmRzIFBvR2F1Z2VCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgRG9DaGVjayB7XHJcbiAgQFZpZXdDaGlsZCgnZGVzY3JpcHRpb25FbCcsIHsgcmVhZDogRWxlbWVudFJlZiB9KSBkZXNjcmlwdGlvbkVsOiBFbGVtZW50UmVmO1xyXG4gIEBWaWV3Q2hpbGQoJ2xlZ2VuZEVsJywgeyByZWFkOiBFbGVtZW50UmVmIH0pIGxlZ2VuZEVsOiBFbGVtZW50UmVmO1xyXG4gIEBWaWV3Q2hpbGQoJ3RpdGxlRWwnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdGl0bGVFbDogRWxlbWVudFJlZjtcclxuICBAVmlld0NoaWxkKCdzdmdFbCcsIHsgcmVhZDogRWxlbWVudFJlZiB9KSBzdmdFbDogRWxlbWVudFJlZjtcclxuXHJcbiAgc3ZnQ29udGFpbmVyOiBQb0dhdWdlU3ZnQ29udGFpbmVyO1xyXG5cclxuICBwcml2YXRlIGlzTG9hZGVkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjb2xvclNlcnZpY2U6IFBvQ29sb3JTZXJ2aWNlLCBwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZikge1xyXG4gICAgc3VwZXIoY29sb3JTZXJ2aWNlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0IGhhc0VsZW1lbnRSZWYoKSB7XHJcbiAgICByZXR1cm4gISF0aGlzLnN2Z0VsPy5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGhhc1JhbmdlcygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnJhbmdlcy5sZW5ndGggPiAwO1xyXG4gIH1cclxuXHJcbiAgbmdEb0NoZWNrKCkge1xyXG4gICAgaWYgKCF0aGlzLmlzTG9hZGVkICYmIHRoaXMuaGFzRWxlbWVudFJlZikge1xyXG4gICAgICB0aGlzLmlzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgdGhpcy5zdmdDb250YWluZXJTaXplKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgc3ZnQ29udGFpbmVyU2l6ZSgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnN2Z0VsPy5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoKSB7XHJcbiAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xyXG5cclxuICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSB0aGlzLnRpdGxlRWwubmF0aXZlRWxlbWVudD8ub2Zmc2V0SGVpZ2h0ID8/IDA7XHJcbiAgICAgIGNvbnN0IGxlZ2VuZEhlaWdodCA9IHRoaXMubGVnZW5kRWwubmF0aXZlRWxlbWVudD8ub2Zmc2V0SGVpZ2h0ID8/IDA7XHJcbiAgICAgIGNvbnN0IGRlc2NyaXB0aW9uSGVpZ2h0ID0gdGhpcy5kZXNjcmlwdGlvbkVsLm5hdGl2ZUVsZW1lbnQ/Lm9mZnNldEhlaWdodCA/PyAwO1xyXG5cclxuICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5oZWlnaHQgLSB0aXRsZUhlaWdodCAtIGxlZ2VuZEhlaWdodCAtIGRlc2NyaXB0aW9uSGVpZ2h0IC0gUG9HYXVnZVBhZGRpbmcgKiAyO1xyXG4gICAgICBjb25zdCB3aWR0aCA9IHRoaXMuc3ZnRWwubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcclxuXHJcbiAgICAgIHRoaXMuc3ZnQ29udGFpbmVyID0geyB3aWR0aCwgaGVpZ2h0IH07XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==