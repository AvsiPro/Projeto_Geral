import { Input, EventEmitter, Output, Directive } from '@angular/core';
import { TitleCasePipe } from '@angular/common';
import { isTypeof, sortFields } from '../../../../utils/util';
import { getGridColumnsClasses, isVisibleField } from '../../po-dynamic.util';
import { PoDynamicFieldType } from '../../po-dynamic-field-type.enum';
export class PoDynamicFormFieldsBaseComponent {
    constructor(titleCasePipe) {
        this.titleCasePipe = titleCasePipe;
        this.formValidate = new EventEmitter();
        this.fieldsChange = new EventEmitter();
        // Evento disparado se existir optionsService em visibleField. Necessário resgatar referência do objeto selecionado para quando se tratar de recebimento de opções via serviço.
        this.objectValue = new EventEmitter();
        this.visibleFields = [];
        this._value = {};
    }
    // array de objetos que implementam a interface PoDynamicFormField, que serão exibidos no componente.
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
    }
    get fields() {
        return this._fields;
    }
    // valor que será utilizado para iniciar valor no componente.
    set value(value) {
        this._value = value && isTypeof(value, 'object') ? value : {};
    }
    get value() {
        return this._value;
    }
    set validateFields(value) {
        this._validateFields = Array.isArray(value) ? [...value] : [];
    }
    get validateFields() {
        return this._validateFields;
    }
    compareTo(value, compareTo) {
        return value === compareTo;
    }
    // retorna um array com os objetos configurados e visiveis.
    getVisibleFields() {
        const visibleFields = [];
        this.fields.forEach(field => {
            if (this.existsProperty(visibleFields, field.property)) {
                this.printError(`"po-dynamic-form" property "${field.property}" está duplicado. Interface: PoDynamicFormField.`);
                return;
            }
            if (!field['property']) {
                this.printError('"po-dynamic-form" É obrigatório ser especificado um property.');
                return;
            }
            if (isVisibleField(field)) {
                visibleFields.push(this.createField(field));
            }
        });
        return sortFields(visibleFields);
    }
    // converte um array em string para um array de objetos que contem label e value.
    convertOptions(options) {
        const everyOptionString = options.every(option => typeof option === 'string');
        if (everyOptionString) {
            return options.map(value => ({ label: value, value }));
        }
        return options;
    }
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    createField(field) {
        const control = this.getComponentControl(field);
        const options = !!field.options ? this.convertOptions(field.options) : undefined;
        const focus = this.hasFocus(field);
        const type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        const componentClass = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns, {
            smPull: field.gridSmPull,
            mdPull: field.gridMdPull,
            lgPull: field.gridLgPull,
            xlPull: field.gridXlPull
        });
        return Object.assign(Object.assign({ label: this.titleCasePipe.transform(field.property), maskFormatModel: this.compareTo(type, PoDynamicFieldType.Time) }, field), { componentClass,
            control,
            focus,
            options });
    }
    existsProperty(fields, property) {
        return fields.some(field => field.property === property);
    }
    // recupera o componente de acordo com algumas regras do field.
    getComponentControl(field = {}) {
        const type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        if (this.isNumberType(field, type)) {
            return 'number';
        }
        else if (this.isCurrencyType(field, type)) {
            return 'decimal';
        }
        else if (this.isSelect(field)) {
            return 'select';
        }
        else if (this.isRadioGroup(field)) {
            return 'radioGroup';
        }
        else if (this.isCheckboxGroup(field)) {
            return 'checkboxGroup';
        }
        else if (this.isMultiselect(field)) {
            return 'multiselect';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Boolean)) {
            return 'switch';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Date) || this.compareTo(type, PoDynamicFieldType.DateTime)) {
            return field.range ? 'datepickerrange' : 'datepicker';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Time)) {
            field.mask = field.mask || '99:99';
            return 'input';
        }
        else if (this.isCombo(field)) {
            return 'combo';
        }
        else if (this.isLookup(field)) {
            return 'lookup';
        }
        else if (this.isTextarea(field)) {
            return 'textarea';
        }
        else if (this.isPassword(field)) {
            return 'password';
        }
        return 'input';
    }
    hasFocus(field) {
        return !!this.autoFocus && this.autoFocus === field.property;
    }
    isCheckboxGroup(field) {
        const { optionsService, optionsMulti, options } = field;
        return !optionsService && optionsMulti && !!options && options.length <= 3;
    }
    isCombo(field) {
        const { optionsService } = field;
        return !!optionsService && (isTypeof(optionsService, 'string') || this.isComboFilter(optionsService));
    }
    isCurrencyType(field, type) {
        const { mask, pattern } = field;
        return this.compareTo(type, PoDynamicFieldType.Currency) && !mask && !pattern;
    }
    isLookupFilter(object) {
        return object && object.getObjectByValue !== undefined;
    }
    isComboFilter(object) {
        return object && object.getFilteredData !== undefined;
    }
    isLookup(field) {
        const { searchService } = field;
        return !!searchService && (isTypeof(searchService, 'string') || this.isLookupFilter(searchService));
    }
    isMultiselect(field) {
        const { optionsService, optionsMulti, options } = field;
        return optionsMulti && (!!optionsService || (!!options && options.length > 3));
    }
    isNumberType(field, type) {
        const { mask, pattern } = field;
        return this.compareTo(type, PoDynamicFieldType.Number) && !mask && !pattern;
    }
    isPassword(field) {
        const { secret } = field;
        return secret;
    }
    isRadioGroup(field) {
        const { optionsMulti, options } = field;
        return !optionsMulti && !!options && options.length <= 3;
    }
    isSelect(field) {
        const { optionsMulti, options } = field;
        return !optionsMulti && !!options && options.length > 3;
    }
    isTextarea(field) {
        const { rows } = field;
        return rows && rows >= 3;
    }
    printError(error) {
        console.error(error);
    }
}
PoDynamicFormFieldsBaseComponent.decorators = [
    { type: Directive }
];
PoDynamicFormFieldsBaseComponent.ctorParameters = () => [
    { type: TitleCasePipe }
];
PoDynamicFormFieldsBaseComponent.propDecorators = {
    autoFocus: [{ type: Input, args: ['p-auto-focus',] }],
    disabledForm: [{ type: Input, args: ['p-disabled-form',] }],
    validate: [{ type: Input, args: ['p-validate',] }],
    formValidate: [{ type: Output, args: ['p-form-validate',] }],
    fieldsChange: [{ type: Output, args: ['p-fieldsChange',] }],
    objectValue: [{ type: Output, args: ['p-object-value',] }],
    fields: [{ type: Input, args: ['p-fields',] }],
    value: [{ type: Input, args: ['p-value',] }],
    validateFields: [{ type: Input, args: ['p-validate-fields',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLWZpZWxkcy1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1keW5hbWljL3BvLWR5bmFtaWMtZm9ybS9wby1keW5hbWljLWZvcm0tZmllbGRzL3BvLWR5bmFtaWMtZm9ybS1maWVsZHMtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU5RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDOUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFPdEUsTUFBTSxPQUFPLGdDQUFnQztJQThDM0MsWUFBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUF2Q3JCLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUV4QyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFFakUsK0tBQStLO1FBQ3JKLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUVoRSxrQkFBYSxHQUFzQyxFQUFFLENBQUM7UUFJOUMsV0FBTSxHQUFTLEVBQUUsQ0FBQztJQTRCeUIsQ0FBQztJQTFCcEQscUdBQXFHO0lBQ3JHLElBQXVCLE1BQU0sQ0FBQyxLQUFnQztRQUM1RCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFD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QUV4QyxPQUFPLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVPLFFBQVEsQ0FBQyxLQUF5QjtRQUN4QyxNQUFNLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQztRQUV4QyxPQUFPLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVPLFVBQVUsQ0FBQyxLQUF5QjtRQUMxQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBRXZCLE9BQU8sSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVPLFVBQVUsQ0FBQyxLQUFhO1FBQzlCLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQzs7O1lBNU9GLFNBQVM7OztZQVhELGFBQWE7Ozt3QkFhbkIsS0FBSyxTQUFDLGNBQWM7MkJBRXBCLEtBQUssU0FBQyxpQkFBaUI7dUJBRXZCLEtBQUssU0FBQyxZQUFZOzJCQUVsQixNQUFNLFNBQUMsaUJBQWlCOzJCQUV4QixNQUFNLFNBQUMsZ0JBQWdCOzBCQUd2QixNQUFNLFNBQUMsZ0JBQWdCO3FCQVN2QixLQUFLLFNBQUMsVUFBVTtvQkFTaEIsS0FBSyxTQUFDLFNBQVM7NkJBUWYsS0FBSyxTQUFDLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRpdGxlQ2FzZVBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5cclxuaW1wb3J0IHsgaXNUeXBlb2YsIHNvcnRGaWVsZHMgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlsJztcclxuXHJcbmltcG9ydCB7IGdldEdyaWRDb2x1bW5zQ2xhc3NlcywgaXNWaXNpYmxlRmllbGQgfSBmcm9tICcuLi8uLi9wby1keW5hbWljLnV0aWwnO1xyXG5pbXBvcnQgeyBQb0R5bmFtaWNGaWVsZFR5cGUgfSBmcm9tICcuLi8uLi9wby1keW5hbWljLWZpZWxkLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1GaWVsZCB9IGZyb20gJy4uL3BvLWR5bmFtaWMtZm9ybS1maWVsZC5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0R5bmFtaWNGb3JtRmllbGRJbnRlcm5hbCB9IGZyb20gJy4vcG8tZHluYW1pYy1mb3JtLWZpZWxkLWludGVybmFsLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvQ29tYm9GaWx0ZXIgfSBmcm9tICcuLi8uLi8uLi9wby1maWVsZC9wby1jb21iby9pbnRlcmZhY2VzL3BvLWNvbWJvLWZpbHRlci5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlciB9IGZyb20gJy4uLy4uLy4uL3BvLWZpZWxkL3BvLWxvb2t1cC9pbnRlcmZhY2VzL3BvLWxvb2t1cC1maWx0ZXIuaW50ZXJmYWNlJztcclxuXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgY2xhc3MgUG9EeW5hbWljRm9ybUZpZWxkc0Jhc2VDb21wb25lbnQge1xyXG4gIEBJbnB1dCgncC1hdXRvLWZvY3VzJykgYXV0b0ZvY3VzPzogc3RyaW5nO1xyXG5cclxuICBASW5wdXQoJ3AtZGlzYWJsZWQtZm9ybScpIGRpc2FibGVkRm9ybTogYm9vbGVhbjtcclxuXHJcbiAgQElucHV0KCdwLXZhbGlkYXRlJykgdmFsaWRhdGU/OiBzdHJpbmcgfCBGdW5jdGlvbjtcclxuXHJcbiAgQE91dHB1dCgncC1mb3JtLXZhbGlkYXRlJykgZm9ybVZhbGlkYXRlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gIEBPdXRwdXQoJ3AtZmllbGRzQ2hhbmdlJykgZmllbGRzQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gIC8vIEV2ZW50byBkaXNwYXJhZG8gc2UgZXhpc3RpciBvcHRpb25zU2VydmljZSBlbSB2aXNpYmxlRmllbGQuIE5lY2Vzc8OhcmlvIHJlc2dhdGFyIHJlZmVyw6puY2lhIGRvIG9iamV0byBzZWxlY2lvbmFkbyBwYXJhIHF1YW5kbyBzZSB0cmF0YXIgZGUgcmVjZWJpbWVudG8gZGUgb3DDp8O1ZXMgdmlhIHNlcnZpw6dvLlxyXG4gIEBPdXRwdXQoJ3Atb2JqZWN0LXZhbHVlJykgb2JqZWN0VmFsdWUgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgdmlzaWJsZUZpZWxkczogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkSW50ZXJuYWw+ID0gW107XHJcblxyXG4gIHByaXZhdGUgX2ZpZWxkczogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPjtcclxuICBwcml2YXRlIF92YWxpZGF0ZUZpZWxkczogQXJyYXk8c3RyaW5nPjtcclxuICBwcml2YXRlIF92YWx1ZT86IGFueSA9IHt9O1xyXG5cclxuICAvLyBhcnJheSBkZSBvYmpldG9zIHF1ZSBpbXBsZW1lbnRhbSBhIGludGVyZmFjZSBQb0R5bmFtaWNGb3JtRmllbGQsIHF1ZSBzZXLDo28gZXhpYmlkb3Mgbm8gY29tcG9uZW50ZS5cclxuICBASW5wdXQoJ3AtZmllbGRzJykgc2V0IGZpZWxkcyh2YWx1ZTogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPikge1xyXG4gICAgdGhpcy5fZmllbGRzID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBbLi4udmFsdWVdIDogW107XHJcbiAgfVxyXG5cclxuICBnZXQgZmllbGRzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZpZWxkcztcclxuICB9XHJcblxyXG4gIC8vIHZhbG9yIHF1ZSBzZXLDoSB1dGlsaXphZG8gcGFyYSBpbmljaWFyIHZhbG9yIG5vIGNvbXBvbmVudGUuXHJcbiAgQElucHV0KCdwLXZhbHVlJykgc2V0IHZhbHVlKHZhbHVlOiBhbnkpIHtcclxuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWUgJiYgaXNUeXBlb2YodmFsdWUsICdvYmplY3QnKSA/IHZhbHVlIDoge307XHJcbiAgfVxyXG5cclxuICBnZXQgdmFsdWUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoJ3AtdmFsaWRhdGUtZmllbGRzJykgc2V0IHZhbGlkYXRlRmllbGRzKHZhbHVlOiBBcnJheTxzdHJpbmc+KSB7XHJcbiAgICB0aGlzLl92YWxpZGF0ZUZpZWxkcyA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gWy4uLnZhbHVlXSA6IFtdO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHZhbGlkYXRlRmllbGRzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlRmllbGRzO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0aXRsZUNhc2VQaXBlOiBUaXRsZUNhc2VQaXBlKSB7fVxyXG5cclxuICBjb21wYXJlVG8odmFsdWUsIGNvbXBhcmVUbykge1xyXG4gICAgcmV0dXJuIHZhbHVlID09PSBjb21wYXJlVG87XHJcbiAgfVxyXG5cclxuICAvLyByZXRvcm5hIHVtIGFycmF5IGNvbSBvcyBvYmpldG9zIGNvbmZpZ3VyYWRvcyBlIHZpc2l2ZWlzLlxyXG4gIHByb3RlY3RlZCBnZXRWaXNpYmxlRmllbGRzKCkge1xyXG4gICAgY29uc3QgdmlzaWJsZUZpZWxkcyA9IFtdO1xyXG5cclxuICAgIHRoaXMuZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xyXG4gICAgICBpZiAodGhpcy5leGlzdHNQcm9wZXJ0eSh2aXNpYmxlRmllbGRzLCBmaWVsZC5wcm9wZXJ0eSkpIHtcclxuICAgICAgICB0aGlzLnByaW50RXJyb3IoXHJcbiAgICAgICAgICBgXCJwby1keW5hbWljLWZvcm1cIiBwcm9wZXJ0eSBcIiR7ZmllbGQucHJvcGVydHl9XCIgZXN0w6EgZHVwbGljYWRvLiBJbnRlcmZhY2U6IFBvRHluYW1pY0Zvcm1GaWVsZC5gXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghZmllbGRbJ3Byb3BlcnR5J10pIHtcclxuICAgICAgICB0aGlzLnByaW50RXJyb3IoJ1wicG8tZHluYW1pYy1mb3JtXCIgw4kgb2JyaWdhdMOzcmlvIHNlciBlc3BlY2lmaWNhZG8gdW0gcHJvcGVydHkuJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaXNWaXNpYmxlRmllbGQoZmllbGQpKSB7XHJcbiAgICAgICAgdmlzaWJsZUZpZWxkcy5wdXNoKHRoaXMuY3JlYXRlRmllbGQoZmllbGQpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHNvcnRGaWVsZHModmlzaWJsZUZpZWxkcyk7XHJcbiAgfVxyXG5cclxuICAvLyBjb252ZXJ0ZSB1bSBhcnJheSBlbSBzdHJpbmcgcGFyYSB1bSBhcnJheSBkZSBvYmpldG9zIHF1ZSBjb250ZW0gbGFiZWwgZSB2YWx1ZS5cclxuICBwcml2YXRlIGNvbnZlcnRPcHRpb25zKG9wdGlvbnM6IEFycmF5PGFueT4pOiBBcnJheTx7IGxhYmVsOiBzdHJpbmc7IHZhbHVlOiBzdHJpbmcgfT4ge1xyXG4gICAgY29uc3QgZXZlcnlPcHRpb25TdHJpbmcgPSBvcHRpb25zLmV2ZXJ5KG9wdGlvbiA9PiB0eXBlb2Ygb3B0aW9uID09PSAnc3RyaW5nJyk7XHJcblxyXG4gICAgaWYgKGV2ZXJ5T3B0aW9uU3RyaW5nKSB7XHJcbiAgICAgIHJldHVybiBvcHRpb25zLm1hcCh2YWx1ZSA9PiAoeyBsYWJlbDogdmFsdWUsIHZhbHVlIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gb3B0aW9ucztcclxuICB9XHJcblxyXG4gIC8vIGNyaWEgdW0gbm92byBvYmpldG8gY29tIGFzIGNsYXNzZXMgZGUgZ3JpZCBzeXN0ZW0sIGNvbSBjb250cm9sICh0aXBvIGRvIGNvbXBvbmVudGUpIGUgbGFiZWwgZGVmYXVsdC5cclxuICBwcml2YXRlIGNyZWF0ZUZpZWxkKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQpOiBQb0R5bmFtaWNGb3JtRmllbGRJbnRlcm5hbCB7XHJcbiAgICBjb25zdCBjb250cm9sID0gdGhpcy5nZXRDb21wb25lbnRDb250cm9sKGZpZWxkKTtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSAhIWZpZWxkLm9wdGlvbnMgPyB0aGlzLmNvbnZlcnRPcHRpb25zKGZpZWxkLm9wdGlvbnMpIDogdW5kZWZpbmVkO1xyXG4gICAgY29uc3QgZm9jdXMgPSB0aGlzLmhhc0ZvY3VzKGZpZWxkKTtcclxuICAgIGNvbnN0IHR5cGUgPSBmaWVsZCAmJiBmaWVsZC50eXBlID8gZmllbGQudHlwZS50b0xvY2FsZUxvd2VyQ2FzZSgpIDogJ3N0cmluZyc7XHJcblxyXG4gICAgY29uc3QgY29tcG9uZW50Q2xhc3MgPSBnZXRHcmlkQ29sdW1uc0NsYXNzZXMoXHJcbiAgICAgIGZpZWxkLmdyaWRTbUNvbHVtbnMsXHJcbiAgICAgIGZpZWxkLmdyaWRNZENvbHVtbnMsXHJcbiAgICAgIGZpZWxkLmdyaWRMZ0NvbHVtbnMsXHJcbiAgICAgIGZpZWxkLmdyaWRYbENvbHVtbnMsXHJcbiAgICAgIGZpZWxkLmdyaWRDb2x1bW5zLFxyXG4gICAgICB7XHJcbiAgICAgICAgc21QdWxsOiBmaWVsZC5ncmlkU21QdWxsLFxyXG4gICAgICAgIG1kUHVsbDogZmllbGQuZ3JpZE1kUHVsbCxcclxuICAgICAgICBsZ1B1bGw6IGZpZWxkLmdyaWRMZ1B1bGwsXHJcbiAgICAgICAgeGxQdWxsOiBmaWVsZC5ncmlkWGxQdWxsXHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbGFiZWw6IHRoaXMudGl0bGVDYXNlUGlwZS50cmFuc2Zvcm0oZmllbGQucHJvcGVydHkpLFxyXG4gICAgICBtYXNrRm9ybWF0TW9kZWw6IHRoaXMuY29tcGFyZVRvKHR5cGUsIFBvRHluYW1pY0ZpZWxkVHlwZS5UaW1lKSxcclxuICAgICAgLi4uZmllbGQsXHJcbiAgICAgIGNvbXBvbmVudENsYXNzLFxyXG4gICAgICBjb250cm9sLFxyXG4gICAgICBmb2N1cyxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZXhpc3RzUHJvcGVydHkoZmllbGRzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+LCBwcm9wZXJ0eTogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gZmllbGRzLnNvbWUoZmllbGQgPT4gZmllbGQucHJvcGVydHkgPT09IHByb3BlcnR5KTtcclxuICB9XHJcblxyXG4gIC8vIHJlY3VwZXJhIG8gY29tcG9uZW50ZSBkZSBhY29yZG8gY29tIGFsZ3VtYXMgcmVncmFzIGRvIGZpZWxkLlxyXG4gIHByaXZhdGUgZ2V0Q29tcG9uZW50Q29udHJvbChmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkID0gPGFueT57fSkge1xyXG4gICAgY29uc3QgdHlwZSA9IGZpZWxkICYmIGZpZWxkLnR5cGUgPyBmaWVsZC50eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCkgOiAnc3RyaW5nJztcclxuXHJcbiAgICBpZiAodGhpcy5pc051bWJlclR5cGUoZmllbGQsIHR5cGUpKSB7XHJcbiAgICAgIHJldHVybiAnbnVtYmVyJztcclxuICAgIH0gZWxzZSBpZiAodGhpcy5pc0N1cnJlbmN5VHlwZShmaWVsZCwgdHlwZSkpIHtcclxuICAgICAgcmV0dXJuICdkZWNpbWFsJztcclxuICAgIH0gZWxzZSBpZiAodGhpcy5pc1NlbGVjdChmaWVsZCkpIHtcclxuICAgICAgcmV0dXJuICdzZWxlY3QnO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmlzUmFkaW9Hcm91cChmaWVsZCkpIHtcclxuICAgICAgcmV0dXJuICdyYWRpb0dyb3VwJztcclxuICAgIH0gZWxzZSBpZiAodGhpcy5pc0NoZWNrYm94R3JvdXAoZmllbGQpKSB7XHJcbiAgICAgIHJldHVybiAnY2hlY2tib3hHcm91cCc7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNNdWx0aXNlbGVjdChmaWVsZCkpIHtcclxuICAgICAgcmV0dXJuICdtdWx0aXNlbGVjdCc7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29tcGFyZVRvKHR5cGUsIFBvRHluYW1pY0ZpZWxkVHlwZS5Cb29sZWFuKSkge1xyXG4gICAgICByZXR1cm4gJ3N3aXRjaCc7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29tcGFyZVRvKHR5cGUsIFBvRHluYW1pY0ZpZWxkVHlwZS5EYXRlKSB8fCB0aGlzLmNvbXBhcmVUbyh0eXBlLCBQb0R5bmFtaWNGaWVsZFR5cGUuRGF0ZVRpbWUpKSB7XHJcbiAgICAgIHJldHVybiBmaWVsZC5yYW5nZSA/ICdkYXRlcGlja2VycmFuZ2UnIDogJ2RhdGVwaWNrZXInO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbXBhcmVUbyh0eXBlLCBQb0R5bmFtaWNGaWVsZFR5cGUuVGltZSkpIHtcclxuICAgICAgZmllbGQubWFzayA9IGZpZWxkLm1hc2sgfHwgJzk5Ojk5JztcclxuXHJcbiAgICAgIHJldHVybiAnaW5wdXQnO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmlzQ29tYm8oZmllbGQpKSB7XHJcbiAgICAgIHJldHVybiAnY29tYm8nO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmlzTG9va3VwKGZpZWxkKSkge1xyXG4gICAgICByZXR1cm4gJ2xvb2t1cCc7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNUZXh0YXJlYShmaWVsZCkpIHtcclxuICAgICAgcmV0dXJuICd0ZXh0YXJlYSc7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNQYXNzd29yZChmaWVsZCkpIHtcclxuICAgICAgcmV0dXJuICdwYXNzd29yZCc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICdpbnB1dCc7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhc0ZvY3VzKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQpIHtcclxuICAgIHJldHVybiAhIXRoaXMuYXV0b0ZvY3VzICYmIHRoaXMuYXV0b0ZvY3VzID09PSBmaWVsZC5wcm9wZXJ0eTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNDaGVja2JveEdyb3VwKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQpIHtcclxuICAgIGNvbnN0IHsgb3B0aW9uc1NlcnZpY2UsIG9wdGlvbnNNdWx0aSwgb3B0aW9ucyB9ID0gZmllbGQ7XHJcblxyXG4gICAgcmV0dXJuICFvcHRpb25zU2VydmljZSAmJiBvcHRpb25zTXVsdGkgJiYgISFvcHRpb25zICYmIG9wdGlvbnMubGVuZ3RoIDw9IDM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGlzQ29tYm8oZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCkge1xyXG4gICAgY29uc3QgeyBvcHRpb25zU2VydmljZSB9ID0gZmllbGQ7XHJcblxyXG4gICAgcmV0dXJuICEhb3B0aW9uc1NlcnZpY2UgJiYgKGlzVHlwZW9mKG9wdGlvbnNTZXJ2aWNlLCAnc3RyaW5nJykgfHwgdGhpcy5pc0NvbWJvRmlsdGVyKG9wdGlvbnNTZXJ2aWNlKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGlzQ3VycmVuY3lUeXBlKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQsIHR5cGU6IHN0cmluZykge1xyXG4gICAgY29uc3QgeyBtYXNrLCBwYXR0ZXJuIH0gPSBmaWVsZDtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5jb21wYXJlVG8odHlwZSwgUG9EeW5hbWljRmllbGRUeXBlLkN1cnJlbmN5KSAmJiAhbWFzayAmJiAhcGF0dGVybjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNMb29rdXBGaWx0ZXIob2JqZWN0OiBhbnkpOiBvYmplY3QgaXMgUG9Mb29rdXBGaWx0ZXIge1xyXG4gICAgcmV0dXJuIG9iamVjdCAmJiAoPFBvTG9va3VwRmlsdGVyPm9iamVjdCkuZ2V0T2JqZWN0QnlWYWx1ZSAhPT0gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpc0NvbWJvRmlsdGVyKG9iamVjdDogYW55KTogb2JqZWN0IGlzIFBvQ29tYm9GaWx0ZXIge1xyXG4gICAgcmV0dXJuIG9iamVjdCAmJiAoPFBvQ29tYm9GaWx0ZXI+b2JqZWN0KS5nZXRGaWx0ZXJlZERhdGEgIT09IHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNMb29rdXAoZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCkge1xyXG4gICAgY29uc3QgeyBzZWFyY2hTZXJ2aWNlIH0gPSBmaWVsZDtcclxuXHJcbiAgICByZXR1cm4gISFzZWFyY2hTZXJ2aWNlICYmIChpc1R5cGVvZihzZWFyY2hTZXJ2aWNlLCAnc3RyaW5nJykgfHwgdGhpcy5pc0xvb2t1cEZpbHRlcihzZWFyY2hTZXJ2aWNlKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGlzTXVsdGlzZWxlY3QoZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCkge1xyXG4gICAgY29uc3QgeyBvcHRpb25zU2VydmljZSwgb3B0aW9uc011bHRpLCBvcHRpb25zIH0gPSBmaWVsZDtcclxuXHJcbiAgICByZXR1cm4gb3B0aW9uc011bHRpICYmICghIW9wdGlvbnNTZXJ2aWNlIHx8ICghIW9wdGlvbnMgJiYgb3B0aW9ucy5sZW5ndGggPiAzKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGlzTnVtYmVyVHlwZShmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkLCB0eXBlOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHsgbWFzaywgcGF0dGVybiB9ID0gZmllbGQ7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuY29tcGFyZVRvKHR5cGUsIFBvRHluYW1pY0ZpZWxkVHlwZS5OdW1iZXIpICYmICFtYXNrICYmICFwYXR0ZXJuO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpc1Bhc3N3b3JkKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQpIHtcclxuICAgIGNvbnN0IHsgc2VjcmV0IH0gPSBmaWVsZDtcclxuXHJcbiAgICByZXR1cm4gc2VjcmV0O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpc1JhZGlvR3JvdXAoZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCkge1xyXG4gICAgY29uc3QgeyBvcHRpb25zTXVsdGksIG9wdGlvbnMgfSA9IGZpZWxkO1xyXG5cclxuICAgIHJldHVybiAhb3B0aW9uc011bHRpICYmICEhb3B0aW9ucyAmJiBvcHRpb25zLmxlbmd0aCA8PSAzO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpc1NlbGVjdChmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkKSB7XHJcbiAgICBjb25zdCB7IG9wdGlvbnNNdWx0aSwgb3B0aW9ucyB9ID0gZmllbGQ7XHJcblxyXG4gICAgcmV0dXJuICFvcHRpb25zTXVsdGkgJiYgISFvcHRpb25zICYmIG9wdGlvbnMubGVuZ3RoID4gMztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNUZXh0YXJlYShmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkKSB7XHJcbiAgICBjb25zdCB7IHJvd3MgfSA9IGZpZWxkO1xyXG5cclxuICAgIHJldHVybiByb3dzICYmIHJvd3MgPj0gMztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcHJpbnRFcnJvcihlcnJvcjogc3RyaW5nKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICB9XHJcbn1cclxuIl19