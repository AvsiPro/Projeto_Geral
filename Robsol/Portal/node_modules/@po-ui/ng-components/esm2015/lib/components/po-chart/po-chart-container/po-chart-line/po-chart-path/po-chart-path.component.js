import { __decorate } from "tslib";
import { ChangeDetectorRef, Component, Input, ViewChild } from '@angular/core';
import { InputBoolean } from '../../../../../decorators';
import { isIE } from '../../../../../utils/util';
const pathDashoffsetDefaultWidth = 0;
export class PoChartPathComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.isActive = true;
        this.chartLine = false;
    }
    set color(value) {
        this._color = value.includes('po-color') && this.chartLine ? value.replace('po-color', 'po-border-color') : value;
    }
    get color() {
        return this._color;
    }
    set animate(value) {
        this._animate = value;
        if (!this.animate) {
            this.pathWidth = pathDashoffsetDefaultWidth;
        }
    }
    get animate() {
        return this._animate;
    }
    ngAfterViewInit() {
        if (!isIE()) {
            this.pathAnimation();
        }
    }
    pathAnimation() {
        this.pathWidth = this.chartPath.nativeElement.getTotalLength();
        this.changeDetector.detectChanges();
        setTimeout(this.preventsAnimatingAgain.bind(this), 700);
    }
    // Redefine pathWidth para zero após o período da animação para que a linha se expanda normalmente on resize.
    preventsAnimatingAgain() {
        this.pathWidth = pathDashoffsetDefaultWidth;
    }
}
PoChartPathComponent.decorators = [
    { type: Component, args: [{
                selector: '[po-chart-path]',
                template: "<svg:path #chartPath\r\n  class=\"po-chart-path\"\r\n  [class.po-chart-active-path]=\"isActive\"\r\n  [class.po-chart-line-path]=\"chartLine\"\r\n  [class]=\"color?.includes('po-border-color') || color?.includes('po-color') ? color : ''\"\r\n  [attr.fill]=\"chartLine ? 'none' : color\"\r\n  [attr.stroke-dasharray]=\"pathWidth\"\r\n  [attr.stroke-dashoffset]=\"pathWidth\"\r\n  [attr.stroke]=\"chartLine ? color : ''\"\r\n  [attr.d]=\"coordinates\">\r\n</svg:path> "
            },] }
];
PoChartPathComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PoChartPathComponent.propDecorators = {
    isActive: [{ type: Input, args: ['p-is-active',] }],
    chartLine: [{ type: Input, args: ['p-chart-line',] }],
    coordinates: [{ type: Input, args: ['p-coordinates',] }],
    chartPath: [{ type: ViewChild, args: ['chartPath', { static: true },] }],
    color: [{ type: Input, args: ['p-color',] }],
    animate: [{ type: Input, args: ['p-animate',] }]
};
__decorate([
    InputBoolean()
], PoChartPathComponent.prototype, "isActive", void 0);
__decorate([
    InputBoolean()
], PoChartPathComponent.prototype, "chartLine", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtcGF0aC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tY2hhcnQvcG8tY2hhcnQtY29udGFpbmVyL3BvLWNoYXJ0LWxpbmUvcG8tY2hhcnQtcGF0aC9wby1jaGFydC1wYXRoLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFpQixpQkFBaUIsRUFBRSxTQUFTLEVBQWMsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFekQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWpELE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxDQUFDO0FBTXJDLE1BQU0sT0FBTyxvQkFBb0I7SUFrQy9CLFlBQW9CLGNBQWlDO1FBQWpDLG1CQUFjLEdBQWQsY0FBYyxDQUFtQjtRQWpDZixhQUFRLEdBQVksSUFBSSxDQUFDO1FBRXhCLGNBQVMsR0FBWSxLQUFLLENBQUM7SUErQlYsQ0FBQztJQXBCekQsSUFBc0IsS0FBSyxDQUFDLEtBQWE7UUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNwSCxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUF3QixPQUFPLENBQUMsS0FBYztRQUM1QyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUV0QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLDBCQUEwQixDQUFDO1NBQzdDO0lBQ0gsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBSUQsZUFBZTtRQUNiLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNYLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN0QjtJQUNILENBQUM7SUFFTyxhQUFhO1FBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDL0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNwQyxVQUFVLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsNkdBQTZHO0lBQ3JHLHNCQUFzQjtRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLDBCQUEwQixDQUFDO0lBQzlDLENBQUM7OztZQXZERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsOGRBQTRDO2FBQzdDOzs7WUFYdUIsaUJBQWlCOzs7dUJBYXRDLEtBQUssU0FBQyxhQUFhO3dCQUVuQixLQUFLLFNBQUMsY0FBYzswQkFFcEIsS0FBSyxTQUFDLGVBQWU7d0JBRXJCLFNBQVMsU0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO29CQU92QyxLQUFLLFNBQUMsU0FBUztzQkFRZixLQUFLLFNBQUMsV0FBVzs7QUFyQm9CO0lBQWYsWUFBWSxFQUFFO3NEQUEwQjtBQUV4QjtJQUFmLFlBQVksRUFBRTt1REFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBJbnB1dEJvb2xlYW4gfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9kZWNvcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IGlzSUUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlscy91dGlsJztcclxuXHJcbmNvbnN0IHBhdGhEYXNob2Zmc2V0RGVmYXVsdFdpZHRoID0gMDtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnW3BvLWNoYXJ0LXBhdGhdJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcG8tY2hhcnQtcGF0aC5jb21wb25lbnQuc3ZnJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUG9DaGFydFBhdGhDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuICBASW5wdXQoJ3AtaXMtYWN0aXZlJykgQElucHV0Qm9vbGVhbigpIGlzQWN0aXZlOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgQElucHV0KCdwLWNoYXJ0LWxpbmUnKSBASW5wdXRCb29sZWFuKCkgY2hhcnRMaW5lOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIEBJbnB1dCgncC1jb29yZGluYXRlcycpIGNvb3JkaW5hdGVzOiBzdHJpbmc7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2NoYXJ0UGF0aCcsIHsgc3RhdGljOiB0cnVlIH0pIGNoYXJ0UGF0aDogRWxlbWVudFJlZjtcclxuXHJcbiAgcGF0aFdpZHRoOiBudW1iZXI7XHJcblxyXG4gIHByaXZhdGUgX2FuaW1hdGU6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSBfY29sb3I6IHN0cmluZztcclxuXHJcbiAgQElucHV0KCdwLWNvbG9yJykgc2V0IGNvbG9yKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX2NvbG9yID0gdmFsdWUuaW5jbHVkZXMoJ3BvLWNvbG9yJykgJiYgdGhpcy5jaGFydExpbmUgPyB2YWx1ZS5yZXBsYWNlKCdwby1jb2xvcicsICdwby1ib3JkZXItY29sb3InKSA6IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGNvbG9yKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NvbG9yO1xyXG4gIH1cclxuXHJcbiAgQElucHV0KCdwLWFuaW1hdGUnKSBzZXQgYW5pbWF0ZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5fYW5pbWF0ZSA9IHZhbHVlO1xyXG5cclxuICAgIGlmICghdGhpcy5hbmltYXRlKSB7XHJcbiAgICAgIHRoaXMucGF0aFdpZHRoID0gcGF0aERhc2hvZmZzZXREZWZhdWx0V2lkdGg7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXQgYW5pbWF0ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLl9hbmltYXRlO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIGlmICghaXNJRSgpKSB7XHJcbiAgICAgIHRoaXMucGF0aEFuaW1hdGlvbigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBwYXRoQW5pbWF0aW9uKCkge1xyXG4gICAgdGhpcy5wYXRoV2lkdGggPSB0aGlzLmNoYXJ0UGF0aC5uYXRpdmVFbGVtZW50LmdldFRvdGFsTGVuZ3RoKCk7XHJcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yLmRldGVjdENoYW5nZXMoKTtcclxuICAgIHNldFRpbWVvdXQodGhpcy5wcmV2ZW50c0FuaW1hdGluZ0FnYWluLmJpbmQodGhpcyksIDcwMCk7XHJcbiAgfVxyXG5cclxuICAvLyBSZWRlZmluZSBwYXRoV2lkdGggcGFyYSB6ZXJvIGFww7NzIG8gcGVyw61vZG8gZGEgYW5pbWHDp8OjbyBwYXJhIHF1ZSBhIGxpbmhhIHNlIGV4cGFuZGEgbm9ybWFsbWVudGUgb24gcmVzaXplLlxyXG4gIHByaXZhdGUgcHJldmVudHNBbmltYXRpbmdBZ2FpbigpIHtcclxuICAgIHRoaXMucGF0aFdpZHRoID0gcGF0aERhc2hvZmZzZXREZWZhdWx0V2lkdGg7XHJcbiAgfVxyXG59XHJcbiJdfQ==