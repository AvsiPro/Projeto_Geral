import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { PoTreeViewService } from '../services/po-tree-view.service';
export class PoTreeViewItemComponent {
    constructor(treeViewService) {
        this.treeViewService = treeViewService;
    }
    get hasSubItems() {
        return !!(this.item.subItems && this.item.subItems.length);
    }
    onClick(event) {
        event.preventDefault();
        event.stopPropagation();
        this.item.expanded = !this.item.expanded;
        this.treeViewService.emitExpandedEvent(Object.assign({}, this.item));
    }
    onSelect(selectedItem) {
        this.treeViewService.emitSelectedEvent(Object.assign({}, selectedItem));
    }
    trackByFunction(index) {
        return index;
    }
}
PoTreeViewItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-tree-view-item',
                template: "<li class=\"po-tree-view-item\">\r\n  <po-tree-view-item-header\r\n    [p-item]=\"item\"\r\n    [p-selectable]=\"selectable\"\r\n    (p-expanded)=\"onClick($event)\"\r\n    (p-selected)=\"onSelect(item)\"\r\n  >\r\n  </po-tree-view-item-header>\r\n\r\n  <ul *ngIf=\"hasSubItems\" class=\"po-tree-view-item-group\" [@toggleBody]=\"item.expanded ? 'expanded' : 'collapsed'\">\r\n    <po-tree-view-item\r\n      *ngFor=\"let subItem of item.subItems; trackBy: trackByFunction\"\r\n      [p-item]=\"subItem\"\r\n      [p-selectable]=\"selectable\"\r\n    >\r\n    </po-tree-view-item>\r\n  </ul>\r\n</li>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [
                    trigger('toggleBody', [
                        state('collapsed', style({
                            'overflow-y': 'hidden',
                            visibility: 'hidden',
                            opacity: 0,
                            height: '0'
                        })),
                        transition('expanded => collapsed', [
                            style({ height: '*' }),
                            animate(100, style({ opacity: 0 })),
                            animate(200, style({ height: 0 }))
                        ]),
                        transition('collapsed => expanded', [
                            style({ height: '0' }),
                            animate(100, style({ opacity: 1 })),
                            animate(200, style({ height: '*' }))
                        ])
                    ])
                ]
            },] }
];
PoTreeViewItemComponent.ctorParameters = () => [
    { type: PoTreeViewService }
];
PoTreeViewItemComponent.propDecorators = {
    item: [{ type: Input, args: ['p-item',] }],
    selectable: [{ type: Input, args: ['p-selectable',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdHJlZS12aWV3LWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXRyZWUtdmlldy9wby10cmVlLXZpZXctaXRlbS9wby10cmVlLXZpZXctaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUcxRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQThCckUsTUFBTSxPQUFPLHVCQUF1QjtJQVNsQyxZQUFvQixlQUFrQztRQUFsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7SUFBRyxDQUFDO0lBSjFELElBQUksV0FBVztRQUNiLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUlELE9BQU8sQ0FBQyxLQUFpQjtRQUN2QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFekMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsbUJBQU0sSUFBSSxDQUFDLElBQUksRUFBRyxDQUFDO0lBQzNELENBQUM7SUFFRCxRQUFRLENBQUMsWUFBNEI7UUFDbkMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsbUJBQU0sWUFBWSxFQUFHLENBQUM7SUFDOUQsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUFhO1FBQzNCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7O1lBdERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3Qix3bUJBQWlEO2dCQUNqRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsVUFBVSxFQUFFO29CQUNWLE9BQU8sQ0FBQyxZQUFZLEVBQUU7d0JBQ3BCLEtBQUssQ0FDSCxXQUFXLEVBQ1gsS0FBSyxDQUFDOzRCQUNKLFlBQVksRUFBRSxRQUFROzRCQUN0QixVQUFVLEVBQUUsUUFBUTs0QkFDcEIsT0FBTyxFQUFFLENBQUM7NEJBQ1YsTUFBTSxFQUFFLEdBQUc7eUJBQ1osQ0FBQyxDQUNIO3dCQUNELFVBQVUsQ0FBQyx1QkFBdUIsRUFBRTs0QkFDbEMsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDOzRCQUN0QixPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUNuQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO3lCQUNuQyxDQUFDO3dCQUNGLFVBQVUsQ0FBQyx1QkFBdUIsRUFBRTs0QkFDbEMsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDOzRCQUN0QixPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUNuQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO3lCQUNyQyxDQUFDO3FCQUNILENBQUM7aUJBQ0g7YUFDRjs7O1lBN0JRLGlCQUFpQjs7O21CQStCdkIsS0FBSyxTQUFDLFFBQVE7eUJBRWQsS0FBSyxTQUFDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhbmltYXRlLCBzdGF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcclxuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFBvVHJlZVZpZXdJdGVtIH0gZnJvbSAnLi9wby10cmVlLXZpZXctaXRlbS5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb1RyZWVWaWV3U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3BvLXRyZWUtdmlldy5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAncG8tdHJlZS12aWV3LWl0ZW0nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9wby10cmVlLXZpZXctaXRlbS5jb21wb25lbnQuaHRtbCcsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgYW5pbWF0aW9uczogW1xyXG4gICAgdHJpZ2dlcigndG9nZ2xlQm9keScsIFtcclxuICAgICAgc3RhdGUoXHJcbiAgICAgICAgJ2NvbGxhcHNlZCcsXHJcbiAgICAgICAgc3R5bGUoe1xyXG4gICAgICAgICAgJ292ZXJmbG93LXknOiAnaGlkZGVuJyxcclxuICAgICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxyXG4gICAgICAgICAgb3BhY2l0eTogMCxcclxuICAgICAgICAgIGhlaWdodDogJzAnXHJcbiAgICAgICAgfSlcclxuICAgICAgKSxcclxuICAgICAgdHJhbnNpdGlvbignZXhwYW5kZWQgPT4gY29sbGFwc2VkJywgW1xyXG4gICAgICAgIHN0eWxlKHsgaGVpZ2h0OiAnKicgfSksXHJcbiAgICAgICAgYW5pbWF0ZSgxMDAsIHN0eWxlKHsgb3BhY2l0eTogMCB9KSksXHJcbiAgICAgICAgYW5pbWF0ZSgyMDAsIHN0eWxlKHsgaGVpZ2h0OiAwIH0pKVxyXG4gICAgICBdKSxcclxuICAgICAgdHJhbnNpdGlvbignY29sbGFwc2VkID0+IGV4cGFuZGVkJywgW1xyXG4gICAgICAgIHN0eWxlKHsgaGVpZ2h0OiAnMCcgfSksXHJcbiAgICAgICAgYW5pbWF0ZSgxMDAsIHN0eWxlKHsgb3BhY2l0eTogMSB9KSksXHJcbiAgICAgICAgYW5pbWF0ZSgyMDAsIHN0eWxlKHsgaGVpZ2h0OiAnKicgfSkpXHJcbiAgICAgIF0pXHJcbiAgICBdKVxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFBvVHJlZVZpZXdJdGVtQ29tcG9uZW50IHtcclxuICBASW5wdXQoJ3AtaXRlbScpIGl0ZW06IFBvVHJlZVZpZXdJdGVtO1xyXG5cclxuICBASW5wdXQoJ3Atc2VsZWN0YWJsZScpIHNlbGVjdGFibGU6IGJvb2xlYW47XHJcblxyXG4gIGdldCBoYXNTdWJJdGVtcygpIHtcclxuICAgIHJldHVybiAhISh0aGlzLml0ZW0uc3ViSXRlbXMgJiYgdGhpcy5pdGVtLnN1Ykl0ZW1zLmxlbmd0aCk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyZWVWaWV3U2VydmljZTogUG9UcmVlVmlld1NlcnZpY2UpIHt9XHJcblxyXG4gIG9uQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICB0aGlzLml0ZW0uZXhwYW5kZWQgPSAhdGhpcy5pdGVtLmV4cGFuZGVkO1xyXG5cclxuICAgIHRoaXMudHJlZVZpZXdTZXJ2aWNlLmVtaXRFeHBhbmRlZEV2ZW50KHsgLi4udGhpcy5pdGVtIH0pO1xyXG4gIH1cclxuXHJcbiAgb25TZWxlY3Qoc2VsZWN0ZWRJdGVtOiBQb1RyZWVWaWV3SXRlbSkge1xyXG4gICAgdGhpcy50cmVlVmlld1NlcnZpY2UuZW1pdFNlbGVjdGVkRXZlbnQoeyAuLi5zZWxlY3RlZEl0ZW0gfSk7XHJcbiAgfVxyXG5cclxuICB0cmFja0J5RnVuY3Rpb24oaW5kZXg6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIGluZGV4O1xyXG4gIH1cclxufVxyXG4iXX0=