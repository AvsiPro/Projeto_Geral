import { Input, Directive } from '@angular/core';
import { convertToBoolean } from './../../utils/util';
/**
 * @description
 *
 * O componente `po-dropdown` pode ser utilizado como um agrupador de ações e / ou opções.
 *
 * > Caso não haja configuração de rotas em sua aplicação, se faz necessário importar o `RouterModule`
 * no módulo principal para o correto funcionamento deste componente:
 *
 * ```
 * import { RouterModule } from '@angular/router';
 *
 * @NgModule({
 *   imports: [
 *     ...
 *     RouterModule.forRoot([]),
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   exports: [],
 *   providers: [],
 *   bootstrap: [
 *     AppComponent
 *   ]
 * })
 * export class AppModule { }
 * ```
 * > Para maiores dúvidas referente à configuração de rotas, acesse em nosso portal /Guias /Começando
 * [/Configurando as rotas do po-menu](/guides/getting-started).
 */
export class PoDropdownBaseComponent {
    constructor() {
        this.icon = 'po-icon-arrow-down';
        this.open = false;
        this._disabled = false;
    }
    /** Lista de ações que serão exibidas no componente. */
    set actions(value) {
        this._actions = Array.isArray(value) ? value : [];
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o campo.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
}
PoDropdownBaseComponent.decorators = [
    { type: Directive }
];
PoDropdownBaseComponent.propDecorators = {
    label: [{ type: Input, args: ['p-label',] }],
    actions: [{ type: Input, args: ['p-actions',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHJvcGRvd24tYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZHJvcGRvd24vcG8tZHJvcGRvd24tYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJdEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQThCRztBQUdILE1BQU0sT0FBTyx1QkFBdUI7SUFEcEM7UUFLRSxTQUFJLEdBQVcsb0JBQW9CLENBQUM7UUFDcEMsU0FBSSxHQUFZLEtBQUssQ0FBQztRQUdkLGNBQVMsR0FBWSxLQUFLLENBQUM7SUEyQnJDLENBQUM7SUF6QkMsdURBQXVEO0lBQ3ZELElBQXdCLE9BQU8sQ0FBQyxLQUE4QjtRQUM1RCxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3BELENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsSUFBeUIsUUFBUSxDQUFDLEtBQWM7UUFDOUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7OztZQW5DRixTQUFTOzs7b0JBR1AsS0FBSyxTQUFDLFNBQVM7c0JBU2YsS0FBSyxTQUFDLFdBQVc7dUJBaUJqQixLQUFLLFNBQUMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IGNvbnZlcnRUb0Jvb2xlYW4gfSBmcm9tICcuLy4uLy4uL3V0aWxzL3V0aWwnO1xyXG5cclxuaW1wb3J0IHsgUG9Ecm9wZG93bkFjdGlvbiB9IGZyb20gJy4vcG8tZHJvcGRvd24tYWN0aW9uLmludGVyZmFjZSc7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIE8gY29tcG9uZW50ZSBgcG8tZHJvcGRvd25gIHBvZGUgc2VyIHV0aWxpemFkbyBjb21vIHVtIGFncnVwYWRvciBkZSBhw6fDtWVzIGUgLyBvdSBvcMOnw7Vlcy5cclxuICpcclxuICogPiBDYXNvIG7Do28gaGFqYSBjb25maWd1cmHDp8OjbyBkZSByb3RhcyBlbSBzdWEgYXBsaWNhw6fDo28sIHNlIGZheiBuZWNlc3PDoXJpbyBpbXBvcnRhciBvIGBSb3V0ZXJNb2R1bGVgXHJcbiAqIG5vIG3Ds2R1bG8gcHJpbmNpcGFsIHBhcmEgbyBjb3JyZXRvIGZ1bmNpb25hbWVudG8gZGVzdGUgY29tcG9uZW50ZTpcclxuICpcclxuICogYGBgXHJcbiAqIGltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbiAqXHJcbiAqIEBOZ01vZHVsZSh7XHJcbiAqICAgaW1wb3J0czogW1xyXG4gKiAgICAgLi4uXHJcbiAqICAgICBSb3V0ZXJNb2R1bGUuZm9yUm9vdChbXSksXHJcbiAqICAgICBQb01vZHVsZVxyXG4gKiAgIF0sXHJcbiAqICAgZGVjbGFyYXRpb25zOiBbXHJcbiAqICAgICBBcHBDb21wb25lbnRcclxuICogICBdLFxyXG4gKiAgIGV4cG9ydHM6IFtdLFxyXG4gKiAgIHByb3ZpZGVyczogW10sXHJcbiAqICAgYm9vdHN0cmFwOiBbXHJcbiAqICAgICBBcHBDb21wb25lbnRcclxuICogICBdXHJcbiAqIH0pXHJcbiAqIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGUgeyB9XHJcbiAqIGBgYFxyXG4gKiA+IFBhcmEgbWFpb3JlcyBkw7p2aWRhcyByZWZlcmVudGUgw6AgY29uZmlndXJhw6fDo28gZGUgcm90YXMsIGFjZXNzZSBlbSBub3NzbyBwb3J0YWwgL0d1aWFzIC9Db21lw6dhbmRvXHJcbiAqIFsvQ29uZmlndXJhbmRvIGFzIHJvdGFzIGRvIHBvLW1lbnVdKC9ndWlkZXMvZ2V0dGluZy1zdGFydGVkKS5cclxuICovXHJcblxyXG5ARGlyZWN0aXZlKClcclxuZXhwb3J0IGNsYXNzIFBvRHJvcGRvd25CYXNlQ29tcG9uZW50IHtcclxuICAvKiogQWRpY2lvbmEgdW0gcsOzdHVsbyBhbyBgZHJvcGRvd25gLiAqL1xyXG4gIEBJbnB1dCgncC1sYWJlbCcpIGxhYmVsOiBzdHJpbmc7XHJcblxyXG4gIGljb246IHN0cmluZyA9ICdwby1pY29uLWFycm93LWRvd24nO1xyXG4gIG9wZW46IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgcHJpdmF0ZSBfYWN0aW9uczogQXJyYXk8UG9Ecm9wZG93bkFjdGlvbj47XHJcbiAgcHJpdmF0ZSBfZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgLyoqIExpc3RhIGRlIGHDp8O1ZXMgcXVlIHNlcsOjbyBleGliaWRhcyBubyBjb21wb25lbnRlLiAqL1xyXG4gIEBJbnB1dCgncC1hY3Rpb25zJykgc2V0IGFjdGlvbnModmFsdWU6IEFycmF5PFBvRHJvcGRvd25BY3Rpb24+KSB7XHJcbiAgICB0aGlzLl9hY3Rpb25zID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGFjdGlvbnMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fYWN0aW9ucztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBEZXNhYmlsaXRhIG8gY2FtcG8uXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICovXHJcbiAgQElucHV0KCdwLWRpc2FibGVkJykgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLl9kaXNhYmxlZCA9IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xyXG4gIH1cclxufVxyXG4iXX0=