import { Component, Input, TemplateRef, ViewChild } from '@angular/core';
import { PoAccordionService } from '../services/po-accordion.service';
/**
 * @description
 *
 * Componente utilizado para renderizar os itens do `po-accordion`.
 *
 * O componente `po-accordion` já faz o controle de abertura e fechamento dos itens automaticamente,
 * mas caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript, pode ser feita da seguinte forma:
 *
 * ```
 * <po-accordion>
 *   <po-accordion-item p-label="PO Accordion 1" #item1>
 *      Accordion 1
 *   </po-accordion-item>
 *
 *   <po-accordion-item p-label="PO Accordion 2">
 *      Accordion 2
 *   </po-accordion-item>
 * </po-accordion>
 * ```
 *
 * e no typescript pode-se utilizar o `@ViewChild`:
 *
 * ```
 *  @ViewChild(PoAccordionItemComponent, { static: true }) item1: PoAccordionItemComponent;
 *
 *  ngAfterContentInit() {
 *    // ou utilizar o método collapse()
 *    this.item1.expand();
 *  }
 * ```
 */
export class PoAccordionItemComponent {
    constructor(accordionService) {
        this.accordionService = accordionService;
    }
    /**
     * Método para colapsar o `po-accordion-item`.
     */
    collapse() {
        this.expanded = false;
        this.accordionService.sendToParentAccordionItemClicked(this);
    }
    /**
     * Método para expandir o `po-accordion-item`.
     */
    expand() {
        this.expanded = true;
        this.accordionService.sendToParentAccordionItemClicked(this);
    }
}
PoAccordionItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-accordion-item',
                template: "<ng-template>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n"
            },] }
];
PoAccordionItemComponent.ctorParameters = () => [
    { type: PoAccordionService }
];
PoAccordionItemComponent.propDecorators = {
    label: [{ type: Input, args: ['p-label',] }],
    templateRef: [{ type: ViewChild, args: [TemplateRef, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYWNjb3JkaW9uLWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWFjY29yZGlvbi9wby1hY2NvcmRpb24taXRlbS9wby1hY2NvcmRpb24taXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUV0RTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBOEJHO0FBS0gsTUFBTSxPQUFPLHdCQUF3QjtJQVFuQyxZQUFvQixnQkFBb0M7UUFBcEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFvQjtJQUFHLENBQUM7SUFFNUQ7O09BRUc7SUFDSCxRQUFRO1FBQ04sSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFFdEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU07UUFDSixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUVyQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0NBQWdDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7O1lBOUJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3Qiw4RUFBK0M7YUFDaEQ7OztZQXBDUSxrQkFBa0I7OztvQkF1Q3hCLEtBQUssU0FBQyxTQUFTOzBCQUVmLFNBQVMsU0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgUG9BY2NvcmRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvcG8tYWNjb3JkaW9uLnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBDb21wb25lbnRlIHV0aWxpemFkbyBwYXJhIHJlbmRlcml6YXIgb3MgaXRlbnMgZG8gYHBvLWFjY29yZGlvbmAuXHJcbiAqXHJcbiAqIE8gY29tcG9uZW50ZSBgcG8tYWNjb3JkaW9uYCBqw6EgZmF6IG8gY29udHJvbGUgZGUgYWJlcnR1cmEgZSBmZWNoYW1lbnRvIGRvcyBpdGVucyBhdXRvbWF0aWNhbWVudGUsXHJcbiAqIG1hcyBjYXNvIGhvdXZlciBhIG5lY2Vzc2lkYWRlIGRlIGFicmlyIGFsZ3VtIGRvcyBgcG8tYWNjb3JkaW9uLWl0ZW1gIHZpYSBUeXBlc2NyaXB0LCBwb2RlIHNlciBmZWl0YSBkYSBzZWd1aW50ZSBmb3JtYTpcclxuICpcclxuICogYGBgXHJcbiAqIDxwby1hY2NvcmRpb24+XHJcbiAqICAgPHBvLWFjY29yZGlvbi1pdGVtIHAtbGFiZWw9XCJQTyBBY2NvcmRpb24gMVwiICNpdGVtMT5cclxuICogICAgICBBY2NvcmRpb24gMVxyXG4gKiAgIDwvcG8tYWNjb3JkaW9uLWl0ZW0+XHJcbiAqXHJcbiAqICAgPHBvLWFjY29yZGlvbi1pdGVtIHAtbGFiZWw9XCJQTyBBY2NvcmRpb24gMlwiPlxyXG4gKiAgICAgIEFjY29yZGlvbiAyXHJcbiAqICAgPC9wby1hY2NvcmRpb24taXRlbT5cclxuICogPC9wby1hY2NvcmRpb24+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBlIG5vIHR5cGVzY3JpcHQgcG9kZS1zZSB1dGlsaXphciBvIGBAVmlld0NoaWxkYDpcclxuICpcclxuICogYGBgXHJcbiAqICBAVmlld0NoaWxkKFBvQWNjb3JkaW9uSXRlbUNvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSkgaXRlbTE6IFBvQWNjb3JkaW9uSXRlbUNvbXBvbmVudDtcclxuICpcclxuICogIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcclxuICogICAgLy8gb3UgdXRpbGl6YXIgbyBtw6l0b2RvIGNvbGxhcHNlKClcclxuICogICAgdGhpcy5pdGVtMS5leHBhbmQoKTtcclxuICogIH1cclxuICogYGBgXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3BvLWFjY29yZGlvbi1pdGVtJyxcclxuICB0ZW1wbGF0ZVVybDogJ3BvLWFjY29yZGlvbi1pdGVtLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUG9BY2NvcmRpb25JdGVtQ29tcG9uZW50IHtcclxuICAvKiogVMOtdHVsbyBkbyBpdGVtLiAqL1xyXG4gIEBJbnB1dCgncC1sYWJlbCcpIGxhYmVsOiBzdHJpbmc7XHJcblxyXG4gIEBWaWV3Q2hpbGQoVGVtcGxhdGVSZWYsIHsgc3RhdGljOiB0cnVlIH0pIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG5cclxuICBleHBhbmRlZDogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhY2NvcmRpb25TZXJ2aWNlOiBQb0FjY29yZGlvblNlcnZpY2UpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIE3DqXRvZG8gcGFyYSBjb2xhcHNhciBvIGBwby1hY2NvcmRpb24taXRlbWAuXHJcbiAgICovXHJcbiAgY29sbGFwc2UoKSB7XHJcbiAgICB0aGlzLmV4cGFuZGVkID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5hY2NvcmRpb25TZXJ2aWNlLnNlbmRUb1BhcmVudEFjY29yZGlvbkl0ZW1DbGlja2VkKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTcOpdG9kbyBwYXJhIGV4cGFuZGlyIG8gYHBvLWFjY29yZGlvbi1pdGVtYC5cclxuICAgKi9cclxuICBleHBhbmQoKSB7XHJcbiAgICB0aGlzLmV4cGFuZGVkID0gdHJ1ZTtcclxuXHJcbiAgICB0aGlzLmFjY29yZGlvblNlcnZpY2Uuc2VuZFRvUGFyZW50QWNjb3JkaW9uSXRlbUNsaWNrZWQodGhpcyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==