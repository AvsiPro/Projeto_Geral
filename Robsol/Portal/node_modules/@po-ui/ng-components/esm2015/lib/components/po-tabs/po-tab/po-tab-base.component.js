import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean, uuid } from '../../../utils/util';
/**
 * @description
 *
 * O componente `po-tab` renderiza uma aba na qual envolve um conteúdo HTML.
 *
 * Com este componente é possível atribuir um rótulo para auxiliar na identificação do conteúdo, ativar para que o mesmo seja exibido,
 * desabilitar para impossibilitar o acesso, bem como ocultar para indisponibilizar a aba.
 *
 * > Para controlar a navegação entre diversas abas, utilizar o componente [`po-tabs`](/documentation/po-tabs).
 */
export class PoTabBaseComponent {
    constructor() {
        /** Método disparado ao clicar na aba. */
        this.click = new EventEmitter();
        // ID da aba
        this.id = uuid();
        this._active = false;
        this._disabled = false;
        this._hide = false;
    }
    /**
     * @optional
     *
     * @description
     *
     * Ativa a aba exibindo seu conteúdo.
     *
     * > Sugere-se utilizar na aba de conteúdo inicial.
     *
     * @default `false`
     */
    set active(active) {
        this._active = convertToBoolean(active);
        this.setDisplayOnActive();
    }
    get active() {
        return this._active;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita a aba.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta a aba.
     *
     * @default `false`
     */
    set hide(hide) {
        this._hide = convertToBoolean(hide);
    }
    get hide() {
        return this._hide;
    }
}
PoTabBaseComponent.decorators = [
    { type: Directive }
];
PoTabBaseComponent.propDecorators = {
    label: [{ type: Input, args: ['p-label',] }],
    click: [{ type: Output, args: ['p-click',] }],
    active: [{ type: Input, args: ['p-active',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    hide: [{ type: Input, args: ['p-hide',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFiLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXRhYnMvcG8tdGFiL3BvLXRhYi1iYXNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUU3RDs7Ozs7Ozs7O0dBU0c7QUFFSCxNQUFNLE9BQWdCLGtCQUFrQjtJQUR4QztRQUtFLHlDQUF5QztRQUN0QixVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUU5QyxZQUFZO1FBQ1osT0FBRSxHQUFZLElBQUksRUFBRSxDQUFDO1FBRWIsWUFBTyxHQUFhLEtBQUssQ0FBQztRQUMxQixjQUFTLEdBQWEsS0FBSyxDQUFDO1FBQzVCLFVBQUssR0FBYSxLQUFLLENBQUM7SUF5RGxDLENBQUM7SUF2REM7Ozs7Ozs7Ozs7T0FVRztJQUNILElBQXVCLE1BQU0sQ0FBQyxNQUFlO1FBQzNDLElBQUksQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCxJQUF5QixRQUFRLENBQUMsUUFBaUI7UUFDakQsSUFBSSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNILElBQXFCLElBQUksQ0FBQyxJQUFhO1FBQ3JDLElBQUksQ0FBQyxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDOzs7WUFuRUYsU0FBUzs7O29CQUdQLEtBQUssU0FBQyxTQUFTO29CQUdmLE1BQU0sU0FBQyxTQUFTO3FCQW9CaEIsS0FBSyxTQUFDLFVBQVU7dUJBa0JoQixLQUFLLFNBQUMsWUFBWTttQkFpQmxCLEtBQUssU0FBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IGNvbnZlcnRUb0Jvb2xlYW4sIHV1aWQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogTyBjb21wb25lbnRlIGBwby10YWJgIHJlbmRlcml6YSB1bWEgYWJhIG5hIHF1YWwgZW52b2x2ZSB1bSBjb250ZcO6ZG8gSFRNTC5cclxuICpcclxuICogQ29tIGVzdGUgY29tcG9uZW50ZSDDqSBwb3Nzw612ZWwgYXRyaWJ1aXIgdW0gcsOzdHVsbyBwYXJhIGF1eGlsaWFyIG5hIGlkZW50aWZpY2HDp8OjbyBkbyBjb250ZcO6ZG8sIGF0aXZhciBwYXJhIHF1ZSBvIG1lc21vIHNlamEgZXhpYmlkbyxcclxuICogZGVzYWJpbGl0YXIgcGFyYSBpbXBvc3NpYmlsaXRhciBvIGFjZXNzbywgYmVtIGNvbW8gb2N1bHRhciBwYXJhIGluZGlzcG9uaWJpbGl6YXIgYSBhYmEuXHJcbiAqXHJcbiAqID4gUGFyYSBjb250cm9sYXIgYSBuYXZlZ2HDp8OjbyBlbnRyZSBkaXZlcnNhcyBhYmFzLCB1dGlsaXphciBvIGNvbXBvbmVudGUgW2Bwby10YWJzYF0oL2RvY3VtZW50YXRpb24vcG8tdGFicykuXHJcbiAqL1xyXG5ARGlyZWN0aXZlKClcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvVGFiQmFzZUNvbXBvbmVudCB7XHJcbiAgLyoqIFLDs3R1bG8gZGEgYWJhLiAqL1xyXG4gIEBJbnB1dCgncC1sYWJlbCcpIGxhYmVsOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBNw6l0b2RvIGRpc3BhcmFkbyBhbyBjbGljYXIgbmEgYWJhLiAqL1xyXG4gIEBPdXRwdXQoJ3AtY2xpY2snKSBjbGljayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgLy8gSUQgZGEgYWJhXHJcbiAgaWQ/OiBzdHJpbmcgPSB1dWlkKCk7XHJcblxyXG4gIHByaXZhdGUgX2FjdGl2ZT86IGJvb2xlYW4gPSBmYWxzZTtcclxuICBwcml2YXRlIF9kaXNhYmxlZD86IGJvb2xlYW4gPSBmYWxzZTtcclxuICBwcml2YXRlIF9oaWRlPzogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAvKipcclxuICAgKiBAb3B0aW9uYWxcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogQXRpdmEgYSBhYmEgZXhpYmluZG8gc2V1IGNvbnRlw7pkby5cclxuICAgKlxyXG4gICAqID4gU3VnZXJlLXNlIHV0aWxpemFyIG5hIGFiYSBkZSBjb250ZcO6ZG8gaW5pY2lhbC5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcclxuICAgKi9cclxuICBASW5wdXQoJ3AtYWN0aXZlJykgc2V0IGFjdGl2ZShhY3RpdmU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuX2FjdGl2ZSA9IGNvbnZlcnRUb0Jvb2xlYW4oYWN0aXZlKTtcclxuICAgIHRoaXMuc2V0RGlzcGxheU9uQWN0aXZlKCk7XHJcbiAgfVxyXG5cclxuICBnZXQgYWN0aXZlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBEZXNhYmlsaXRhIGEgYWJhLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1kaXNhYmxlZCcpIHNldCBkaXNhYmxlZChkaXNhYmxlZDogYm9vbGVhbikge1xyXG4gICAgdGhpcy5fZGlzYWJsZWQgPSBjb252ZXJ0VG9Cb29sZWFuKGRpc2FibGVkKTtcclxuICB9XHJcblxyXG4gIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBPY3VsdGEgYSBhYmEuXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICovXHJcbiAgQElucHV0KCdwLWhpZGUnKSBzZXQgaGlkZShoaWRlOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLl9oaWRlID0gY29udmVydFRvQm9vbGVhbihoaWRlKTtcclxuICB9XHJcblxyXG4gIGdldCBoaWRlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2hpZGU7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc2V0RGlzcGxheU9uQWN0aXZlKCk7XHJcbn1cclxuIl19