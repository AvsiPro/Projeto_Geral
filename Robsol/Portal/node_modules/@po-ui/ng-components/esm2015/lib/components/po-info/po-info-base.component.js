import { Input, Directive } from '@angular/core';
import { PoInfoOrientation } from './po-info-orietation.enum';
const poInfoOrientationDefault = PoInfoOrientation.Vertical;
export class PoInfoBaseComponent {
    constructor() {
        this.poInfoOrientation = PoInfoOrientation;
        this._orientation = poInfoOrientationDefault;
    }
    /**
     * @optional
     *
     * @description
     *
     * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `p-label` quando o componente for
     * utilizado na orientação horizontal.
     *
     * Valores válidos:
     *  - `[1 .. 11]`
     *
     * > A propriedade `p-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
     */
    set labelSize(value) {
        if (isNaN(parseInt(value, 10))) {
            this._labelSize = undefined;
        }
        else {
            value = parseInt(value, 10);
            this._labelSize = value < 1 || value > 11 ? undefined : value;
        }
    }
    get labelSize() {
        return this._labelSize;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o layout de exibição.
     *
     * > Quando definido na horizontal, pode-se utilizar a propriedade `p-label-size` para um maior controle das informações exibidas.
     *
     * @default `vertical`
     */
    set orientation(value) {
        this._orientation = Object.values(PoInfoOrientation).includes(value) ? value : poInfoOrientationDefault;
    }
    get orientation() {
        return this._orientation;
    }
}
PoInfoBaseComponent.decorators = [
    { type: Directive }
];
PoInfoBaseComponent.propDecorators = {
    label: [{ type: Input, args: ['p-label',] }],
    url: [{ type: Input, args: ['p-url',] }],
    value: [{ type: Input, args: ['p-value',] }],
    labelSize: [{ type: Input, args: ['p-label-size',] }],
    orientation: [{ type: Input, args: ['p-orientation',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8taW5mby1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1pbmZvL3BvLWluZm8tYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFOUQsTUFBTSx3QkFBd0IsR0FBRyxpQkFBaUIsQ0FBQyxRQUFRLENBQUM7QUFHNUQsTUFBTSxPQUFPLG1CQUFtQjtJQURoQztRQWlCa0Isc0JBQWlCLEdBQUcsaUJBQWlCLENBQUM7UUFHOUMsaUJBQVksR0FBc0Isd0JBQXdCLENBQUM7SUE4Q3JFLENBQUM7SUE1Q0M7Ozs7Ozs7Ozs7OztPQVlHO0lBQ0gsSUFBMkIsU0FBUyxDQUFDLEtBQWE7UUFDaEQsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFNLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFO1lBQ25DLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1NBQzdCO2FBQU07WUFDTCxLQUFLLEdBQUcsUUFBUSxDQUFNLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztZQUVqQyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7U0FDL0Q7SUFDSCxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHO0lBQ0gsSUFBNEIsV0FBVyxDQUFDLEtBQXdCO1FBQzlELElBQUksQ0FBQyxZQUFZLEdBQVMsTUFBTyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQztJQUNqSCxDQUFDO0lBQ0QsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7OztZQWpFRixTQUFTOzs7b0JBR1AsS0FBSyxTQUFDLFNBQVM7a0JBU2YsS0FBSyxTQUFDLE9BQU87b0JBR2IsS0FBSyxTQUFDLFNBQVM7d0JBb0JmLEtBQUssU0FBQyxjQUFjOzBCQXlCcEIsS0FBSyxTQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBQb0luZm9PcmllbnRhdGlvbiB9IGZyb20gJy4vcG8taW5mby1vcmlldGF0aW9uLmVudW0nO1xyXG5cclxuY29uc3QgcG9JbmZvT3JpZW50YXRpb25EZWZhdWx0ID0gUG9JbmZvT3JpZW50YXRpb24uVmVydGljYWw7XHJcblxyXG5ARGlyZWN0aXZlKClcclxuZXhwb3J0IGNsYXNzIFBvSW5mb0Jhc2VDb21wb25lbnQge1xyXG4gIC8qKiBWYWxvciBkbyByw7N0dWxvIGEgc2VyIGV4aWJpZG8uICovXHJcbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQW8gaW5mb3JtYXIgdW1hIFVSTCwgbyBjb250ZcO6ZG8gc2Vyw6EgZXhpYmlkbyBuYSBmb3JtYSBkZSB1bSAqbGluayogZSBhbyBzZXIgY2xpY2FkbyBzZXLDoSByZWRpcmVjaW9uYWRvIHBhcmEgYSBVUkwgaW5mb3JtYWRhLlxyXG4gICAqXHJcbiAgICogPiBDYXNvIGluZm9ybWFyIGBodHRwOi8vYCBzZXLDoSBhYmVydG8gdW1hIG5vdmEgYWJhLlxyXG4gICAqIENhc28gaW5mb3JtYXIgdW0gY2FtaW5obyByZWxhdGl2bywgZXhlbXBsbzogYC9jdXN0b21lcnNgLCBzZXLDoSBhYmVydG8gbmEgYWJhIGF0dWFsLlxyXG4gICAqXHJcbiAgICovXHJcbiAgQElucHV0KCdwLXVybCcpIHVybD86IHN0cmluZztcclxuXHJcbiAgLyoqIFZhbG9yIGRvIGNvbnRlw7pkbyBhIHNlciBleGliaWRvLiAqL1xyXG4gIEBJbnB1dCgncC12YWx1ZScpIHZhbHVlPzogc3RyaW5nO1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgcG9JbmZvT3JpZW50YXRpb24gPSBQb0luZm9PcmllbnRhdGlvbjtcclxuXHJcbiAgcHJpdmF0ZSBfbGFiZWxTaXplOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBfb3JpZW50YXRpb246IFBvSW5mb09yaWVudGF0aW9uID0gcG9JbmZvT3JpZW50YXRpb25EZWZhdWx0O1xyXG5cclxuICAvKipcclxuICAgKiBAb3B0aW9uYWxcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogUXVhbnRpZGFkZSBkZSBbY29sdW5hc10oL2d1aWRlcy9ncmlkLXN5c3RlbSkgdXNhZGFzIHBhcmEgYSBleGliacOnw6NvIGRhIGBwLWxhYmVsYCBxdWFuZG8gbyBjb21wb25lbnRlIGZvclxyXG4gICAqIHV0aWxpemFkbyBuYSBvcmllbnRhw6fDo28gaG9yaXpvbnRhbC5cclxuICAgKlxyXG4gICAqIFZhbG9yZXMgdsOhbGlkb3M6XHJcbiAgICogIC0gYFsxIC4uIDExXWBcclxuICAgKlxyXG4gICAqID4gQSBwcm9wcmllZGFkZSBgcC12YWx1ZWAgcmVjZWJlIG8gbsO6bWVybyBkZSBjb2x1bmFzIHJlc3RhbnRlcywgcG9yIGV4ZW1wbG8sIHNlIGRlZmluaWRvIDMgY29sdW5hcyBhIG1lc21hIGFzc3VtZSA5IGNvbHVuYXMuXHJcbiAgICovXHJcbiAgQElucHV0KCdwLWxhYmVsLXNpemUnKSBzZXQgbGFiZWxTaXplKHZhbHVlOiBudW1iZXIpIHtcclxuICAgIGlmIChpc05hTihwYXJzZUludCg8YW55PnZhbHVlLCAxMCkpKSB7XHJcbiAgICAgIHRoaXMuX2xhYmVsU2l6ZSA9IHVuZGVmaW5lZDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhbHVlID0gcGFyc2VJbnQoPGFueT52YWx1ZSwgMTApO1xyXG5cclxuICAgICAgdGhpcy5fbGFiZWxTaXplID0gdmFsdWUgPCAxIHx8IHZhbHVlID4gMTEgPyB1bmRlZmluZWQgOiB2YWx1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBsYWJlbFNpemUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9sYWJlbFNpemU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3B0aW9uYWxcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogRGVmaW5lIG8gbGF5b3V0IGRlIGV4aWJpw6fDo28uXHJcbiAgICpcclxuICAgKiA+IFF1YW5kbyBkZWZpbmlkbyBuYSBob3Jpem9udGFsLCBwb2RlLXNlIHV0aWxpemFyIGEgcHJvcHJpZWRhZGUgYHAtbGFiZWwtc2l6ZWAgcGFyYSB1bSBtYWlvciBjb250cm9sZSBkYXMgaW5mb3JtYcOnw7VlcyBleGliaWRhcy5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IGB2ZXJ0aWNhbGBcclxuICAgKi9cclxuICBASW5wdXQoJ3Atb3JpZW50YXRpb24nKSBzZXQgb3JpZW50YXRpb24odmFsdWU6IFBvSW5mb09yaWVudGF0aW9uKSB7XHJcbiAgICB0aGlzLl9vcmllbnRhdGlvbiA9ICg8YW55Pk9iamVjdCkudmFsdWVzKFBvSW5mb09yaWVudGF0aW9uKS5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IHBvSW5mb09yaWVudGF0aW9uRGVmYXVsdDtcclxuICB9XHJcbiAgZ2V0IG9yaWVudGF0aW9uKCk6IFBvSW5mb09yaWVudGF0aW9uIHtcclxuICAgIHJldHVybiB0aGlzLl9vcmllbnRhdGlvbjtcclxuICB9XHJcbn1cclxuIl19