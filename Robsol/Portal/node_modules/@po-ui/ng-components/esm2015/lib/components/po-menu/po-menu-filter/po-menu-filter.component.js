import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
export const poMenuFilterLiteralsDefault = {
    en: { search: 'Search' },
    es: { search: 'Buscar' },
    pt: { search: 'Pesquisar' },
    ru: { search: 'Поиск' }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que apresenta o campo de pesquisa no po-menu.
 */
export class PoMenuFilterComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.filter = new EventEmitter();
        this.literals = Object.assign(Object.assign({}, poMenuFilterLiteralsDefault[this.languageService.getLanguageDefault()]), poMenuFilterLiteralsDefault[this.languageService.getShortLanguage()]);
    }
    filterItems(search) {
        this.filter.emit(search);
    }
}
PoMenuFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-menu-filter',
                template: "<div class=\"po-menu-filter-container\">\r\n  <input\r\n    #inputFilter\r\n    type=\"text\"\r\n    class=\"po-menu-filter\"\r\n    [placeholder]=\"literals.search\"\r\n    (keyup)=\"filterItems(inputFilter.value)\"\r\n  />\r\n\r\n  <div class=\"po-menu-filter-search-icon-container\">\r\n    <span *ngIf=\"!loading\" class=\"po-icon po-menu-filter-icon po-icon-search\"></span>\r\n    <po-loading-icon *ngIf=\"loading\"></po-loading-icon>\r\n  </div>\r\n  <div class=\"po-menu-filter-close-icon-container\">\r\n    <po-clean [p-element-ref]=\"inputFilterElement\" (p-change-event)=\"filterItems(inputFilter.value)\"></po-clean>\r\n  </div>\r\n</div>\r\n"
            },] }
];
PoMenuFilterComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoMenuFilterComponent.propDecorators = {
    loading: [{ type: Input, args: ['p-loading',] }],
    inputFilterElement: [{ type: ViewChild, args: ['inputFilter', { read: ElementRef, static: true },] }],
    filter: [{ type: Output, args: ['p-filter',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbWVudS1maWx0ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLW1lbnUvcG8tbWVudS1maWx0ZXIvcG8tbWVudS1maWx0ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUd0RixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRztJQUN6QyxFQUFFLEVBQXdCLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRTtJQUM5QyxFQUFFLEVBQXdCLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRTtJQUM5QyxFQUFFLEVBQXdCLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRTtJQUNqRCxFQUFFLEVBQXdCLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRTtDQUM5QyxDQUFDO0FBRUY7Ozs7OztHQU1HO0FBS0gsTUFBTSxPQUFPLHFCQUFxQjtJQWFoQyxZQUFtQixlQUFrQztRQUFsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFQakMsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFekMsYUFBUSxtQ0FDViwyQkFBMkIsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLGtCQUFrQixFQUFFLENBQUMsR0FDdEUsMkJBQTJCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEVBQ3ZFO0lBRXNELENBQUM7SUFDekQsV0FBVyxDQUFDLE1BQWM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7O1lBcEJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQiwycEJBQThDO2FBQy9DOzs7WUFwQlEsaUJBQWlCOzs7c0JBc0J2QixLQUFLLFNBQUMsV0FBVztpQ0FHakIsU0FBUyxTQUFDLGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtxQkFFM0QsTUFBTSxTQUFDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IFBvTWVudUZpbHRlckxpdGVyYWxzIH0gZnJvbSAnLi9wby1tZW51LWZpbHRlci1saXRlcmFscy5pbnRlcmZhY2UnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHBvTWVudUZpbHRlckxpdGVyYWxzRGVmYXVsdCA9IHtcclxuICBlbjogPFBvTWVudUZpbHRlckxpdGVyYWxzPnsgc2VhcmNoOiAnU2VhcmNoJyB9LFxyXG4gIGVzOiA8UG9NZW51RmlsdGVyTGl0ZXJhbHM+eyBzZWFyY2g6ICdCdXNjYXInIH0sXHJcbiAgcHQ6IDxQb01lbnVGaWx0ZXJMaXRlcmFscz57IHNlYXJjaDogJ1Blc3F1aXNhcicgfSxcclxuICBydTogPFBvTWVudUZpbHRlckxpdGVyYWxzPnsgc2VhcmNoOiAn0J/QvtC40YHQuicgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBkb2NzUHJpdmF0ZVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogQ29tcG9uZW50ZSBxdWUgYXByZXNlbnRhIG8gY2FtcG8gZGUgcGVzcXVpc2Egbm8gcG8tbWVudS5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAncG8tbWVudS1maWx0ZXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1tZW51LWZpbHRlci5jb21wb25lbnQuaHRtbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFBvTWVudUZpbHRlckNvbXBvbmVudCB7XHJcbiAgQElucHV0KCdwLWxvYWRpbmcnKSBsb2FkaW5nOiBib29sZWFuO1xyXG5cclxuICAvLyB1dGlsaXphZG8gcGFyYSByZXBhc3NhciBhbyBwby1jbGVhblxyXG4gIEBWaWV3Q2hpbGQoJ2lucHV0RmlsdGVyJywgeyByZWFkOiBFbGVtZW50UmVmLCBzdGF0aWM6IHRydWUgfSkgaW5wdXRGaWx0ZXJFbGVtZW50OiBFbGVtZW50UmVmO1xyXG5cclxuICBAT3V0cHV0KCdwLWZpbHRlcicpIGZpbHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgcHVibGljIGxpdGVyYWxzID0ge1xyXG4gICAgLi4ucG9NZW51RmlsdGVyTGl0ZXJhbHNEZWZhdWx0W3RoaXMubGFuZ3VhZ2VTZXJ2aWNlLmdldExhbmd1YWdlRGVmYXVsdCgpXSxcclxuICAgIC4uLnBvTWVudUZpbHRlckxpdGVyYWxzRGVmYXVsdFt0aGlzLmxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCldXHJcbiAgfTtcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpIHt9XHJcbiAgZmlsdGVySXRlbXMoc2VhcmNoOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuZmlsdGVyLmVtaXQoc2VhcmNoKTtcclxuICB9XHJcbn1cclxuIl19