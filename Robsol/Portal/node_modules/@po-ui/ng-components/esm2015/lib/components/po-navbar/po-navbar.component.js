import { ChangeDetectorRef, Component, ElementRef, Renderer2, ViewChild } from '@angular/core';
import { animate, AnimationBuilder, keyframes, style } from '@angular/animations';
import { delay } from 'rxjs/operators';
import { uuid } from '../../utils/util';
import { PoLanguageService } from '../../services/po-language/po-language.service';
import { PoMenuGlobalService } from '../po-menu/services/po-menu-global.service';
import { PoMenuComponent } from '../po-menu/po-menu.component';
import { PoNavbarBaseComponent } from './po-navbar-base.component';
import { PoNavbarItemsComponent } from './po-navbar-items/po-navbar-items.component';
const poNavbarNavigationWidth = 88;
const poNavbarMenuMedia = 768;
const poNavbarMatchMedia = `(max-width: ${poNavbarMenuMedia}px)`;
const poNavbarTiming = '250ms ease';
/**
 * @docsExtends PoNavbarBaseComponent
 */
export class PoNavbarComponent extends PoNavbarBaseComponent {
    constructor(poLanguageService, renderer, builder, changeDetector, menuGlobalService) {
        super(poLanguageService);
        this.renderer = renderer;
        this.builder = builder;
        this.changeDetector = changeDetector;
        this.menuGlobalService = menuGlobalService;
        this.showItemsNavigation = false;
        this.isNavbarUpdateMenu = false;
        this.id = uuid();
        this.offset = 0;
        this.previousMenusItems = [];
        this.onMediaQueryChange = changed => {
            this.changeNavbarMenuItems(changed.matches, this.items, this.literals.navbarLinks);
        };
        this.windowResizeListener = this.renderer.listen(window, 'resize', this.displayItemsNavigation.bind(this));
    }
    get navbarItemNavigationDisableLeft() {
        return this.offset === 0;
    }
    get navbarItemNavigationDisableRight() {
        return this.disableRight && this.offset !== 0;
    }
    set menuComponent(menu) {
        this._menuComponent = menu;
        this.previousMenuComponentId = (menu === null || menu === void 0 ? void 0 : menu.id) || this.previousMenuComponentId;
    }
    get isCollapsedMedia() {
        return window.innerWidth < poNavbarMenuMedia;
    }
    ngOnInit() {
        // necessário para quando o menu da aplicação carregar os itens lazy e navbar estiver colapsado,
        // quando isso acontece, o navbar inclui 1 item de menu "Navbar links", portanto é removido quando
        // os novos itens de menu é carregado, a partir disso este tratamento é necessario para incluir
        // o navbar links apos a adição dos itens de menu da aplicação.
        this.menusSubscription = this.menuGlobalService.receiveMenus$.subscribe(newMenus => {
            var _a;
            const previousMenusiIsNavbarLinks = ((_a = this.previousMenusItems) === null || _a === void 0 ? void 0 : _a.length) === 1 && this.previousMenusItems[0].id === this.id;
            if (this.applicationMenu && this.isCollapsedMedia && this.isNavbarUpdateMenu && previousMenusiIsNavbarLinks) {
                this.isNavbarUpdateMenu = false;
                this.applicationMenu.menus = [
                    { label: this.literals.navbarLinks, subItems: this.items, id: this.id },
                    ...newMenus
                ];
            }
            this.isNavbarUpdateMenu = false;
            this.previousMenusItems = newMenus;
        });
        this.removedMenuSubscription = this.menuGlobalService.receiveRemovedApplicationMenu$.subscribe(removedMenuId => {
            // verifica se o menu removido foi o presente no navbar, caso sim, ele mantem o applictionMenu.
            // é preciso para tratar a sequencia do ngDestroy, quando o menu do navbar era removido do DOM
            // disparava esse evento, sendo necessario tratar, para não tornar indefinido o applicationMenu
            this.applicationMenu =
                this.applicationMenu && this.previousMenuComponentId === removedMenuId ? this.applicationMenu : undefined;
            this.changeDetector.detectChanges();
            if (!this.applicationMenu && this.mediaQuery) {
                this.mediaQuery.removeListener(this.onMediaQueryChange);
            }
        });
        this.applicationMenuSubscription = this.menuGlobalService.receiveApplicationMenu$
            .pipe(delay(100))
            .subscribe(newMenu => {
            this.applicationMenu = this.previousMenuComponentId === newMenu.id ? undefined : newMenu;
            this.changeDetector.detectChanges();
            if (this.applicationMenu) {
                this.initNavbarMenu();
            }
        });
    }
    ngAfterViewInit() {
        this.displayItemsNavigation();
    }
    ngOnDestroy() {
        var _a, _b, _c;
        if (this.mediaQuery) {
            this.mediaQuery.removeListener(this.onMediaQueryChange);
        }
        (_a = this.removedMenuSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        (_b = this.applicationMenuSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();
        (_c = this.menusSubscription) === null || _c === void 0 ? void 0 : _c.unsubscribe();
    }
    navigateItems(orientation) {
        orientation === 'left' ? this.navigateLeft() : this.navigateRight();
        this.animate(this.offset);
    }
    validateMenuLogo() {
        if (this.applicationMenu.logo && this.logo) {
            this.applicationMenu.logo = undefined;
            this.changeDetector.detectChanges();
        }
    }
    allNavbarItemsWidth() {
        return this.navbarItems.allNavbarItems.reduce((previous, current) => previous + current.nativeElement.offsetWidth, 0);
    }
    animate(offset) {
        const animation = this.buildTransitionAnimation(offset);
        this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);
        this.player.play();
    }
    buildTransitionAnimation(offset) {
        return this.builder.build([animate(poNavbarTiming, keyframes([style({ transform: `translateX(${-offset}px)` })]))]);
    }
    changeNavbarMenuItems(isCollapsedMedia, navbarItems, label) {
        if (isCollapsedMedia) {
            this.applicationMenu.menus = [{ label, subItems: navbarItems, id: this.id }, ...this.applicationMenu.menus];
        }
        else {
            this.applicationMenu.menus = this.applicationMenu.menus.filter(m => m.id !== this.id);
        }
        this.isNavbarUpdateMenu = true;
        this.changeDetector.detectChanges();
    }
    calculateLeftNavigation() {
        let calculatedOffset;
        this.navbarItems.allNavbarItems.some(navbarItem => {
            const navbarItemOffset = navbarItem.nativeElement.offsetLeft;
            const navbarItemWidth = navbarItem.nativeElement.offsetWidth;
            if (navbarItemOffset >= this.offset) {
                calculatedOffset = navbarItemOffset - (this.navbarItemsWidth() - navbarItemWidth);
                return true;
            }
        });
        return calculatedOffset;
    }
    calculateRightNavigation(itemBreakPoint) {
        let calculatedOffset;
        this.navbarItems.allNavbarItems.some(navbarItem => {
            const offsetLeft = navbarItem.nativeElement.offsetLeft;
            const finalPosition = navbarItem.nativeElement.offsetWidth + offsetLeft;
            if (itemBreakPoint < finalPosition) {
                calculatedOffset = offsetLeft;
                return true;
            }
        });
        return calculatedOffset;
    }
    displayItemsNavigation() {
        this.showItemsNavigation = this.navbarItemsWidth() < this.allNavbarItemsWidth() + poNavbarNavigationWidth;
        this.changeDetector.detectChanges();
        if (this.offset !== 0) {
            this.setOffsetToZero();
            this.animate(this.offset);
        }
    }
    initNavbarMenu() {
        this.mediaQuery = window.matchMedia(poNavbarMatchMedia);
        if (this.isCollapsedMedia) {
            this.changeNavbarMenuItems(true, this.items, this.literals.navbarLinks);
        }
        this.validateMenuLogo();
        this.mediaQuery.addListener(this.onMediaQueryChange);
    }
    navbarItemsWidth() {
        return this.navbarItemsElement.nativeElement.offsetWidth;
    }
    navigateLeft() {
        this.disableRight = false;
        this.offset = this.calculateLeftNavigation();
        if (this.offset < 0) {
            this.setOffsetToZero();
        }
    }
    navigateRight() {
        const maxAllowedOffset = this.allNavbarItemsWidth() - this.navbarItemsWidth();
        const itemBreakPoint = this.offset + this.navbarItemsWidth();
        this.offset = this.calculateRightNavigation(itemBreakPoint);
        this.validateMaxOffset(maxAllowedOffset);
    }
    setOffsetToZero() {
        this.offset = 0;
    }
    validateMaxOffset(maxAllowedOffset) {
        if (this.offset >= maxAllowedOffset) {
            this.offset = maxAllowedOffset;
            this.disableRight = true;
        }
    }
}
PoNavbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-navbar',
                template: "<header class=\"po-navbar\" [ngClass]=\"{ 'po-navbar-shadow': shadow }\">\r\n  <po-navbar-logo\r\n    class=\"po-navbar-logo\"\r\n    [ngClass]=\"{ 'po-navbar-logo-menu': !!applicationMenu, 'po-navbar-no-logo': !logo }\"\r\n    [p-logo]=\"logo\"\r\n  >\r\n  </po-navbar-logo>\r\n\r\n  <po-navbar-items class=\"po-navbar-items\" [p-items]=\"items\"> </po-navbar-items>\r\n\r\n  <po-navbar-item-navigation\r\n    *ngIf=\"showItemsNavigation\"\r\n    class=\"po-navbar-item-navigation\"\r\n    [p-disable-left]=\"navbarItemNavigationDisableLeft\"\r\n    [p-disable-right]=\"navbarItemNavigationDisableRight\"\r\n    (p-click)=\"navigateItems($event)\"\r\n  >\r\n  </po-navbar-item-navigation>\r\n\r\n  <po-navbar-actions class=\"po-navbar-actions\" [p-icon-actions]=\"iconActions\"> </po-navbar-actions>\r\n</header>\r\n\r\n<po-menu *ngIf=\"!applicationMenu\" [p-menus]=\"items\"> </po-menu>\r\n"
            },] }
];
PoNavbarComponent.ctorParameters = () => [
    { type: PoLanguageService },
    { type: Renderer2 },
    { type: AnimationBuilder },
    { type: ChangeDetectorRef },
    { type: PoMenuGlobalService }
];
PoNavbarComponent.propDecorators = {
    navbarItemsElement: [{ type: ViewChild, args: [PoNavbarItemsComponent, { read: ElementRef, static: true },] }],
    navbarItems: [{ type: ViewChild, args: [PoNavbarItemsComponent, { static: true },] }],
    menuComponent: [{ type: ViewChild, args: [PoMenuComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,