import { Injectable } from '@angular/core';
import { PoChartPadding } from '../helpers/po-chart-default-values.constant';
import * as i0 from "@angular/core";
export class PoChartSvgContainerService {
    constructor() { }
    /**
     * Retorna um objeto do tipo PoChartContainerSize contendo as dimensões necessárias para plotagem do SVG.
     *
     * @param chartHeight
     * @param chartWrapperWidth
     * @param chartHeaderHeight
     * @param chartLegendHeight
     */
    calculateSVGContainerMeasurements(chartHeight = 0, chartWrapperWidth = 0, chartHeaderHeight = 0, chartLegendHeight = 0) {
        const svgWidth = this.svgWidth(chartWrapperWidth);
        const centerX = this.center(chartWrapperWidth);
        const svgHeight = this.svgHeight(chartHeight, chartHeaderHeight, chartLegendHeight);
        const centerY = this.center(svgHeight);
        const svgPlottingAreaHeight = this.svgPlottingAreaHeight(svgHeight);
        return {
            svgWidth,
            svgHeight,
            centerX,
            centerY,
            svgPlottingAreaHeight
        };
    }
    // Largura do container.
    svgWidth(chartWrapperWidth) {
        const wrapperWidth = chartWrapperWidth - PoChartPadding * 2;
        return wrapperWidth > 0 ? wrapperWidth : 0;
    }
    // O centro do container. Usado para gráficos do tipo circular.
    center(dimension) {
        return dimension / 2;
    }
    // Altura do container
    svgHeight(chartHeight, chartHeaderHeight, chartLegendHeight) {
        const subtractedHeights = chartHeight - chartHeaderHeight - chartLegendHeight - PoChartPadding * 2;
        return subtractedHeights <= 0 ? 0 : subtractedHeights;
    }
    /**
     * Altura da área de plotagem.
     * Subtrai a altura do container SVG pelo padding superior + área para overflow de labels do eixo X.
     */
    svgPlottingAreaHeight(svgHeight) {
        return svgHeight - PoChartPadding - 8;
    }
}
PoChartSvgContainerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PoChartSvgContainerService_Factory() { return new PoChartSvgContainerService(); }, token: PoChartSvgContainerService, providedIn: "root" });
PoChartSvgContainerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
PoChartSvgContainerService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtc3ZnLWNvbnRhaW5lci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWNoYXJ0L3NlcnZpY2VzL3BvLWNoYXJ0LXN2Zy1jb250YWluZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQzs7QUFNN0UsTUFBTSxPQUFPLDBCQUEwQjtJQUNyQyxnQkFBZSxDQUFDO0lBRWhCOzs7Ozs7O09BT0c7SUFDSCxpQ0FBaUMsQ0FDL0IsY0FBc0IsQ0FBQyxFQUN2QixvQkFBNEIsQ0FBQyxFQUM3QixvQkFBNEIsQ0FBQyxFQUM3QixvQkFBNEIsQ0FBQztRQUU3QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDbEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLGlCQUFpQixFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDcEYsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2QyxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVwRSxPQUFPO1lBQ0wsUUFBUTtZQUNSLFNBQVM7WUFDVCxPQUFPO1lBQ1AsT0FBTztZQUNQLHFCQUFxQjtTQUN0QixDQUFDO0lBQ0osQ0FBQztJQUVELHdCQUF3QjtJQUNoQixRQUFRLENBQUMsaUJBQXlCO1FBQ3hDLE1BQU0sWUFBWSxHQUFHLGlCQUFpQixHQUFHLGNBQWMsR0FBRyxDQUFDLENBQUM7UUFFNUQsT0FBTyxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsK0RBQStEO0lBQ3ZELE1BQU0sQ0FBQyxTQUFpQjtRQUM5QixPQUFPLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELHNCQUFzQjtJQUNkLFNBQVMsQ0FBQyxXQUFtQixFQUFFLGlCQUF5QixFQUFFLGlCQUF5QjtRQUN6RixNQUFNLGlCQUFpQixHQUFHLFdBQVcsR0FBRyxpQkFBaUIsR0FBRyxpQkFBaUIsR0FBRyxjQUFjLEdBQUcsQ0FBQyxDQUFDO1FBRW5HLE9BQU8saUJBQWlCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO0lBQ3hELENBQUM7SUFFRDs7O09BR0c7SUFDSyxxQkFBcUIsQ0FBQyxTQUFpQjtRQUM3QyxPQUFPLFNBQVMsR0FBRyxjQUFjLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Ozs7WUE1REYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgUG9DaGFydFBhZGRpbmcgfSBmcm9tICcuLi9oZWxwZXJzL3BvLWNoYXJ0LWRlZmF1bHQtdmFsdWVzLmNvbnN0YW50JztcclxuaW1wb3J0IHsgUG9DaGFydENvbnRhaW5lclNpemUgfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BvLWNoYXJ0LWNvbnRhaW5lci1zaXplLmludGVyZmFjZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQb0NoYXJ0U3ZnQ29udGFpbmVyU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICAvKipcclxuICAgKiBSZXRvcm5hIHVtIG9iamV0byBkbyB0aXBvIFBvQ2hhcnRDb250YWluZXJTaXplIGNvbnRlbmRvIGFzIGRpbWVuc8O1ZXMgbmVjZXNzw6FyaWFzIHBhcmEgcGxvdGFnZW0gZG8gU1ZHLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNoYXJ0SGVpZ2h0XHJcbiAgICogQHBhcmFtIGNoYXJ0V3JhcHBlcldpZHRoXHJcbiAgICogQHBhcmFtIGNoYXJ0SGVhZGVySGVpZ2h0XHJcbiAgICogQHBhcmFtIGNoYXJ0TGVnZW5kSGVpZ2h0XHJcbiAgICovXHJcbiAgY2FsY3VsYXRlU1ZHQ29udGFpbmVyTWVhc3VyZW1lbnRzKFxyXG4gICAgY2hhcnRIZWlnaHQ6IG51bWJlciA9IDAsXHJcbiAgICBjaGFydFdyYXBwZXJXaWR0aDogbnVtYmVyID0gMCxcclxuICAgIGNoYXJ0SGVhZGVySGVpZ2h0OiBudW1iZXIgPSAwLFxyXG4gICAgY2hhcnRMZWdlbmRIZWlnaHQ6IG51bWJlciA9IDBcclxuICApOiBQb0NoYXJ0Q29udGFpbmVyU2l6ZSB7XHJcbiAgICBjb25zdCBzdmdXaWR0aCA9IHRoaXMuc3ZnV2lkdGgoY2hhcnRXcmFwcGVyV2lkdGgpO1xyXG4gICAgY29uc3QgY2VudGVyWCA9IHRoaXMuY2VudGVyKGNoYXJ0V3JhcHBlcldpZHRoKTtcclxuICAgIGNvbnN0IHN2Z0hlaWdodCA9IHRoaXMuc3ZnSGVpZ2h0KGNoYXJ0SGVpZ2h0LCBjaGFydEhlYWRlckhlaWdodCwgY2hhcnRMZWdlbmRIZWlnaHQpO1xyXG4gICAgY29uc3QgY2VudGVyWSA9IHRoaXMuY2VudGVyKHN2Z0hlaWdodCk7XHJcbiAgICBjb25zdCBzdmdQbG90dGluZ0FyZWFIZWlnaHQgPSB0aGlzLnN2Z1Bsb3R0aW5nQXJlYUhlaWdodChzdmdIZWlnaHQpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN2Z1dpZHRoLFxyXG4gICAgICBzdmdIZWlnaHQsXHJcbiAgICAgIGNlbnRlclgsXHJcbiAgICAgIGNlbnRlclksXHJcbiAgICAgIHN2Z1Bsb3R0aW5nQXJlYUhlaWdodFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIExhcmd1cmEgZG8gY29udGFpbmVyLlxyXG4gIHByaXZhdGUgc3ZnV2lkdGgoY2hhcnRXcmFwcGVyV2lkdGg6IG51bWJlcikge1xyXG4gICAgY29uc3Qgd3JhcHBlcldpZHRoID0gY2hhcnRXcmFwcGVyV2lkdGggLSBQb0NoYXJ0UGFkZGluZyAqIDI7XHJcblxyXG4gICAgcmV0dXJuIHdyYXBwZXJXaWR0aCA+IDAgPyB3cmFwcGVyV2lkdGggOiAwO1xyXG4gIH1cclxuXHJcbiAgLy8gTyBjZW50cm8gZG8gY29udGFpbmVyLiBVc2FkbyBwYXJhIGdyw6FmaWNvcyBkbyB0aXBvIGNpcmN1bGFyLlxyXG4gIHByaXZhdGUgY2VudGVyKGRpbWVuc2lvbjogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gZGltZW5zaW9uIC8gMjtcclxuICB9XHJcblxyXG4gIC8vIEFsdHVyYSBkbyBjb250YWluZXJcclxuICBwcml2YXRlIHN2Z0hlaWdodChjaGFydEhlaWdodDogbnVtYmVyLCBjaGFydEhlYWRlckhlaWdodDogbnVtYmVyLCBjaGFydExlZ2VuZEhlaWdodDogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBzdWJ0cmFjdGVkSGVpZ2h0cyA9IGNoYXJ0SGVpZ2h0IC0gY2hhcnRIZWFkZXJIZWlnaHQgLSBjaGFydExlZ2VuZEhlaWdodCAtIFBvQ2hhcnRQYWRkaW5nICogMjtcclxuXHJcbiAgICByZXR1cm4gc3VidHJhY3RlZEhlaWdodHMgPD0gMCA/IDAgOiBzdWJ0cmFjdGVkSGVpZ2h0cztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFsdHVyYSBkYSDDoXJlYSBkZSBwbG90YWdlbS5cclxuICAgKiBTdWJ0cmFpIGEgYWx0dXJhIGRvIGNvbnRhaW5lciBTVkcgcGVsbyBwYWRkaW5nIHN1cGVyaW9yICsgw6FyZWEgcGFyYSBvdmVyZmxvdyBkZSBsYWJlbHMgZG8gZWl4byBYLlxyXG4gICAqL1xyXG4gIHByaXZhdGUgc3ZnUGxvdHRpbmdBcmVhSGVpZ2h0KHN2Z0hlaWdodDogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gc3ZnSGVpZ2h0IC0gUG9DaGFydFBhZGRpbmcgLSA4O1xyXG4gIH1cclxufVxyXG4iXX0=