import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean, convertToInt } from '../../utils/util';
import { PoProgressStatus } from './enums/po-progress-status.enum';
const poProgressMaxValue = 100;
const poProgressMinValue = 0;
/**
 * @description
 *
 * Componente de barra de progresso que possibilita exibir visualmente o progresso/carregamento de uma tarefa.
 *
 * Este componente pode ser utilizado no *upload* de arquivos, uma atualização no sistema ou o processamento de uma imagem.
 */
export class PoProgressBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Status da barra de progresso que indicará visualmente ao usuário
         * o andamento, por exemplo, se a mesma foi concluída com sucesso.
         *
         * @default `PoProgressStatus.Default`
         */
        this.status = PoProgressStatus.Default;
        /**
         * @optional
         *
         * @description
         *
         * Evento que será disparado ao clicar no ícone de cancelamento ("x") na parte inferior da barra de progresso.
         *
         * Ao ser disparado, a função receberá como parâmetro o status atual da barra de progresso.
         *
         * > Se nenhuma função for passada para o evento ou a barra de progresso estiver com o status `PoProgressStatus.Success`,
         * o ícone de cancelamento não será exibido.
         */
        this.cancel = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento que será disparado ao clicar no ícone de tentar novamente na parte inferior da barra de progresso.
         *
         * > o ícone será exibido apenas se informar uma função neste evento e o status da barra de progresso for
         * `PoProgressStatus.Error`.
         */
        this.retry = new EventEmitter();
        this._value = 0;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita o modo indeterminado na barra de progresso, que mostra uma animação fixa sem um valor estabelecido.
     *
     * Esta opção pode ser utilizada quando não souber quanto tempo levará para que um processo seja concluído.
     *
     * > Caso esta propriedade e a `p-value` seja habilitada, a propriedade `p-value` será ignorada.
     *
     * @default `false`
     */
    set indeterminate(indeterminate) {
        this._indeterminate = convertToBoolean(indeterminate);
    }
    get indeterminate() {
        return this._indeterminate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor que representará o progresso.
     *
     * > Os valores aceitos são números inteiros de `0` à `100`.
     *
     * @default `0`
     */
    set value(value) {
        const integerValue = convertToInt(value, poProgressMinValue);
        const isProgressRangeValue = this.isProgressRangeValue(integerValue);
        this._value = isProgressRangeValue ? integerValue : poProgressMinValue;
    }
    get value() {
        return this._value;
    }
    isProgressRangeValue(value) {
        return value >= poProgressMinValue && value <= poProgressMaxValue;
    }
}
PoProgressBaseComponent.decorators = [
    { type: Directive }
];
PoProgressBaseComponent.propDecorators = {
    info: [{ type: Input, args: ['p-info',] }],
    infoIcon: [{ type: Input, args: ['p-info-icon',] }],
    status: [{ type: Input, args: ['p-status',] }],
    text: [{ type: Input, args: ['p-text',] }],
    cancel: [{ type: Output, args: ['p-cancel',] }],
    retry: [{ type: Output, args: ['p-retry',] }],
    indeterminate: [{ type: Input, args: ['p-indeterminate',] }],
    value: [{ type: Input, args: ['p-value',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcHJvZ3Jlc3MtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tcHJvZ3Jlc3MvcG8tcHJvZ3Jlc3MtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFbEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFbkUsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLENBQUM7QUFFN0I7Ozs7OztHQU1HO0FBRUgsTUFBTSxPQUFPLHVCQUF1QjtJQURwQztRQXNCRTs7Ozs7Ozs7O1dBU0c7UUFDZ0IsV0FBTSxHQUFxQixnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7UUFXdkU7Ozs7Ozs7Ozs7O1dBV0c7UUFDaUIsV0FBTSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRW5FOzs7Ozs7Ozs7V0FTRztRQUNnQixVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFHekQsV0FBTSxHQUFZLENBQUMsQ0FBQztJQWdEOUIsQ0FBQztJQTlDQzs7Ozs7Ozs7Ozs7O09BWUc7SUFDSCxJQUE4QixhQUFhLENBQUMsYUFBc0I7UUFDaEUsSUFBSSxDQUFDLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsSUFBSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzdCLENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHO0lBQ0gsSUFBc0IsS0FBSyxDQUFDLEtBQWE7UUFDdkMsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQzdELE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXJFLElBQUksQ0FBQyxNQUFNLEdBQUcsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUM7SUFDekUsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRU8sb0JBQW9CLENBQUMsS0FBYTtRQUN4QyxPQUFPLEtBQUssSUFBSSxrQkFBa0IsSUFBSSxLQUFLLElBQUksa0JBQWtCLENBQUM7SUFDcEUsQ0FBQzs7O1lBckhGLFNBQVM7OzttQkFTUCxLQUFLLFNBQUMsUUFBUTt1QkFXZCxLQUFLLFNBQUMsYUFBYTtxQkFZbkIsS0FBSyxTQUFDLFVBQVU7bUJBU2hCLEtBQUssU0FBQyxRQUFRO3FCQWNkLE1BQU0sU0FBQyxVQUFVO29CQVlqQixNQUFNLFNBQUMsU0FBUzs0QkFrQmhCLEtBQUssU0FBQyxpQkFBaUI7b0JBbUJ2QixLQUFLLFNBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuLCBjb252ZXJ0VG9JbnQgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcclxuXHJcbmltcG9ydCB7IFBvUHJvZ3Jlc3NTdGF0dXMgfSBmcm9tICcuL2VudW1zL3BvLXByb2dyZXNzLXN0YXR1cy5lbnVtJztcclxuXHJcbmNvbnN0IHBvUHJvZ3Jlc3NNYXhWYWx1ZSA9IDEwMDtcclxuY29uc3QgcG9Qcm9ncmVzc01pblZhbHVlID0gMDtcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogQ29tcG9uZW50ZSBkZSBiYXJyYSBkZSBwcm9ncmVzc28gcXVlIHBvc3NpYmlsaXRhIGV4aWJpciB2aXN1YWxtZW50ZSBvIHByb2dyZXNzby9jYXJyZWdhbWVudG8gZGUgdW1hIHRhcmVmYS5cclxuICpcclxuICogRXN0ZSBjb21wb25lbnRlIHBvZGUgc2VyIHV0aWxpemFkbyBubyAqdXBsb2FkKiBkZSBhcnF1aXZvcywgdW1hIGF0dWFsaXphw6fDo28gbm8gc2lzdGVtYSBvdSBvIHByb2Nlc3NhbWVudG8gZGUgdW1hIGltYWdlbS5cclxuICovXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgY2xhc3MgUG9Qcm9ncmVzc0Jhc2VDb21wb25lbnQge1xyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBJbmZvcm1hw6fDo28gYWRpY2lvbmFsIHF1ZSBhcGFyZWNlcsOhIGFiYWl4byBkYSBiYXJyYSBkZSBwcm9ncmVzc28gYW8gbGFkbyBkaXJlaXRvLlxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1pbmZvJykgaW5mbz86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIMONY29uZSBxdWUgYXBhcmVjZXLDoSBhbyBsYWRvIGRvIHRleHRvIGRhIHByb3ByaWVkYWRlIGBwLWluZm9gLlxyXG4gICAqXHJcbiAgICogRXhlbXBsbzogYHBvLWljb24tb2tgLlxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1pbmZvLWljb24nKSBpbmZvSWNvbj86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIFN0YXR1cyBkYSBiYXJyYSBkZSBwcm9ncmVzc28gcXVlIGluZGljYXLDoSB2aXN1YWxtZW50ZSBhbyB1c3XDoXJpb1xyXG4gICAqIG8gYW5kYW1lbnRvLCBwb3IgZXhlbXBsbywgc2UgYSBtZXNtYSBmb2kgY29uY2x1w61kYSBjb20gc3VjZXNzby5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IGBQb1Byb2dyZXNzU3RhdHVzLkRlZmF1bHRgXHJcbiAgICovXHJcbiAgQElucHV0KCdwLXN0YXR1cycpIHN0YXR1czogUG9Qcm9ncmVzc1N0YXR1cyA9IFBvUHJvZ3Jlc3NTdGF0dXMuRGVmYXVsdDtcclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIFRleHRvIHByaW5jaXBhbCBxdWUgYXBhcmVjZXLDoSBhYmFpeG8gZGEgYmFycmEgZGUgcHJvZ3Jlc3NvIG5vIGxhZG8gZXNxdWVyZG8uXHJcbiAgICovXHJcbiAgQElucHV0KCdwLXRleHQnKSB0ZXh0Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBAb3B0aW9uYWxcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogRXZlbnRvIHF1ZSBzZXLDoSBkaXNwYXJhZG8gYW8gY2xpY2FyIG5vIMOtY29uZSBkZSBjYW5jZWxhbWVudG8gKFwieFwiKSBuYSBwYXJ0ZSBpbmZlcmlvciBkYSBiYXJyYSBkZSBwcm9ncmVzc28uXHJcbiAgICpcclxuICAgKiBBbyBzZXIgZGlzcGFyYWRvLCBhIGZ1bsOnw6NvIHJlY2ViZXLDoSBjb21vIHBhcsOibWV0cm8gbyBzdGF0dXMgYXR1YWwgZGEgYmFycmEgZGUgcHJvZ3Jlc3NvLlxyXG4gICAqXHJcbiAgICogPiBTZSBuZW5odW1hIGZ1bsOnw6NvIGZvciBwYXNzYWRhIHBhcmEgbyBldmVudG8gb3UgYSBiYXJyYSBkZSBwcm9ncmVzc28gZXN0aXZlciBjb20gbyBzdGF0dXMgYFBvUHJvZ3Jlc3NTdGF0dXMuU3VjY2Vzc2AsXHJcbiAgICogbyDDrWNvbmUgZGUgY2FuY2VsYW1lbnRvIG7Do28gc2Vyw6EgZXhpYmlkby5cclxuICAgKi9cclxuICBAT3V0cHV0KCdwLWNhbmNlbCcpIGNhbmNlbDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBFdmVudG8gcXVlIHNlcsOhIGRpc3BhcmFkbyBhbyBjbGljYXIgbm8gw61jb25lIGRlIHRlbnRhciBub3ZhbWVudGUgbmEgcGFydGUgaW5mZXJpb3IgZGEgYmFycmEgZGUgcHJvZ3Jlc3NvLlxyXG4gICAqXHJcbiAgICogPiBvIMOtY29uZSBzZXLDoSBleGliaWRvIGFwZW5hcyBzZSBpbmZvcm1hciB1bWEgZnVuw6fDo28gbmVzdGUgZXZlbnRvIGUgbyBzdGF0dXMgZGEgYmFycmEgZGUgcHJvZ3Jlc3NvIGZvclxyXG4gICAqIGBQb1Byb2dyZXNzU3RhdHVzLkVycm9yYC5cclxuICAgKi9cclxuICBAT3V0cHV0KCdwLXJldHJ5JykgcmV0cnk6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBwcml2YXRlIF9pbmRldGVybWluYXRlPzogYm9vbGVhbjtcclxuICBwcml2YXRlIF92YWx1ZT86IG51bWJlciA9IDA7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBIYWJpbGl0YSBvIG1vZG8gaW5kZXRlcm1pbmFkbyBuYSBiYXJyYSBkZSBwcm9ncmVzc28sIHF1ZSBtb3N0cmEgdW1hIGFuaW1hw6fDo28gZml4YSBzZW0gdW0gdmFsb3IgZXN0YWJlbGVjaWRvLlxyXG4gICAqXHJcbiAgICogRXN0YSBvcMOnw6NvIHBvZGUgc2VyIHV0aWxpemFkYSBxdWFuZG8gbsOjbyBzb3ViZXIgcXVhbnRvIHRlbXBvIGxldmFyw6EgcGFyYSBxdWUgdW0gcHJvY2Vzc28gc2VqYSBjb25jbHXDrWRvLlxyXG4gICAqXHJcbiAgICogPiBDYXNvIGVzdGEgcHJvcHJpZWRhZGUgZSBhIGBwLXZhbHVlYCBzZWphIGhhYmlsaXRhZGEsIGEgcHJvcHJpZWRhZGUgYHAtdmFsdWVgIHNlcsOhIGlnbm9yYWRhLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1pbmRldGVybWluYXRlJykgc2V0IGluZGV0ZXJtaW5hdGUoaW5kZXRlcm1pbmF0ZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5faW5kZXRlcm1pbmF0ZSA9IGNvbnZlcnRUb0Jvb2xlYW4oaW5kZXRlcm1pbmF0ZSk7XHJcbiAgfVxyXG5cclxuICBnZXQgaW5kZXRlcm1pbmF0ZSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9pbmRldGVybWluYXRlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIFZhbG9yIHF1ZSByZXByZXNlbnRhcsOhIG8gcHJvZ3Jlc3NvLlxyXG4gICAqXHJcbiAgICogPiBPcyB2YWxvcmVzIGFjZWl0b3Mgc8OjbyBuw7ptZXJvcyBpbnRlaXJvcyBkZSBgMGAgw6AgYDEwMGAuXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCBgMGBcclxuICAgKi9cclxuICBASW5wdXQoJ3AtdmFsdWUnKSBzZXQgdmFsdWUodmFsdWU6IG51bWJlcikge1xyXG4gICAgY29uc3QgaW50ZWdlclZhbHVlID0gY29udmVydFRvSW50KHZhbHVlLCBwb1Byb2dyZXNzTWluVmFsdWUpO1xyXG4gICAgY29uc3QgaXNQcm9ncmVzc1JhbmdlVmFsdWUgPSB0aGlzLmlzUHJvZ3Jlc3NSYW5nZVZhbHVlKGludGVnZXJWYWx1ZSk7XHJcblxyXG4gICAgdGhpcy5fdmFsdWUgPSBpc1Byb2dyZXNzUmFuZ2VWYWx1ZSA/IGludGVnZXJWYWx1ZSA6IHBvUHJvZ3Jlc3NNaW5WYWx1ZTtcclxuICB9XHJcblxyXG4gIGdldCB2YWx1ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNQcm9ncmVzc1JhbmdlVmFsdWUodmFsdWU6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHZhbHVlID49IHBvUHJvZ3Jlc3NNaW5WYWx1ZSAmJiB2YWx1ZSA8PSBwb1Byb2dyZXNzTWF4VmFsdWU7XHJcbiAgfVxyXG59XHJcbiJdfQ==