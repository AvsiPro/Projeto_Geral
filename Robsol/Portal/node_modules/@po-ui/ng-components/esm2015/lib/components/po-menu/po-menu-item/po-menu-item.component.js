import { Component, Input, ViewChild } from '@angular/core';
import { convertToInt, convertToBoolean } from '../../../utils/util';
import { PoMenuItemsService } from '../services/po-menu-items.service';
// valor para que caibam 3 linhas de `label`
const poMenuItemSubItemSize = 98;
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que implementa cada item do po-menu.
 */
export class PoMenuItemComponent {
    constructor(menuItemsService) {
        this.menuItemsService = menuItemsService;
        this.maxHeight = 0;
        this._isSelected = false;
        this._isSubItem = false;
    }
    // Valor do badge.
    set badgeValue(badgeValue) {
        this._badgeValue = convertToInt(badgeValue);
    }
    get badgeValue() {
        return this._badgeValue;
    }
    // Indica se o item está selecionado.
    set isSelected(value) {
        this._isSelected = convertToBoolean(value);
        this.isSelectedSubItem = this.isSelected && this.isSubItem;
    }
    get isSelected() {
        return this._isSelected;
    }
    // Indica se o item é um sub item
    set isSubItem(value) {
        this._isSubItem = convertToBoolean(value);
    }
    get isSubItem() {
        return this._isSubItem;
    }
    // Lista de sub-items.
    set subItems(subitems) {
        this._subItems = subitems;
        if (this.isOpened) {
            this.calcMenuSubItemsMaxHeight();
        }
    }
    get subItems() {
        return this._subItems;
    }
    get canShowBadge() {
        return this.type !== 'subItems' && (this.badgeValue || this.badgeValue === 0) && this.badgeValue >= 0;
    }
    ngOnDestroy() {
        this.itemSubscription.unsubscribe();
    }
    ngOnInit() {
        // subscribe to menu component messages
        this.itemSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(menu => {
            this.processMenuItem(menu);
        });
    }
    clickMenuItem(event) {
        if (!(event.ctrlKey || event.metaKey)) {
            event.preventDefault();
            // Emmit to parent
            this.menuItemsService.sendToParentMenuClicked({
                link: this.link,
                action: this.action,
                id: this.id,
                icon: this.icon,
                label: this.label,
                level: this.level,
                subItems: this.subItems,
                isSelected: this.isSelected,
                isOpened: this.isOpened,
                shortLabel: this.shortLabel,
                type: this.type
            });
        }
    }
    accordionAnimation(menuActive, menuOpened, hasSubItemOpened, activatedByRoute) {
        if (this.id === menuOpened['id']) {
            this.maxHeight = this.subItems.length * poMenuItemSubItemSize;
        }
        if (hasSubItemOpened) {
            this.maxHeight = menuOpened['isOpened']
                ? this.maxHeight + menuOpened.subItems.length * poMenuItemSubItemSize
                : this.maxHeight - menuOpened.subItems.length * poMenuItemSubItemSize;
            if (activatedByRoute) {
                this.maxHeight = this.getMinimumHeight(0, this, menuActive);
            }
        }
    }
    activateMenu(menu) {
        this.isSelected = menu && this.id === menu.id;
    }
    calcMenuSubItemsMaxHeight() {
        setTimeout(() => {
            const subItems = Array.from(this.menuSubItems.nativeElement.querySelectorAll('.po-menu-item'));
            subItems.forEach((menuItem) => (this.maxHeight += menuItem.offsetHeight));
        });
    }
    getMinimumHeight(minimumHeight, menuItem, menuActive) {
        minimumHeight += poMenuItemSubItemSize;
        if (menuItem.subItems && this.hasSubItem(menuItem.subItems, menuActive['id'])) {
            for (let index = 0; index < menuItem.subItems.length; index++) {
                minimumHeight = this.getMinimumHeight(minimumHeight, menuItem.subItems[index], menuActive);
            }
        }
        return minimumHeight;
    }
    groupedMenu(menuActive, menuOpened, activatedByRoute = false) {
        const hasSubItemOpened = menuOpened && this.id !== menuOpened['id'] ? this.hasSubItem(this.subItems, menuOpened['id']) : false;
        this.isOpened = this.isMenuOpened(menuOpened, hasSubItemOpened);
        this.isSelected = menuActive && !this.isOpened ? this.hasSubItem(this.subItems, menuActive['id']) : false;
        if (!this.isOpened) {
            this.maxHeight = 0;
            return;
        }
        this.accordionAnimation(menuActive, menuOpened, hasSubItemOpened, activatedByRoute);
    }
    hasSubItem(subItems, id) {
        if (subItems) {
            return subItems.some(item => (item['id'] === id ? true : this.hasSubItem(item.subItems, id)));
        }
    }
    isMenuOpened(menuOpened, hasSubItemOpened) {
        if (menuOpened) {
            return this.id === menuOpened['id'] ? menuOpened['isOpened'] : hasSubItemOpened;
        }
        return false;
    }
    processMenuItem(menu) {
        if (this.type === 'internalLink') {
            this.activateMenu(menu.active);
            return;
        }
        if (this.type === 'subItems') {
            this.groupedMenu(menu.active, menu.grouped, menu.activatedByRoute);
        }
    }
}
PoMenuItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-menu-item',
                template: "<!-- menu com link interno -->\r\n<a *ngIf=\"type === 'internalLink'\" class=\"po-menu-item-link\" [routerLink]=\"link\">\r\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\r\n</a>\r\n<!-- menu com link externo -->\r\n<a *ngIf=\"type === 'externalLink'\" class=\"po-menu-item-link\" [href]=\"link\">\r\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\r\n</a>\r\n<!-- menu sem link -->\r\n<a *ngIf=\"type === 'noLink'\" class=\"po-menu-item-link\" href=\"javascript:;\">\r\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\r\n</a>\r\n<!-- menu com sub itens -->\r\n<div *ngIf=\"type === 'subItems'\" class=\"po-menu-item-link po-clickable\">\r\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\r\n  <div #menuSubItems class=\"po-menu-sub-items\" [hidden]=\"collapsedMenu\" [style.maxHeight.px]=\"maxHeight\">\r\n    <div *ngFor=\"let subItem of subItems\">\r\n      <po-menu-item\r\n        p-is-sub-item\r\n        [p-action]=\"subItem.action\"\r\n        [p-badge-alert]=\"subItem.badgeAlert\"\r\n        [p-badge-color]=\"subItem.badge ? subItem.badge.color : undefined\"\r\n        [p-badge-value]=\"subItem.badge ? subItem.badge.value : undefined\"\r\n        [p-id]=\"subItem.id\"\r\n        [p-label]=\"subItem.label\"\r\n        [p-level]=\"subItem.level\"\r\n        [p-link]=\"subItem.link\"\r\n        [p-sub-items]=\"subItem.subItems\"\r\n        [p-type]=\"subItem.type\"\r\n      >\r\n      </po-menu-item>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #menuItemTemplate>\r\n  <div\r\n    class=\"po-menu-item\"\r\n    [class.po-menu-icon-container]=\"level === 1 && icon\"\r\n    [class.po-menu-item-selected]=\"isSelected\"\r\n    [class.po-menu-item-level-two]=\"level === 2\"\r\n    [class.po-menu-item-level-three]=\"level === 3\"\r\n    [class.po-menu-item-level-four]=\"level === 4\"\r\n    [class.po-menu-item-grouper-up]=\"type === 'subItems' && isOpened\"\r\n    [class.po-menu-item-grouper-down]=\"type === 'subItems' && !isOpened\"\r\n    [class.po-menu-sub-item-selected]=\"isSelectedSubItem\"\r\n    (click)=\"clickMenuItem($event)\"\r\n  >\r\n    <po-badge\r\n      *ngIf=\"canShowBadge\"\r\n      [ngClass]=\"!collapsedMenu ? 'po-menu-badge-align' : 'po-menu-badge-align-collapsed'\"\r\n      [p-color]=\"badgeColor\"\r\n      [p-value]=\"badgeValue\"\r\n    >\r\n    </po-badge>\r\n    <po-icon *ngIf=\"level === 1 && icon\" class=\"po-menu-icon-item\" [p-icon]=\"icon\"></po-icon>\r\n    <div\r\n      *ngIf=\"badgeAlert\"\r\n      class=\"po-color-07\"\r\n      [ngClass]=\"!collapsedMenu ? 'po-menu-badge-alert' : 'po-menu-badge-alert-collapsed'\"\r\n    ></div>\r\n    <span\r\n      *ngIf=\"type === 'subItems' && !collapsedMenu\"\r\n      class=\"po-icon po-menu-group-icon\"\r\n      [class.po-icon-arrow-up]=\"isOpened\"\r\n      [class.po-icon-arrow-down]=\"!isOpened\"\r\n    >\r\n    </span>\r\n    <div [class.po-menu-icon-label]=\"level === 1 && icon\">\r\n      {{ label }}\r\n    </div>\r\n    <div *ngIf=\"collapsedMenu\" class=\"po-menu-short-label\">{{ shortLabel }}</div>\r\n  </div>\r\n</ng-template>\r\n"
            },] }
];
PoMenuItemComponent.ctorParameters = () => [
    { type: PoMenuItemsService }
];
PoMenuItemComponent.propDecorators = {
    action: [{ type: Input, args: ['p-action',] }],
    badgeAlert: [{ type: Input, args: ['p-badge-alert',] }],
    badgeColor: [{ type: Input, args: ['p-badge-color',] }],
    collapsedMenu: [{ type: Input, args: ['p-collapsed-menu',] }],
    icon: [{ type: Input, args: ['p-icon',] }],
    id: [{ type: Input, args: ['p-id',] }],
    isOpened: [{ type: Input, args: ['p-is-opened',] }],
    label: [{ type: Input, args: ['p-label',] }],
    level: [{ type: Input, args: ['p-level',] }],
    link: [{ type: Input, args: ['p-link',] }],
    shortLabel: [{ type: Input, args: ['p-short-label',] }],
    type: [{ type: Input, args: ['p-type',] }],
    menuSubItems: [{ type: ViewChild, args: ['menuSubItems',] }],
    badgeValue: [{ type: Input, args: ['p-badge-value',] }],
    isSelected: [{ type: Input, args: ['p-is-selected',] }],
    isSubItem: [{ type: Input, args: ['p-is-sub-item',] }],
    subItems: [{ type: Input, args: ['p-sub-items',] }]
};
//# sourceMappingURL=data:application/json;base64,