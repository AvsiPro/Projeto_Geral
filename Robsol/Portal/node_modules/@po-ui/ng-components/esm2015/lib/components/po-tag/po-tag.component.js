import { ChangeDetectionStrategy, Component } from '@angular/core';
import { PoTagBaseComponent } from './po-tag-base.component';
import { PoTagIcon } from './enums/po-tag-icon.enum';
import { PoTagType } from './enums/po-tag-type.enum';
const poTagTypeDefault = 'po-tag-' + PoTagType.Info;
/**
 * @docsExtends PoTagBaseComponent
 *
 * @example
 *
 * <example name="po-tag-basic" title="PO Tag Basic">
 *  <file name="sample-po-tag-basic/sample-po-tag-basic.component.html"> </file>
 *  <file name="sample-po-tag-basic/sample-po-tag-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tag-labs" title="PO Tag Labs">
 *  <file name="sample-po-tag-labs/sample-po-tag-labs.component.html"> </file>
 *  <file name="sample-po-tag-labs/sample-po-tag-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tag-bank-account" title="PO Tag - Bank Account">
 *  <file name="sample-po-tag-bank-account/sample-po-tag-bank-account.component.html"> </file>
 *  <file name="sample-po-tag-bank-account/sample-po-tag-bank-account.component.ts"> </file>
 * </example>
 */
export class PoTagComponent extends PoTagBaseComponent {
    ngOnInit() {
        this.isClickable = this.click.observers.length > 0;
    }
    get iconFromType() {
        switch (this.type) {
            case PoTagType.Danger:
                return PoTagIcon.Danger;
            case PoTagType.Info:
                return PoTagIcon.Info;
            case PoTagType.Success:
                return PoTagIcon.Success;
            case PoTagType.Warning:
                return PoTagIcon.Warning;
        }
    }
    get tagColor() {
        if (this.type) {
            return this.inverse ? `po-tag-${this.type}-inverse` : `po-tag-${this.type}`;
        }
        if (this.color) {
            return this.inverse ? `po-text-${this.color}` : `po-${this.color}`;
        }
        return this.inverse ? `${poTagTypeDefault}-inverse` : poTagTypeDefault;
    }
    get tagOrientation() {
        return this.orientation === this.poTagOrientation.Horizontal;
    }
    onClick() {
        const submittedTagItem = { value: this.value, type: this.type };
        this.click.emit(submittedTagItem);
    }
    onKeyPressed(event) {
        event.preventDefault();
        event.stopPropagation();
        this.onClick();
    }
}
PoTagComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-tag',
                template: "<div class=\"po-tag-container\" [class.po-tag-container-horizontal]=\"tagOrientation\">\r\n  <div *ngIf=\"label\" class=\"po-tag-title po-text-nowrap\">\r\n    <span class=\"po-tag-label\">{{ tagOrientation ? label + ':' : label }}</span>\r\n  </div>\r\n\r\n  <div class=\"po-tag-sub-container\">\r\n    <div\r\n      class=\"po-tag\"\r\n      [class.po-clickable]=\"isClickable\"\r\n      [class.po-tag-inverse]=\"inverse\"\r\n      [ngClass]=\"tagColor\"\r\n      tabindex=\"0\"\r\n      (click)=\"onClick()\"\r\n      (keydown.enter)=\"onKeyPressed($event)\"\r\n      (keydown.space)=\"$event.preventDefault()\"\r\n      (keyup.space)=\"onKeyPressed($event)\"\r\n    >\r\n      <po-icon *ngIf=\"icon\" class=\"po-tag-icon\" [p-icon]=\"!type ? icon : iconFromType\"> </po-icon>\r\n\r\n      <span class=\"po-tag-value\">{{ value }}</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFnLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby10YWcvcG8tdGFnLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBRTNFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVyRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFckQsTUFBTSxnQkFBZ0IsR0FBRyxTQUFTLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztBQUVwRDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQU1ILE1BQU0sT0FBTyxjQUFlLFNBQVEsa0JBQWtCO0lBR3BELFFBQVE7UUFDTixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELElBQUksWUFBWTtRQUNkLFFBQVEsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNqQixLQUFLLFNBQVMsQ0FBQyxNQUFNO2dCQUNuQixPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUM7WUFFMUIsS0FBSyxTQUFTLENBQUMsSUFBSTtnQkFDakIsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBRXhCLEtBQUssU0FBUyxDQUFDLE9BQU87Z0JBQ3BCLE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQztZQUUzQixLQUFLLFNBQVMsQ0FBQyxPQUFPO2dCQUNwQixPQUFPLFNBQVMsQ0FBQyxPQUFPLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDN0U7UUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNwRTtRQUVELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxnQkFBZ0IsVUFBVSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQztJQUN6RSxDQUFDO0lBRUQsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDO0lBQy9ELENBQUM7SUFFRCxPQUFPO1FBQ0wsTUFBTSxnQkFBZ0IsR0FBYyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDM0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQUs7UUFDaEIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakIsQ0FBQzs7O1lBckRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsUUFBUTtnQkFDbEIsNDNCQUFzQztnQkFDdEMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFBvVGFnQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tdGFnLWJhc2UuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUG9UYWdJY29uIH0gZnJvbSAnLi9lbnVtcy9wby10YWctaWNvbi5lbnVtJztcclxuaW1wb3J0IHsgUG9UYWdJdGVtIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLXRhZy1pdGVtLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvVGFnVHlwZSB9IGZyb20gJy4vZW51bXMvcG8tdGFnLXR5cGUuZW51bSc7XHJcblxyXG5jb25zdCBwb1RhZ1R5cGVEZWZhdWx0ID0gJ3BvLXRhZy0nICsgUG9UYWdUeXBlLkluZm87XHJcblxyXG4vKipcclxuICogQGRvY3NFeHRlbmRzIFBvVGFnQmFzZUNvbXBvbmVudFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tdGFnLWJhc2ljXCIgdGl0bGU9XCJQTyBUYWcgQmFzaWNcIj5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdGFnLWJhc2ljL3NhbXBsZS1wby10YWctYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10YWctYmFzaWMvc2FtcGxlLXBvLXRhZy1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxyXG4gKiA8L2V4YW1wbGU+XHJcbiAqXHJcbiAqIDxleGFtcGxlIG5hbWU9XCJwby10YWctbGFic1wiIHRpdGxlPVwiUE8gVGFnIExhYnNcIj5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdGFnLWxhYnMvc2FtcGxlLXBvLXRhZy1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdGFnLWxhYnMvc2FtcGxlLXBvLXRhZy1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XHJcbiAqIDwvZXhhbXBsZT5cclxuICpcclxuICogPGV4YW1wbGUgbmFtZT1cInBvLXRhZy1iYW5rLWFjY291bnRcIiB0aXRsZT1cIlBPIFRhZyAtIEJhbmsgQWNjb3VudFwiPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10YWctYmFuay1hY2NvdW50L3NhbXBsZS1wby10YWctYmFuay1hY2NvdW50LmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdGFnLWJhbmstYWNjb3VudC9zYW1wbGUtcG8tdGFnLWJhbmstYWNjb3VudC5jb21wb25lbnQudHNcIj4gPC9maWxlPlxyXG4gKiA8L2V4YW1wbGU+XHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3BvLXRhZycsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXRhZy5jb21wb25lbnQuaHRtbCcsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxufSlcclxuZXhwb3J0IGNsYXNzIFBvVGFnQ29tcG9uZW50IGV4dGVuZHMgUG9UYWdCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBpc0NsaWNrYWJsZTogYm9vbGVhbjtcclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLmlzQ2xpY2thYmxlID0gdGhpcy5jbGljay5vYnNlcnZlcnMubGVuZ3RoID4gMDtcclxuICB9XHJcblxyXG4gIGdldCBpY29uRnJvbVR5cGUoKSB7XHJcbiAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xyXG4gICAgICBjYXNlIFBvVGFnVHlwZS5EYW5nZXI6XHJcbiAgICAgICAgcmV0dXJuIFBvVGFnSWNvbi5EYW5nZXI7XHJcblxyXG4gICAgICBjYXNlIFBvVGFnVHlwZS5JbmZvOlxyXG4gICAgICAgIHJldHVybiBQb1RhZ0ljb24uSW5mbztcclxuXHJcbiAgICAgIGNhc2UgUG9UYWdUeXBlLlN1Y2Nlc3M6XHJcbiAgICAgICAgcmV0dXJuIFBvVGFnSWNvbi5TdWNjZXNzO1xyXG5cclxuICAgICAgY2FzZSBQb1RhZ1R5cGUuV2FybmluZzpcclxuICAgICAgICByZXR1cm4gUG9UYWdJY29uLldhcm5pbmc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXQgdGFnQ29sb3IoKSB7XHJcbiAgICBpZiAodGhpcy50eXBlKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmludmVyc2UgPyBgcG8tdGFnLSR7dGhpcy50eXBlfS1pbnZlcnNlYCA6IGBwby10YWctJHt0aGlzLnR5cGV9YDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5jb2xvcikge1xyXG4gICAgICByZXR1cm4gdGhpcy5pbnZlcnNlID8gYHBvLXRleHQtJHt0aGlzLmNvbG9yfWAgOiBgcG8tJHt0aGlzLmNvbG9yfWA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuaW52ZXJzZSA/IGAke3BvVGFnVHlwZURlZmF1bHR9LWludmVyc2VgIDogcG9UYWdUeXBlRGVmYXVsdDtcclxuICB9XHJcblxyXG4gIGdldCB0YWdPcmllbnRhdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uID09PSB0aGlzLnBvVGFnT3JpZW50YXRpb24uSG9yaXpvbnRhbDtcclxuICB9XHJcblxyXG4gIG9uQ2xpY2soKSB7XHJcbiAgICBjb25zdCBzdWJtaXR0ZWRUYWdJdGVtOiBQb1RhZ0l0ZW0gPSB7IHZhbHVlOiB0aGlzLnZhbHVlLCB0eXBlOiB0aGlzLnR5cGUgfTtcclxuICAgIHRoaXMuY2xpY2suZW1pdChzdWJtaXR0ZWRUYWdJdGVtKTtcclxuICB9XHJcblxyXG4gIG9uS2V5UHJlc3NlZChldmVudCkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgdGhpcy5vbkNsaWNrKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==