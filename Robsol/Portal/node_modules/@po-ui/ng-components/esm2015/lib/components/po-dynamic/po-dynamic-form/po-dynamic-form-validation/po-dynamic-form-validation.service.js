import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { PoDynamicFormOperation } from '../po-dynamic-form-operation/po-dynamic-form-operation';
export class PoDynamicFormValidationService extends PoDynamicFormOperation {
    constructor(http) {
        super(http);
    }
    sendFieldChange(field, value) {
        const changedValue = { property: field.property, value };
        return this.execute(field.validate, changedValue).pipe(map(validateFields => this.setFieldDefaultIfEmpty(validateFields)));
    }
    sendFormChange(validate, field, value) {
        const changedValue = { property: field.property, value };
        return this.execute(validate, changedValue).pipe(map(validateFields => this.setFormDefaultIfEmpty(validateFields)));
    }
    updateFieldsForm(validatedFields = [], fields = []) {
        return [...validatedFields].reduce((updatedFields, validatedField) => {
            const index = updatedFields.findIndex(field => field.property === validatedField.property);
            const hasProperty = index >= 0;
            if (hasProperty) {
                updatedFields[index] = Object.assign(Object.assign({}, fields[index]), validatedField);
            }
            return updatedFields;
        }, [...fields]);
    }
    setFieldDefaultIfEmpty(validateFields) {
        return (validateFields || {
            field: {}
        });
    }
}
PoDynamicFormValidationService.decorators = [
    { type: Injectable }
];
PoDynamicFormValidationService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1keW5hbWljL3BvLWR5bmFtaWMtZm9ybS9wby1keW5hbWljLWZvcm0tdmFsaWRhdGlvbi9wby1keW5hbWljLWZvcm0tdmFsaWRhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUtyQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUloRyxNQUFNLE9BQU8sOEJBQStCLFNBQVEsc0JBQXNCO0lBQ3hFLFlBQVksSUFBZ0I7UUFDMUIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2QsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUF5QixFQUFFLEtBQVU7UUFDbkQsTUFBTSxZQUFZLEdBQThCLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFFcEYsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUNwRCxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FDbkUsQ0FBQztJQUNKLENBQUM7SUFFRCxjQUFjLENBQ1osUUFBMkIsRUFDM0IsS0FBeUIsRUFDekIsS0FBVTtRQUVWLE1BQU0sWUFBWSxHQUE4QixFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDO1FBRXBGLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEgsQ0FBQztJQUVELGdCQUFnQixDQUFDLGtCQUE2QyxFQUFFLEVBQUUsU0FBb0MsRUFBRTtRQUN0RyxPQUFPLENBQUMsR0FBRyxlQUFlLENBQUMsQ0FBQyxNQUFNLENBQ2hDLENBQUMsYUFBYSxFQUFFLGNBQWMsRUFBRSxFQUFFO1lBQ2hDLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzRixNQUFNLFdBQVcsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDO1lBRS9CLElBQUksV0FBVyxFQUFFO2dCQUNmLGFBQWEsQ0FBQyxLQUFLLENBQUMsbUNBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFLLGNBQWMsQ0FBRSxDQUFDO2FBQ2hFO1lBRUQsT0FBTyxhQUFhLENBQUM7UUFDdkIsQ0FBQyxFQUNELENBQUMsR0FBRyxNQUFNLENBQUMsQ0FDWixDQUFDO0lBQ0osQ0FBQztJQUVPLHNCQUFzQixDQUFDLGNBQW1CO1FBQ2hELE9BQU8sQ0FDTCxjQUFjLElBQUk7WUFDaEIsS0FBSyxFQUFFLEVBQUU7U0FDVixDQUNGLENBQUM7SUFDSixDQUFDOzs7WUE5Q0YsVUFBVTs7O1lBWEYsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgUG9EeW5hbWljRm9ybUZpZWxkIH0gZnJvbSAnLi4vcG8tZHluYW1pYy1mb3JtLWZpZWxkLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1GaWVsZENoYW5nZWQgfSBmcm9tICcuL3BvLWR5bmFtaWMtZm9ybS1maWVsZC1jaGFuZ2VkLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1PcGVyYXRpb24gfSBmcm9tICcuLi9wby1keW5hbWljLWZvcm0tb3BlcmF0aW9uL3BvLWR5bmFtaWMtZm9ybS1vcGVyYXRpb24nO1xyXG5pbXBvcnQgeyBQb0R5bmFtaWNGb3JtVmFsaWRhdGlvbiB9IGZyb20gJy4vcG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uaW50ZXJmYWNlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFBvRHluYW1pY0Zvcm1WYWxpZGF0aW9uU2VydmljZSBleHRlbmRzIFBvRHluYW1pY0Zvcm1PcGVyYXRpb24ge1xyXG4gIGNvbnN0cnVjdG9yKGh0dHA6IEh0dHBDbGllbnQpIHtcclxuICAgIHN1cGVyKGh0dHApO1xyXG4gIH1cclxuXHJcbiAgc2VuZEZpZWxkQ2hhbmdlKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQsIHZhbHVlOiBhbnkpIHtcclxuICAgIGNvbnN0IGNoYW5nZWRWYWx1ZTogUG9EeW5hbWljRm9ybUZpZWxkQ2hhbmdlZCA9IHsgcHJvcGVydHk6IGZpZWxkLnByb3BlcnR5LCB2YWx1ZSB9O1xyXG5cclxuICAgIHJldHVybiB0aGlzLmV4ZWN1dGUoZmllbGQudmFsaWRhdGUsIGNoYW5nZWRWYWx1ZSkucGlwZShcclxuICAgICAgbWFwKHZhbGlkYXRlRmllbGRzID0+IHRoaXMuc2V0RmllbGREZWZhdWx0SWZFbXB0eSh2YWxpZGF0ZUZpZWxkcykpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc2VuZEZvcm1DaGFuZ2UoXHJcbiAgICB2YWxpZGF0ZTogRnVuY3Rpb24gfCBzdHJpbmcsXHJcbiAgICBmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkLFxyXG4gICAgdmFsdWU6IGFueVxyXG4gICk6IE9ic2VydmFibGU8UG9EeW5hbWljRm9ybVZhbGlkYXRpb24+IHtcclxuICAgIGNvbnN0IGNoYW5nZWRWYWx1ZTogUG9EeW5hbWljRm9ybUZpZWxkQ2hhbmdlZCA9IHsgcHJvcGVydHk6IGZpZWxkLnByb3BlcnR5LCB2YWx1ZSB9O1xyXG5cclxuICAgIHJldHVybiB0aGlzLmV4ZWN1dGUodmFsaWRhdGUsIGNoYW5nZWRWYWx1ZSkucGlwZShtYXAodmFsaWRhdGVGaWVsZHMgPT4gdGhpcy5zZXRGb3JtRGVmYXVsdElmRW1wdHkodmFsaWRhdGVGaWVsZHMpKSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVGaWVsZHNGb3JtKHZhbGlkYXRlZEZpZWxkczogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPiA9IFtdLCBmaWVsZHM6IEFycmF5PFBvRHluYW1pY0Zvcm1GaWVsZD4gPSBbXSkge1xyXG4gICAgcmV0dXJuIFsuLi52YWxpZGF0ZWRGaWVsZHNdLnJlZHVjZShcclxuICAgICAgKHVwZGF0ZWRGaWVsZHMsIHZhbGlkYXRlZEZpZWxkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSB1cGRhdGVkRmllbGRzLmZpbmRJbmRleChmaWVsZCA9PiBmaWVsZC5wcm9wZXJ0eSA9PT0gdmFsaWRhdGVkRmllbGQucHJvcGVydHkpO1xyXG4gICAgICAgIGNvbnN0IGhhc1Byb3BlcnR5ID0gaW5kZXggPj0gMDtcclxuXHJcbiAgICAgICAgaWYgKGhhc1Byb3BlcnR5KSB7XHJcbiAgICAgICAgICB1cGRhdGVkRmllbGRzW2luZGV4XSA9IHsgLi4uZmllbGRzW2luZGV4XSwgLi4udmFsaWRhdGVkRmllbGQgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB1cGRhdGVkRmllbGRzO1xyXG4gICAgICB9LFxyXG4gICAgICBbLi4uZmllbGRzXVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0RmllbGREZWZhdWx0SWZFbXB0eSh2YWxpZGF0ZUZpZWxkczogYW55KTogYW55IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHZhbGlkYXRlRmllbGRzIHx8IHtcclxuICAgICAgICBmaWVsZDoge31cclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19