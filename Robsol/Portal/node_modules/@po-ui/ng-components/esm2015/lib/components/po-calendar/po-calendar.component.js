import { ChangeDetectionStrategy, ChangeDetectorRef, Component, forwardRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { PoCalendarBaseComponent } from './po-calendar-base.component';
import { PoDateService } from '../../services/po-date/po-date.service';
import { PoLanguageService } from '../../services/po-language/po-language.service';
/* istanbul ignore next */
const providers = [
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoCalendarComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoCalendarComponent),
        multi: true
    }
];
const poCalendarRangeWidth = 600;
/**
 * @docsExtends PoCalendarBaseComponent
 *
 * @example
 *
 * <example name="po-calendar-basic" title="PO Calendar Basic" >
 *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.html"> </file>
 *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-calendar-labs" title="PO Calendar Labs" >
 *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.html"> </file>
 *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-calendar-ticket-sales" title="PO Calendar - Ticket Sales" >
 *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.html"> </file>
 *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.ts"> </file>
 * </example>
 */
export class PoCalendarComponent extends PoCalendarBaseComponent {
    constructor(changeDetector, poDate, languageService) {
        super(poDate, languageService);
        this.changeDetector = changeDetector;
    }
    get isResponsive() {
        return window.innerWidth < poCalendarRangeWidth;
    }
    ngOnInit() {
        this.setActivateDate();
    }
    ngOnChanges(changes) {
        if (changes.minDate || changes.maxDate) {
            this.setActivateDate();
        }
    }
    getActivateDate(partType) {
        if (this.isRange && this.activateDate) {
            return this.activateDate[partType];
        }
        else {
            return this.activateDate;
        }
    }
    getValue(partType) {
        if (this.isRange && this.value) {
            return this.value[partType];
        }
        else {
            return this.value;
        }
    }
    onSelectDate(selectedDate, partType) {
        var _a;
        let newValue;
        if (this.isRange) {
            newValue = this.getValueFromSelectedDate(selectedDate);
            if (partType === 'end' && (!((_a = this.value) === null || _a === void 0 ? void 0 : _a.start) || (this.value.start && this.value.end))) {
                this.setActivateDate(selectedDate);
            }
        }
        else {
            newValue = selectedDate;
            this.setActivateDate(selectedDate);
        }
        this.value = newValue;
        const newModel = this.convertDateToISO(this.value);
        this.updateModel(newModel);
        this.change.emit(newModel);
    }
    onHoverDate(date) {
        this.hoverValue = date;
    }
    onHeaderChange({ month, year }, partType) {
        if (this.isRange) {
            let newStart;
            let newEnd;
            const { start, end } = this.activateDate;
            if (partType === 'end') {
                const newYear = month === 0 ? year - 1 : year;
                newStart = new Date(new Date(start.setMonth(month - 1)).setFullYear(newYear));
                newEnd = new Date(new Date(end.setMonth(month)).setFullYear(year));
            }
            else {
                const newYear = month === 11 ? year + 1 : year;
                newEnd = new Date(new Date(end.setMonth(month + 1)).setFullYear(newYear));
                newStart = new Date(new Date(start.setMonth(month)).setFullYear(year));
            }
            this.activateDate = { start: newStart, end: newEnd };
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(func) {
        this.onTouched = func;
    }
    validate(c) {
        return null;
    }
    writeValue(value) {
        if (value) {
            this.writeDate(value);
        }
        else {
            this.value = null;
        }
        const activateDate = this.getValidateStartDate(value);
        this.setActivateDate(activateDate);
        this.changeDetector.markForCheck();
    }
    getValidateStartDate(value) {
        if (this.isRange) {
            return (value === null || value === void 0 ? void 0 : value.start) || null;
        }
        else if (value instanceof Date || typeof value === 'string') {
            return value;
        }
        return null;
    }
    getValueFromSelectedDate(selectedDate) {
        var _a;
        if (!((_a = this.value) === null || _a === void 0 ? void 0 : _a.start) || this.value.start > selectedDate || (this.value.end && this.value.start)) {
            return { start: new Date(selectedDate), end: null };
        }
        return { start: new Date(this.value.start), end: new Date(selectedDate) };
    }
    convertDateToISO(date) {
        if (this.isRange) {
            const start = (date === null || date === void 0 ? void 0 : date.start) instanceof Date ? this.poDate.convertDateToISO(date.start) : null;
            const end = (date === null || date === void 0 ? void 0 : date.end) instanceof Date ? this.poDate.convertDateToISO(date.end) : null;
            return { start, end };
        }
        else {
            return this.poDate.convertDateToISO(date);
        }
    }
    convertDateFromIso(stringDate) {
        if (stringDate && typeof stringDate === 'string') {
            const { year, month, day } = this.poDate.getDateFromIso(stringDate);
            const date = new Date(year, month - 1, day);
            this.poDate.setYearFrom0To100(date, year);
            return date;
        }
        return null;
    }
    updateModel(value) {
        if (this.propagateChange) {
            this.propagateChange(value);
        }
    }
    writeDate(value) {
        if (this.isRange) {
            const start = value === null || value === void 0 ? void 0 : value.start;
            const end = value === null || value === void 0 ? void 0 : value.end;
            const newStart = start instanceof Date ? new Date(start) : this.convertDateFromIso(start);
            const newEnd = end instanceof Date ? new Date(end) : this.convertDateFromIso(end);
            this.value = { start: newStart, end: newEnd };
        }
        else {
            this.value = value instanceof Date ? new Date(value) : this.convertDateFromIso(value);
        }
    }
}
PoCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-calendar',
                template: "<ng-container *ngIf=\"isRange; then rangeTemplate; else calendarTemplate\"></ng-container>\r\n\r\n<ng-template #rangeTemplate>\r\n  <div class=\"po-calendar-range\">\r\n    <ng-container *ngTemplateOutlet=\"calendarWrapper; context: { partType: 'start' }\"></ng-container>\r\n    <ng-container *ngIf=\"!isResponsive\">\r\n      <ng-container *ngTemplateOutlet=\"calendarWrapper; context: { partType: 'end' }\"></ng-container>\r\n    </ng-container>\r\n  </div>\r\n</ng-template>\r\n<ng-template #calendarTemplate>\r\n  <div class=\"po-calendar\">\r\n    <ng-template [ngTemplateOutlet]=\"calendarWrapper\"></ng-template>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #calendarWrapper let-partType=\"partType\">\r\n  <po-calendar-wrapper\r\n    [p-value]=\"getValue(partType)\"\r\n    [p-activate-date]=\"getActivateDate(partType)\"\r\n    [p-locale]=\"locale\"\r\n    [p-min-date]=\"minDate\"\r\n    [p-max-date]=\"maxDate\"\r\n    [p-part-type]=\"partType\"\r\n    [p-range]=\"isRange\"\r\n    [p-responsive]=\"isResponsive\"\r\n    [p-selected-value]=\"value\"\r\n    [p-hover-value]=\"hoverValue\"\r\n    (p-header-change)=\"onHeaderChange($event, partType)\"\r\n    (p-select-date)=\"onSelectDate($event, partType)\"\r\n    (p-hover-date)=\"onHoverDate($event)\"\r\n  >\r\n  </po-calendar-wrapper>\r\n</ng-template>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers
            },] }
];
PoCalendarComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: PoDateService },
    { type: PoLanguageService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWNhbGVuZGFyL3BvLWNhbGVuZGFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUlYLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBbUIsYUFBYSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFdkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBRW5GLDBCQUEwQjtBQUMxQixNQUFNLFNBQVMsR0FBRztJQUNoQjtRQUNFLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsMkJBQTJCO1FBQzNCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsbUJBQW1CLENBQUM7UUFDbEQsS0FBSyxFQUFFLElBQUk7S0FDWjtJQUNEO1FBQ0UsT0FBTyxFQUFFLGFBQWE7UUFDdEIsMkJBQTJCO1FBQzNCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsbUJBQW1CLENBQUM7UUFDbEQsS0FBSyxFQUFFLElBQUk7S0FDWjtDQUNGLENBQUM7QUFFRixNQUFNLG9CQUFvQixHQUFHLEdBQUcsQ0FBQztBQUVqQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQU9ILE1BQU0sT0FBTyxtQkFBb0IsU0FBUSx1QkFBdUI7SUFHOUQsWUFBb0IsY0FBaUMsRUFBRSxNQUFxQixFQUFFLGVBQWtDO1FBQzlHLEtBQUssQ0FBQyxNQUFNLEVBQUUsZUFBZSxD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QUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsS0FBSyxDQUFDO1lBQzNCLE1BQU0sR0FBRyxHQUFHLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxHQUFHLENBQUM7WUFFdkIsTUFBTSxRQUFRLEdBQUcsS0FBSyxZQUFZLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxRixNQUFNLE1BQU0sR0FBRyxHQUFHLFlBQVksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRWxGLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQztTQUMvQzthQUFNO1lBQ0wsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLFlBQVksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZGO0lBQ0gsQ0FBQzs7O1lBN0tGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsMnpDQUEyQztnQkFDM0MsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFNBQVM7YUFDVjs7O1lBekRDLGlCQUFpQjtZQVdWLGFBQWE7WUFDYixpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxyXG4gIENoYW5nZURldGVjdG9yUmVmLFxyXG4gIENvbXBvbmVudCxcclxuICBmb3J3YXJkUmVmLFxyXG4gIE9uQ2hhbmdlcyxcclxuICBPbkluaXQsXHJcbiAgU2ltcGxlQ2hhbmdlc1xyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIE5HX1ZBTElEQVRPUlMsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuaW1wb3J0IHsgUG9DYWxlbmRhckJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLWNhbGVuZGFyLWJhc2UuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUG9DYWxlbmRhckxhbmdTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9wby1jYWxlbmRhci5sYW5nLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQb0RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvcG8tZGF0ZS9wby1kYXRlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQb0xhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UnO1xyXG5cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuY29uc3QgcHJvdmlkZXJzID0gW1xyXG4gIHtcclxuICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBQb0NhbGVuZGFyQ29tcG9uZW50KSxcclxuICAgIG11bHRpOiB0cnVlXHJcbiAgfSxcclxuICB7XHJcbiAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBQb0NhbGVuZGFyQ29tcG9uZW50KSxcclxuICAgIG11bHRpOiB0cnVlXHJcbiAgfVxyXG5dO1xyXG5cclxuY29uc3QgcG9DYWxlbmRhclJhbmdlV2lkdGggPSA2MDA7XHJcblxyXG4vKipcclxuICogQGRvY3NFeHRlbmRzIFBvQ2FsZW5kYXJCYXNlQ29tcG9uZW50XHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1jYWxlbmRhci1iYXNpY1wiIHRpdGxlPVwiUE8gQ2FsZW5kYXIgQmFzaWNcIiA+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWNhbGVuZGFyLWJhc2ljL3NhbXBsZS1wby1jYWxlbmRhci1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWNhbGVuZGFyLWJhc2ljL3NhbXBsZS1wby1jYWxlbmRhci1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxyXG4gKiA8L2V4YW1wbGU+XHJcbiAqXHJcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1jYWxlbmRhci1sYWJzXCIgdGl0bGU9XCJQTyBDYWxlbmRhciBMYWJzXCIgPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1jYWxlbmRhci1sYWJzL3NhbXBsZS1wby1jYWxlbmRhci1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tY2FsZW5kYXItbGFicy9zYW1wbGUtcG8tY2FsZW5kYXItbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxyXG4gKiA8L2V4YW1wbGU+XHJcbiAqXHJcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1jYWxlbmRhci10aWNrZXQtc2FsZXNcIiB0aXRsZT1cIlBPIENhbGVuZGFyIC0gVGlja2V0IFNhbGVzXCIgPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1jYWxlbmRhci10aWNrZXQtc2FsZXMvc2FtcGxlLXBvLWNhbGVuZGFyLXRpY2tldC1zYWxlcy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWNhbGVuZGFyLXRpY2tldC1zYWxlcy9zYW1wbGUtcG8tY2FsZW5kYXItdGlja2V0LXNhbGVzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XHJcbiAqIDwvZXhhbXBsZT5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAncG8tY2FsZW5kYXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1jYWxlbmRhci5jb21wb25lbnQuaHRtbCcsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgcHJvdmlkZXJzXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQb0NhbGVuZGFyQ29tcG9uZW50IGV4dGVuZHMgUG9DYWxlbmRhckJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XHJcbiAgaG92ZXJWYWx1ZTogRGF0ZTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHBvRGF0ZTogUG9EYXRlU2VydmljZSwgbGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSkge1xyXG4gICAgc3VwZXIocG9EYXRlLCBsYW5ndWFnZVNlcnZpY2UpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlzUmVzcG9uc2l2ZSgpIHtcclxuICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCA8IHBvQ2FsZW5kYXJSYW5nZVdpZHRoO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLnNldEFjdGl2YXRlRGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgaWYgKGNoYW5nZXMubWluRGF0ZSB8fCBjaGFuZ2VzLm1heERhdGUpIHtcclxuICAgICAgdGhpcy5zZXRBY3RpdmF0ZURhdGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEFjdGl2YXRlRGF0ZShwYXJ0VHlwZSkge1xyXG4gICAgaWYgKHRoaXMuaXNSYW5nZSAmJiB0aGlzLmFjdGl2YXRlRGF0ZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5hY3RpdmF0ZURhdGVbcGFydFR5cGVdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMuYWN0aXZhdGVEYXRlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0VmFsdWUocGFydFR5cGUpIHtcclxuICAgIGlmICh0aGlzLmlzUmFuZ2UgJiYgdGhpcy52YWx1ZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy52YWx1ZVtwYXJ0VHlwZV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uU2VsZWN0RGF0ZShzZWxlY3RlZERhdGUsIHBhcnRUeXBlPykge1xyXG4gICAgbGV0IG5ld1ZhbHVlO1xyXG5cclxuICAgIGlmICh0aGlzLmlzUmFuZ2UpIHtcclxuICAgICAgbmV3VmFsdWUgPSB0aGlzLmdldFZhbHVlRnJvbVNlbGVjdGVkRGF0ZShzZWxlY3RlZERhdGUpO1xyXG5cclxuICAgICAgaWYgKHBhcnRUeXBlID09PSAnZW5kJyAmJiAoIXRoaXMudmFsdWU/LnN0YXJ0IHx8ICh0aGlzLnZhbHVlLnN0YXJ0ICYmIHRoaXMudmFsdWUuZW5kKSkpIHtcclxuICAgICAgICB0aGlzLnNldEFjdGl2YXRlRGF0ZShzZWxlY3RlZERhdGUpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBuZXdWYWx1ZSA9IHNlbGVjdGVkRGF0ZTtcclxuICAgICAgdGhpcy5zZXRBY3RpdmF0ZURhdGUoc2VsZWN0ZWREYXRlKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICBjb25zdCBuZXdNb2RlbCA9IHRoaXMuY29udmVydERhdGVUb0lTTyh0aGlzLnZhbHVlKTtcclxuICAgIHRoaXMudXBkYXRlTW9kZWwobmV3TW9kZWwpO1xyXG4gICAgdGhpcy5jaGFuZ2UuZW1pdChuZXdNb2RlbCk7XHJcbiAgfVxyXG5cclxuICBvbkhvdmVyRGF0ZShkYXRlKSB7XHJcbiAgICB0aGlzLmhvdmVyVmFsdWUgPSBkYXRlO1xyXG4gIH1cclxuXHJcbiAgb25IZWFkZXJDaGFuZ2UoeyBtb250aCwgeWVhciB9LCBwYXJ0VHlwZSkge1xyXG4gICAgaWYgKHRoaXMuaXNSYW5nZSkge1xyXG4gICAgICBsZXQgbmV3U3RhcnQ7XHJcbiAgICAgIGxldCBuZXdFbmQ7XHJcbiAgICAgIGNvbnN0IHsgc3RhcnQsIGVuZCB9ID0gdGhpcy5hY3RpdmF0ZURhdGU7XHJcblxyXG4gICAgICBpZiAocGFydFR5cGUgPT09ICdlbmQnKSB7XHJcbiAgICAgICAgY29uc3QgbmV3WWVhciA9IG1vbnRoID09PSAwID8geWVhciAtIDEgOiB5ZWFyO1xyXG5cclxuICAgICAgICBuZXdTdGFydCA9IG5ldyBEYXRlKG5ldyBEYXRlKHN0YXJ0LnNldE1vbnRoKG1vbnRoIC0gMSkpLnNldEZ1bGxZZWFyKG5ld1llYXIpKTtcclxuICAgICAgICBuZXdFbmQgPSBuZXcgRGF0ZShuZXcgRGF0ZShlbmQuc2V0TW9udGgobW9udGgpKS5zZXRGdWxsWWVhcih5ZWFyKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgbmV3WWVhciA9IG1vbnRoID09PSAxMSA/IHllYXIgKyAxIDogeWVhcjtcclxuXHJcbiAgICAgICAgbmV3RW5kID0gbmV3IERhdGUobmV3IERhdGUoZW5kLnNldE1vbnRoKG1vbnRoICsgMSkpLnNldEZ1bGxZZWFyKG5ld1llYXIpKTtcclxuICAgICAgICBuZXdTdGFydCA9IG5ldyBEYXRlKG5ldyBEYXRlKHN0YXJ0LnNldE1vbnRoKG1vbnRoKSkuc2V0RnVsbFllYXIoeWVhcikpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmFjdGl2YXRlRGF0ZSA9IHsgc3RhcnQ6IG5ld1N0YXJ0LCBlbmQ6IG5ld0VuZCB9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XHJcbiAgICB0aGlzLnByb3BhZ2F0ZUNoYW5nZSA9IGZuO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPblRvdWNoZWQoZnVuYzogYW55KTogdm9pZCB7XHJcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZ1bmM7XHJcbiAgfVxyXG5cclxuICB2YWxpZGF0ZShjOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KSB7XHJcbiAgICBpZiAodmFsdWUpIHtcclxuICAgICAgdGhpcy53cml0ZURhdGUodmFsdWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy52YWx1ZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYWN0aXZhdGVEYXRlID0gdGhpcy5nZXRWYWxpZGF0ZVN0YXJ0RGF0ZSh2YWx1ZSk7XHJcbiAgICB0aGlzLnNldEFjdGl2YXRlRGF0ZShhY3RpdmF0ZURhdGUpO1xyXG5cclxuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IubWFya0ZvckNoZWNrKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFZhbGlkYXRlU3RhcnREYXRlKHZhbHVlKSB7XHJcbiAgICBpZiAodGhpcy5pc1JhbmdlKSB7XHJcbiAgICAgIHJldHVybiB2YWx1ZT8uc3RhcnQgfHwgbnVsbDtcclxuICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRWYWx1ZUZyb21TZWxlY3RlZERhdGUoc2VsZWN0ZWREYXRlOiBEYXRlKTogeyBzdGFydDogRGF0ZTsgZW5kPzogRGF0ZSB9IHtcclxuICAgIGlmICghdGhpcy52YWx1ZT8uc3RhcnQgfHwgdGhpcy52YWx1ZS5zdGFydCA+IHNlbGVjdGVkRGF0ZSB8fCAodGhpcy52YWx1ZS5lbmQgJiYgdGhpcy52YWx1ZS5zdGFydCkpIHtcclxuICAgICAgcmV0dXJuIHsgc3RhcnQ6IG5ldyBEYXRlKHNlbGVjdGVkRGF0ZSksIGVuZDogbnVsbCB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7IHN0YXJ0OiBuZXcgRGF0ZSh0aGlzLnZhbHVlLnN0YXJ0KSwgZW5kOiBuZXcgRGF0ZShzZWxlY3RlZERhdGUpIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNvbnZlcnREYXRlVG9JU08oZGF0ZSkge1xyXG4gICAgaWYgKHRoaXMuaXNSYW5nZSkge1xyXG4gICAgICBjb25zdCBzdGFydCA9IGRhdGU/LnN0YXJ0IGluc3RhbmNlb2YgRGF0ZSA/IHRoaXMucG9EYXRlLmNvbnZlcnREYXRlVG9JU08oZGF0ZS5zdGFydCkgOiBudWxsO1xyXG4gICAgICBjb25zdCBlbmQgPSBkYXRlPy5lbmQgaW5zdGFuY2VvZiBEYXRlID8gdGhpcy5wb0RhdGUuY29udmVydERhdGVUb0lTTyhkYXRlLmVuZCkgOiBudWxsO1xyXG5cclxuICAgICAgcmV0dXJuIHsgc3RhcnQsIGVuZCB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMucG9EYXRlLmNvbnZlcnREYXRlVG9JU08oZGF0ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNvbnZlcnREYXRlRnJvbUlzbyhzdHJpbmdEYXRlOiBzdHJpbmcpIHtcclxuICAgIGlmIChzdHJpbmdEYXRlICYmIHR5cGVvZiBzdHJpbmdEYXRlID09PSAnc3RyaW5nJykge1xyXG4gICAgICBjb25zdCB7IHllYXIsIG1vbnRoLCBkYXkgfSA9IHRoaXMucG9EYXRlLmdldERhdGVGcm9tSXNvKHN0cmluZ0RhdGUpO1xyXG4gICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXkpO1xyXG4gICAgICB0aGlzLnBvRGF0ZS5zZXRZZWFyRnJvbTBUbzEwMChkYXRlLCB5ZWFyKTtcclxuXHJcbiAgICAgIHJldHVybiBkYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVNb2RlbCh2YWx1ZSkge1xyXG4gICAgaWYgKHRoaXMucHJvcGFnYXRlQ2hhbmdlKSB7XHJcbiAgICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlKHZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgd3JpdGVEYXRlKHZhbHVlOiBhbnkpIHtcclxuICAgIGlmICh0aGlzLmlzUmFuZ2UpIHtcclxuICAgICAgY29uc3Qgc3RhcnQgPSB2YWx1ZT8uc3RhcnQ7XHJcbiAgICAgIGNvbnN0IGVuZCA9IHZhbHVlPy5lbmQ7XHJcblxyXG4gICAgICBjb25zdCBuZXdTdGFydCA9IHN0YXJ0IGluc3RhbmNlb2YgRGF0ZSA/IG5ldyBEYXRlKHN0YXJ0KSA6IHRoaXMuY29udmVydERhdGVGcm9tSXNvKHN0YXJ0KTtcclxuICAgICAgY29uc3QgbmV3RW5kID0gZW5kIGluc3RhbmNlb2YgRGF0ZSA/IG5ldyBEYXRlKGVuZCkgOiB0aGlzLmNvbnZlcnREYXRlRnJvbUlzbyhlbmQpO1xyXG5cclxuICAgICAgdGhpcy52YWx1ZSA9IHsgc3RhcnQ6IG5ld1N0YXJ0LCBlbmQ6IG5ld0VuZCB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSA/IG5ldyBEYXRlKHZhbHVlKSA6IHRoaXMuY29udmVydERhdGVGcm9tSXNvKHZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19