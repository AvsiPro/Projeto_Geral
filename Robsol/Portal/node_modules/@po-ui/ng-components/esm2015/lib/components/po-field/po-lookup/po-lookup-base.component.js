import { __decorate } from "tslib";
import { Directive, EventEmitter, Inject, InjectFlags, Injector, Input, Output } from '@angular/core';
import { NgControl } from '@angular/forms';
import { finalize } from 'rxjs/operators';
import { InputBoolean } from '../../../decorators';
import { convertToBoolean, isTypeof } from '../../../utils/util';
import { requiredFailed } from '../validators';
import { PoLookupFilterService } from './services/po-lookup-filter.service';
/**
 * @description
 *
 * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviço. Nesta janela é possível buscar e
 * selecionar um ou mais registros que serão enviados para o campo. O `po-lookup` permite que o usuário digite um valor e pressione a tecla *TAB* para
 * buscar um registro.
 *
 * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo será limpado.
 * No segundo caso ocorrerá após este perder o foco; ambos os casos o campo ficará inválido quando requerido.
 *
 * > Enquanto o componente realiza a requisição ao servidor, o componente ficará desabilitado e com o status interno do
 * [modelo](https://angular.io/guide/form-validation#creating-asynchronous-validators) como `pending`.
 *
 * Este componente não é recomendado quando a busca dos dados possuir poucas informações, para isso utilize outros componentes como o
 * `po-select` ou o `po-combo`.
 */
export class PoLookupBaseComponent {
    constructor(defaultService, injector) {
        this.defaultService = defaultService;
        this.injector = injector;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @optional
         *
         * @description
         *
         * Ativa a funcionalidade de scroll infinito para a tabela exibida no retorno da consulta.
         *
         * @default `false`
         */
        this.infiniteScroll = false;
        /** Exibe um ícone que permite limpar o campo. */
        this.clean = false;
        /**
         * @optional
         *
         * @description
         *
         * Permite a seleção de múltiplos itens.
         *
         * > Quando habilitado o valor do campo passará a ser uma lista de valores, por exemplo: `[ 12345, 67890 ]`
         *
         * @default `false`
         */
        this.multiple = false;
        /**
         * @optional
         *
         * @description
         *
         * Define que a altura do componente será auto ajustável, possuindo uma altura minima porém a altura máxima será de acordo
         * com o número de itens selecionados e a extensão dos mesmos, mantendo-os sempre visíveis.
         *
         * @default `false`
         */
        this.autoHeight = false;
        /**
         * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
         * Será passado por parâmetro o objeto de erro retornado.
         */
        this.onError = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento será disparado quando ocorrer alguma seleção.
         * Será passado por parâmetro o objeto com o valor selecionado.
         */
        this.selected = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         *  Evento que será disparado ao alterar o model.
         *  Por parâmetro será passado o novo valor.
         */
        this.change = new EventEmitter();
        this.selectedOptions = [];
        this.oldValue = '';
        this.oldValueToModel = null;
        // eslint-disable-next-line
        this.onTouched = null;
        this._disabled = false;
        this._placeholder = '';
        this._required = false;
        this._autoHeight = false;
        this.onChangePropagate = null;
    }
    /** Mensagem que aparecerá enquanto o campo não estiver preenchido. */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    /** Indica a coluna que será utilizada como descrição do campo e como filtro dentro da janela. */
    set fieldLabel(value) {
        this._fieldLabel = value;
        this.keysDescription = [this.fieldLabel];
    }
    get fieldLabel() {
        return this._fieldLabel;
    }
    /**
     * Serviço responsável por buscar os dados da tabela na janela. Pode ser informado um serviço que implemente a interface
     * `PoLookupFilter` ou uma URL.
     *
     * Quando utilizada uma URL de um serviço, será concatenada nesta URL o valor que deseja-se filtrar, por exemplo:
     *
     * ```
     * url + ?page=1&pageSize=20&filter=Peter
     * ```
     *
     * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:
     * - Coluna decrescente:
     * ```
     *  url + ?page=1&pageSize=20&filter=Peter&order=-name
     * ```
     *
     * - Coluna ascendente:
     * ```
     *  url + ?page=1&pageSize=20&filter=Peter&order=name
     * ```
     *
     * Se for definido a propriedade `p-filter-params`, o mesmo também será concatenado. Por exemplo, para o
     * parâmetro `{ age: 23 }` a URL ficaria:
     *
     * ```
     * url + ?page=1&pageSize=20&age=23&filter=Peter
     * ```
     *
     * Ao iniciar o campo com valor, os registros serão buscados da seguinte forma:
     * ```
     * model = 1234;
     *
     * GET url/1234
     * ```
     *
     * Caso estiver com múltipla seleção habilitada:
     * ```
     * model = [1234, 5678]
     *
     * GET url?${fieldValue}=1234,5678
     * ```
     *
     * > Esta URL deve retornar e receber os dados no padrão de [API do PO UI](https://po-ui.io/guides/api) e utiliza os valores
     * definidos nas propriedades `p-field-label` e `p-field-value` para a construção do `po-lookup`.
     *
     * Caso o usuário digite um valor e pressione a tecla *TAB* para realizar a busca de um registro específico, o valor que se
     * deseja filtrar será codificado utilizando a função [encodeURIComponent](https://tc39.es/ecma262/#sec-encodeuricomponent-uricomponent)
     * e concatenado na URL da seguinte forma:
     *
     * ```
     * url/valor%20que%20se%20deseja%20filtrar
     * ```
     *
     * > Quando informado um serviço que implemente a interface `PoLookupFilter` o tratamento de encoding do valor a ser filtrado ficará a cargo do desenvolvedor.
     *
     */
    set filterService(filterService) {
        this._filterService = filterService;
        this.setService(this.filterService);
    }
    get filterService() {
        return this._filterService;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * @default `false`
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * @optional
     * @description
     *
     * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.valueToModel);
    }
    get required() {
        return this._required;
    }
    /**
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default false
     * @optional
     */
    set disabled(disabled) {
        this._disabled = disabled === '' ? true : convertToBoolean(disabled);
    }
    get disabled() {
        return this._disabled;
    }
    ngOnDestroy() {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        this.initializeColumn();
    }
    ngAfterViewInit() {
        this.setControl();
    }
    cleanModel() {
        this.cleanViewValue();
        this.callOnChange(undefined);
    }
    ngOnChanges(changes) {
        if (changes.multiple && isTypeof(this.filterService, 'string')) {
            this.service.setConfig(this.filterService, this.fieldValue, this.multiple);
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    registerOnTouched(func) {
        this.onTouched = func;
    }
    // Seleciona o valor do model.
    selectValue(valueSelected) {
        this.valueToModel = valueSelected;
        this.callOnChange(this.valueToModel);
        this.selected.emit(valueSelected);
    }
    callOnChange(value) {
        // Quando o input não possui um formulário, então esta função não é registrada.
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
        if (this.oldValueToModel !== this.valueToModel) {
            this.change.emit(this.valueToModel);
        }
        // Armazenar o valor antigo do model
        this.oldValueToModel = this.valueToModel;
    }
    searchById(value) {
        let checkedValue = value;
        if (typeof checkedValue === 'string') {
            checkedValue = checkedValue.trim();
        }
        if (checkedValue !== '') {
            const oldDisable = this.disabled;
            this.disabled = true;
            if (this.control) {
                // :TODO: Retirar no futuro pois esse setTimeout foi feito
                // pois quando o campo é acionado pelos métodos setValue ou patchValue
                // a mudança não é detectada
                setTimeout(() => this.control.markAsPending());
            }
            this.getSubscription = this.service
                .getObjectByValue(value, this.filterParams)
                .pipe(finalize(() => {
                this.disabled = oldDisable;
                if (this.control) {
                    this.control.updateValueAndValidity();
                }
            }))
                .subscribe(element => {
                if ((element === null || element === void 0 ? void 0 : element.length) || (!Array.isArray(element) && element)) {
                    if (Array.isArray(element) && element.length > 1) {
                        this.setDisclaimers(element);
                        this.updateVisibleItems();
                    }
                    this.selectModel(this.multiple ? element : [element]);
                }
                else {
                    this.cleanModel();
                }
            }, error => {
                this.cleanModel();
                this.onError.emit(error);
            });
        }
        else {
            this.cleanModel();
        }
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    writeValue(value) {
        if ((value === null || value === void 0 ? void 0 : value.length) || (!Array.isArray(value) && value)) {
            // Esta condição é executada somente quando é passado o ID para realizar a busca pelo ID.
            this.searchById(value);
        }
        else {
            this.cleanViewValue();
        }
    }
    cleanViewValue() {
        this.setDisclaimers([]);
        this.setViewValue('', {});
        this.oldValue = '';
        this.valueToModel = null;
    }
    // Formata a label do campo.
    getFormattedLabel(value) {
        return value ? this.keysDescription.map(column => value[column]).join(' - ') : '';
    }
    // Chama o método writeValue e preenche o model.
    selectModel(options) {
        if (options.length) {
            this.selectedOptions = [...options];
            const newModel = this.multiple ? options.map(option => option[this.fieldValue]) : options[0][this.fieldValue];
            this.selectValue(newModel);
            if (options.length === 1) {
                this.oldValue = options[0][this.fieldLabel];
                this.setViewValue(this.getFormattedLabel(options[0]), options[0]);
            }
        }
        else {
            this.selectValue(undefined);
            this.cleanViewValue();
        }
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    setService(service) {
        if (isTypeof(service, 'object')) {
            this.service = service;
        }
        if (service && isTypeof(service, 'string')) {
            this.service = this.defaultService;
            this.service.setConfig(service, this.fieldValue, this.multiple);
        }
    }
    setControl() {
        const ngControl = this.injector.get(NgControl, null, InjectFlags.Self);
        if (ngControl) {
            this.control = ngControl.control;
        }
    }
    initializeColumn() {
        if (this.fieldLabel) {
            this.keysDescription = [this.fieldLabel];
        }
        else {
            this.keysDescription = [];
            this.keysDescription = this.columns.filter(element => element.fieldLabel).map(element => element.property);
        }
    }
}
PoLookupBaseComponent.decorators = [
    { type: Directive }
];
PoLookupBaseComponent.ctorParameters = () => [
    { type: PoLookupFilterService },
    { type: Injector, decorators: [{ type: Inject, args: [Injector,] }] }
];
PoLookupBaseComponent.propDecorators = {
    autoFocus: [{ type: Input, args: ['p-auto-focus',] }],
    label: [{ type: Input, args: ['p-label',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    help: [{ type: Input, args: ['p-help',] }],
    placeholder: [{ type: Input, args: ['p-placeholder',] }],
    name: [{ type: Input, args: ['name',] }],
    fieldValue: [{ type: Input, args: ['p-field-value',] }],
    fieldLabel: [{ type: Input, args: ['p-field-label',] }],
    filterParams: [{ type: Input, args: ['p-filter-params',] }],
    fieldFormat: [{ type: Input, args: ['p-field-format',] }],
    columns: [{ type: Input, args: ['p-columns',] }],
    optional: [{ type: Input, args: ['p-optional',] }],
    advancedFilters: [{ type: Input, args: ['p-advanced-filters',] }],
    infiniteScroll: [{ type: Input, args: ['p-infinite-scroll',] }],
    clean: [{ type: Input, args: ['p-clean',] }],
    multiple: [{ type: Input, args: ['p-multiple',] }],
    autoHeight: [{ type: Input, args: ['p-auto-height',] }],
    onError: [{ type: Output, args: ['p-error',] }],
    selected: [{ type: Output, args: ['p-selected',] }],
    change: [{ type: Output, args: ['p-change',] }],
    filterService: [{ type: Input, args: ['p-filter-service',] }],
    noAutocomplete: [{ type: Input, args: ['p-no-autocomplete',] }],
    required: [{ type: Input, args: ['p-required',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }]
};
__decorate([
    InputBoolean()
], PoLookupBaseComponent.prototype, "autoFocus", void 0);
__decorate([
    InputBoolean()
], PoLookupBaseComponent.prototype, "infiniteScroll", void 0);
__decorate([
    InputBoolean()
], PoLookupBaseComponent.prototype, "clean", void 0);
__decorate([
    InputBoolean()
], PoLookupBaseComponent.prototype, "multiple", void 0);
__decorate([
    InputBoolean()
], PoLookupBaseComponent.prototype, "autoHeight", void 0);
//# sourceMappingURL=data:application/json;base64,