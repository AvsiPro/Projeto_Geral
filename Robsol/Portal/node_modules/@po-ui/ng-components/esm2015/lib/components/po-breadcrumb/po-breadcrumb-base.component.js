import { Input, Directive } from '@angular/core';
/**
 * @description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `p-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `p-params-service` que recebe um objeto contendo as informações.
 */
export class PoBreadcrumbBaseComponent {
    constructor() {
        this.itemsView = [];
        this._items = [];
    }
    /**
     * @description
     *
     * Lista de itens do _breadcrumb_.
     *
     * **Exemplo:**
     * ```
     * { label: 'Po Portal', link: 'portal' }
     * ```
     */
    set items(items) {
        this._items = items;
        this.itemsView = [].concat(items);
    }
    get items() {
        return this._items;
    }
}
PoBreadcrumbBaseComponent.decorators = [
    { type: Directive }
];
PoBreadcrumbBaseComponent.propDecorators = {
    favoriteService: [{ type: Input, args: ['p-favorite-service',] }],
    paramsService: [{ type: Input, args: ['p-params-service',] }],
    items: [{ type: Input, args: ['p-items',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1icmVhZGNydW1iL3BvLWJyZWFkY3J1bWItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJakQ7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFFSCxNQUFNLE9BQU8seUJBQXlCO0lBRHRDO1FBMEVFLGNBQVMsR0FBNEIsRUFBRSxDQUFDO1FBS2hDLFdBQU0sR0FBNEIsRUFBRSxDQUFDO0lBb0IvQyxDQUFDO0lBbEJDOzs7Ozs7Ozs7T0FTRztJQUNILElBQXNCLEtBQUssQ0FBQyxLQUE4QjtRQUN4RCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDOzs7WUFsR0YsU0FBUzs7OzhCQStEUCxLQUFLLFNBQUMsb0JBQW9COzRCQVMxQixLQUFLLFNBQUMsa0JBQWtCO29CQW1CeEIsS0FBSyxTQUFDLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBQb0JyZWFkY3J1bWJJdGVtIH0gZnJvbSAnLi9wby1icmVhZGNydW1iLWl0ZW0uaW50ZXJmYWNlJztcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogRXN0ZSBjb21wb25lbnRlIGdlcmEgdW1hIGVzdHJ1dHVyYSBkZSBuYXZlZ2HDp8OjbyBxdWUgYXByZXNlbnRhIGFvIHVzdcOhcmlvIGEgbG9jYWxpemHDp8Ojb1xyXG4gKiBkYSBVUkwgYXR1YWwsIGV4aWJpbmRvIGFzIGFudGVjZXNzb3JhcyBjb25mb3JtZSDDqSByZWFsaXphZG8gYSBuYXZlZ2HDp8OjbyBuYSBhcGxpY2HDp8Ojby5cclxuICpcclxuICogUXVhbmRvIG7Do28gaG91dmVyIGVzcGHDp2FtZW50byBzdWZpY2llbnRlIHBhcmEgZXhpYmktbMOhcywgbyBjb21wb25lbnRlIHNlIGVuY2FycmVnYSB0YW1iw6ltXHJcbiAqIGRlIGFncnVwYXIgYXMgVVJMcyBhbnRlY2Vzc29yYXMsIGdlcmFuZG8gYXNzaW0gdW0gw61jb25lIHF1ZSBwZXJtaXRlIGEgdmlzdWFsaXphw6fDo28gZW0gY2FzY2F0YS5cclxuICpcclxuICogQ2FzbyB1bSBlbmRlcmXDp28gc2VqYSBlc3BlY2lmaWNhZG8gbmEgcHJvcHJpZWRhZGUgYHAtZmF2b3JpdGUtc2VydmljZWAsIG8gY29tcG9uZW50ZSBwZXJtaXRlIGFvIHVzdcOhcmlvXHJcbiAqIGZhdm9yaXRhciBhIFVSTC5cclxuICpcclxuICogSGF2ZW5kbyBuZWNlc3NpZGFkZSBkZSBpbmNsdWlyIHBhcsOibWV0cm9zIG5hIHJlcXVpc2nDp8OjbyBkbyBzZXJ2acOnbyxcclxuICogbyBjb21wb25lbnRlIGRpc3DDtWUgZGEgcHJvcHJpZWRhZGUgYHAtcGFyYW1zLXNlcnZpY2VgIHF1ZSByZWNlYmUgdW0gb2JqZXRvIGNvbnRlbmRvIGFzIGluZm9ybWHDp8O1ZXMuXHJcbiAqL1xyXG5ARGlyZWN0aXZlKClcclxuZXhwb3J0IGNsYXNzIFBvQnJlYWRjcnVtYkJhc2VDb21wb25lbnQge1xyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBQZXJtaXRlIGRlZmluaXIgdW1hIFVSTCBubyBjb21wb25lbnRlIGBwby1icmVhZGNydW1iYCBwYXJhIGZhdm9yaXRhciBvdSBkZXNmYXZvcml0YXIuXHJcbiAgICogPiBQYXJhIHV0aWxpemFyIGVzdGEgcHJvcHJpZWRhZGUsIG8gw7psdGltbyBgUG9CcmVhZGNydW1iSXRlbWAgZGEgbGlzdGEgZGUgaXRlbXMgZGEgcHJvcHJpZWRhZGUgYHAtaXRlbXNgIGRldmUgdGVyIHVtIGxpbmsgaW5mb3JtYWRvLlxyXG4gICAqXHJcbiAgICogPiBBIEFQSSBkZXZlIGVzdGFyIHByZXBhcmFkYSBwYXJhIHJldG9ybmFyIHVtIG9iamV0byBubyBmb3JtYXRvIGB7IGlzRmF2b3JpdGU6IGJvb2xlYW4gfWAuXHJcbiAgICpcclxuICAgKiBBbyBpbmljaWFyLCBvIGBwby1icmVhZGNydW1iYCBmYXogdW0gR0VUIG5hIFVSTCBkZWZpbmlkYSBuYSBwcm9wcmllZGFkZSBgcC1mYXZvcml0ZS1zZXJ2aWNlYCBlIGRldmUgcmV0b3JuYXIgYSBwcm9wcmllZGFkZVxyXG4gICAqIGB7IGlzRmF2b3JpdGU6IGJvb2xlYW4gfWAgZG8gw7psdGltbyBgUG9CcmVhZGNydW1iSXRlbWAgZGVmaW5pZG8gbmEgbGlzdGEgZGUgaXRlbnMgZGEgcHJvcHJpZWRhZGUgYHAtaXRlbXNgLlxyXG4gICAqXHJcbiAgICogQW8gY2xpY2FyIGVtIGZhdm9yaXRhciBvdSBkZXNmYXZvcml0YXIgbyBgcG8tYnJlYWRjcnVtYmAgZmF6IHVtIFBPU1QgY29tIG8gbGluayBlIGEgcHJvcHJpZWRhZGUgYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YFxyXG4gICAqIGRlZmluaWRvcyBubyDDumx0aW1vIGl0ZW0gZGEgcHJvcHJpZWRhZGUgYHAtaXRlbXNgLlxyXG4gICAqXHJcbiAgICogPiBDYXNvIGFsZ3VtIHBhcsOibWV0cm8gc2VqYSBkZWZpbmlkbyBuYSBwcm9wcmllZGFkZSBgcC1wYXJhbXMtc2VydmljZWAsIG8gbWVzbW8gc2Vyw6EgZW52aWFkbyBwYXJhIGEgQVBJIGUgcmV0b3JuYXLDoVxyXG4gICAqIGFww7NzIGZhemVyIHVtIEdFVCBvdSBQT1NULlxyXG4gICAqXHJcbiAgICogRXhlbXBsbyBkZSBVUkwgY29udGVuZG8gbyBzZXJ2acOnbyBkZSBmYXZvcml0YXIgb3UgZGVzZmF2b3JpdGFyOlxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogaHR0cHM6Ly9wby11aS5pby9zYW1wbGUvYXBpL2Zhdm9yaXRlXHJcbiAgICogYGBgXHJcbiAgICpcclxuICAgKiBBbyBmYXplciBvIEdFVCBvIGBwby1icmVhZGNydW1iYCBjb25jYXRlbmEgbyBsaW5rIGNvbSBhIFVSTCBkZSBzZXJ2acOnby4gRXhlbXBsbzpcclxuICAgKlxyXG4gICAqIGBgYFxyXG4gICAqIEdFVCBodHRwOi8vPGRvbWFpbj4vYXBpL2Zhdm9yaXRlP3VybD0vZXhhbXBsZVxyXG4gICAqIGBgYFxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogR0VUIGh0dHA6Ly9wby5jb20uYnIvc2FtcGxlL2FwaS9mYXZvcml0ZT91cmw9L2V4YW1wbGVcclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqIGBgYFxyXG4gICAqIFBPU1RcclxuICAgKiBwYXlsb2FkOiB7IGlzRmF2b3JpdGU6IHRydWUsIHVybDogJy9leGFtcGxlJyB9XHJcbiAgICogYGBgXHJcbiAgICpcclxuICAgKiBDYXNvIHBvc3N1YSBwYXLDom1ldHJvcyBkZWZpbmlkb3MgbmEgcHJvcHJpZWRhZGUgYHAtcGFyYW1zLXNlcnZpY2VgOlxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogUE9TVFxyXG4gICAqIHBheWxvYWQ6IHsgaXNGYXZvcml0ZTogdHJ1ZSwgdXJsOiBcIi9leGFtcGxlXCIsIHBhcmFtczogXCJ7IGlkOiAxNCwgdXNlcjogJ2Rldi5wbycgfVwiIH1cclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqIEV4ZW1wbG9zIGRlIHJldG9ybm86XHJcbiAgICpcclxuICAgKiBgYGBcclxuICAgKiB7IGlzRmF2b3JpdGU6IHRydWUsIHVybDogXCIvZXhhbXBsZVwiIH1cclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqIGBgYFxyXG4gICAqIHsgaXNGYXZvcml0ZTogZmFsc2UsIHVybDogXCIvZXhhbXBsZVwiIH1cclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqIGBgYFxyXG4gICAqIHsgaXNGYXZvcml0ZTogZmFsc2UsIHVybDogXCIvZXhhbXBsZVwiLCBwYXJhbXM6IFwieyBpZDogMTQsIHVzZXI6ICdkZXYucG8nIH1cIiB9XHJcbiAgICogYGBgXHJcbiAgICovXHJcbiAgQElucHV0KCdwLWZhdm9yaXRlLXNlcnZpY2UnKSBmYXZvcml0ZVNlcnZpY2U/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBPYmpldG8gcXVlIHBvc3NpYmlsaXRhIG8gZW52aW8gZGUgcGFyw6JtZXRyb3MgYWRpY2lvbmFpcyDDoCByZXF1aXNpw6fDo28uXHJcbiAgICovXHJcbiAgQElucHV0KCdwLXBhcmFtcy1zZXJ2aWNlJykgcGFyYW1zU2VydmljZT86IG9iamVjdDtcclxuXHJcbiAgaXRlbXNWaWV3OiBBcnJheTxQb0JyZWFkY3J1bWJJdGVtPiA9IFtdO1xyXG5cclxuICBwcm90ZWN0ZWQgY2xpY2tvdXRMaXN0ZW5lcjogKCkgPT4gdm9pZDtcclxuICBwcm90ZWN0ZWQgcmVzaXplTGlzdGVuZXI6ICgpID0+IHZvaWQ7XHJcblxyXG4gIHByaXZhdGUgX2l0ZW1zOiBBcnJheTxQb0JyZWFkY3J1bWJJdGVtPiA9IFtdO1xyXG5cclxuICAvKipcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIExpc3RhIGRlIGl0ZW5zIGRvIF9icmVhZGNydW1iXy5cclxuICAgKlxyXG4gICAqICoqRXhlbXBsbzoqKlxyXG4gICAqIGBgYFxyXG4gICAqIHsgbGFiZWw6ICdQbyBQb3J0YWwnLCBsaW5rOiAncG9ydGFsJyB9XHJcbiAgICogYGBgXHJcbiAgICovXHJcbiAgQElucHV0KCdwLWl0ZW1zJykgc2V0IGl0ZW1zKGl0ZW1zOiBBcnJheTxQb0JyZWFkY3J1bWJJdGVtPikge1xyXG4gICAgdGhpcy5faXRlbXMgPSBpdGVtcztcclxuICAgIHRoaXMuaXRlbXNWaWV3ID0gW10uY29uY2F0KGl0ZW1zKTtcclxuICB9XHJcblxyXG4gIGdldCBpdGVtcygpIHtcclxuICAgIHJldHVybiB0aGlzLl9pdGVtcztcclxuICB9XHJcbn1cclxuIl19