import { Component } from '@angular/core';
import { PoChartPlotAreaPaddingTop } from './../../helpers/po-chart-default-values.constant';
import { PoChartBarBaseComponent } from './po-chart-bar-base.component';
import { PoChartMathsService } from './../../services/po-chart-maths.service';
export class PoChartBarComponent extends PoChartBarBaseComponent {
    constructor(mathsService) {
        super(mathsService);
        this.mathsService = mathsService;
        this.tooltipPosition = 'right';
    }
    barCoordinates(seriesIndex, serieItemDataIndex, containerSize, minMaxSeriesValues, serieValue) {
        const { svgPlottingAreaWidth, barHeight, spaceBetweenBars } = this.calculateElementsMeasurements(containerSize);
        const { x1, x2 } = this.xCoordinates(minMaxSeriesValues, svgPlottingAreaWidth, containerSize.axisXLabelWidth, containerSize.svgWidth, serieValue);
        const { y1, y2 } = this.yCoordinates(seriesIndex, serieItemDataIndex, containerSize.svgPlottingAreaHeight, barHeight, spaceBetweenBars);
        return ['M', x1, y2, 'L', x2, y2, 'L', x2, y1, 'L', x1, y1, 'z'].join(' ');
    }
    calculateElementsMeasurements(containerSize) {
        const { svgWidth, svgPlottingAreaHeight, axisXLabelWidth } = containerSize;
        // Fração das séries em relação à largura da categoria. Incrementa + 2 na extensão das séries pois se trata da área de margem entre as categorias.
        const svgPlottingAreaWidth = svgWidth - axisXLabelWidth;
        const categoryHeight = svgPlottingAreaHeight / this.seriesGreaterLength;
        const columnFraction = categoryHeight / (this.series.length + 2);
        // Área entre as colunas: retorna zero se houver apenas uma série.
        const spaceBetweenBars = this.series.length > 1 ? columnFraction / (this.series.length + 2) : 0;
        // Subtrai a fração das séries pelo espaço entre as colunas.
        const barHeight = columnFraction - (spaceBetweenBars * (this.series.length - 1)) / (this.series.length + 2);
        return { svgPlottingAreaWidth, barHeight, spaceBetweenBars };
    }
    xCoordinates(minMaxSeriesValues, svgPlottingAreaWidth, axisXLabelWidth, svgWidth, serieValue) {
        const { minValue } = minMaxSeriesValues;
        const valueZeroPercentage = this.mathsService.getSeriePercentage(minMaxSeriesValues, minValue < 0 ? 0 : minValue);
        const x1 = axisXLabelWidth + (svgWidth - axisXLabelWidth) * valueZeroPercentage;
        const xRatio = this.mathsService.getSeriePercentage(minMaxSeriesValues, serieValue);
        const x2 = Math.round(svgPlottingAreaWidth * xRatio + axisXLabelWidth);
        return { x1, x2 };
    }
    yCoordinates(seriesIndex, serieItemDataIndex, svgPlottingAreaHeight, barHeight, spaceBetweenBars) {
        const spaceBetweenAxisAndBars = barHeight;
        const yRatio = serieItemDataIndex / this.seriesGreaterLength;
        const y1 = Math.round(PoChartPlotAreaPaddingTop +
            svgPlottingAreaHeight * yRatio +
            spaceBetweenAxisAndBars +
            barHeight * seriesIndex +
            spaceBetweenBars * seriesIndex);
        const y2 = Math.round(y1 + barHeight);
        return { y1, y2 };
    }
}
PoChartBarComponent.decorators = [
    { type: Component, args: [{
                selector: '[po-chart-bar]',
                template: "<svg:g>\r\n  <svg:g *ngFor=\"let item of seriesPathsCoordinates; let i = index; trackBy: trackBy\"\r\n    [class]=\"'po-chart-bar-group-' + i\"\r\n  >\r\n    <!-- SERIES PATHS -->\r\n    <svg:g po-chart-bar-path\r\n      [attr.key]=\"'po-chart-bar-path-' + i\"\r\n      [p-color]=\"item[0]?.color\" \r\n      [p-coordinates]=\"item\"\r\n      [p-tooltip-position]=\"tooltipPosition\"\r\n      (p-bar-click)=\"onSerieBarClick($event)\"\r\n      (p-bar-hover)=\"onSerieBarHover($event)\"\r\n      >\r\n      </svg:g>\r\n  </svg:g>\r\n</svg:g>"
            },] }
];
PoChartBarComponent.ctorParameters = () => [
    { type: PoChartMathsService }
];
//# sourceMappingURL=data:application/json;base64,