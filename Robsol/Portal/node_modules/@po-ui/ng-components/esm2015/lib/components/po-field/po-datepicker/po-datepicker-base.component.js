import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertDateToISODate, convertDateToISOExtended, convertIsoToDate, convertToBoolean, formatYear, isTypeof, setYearFrom0To100, validateDateRange } from '../../../utils/util';
import { dateFailed, requiredFailed } from './../validators';
import { InputBoolean } from '../../../decorators';
import { PoMask } from '../po-input/po-mask';
import { PoDatepickerIsoFormat } from './enums/po-datepicker-iso-format.enum';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
import { poLocaleDefault } from '../../../services/po-language/po-language.constant';
const poDatepickerFormatDefault = 'dd/mm/yyyy';
/**
 * @description
 *
 * O `po-datepicker` é um componente específico para manipulação de datas permitindo a digitação e / ou seleção.
 *
 * O formato de exibição da data, ou seja, o formato que é apresentado ao usuário é o dd/mm/yyyy,
 * mas podem ser definidos outros padrões (veja mais na propriedade `p-format`).
 *
 * O idioma padrão do calendário será exibido de acordo com o navegador, caso tenha necessidade de alterar
 * use a propriedade `p-locale`.
 *
 * O datepicker aceita três formatos de data: o E8601DZw (yyyy-mm-ddThh:mm:ss+|-hh:mm), o E8601DAw (yyyy-mm-dd) e o
 * Date padrão do Javascript.
 *
 * > Por padrão, o formato de saída do *model* se ajustará conforme o formato de entrada. Se por acaso precisar controlar o valor de saída,
 * a propriedade `p-iso-format` provê esse controle independentemente do formato de entrada. Veja abaixo os formatos disponíveis:
 *
 * - Formato de entrada e saída (E8601DZw) - `'2017-11-28T00:00:00-02:00'`;
 *
 * - Formato de entrada e saída (E8601DAw) - `'2017-11-28'`;
 *
 * - Formato de entrada (Date) - `new Date(2017, 10, 28)` e saída (E8601DAw) - `'2017-11-28'`;
 *
 * **Importante:**
 *
 * - Para utilizar datas com ano inferior a 100, verificar o comportamento do [`new Date`](https://www.w3schools.com/js/js_dates.asp)
 * e utilizar o método [`setFullYear`](https://www.w3schools.com/jsref/jsref_setfullyear.asp).
 * - Caso a data esteja inválida, o `model` receberá **'Data inválida'**.
 * - Caso o `input` esteja passando um `[(ngModel)]`, mas não tenha um `name`, então irá ocorrer um erro
 * do próprio Angular (`[ngModelOptions]="{standalone: true}"`).
 *
 * Exemplo:
 *
 * ```
 * <po-datepicker
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}"
 * </po-datepicker>
 * ```
 *
 * > Não esqueça de importar o `FormsModule` em seu módulo, tal como para utilizar o `input default`.
 */
export class PoDatepickerBaseComponent {
    constructor(languageService) {
        this.languageService = languageService;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * Mensagem apresentada quando a data for inválida ou fora do período.
         *
         * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.
         */
        this.errorPattern = '';
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao sair do campo.
         */
        this.onblur = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao alterar valor do campo.
         */
        this.onchange = new EventEmitter();
        this.firstStart = true;
        this.hour = 'T00:00:01-00:00';
        this.isExtendedISO = false;
        this.onChangeModel = null;
        this.onTouchedModel = null;
        this._format = poDatepickerFormatDefault;
        this._noAutocomplete = false;
        this._placeholder = '';
        /** Desabilita o campo. */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.disabled = false;
        /** Torna o elemento somente leitura. */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.readonly = false;
        /** Faz com que o campo seja obrigatório. */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.required = false;
        /** Habilita ação para limpar o campo. */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.clean = false;
        this.shortLanguage = this.languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * @default `false`
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     */
    set placeholder(placeholder) {
        this._placeholder = isTypeof(placeholder, 'string') ? placeholder : '';
    }
    get placeholder() {
        return this._placeholder;
    }
    set setDisabled(disabled) {
        this.disabled = disabled === '' ? true : convertToBoolean(disabled);
        this.validateModel(convertDateToISOExtended(this.date, this.hour));
    }
    set setReadonly(readonly) {
        this.readonly = readonly === '' ? true : convertToBoolean(readonly);
    }
    set setRequired(required) {
        this.required = required === '' ? true : convertToBoolean(required);
        this.validateModel(convertDateToISOExtended(this.date, this.hour));
    }
    set setClean(clean) {
        this.clean = clean === '' ? true : convertToBoolean(clean);
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma data mínima para o `po-datepicker`.
     */
    set minDate(value) {
        if (value instanceof Date) {
            const year = value.getFullYear();
            const date = new Date(year, value.getMonth(), value.getDate(), 0, 0, 0);
            setYearFrom0To100(date, year);
            this._minDate = date;
        }
        else {
            this._minDate = convertIsoToDate(value, true, false);
        }
        this.validateModel(convertDateToISOExtended(this.date, this.hour));
    }
    get minDate() {
        return this._minDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma data máxima para o `po-datepicker`.
     */
    set maxDate(value) {
        if (value instanceof Date) {
            const year = value.getFullYear();
            const date = new Date(year, value.getMonth(), value.getDate(), 23, 59, 59);
            setYearFrom0To100(date, year);
            this._maxDate = date;
        }
        else {
            this._maxDate = convertIsoToDate(value, false, true);
        }
        this.validateModel(convertDateToISOExtended(this.date, this.hour));
    }
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Formato de exibição da data.
     *
     * Valores válidos:
     *  - `dd/mm/yyyy`
     *  - `mm/dd/yyyy`
     *  - `yyyy/mm/dd`
     *
     * @default `dd/mm/yyyy`
     */
    set format(value) {
        if (value) {
            value = value.toLowerCase();
            if (value.match(/dd/) && value.match(/mm/) && value.match(/yyyy/)) {
                this._format = value;
                this.objMask = this.buildMask();
                this.refreshValue(this.date);
                return;
            }
        }
        this._format = poDatepickerFormatDefault;
        this.objMask = this.buildMask();
    }
    get format() {
        return this._format;
    }
    /**
     * @optional
     *
     * @description
     *
     * Padrão de formatação para saída do *model*, independentemente do formato de entrada.
     *
     * > Veja os valores válidos no *enum* `PoDatepickerIsoFormat`.
     */
    set isoFormat(value) {
        if (Object.values(PoDatepickerIsoFormat).includes(value)) {
            this._isoFormat = value;
            this.isExtendedISO = value === PoDatepickerIsoFormat.Extended;
        }
    }
    get isoFormat() {
        return this._isoFormat;
    }
    set locale(value) {
        if (value) {
            this._locale = value.length >= 2 ? value : poLocaleDefault;
        }
        else {
            this._locale = this.shortLanguage;
        }
    }
    get locale() {
        return this._locale || this.shortLanguage;
    }
    set date(value) {
        this._date = typeof value === 'string' ? convertIsoToDate(value, false, false) : value;
    }
    get date() {
        return this._date;
    }
    ngOnInit() {
        // Classe de máscara
        this.objMask = this.buildMask();
    }
    // Converte um objeto string em Date
    getDateFromString(dateString) {
        const day = parseInt(dateString.substring(this.format.indexOf('d'), this.format.indexOf('d') + 2), 10);
        const month = parseInt(dateString.substring(this.format.indexOf('m'), this.format.indexOf('m') + 2), 10) - 1;
        const year = parseInt(dateString.substring(this.format.indexOf('y'), this.format.indexOf('y') + 4), 10);
        const date = new Date(year, month, day);
        setYearFrom0To100(date, year);
        return date.getFullYear() === year && date.getMonth() === month && date.getDate() === day ? date : null;
    }
    // Formata a data.
    formatToDate(value) {
        let dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
        return dateFormatted;
    }
    // Método responsável por controlar o modelo.
    controlModel(date) {
        this.date = date;
        if (date && this.isExtendedISO) {
            this.callOnChange(convertDateToISOExtended(this.date, this.hour));
        }
        else if (date && !this.isExtendedISO) {
            this.callOnChange(convertDateToISODate(this.date));
        }
        else {
            date === undefined ? this.callOnChange('') : this.callOnChange('Data inválida');
        }
    }
    // Executa a função onChange
    callOnChange(value, retry = true) {
        if (this.onChangeModel && value !== this.previousValue) {
            this.onChangeModel(value);
            this.previousValue = value;
        }
        else if (retry) {
            setTimeout(() => this.callOnChange(value, false));
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangeModel = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnTouched(func) {
        this.onTouchedModel = func;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(c) {
        // Verifica se já possui algum error pattern padrão.
        this.errorPattern =
            this.errorPattern !== 'Data inválida' && this.errorPattern !== 'Data fora do período' ? this.errorPattern : '';
        if (dateFailed(c.value)) {
            this.errorPattern = this.errorPattern || 'Data inválida';
            return {
                date: {
                    valid: false
                }
            };
        }
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
        if (this.date && !validateDateRange(this.date, this._minDate, this._maxDate)) {
            this.errorPattern = this.errorPattern || 'Data fora do período';
            return {
                date: {
                    valid: false
                }
            };
        }
        return null;
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    // Retorna um objeto do tipo PoMask com a mascara configurada.
    buildMask() {
        let mask = this.format.toUpperCase();
        mask = mask.replace(/DD/g, '99');
        mask = mask.replace(/MM/g, '99');
        mask = mask.replace(/YYYY/g, '9999');
        return new PoMask(mask, true);
    }
}
PoDatepickerBaseComponent.decorators = [
    { type: Directive }
];
PoDatepickerBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoDatepickerBaseComponent.propDecorators = {
    autoFocus: [{ type: Input, args: ['p-auto-focus',] }],
    name: [{ type: Input, args: ['name',] }],
    optional: [{ type: Input, args: ['p-optional',] }],
    errorPattern: [{ type: Input, args: ['p-error-pattern',] }],
    onblur: [{ type: Output, args: ['p-blur',] }],
    onchange: [{ type: Output, args: ['p-change',] }],
    noAutocomplete: [{ type: Input, args: ['p-no-autocomplete',] }],
    placeholder: [{ type: Input, args: ['p-placeholder',] }],
    setDisabled: [{ type: Input, args: ['p-disabled',] }],
    setReadonly: [{ type: Input, args: ['p-readonly',] }],
    setRequired: [{ type: Input, args: ['p-required',] }],
    setClean: [{ type: Input, args: ['p-clean',] }],
    minDate: [{ type: Input, args: ['p-min-date',] }],
    maxDate: [{ type: Input, args: ['p-max-date',] }],
    format: [{ type: Input, args: ['p-format',] }],
    isoFormat: [{ type: Input, args: ['p-iso-format',] }],
    locale: [{ type: Input, args: ['p-locale',] }]
};
__decorate([
    InputBoolean()
], PoDatepickerBaseComponent.prototype, "autoFocus", void 0);
//# sourceMappingURL=data:application/json;base64,