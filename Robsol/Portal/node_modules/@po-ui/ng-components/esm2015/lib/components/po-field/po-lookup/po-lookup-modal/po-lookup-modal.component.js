import { ChangeDetectorRef, Component, ComponentFactoryResolver, ViewChild, ViewContainerRef } from '@angular/core';
import { fromEvent } from 'rxjs';
import { debounceTime, filter, switchMap, tap } from 'rxjs/operators';
import { PoLookupModalBaseComponent } from '../po-lookup-modal/po-lookup-modal-base.component';
import { PoLanguageService } from './../../../../services/po-language/po-language.service';
import { PoDynamicFormComponent } from './../../../po-dynamic/po-dynamic-form/po-dynamic-form.component';
import { PoTableComponent } from './../../../po-table/po-table.component';
/**
 * @docsPrivate
 *
 * @docsExtends PoLookupModalBaseComponent
 */
export class PoLookupModalComponent extends PoLookupModalBaseComponent {
    constructor(componentFactory, poLanguage, changeDetector) {
        super(poLanguage, changeDetector);
        this.componentFactory = componentFactory;
        this.keyUpObservable = null;
        this.containerHeight = 375;
    }
    ngOnInit() {
        super.ngOnInit();
        this.setTableHeight();
    }
    ngAfterViewInit() {
        this.initializeEventInput();
    }
    // Seleciona um item na tabela
    onSelect(item) {
        if (this.multiple) {
            this.selecteds = [...this.selecteds, Object.assign({ value: item[this.fieldValue], label: item[this.fieldLabel] }, item)];
        }
        else {
            this.selecteds = [Object.assign({ value: item[this.fieldValue], label: item[this.fieldLabel] }, item)];
        }
    }
    // Remove a seleção de um item na tabela
    onUnselect(unselectedItem) {
        this.selecteds = this.selecteds.filter(itemSelected => itemSelected.value !== unselectedItem[this.fieldValue]);
    }
    onUnselectFromDisclaimer(removedDisclaimer) {
        this.poTable.unselectRowItem(item => item[this.fieldValue] === removedDisclaimer.value);
    }
    // Seleciona todos os itens visíveis na tabela
    onAllSelected(items) {
        this.selecteds = items.map(item => (Object.assign({ value: item[this.fieldValue], label: item[this.fieldLabel] }, item)));
    }
    // Remove a seleção de todos os itens visíveis na tabela
    onAllUnselected(items) {
        this.poTable.unselectRows();
        this.selecteds = [];
    }
    initializeEventInput() {
        this.keyUpObservable = fromEvent(this.inputSearchEl.nativeElement, 'keyup').pipe(filter((e) => this.validateEnterPressed(e)), debounceTime(400));
        this.keyUpObservable.subscribe(() => {
            this.search();
        });
    }
    openModal() {
        this.poModal.open();
    }
    sortBy(sort) {
        this.sort = sort;
    }
    destroyDynamicForm() {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    }
    onAdvancedFilter() {
        this.setupModalAdvancedFilter();
        this.createDynamicForm();
    }
    setTableHeight() {
        var _a;
        if (this.multiple) {
            if (((_a = this.selecteds) === null || _a === void 0 ? void 0 : _a.length) !== 0) {
                this.tableHeight = 300;
            }
            else {
                this.tableHeight = 370;
                this.containerHeight = 375;
            }
        }
        // precisa ser 315 por as linhas terem altura de 32px (quando tela menor que 1366px).
        // O retorno padrão é 10 itens fazendo com que gere scroll caso houver paginação, 370 não gerava.
        this.tableHeight = this.infiniteScroll ? 315 : 370;
        if (window.innerHeight < 615) {
            this.tableHeight -= 50;
            this.containerHeight -= 50;
        }
    }
    validateEnterPressed(e) {
        return e.keyCode === 13;
    }
    setupModalAdvancedFilter() {
        this.dynamicFormValue = {};
        this.isAdvancedFilter = true;
    }
    createDynamicForm() {
        const component = this.componentFactory.resolveComponentFactory(PoDynamicFormComponent);
        this.componentRef = this.container.createComponent(component);
        this.componentRef.instance.fields = this.advancedFilters;
        this.componentRef.instance.value = this.dynamicFormValue;
        this.componentRef.instance.formOutput
            .pipe(tap(form => {
            this.dynamicForm = form;
            this.primaryActionAdvancedFilter.disabled = this.dynamicForm.invalid;
        }), switchMap(form => form.valueChanges))
            .subscribe(() => {
            this.primaryActionAdvancedFilter.disabled = this.dynamicForm.invalid;
        });
    }
}
PoLookupModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-lookup-modal',
                template: "<po-modal\r\n  p-click-out=\"false\"\r\n  p-hide-close=\"false\"\r\n  p-size=\"lg\"\r\n  [p-primary-action]=\"isAdvancedFilter ? primaryActionAdvancedFilter : primaryAction\"\r\n  [p-secondary-action]=\"isAdvancedFilter ? secondaryActionAdvancedFilter : secondaryAction\"\r\n  [p-title]=\"isAdvancedFilter ? advancedFilterModalTitle : title\"\r\n>\r\n  <div [hidden]=\"isAdvancedFilter\">\r\n    <po-field-container class=\"po-lookup-header po-pull-right\" [p-optional]=\"false\">\r\n      <div class=\"po-lookup-filter-content\">\r\n        <div class=\"po-field-icon-container-right\">\r\n          <span #iconLookup class=\"po-icon po-field-icon po-icon-search\" (click)=\"search()\"> </span>\r\n        </div>\r\n\r\n        <input\r\n          #inpsearch\r\n          class=\"po-input po-input-icon-right\"\r\n          name=\"contentSearch\"\r\n          [(ngModel)]=\"searchValue\"\r\n          [placeholder]=\"literals.modalPlaceholder\"\r\n          type=\"text\"\r\n        />\r\n      </div>\r\n\r\n      <div *ngIf=\"advancedFilters && advancedFilters.length > 0\" class=\"po-lookup-advanced-search\">\r\n        <span\r\n          class=\"po-lookup-advanced-search-link\"\r\n          tabindex=\"0\"\r\n          (click)=\"onAdvancedFilter()\"\r\n          (keydown.enter)=\"onAdvancedFilter()\"\r\n          tabindex=\"0\"\r\n        >\r\n          {{ literals.modalAdvancedSearch }}\r\n        </span>\r\n      </div>\r\n    </po-field-container>\r\n\r\n    <!-- DISCLAIMER -->\r\n    <po-disclaimer-group\r\n      *ngIf=\"!!disclaimerGroup\"\r\n      class=\"po-md-12\"\r\n      [p-disclaimers]=\"disclaimerGroup?.disclaimers\"\r\n      [p-title]=\"disclaimerGroup?.title\"\r\n      (p-change)=\"onChangeDisclaimerGroup()\"\r\n    >\r\n    </po-disclaimer-group>\r\n\r\n    <div class=\"po-row po-lookup-container-table\" [style.height.px]=\"containerHeight\">\r\n      <po-table\r\n        #poTable\r\n        class=\"po-md-12\"\r\n        [p-selectable]=\"true\"\r\n        [p-hide-detail]=\"true\"\r\n        [p-single-select]=\"!multiple\"\r\n        [p-sort]=\"true\"\r\n        [p-columns]=\"columns\"\r\n        [p-height]=\"tableHeight\"\r\n        [p-items]=\"items\"\r\n        [p-literals]=\"tableLiterals\"\r\n        [p-loading]=\"isLoading\"\r\n        [p-show-more-disabled]=\"!hasNext\"\r\n        [p-infinite-scroll]=\"infiniteScroll\"\r\n        (p-selected)=\"onSelect($event)\"\r\n        (p-unselected)=\"onUnselect($event)\"\r\n        (p-all-selected)=\"onAllSelected($event)\"\r\n        (p-all-unselected)=\"onAllUnselected($event)\"\r\n        (p-show-more)=\"showMoreEvent()\"\r\n        (p-sort-by)=\"sortBy($event)\"\r\n      >\r\n      </po-table>\r\n    </div>\r\n\r\n    <!-- DISCLAIMER -->\r\n    <po-disclaimer-group\r\n      *ngIf=\"multiple\"\r\n      class=\"po-md-12\"\r\n      [p-disclaimers]=\"selecteds\"\r\n      (p-remove)=\"onUnselectFromDisclaimer($event.removedDisclaimer)\"\r\n      (p-remove-all)=\"onAllUnselected($event)\"\r\n    >\r\n    </po-disclaimer-group>\r\n  </div>\r\n  <div [hidden]=\"!isAdvancedFilter\">\r\n    <ng-container #container> </ng-container>\r\n  </div>\r\n</po-modal>\r\n"
            },] }
];
PoLookupModalComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: PoLanguageService },
    { type: ChangeDetectorRef }
];
PoLookupModalComponent.propDecorators = {
    poTable: [{ type: ViewChild, args: [PoTableComponent, { static: true },] }],
    inputSearchEl: [{ type: ViewChild, args: ['inpsearch',] }],
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }]
};
//# sourceMappingURL=data:application/json;base64,