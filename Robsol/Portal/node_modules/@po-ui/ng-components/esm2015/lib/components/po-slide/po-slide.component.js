import { Component, ContentChild, HostListener, ViewChild, ViewChildren } from '@angular/core';
import { animate, AnimationBuilder, keyframes, style } from '@angular/animations';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { PoSlideBaseComponent } from './po-slide-base.component';
import { PoSlideContentTemplateDirective } from './directives/po-slide-content-template.directive';
import { PoSlideItemComponent } from './po-slide-item/po-slide-item.component';
const poSlideDefaultHeight = 336;
const poSlideIntervalMin = 1000;
const poSlideMinHeight = 192;
const poSlideTiming = '250ms ease';
/**
 * @docsExtends PoSlideBaseComponent
 *
 * @example
 * <example name="po-slide-basic" title="PO Slide Basic">
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.html"> </file>
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-labs" title="PO Slide Labs">
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.html"> </file>
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-useful-articles" title="PO Slide - Useful articles">
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.html"> </file>
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-landscapes" title="PO Slide - Landscapes">
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.html"> </file>
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-external-controls" title="PO Slide - External Controls">
 *  <file name="sample-po-slide-external-controls/sample-po-slide-external-controls.component.html"> </file>
 *  <file name="sample-po-slide-external-controls/sample-po-slide-external-controls.component.ts"> </file>
 * </example>
 */
export class PoSlideComponent extends PoSlideBaseComponent {
    constructor(builder) {
        super();
        this.builder = builder;
        this.currentSlideIndex = 0;
        this.slideItems = [];
        this.isLoaded = false;
        this.resize$ = new Subject();
    }
    get hasElements() {
        return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;
    }
    get isImageSlide() {
        return !this.slideContentTemplate;
    }
    get offset() {
        return this.currentSlideIndex * this.slideItemWidth;
    }
    get hasSlides() {
        return !!this.slides && !!this.slides.length;
    }
    onResize() {
        this.resize$.next();
    }
    ngOnInit() {
        this.resizeSubscription = this.resize$.pipe(debounceTime(150)).subscribe(() => {
            this.setSlideItemWidth();
            this.goToItem(this.currentSlideIndex);
        });
    }
    ngDoCheck() {
        if (!this.isLoaded && this.hasElements) {
            this.setSlideItemWidth();
            this.isLoaded = true;
            if (this.hasSlides) {
                this.startSlide();
            }
        }
    }
    ngOnChanges(changes) {
        if (changes.height) {
            this.setSlideHeight(this.height);
        }
    }
    ngOnDestroy() {
        var _a;
        (_a = this.resizeSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
    /**
     * Método que retorna o index do slide atual
     *
     * ```
     * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
     *  myFunction() {
     *    let currentIndex = this.slideComponent.getCurrentSlideIndex();
     * }
     *
     * ```
     */
    getCurrentSlideIndex() {
        return this.currentSlideIndex;
    }
    goToItem(index) {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = index;
        this.animate(this.offset);
    }
    nextControl() {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.next();
    }
    /**
     * Método para chamar o próximo slide.
     *
     * ```
     * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
     *
     * myFunction() {
     *  this.slideComponent.next();
     * }
     * ```
     */
    next() {
        if (this.currentSlideIndex + 1 === this.slideItems.length) {
            this.currentSlideIndex = 0;
            this.animate(0);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;
        this.animate(this.offset);
    }
    /**
     * Método para chamar o slide anterior.
     *
     * ```
     * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
     *
     * myFunction() {
     *  this.slideComponent.previous();
     * }
     * ```
     */
    previous() {
        if (this.currentSlideIndex === 0) {
            this.currentSlideIndex = this.slideItems.length - 1;
            this.animate(this.offset);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex - 1 + this.slideItems.length) % this.slideItems.length;
        this.animate(this.offset);
    }
    previousControl() {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.previous();
    }
    setSlideHeight(height) {
        this.setHeight(height);
    }
    cancelInterval() {
        clearInterval(this.setInterval);
    }
    setSlideItems(slides) {
        if (this.hasSlides) {
            this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);
        }
        else {
            this.slideItems = [];
            this.cancelInterval();
        }
    }
    startSlide() {
        this.setSlideHeight(this.height);
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = 0;
    }
    startInterval() {
        if (this.setInterval) {
            this.cancelInterval();
        }
        this.setInterval =
            this.hasSlides && this.hasElements
                ? setInterval(() => {
                    this.next();
                }, this.interval)
                : undefined;
    }
    animate(offset) {
        if (this.hasElements) {
            const animation = this.buildTransitionAnimation(offset);
            this.player = animation.create(this.slide.nativeElement);
            this.player.play();
        }
    }
    buildTransitionAnimation(offset) {
        return this.builder.build([animate(poSlideTiming, keyframes([style({ transform: `translateX(-${offset}px)` })]))]);
    }
    createArrayForTemplate(slides) {
        this.slideItems = [...slides];
    }
    createArrayFromSlides(slides) {
        const isStringArray = slides.every(item => typeof item === 'string');
        if (isStringArray) {
            slides.forEach(element => this.slideItems.push({ image: `${element}` }));
        }
        else {
            this.slideItems = [...slides];
        }
    }
    setDefaultHeight(height) {
        if ((height && height <= poSlideMinHeight) || (!height && this.isImageSlide)) {
            this.slide.nativeElement.style.height = `${poSlideDefaultHeight}px`;
            this.imageHeight = poSlideDefaultHeight;
        }
        else {
            this.imageHeight = undefined;
        }
    }
    setHeight(height) {
        if (height && height > poSlideMinHeight) {
            this.slide.nativeElement.style.height = `${height}px`;
            this.imageHeight = height;
        }
        else {
            this.setDefaultHeight(height);
        }
    }
    setSlideItemWidth() {
        if (this.hasElements) {
            this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;
        }
    }
}
PoSlideComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-slide',
                template: "<div class=\"po-slide-wrapper\">\r\n  <div class=\"po-slide-outer\">\r\n    <div class=\"po-slide-inner\" #slide>\r\n      <ng-container *ngFor=\"let item of slideItems; let index = index\">\r\n        <po-slide-item\r\n          [p-action]=\"item.action\"\r\n          [p-data]=\"item\"\r\n          [p-image]=\"item.image\"\r\n          [p-image-height]=\"imageHeight\"\r\n          [p-template]=\"slideContentTemplate\"\r\n          [p-alt]=\"item.alt\"\r\n          [p-link]=\"item.link\"\r\n        >\r\n        </po-slide-item>\r\n      </ng-container>\r\n    </div>\r\n\r\n    <po-slide-control\r\n      *ngIf=\"!hideArrows && hasSlides && slides.length > 1\"\r\n      p-control=\"previous\"\r\n      (p-click)=\"previousControl()\"\r\n    >\r\n    </po-slide-control>\r\n\r\n    <po-slide-control *ngIf=\"!hideArrows && hasSlides && slides.length > 1\" p-control=\"next\" (p-click)=\"nextControl()\">\r\n    </po-slide-control>\r\n  </div>\r\n\r\n  <po-slide-circles\r\n    *ngIf=\"hasSlides && slides.length > 1\"\r\n    [p-current-slide-index]=\"currentSlideIndex\"\r\n    [p-items]=\"slideItems\"\r\n    (p-click)=\"goToItem($event)\"\r\n  >\r\n  </po-slide-circles>\r\n</div>\r\n"
            },] }
];
PoSlideComponent.ctorParameters = () => [
    { type: AnimationBuilder }
];
PoSlideComponent.propDecorators = {
    slideContentTemplate: [{ type: ContentChild, args: [PoSlideContentTemplateDirective, { static: true },] }],
    slide: [{ type: ViewChild, args: ['slide', { static: true },] }],
    itemsElements: [{ type: ViewChildren, args: [PoSlideItemComponent,] }],
    onResize: [{ type: HostListener, args: ['window:resize',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2xpZGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXNsaWRlL3BvLXNsaWRlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFHWixZQUFZLEVBRVosU0FBUyxFQUNULFlBQVksRUFLYixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFxQyxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFckgsT0FBTyxFQUFnQixPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBRW5HLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRS9FLE1BQU0sb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0FBQ2pDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDO0FBQ2hDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQzdCLE1BQU0sYUFBYSxHQUFHLFlBQVksQ0FBQztBQUVuQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTRCRztBQUtILE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxvQkFBb0I7SUFtQ3hELFlBQW9CLE9BQXlCO1FBQzNDLEtBQUssRUFBRSxDQUFDO1FBRFUsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUEzQjdDLHNCQUFpQixHQUFHLENBQUMsQ0FBQztRQUV0QixlQUFVLEdBQTZCLEVBQUUsQ0FBQztRQUdsQyxhQUFRLEdBQVksS0FBSyxD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QUFjO1FBQzlCLElBQUksTUFBTSxJQUFJLE1BQU0sR0FBRyxnQkFBZ0IsRUFBRTtZQUN2QyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUM7WUFDdEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUM7U0FDM0I7YUFBTTtZQUNMLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFTyxpQkFBaUI7UUFDdkIsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEtBQUssQ0FBQztTQUN4RztJQUNILENBQUM7OztZQXJQRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLG1yQ0FBd0M7YUFDekM7OztZQS9DaUIsZ0JBQWdCOzs7bUNBaUQvQixZQUFZLFNBQUMsK0JBQStCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO29CQUc5RCxTQUFTLFNBQUMsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs0QkFFbkMsWUFBWSxTQUFDLG9CQUFvQjt1QkFpQ2pDLFlBQVksU0FBQyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDb21wb25lbnQsXHJcbiAgQ29udGVudENoaWxkLFxyXG4gIERvQ2hlY2ssXHJcbiAgRWxlbWVudFJlZixcclxuICBIb3N0TGlzdGVuZXIsXHJcbiAgUXVlcnlMaXN0LFxyXG4gIFZpZXdDaGlsZCxcclxuICBWaWV3Q2hpbGRyZW4sXHJcbiAgT25DaGFuZ2VzLFxyXG4gIE9uRGVzdHJveSxcclxuICBPbkluaXQsXHJcbiAgU2ltcGxlQ2hhbmdlc1xyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgYW5pbWF0ZSwgQW5pbWF0aW9uQnVpbGRlciwgQW5pbWF0aW9uRmFjdG9yeSwgQW5pbWF0aW9uUGxheWVyLCBrZXlmcmFtZXMsIHN0eWxlIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XHJcblxyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24sIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZGVib3VuY2VUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuaW1wb3J0IHsgUG9TbGlkZUJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLXNsaWRlLWJhc2UuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUG9TbGlkZUNvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9wby1zbGlkZS1jb250ZW50LXRlbXBsYXRlLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IFBvU2xpZGVJdGVtIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLXNsaWRlLWl0ZW0uaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9TbGlkZUl0ZW1Db21wb25lbnQgfSBmcm9tICcuL3BvLXNsaWRlLWl0ZW0vcG8tc2xpZGUtaXRlbS5jb21wb25lbnQnO1xyXG5cclxuY29uc3QgcG9TbGlkZURlZmF1bHRIZWlnaHQgPSAzMzY7XHJcbmNvbnN0IHBvU2xpZGVJbnRlcnZhbE1pbiA9IDEwMDA7XHJcbmNvbnN0IHBvU2xpZGVNaW5IZWlnaHQgPSAxOTI7XHJcbmNvbnN0IHBvU2xpZGVUaW1pbmcgPSAnMjUwbXMgZWFzZSc7XHJcblxyXG4vKipcclxuICogQGRvY3NFeHRlbmRzIFBvU2xpZGVCYXNlQ29tcG9uZW50XHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1zbGlkZS1iYXNpY1wiIHRpdGxlPVwiUE8gU2xpZGUgQmFzaWNcIj5cclxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXNsaWRlLWJhc2ljL3NhbXBsZS1wby1zbGlkZS1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1zbGlkZS1iYXNpYy9zYW1wbGUtcG8tc2xpZGUtYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tc2xpZGUtbGFic1wiIHRpdGxlPVwiUE8gU2xpZGUgTGFic1wiPlxyXG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tc2xpZGUtbGFicy9zYW1wbGUtcG8tc2xpZGUtbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1zbGlkZS1sYWJzL3NhbXBsZS1wby1zbGlkZS1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XHJcbiAqIDwvZXhhbXBsZT5cclxuICpcclxuICogPGV4YW1wbGUgbmFtZT1cInBvLXNsaWRlLXVzZWZ1bC1hcnRpY2xlc1wiIHRpdGxlPVwiUE8gU2xpZGUgLSBVc2VmdWwgYXJ0aWNsZXNcIj5cclxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXNsaWRlLXVzZWZ1bC1hcnRpY2xlcy9zYW1wbGUtcG8tc2xpZGUtdXNlZnVsLWFydGljbGVzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cclxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXNsaWRlLXVzZWZ1bC1hcnRpY2xlcy9zYW1wbGUtcG8tc2xpZGUtdXNlZnVsLWFydGljbGVzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XHJcbiAqIDwvZXhhbXBsZT5cclxuICpcclxuICogPGV4YW1wbGUgbmFtZT1cInBvLXNsaWRlLWxhbmRzY2FwZXNcIiB0aXRsZT1cIlBPIFNsaWRlIC0gTGFuZHNjYXBlc1wiPlxyXG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tc2xpZGUtbGFuZHNjYXBlcy9zYW1wbGUtcG8tc2xpZGUtbGFuZHNjYXBlcy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1zbGlkZS1sYW5kc2NhcGVzL3NhbXBsZS1wby1zbGlkZS1sYW5kc2NhcGVzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XHJcbiAqIDwvZXhhbXBsZT5cclxuICpcclxuICogPGV4YW1wbGUgbmFtZT1cInBvLXNsaWRlLWV4dGVybmFsLWNvbnRyb2xzXCIgdGl0bGU9XCJQTyBTbGlkZSAtIEV4dGVybmFsIENvbnRyb2xzXCI+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXNsaWRlLWV4dGVybmFsLWNvbnRyb2xzL3NhbXBsZS1wby1zbGlkZS1leHRlcm5hbC1jb250cm9scy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXNsaWRlLWV4dGVybmFsLWNvbnRyb2xzL3NhbXBsZS1wby1zbGlkZS1leHRlcm5hbC1jb250cm9scy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxyXG4gKiA8L2V4YW1wbGU+XHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3BvLXNsaWRlJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcG8tc2xpZGUuY29tcG9uZW50Lmh0bWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQb1NsaWRlQ29tcG9uZW50IGV4dGVuZHMgUG9TbGlkZUJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIERvQ2hlY2ssIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcclxuICBAQ29udGVudENoaWxkKFBvU2xpZGVDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUsIHsgc3RhdGljOiB0cnVlIH0pXHJcbiAgc2xpZGVDb250ZW50VGVtcGxhdGU6IFBvU2xpZGVDb250ZW50VGVtcGxhdGVEaXJlY3RpdmU7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ3NsaWRlJywgeyBzdGF0aWM6IHRydWUgfSkgcHJpdmF0ZSBzbGlkZTogRWxlbWVudFJlZjtcclxuXHJcbiAgQFZpZXdDaGlsZHJlbihQb1NsaWRlSXRlbUNvbXBvbmVudCkgcHJpdmF0ZSBpdGVtc0VsZW1lbnRzOiBRdWVyeUxpc3Q8UG9TbGlkZUl0ZW1Db21wb25lbnQ+O1xyXG5cclxuICBjdXJyZW50U2xpZGVJbmRleCA9IDA7XHJcbiAgaW1hZ2VIZWlnaHQ6IG51bWJlcjtcclxuICBzbGlkZUl0ZW1zOiBBcnJheTxQb1NsaWRlSXRlbSB8IGFueT4gPSBbXTtcclxuICBzbGlkZUl0ZW1XaWR0aDogbnVtYmVyO1xyXG5cclxuICBwcml2YXRlIGlzTG9hZGVkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBwbGF5ZXI6IEFuaW1hdGlvblBsYXllcjtcclxuICBwcml2YXRlIHNldEludGVydmFsOiBhbnk7XHJcbiAgcHJpdmF0ZSByZXNpemUkID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gIHByaXZhdGUgcmVzaXplU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcblxyXG4gIHByaXZhdGUgZ2V0IGhhc0VsZW1lbnRzKCkge1xyXG4gICAgcmV0dXJuICEhdGhpcy5zbGlkZS5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoICYmICEhdGhpcy5pdGVtc0VsZW1lbnRzICYmICEhdGhpcy5pdGVtc0VsZW1lbnRzLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0IGlzSW1hZ2VTbGlkZSgpIHtcclxuICAgIHJldHVybiAhdGhpcy5zbGlkZUNvbnRlbnRUZW1wbGF0ZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0IG9mZnNldCgpIHtcclxuICAgIHJldHVybiB0aGlzLmN1cnJlbnRTbGlkZUluZGV4ICogdGhpcy5zbGlkZUl0ZW1XaWR0aDtcclxuICB9XHJcblxyXG4gIGdldCBoYXNTbGlkZXMoKSB7XHJcbiAgICByZXR1cm4gISF0aGlzLnNsaWRlcyAmJiAhIXRoaXMuc2xpZGVzLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYnVpbGRlcjogQW5pbWF0aW9uQnVpbGRlcikge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpyZXNpemUnKSBvblJlc2l6ZSgpIHtcclxuICAgIHRoaXMucmVzaXplJC5uZXh0KCk7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMucmVzaXplU3Vic2NyaXB0aW9uID0gdGhpcy5yZXNpemUkLnBpcGUoZGVib3VuY2VUaW1lKDE1MCkpLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0U2xpZGVJdGVtV2lkdGgoKTtcclxuICAgICAgdGhpcy5nb1RvSXRlbSh0aGlzLmN1cnJlbnRTbGlkZUluZGV4KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbmdEb0NoZWNrKCkge1xyXG4gICAgaWYgKCF0aGlzLmlzTG9hZGVkICYmIHRoaXMuaGFzRWxlbWVudHMpIHtcclxuICAgICAgdGhpcy5zZXRTbGlkZUl0ZW1XaWR0aCgpO1xyXG4gICAgICB0aGlzLmlzTG9hZGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgIGlmICh0aGlzLmhhc1NsaWRlcykge1xyXG4gICAgICAgIHRoaXMuc3RhcnRTbGlkZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICBpZiAoY2hhbmdlcy5oZWlnaHQpIHtcclxuICAgICAgdGhpcy5zZXRTbGlkZUhlaWdodCh0aGlzLmhlaWdodCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMucmVzaXplU3Vic2NyaXB0aW9uPy51bnN1YnNjcmliZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTcOpdG9kbyBxdWUgcmV0b3JuYSBvIGluZGV4IGRvIHNsaWRlIGF0dWFsXHJcbiAgICpcclxuICAgKiBgYGBcclxuICAgKiBAVmlld0NoaWxkKCdzbGlkZUNvbXBvbmVudCcsIHsgc3RhdGljOiB0cnVlIH0pIHNsaWRlQ29tcG9uZW50OiBQb1NsaWRlQ29tcG9uZW50O1xyXG4gICAqICBteUZ1bmN0aW9uKCkge1xyXG4gICAqICAgIGxldCBjdXJyZW50SW5kZXggPSB0aGlzLnNsaWRlQ29tcG9uZW50LmdldEN1cnJlbnRTbGlkZUluZGV4KCk7XHJcbiAgICogfVxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICovXHJcbiAgZ2V0Q3VycmVudFNsaWRlSW5kZXgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmN1cnJlbnRTbGlkZUluZGV4O1xyXG4gIH1cclxuXHJcbiAgZ29Ub0l0ZW0oaW5kZXg6IG51bWJlcikge1xyXG4gICAgaWYgKHRoaXMuaW50ZXJ2YWwgPiBwb1NsaWRlSW50ZXJ2YWxNaW4pIHtcclxuICAgICAgdGhpcy5zdGFydEludGVydmFsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jdXJyZW50U2xpZGVJbmRleCA9IGluZGV4O1xyXG4gICAgdGhpcy5hbmltYXRlKHRoaXMub2Zmc2V0KTtcclxuICB9XHJcblxyXG4gIG5leHRDb250cm9sKCkge1xyXG4gICAgaWYgKHRoaXMuaW50ZXJ2YWwgPiBwb1NsaWRlSW50ZXJ2YWxNaW4pIHtcclxuICAgICAgdGhpcy5zdGFydEludGVydmFsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5uZXh0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNw6l0b2RvIHBhcmEgY2hhbWFyIG8gcHLDs3hpbW8gc2xpZGUuXHJcbiAgICpcclxuICAgKiBgYGBcclxuICAgKiBAVmlld0NoaWxkKCdzbGlkZUNvbXBvbmVudCcsIHsgc3RhdGljOiB0cnVlIH0pIHNsaWRlQ29tcG9uZW50OiBQb1NsaWRlQ29tcG9uZW50O1xyXG4gICAqXHJcbiAgICogbXlGdW5jdGlvbigpIHtcclxuICAgKiAgdGhpcy5zbGlkZUNvbXBvbmVudC5uZXh0KCk7XHJcbiAgICogfVxyXG4gICAqIGBgYFxyXG4gICAqL1xyXG4gIG5leHQoKSB7XHJcbiAgICBpZiAodGhpcy5jdXJyZW50U2xpZGVJbmRleCArIDEgPT09IHRoaXMuc2xpZGVJdGVtcy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5jdXJyZW50U2xpZGVJbmRleCA9IDA7XHJcbiAgICAgIHRoaXMuYW5pbWF0ZSgwKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jdXJyZW50U2xpZGVJbmRleCA9ICh0aGlzLmN1cnJlbnRTbGlkZUluZGV4ICsgMSkgJSB0aGlzLnNsaWRlSXRlbXMubGVuZ3RoO1xyXG4gICAgdGhpcy5hbmltYXRlKHRoaXMub2Zmc2V0KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogTcOpdG9kbyBwYXJhIGNoYW1hciBvIHNsaWRlIGFudGVyaW9yLlxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogQFZpZXdDaGlsZCgnc2xpZGVDb21wb25lbnQnLCB7IHN0YXRpYzogdHJ1ZSB9KSBzbGlkZUNvbXBvbmVudDogUG9TbGlkZUNvbXBvbmVudDtcclxuICAgKlxyXG4gICAqIG15RnVuY3Rpb24oKSB7XHJcbiAgICogIHRoaXMuc2xpZGVDb21wb25lbnQucHJldmlvdXMoKTtcclxuICAgKiB9XHJcbiAgICogYGBgXHJcbiAgICovXHJcbiAgcHJldmlvdXMoKSB7XHJcbiAgICBpZiAodGhpcy5jdXJyZW50U2xpZGVJbmRleCA9PT0gMCkge1xyXG4gICAgICB0aGlzLmN1cnJlbnRTbGlkZUluZGV4ID0gdGhpcy5zbGlkZUl0ZW1zLmxlbmd0aCAtIDE7XHJcbiAgICAgIHRoaXMuYW5pbWF0ZSh0aGlzLm9mZnNldCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuY3VycmVudFNsaWRlSW5kZXggPSAodGhpcy5jdXJyZW50U2xpZGVJbmRleCAtIDEgKyB0aGlzLnNsaWRlSXRlbXMubGVuZ3RoKSAlIHRoaXMuc2xpZGVJdGVtcy5sZW5ndGg7XHJcbiAgICB0aGlzLmFuaW1hdGUodGhpcy5vZmZzZXQpO1xyXG4gIH1cclxuXHJcbiAgcHJldmlvdXNDb250cm9sKCkge1xyXG4gICAgaWYgKHRoaXMuaW50ZXJ2YWwgPiBwb1NsaWRlSW50ZXJ2YWxNaW4pIHtcclxuICAgICAgdGhpcy5zdGFydEludGVydmFsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5wcmV2aW91cygpO1xyXG4gIH1cclxuXHJcbiAgc2V0U2xpZGVIZWlnaHQoaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgIHRoaXMuc2V0SGVpZ2h0KGhlaWdodCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgY2FuY2VsSW50ZXJ2YWwoKSB7XHJcbiAgICBjbGVhckludGVydmFsKHRoaXMuc2V0SW50ZXJ2YWwpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHNldFNsaWRlSXRlbXMoc2xpZGVzOiBBcnJheTxQb1NsaWRlSXRlbSB8IHN0cmluZyB8IGFueT4pIHtcclxuICAgIGlmICh0aGlzLmhhc1NsaWRlcykge1xyXG4gICAgICB0aGlzLnNsaWRlQ29udGVudFRlbXBsYXRlID8gdGhpcy5jcmVhdGVBcnJheUZvclRlbXBsYXRlKHNsaWRlcykgOiB0aGlzLmNyZWF0ZUFycmF5RnJvbVNsaWRlcyhzbGlkZXMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zbGlkZUl0ZW1zID0gW107XHJcbiAgICAgIHRoaXMuY2FuY2VsSW50ZXJ2YWwoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBzdGFydFNsaWRlKCkge1xyXG4gICAgdGhpcy5zZXRTbGlkZUhlaWdodCh0aGlzLmhlaWdodCk7XHJcblxyXG4gICAgaWYgKHRoaXMuaW50ZXJ2YWwgPiBwb1NsaWRlSW50ZXJ2YWxNaW4pIHtcclxuICAgICAgdGhpcy5zdGFydEludGVydmFsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jdXJyZW50U2xpZGVJbmRleCA9IDA7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgc3RhcnRJbnRlcnZhbCgpIHtcclxuICAgIGlmICh0aGlzLnNldEludGVydmFsKSB7XHJcbiAgICAgIHRoaXMuY2FuY2VsSW50ZXJ2YWwoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNldEludGVydmFsID1cclxuICAgICAgdGhpcy5oYXNTbGlkZXMgJiYgdGhpcy5oYXNFbGVtZW50c1xyXG4gICAgICAgID8gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm5leHQoKTtcclxuICAgICAgICAgIH0sIHRoaXMuaW50ZXJ2YWwpXHJcbiAgICAgICAgOiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFuaW1hdGUob2Zmc2V0OiBudW1iZXIpIHtcclxuICAgIGlmICh0aGlzLmhhc0VsZW1lbnRzKSB7XHJcbiAgICAgIGNvbnN0IGFuaW1hdGlvbjogQW5pbWF0aW9uRmFjdG9yeSA9IHRoaXMuYnVpbGRUcmFuc2l0aW9uQW5pbWF0aW9uKG9mZnNldCk7XHJcblxyXG4gICAgICB0aGlzLnBsYXllciA9IGFuaW1hdGlvbi5jcmVhdGUodGhpcy5zbGlkZS5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgdGhpcy5wbGF5ZXIucGxheSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBidWlsZFRyYW5zaXRpb25BbmltYXRpb24ob2Zmc2V0OiBudW1iZXIpIHtcclxuICAgIHJldHVybiB0aGlzLmJ1aWxkZXIuYnVpbGQoW2FuaW1hdGUocG9TbGlkZVRpbWluZywga2V5ZnJhbWVzKFtzdHlsZSh7IHRyYW5zZm9ybTogYHRyYW5zbGF0ZVgoLSR7b2Zmc2V0fXB4KWAgfSldKSldKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQXJyYXlGb3JUZW1wbGF0ZShzbGlkZXM6IEFycmF5PGFueT4pIHtcclxuICAgIHRoaXMuc2xpZGVJdGVtcyA9IFsuLi5zbGlkZXNdO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVBcnJheUZyb21TbGlkZXMoc2xpZGVzOiBBcnJheTxQb1NsaWRlSXRlbSB8IHN0cmluZyB8IGFueT4pIHtcclxuICAgIGNvbnN0IGlzU3RyaW5nQXJyYXkgPSBzbGlkZXMuZXZlcnkoaXRlbSA9PiB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpO1xyXG5cclxuICAgIGlmIChpc1N0cmluZ0FycmF5KSB7XHJcbiAgICAgIHNsaWRlcy5mb3JFYWNoKGVsZW1lbnQgPT4gdGhpcy5zbGlkZUl0ZW1zLnB1c2goeyBpbWFnZTogYCR7ZWxlbWVudH1gIH0pKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2xpZGVJdGVtcyA9IFsuLi4oPEFycmF5PFBvU2xpZGVJdGVtPj5zbGlkZXMpXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0RGVmYXVsdEhlaWdodChoZWlnaHQ6IG51bWJlcikge1xyXG4gICAgaWYgKChoZWlnaHQgJiYgaGVpZ2h0IDw9IHBvU2xpZGVNaW5IZWlnaHQpIHx8ICghaGVpZ2h0ICYmIHRoaXMuaXNJbWFnZVNsaWRlKSkge1xyXG4gICAgICB0aGlzLnNsaWRlLm5hdGl2ZUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7cG9TbGlkZURlZmF1bHRIZWlnaHR9cHhgO1xyXG4gICAgICB0aGlzLmltYWdlSGVpZ2h0ID0gcG9TbGlkZURlZmF1bHRIZWlnaHQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmltYWdlSGVpZ2h0ID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRIZWlnaHQoaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgIGlmIChoZWlnaHQgJiYgaGVpZ2h0ID4gcG9TbGlkZU1pbkhlaWdodCkge1xyXG4gICAgICB0aGlzLnNsaWRlLm5hdGl2ZUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7aGVpZ2h0fXB4YDtcclxuICAgICAgdGhpcy5pbWFnZUhlaWdodCA9IGhlaWdodDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2V0RGVmYXVsdEhlaWdodChoZWlnaHQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRTbGlkZUl0ZW1XaWR0aCgpIHtcclxuICAgIGlmICh0aGlzLmhhc0VsZW1lbnRzKSB7XHJcbiAgICAgIHRoaXMuc2xpZGVJdGVtV2lkdGggPSB0aGlzLml0ZW1zRWxlbWVudHMuZmlyc3QuaXRlbUVsZW1lbnQubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19