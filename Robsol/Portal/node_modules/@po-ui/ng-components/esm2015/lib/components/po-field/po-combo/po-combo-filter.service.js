import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { validateObjectType } from '../../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-combo.
 */
export class PoComboFilterService {
    constructor(http) {
        this.http = http;
        this.fieldLabel = 'label';
        this.fieldValue = 'value';
        this.headers = new HttpHeaders({
            'X-PO-No-Message': 'true'
        });
        this.messages = [];
    }
    get url() {
        return this._url;
    }
    getFilteredData(param, filterParams) {
        const value = param.value;
        const filterParamsValidated = validateObjectType(filterParams);
        const params = Object.assign(Object.assign({}, filterParamsValidated), { filter: value });
        return this.http
            .get(`${this.url}`, { responseType: 'json', params, headers: this.headers })
            .pipe(map((response) => this.parseToArrayComboOption(response.items)));
    }
    getObjectByValue(value, filterParams) {
        const filterParamsValidated = validateObjectType(filterParams);
        return this.http
            .get(`${this.url}/${value}`, { params: filterParamsValidated, headers: this.headers })
            .pipe(map(item => this.parseToComboOption(item)));
    }
    configProperties(url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    }
    parseToArrayComboOption(items) {
        if (items && items.length > 0) {
            const parsedOptions = items.map(item => this.parseToComboOption(item));
            this.displayMessages();
            return parsedOptions;
        }
        return [];
    }
    parseToComboOption(item) {
        if (!(item === null || item === void 0 ? void 0 : item[this.fieldValue])) {
            this.addMessage(item, this.fieldValue);
            return { value: '' };
        }
        const label = item[this.fieldLabel];
        const value = item[this.fieldValue];
        return { label, value };
    }
    addMessage(item, property) {
        this.messages.push(`Cannot read property "${property}" of ${JSON.stringify(item)},
      see [p-field-value] property at https://po-ui.io/documentation/po-combo`);
    }
    displayMessages() {
        if (this.messages.length) {
            this.messages.forEach(message => console.error(message));
            this.messages = [];
        }
    }
}
PoComboFilterService.decorators = [
    { type: Injectable }
];
PoComboFilterService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY29tYm8tZmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tY29tYm8vcG8tY29tYm8tZmlsdGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUtyQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV6RDs7Ozs7O0dBTUc7QUFFSCxNQUFNLE9BQU8sb0JBQW9CO0lBZS9CLFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFkcEMsZUFBVSxHQUFXLE9BQU8sQ0FBQztRQUM3QixlQUFVLEdBQVcsT0FBTyxDQUFDO1FBRXBCLFlBQU8sR0FBZ0IsSUFBSSxXQUFXLENBQUM7WUFDOUMsaUJBQWlCLEVBQUUsTUFBTTtTQUMxQixDQUFDLENBQUM7UUFHSyxhQUFRLEdBQUcsRUFBRSxDQUFDO0lBTWlCLENBQUM7SUFKeEMsSUFBSSxHQUFHO1FBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUFJRCxlQUFlLENBQUMsS0FBVSxFQUFFLFlBQWtCO1FBQzVDLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDMUIsTUFBTSxxQkFBcUIsR0FBRyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUUvRCxNQUFNLE1BQU0sbUNBQVEscUJBQXFCLEtBQUUsTUFBTSxFQUFFLEtBQUssR0FBRSxDQUFDO1FBRTNELE9BQU8sSUFBSSxDQUFDLElBQUk7YUFDYixHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQzNFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFvQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsS0FBc0IsRUFBRSxZQUFrQjtRQUN6RCxNQUFNLHFCQUFxQixHQUFHLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRS9ELE9BQU8sSUFBSSxDQUFDLElBQUk7YUFDYixHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLHFCQUFxQixFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDckYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELGdCQUFnQixDQUFDLEdBQVcsRUFBRSxVQUFrQixFQUFFLFVBQWtCO1FBQ2xFLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0lBQy9CLENBQUM7SUFFTyx1QkFBdUIsQ0FBQyxLQUFpQjtRQUMvQyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM3QixNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFFdkUsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBRXZCLE9BQU8sYUFBYSxDQUFDO1NBQ3RCO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRU8sa0JBQWtCLENBQUMsSUFBUztRQUNsQyxJQUFJLENBQUMsQ0FBQSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBLEVBQUU7WUFDNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRXZDLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUM7U0FDdEI7UUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFcEMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRU8sVUFBVSxDQUFDLElBQUksRUFBRSxRQUFnQjtRQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsUUFBUSxRQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDOzhFQUNOLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRU8sZUFBZTtRQUNyQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBRXpELElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQzs7O1lBL0VGLFVBQVU7OztZQWxCRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuaW1wb3J0IHsgUG9Db21ib0ZpbHRlciB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1jb21iby1maWx0ZXIuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9Db21ib09wdGlvbiB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1jb21iby1vcHRpb24uaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9SZXNwb25zZSB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1yZXNwb25zZS5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyB2YWxpZGF0ZU9iamVjdFR5cGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcclxuXHJcbi8qKlxyXG4gKiBAZG9jc1ByaXZhdGVcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIFNlcnZpw6dvIHBhZHLDo28gdXRpbGl6YWRvIHBhcmEgZmlsdHJhciBvcyBkYWRvcyBkbyBjb21wb25lbnRlIHBvLWNvbWJvLlxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUG9Db21ib0ZpbHRlclNlcnZpY2UgaW1wbGVtZW50cyBQb0NvbWJvRmlsdGVyIHtcclxuICBmaWVsZExhYmVsOiBzdHJpbmcgPSAnbGFiZWwnO1xyXG4gIGZpZWxkVmFsdWU6IHN0cmluZyA9ICd2YWx1ZSc7XHJcblxyXG4gIHJlYWRvbmx5IGhlYWRlcnM6IEh0dHBIZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKHtcclxuICAgICdYLVBPLU5vLU1lc3NhZ2UnOiAndHJ1ZSdcclxuICB9KTtcclxuXHJcbiAgcHJpdmF0ZSBfdXJsOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBtZXNzYWdlcyA9IFtdO1xyXG5cclxuICBnZXQgdXJsKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fdXJsO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7fVxyXG5cclxuICBnZXRGaWx0ZXJlZERhdGEocGFyYW06IGFueSwgZmlsdGVyUGFyYW1zPzogYW55KTogT2JzZXJ2YWJsZTxBcnJheTxQb0NvbWJvT3B0aW9uPj4ge1xyXG4gICAgY29uc3QgdmFsdWUgPSBwYXJhbS52YWx1ZTtcclxuICAgIGNvbnN0IGZpbHRlclBhcmFtc1ZhbGlkYXRlZCA9IHZhbGlkYXRlT2JqZWN0VHlwZShmaWx0ZXJQYXJhbXMpO1xyXG5cclxuICAgIGNvbnN0IHBhcmFtcyA9IHsgLi4uZmlsdGVyUGFyYW1zVmFsaWRhdGVkLCBmaWx0ZXI6IHZhbHVlIH07XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuaHR0cFxyXG4gICAgICAuZ2V0KGAke3RoaXMudXJsfWAsIHsgcmVzcG9uc2VUeXBlOiAnanNvbicsIHBhcmFtcywgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pXHJcbiAgICAgIC5waXBlKG1hcCgocmVzcG9uc2U6IFBvUmVzcG9uc2UpID0+IHRoaXMucGFyc2VUb0FycmF5Q29tYm9PcHRpb24ocmVzcG9uc2UuaXRlbXMpKSk7XHJcbiAgfVxyXG5cclxuICBnZXRPYmplY3RCeVZhbHVlKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIsIGZpbHRlclBhcmFtcz86IGFueSk6IE9ic2VydmFibGU8UG9Db21ib09wdGlvbj4ge1xyXG4gICAgY29uc3QgZmlsdGVyUGFyYW1zVmFsaWRhdGVkID0gdmFsaWRhdGVPYmplY3RUeXBlKGZpbHRlclBhcmFtcyk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuaHR0cFxyXG4gICAgICAuZ2V0KGAke3RoaXMudXJsfS8ke3ZhbHVlfWAsIHsgcGFyYW1zOiBmaWx0ZXJQYXJhbXNWYWxpZGF0ZWQsIGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KVxyXG4gICAgICAucGlwZShtYXAoaXRlbSA9PiB0aGlzLnBhcnNlVG9Db21ib09wdGlvbihpdGVtKSkpO1xyXG4gIH1cclxuXHJcbiAgY29uZmlnUHJvcGVydGllcyh1cmw6IHN0cmluZywgZmllbGRMYWJlbDogc3RyaW5nLCBmaWVsZFZhbHVlOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX3VybCA9IHVybDtcclxuICAgIHRoaXMuZmllbGRMYWJlbCA9IGZpZWxkTGFiZWw7XHJcbiAgICB0aGlzLmZpZWxkVmFsdWUgPSBmaWVsZFZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBwYXJzZVRvQXJyYXlDb21ib09wdGlvbihpdGVtczogQXJyYXk8YW55Pik6IEFycmF5PFBvQ29tYm9PcHRpb24+IHtcclxuICAgIGlmIChpdGVtcyAmJiBpdGVtcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IHBhcnNlZE9wdGlvbnMgPSBpdGVtcy5tYXAoaXRlbSA9PiB0aGlzLnBhcnNlVG9Db21ib09wdGlvbihpdGVtKSk7XHJcblxyXG4gICAgICB0aGlzLmRpc3BsYXlNZXNzYWdlcygpO1xyXG5cclxuICAgICAgcmV0dXJuIHBhcnNlZE9wdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBwYXJzZVRvQ29tYm9PcHRpb24oaXRlbTogYW55KTogUG9Db21ib09wdGlvbiB7XHJcbiAgICBpZiAoIWl0ZW0/Llt0aGlzLmZpZWxkVmFsdWVdKSB7XHJcbiAgICAgIHRoaXMuYWRkTWVzc2FnZShpdGVtLCB0aGlzLmZpZWxkVmFsdWUpO1xyXG5cclxuICAgICAgcmV0dXJuIHsgdmFsdWU6ICcnIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbGFiZWwgPSBpdGVtW3RoaXMuZmllbGRMYWJlbF07XHJcbiAgICBjb25zdCB2YWx1ZSA9IGl0ZW1bdGhpcy5maWVsZFZhbHVlXTtcclxuXHJcbiAgICByZXR1cm4geyBsYWJlbCwgdmFsdWUgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWRkTWVzc2FnZShpdGVtLCBwcm9wZXJ0eTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLm1lc3NhZ2VzLnB1c2goYENhbm5vdCByZWFkIHByb3BlcnR5IFwiJHtwcm9wZXJ0eX1cIiBvZiAke0pTT04uc3RyaW5naWZ5KGl0ZW0pfSxcclxuICAgICAgc2VlIFtwLWZpZWxkLXZhbHVlXSBwcm9wZXJ0eSBhdCBodHRwczovL3BvLXVpLmlvL2RvY3VtZW50YXRpb24vcG8tY29tYm9gKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZGlzcGxheU1lc3NhZ2VzKCkge1xyXG4gICAgaWYgKHRoaXMubWVzc2FnZXMubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMubWVzc2FnZXMuZm9yRWFjaChtZXNzYWdlID0+IGNvbnNvbGUuZXJyb3IobWVzc2FnZSkpO1xyXG5cclxuICAgICAgdGhpcy5tZXNzYWdlcyA9IFtdO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=