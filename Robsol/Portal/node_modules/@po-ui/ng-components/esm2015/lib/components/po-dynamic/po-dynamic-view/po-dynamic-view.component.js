import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { CurrencyPipe, DatePipe, DecimalPipe, TitleCasePipe } from '@angular/common';
import { PoTimePipe } from '../../../pipes/po-time/po-time.pipe';
import { PoDynamicViewBaseComponent } from './po-dynamic-view-base.component';
import { PoDynamicViewService } from './po-dynamic-view.service';
/**
 * @docsExtends PoDynamicViewBaseComponent
 *
 * @example
 *
 * <example name="po-dynamic-view-basic" title="PO Dynamic View Basic">
 *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.html"> </file>
 *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-view-employee" title="PO Dynamic View - Employee">
 *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.html"> </file>
 *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-view-employee-on-load" title="PO Dynamic View - Employee on load">
 *  <file name="sample-po-dynamic-view-employee-on-load/sample-po-dynamic-view-employee-on-load.component.html"> </file>
 *  <file name="sample-po-dynamic-view-employee-on-load/sample-po-dynamic-view-employee-on-load.component.ts"> </file>
 * </example>
 */
export class PoDynamicViewComponent extends PoDynamicViewBaseComponent {
    constructor(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService) {
        super(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService);
    }
    ngOnChanges(changes) {
        if (changes.fields || changes.value || changes.showAllValue) {
            this.visibleFields = this.getVisibleFields();
        }
    }
    ngOnInit() {
        if (this.load) {
            this.updateValuesAndFieldsOnLoad();
        }
    }
    getValuesAndFieldsFromLoad() {
        return __awaiter(this, void 0, void 0, function* () {
            let valueAndFieldsFromLoad;
            if (typeof this.load === 'string') {
                valueAndFieldsFromLoad = yield this.dynamicViewService.onLoad(this.load, this.value);
            }
            else if (typeof this.load === 'function') {
                valueAndFieldsFromLoad = this.load();
            }
            return valueAndFieldsFromLoad || {};
        });
    }
    getVisibleFields() {
        if (this.showAllValue) {
            return this.getMergedFields();
        }
        return this.value && this.fields.length ? this.getConfiguredFields() : this.getValueFields();
    }
    setFieldOnLoad(fieldOnLoad) {
        const index = this.fields.findIndex(field => field.property === fieldOnLoad.property);
        if (index >= 0) {
            this.fields[index] = Object.assign(Object.assign({}, this.fields[index]), fieldOnLoad);
        }
        else {
            this.fields.push(Object.assign({}, fieldOnLoad));
        }
    }
    setFieldsOnLoad(fields) {
        if (fields) {
            fields.forEach(fieldOnLoad => {
                this.setFieldOnLoad(fieldOnLoad);
            });
        }
    }
    setValueOnLoad(newValue) {
        Object.assign(this.value, newValue);
    }
    updateValuesAndFieldsOnLoad() {
        return __awaiter(this, void 0, void 0, function* () {
            const { value, fields } = yield this.getValuesAndFieldsFromLoad();
            this.setValueOnLoad(value);
            this.setFieldsOnLoad(fields);
            this.visibleFields = this.getVisibleFields();
        });
    }
}
PoDynamicViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-dynamic-view',
                template: "<div class=\"po-dynamic-view po-row\" *ngIf=\"visibleFields.length\">\r\n  <ng-template ngFor let-field [ngForOf]=\"visibleFields\">\r\n    <po-divider *ngIf=\"field?.divider?.trim()\" class=\"po-sm-12\" [p-label]=\"field.divider\"> </po-divider>\r\n\r\n    <ng-container *ngTemplateOutlet=\"!field.tag ? poInfo : poTag; context: { $implicit: field }\"> </ng-container>\r\n  </ng-template>\r\n</div>\r\n\r\n<ng-template #poInfo let-field>\r\n  <po-info [ngClass]=\"field.cssClass\" [p-label]=\"field.label\" [p-value]=\"field.value\"> </po-info>\r\n</ng-template>\r\n\r\n<ng-template #poTag let-field>\r\n  <po-tag\r\n    [ngClass]=\"field.cssClass\"\r\n    [p-color]=\"field.color\"\r\n    [p-icon]=\"field.icon\"\r\n    [p-inverse]=\"field.inverse\"\r\n    [p-label]=\"field.label\"\r\n    [p-value]=\"field.value\"\r\n  >\r\n  </po-tag>\r\n</ng-template>\r\n"
            },] }
];
PoDynamicViewComponent.ctorParameters = () => [
    { type: CurrencyPipe },
    { type: DatePipe },
    { type: DecimalPipe },
    { type: PoTimePipe },
    { type: TitleCasePipe },
    { type: PoDynamicViewService }
];
//# sourceMappingURL=data:application/json;base64,