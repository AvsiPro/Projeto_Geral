import { Input, Directive } from '@angular/core';
import { CurrencyPipe, DatePipe, DecimalPipe, TitleCasePipe } from '@angular/common';
import { convertToBoolean, isTypeof, sortFields } from '../../../utils/util';
import { PoTimePipe } from '../../../pipes/po-time/po-time.pipe';
import { getGridColumnsClasses, isVisibleField } from '../po-dynamic.util';
import { PoDynamicViewService } from './po-dynamic-view.service';
/**
 *
 * @description
 *
 * Componente para listar dados dinamicamente a partir de uma lista de objetos.
 *
 * > Por padrão esse componente cria `po-info` para exibição, é possível criar `po-tag` passando a propriedade { tag: true }.
 *
 */
export class PoDynamicViewBaseComponent {
    constructor(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService) {
        this.currencyPipe = currencyPipe;
        this.datePipe = datePipe;
        this.decimalPipe = decimalPipe;
        this.timePipe = timePipe;
        this.titleCasePipe = titleCasePipe;
        this.dynamicViewService = dynamicViewService;
        this.visibleFields = [];
        this._fields = [];
        this._showAllValue = false;
        this._value = {};
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista de objetos que implementam a interface `PoDynamicView`.
     *
     * > Ex: `[ { property: 'age' } ]`
     *
     * Regras de tipagem e formatação dos valores exibidos:
     *
     * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
     * como formato padrão.
     * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
     * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
     * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
     * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
     *
     * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `p-value`.
     *
     * @default `[]`
     */
    set fields(fields) {
        this._fields = Array.isArray(fields) ? [...fields] : [];
    }
    get fields() {
        return this._fields;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `p-value`.
     *
     * @default `false`
     */
    set showAllValue(value) {
        this._showAllValue = convertToBoolean(value);
    }
    get showAllValue() {
        return this._showAllValue;
    }
    /**
     * @description
     *
     * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
     * dos objetos contidos na propridade `p-fields`.
     *
     * > Ex: `{ age: '35' }`
     */
    set value(value) {
        this._value = value && isTypeof(value, 'object') ? value : {};
    }
    get value() {
        return this._value;
    }
    // retorna os fields com os valores recuperados do objeto value.
    getConfiguredFields() {
        const newFields = [];
        this.fields.forEach(field => {
            if (isVisibleField(field)) {
                newFields.push(this.createField(field));
            }
        });
        return sortFields(newFields);
    }
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    getMergedFields() {
        const mergedFields = [...this.getConfiguredFields()];
        this.getValueFields().forEach(valueField => {
            const fieldIndex = mergedFields.findIndex(field => field.property === valueField.property);
            const property = valueField.property;
            if (fieldIndex === -1) {
                mergedFields.push(this.createField({ property }));
            }
        });
        return mergedFields;
    }
    // retorna o objeto value como fields.
    getValueFields() {
        return Object.keys(this.value).map(property => this.createField({ property }));
    }
    createField(field) {
        const property = field.property;
        const value = this.transformValue(field.type, this.value[property], field.format);
        const classesGridColumns = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns, {
            smPull: field.gridSmPull,
            mdPull: field.gridMdPull,
            lgPull: field.gridLgPull,
            xlPull: field.gridXlPull
        });
        return Object.assign({ property,
            value, label: this.titleCasePipe.transform(property), cssClass: classesGridColumns }, field);
    }
    transformValue(type, value, format) {
        let transformedValue = value;
        switch (type) {
            case 'currency':
                transformedValue = this.currencyPipe.transform(value, format || 'BRL', 'symbol', '1.2-2');
                break;
            case 'date':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy');
                break;
            case 'dateTime':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy HH:mm:ss');
                break;
            case 'number':
                transformedValue = this.decimalPipe.transform(value, format);
                break;
            case 'time':
                transformedValue = this.timePipe.transform(value, format || 'HH:mm:ss.ffffff');
                break;
        }
        return transformedValue;
    }
}
PoDynamicViewBaseComponent.decorators = [
    { type: Directive }
];
PoDynamicViewBaseComponent.ctorParameters = () => [
    { type: CurrencyPipe },
    { type: DatePipe },
    { type: DecimalPipe },
    { type: PoTimePipe },
    { type: TitleCasePipe },
    { type: PoDynamicViewService }
];
PoDynamicViewBaseComponent.propDecorators = {
    load: [{ type: Input, args: ['p-load',] }],
    fields: [{ type: Input, args: ['p-fields',] }],
    showAllValue: [{ type: Input, args: ['p-show-all-value',] }],
    value: [{ type: Input, args: ['p-value',] }]
};
//# sourceMappingURL=data:application/json;base64,