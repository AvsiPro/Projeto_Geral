import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir um ícone na tabela.
 */
export class PoTableIconComponent {
    constructor() {
        /** Output click. */
        this.click = new EventEmitter();
    }
    get allowTooltip() {
        return !this.disabled && this.iconTooltip;
    }
    onClick(event) {
        if (this.clickable) {
            this.click.emit(event);
        }
    }
    tooltipMouseEnter() {
        if (this.allowTooltip) {
            this.tooltip = this.iconTooltip;
        }
    }
    tooltipMouseLeave() {
        this.tooltip = undefined;
    }
}
PoTableIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-table-icon',
                template: "<po-icon\r\n  class=\"po-table-icon-content {{ disabled ? '' : color }}\"\r\n  [ngClass]=\"{ 'po-clickable': clickable, 'po-table-icon-disabled': disabled }\"\r\n  [p-icon]=\"icon\"\r\n  [p-tooltip]=\"tooltip\"\r\n  (click)=\"onClick($event)\"\r\n  (mouseenter)=\"tooltipMouseEnter()\"\r\n  (mouseleave)=\"tooltipMouseLeave()\"\r\n></po-icon>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PoTableIconComponent.propDecorators = {
    clickable: [{ type: Input, args: ['p-clickable',] }],
    color: [{ type: Input, args: ['p-color',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    icon: [{ type: Input, args: ['p-icon',] }],
    iconTooltip: [{ type: Input, args: ['p-icon-tooltip',] }],
    click: [{ type: Output, args: ['p-click',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tdGFibGUvcG8tdGFibGUtaWNvbi9wby10YWJsZS1pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBRTdHOzs7Ozs7R0FNRztBQU1ILE1BQU0sT0FBTyxvQkFBb0I7SUFMakM7UUFxQkUsb0JBQW9CO1FBQ0QsVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBdUJuRSxDQUFDO0lBbkJDLElBQVksWUFBWTtRQUN0QixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzVDLENBQUM7SUFFRCxPQUFPLENBQUMsS0FBSztRQUNYLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFRCxpQkFBaUI7UUFDZixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQUVELGlCQUFpQjtRQUNmLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO0lBQzNCLENBQUM7OztZQTVDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLHNXQUE2QztnQkFDN0MsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7Ozt3QkFHRSxLQUFLLFNBQUMsYUFBYTtvQkFHbkIsS0FBSyxTQUFDLFNBQVM7dUJBR2YsS0FBSyxTQUFDLFlBQVk7bUJBR2xCLEtBQUssU0FBQyxRQUFROzBCQUdkLEtBQUssU0FBQyxnQkFBZ0I7b0JBR3RCLE1BQU0sU0FBQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBkb2NzUHJpdmF0ZVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogQ29tcG9uZW50ZSByZXNwb25zw6F2ZWwgcG9yIGV4aWJpciB1bSDDrWNvbmUgbmEgdGFiZWxhLlxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdwby10YWJsZS1pY29uJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdGFibGUtaWNvbi5jb21wb25lbnQuaHRtbCcsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxufSlcclxuZXhwb3J0IGNsYXNzIFBvVGFibGVJY29uQ29tcG9uZW50IHtcclxuICAvKiogRGVmaW5lIHNlIG8gw61jb25lIMOpIGNsaWPDoXZlbC4gKi9cclxuICBASW5wdXQoJ3AtY2xpY2thYmxlJykgY2xpY2thYmxlOiBib29sZWFuO1xyXG5cclxuICAvKiogQ29yIGRvIMOtY29uZS4gKi9cclxuICBASW5wdXQoJ3AtY29sb3InKSBjb2xvcjogc3RyaW5nO1xyXG5cclxuICAvKiogRGVzYWJpbGl0YWRvLiAqL1xyXG4gIEBJbnB1dCgncC1kaXNhYmxlZCcpIGRpc2FibGVkOiBib29sZWFuO1xyXG5cclxuICAvKiogQ2xhc3NlIGNzcyBkbyDDrWNvbmUuICovXHJcbiAgQElucHV0KCdwLWljb24nKSBpY29uOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcclxuXHJcbiAgLyoqIFRleHRvIGRvIHRvb2x0aXAuICovXHJcbiAgQElucHV0KCdwLWljb24tdG9vbHRpcCcpIGljb25Ub29sdGlwOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBPdXRwdXQgY2xpY2suICovXHJcbiAgQE91dHB1dCgncC1jbGljaycpIGNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgdG9vbHRpcDogc3RyaW5nO1xyXG5cclxuICBwcml2YXRlIGdldCBhbGxvd1Rvb2x0aXAoKSB7XHJcbiAgICByZXR1cm4gIXRoaXMuZGlzYWJsZWQgJiYgdGhpcy5pY29uVG9vbHRpcDtcclxuICB9XHJcblxyXG4gIG9uQ2xpY2soZXZlbnQpIHtcclxuICAgIGlmICh0aGlzLmNsaWNrYWJsZSkge1xyXG4gICAgICB0aGlzLmNsaWNrLmVtaXQoZXZlbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdG9vbHRpcE1vdXNlRW50ZXIoKSB7XHJcbiAgICBpZiAodGhpcy5hbGxvd1Rvb2x0aXApIHtcclxuICAgICAgdGhpcy50b29sdGlwID0gdGhpcy5pY29uVG9vbHRpcDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRvb2x0aXBNb3VzZUxlYXZlKCkge1xyXG4gICAgdGhpcy50b29sdGlwID0gdW5kZWZpbmVkO1xyXG4gIH1cclxufVxyXG4iXX0=