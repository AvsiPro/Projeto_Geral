import { ChangeDetectorRef, Component, ContentChild, ElementRef, forwardRef, IterableDiffers, Renderer2, ViewChild } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map, tap } from 'rxjs/operators';
import { PoControlPositionService } from '../../../services/po-control-position/po-control-position.service';
import { PoKeyCodeEnum } from './../../../enums/po-key-code.enum';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
import { PoComboBaseComponent } from './po-combo-base.component';
import { PoComboFilterMode } from './po-combo-filter-mode.enum';
import { PoComboFilterService } from './po-combo-filter.service';
import { PoComboOptionTemplateDirective } from './po-combo-option-template/po-combo-option-template.directive';
const poComboContainerOffset = 8;
const poComboContainerPositionDefault = 'bottom';
/**
 * @docsExtends PoComboBaseComponent
 *
 * @description
 * Utilizando po-combo com serviço, é possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente
 * faça uma requisição à URL informada passando o valor digitado no campo. Se encontrado o valor, então o mesmo será selecionado, caso
 * não seja encontrado, então a lista de itens voltará para o estado inicial.
 *
 * @example
 *
 * <example name="po-combo-basic" title="PO Combo Basic">
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.html"> </file>
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-labs" title="PO Combo Labs">
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.html"> </file>
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-scheduling" title="PO Combo - Scheduling">
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.html"> </file>
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.ts"> </file>
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.service.ts"> </file>
 * </example>
 *
 * <example name="po-combo-transfer" title="PO Combo - Banking Transfer">
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.html"> </file>
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes" title="PO Combo - Heroes">
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.html"> </file>
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes-reactive-form" title="PO Combo - Heroes Reactive Form">
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.html"> </file>
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-hotels" title="PO Combo - Booking Hotel">
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.html"> </file>
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.ts"> </file>
 * </example>
 */
export class PoComboComponent extends PoComboBaseComponent {
    constructor(element, differs, defaultService, renderer, changeDetector, controlPosition, sanitized, languageService) {
        super(languageService);
        this.element = element;
        this.differs = differs;
        this.defaultService = defaultService;
        this.renderer = renderer;
        this.changeDetector = changeDetector;
        this.controlPosition = controlPosition;
        this.sanitized = sanitized;
        this.comboIcon = 'po-icon-arrow-down';
        this.comboOpen = false;
        this.isProcessingValueByTab = false;
        this.scrollTop = 0;
        this.shouldMarkLetters = true;
        this._isServerSearching = false;
        this.onScroll = () => {
            this.adjustContainerPosition();
        };
        this.differ = differs.find([]).create(null);
    }
    set isServerSearching(value) {
        if (value) {
            this._isServerSearching = value;
            this.changeDetector.detectChanges();
            this.setContainerPosition();
            this.initializeListeners();
        }
        else {
            this._isServerSearching = value;
        }
    }
    get isServerSearching() {
        return this._isServerSearching;
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    ngOnChanges(changes) {
        if (changes.debounceTime) {
            this.unsubscribeKeyupObservable();
            this.initInputObservable();
        }
        if (changes.filterService) {
            this.configAfterSetFilterService(this.filterService);
        }
    }
    ngOnDestroy() {
        this.removeListeners();
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoComboComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoComboComponent, { static: true }) combo: PoComboComponent;
     *
     * focusCombo() {
     *   this.combo.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    onBlur() {
        var _a;
        (_a = this.onModelTouched) === null || _a === void 0 ? void 0 : _a.call(this);
    }
    onKeyDown(event) {
        const key = event.keyCode;
        const inputValue = event.target.value;
        // busca um registro quando acionar o tab
        if (this.service && key === PoKeyCodeEnum.tab && inputValue && !this.disabledTabFilter) {
            this.controlComboVisibility(false);
            return this.getObjectByValue(inputValue);
        }
        // Teclas "up" e "down"
        if (key === PoKeyCodeEnum.arrowUp || key === PoKeyCodeEnum.arrowDown) {
            event.preventDefault();
            if (this.comboOpen) {
                if (key === PoKeyCodeEnum.arrowUp) {
                    this.selectPreviousOption();
                }
                else {
                    this.selectNextOption();
                }
            }
            this.controlComboVisibility(true);
            this.isFiltering = this.changeOnEnter ? this.isFiltering : false;
            this.shouldMarkLetters = this.changeOnEnter ? this.shouldMarkLetters : false;
            return;
        }
        // Teclas "tab" ou "esc"
        if (key === PoKeyCodeEnum.tab || key === PoKeyCodeEnum.esc) {
            if (key === PoKeyCodeEnum.esc && this.comboOpen) {
                event.preventDefault();
                event.stopPropagation();
            }
            this.controlComboVisibility(false);
            this.verifyValidOption();
            this.isProcessingValueByTab = true;
            if (!this.service) {
                // caso for changeOnEnter e nao ter selectedValue deve limpar o selectedView para reinicia-lo.
                this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
            }
            return;
        }
        // Tecla "enter"
        if (key === PoKeyCodeEnum.enter && this.selectedView && this.comboOpen) {
            const isUpdateModel = this.selectedView.value !== this.selectedValue || inputValue !== this.selectedView.label;
            this.controlComboVisibility(false);
            this.updateSelectedValue(this.selectedView, isUpdateModel);
            this.isFiltering = false;
            if (!this.service) {
                this.updateComboList([...this.cacheStaticOptions]);
            }
            return;
        }
        if (key === PoKeyCodeEnum.enter) {
            this.controlComboVisibility(true);
        }
    }
    onKeyUp(event) {
        const key = event.keyCode || event.which;
        const inputValue = event.target.value;
        const isValidKey = key !== PoKeyCodeEnum.arrowUp && key !== PoKeyCodeEnum.arrowDown && key !== PoKeyCodeEnum.enter;
        if (isValidKey) {
            if (inputValue) {
                if (!this.service && this.previousSearchValue !== inputValue) {
                    this.shouldMarkLetters = true;
                    this.isFiltering = true;
                    this.searchForLabel(inputValue, this.comboOptionsList, this.filterMode);
                }
            }
            else {
                // quando apagar rapido o campo e conter serviço, valor, não disparava o keyup observable
                // necessario este tratamento para retornar a lista 'default'.
                const useDefaultOptionsService = this.service && this.selectedValue && this.selectedOption.label === this.previousSearchValue;
                this.updateSelectedValue(null);
                if (!this.service) {
                    this.updateComboList();
                }
                else if (useDefaultOptionsService) {
                    this.updateComboList([...this.cacheOptions]);
                }
                this.isFiltering = false;
            }
            // caso o valor pesquisado for diferente do anterior deve abrir o combo
            if (this.previousSearchValue !== inputValue) {
                this.changeDetector.detectChanges();
                this.controlComboVisibility(true);
            }
        }
        this.previousSearchValue = inputValue;
    }
    initInputObservable() {
        if (this.service) {
            const keyupObservable = fromEvent(this.inputEl.nativeElement, 'keyup').pipe(filter((e) => this.isValidCharacterToSearch(e.keyCode)), map((e) => e.currentTarget.value), distinctUntilChanged(), tap(() => {
                this.shouldMarkLetters = false;
            }), debounceTime(this.debounceTime));
            this.keyupSubscribe = keyupObservable.subscribe(value => {
                if (value.length >= this.filterMinlength || !value) {
                    this.controlApplyFilter(value);
                }
            });
        }
    }
    controlApplyFilter(value) {
        if (!this.isProcessingValueByTab && (!this.selectedOption || value !== this.selectedOption.label)) {
            this.applyFilter(value);
        }
        this.isProcessingValueByTab = false;
    }
    applyFilter(value) {
        this.controlComboVisibility(false);
        this.isServerSearching = true;
        const param = { property: this.fieldLabel, value };
        this.filterSubscription = this.service.getFilteredData(param, this.filterParams).subscribe(items => this.setOptionsByApplyFilter(value, items), error => this.onErrorFilteredData());
    }
    setOptionsByApplyFilter(value, items) {
        this.shouldMarkLetters = true;
        this.isServerSearching = false;
        this.options = items;
        this.searchForLabel(value, items, this.filterMode);
        this.changeDetector.detectChanges();
        this.controlComboVisibility(true);
        if (this.isFirstFilter) {
            this.isFirstFilter = !this.isFirstFilter;
            this.cacheOptions = this.comboOptionsList;
        }
    }
    getObjectByValue(value) {
        var _a;
        if (this.selectedValue !== value && ((_a = this.selectedOption) === null || _a === void 0 ? void 0 : _a.label) !== value) {
            this.isProcessingValueByTab = true;
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams).subscribe(item => this.updateOptionByFilteredValue(item), error => this.onErrorGetObjectByValue());
        }
    }
    updateOptionByFilteredValue(item) {
        if (item) {
            this.options = [item];
            this.onOptionClick(item);
        }
        else {
            this.updateSelectedValue(null);
        }
        setTimeout(() => {
            this.isProcessingValueByTab = false;
        }, this.debounceTime);
    }
    selectPreviousOption() {
        const currentViewValue = this.selectedView && this.selectedView.value;
        if (currentViewValue) {
            const nextOption = this.getNextOption(currentViewValue, this.visibleOptions, true);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            const visibleOption = this.visibleOptions[this.visibleOptions.length - 1];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    }
    selectNextOption() {
        const currentViewValue = this.selectedView && this.selectedView.value;
        if (currentViewValue) {
            const nextOption = this.getNextOption(currentViewValue, this.visibleOptions);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            const index = this.changeOnEnter ? 1 : 0;
            const visibleOption = this.visibleOptions[index];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    }
    toggleComboVisibility() {
        if (this.disabled) {
            return;
        }
        if (this.service && !this.disabledInitFilter) {
            this.applyFilterInFirstClick();
        }
        this.controlComboVisibility(!this.comboOpen);
    }
    applyFilterInFirstClick() {
        if (this.isFirstFilter && !this.selectedValue) {
            this.applyFilter('');
        }
    }
    controlComboVisibility(toOpen) {
        toOpen ? this.open() : this.close();
    }
    onOptionClick(option, event) {
        const inputValue = this.getInputValue();
        const isUpdateModel = option.value !== this.selectedValue || !!(this.selectedView && inputValue !== this.selectedView.label);
        if (event) {
            event.stopPropagation();
        }
        this.updateSelectedValue(option, isUpdateModel);
        this.controlComboVisibility(false);
        if (!this.service) {
            this.updateComboList([...this.cacheStaticOptions]);
        }
        this.previousSearchValue = this.selectedView.label;
    }
    scrollTo(index) {
        const selectedItem = this.element.nativeElement.querySelectorAll('.po-combo-item-selected');
        const scrollTop = !selectedItem.length || index <= 1 ? 0 : selectedItem[0].offsetTop - 88;
        this.setScrollTop(scrollTop);
    }
    getInputValue() {
        return this.inputEl.nativeElement.value;
    }
    setInputValue(value) {
        this.inputEl.nativeElement.value = value;
    }
    wasClickedOnToggle(event) {
        if (this.comboOpen &&
            !this.inputEl.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            (!this.contentElement || !this.contentElement.nativeElement.contains(event.target))) {
            // Esconde Content do Combo quando for clicado fora
            this.controlComboVisibility(false);
            this.verifyValidOption();
            // caso for changeOnEnter deve limpar o selectedView para reinicia-lo
            this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
        }
        else {
            if (this.service && !this.getInputValue() && !this.isFirstFilter) {
                this.applyFilter('');
            }
        }
    }
    getLabelFormatted(label) {
        const sanitizedLabel = this.sanitizeTagHTML(label);
        let format = sanitizedLabel;
        if (this.isFiltering ||
            (this.service &&
                this.getInputValue() &&
                !this.compareObjects(this.cacheOptions, this.visibleOptions) &&
                this.shouldMarkLetters)) {
            const labelInput = this.sanitizeTagHTML(this.getInputValue().toString().toLowerCase());
            const labelLowerCase = sanitizedLabel.toLowerCase();
            const openTagBold = '<span class="po-font-text-large-bold">';
            const closeTagBold = '</span>';
            let startString;
            let middleString;
            let endString;
            switch (this.filterMode) {
                case PoComboFilterMode.startsWith:
                case PoComboFilterMode.contains:
                    const indexOfLabelInput = labelLowerCase.indexOf(labelInput);
                    if (indexOfLabelInput > -1) {
                        startString = sanitizedLabel.substring(0, indexOfLabelInput);
                        middleString = sanitizedLabel.substring(indexOfLabelInput, indexOfLabelInput + labelInput.length);
                        endString = sanitizedLabel.substring(indexOfLabelInput + labelInput.length);
                        format = startString + openTagBold + middleString + closeTagBold + endString;
                    }
                    break;
                case PoComboFilterMode.endsWith:
                    const lastIndexOfLabelInput = labelLowerCase.lastIndexOf(labelInput);
                    if (lastIndexOfLabelInput > -1) {
                        startString = sanitizedLabel.substring(0, lastIndexOfLabelInput);
                        middleString = sanitizedLabel.substring(lastIndexOfLabelInput);
                        format = startString + openTagBold + middleString + closeTagBold;
                    }
                    break;
            }
        }
        return this.safeHtml(format);
    }
    safeHtml(value) {
        return this.sanitized.bypassSecurityTrustHtml(value);
    }
    isValidCharacterToSearch(keyCode) {
        return (keyCode !== 9 && // tab
            keyCode !== 13 && // entet
            keyCode !== 16 && // shift
            keyCode !== 17 && // ctrl
            keyCode !== 18 && // alt
            keyCode !== 20 && // capslock
            keyCode !== 27 && // esc
            keyCode !== 37 && // seta
            keyCode !== 38 && // seta
            keyCode !== 39 && // seta
            keyCode !== 40 && // seta
            keyCode !== 93); // windows menu
    }
    searchOnEnter(value) {
        if (this.service && !this.selectedView && value.length >= this.filterMinlength) {
            this.controlApplyFilter(value);
        }
    }
    adjustContainerPosition() {
        this.controlPosition.adjustPosition(poComboContainerPositionDefault);
    }
    close() {
        this.comboOpen = false;
        this.changeDetector.detectChanges();
        this.comboIcon = 'po-icon-arrow-down';
        this.removeListeners();
        this.isFiltering = false;
    }
    initializeListeners() {
        this.removeListeners();
        this.clickoutListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnToggle(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', () => {
            // timeout necessario pois a animação do po-menu impacta no ajuste da posição do container.
            setTimeout(() => this.adjustContainerPosition(), 250);
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    onErrorGetObjectByValue() {
        this.updateOptionByFilteredValue(null);
    }
    onErrorFilteredData() {
        this.isServerSearching = false;
        this.updateComboList([]);
        this.controlComboVisibility(true);
    }
    open() {
        this.comboOpen = true;
        this.changeDetector.detectChanges();
        this.comboIcon = 'po-icon-arrow-up';
        this.initializeListeners();
        this.inputEl.nativeElement.focus();
        this.scrollTo(this.getIndexSelectedView());
        this.setContainerPosition();
    }
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    sanitizeTagHTML(value = '') {
        return value.replace(/\</gm, '&lt;').replace(/\>/g, '&gt;');
    }
    setContainerPosition() {
        this.controlPosition.setElements(this.containerElement.nativeElement, poComboContainerOffset, this.inputEl, ['top', 'bottom'], true);
        this.adjustContainerPosition();
    }
    setScrollTop(scrollTop) {
        if (this.contentElement) {
            this.contentElement.nativeElement.scrollTop = scrollTop;
        }
    }
}
PoComboComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-combo',
                template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content\">\r\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\r\n      <po-icon class=\"po-field-icon\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\r\n    </div>\r\n\r\n    <input\r\n      #inp\r\n      class=\"po-input po-combo-input\"\r\n      [ngClass]=\"clean && inp.value ? 'po-input-double-icon-right' : 'po-input-icon-right'\"\r\n      [class.po-input-icon-left]=\"icon\"\r\n      autocomplete=\"off\"\r\n      type=\"text\"\r\n      [attr.name]=\"name\"\r\n      [disabled]=\"disabled\"\r\n      [placeholder]=\"placeholder\"\r\n      [required]=\"required\"\r\n      (click)=\"toggleComboVisibility()\"\r\n      (keyup)=\"onKeyUp($event)\"\r\n      (blur)=\"onBlur()\"\r\n      (keyup.enter)=\"searchOnEnter($event.target.value)\"\r\n      (keydown)=\"onKeyDown($event)\"\r\n    />\r\n\r\n    <div class=\"po-field-icon-container-right\">\r\n      <po-clean *ngIf=\"clean && !disabled\" (p-change-event)=\"clear($event)\" [p-element-ref]=\"inputEl\"> </po-clean>\r\n      <span\r\n        #iconArrow\r\n        class=\"po-icon po-field-icon {{ comboIcon }}\"\r\n        [class.po-field-icon-disabled]=\"disabled\"\r\n        [class.po-field-icon]=\"!disabled\"\r\n        (click)=\"toggleComboVisibility()\"\r\n      >\r\n      </span>\r\n    </div>\r\n  </div>\r\n\r\n  <div #containerElement class=\"po-combo-container\" [hidden]=\"!comboOpen && !isServerSearching\">\r\n    <ng-container *ngIf=\"isServerSearching; then loadingTemplate; else optionsTemplate\"> </ng-container>\r\n  </div>\r\n\r\n  <po-field-container-bottom></po-field-container-bottom>\r\n</po-field-container>\r\n\r\n<ng-template #loadingTemplate>\r\n  <div class=\"po-combo-container-loading\">\r\n    <po-loading></po-loading>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #optionsTemplate>\r\n  <ng-container *ngIf=\"visibleOptions.length; then visibleOptionsTemplate; else noDataTemplate\"> </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #visibleOptionsTemplate>\r\n  <ul #contentElement class=\"po-combo-container-content\">\r\n    <li\r\n      *ngFor=\"let option of visibleOptions\"\r\n      [class.po-combo-item-selected]=\"compareObjects(selectedView, option)\"\r\n      (click)=\"option?.options ? undefined : onOptionClick(option, $event)\"\r\n    >\r\n      <ng-container *ngIf=\"comboOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\r\n\r\n      <ng-template #defaultOptionTemplate>\r\n        <label *ngIf=\"option?.options; else optionLink\" class=\"po-combo-item-title\">{{ option.label }}</label>\r\n        <ng-template #optionLink>\r\n          <a class=\"po-combo-item\">\r\n            <span [innerHTML]=\"getLabelFormatted(option?.label)\"></span>\r\n          </a>\r\n        </ng-template>\r\n      </ng-template>\r\n\r\n      <ng-template #optionTemplate>\r\n        <ng-container *ngIf=\"isOptionGroupList; then optionsGroupTemplate; else defaultOptionsTemplate\"></ng-container>\r\n\r\n        <ng-template #optionsGroupTemplate>\r\n          <ng-template\r\n            [ngTemplateOutlet]=\"comboOptionTemplate?.templateRef\"\r\n            [ngTemplateOutletContext]=\"{ $implicit: option, selected: compareObjects(selectedView, option) }\"\r\n          >\r\n          </ng-template>\r\n        </ng-template>\r\n\r\n        <ng-template #defaultOptionsTemplate>\r\n          <a class=\"po-combo-item\">\r\n            <ng-template\r\n              [ngTemplateOutlet]=\"comboOptionTemplate?.templateRef\"\r\n              [ngTemplateOutletContext]=\"{ $implicit: option }\"\r\n            >\r\n            </ng-template>\r\n          </a>\r\n        </ng-template>\r\n      </ng-template>\r\n    </li>\r\n  </ul>\r\n</ng-template>\r\n\r\n<ng-template #noDataTemplate>\r\n  <div class=\"po-combo-container-no-data\">\r\n    <div class=\"po-combo-no-data po-text-center\">\r\n      <span>\r\n        {{ literals.noData }}\r\n      </span>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n",
                providers: [
                    PoComboFilterService,
                    PoControlPositionService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoComboComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoComboComponent),
                        multi: true
                    }
                ]
            },] }
];
PoComboComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: IterableDiffers },
    { type: PoComboFilterService },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: PoControlPositionService },
    { type: DomSanitizer },
    { type: PoLanguageService }
];
PoComboComponent.propDecorators = {
    comboOptionTemplate: [{ type: ContentChild, args: [PoComboOptionTemplateDirective, { static: true },] }],
    containerElement: [{ type: ViewChild, args: ['containerElement', { read: ElementRef },] }],
    contentElement: [{ type: ViewChild, args: ['contentElement', { read: ElementRef },] }],
    iconElement: [{ type: ViewChild, args: ['iconArrow', { read: ElementRef, static: true },] }],
    inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef, static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,