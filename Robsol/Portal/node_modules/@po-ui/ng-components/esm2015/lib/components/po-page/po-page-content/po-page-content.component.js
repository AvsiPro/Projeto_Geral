import { Component, Renderer2 } from '@angular/core';
import { PoPageContentBaseComponent } from './po-page-content-base.component';
/**
 * @docsPrivate
 *
 * @docsExtends PoPageContentBaseComponent
 */
export class PoPageContentComponent extends PoPageContentBaseComponent {
    constructor(renderer) {
        super();
        this.renderer = renderer;
        this.contentOpacity = 0;
        this.height = '90%';
        this.overflowY = 'none';
        this.initializeListeners();
    }
    ngAfterViewInit() {
        this.recalculateHeaderSize();
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    recalculateHeaderSize() {
        setTimeout(() => {
            const pageHeaderElement = document.querySelector('div.po-page-header');
            this.setHeightContent(pageHeaderElement);
            this.contentOpacity = 1;
        });
    }
    setHeightContent(poPageHeader) {
        const bodyHeight = document.body.clientHeight;
        const pageHeaderHeight = poPageHeader ? poPageHeader.offsetTop + poPageHeader.offsetHeight : 0;
        const newHeight = bodyHeight - pageHeaderHeight;
        this.height = `${newHeight}px`;
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.recalculateHeaderSize();
        });
    }
    removeListeners() {
        this.resizeListener();
    }
}
PoPageContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-content',
                template: "<div class=\"po-page-content\" [style.height]=\"height\" [style.opacity]=\"contentOpacity\" [style.overflow-y]=\"overflowY\">\r\n  <ng-content></ng-content>\r\n</div>\r\n"
            },] }
];
PoPageContentComponent.ctorParameters = () => [
    { type: Renderer2 }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1jb250ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1wYWdlL3BvLXBhZ2UtY29udGVudC9wby1wYWdlLWNvbnRlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFhLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUU5RTs7OztHQUlHO0FBS0gsTUFBTSxPQUFPLHNCQUF1QixTQUFRLDBCQUEwQjtJQUtwRSxZQUFtQixRQUFtQjtRQUNwQyxLQUFLLEVBQUUsQ0FBQztRQURTLGFBQVEsR0FBUixRQUFRLENBQVc7UUFKdEMsbUJBQWMsR0FBVyxDQUFDLENBQUM7UUFDM0IsV0FBTSxHQUFXLEtBQUssQ0FBQztRQUN2QixjQUFTLEdBQVcsTUFBTSxDQUFDO1FBSXpCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVELHFCQUFxQjtRQUNuQixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsTUFBTSxpQkFBaUIsR0FBZ0IsUUFBUSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBRXBGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3pDLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGdCQUFnQixDQUFDLFlBQXlCO1FBQ3hDLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzlDLE1BQU0sZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvRixNQUFNLFNBQVMsR0FBRyxVQUFVLEdBQUcsZ0JBQWdCLENBQUM7UUFFaEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLFNBQVMsSUFBSSxDQUFDO0lBQ2pDLENBQUM7SUFFTyxtQkFBbUI7UUFDekIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRTtZQUNsRSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxlQUFlO1FBQ3JCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDOzs7WUEvQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLHNMQUErQzthQUNoRDs7O1lBWjZDLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIE9uRGVzdHJveSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBQb1BhZ2VDb250ZW50QmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tcGFnZS1jb250ZW50LWJhc2UuY29tcG9uZW50JztcclxuXHJcbi8qKlxyXG4gKiBAZG9jc1ByaXZhdGVcclxuICpcclxuICogQGRvY3NFeHRlbmRzIFBvUGFnZUNvbnRlbnRCYXNlQ29tcG9uZW50XHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3BvLXBhZ2UtY29udGVudCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXBhZ2UtY29udGVudC5jb21wb25lbnQuaHRtbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFBvUGFnZUNvbnRlbnRDb21wb25lbnQgZXh0ZW5kcyBQb1BhZ2VDb250ZW50QmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgY29udGVudE9wYWNpdHk6IG51bWJlciA9IDA7XHJcbiAgaGVpZ2h0OiBzdHJpbmcgPSAnOTAlJztcclxuICBvdmVyZmxvd1k6IHN0cmluZyA9ICdub25lJztcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLmluaXRpYWxpemVMaXN0ZW5lcnMoKTtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIHRoaXMucmVjYWxjdWxhdGVIZWFkZXJTaXplKCk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICByZWNhbGN1bGF0ZUhlYWRlclNpemUoKSB7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgY29uc3QgcGFnZUhlYWRlckVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2LnBvLXBhZ2UtaGVhZGVyJyk7XHJcblxyXG4gICAgICB0aGlzLnNldEhlaWdodENvbnRlbnQocGFnZUhlYWRlckVsZW1lbnQpO1xyXG4gICAgICB0aGlzLmNvbnRlbnRPcGFjaXR5ID0gMTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2V0SGVpZ2h0Q29udGVudChwb1BhZ2VIZWFkZXI6IEhUTUxFbGVtZW50KSB7XHJcbiAgICBjb25zdCBib2R5SGVpZ2h0ID0gZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQ7XHJcbiAgICBjb25zdCBwYWdlSGVhZGVySGVpZ2h0ID0gcG9QYWdlSGVhZGVyID8gcG9QYWdlSGVhZGVyLm9mZnNldFRvcCArIHBvUGFnZUhlYWRlci5vZmZzZXRIZWlnaHQgOiAwO1xyXG4gICAgY29uc3QgbmV3SGVpZ2h0ID0gYm9keUhlaWdodCAtIHBhZ2VIZWFkZXJIZWlnaHQ7XHJcblxyXG4gICAgdGhpcy5oZWlnaHQgPSBgJHtuZXdIZWlnaHR9cHhgO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0aWFsaXplTGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5yZXNpemVMaXN0ZW5lciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCd3aW5kb3cnLCAncmVzaXplJywgKCkgPT4ge1xyXG4gICAgICB0aGlzLnJlY2FsY3VsYXRlSGVhZGVyU2l6ZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlbW92ZUxpc3RlbmVycygpIHtcclxuICAgIHRoaXMucmVzaXplTGlzdGVuZXIoKTtcclxuICB9XHJcbn1cclxuIl19