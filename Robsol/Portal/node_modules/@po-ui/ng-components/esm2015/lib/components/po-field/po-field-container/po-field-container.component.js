import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
import { poFieldContainerLiterals } from './po-field-container-literals';
/**
 * @docsPrivate
 *
 * Componente de uso interno, responsável por atribuir uma label para o campo
 */
export class PoFieldContainerComponent {
    constructor(languageService) {
        this._optional = false;
        const language = languageService.getShortLanguage();
        this.literals = Object.assign({}, poFieldContainerLiterals[language]);
    }
    /** Indica se o campo será opcional. */
    set optional(value) {
        this._optional = convertToBoolean(value);
    }
    get optional() {
        return this._optional;
    }
}
PoFieldContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-field-container',
                template: "<div class=\"po-field-container\">\r\n  <div class=\"po-field-container-title\">\r\n    <span class=\"po-field-title\">{{ label }}</span>\r\n    <span class=\"po-field-optional\" *ngIf=\"optional && (label || help)\">{{ literals.optional }}</span>\r\n  </div>\r\n\r\n  <div class=\"po-field-help\" *ngIf=\"help\">{{ help }}</div>\r\n\r\n  <ng-content></ng-content>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PoFieldContainerComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoFieldContainerComponent.propDecorators = {
    label: [{ type: Input, args: ['p-label',] }],
    help: [{ type: Input, args: ['p-help',] }],
    optional: [{ type: Input, args: ['p-optional',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZmllbGQtY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1maWVsZC9wby1maWVsZC1jb250YWluZXIvcG8tZmllbGQtY29udGFpbmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUN0RixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUV6RTs7OztHQUlHO0FBTUgsTUFBTSxPQUFPLHlCQUF5QjtJQW9CcEMsWUFBWSxlQUFrQztRQVh0QyxjQUFTLEdBQVksS0FBSyxDQUFDO1FBWWpDLE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRXBELElBQUksQ0FBQyxRQUFRLHFCQUNSLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUN0QyxDQUFDO0lBQ0osQ0FBQztJQWZELHVDQUF1QztJQUN2QyxJQUF5QixRQUFRLENBQUMsS0FBYztRQUM5QyxJQUFJLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7O1lBdkJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixzWUFBa0Q7Z0JBQ2xELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7WUFaUSxpQkFBaUI7OztvQkFldkIsS0FBSyxTQUFDLFNBQVM7bUJBR2YsS0FBSyxTQUFDLFFBQVE7dUJBT2QsS0FBSyxTQUFDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xyXG5pbXBvcnQgeyBQb0xhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBwb0ZpZWxkQ29udGFpbmVyTGl0ZXJhbHMgfSBmcm9tICcuL3BvLWZpZWxkLWNvbnRhaW5lci1saXRlcmFscyc7XHJcblxyXG4vKipcclxuICogQGRvY3NQcml2YXRlXHJcbiAqXHJcbiAqIENvbXBvbmVudGUgZGUgdXNvIGludGVybm8sIHJlc3BvbnPDoXZlbCBwb3IgYXRyaWJ1aXIgdW1hIGxhYmVsIHBhcmEgbyBjYW1wb1xyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdwby1maWVsZC1jb250YWluZXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1maWVsZC1jb250YWluZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQb0ZpZWxkQ29udGFpbmVyQ29tcG9uZW50IHtcclxuICAvKiogTGFiZWwgZG8gY2FtcG8uICovXHJcbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw/OiBzdHJpbmc7XHJcblxyXG4gIC8qKiBUZXh0byBkZSBhcG9pbyBkbyBjYW1wby4gKi9cclxuICBASW5wdXQoJ3AtaGVscCcpIGhlbHA6IHN0cmluZztcclxuXHJcbiAgbGl0ZXJhbHM7XHJcblxyXG4gIHByaXZhdGUgX29wdGlvbmFsOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIC8qKiBJbmRpY2Egc2UgbyBjYW1wbyBzZXLDoSBvcGNpb25hbC4gKi9cclxuICBASW5wdXQoJ3Atb3B0aW9uYWwnKSBzZXQgb3B0aW9uYWwodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuX29wdGlvbmFsID0gY29udmVydFRvQm9vbGVhbih2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBnZXQgb3B0aW9uYWwoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9uYWw7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihsYW5ndWFnZVNlcnZpY2U6IFBvTGFuZ3VhZ2VTZXJ2aWNlKSB7XHJcbiAgICBjb25zdCBsYW5ndWFnZSA9IGxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCk7XHJcblxyXG4gICAgdGhpcy5saXRlcmFscyA9IHtcclxuICAgICAgLi4ucG9GaWVsZENvbnRhaW5lckxpdGVyYWxzW2xhbmd1YWdlXVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19