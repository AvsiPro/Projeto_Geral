import { Component, ElementRef, Input } from '@angular/core';
import { uuid } from '../../../utils/util';
import { PoStepperStatus } from '../enums/po-stepper-status.enum';
/**
 * @description
 *
 * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:
 *
 * ```
 * <po-stepper>
 *
 *    <po-step p-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </po-step>
 *
 *    <po-step p-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </po-step>
 *
 *  </po-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
export class PoStepComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        // ID do step
        this.id = uuid();
        this._status = PoStepperStatus.Disabled;
    }
    // Estado de exibição do `po-step`.
    set status(status) {
        this._status = status;
        this.setDisplayOnActiveOrError();
    }
    get status() {
        return this._status;
    }
    ngAfterContentInit() {
        this.setDisplayOnActiveOrError();
    }
    setDisplayOnActiveOrError() {
        this.elementRef.nativeElement.style.display =
            this.status === PoStepperStatus.Active || this.status === PoStepperStatus.Error ? '' : 'none';
    }
}
PoStepComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-step',
                template: "<ng-content></ng-content>\r\n"
            },] }
];
PoStepComponent.ctorParameters = () => [
    { type: ElementRef }
];
PoStepComponent.propDecorators = {
    canActiveNextStep: [{ type: Input, args: ['p-can-active-next-step',] }],
    label: [{ type: Input, args: ['p-label',] }],
    status: [{ type: Input, args: ['p-status',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3RlcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tc3RlcHBlci9wby1zdGVwL3BvLXN0ZXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHL0UsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVsRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0NHO0FBS0gsTUFBTSxPQUFPLGVBQWU7SUErQzFCLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFoQjFDLGFBQWE7UUFDYixPQUFFLEdBQVksSUFBSSxFQUFFLENBQUM7UUFFYixZQUFPLEdBQXFCLGVBQWUsQ0FBQyxRQUFRLENBQUM7SUFhaEIsQ0FBQztJQVg5QyxtQ0FBbUM7SUFDbkMsSUFBdUIsTUFBTSxDQUFDLE1BQXVCO1FBQ25ELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBRXRCLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUlELGtCQUFrQjtRQUNoQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRVMseUJBQXlCO1FBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPO1lBQ3pDLElBQUksQ0FBQyxNQUFNLEtBQUssZUFBZSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ2xHLENBQUM7OztZQTVERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLHlDQUFxQzthQUN0Qzs7O1lBL0NxQyxVQUFVOzs7Z0NBd0U3QyxLQUFLLFNBQUMsd0JBQXdCO29CQUs5QixLQUFLLFNBQUMsU0FBUztxQkFRZixLQUFLLFNBQUMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgdXVpZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xyXG5cclxuaW1wb3J0IHsgUG9TdGVwcGVyU3RhdHVzIH0gZnJvbSAnLi4vZW51bXMvcG8tc3RlcHBlci1zdGF0dXMuZW51bSc7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIE8gY29tcG9uZW50ZSBgcG8tc3RlcGAgw6kgdXRpbGl6YWRvIHBhcmEgZW52b2x2ZXIgZSByZW5kZXJpemFyIG8gY29udGXDumRvIGRlIHVtIHBhc3NvICgqc3RlcCopIGRvIGBwby1zdGVwcGVyYCwgcG9yIGV4ZW1wbG86XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiA8cG8tc3RlcHBlcj5cclxuICpcclxuICogICAgPHBvLXN0ZXAgcC1sYWJlbD1cIkVuZGVyZcOnb1wiPlxyXG4gKlxyXG4gKiAgICAgICAgPCEtLSBDb250ZcO6ZG8gcmVmZXJlbnRlIGFvIGVuZGVyZcOnbyAtLT5cclxuICpcclxuICogICAgPC9wby1zdGVwPlxyXG4gKlxyXG4gKiAgICA8cG8tc3RlcCBwLWxhYmVsPVwiUGFnYW1lbnRvXCI+XHJcbiAqXHJcbiAqICAgICAgICA8IS0tIENvbnRlw7pkbyByZWZlcmVudGUgYW8gcGFnYW1lbnRvIC0tPlxyXG4gKlxyXG4gKiAgICA8L3BvLXN0ZXA+XHJcbiAqXHJcbiAqICA8L3BvLXN0ZXBwZXI+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBBIHJlbmRlcml6YcOnw6NvIGRvIGNvbnRlw7pkbyBlbnZvbHZpZG8gbmEgdGVsYSBlIG8gY29udHJvbGUgZG9zIHN0YXR1cyBzw6NvIGZlaXRvcyBhdXRvbWF0aWNhbWVudGUuIE5vIHF1YWwsIG8gcHJpbWVpcm9cclxuICogYHBvLXN0ZXBgIGVuY29udHJhZG8gc2Vyw6EgY29sb2NhZG8gY29tbyBhdGl2bywgbyBwcsOzeGltbyBmaWNhIGNvbSBvIHN0YXR1cyAqZGVmYXVsdCogZSBvcyBkZW1haXMgZmljYW1cclxuICogZGVzYWJpbGl0YWRvcyAoKmRpc2FibGVkKikuXHJcbiAqXHJcbiAqIEFvIGNsaWNhciBubyBgcG8tc3RlcGAgcXVlIGVzdMOhIGNvbSBvIHN0YXR1cyAqZGVmYXVsdCosIG8gcXVlIGVzdMOhIGF0aXZvIGZpY2Fyw6EgY29tIG9cclxuICogc3RhdHVzIGRlIGNvbmNsdcOtZG8gKCpkb25lKikgZSBvIHByw7N4aW1vIHF1ZSBlc3RhdmEgZGVzYWJpbGl0YWRvIGZpY2Fyw6EgY29tIG8gc3RhdHVzICpkZWZhdWx0KiBlIG8gcmVzdGFudGUgcGVybWFuZWNlcsOhXHJcbiAqIGNvbSBvIHN0YXR1cyBkZXNhYmlsaXRhZG8uXHJcbiAqXHJcbiAqID4gQW8gdXRpbGl6YXIgbyBgcG8tc3RlcGAsIG8gY29tcG9uZW50ZSBgcG8tc3RlcHBlcmAgZnVuY2lvbmFyw6EgZGUgZm9ybWEgc2VxdWVuY2lhbCwgb3Ugc2VqYSwgbsOjbyBzZXLDoSBwb3Nzw612ZWxcclxuICogcHVsYXIgcGFyYSBvdXRybyBgcG8tc3RlcGAgcXVlIGVzdGVqYSBjb20gbyBzdGF0dXMgaWd1YWwgYSBkZXNhYmlsaXRhZG8gKCpkaXNhYmxlZCopLlxyXG4gKlxyXG4gKiBBY2Vzc2UgYSBbZG9jdW1lbnRhw6fDo28gZG8gYHBvLXN0ZXBwZXJgXSgvZG9jdW1lbnRhdGlvbi9wby1zdGVwcGVyKSBwYXJhIHRlciBtYWlzIGluZm9ybWHDp8O1ZXMgc29icmUgbyBzZXUgZnVuY2lvbmFtZW50b1xyXG4gKiBlIGV4ZW1wbG9zIGRlIHVzby5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAncG8tc3RlcCcsXHJcbiAgdGVtcGxhdGVVcmw6ICdwby1zdGVwLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUG9TdGVwQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIEZ1bsOnw6NvIGNoYW1hZGEgcXVhbmRvIG8gcHLDs3hpbW8gKnN0ZXAqIGZvciBjbGljYWRvIG91IHF1YW5kbyBvIG3DqXRvZG8gYFBvU3RlcHBlckNvbXBvbmVudC5uZXh0KClgIGZvciBjaGFtYWRvLlxyXG4gICAqIEFvIHJldG9ybmFyIGB0cnVlYCBkZWZpbmUgcXVlIGVzc2UgKnN0ZXAqIGZpY2Fyw6EgYXRpdm8gZSBvIGF0dWFsIGNvbW8gY29uY2x1w61kbyAoKmRvbmUqKS5cclxuICAgKiBUYW1iw6ltIGFjZWl0YSBmdW7Dp8O1ZXMgcXVlIHJldG9ybmVtIGBPYnNlcnZhYmxlPGJvb2xlYW4+YC4gQW8gcmV0b3JuYXIgdW0gYE9ic2VydmFibGU8Ym9vbGVhbj5gLFxyXG4gICAqIGdhcmFudGEgcXVlIGVzc2UgYE9ic2VydmFibGVgIHNlcsOhIGNvbXBsZXRhZG8sIGNhc28gaG91dmVyIGFsZ3VtIGVycm8gZHVyYW50ZSBvIHByb2Nlc3NvIG7Do28gc2Vyw6EgcG9zc8OtdmVsIHByb3NzZWd1aXJcclxuICAgKiBhbyBwcsOzeGltbyAqc3RlcCouXHJcbiAgICpcclxuICAgKiBBbyBzZXIgZGlzcGFyYWRhLCBhIG1lc21hIHJlY2ViZXLDoSBwb3IgcGFyw6JtZXRybyBvIGBQb1N0ZXBDb21wb25lbnRgIGF0dWFsLlxyXG4gICAqXHJcbiAgICogTyBjb250ZXh0byBkYSBmdW7Dp8OjbyBxdWUgc2Vyw6EgY2hhbWFkYSwgc2Vyw6EgbyBtZXNtbyBxdWUgbyBkbyBgUG9TdGVwQ29tcG9uZW50YCwgZW50w6NvIHBhcmEgcG9kZXIgYWx0ZXJhclxyXG4gICAqIHBhcmEgbyBjb250ZXh0byBkbyBjb21wb25lbnRlIHF1ZSBvIGVzdMOhIHV0aWxpemFuZG8sIHBvZGUgc2VyIHV0aWxpemFkbyBhIHByb3ByaWVkYWRlIGBiaW5kYCBkbyBKYXZhc2NyaXB0LlxyXG4gICAqIFBvciBleGVtcGxvLCBwYXJhIGEgZnVuw6fDo28gYHZhbGlkYXRlYDpcclxuICAgKlxyXG4gICAqIGBgYFxyXG4gICAqIDxwby1zdGVwIHAtbGFiZWw9XCJTdGVwIDFcIiBbcC1jYW4tYWN0aXZlLW5leHQtc3RlcF09XCJ2YWxpZGF0ZS5iaW5kKHRoaXMpXCI+XHJcbiAgICogLi4uXHJcbiAgICogPC9wby1zdGVwPlxyXG4gICAqIGBgYFxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1jYW4tYWN0aXZlLW5leHQtc3RlcCcpIGNhbkFjdGl2ZU5leHRTdGVwOlxyXG4gICAgfCAoKGN1cnJlbnRTdGVwKSA9PiBib29sZWFuKVxyXG4gICAgfCAoKGN1cnJlbnRTdGVwKSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+KTtcclxuXHJcbiAgLyoqIFTDrXR1bG8gcXVlIHNlcsOhIGV4aWJpZG8gZGVzY3JldmVuZG8gbyBwYXNzbyAoKnN0ZXAqKS4gKi9cclxuICBASW5wdXQoJ3AtbGFiZWwnKSBsYWJlbDogc3RyaW5nO1xyXG5cclxuICAvLyBJRCBkbyBzdGVwXHJcbiAgaWQ/OiBzdHJpbmcgPSB1dWlkKCk7XHJcblxyXG4gIHByaXZhdGUgX3N0YXR1cz86IFBvU3RlcHBlclN0YXR1cyA9IFBvU3RlcHBlclN0YXR1cy5EaXNhYmxlZDtcclxuXHJcbiAgLy8gRXN0YWRvIGRlIGV4aWJpw6fDo28gZG8gYHBvLXN0ZXBgLlxyXG4gIEBJbnB1dCgncC1zdGF0dXMnKSBzZXQgc3RhdHVzKHN0YXR1czogUG9TdGVwcGVyU3RhdHVzKSB7XHJcbiAgICB0aGlzLl9zdGF0dXMgPSBzdGF0dXM7XHJcblxyXG4gICAgdGhpcy5zZXREaXNwbGF5T25BY3RpdmVPckVycm9yKCk7XHJcbiAgfVxyXG5cclxuICBnZXQgc3RhdHVzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3N0YXR1cztcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge31cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgdGhpcy5zZXREaXNwbGF5T25BY3RpdmVPckVycm9yKCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgc2V0RGlzcGxheU9uQWN0aXZlT3JFcnJvcigpIHtcclxuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPVxyXG4gICAgICB0aGlzLnN0YXR1cyA9PT0gUG9TdGVwcGVyU3RhdHVzLkFjdGl2ZSB8fCB0aGlzLnN0YXR1cyA9PT0gUG9TdGVwcGVyU3RhdHVzLkVycm9yID8gJycgOiAnbm9uZSc7XHJcbiAgfVxyXG59XHJcbiJdfQ==