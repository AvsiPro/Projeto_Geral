import { Component, EventEmitter, Input, Output } from '@angular/core';
import { PoChartGridLines, PoChartPadding, PoChartPlotAreaPaddingTop } from '../../helpers/po-chart-default-values.constant';
import { PoChartMathsService } from '../../services/po-chart-maths.service';
import { PoChartType } from '../../enums/po-chart-type.enum';
export class PoChartAxisComponent {
    constructor(mathsService) {
        this.mathsService = mathsService;
        this.alignByTheCorners = false;
        this.categoriesCoordinates = new EventEmitter();
        this.axisXLabels = [];
        this.axisYLabels = [];
        this.gridLines = PoChartGridLines;
        this.seriesLength = 0;
        this._categories = [];
        this._containerSize = {};
        this._series = [];
    }
    set series(seriesList) {
        const seriesDataArrayFilter = seriesList.filter(serie => Array.isArray(serie.data));
        if (seriesDataArrayFilter.length) {
            this._series = seriesDataArrayFilter;
            this.seriesLength = this.mathsService.seriesGreaterLength(this.series);
            this.checkAxisOptions(this.axisOptions);
            this.setAxisXCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
            this.setAxisYCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
        }
        else {
            this._series = [];
            this.cleanUpCoordinates();
        }
    }
    get series() {
        return this._series;
    }
    set categories(value) {
        this._categories = value;
        if (this.type === PoChartType.Bar) {
            this.setAxisXCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
        }
        else {
            this.setAxisYCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
        }
    }
    get categories() {
        return this._categories;
    }
    set containerSize(value) {
        this._containerSize = value;
        this.checkAxisOptions(this.axisOptions);
        this.setAxisXCoordinates(this.gridLines, this.seriesLength, this._containerSize, this.range, this.type);
        this.setAxisYCoordinates(this.gridLines, this.seriesLength, this._containerSize, this.range, this.type);
    }
    get containerSize() {
        return this._containerSize;
    }
    set axisOptions(value) {
        this._axisOptions = value;
        this.checkAxisOptions(this._axisOptions);
        if (this.type === PoChartType.Bar) {
            this.setAxisYCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
        }
        else {
            this.setAxisXCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
        }
    }
    get axisOptions() {
        return this._axisOptions;
    }
    setAxisXCoordinates(gridLines, seriesLength, containerSize, minMaxAxisValues, type) {
        if (seriesLength) {
            const amountOfAxisLabels = type === PoChartType.Bar ? seriesLength : gridLines;
            this.calculateAxisXLabelCoordinates(amountOfAxisLabels, containerSize, minMaxAxisValues, type);
        }
        const amountOfAxisXLines = this.amountOfAxisXLines(seriesLength, gridLines, type);
        this.calculateAxisXCoordinates(amountOfAxisXLines, containerSize, minMaxAxisValues);
    }
    amountOfAxisXLines(seriesLength, gridLines, type) {
        if (type === PoChartType.Bar) {
            return seriesLength <= 1 ? 2 : seriesLength + 1;
        }
        return gridLines === 0 ? 1 : gridLines;
    }
    setAxisYCoordinates(gridLines, seriesLength, containerSize, minMaxAxisValues, type) {
        const amountOfAxisY = type === PoChartType.Bar ? gridLines : seriesLength;
        if (seriesLength) {
            this.calculateAxisYLabelCoordinates(amountOfAxisY, containerSize, minMaxAxisValues, type);
        }
        if (type === PoChartType.Area) {
            this.getCategoriesRangeForMouseMove(amountOfAxisY, containerSize);
        }
        this.calculateAxisYCoordinates(amountOfAxisY, containerSize, type, minMaxAxisValues);
    }
    calculateAxisXCoordinates(amountOfAxisX, containerSize, range) {
        const startX = containerSize.axisXLabelWidth;
        const endX = containerSize.svgWidth;
        let coordinatesReferedToZero;
        let coordinatesList = [...Array(amountOfAxisX)].map((_, index) => {
            const yCoordinate = this.calculateAxisXCoordinateY(amountOfAxisX, containerSize, index);
            const coordinates = `M${startX} ${yCoordinate} L${endX}, ${yCoordinate}`;
            return { coordinates };
        });
        // Avalia a necessidade de adicionar a linha referente ao valor zero em gr치ficos do tipo `column`, `area` e `line`.
        if (this.type !== PoChartType.Bar && range.minValue < 0 && !this.axisXLabels.includes('0')) {
            coordinatesReferedToZero = this.getCoordinatesRelatedToZero(containerSize, range, startX, endX);
            coordinatesList = [...coordinatesList, coordinatesReferedToZero];
        }
        this.axisXCoordinates = coordinatesList;
    }
    getCoordinatesRelatedToZero(containerSize, range, start, end, isAxisY = false) {
        const type = isAxisY ? PoChartType.Bar : PoChartType.Column;
        const basePosition = this.axisCoordinatesForValueZero(range, 0, containerSize, isAxisY);
        const coordinates = {
            column: {
                startX: start,
                endX: end,
                startY: basePosition,
                endY: basePosition
            },
            bar: {
                startX: basePosition,
                endX: basePosition,
                startY: start,
                endY: end
            }
        };
        return {
            coordinates: `M${coordinates[type].startX} ${coordinates[type].startY} L${coordinates[type].endX} ${coordinates[type].endY}`
        };
    }
    axisCoordinatesForValueZero(range, data, containerSize, isAxisY) {
        const { axisXLabelWidth, svgWidth, svgPlottingAreaHeight } = containerSize;
        const ratio = this.mathsService.getSeriePercentage(range, data);
        return Math.floor(isAxisY
            ? axisXLabelWidth + (svgWidth - axisXLabelWidth) * ratio
            : svgPlottingAreaHeight - svgPlottingAreaHeight * ratio + PoChartPlotAreaPaddingTop);
    }
    calculateAxisXLabelCoordinates(amountOfAxisX, containerSize, minMaxAxisValues, type) {
        this.axisXLabels = this.getAxisXLabels(type, minMaxAxisValues, amountOfAxisX);
        this.axisXLabelCoordinates = [...Array(amountOfAxisX)].map((_, index) => {
            const label = this.axisXLabels[index];
            const xCoordinate = this.calculateAxisXLabelXCoordinate(containerSize.axisXLabelWidth);
            const yCoordinate = this.calculateAxisXLabelYCoordinate(amountOfAxisX, containerSize, type, index);
            return { label, xCoordinate, yCoordinate };
        });
    }
    calculateAxisYCoordinates(amountOfAxisY, containerSize, type, range) {
        const startY = PoChartPlotAreaPaddingTop;
        const endY = containerSize.svgPlottingAreaHeight + PoChartPlotAreaPaddingTop;
        // tratamento necess치rio para criar uma linha a mais para fechar o gr치fico
        const length = amountOfAxisY === 0 || type === PoChartType.Bar ? amountOfAxisY : amountOfAxisY + 1;
        let coordinatesReferedToZero;
        let coordinatesList = [...Array(length)].map((_, index) => {
            const xCoordinate = this.calculateAxisYCoordinateX(containerSize, amountOfAxisY, index);
            const coordinates = `M${xCoordinate} ${startY} L${xCoordinate}, ${endY}`;
            return { coordinates };
        });
        // Avalia a necessidade de adicionar a linha referente ao valor zero em gr치ficos do tipo `bar`.
        if (type === PoChartType.Bar && range.minValue < 0 && !this.axisYLabels.includes('0')) {
            coordinatesReferedToZero = this.getCoordinatesRelatedToZero(containerSize, range, startY, endY, true);
            coordinatesList = [...coordinatesList, coordinatesReferedToZero];
        }
        this.axisYCoordinates = [...coordinatesList];
    }
    calculateAxisYLabelCoordinates(amountOfAxisY, containerSize, minMaxAxisValues, type) {
        this.axisYLabels = this.getAxisYLabels(type, minMaxAxisValues, amountOfAxisY);
        this.axisYLabelCoordinates = [...Array(amountOfAxisY)].map((_, index) => {
            const label = this.axisYLabels[index];
            const xCoordinate = this.getAxisXCoordinates(containerSize, amountOfAxisY, type, index);
            const yCoordinate = this.calculateAxisYLabelYCoordinate(containerSize);
            return { label, xCoordinate, yCoordinate };
        });
    }
    calculateAxisXLabelXCoordinate(axisXLabelWidth) {
        const labelPoChartPadding = PoChartPadding / 3;
        return axisXLabelWidth - labelPoChartPadding;
    }
    calculateAxisXLabelYCoordinate(amountOfAxisX, containerSize, type, index) {
        const amountOfLines = type === PoChartType.Bar ? amountOfAxisX : amountOfAxisX - 1;
        const yRatio = index / amountOfLines;
        if (type !== PoChartType.Bar) {
            return (containerSize.svgPlottingAreaHeight - containerSize.svgPlottingAreaHeight * yRatio + PoChartPlotAreaPaddingTop);
        }
        const halfCategoryHeight = containerSize.svgPlottingAreaHeight / amountOfAxisX / 2;
        return (containerSize.svgPlottingAreaHeight -
            halfCategoryHeight -
            containerSize.svgPlottingAreaHeight * yRatio +
            PoChartPlotAreaPaddingTop);
    }
    calculateAxisXCoordinateY(amountOfAxisX, containerSize, index) {
        const yRatio = index / (amountOfAxisX - 1);
        return (containerSize.svgPlottingAreaHeight - containerSize.svgPlottingAreaHeight * yRatio + PoChartPlotAreaPaddingTop);
    }
    calculateAxisYLabelYCoordinate(containerSize) {
        const textPoChartPadding = PoChartPadding / 3;
        return containerSize.svgHeight - textPoChartPadding;
    }
    centeredInCategoryArea(containerSize, amountOfAxisY, type, index) {
        const amountOfLines = type === PoChartType.Bar ? amountOfAxisY - 1 : amountOfAxisY;
        const xRatio = index / amountOfLines;
        if (type === PoChartType.Bar) {
            return Math.round(containerSize.axisXLabelWidth + (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio);
        }
        const halfCategoryWidth = (containerSize.svgWidth - containerSize.axisXLabelWidth) / amountOfAxisY / 2;
        return Math.round(containerSize.axisXLabelWidth +
            halfCategoryWidth +
            (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio);
    }
    calculateAxisYCoordinateX(containerSize, amountOfAxisY, index, subtractCategoryWidth = false) {
        const amountOfLines = this.alignByTheCorners ? amountOfAxisY - 1 : amountOfAxisY;
        const halfCategoryWidth = this.alignByTheCorners && subtractCategoryWidth
            ? (containerSize.svgWidth - containerSize.axisXLabelWidth) / (amountOfAxisY - 1) / 2
            : 0;
        const divideIndexByAmountOfLines = index / amountOfLines;
        const xRatio = divideIndexByAmountOfLines === Infinity ? 0 : divideIndexByAmountOfLines;
        return Math.round(containerSize.axisXLabelWidth +
            (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio -
            halfCategoryWidth);
    }
    checkAxisOptions(options = {}) {
        this.gridLines =
            options.gridLines && this.isValidGridLinesLengthOption(options.gridLines) ? options.gridLines : PoChartGridLines;
    }
    cleanUpCoordinates() {
        this.axisXCoordinates = [];
        this.axisYCoordinates = [];
        this.axisXLabelCoordinates = [];
        this.axisYLabelCoordinates = [];
        this.seriesLength = 0;
    }
    getAxisXCoordinates(containerSize, amountOfAxisY, type, index) {
        return this.alignByTheCorners
            ? this.calculateAxisYCoordinateX(containerSize, amountOfAxisY, index)
            : this.centeredInCategoryArea(containerSize, amountOfAxisY, type, index);
    }
    getCategoriesRangeForMouseMove(amountOfAxisY, containerSize) {
        const categoriesCoordinates = [...Array(amountOfAxisY)].map((_, index) => this.calculateAxisYCoordinateX(containerSize, amountOfAxisY, index, true));
        this.categoriesCoordinates.emit(categoriesCoordinates);
    }
    isValidGridLinesLengthOption(gridLines) {
        return gridLines >= 2 && gridLines <= 10;
    }
    getAxisXLabels(type, minMaxAxisValues, amountOfAxisX) {
        if (type === PoChartType.Bar) {
            const axisXLabelsList = this.formatCategoriesLabels(amountOfAxisX, this.categories);
            return axisXLabelsList.reverse();
        }
        return this.generateAverageOfLabels(minMaxAxisValues, amountOfAxisX);
    }
    getAxisYLabels(type, minMaxAxisValues, amountOfAxisX) {
        return type === PoChartType.Bar
            ? this.generateAverageOfLabels(minMaxAxisValues, amountOfAxisX)
            : this.formatCategoriesLabels(amountOfAxisX, this.categories);
    }
    formatCategoriesLabels(amountOfAxisX, categories = []) {
        return [...Array(amountOfAxisX)].map((_, index) => { var _a; return (_a = categories[index]) !== null && _a !== void 0 ? _a : '-'; });
    }
    generateAverageOfLabels(minMaxAxisValues, amountOfAxisLines) {
        const averageLabelsList = this.mathsService.range(minMaxAxisValues, amountOfAxisLines);
        return averageLabelsList.map(label => {
            const formattedDigit = label.toFixed(label % 1 && 2);
            // Remove d칤gitos com zero.
            // Tamb칠m trata caso quando o valor retornado era -0, substituindo-o por 0.
            const removeZeroDigits = formattedDigit.replace(/\.00$/, '').replace(/\-0$/, 0);
            return removeZeroDigits.toString();
        });
    }
}
PoChartAxisComponent.decorators = [
    { type: Component, args: [{
                selector: '[po-chart-axis]',
                template: "<svg:g po-chart-axis-path [p-axis-x-coordinates]=\"axisXCoordinates\" [p-axis-y-coordinates]=\"axisYCoordinates\"></svg:g>\r\n\r\n<svg:g po-chart-axis-label \r\n  [p-align-by-the-corners]=\"alignByTheCorners\" \r\n  [p-axis-x-label-coordinates]=\"axisXLabelCoordinates\" \r\n  [p-axis-y-label-coordinates]=\"axisYLabelCoordinates\" \r\n  [p-type]=\"type\"\r\n  >\r\n</svg:g>"
            },] }
];
PoChartAxisComponent.ctorParameters = () => [
    { type: PoChartMathsService }
];
PoChartAxisComponent.propDecorators = {
    alignByTheCorners: [{ type: Input, args: ['p-align-by-the-corners',] }],
    type: [{ type: Input, args: ['p-type',] }],
    range: [{ type: Input, args: ['p-range',] }],
    categoriesCoordinates: [{ type: Output, args: ['p-categories-coordinates',] }],
    series: [{ type: Input, args: ['p-series',] }],
    categories: [{ type: Input, args: ['p-categories',] }],
    containerSize: [{ type: Input, args: ['p-container-size',] }],
    axisOptions: [{ type: Input, args: ['p-options',] }]
};
//# sourceMappingURL=data:application/json;base64,