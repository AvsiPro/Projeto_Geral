import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToInt, isTypeof } from '../../utils/util';
import { PoChartType } from './enums/po-chart-type.enum';
import { PoColorService } from '../../services/po-color/po-color.service';
const poChartDefaultHeight = 400;
const poChartMinHeight = 200;
/**
 * @description
 *
 * O `po-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
 * visualização destes dados mais agradável.
 *
 * Através de suas principais propriedades é possível definir atributos, tais como tipo de gráfico, altura, título, cores customizadas, opções para os eixos, entre outros.
 *
 * O componente permite utilizar em conjunto séries do tipo linha e coluna.
 *
 * Além disso, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
 * e outra que será executada ao passar o *mouse* sobre o elemento.
 *
 * #### Guia de uso para Gráficos
 *
 * > Veja nosso [guia de uso para gráficos](/guides/guide-charts) para auxiliar na construção do seu gráfico,
 * informando em qual caso utilizar, o que devemos evitar e boas práticas relacionada a cores.
 */
export class PoChartBaseComponent {
    constructor(colorService) {
        this.colorService = colorService;
        /**
         * @optional
         *
         * @description
         *
         * Evento executado quando o usuário clicar sobre um elemento do gráfico.
         *
         * O evento emitirá o seguinte parâmetro:
         * - *donut* e *pie*: um objeto contendo a categoria e valor da série.
         * - *area*, *line*, *column* e *bar*: um objeto contendo o nome da série, valor e categoria do eixo do gráfico.
         */
        this.seriesClick = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
         *
         * O evento emitirá o seguinte parâmetro de acordo com o tipo de gráfico:
         * - *donut* e *pie*: um objeto contendo a categoria e valor da série.
         * - *area*, *line*, *column* e *bar*: um objeto contendo a categoria, valor da série e categoria do eixo do gráfico.
         */
        this.seriesHover = new EventEmitter();
        // manipulação das séries tratadas internamente para preservar 'p-series';
        this.chartSeries = [];
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do gráfico.
     *
     * > O valor mínimo aceito nesta propriedade é 200.
     *
     * @default `400px`
     */
    set height(value) {
        const intValue = convertToInt(value);
        let height;
        if (isTypeof(value, 'number')) {
            height = intValue <= poChartMinHeight ? poChartMinHeight : intValue;
        }
        else {
            height = this.setDefaultHeight();
        }
        this._height = height;
        this.getSvgContainerSize();
        this.rebuildComponentRef();
    }
    get height() {
        return this._height || this.setDefaultHeight();
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tipo de gráfico.
     *
     * É possível também combinar gráficos dos tipos linha e coluna. Para isso, opte pela declaração de `type` conforme a interface `PoChartSerie`.
     *
     * > Note que, se houver declaração de tipo de gráfico tanto em `p-type` quanto em `PochartSerie.type`, o valor `{ type }` da primeira série anulará o valor definido em `p-type`.
     *
     * Se não passado valor, o padrão será relativo à primeira série passada em `p-series`:
     * - Se `p-series = [{ data: [1,2,3] }]`: será `PoChartType.Column`.
     * - Se `p-series = [{ data: 1 }]`: será `PoChartType.Pie`.
     *
     * > Veja os valores válidos no *enum* `PoChartType`.
     */
    set type(value) {
        // O Valor default definido em `p-series` de acordo com a primeira série passada.
        this._type = Object.values(PoChartType).includes(value) ? value : undefined;
        this.rebuildComponentRef();
    }
    get type() {
        return this._type;
    }
    /**
     * @description
     *
     * Define os elementos do gráfico que serão criados dinamicamente.
     */
    set series(value) {
        this._series = value || [];
        if (Array.isArray(this._series) && this._series.length) {
            this.setTypeDefault(this._series[0]);
        }
        else {
            this.transformObjectToArrayObject(this.series);
            this.rebuildComponentRef();
        }
    }
    get series() {
        return this._series;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define os nomes das categorias que serão plotadas no eixo X do gráfico caso seja do tipo `bar`, ou então nos eixos Y do grid de gráficos dos tipos `area`, `columnn` e `line`.
     *
     * > Gráficos do tipo `bar` dimensionam a área do gráfico de acordo com a largura do maior texto de categorias. No entanto, é uma boa prática optar por palavras curtas para que a leitura do gráfico não seja prejudicada.
     *
     * > Caso não seja especificado um valor para a categoria, será plotado um hífen na categoria referente a cada série.
     */
    set categories(value) {
        if (Array.isArray(value)) {
            this._categories = value;
        }
    }
    get categories() {
        return this._categories;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as configurações usadas no `po-chart`.
     *
     * É possível, por exemplo, definir as configurações de exibição das legendas,
     * configurar os eixos(*axis*) para os gráficos dos tipos `area`, `line`, `column` e `bar` da seguinte forma:
     *
     * ```
     *  chartOptions: PoChartOptions = {
     *    legend: true,
     *    axis: {
     *      minRange: 0,
     *      maxRange: 100,
     *      gridLines: 5,
     *    },
     *  };
     * ```
     */
    set options(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._options = value;
            if (this._options.hasOwnProperty('legend') && typeof this._options.legend === 'boolean') {
                this.getSvgContainerSize();
            }
        }
    }
    get options() {
        return this._options;
    }
    get isTypeCircular() {
        return this.defaultType === PoChartType.Pie || this.defaultType === PoChartType.Donut;
    }
    ngOnChanges(changes) {
        const isArrayOfseries = Array.isArray(this.series) && this.series.length > 0;
        if ((changes.series && isArrayOfseries) ||
            (changes.type && isArrayOfseries) ||
            (changes.categories && isArrayOfseries)) {
            this.validateSerieAndAddType(this.series);
        }
        if ((changes.type && !this.isTypeCircular) || (changes.categories && !this.isTypeCircular)) {
            this.svgContainerSize = Object.assign(Object.assign({}, this.svgContainerSize), { axisXLabelWidth: this.calculateAxisXLabelArea() });
        }
    }
    onSeriesClick(event) {
        this.seriesClick.emit(event);
    }
    onSeriesHover(event) {
        this.seriesHover.emit(event);
    }
    setDefaultHeight() {
        return this.type === PoChartType.Gauge ? poChartMinHeight : poChartDefaultHeight;
    }
    transformObjectToArrayObject(serie) {
        this.chartSeries = typeof serie === 'object' && Object.keys(serie).length ? [Object.assign({}, serie)] : [];
    }
    setTypeDefault(serie) {
        var _a;
        const data = (_a = serie.data) !== null && _a !== void 0 ? _a : serie.value;
        const serieType = Object.values(PoChartType).includes(serie.type) ? serie.type : undefined;
        this.defaultType = serieType ? serieType : Array.isArray(data) ? PoChartType.Column : PoChartType.Pie;
    }
    validateSerieAndAddType(series) {
        const filteredSeries = series.filter(serie => this.isTypeCircular
            ? typeof serie.data === 'number' || typeof serie.value === 'number'
            : Array.isArray(serie.data));
        this.chartSeries = this.appendType(this.appendColors(filteredSeries));
    }
    appendColors(series) {
        return this.colorService.getColors(series);
    }
    appendType(series) {
        return series.map((serie, index) => {
            if (index === 0) {
                this.chartType = Object.values(PoChartType).includes(serie.type)
                    ? serie.type
                    : this.type || this.defaultType;
            }
            return Object.assign(Object.assign({}, serie), { type: serie.type || this.chartType });
        });
    }
}
PoChartBaseComponent.decorators = [
    { type: Directive }
];
PoChartBaseComponent.ctorParameters = () => [
    { type: PoColorService }
];
PoChartBaseComponent.propDecorators = {
    title: [{ type: Input, args: ['p-title',] }],
    seriesClick: [{ type: Output, args: ['p-series-click',] }],
    seriesHover: [{ type: Output, args: ['p-series-hover',] }],
    height: [{ type: Input, args: ['p-height',] }],
    type: [{ type: Input, args: ['p-type',] }],
    series: [{ type: Input, args: ['p-series',] }],
    categories: [{ type: Input, args: ['p-categories',] }],
    options: [{ type: Input, args: ['p-options',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tY2hhcnQvcG8tY2hhcnQtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFFakcsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUkxRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHekQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBRTFFLE1BQU0sb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0FBQ2pDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBRTdCOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUVILE1BQU0sT0FBZ0Isb0JBQW9CO0lBb0x4QyxZQUFzQixZQUE0QjtRQUE1QixpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFoTGxEOzs7Ozs7Ozs7O1dBVUc7UUFFSCxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFvQyxDQUFDO1FBRW5FOzs7Ozs7Ozs7O1dBVUc7UUFFSCxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFvQyxDQUFDO1FBRW5FLDBFQUEwRTtRQUMxRSxnQkFBVyxHQUE0QyxFQUFFLENBQUM7SUFtSkwsQ0FBQztJQXZJdEQ7Ozs7Ozs7Ozs7T0FVRztJQUNILElBQXVCLE1BQU0sQ0FBQyxLQUFhO1FBQ3pDLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQyxJQUFJLE1BQWMsQ0FBQztRQUVuQixJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEVBQUU7WUFDN0IsTUFBTSxH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QUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDakMsSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO2dCQUNmLElBQUksQ0FBQyxTQUFTLEdBQVMsTUFBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztvQkFDckUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJO29CQUNaLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUM7YUFDbkM7WUFFRCx1Q0FBWSxLQUFLLEtBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBRztRQUMxRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7OztZQTdQRixTQUFTOzs7WUF2QkQsY0FBYzs7O29CQTBCcEIsS0FBSyxTQUFDLFNBQVM7MEJBYWYsTUFBTSxTQUFDLGdCQUFnQjswQkFjdkIsTUFBTSxTQUFDLGdCQUFnQjtxQkEyQnZCLEtBQUssU0FBQyxVQUFVO21CQXFDaEIsS0FBSyxTQUFDLFFBQVE7cUJBZ0JkLEtBQUssU0FBQyxVQUFVO3lCQTBCaEIsS0FBSyxTQUFDLGNBQWM7c0JBK0JwQixLQUFLLFNBQUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgRGlyZWN0aXZlLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IGNvbnZlcnRUb0ludCwgaXNUeXBlb2YgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcclxuXHJcbmltcG9ydCB7IFBvQ2hhcnRDb250YWluZXJTaXplIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWNoYXJ0LWNvbnRhaW5lci1zaXplLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvQ2hhcnRHYXVnZVNlcmllIH0gZnJvbSAnLi9wby1jaGFydC10eXBlcy9wby1jaGFydC1nYXVnZS9wby1jaGFydC1nYXVnZS1zZXJpZXMuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9DaGFydFR5cGUgfSBmcm9tICcuL2VudW1zL3BvLWNoYXJ0LXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFBvQ2hhcnRPcHRpb25zIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWNoYXJ0LW9wdGlvbnMuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9DaGFydFNlcmllIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWNoYXJ0LXNlcmllLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvQ29sb3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvcG8tY29sb3IvcG8tY29sb3Iuc2VydmljZSc7XHJcblxyXG5jb25zdCBwb0NoYXJ0RGVmYXVsdEhlaWdodCA9IDQwMDtcclxuY29uc3QgcG9DaGFydE1pbkhlaWdodCA9IDIwMDtcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogTyBgcG8tY2hhcnRgIMOpIHVtIGNvbXBvbmVudGUgcGFyYSByZW5kZXJpemHDp8OjbyBkZSBkYWRvcyBhdHJhdsOpcyBkZSBncsOhZmljb3MsIGNvbSBpc3NvIGZhY2lsaXRhbmRvIGEgY29tcHJlZW5zw6NvIGUgdG9ybmFuZG8gYVxyXG4gKiB2aXN1YWxpemHDp8OjbyBkZXN0ZXMgZGFkb3MgbWFpcyBhZ3JhZMOhdmVsLlxyXG4gKlxyXG4gKiBBdHJhdsOpcyBkZSBzdWFzIHByaW5jaXBhaXMgcHJvcHJpZWRhZGVzIMOpIHBvc3PDrXZlbCBkZWZpbmlyIGF0cmlidXRvcywgdGFpcyBjb21vIHRpcG8gZGUgZ3LDoWZpY28sIGFsdHVyYSwgdMOtdHVsbywgY29yZXMgY3VzdG9taXphZGFzLCBvcMOnw7VlcyBwYXJhIG9zIGVpeG9zLCBlbnRyZSBvdXRyb3MuXHJcbiAqXHJcbiAqIE8gY29tcG9uZW50ZSBwZXJtaXRlIHV0aWxpemFyIGVtIGNvbmp1bnRvIHPDqXJpZXMgZG8gdGlwbyBsaW5oYSBlIGNvbHVuYS5cclxuICpcclxuICogQWzDqW0gZGlzc28sIHRhbWLDqW0gw6kgcG9zc8OtdmVsIGRlZmluaXIgdW1hIGHDp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIGFvIGNsaWNhciBlbSBkZXRlcm1pbmFkbyBlbGVtZW50byBkbyBncsOhZmljb1xyXG4gKiBlIG91dHJhIHF1ZSBzZXLDoSBleGVjdXRhZGEgYW8gcGFzc2FyIG8gKm1vdXNlKiBzb2JyZSBvIGVsZW1lbnRvLlxyXG4gKlxyXG4gKiAjIyMjIEd1aWEgZGUgdXNvIHBhcmEgR3LDoWZpY29zXHJcbiAqXHJcbiAqID4gVmVqYSBub3NzbyBbZ3VpYSBkZSB1c28gcGFyYSBncsOhZmljb3NdKC9ndWlkZXMvZ3VpZGUtY2hhcnRzKSBwYXJhIGF1eGlsaWFyIG5hIGNvbnN0cnXDp8OjbyBkbyBzZXUgZ3LDoWZpY28sXHJcbiAqIGluZm9ybWFuZG8gZW0gcXVhbCBjYXNvIHV0aWxpemFyLCBvIHF1ZSBkZXZlbW9zIGV2aXRhciBlIGJvYXMgcHLDoXRpY2FzIHJlbGFjaW9uYWRhIGEgY29yZXMuXHJcbiAqL1xyXG5ARGlyZWN0aXZlKClcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvQ2hhcnRCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICAvKiogRGVmaW5lIG8gdMOtdHVsbyBkbyBncsOhZmljby4gKi9cclxuICBASW5wdXQoJ3AtdGl0bGUnKSB0aXRsZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIEV2ZW50byBleGVjdXRhZG8gcXVhbmRvIG8gdXN1w6FyaW8gY2xpY2FyIHNvYnJlIHVtIGVsZW1lbnRvIGRvIGdyw6FmaWNvLlxyXG4gICAqXHJcbiAgICogTyBldmVudG8gZW1pdGlyw6EgbyBzZWd1aW50ZSBwYXLDom1ldHJvOlxyXG4gICAqIC0gKmRvbnV0KiBlICpwaWUqOiB1bSBvYmpldG8gY29udGVuZG8gYSBjYXRlZ29yaWEgZSB2YWxvciBkYSBzw6lyaWUuXHJcbiAgICogLSAqYXJlYSosICpsaW5lKiwgKmNvbHVtbiogZSAqYmFyKjogdW0gb2JqZXRvIGNvbnRlbmRvIG8gbm9tZSBkYSBzw6lyaWUsIHZhbG9yIGUgY2F0ZWdvcmlhIGRvIGVpeG8gZG8gZ3LDoWZpY28uXHJcbiAgICovXHJcbiAgQE91dHB1dCgncC1zZXJpZXMtY2xpY2snKVxyXG4gIHNlcmllc0NsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxQb0NoYXJ0U2VyaWUgfCBQb0NoYXJ0R2F1Z2VTZXJpZT4oKTtcclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIEV2ZW50byBleGVjdXRhZG8gcXVhbmRvIG8gdXN1w6FyaW8gcGFzc2FyIG8gKm1vdXNlKiBzb2JyZSB1bSBlbGVtZW50byBkbyBncsOhZmljby5cclxuICAgKlxyXG4gICAqIE8gZXZlbnRvIGVtaXRpcsOhIG8gc2VndWludGUgcGFyw6JtZXRybyBkZSBhY29yZG8gY29tIG8gdGlwbyBkZSBncsOhZmljbzpcclxuICAgKiAtICpkb251dCogZSAqcGllKjogdW0gb2JqZXRvIGNvbnRlbmRvIGEgY2F0ZWdvcmlhIGUgdmFsb3IgZGEgc8OpcmllLlxyXG4gICAqIC0gKmFyZWEqLCAqbGluZSosICpjb2x1bW4qIGUgKmJhcio6IHVtIG9iamV0byBjb250ZW5kbyBhIGNhdGVnb3JpYSwgdmFsb3IgZGEgc8OpcmllIGUgY2F0ZWdvcmlhIGRvIGVpeG8gZG8gZ3LDoWZpY28uXHJcbiAgICovXHJcbiAgQE91dHB1dCgncC1zZXJpZXMtaG92ZXInKVxyXG4gIHNlcmllc0hvdmVyID0gbmV3IEV2ZW50RW1pdHRlcjxQb0NoYXJ0U2VyaWUgfCBQb0NoYXJ0R2F1Z2VTZXJpZT4oKTtcclxuXHJcbiAgLy8gbWFuaXB1bGHDp8OjbyBkYXMgc8OpcmllcyB0cmF0YWRhcyBpbnRlcm5hbWVudGUgcGFyYSBwcmVzZXJ2YXIgJ3Atc2VyaWVzJztcclxuICBjaGFydFNlcmllczogQXJyYXk8UG9DaGFydFNlcmllIHwgUG9DaGFydEdhdWdlU2VyaWU+ID0gW107XHJcbiAgY2hhcnRUeXBlOiBQb0NoYXJ0VHlwZTtcclxuICBzdmdDb250YWluZXJTaXplOiBQb0NoYXJ0Q29udGFpbmVyU2l6ZTtcclxuXHJcbiAgcHJpdmF0ZSBfb3B0aW9uczogUG9DaGFydE9wdGlvbnM7XHJcbiAgcHJpdmF0ZSBfY2F0ZWdvcmllczogQXJyYXk8c3RyaW5nPjtcclxuICBwcml2YXRlIF9oZWlnaHQ6IG51bWJlcjtcclxuICBwcml2YXRlIF9zZXJpZXM6IEFycmF5PFBvQ2hhcnRTZXJpZT4gfCBQb0NoYXJ0R2F1Z2VTZXJpZTtcclxuICBwcml2YXRlIF90eXBlOiBQb0NoYXJ0VHlwZTtcclxuXHJcbiAgcHJpdmF0ZSBkZWZhdWx0VHlwZTogUG9DaGFydFR5cGU7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBEZWZpbmUgYSBhbHR1cmEgZG8gZ3LDoWZpY28uXHJcbiAgICpcclxuICAgKiA+IE8gdmFsb3IgbcOtbmltbyBhY2VpdG8gbmVzdGEgcHJvcHJpZWRhZGUgw6kgMjAwLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgYDQwMHB4YFxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1oZWlnaHQnKSBzZXQgaGVpZ2h0KHZhbHVlOiBudW1iZXIpIHtcclxuICAgIGNvbnN0IGludFZhbHVlID0gY29udmVydFRvSW50KHZhbHVlKTtcclxuICAgIGxldCBoZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgICBpZiAoaXNUeXBlb2YodmFsdWUsICdudW1iZXInKSkge1xyXG4gICAgICBoZWlnaHQgPSBpbnRWYWx1ZSA8PSBwb0NoYXJ0TWluSGVpZ2h0ID8gcG9DaGFydE1pbkhlaWdodCA6IGludFZhbHVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaGVpZ2h0ID0gdGhpcy5zZXREZWZhdWx0SGVpZ2h0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuICAgIHRoaXMuZ2V0U3ZnQ29udGFpbmVyU2l6ZSgpO1xyXG4gICAgdGhpcy5yZWJ1aWxkQ29tcG9uZW50UmVmKCk7XHJcbiAgfVxyXG5cclxuICBnZXQgaGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5faGVpZ2h0IHx8IHRoaXMuc2V0RGVmYXVsdEhlaWdodCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIERlZmluZSBvIHRpcG8gZGUgZ3LDoWZpY28uXHJcbiAgICpcclxuICAgKiDDiSBwb3Nzw612ZWwgdGFtYsOpbSBjb21iaW5hciBncsOhZmljb3MgZG9zIHRpcG9zIGxpbmhhIGUgY29sdW5hLiBQYXJhIGlzc28sIG9wdGUgcGVsYSBkZWNsYXJhw6fDo28gZGUgYHR5cGVgIGNvbmZvcm1lIGEgaW50ZXJmYWNlIGBQb0NoYXJ0U2VyaWVgLlxyXG4gICAqXHJcbiAgICogPiBOb3RlIHF1ZSwgc2UgaG91dmVyIGRlY2xhcmHDp8OjbyBkZSB0aXBvIGRlIGdyw6FmaWNvIHRhbnRvIGVtIGBwLXR5cGVgIHF1YW50byBlbSBgUG9jaGFydFNlcmllLnR5cGVgLCBvIHZhbG9yIGB7IHR5cGUgfWAgZGEgcHJpbWVpcmEgc8OpcmllIGFudWxhcsOhIG8gdmFsb3IgZGVmaW5pZG8gZW0gYHAtdHlwZWAuXHJcbiAgICpcclxuICAgKiBTZSBuw6NvIHBhc3NhZG8gdmFsb3IsIG8gcGFkcsOjbyBzZXLDoSByZWxhdGl2byDDoCBwcmltZWlyYSBzw6lyaWUgcGFzc2FkYSBlbSBgcC1zZXJpZXNgOlxyXG4gICAqIC0gU2UgYHAtc2VyaWVzID0gW3sgZGF0YTogWzEsMiwzXSB9XWA6IHNlcsOhIGBQb0NoYXJ0VHlwZS5Db2x1bW5gLlxyXG4gICAqIC0gU2UgYHAtc2VyaWVzID0gW3sgZGF0YTogMSB9XWA6IHNlcsOhIGBQb0NoYXJ0VHlwZS5QaWVgLlxyXG4gICAqXHJcbiAgICogPiBWZWphIG9zIHZhbG9yZXMgdsOhbGlkb3Mgbm8gKmVudW0qIGBQb0NoYXJ0VHlwZWAuXHJcbiAgICovXHJcbiAgQElucHV0KCdwLXR5cGUnKSBzZXQgdHlwZSh2YWx1ZTogUG9DaGFydFR5cGUpIHtcclxuICAgIC8vIE8gVmFsb3IgZGVmYXVsdCBkZWZpbmlkbyBlbSBgcC1zZXJpZXNgIGRlIGFjb3JkbyBjb20gYSBwcmltZWlyYSBzw6lyaWUgcGFzc2FkYS5cclxuICAgIHRoaXMuX3R5cGUgPSAoPGFueT5PYmplY3QpLnZhbHVlcyhQb0NoYXJ0VHlwZSkuaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XHJcblxyXG4gICAgdGhpcy5yZWJ1aWxkQ29tcG9uZW50UmVmKCk7XHJcbiAgfVxyXG5cclxuICBnZXQgdHlwZSgpOiBQb0NoYXJ0VHlwZSB7XHJcbiAgICByZXR1cm4gdGhpcy5fdHlwZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogRGVmaW5lIG9zIGVsZW1lbnRvcyBkbyBncsOhZmljbyBxdWUgc2Vyw6NvIGNyaWFkb3MgZGluYW1pY2FtZW50ZS5cclxuICAgKi9cclxuICBASW5wdXQoJ3Atc2VyaWVzJykgc2V0IHNlcmllcyh2YWx1ZTogQXJyYXk8UG9DaGFydFNlcmllPiB8IFBvQ2hhcnRHYXVnZVNlcmllKSB7XHJcbiAgICB0aGlzLl9zZXJpZXMgPSB2YWx1ZSB8fCBbXTtcclxuXHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLl9zZXJpZXMpICYmIHRoaXMuX3Nlcmllcy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5zZXRUeXBlRGVmYXVsdCh0aGlzLl9zZXJpZXNbMF0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy50cmFuc2Zvcm1PYmplY3RUb0FycmF5T2JqZWN0KHRoaXMuc2VyaWVzIGFzIFBvQ2hhcnRHYXVnZVNlcmllKTtcclxuICAgICAgdGhpcy5yZWJ1aWxkQ29tcG9uZW50UmVmKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXQgc2VyaWVzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3NlcmllcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBEZWZpbmUgb3Mgbm9tZXMgZGFzIGNhdGVnb3JpYXMgcXVlIHNlcsOjbyBwbG90YWRhcyBubyBlaXhvIFggZG8gZ3LDoWZpY28gY2FzbyBzZWphIGRvIHRpcG8gYGJhcmAsIG91IGVudMOjbyBub3MgZWl4b3MgWSBkbyBncmlkIGRlIGdyw6FmaWNvcyBkb3MgdGlwb3MgYGFyZWFgLCBgY29sdW1ubmAgZSBgbGluZWAuXHJcbiAgICpcclxuICAgKiA+IEdyw6FmaWNvcyBkbyB0aXBvIGBiYXJgIGRpbWVuc2lvbmFtIGEgw6FyZWEgZG8gZ3LDoWZpY28gZGUgYWNvcmRvIGNvbSBhIGxhcmd1cmEgZG8gbWFpb3IgdGV4dG8gZGUgY2F0ZWdvcmlhcy4gTm8gZW50YW50bywgw6kgdW1hIGJvYSBwcsOhdGljYSBvcHRhciBwb3IgcGFsYXZyYXMgY3VydGFzIHBhcmEgcXVlIGEgbGVpdHVyYSBkbyBncsOhZmljbyBuw6NvIHNlamEgcHJlanVkaWNhZGEuXHJcbiAgICpcclxuICAgKiA+IENhc28gbsOjbyBzZWphIGVzcGVjaWZpY2FkbyB1bSB2YWxvciBwYXJhIGEgY2F0ZWdvcmlhLCBzZXLDoSBwbG90YWRvIHVtIGjDrWZlbiBuYSBjYXRlZ29yaWEgcmVmZXJlbnRlIGEgY2FkYSBzw6lyaWUuXHJcbiAgICovXHJcbiAgQElucHV0KCdwLWNhdGVnb3JpZXMnKSBzZXQgY2F0ZWdvcmllcyh2YWx1ZTogQXJyYXk8c3RyaW5nPikge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgIHRoaXMuX2NhdGVnb3JpZXMgPSB2YWx1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBjYXRlZ29yaWVzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NhdGVnb3JpZXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3B0aW9uYWxcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogT2JqZXRvIGNvbSBhcyBjb25maWd1cmHDp8O1ZXMgdXNhZGFzIG5vIGBwby1jaGFydGAuXHJcbiAgICpcclxuICAgKiDDiSBwb3Nzw612ZWwsIHBvciBleGVtcGxvLCBkZWZpbmlyIGFzIGNvbmZpZ3VyYcOnw7VlcyBkZSBleGliacOnw6NvIGRhcyBsZWdlbmRhcyxcclxuICAgKiBjb25maWd1cmFyIG9zIGVpeG9zKCpheGlzKikgcGFyYSBvcyBncsOhZmljb3MgZG9zIHRpcG9zIGBhcmVhYCwgYGxpbmVgLCBgY29sdW1uYCBlIGBiYXJgIGRhIHNlZ3VpbnRlIGZvcm1hOlxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogIGNoYXJ0T3B0aW9uczogUG9DaGFydE9wdGlvbnMgPSB7XHJcbiAgICogICAgbGVnZW5kOiB0cnVlLFxyXG4gICAqICAgIGF4aXM6IHtcclxuICAgKiAgICAgIG1pblJhbmdlOiAwLFxyXG4gICAqICAgICAgbWF4UmFuZ2U6IDEwMCxcclxuICAgKiAgICAgIGdyaWRMaW5lczogNSxcclxuICAgKiAgICB9LFxyXG4gICAqICB9O1xyXG4gICAqIGBgYFxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1vcHRpb25zJykgc2V0IG9wdGlvbnModmFsdWU6IFBvQ2hhcnRPcHRpb25zKSB7XHJcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBPYmplY3QgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICB0aGlzLl9vcHRpb25zID0gdmFsdWU7XHJcblxyXG4gICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnbGVnZW5kJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMubGVnZW5kID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICB0aGlzLmdldFN2Z0NvbnRhaW5lclNpemUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0IG9wdGlvbnMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjb2xvclNlcnZpY2U6IFBvQ29sb3JTZXJ2aWNlKSB7fVxyXG5cclxuICBnZXQgaXNUeXBlQ2lyY3VsYXIoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0VHlwZSA9PT0gUG9DaGFydFR5cGUuUGllIHx8IHRoaXMuZGVmYXVsdFR5cGUgPT09IFBvQ2hhcnRUeXBlLkRvbnV0O1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgY29uc3QgaXNBcnJheU9mc2VyaWVzID0gQXJyYXkuaXNBcnJheSh0aGlzLnNlcmllcykgJiYgdGhpcy5zZXJpZXMubGVuZ3RoID4gMDtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIChjaGFuZ2VzLnNlcmllcyAmJiBpc0FycmF5T2ZzZXJpZXMpIHx8XHJcbiAgICAgIChjaGFuZ2VzLnR5cGUgJiYgaXNBcnJheU9mc2VyaWVzKSB8fFxyXG4gICAgICAoY2hhbmdlcy5jYXRlZ29yaWVzICYmIGlzQXJyYXlPZnNlcmllcylcclxuICAgICkge1xyXG4gICAgICB0aGlzLnZhbGlkYXRlU2VyaWVBbmRBZGRUeXBlKHRoaXMuc2VyaWVzIGFzIEFycmF5PFBvQ2hhcnRTZXJpZT4pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgoY2hhbmdlcy50eXBlICYmICF0aGlzLmlzVHlwZUNpcmN1bGFyKSB8fCAoY2hhbmdlcy5jYXRlZ29yaWVzICYmICF0aGlzLmlzVHlwZUNpcmN1bGFyKSkge1xyXG4gICAgICB0aGlzLnN2Z0NvbnRhaW5lclNpemUgPSB7XHJcbiAgICAgICAgLi4udGhpcy5zdmdDb250YWluZXJTaXplLFxyXG4gICAgICAgIGF4aXNYTGFiZWxXaWR0aDogdGhpcy5jYWxjdWxhdGVBeGlzWExhYmVsQXJlYSgpXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvblNlcmllc0NsaWNrKGV2ZW50OiBhbnkpOiB2b2lkIHtcclxuICAgIHRoaXMuc2VyaWVzQ2xpY2suZW1pdChldmVudCk7XHJcbiAgfVxyXG5cclxuICBvblNlcmllc0hvdmVyKGV2ZW50OiBhbnkpOiB2b2lkIHtcclxuICAgIHRoaXMuc2VyaWVzSG92ZXIuZW1pdChldmVudCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldERlZmF1bHRIZWlnaHQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy50eXBlID09PSBQb0NoYXJ0VHlwZS5HYXVnZSA/IHBvQ2hhcnRNaW5IZWlnaHQgOiBwb0NoYXJ0RGVmYXVsdEhlaWdodDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdHJhbnNmb3JtT2JqZWN0VG9BcnJheU9iamVjdChzZXJpZTogUG9DaGFydEdhdWdlU2VyaWUpIHtcclxuICAgIHRoaXMuY2hhcnRTZXJpZXMgPSB0eXBlb2Ygc2VyaWUgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHNlcmllKS5sZW5ndGggPyBbeyAuLi5zZXJpZSB9XSA6IFtdO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRUeXBlRGVmYXVsdChzZXJpZTogUG9DaGFydFNlcmllKSB7XHJcbiAgICBjb25zdCBkYXRhID0gc2VyaWUuZGF0YSA/PyBzZXJpZS52YWx1ZTtcclxuICAgIGNvbnN0IHNlcmllVHlwZSA9ICg8YW55Pk9iamVjdCkudmFsdWVzKFBvQ2hhcnRUeXBlKS5pbmNsdWRlcyhzZXJpZS50eXBlKSA/IHNlcmllLnR5cGUgOiB1bmRlZmluZWQ7XHJcblxyXG4gICAgdGhpcy5kZWZhdWx0VHlwZSA9IHNlcmllVHlwZSA/IHNlcmllVHlwZSA6IEFycmF5LmlzQXJyYXkoZGF0YSkgPyBQb0NoYXJ0VHlwZS5Db2x1bW4gOiBQb0NoYXJ0VHlwZS5QaWU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHZhbGlkYXRlU2VyaWVBbmRBZGRUeXBlKHNlcmllczogQXJyYXk8UG9DaGFydFNlcmllPik6IHZvaWQge1xyXG4gICAgY29uc3QgZmlsdGVyZWRTZXJpZXMgPSBzZXJpZXMuZmlsdGVyKHNlcmllID0+XHJcbiAgICAgIHRoaXMuaXNUeXBlQ2lyY3VsYXJcclxuICAgICAgICA/IHR5cGVvZiBzZXJpZS5kYXRhID09PSAnbnVtYmVyJyB8fCB0eXBlb2Ygc2VyaWUudmFsdWUgPT09ICdudW1iZXInXHJcbiAgICAgICAgOiBBcnJheS5pc0FycmF5KHNlcmllLmRhdGEpXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuY2hhcnRTZXJpZXMgPSB0aGlzLmFwcGVuZFR5cGUodGhpcy5hcHBlbmRDb2xvcnMoZmlsdGVyZWRTZXJpZXMpKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXBwZW5kQ29sb3JzKHNlcmllczogQXJyYXk8UG9DaGFydFNlcmllPikge1xyXG4gICAgcmV0dXJuIHRoaXMuY29sb3JTZXJ2aWNlLmdldENvbG9yczxQb0NoYXJ0U2VyaWU+KHNlcmllcyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFwcGVuZFR5cGUoc2VyaWVzOiBBcnJheTxQb0NoYXJ0U2VyaWU+KSB7XHJcbiAgICByZXR1cm4gc2VyaWVzLm1hcCgoc2VyaWUsIGluZGV4KSA9PiB7XHJcbiAgICAgIGlmIChpbmRleCA9PT0gMCkge1xyXG4gICAgICAgIHRoaXMuY2hhcnRUeXBlID0gKDxhbnk+T2JqZWN0KS52YWx1ZXMoUG9DaGFydFR5cGUpLmluY2x1ZGVzKHNlcmllLnR5cGUpXHJcbiAgICAgICAgICA/IHNlcmllLnR5cGVcclxuICAgICAgICAgIDogdGhpcy50eXBlIHx8IHRoaXMuZGVmYXVsdFR5cGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB7IC4uLnNlcmllLCB0eXBlOiBzZXJpZS50eXBlIHx8IHRoaXMuY2hhcnRUeXBlIH07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFic3RyYWN0IHJlYnVpbGRDb21wb25lbnRSZWYoKTogdm9pZDtcclxuXHJcbiAgLy8gdsOhbGlkbyBwYXJhIGdyw6FmaWNvcyBkbyB0aXBvIGNpcmN1bGFyIGUgcXVlIHNlcsOhIHJlZmF0b3JhZG8uXHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IGdldFN2Z0NvbnRhaW5lclNpemUoKTogdm9pZDtcclxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgY2FsY3VsYXRlQXhpc1hMYWJlbEFyZWEoKTogbnVtYmVyO1xyXG59XHJcbiJdfQ==