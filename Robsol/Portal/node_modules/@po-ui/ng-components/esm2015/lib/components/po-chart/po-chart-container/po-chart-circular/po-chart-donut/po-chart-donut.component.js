import { ChangeDetectorRef, Component, NgZone } from '@angular/core';
import { convertNumberToDecimal } from '../../../../../utils/util';
import { PoDefaultColorsTextBlack } from '../../../../../services/po-color/po-colors.constant';
import { PoChartDonutDefaultThickness, PoChartStartAngle } from '../../../helpers/po-chart-default-values.constant';
import { PoChartCircularComponent } from '../po-chart-circular.component';
export class PoChartDonutComponent extends PoChartCircularComponent {
    /* istanbul ignore next */
    constructor(ngZone, changeDetector) {
        super(ngZone, changeDetector);
        this.poChartBlackColor = '#000000';
        this.poChartWhiteColor = '#ffffff';
    }
    ngOnChanges(changes) {
        if (changes.series || changes.containerSize || changes.options) {
            this.drawSeries(this.series, this.containerSize.svgHeight);
            this.applySeriesLabels(this.seriesList, this.containerSize.svgHeight);
        }
    }
    calculateCoordinates(height, startRadianAngle, endRadianAngle) {
        const radius = height / 2;
        const innerRadius = this.getInnerRadius(radius);
        const sinAlpha = Math.sin(startRadianAngle);
        const cosAlpha = Math.cos(startRadianAngle);
        const sinBeta = Math.sin(endRadianAngle);
        const cosBeta = Math.cos(endRadianAngle);
        const startX = radius + cosAlpha * radius;
        const startY = radius + sinAlpha * radius;
        const endX = radius + cosBeta * radius;
        const endY = radius + sinBeta * radius;
        const startInnerX = radius + cosAlpha * innerRadius;
        const startInnerY = radius + sinAlpha * innerRadius;
        const endInnerX = radius + cosBeta * innerRadius;
        const endInnerY = radius + sinBeta * innerRadius;
        const largeArc = endRadianAngle - startRadianAngle > Math.PI;
        this.verifyDisplayLabels(radius, innerRadius);
        return [
            'M',
            startX,
            startY,
            'A',
            radius,
            radius,
            0,
            largeArc ? '1,1' : '0,1',
            endX,
            endY,
            'L',
            endInnerX,
            endInnerY,
            'A',
            innerRadius,
            innerRadius,
            0,
            largeArc ? '1,0' : '0,0',
            startInnerX,
            startInnerY,
            'Z'
        ].join(' ');
    }
    getTooltipLabel(data, label, tooltipLabel) {
        const dataLabel = label ? `${label}: ` : '';
        const dataValue = this.getPercentValue(data, this.totalValue) + '%';
        return tooltipLabel || `${dataLabel}${dataValue}`;
    }
    applySeriesLabels(seriesList, height) {
        let startRadianAngle = PoChartStartAngle;
        let endRadianAngle = PoChartStartAngle;
        this.seriesLabels = seriesList.map(serie => {
            startRadianAngle = endRadianAngle;
            endRadianAngle = startRadianAngle + this.calculateAngle(serie.data, this.totalValue);
            const label = this.getPercentValue(serie.data, this.totalValue) + '% ';
            const color = this.getTextColor(serie.color);
            const coordinates = this.calculateLabelCoordinates(height, startRadianAngle, endRadianAngle);
            return Object.assign(Object.assign({}, coordinates), { label, color });
        });
    }
    calculateLabelCoordinates(height, startRadianAngle, endRadianAngle) {
        const radius = height / 2;
        const innerRadius = this.getInnerRadius(radius);
        const sliceCenterAngle = (startRadianAngle + endRadianAngle) / 2;
        const labelRadius = innerRadius + (radius - innerRadius) / 2;
        const xCoordinate = labelRadius * Math.cos(sliceCenterAngle) + radius;
        const yCoordinate = labelRadius * Math.sin(sliceCenterAngle) + radius;
        return { xCoordinate, yCoordinate };
    }
    getInnerRadius(radius) {
        const defaultInnerRadius = radius - PoChartDonutDefaultThickness;
        return this.innerRadius >= 0 ? (this.innerRadius / 100) * radius : defaultInnerRadius;
    }
    getPercentValue(value, totalValue) {
        const percentValue = (value / totalValue) * 100;
        const floatPercentValue = convertNumberToDecimal(percentValue, 2);
        return String(floatPercentValue).replace('.', ',');
    }
    getTextColor(color) {
        if (PoDefaultColorsTextBlack.includes(color)) {
            return this.poChartBlackColor;
        }
        return this.poChartWhiteColor;
    }
    verifyDisplayLabels(radius, innerRadius) {
        this.canDisplayLabels = radius - innerRadius >= radius - (radius - PoChartDonutDefaultThickness);
    }
}
PoChartDonutComponent.decorators = [
    { type: Component, args: [{
                selector: '[po-chart-donut]',
                template: "<svg:g>\r\n  <!-- SERIES PATHS -->\r\n  <svg:g *ngFor=\"let item of seriesList; let i = index\">\r\n    <svg:g #svgPaths po-chart-circular-path\r\n      [attr.key]=\"'po-chart-circular-path-' + i\"\r\n      [p-serie]=\"item\"\r\n      (p-on-click)=\"onSerieClick($event)\"\r\n      (p-on-hover)=\"onSerieHover($event)\">\r\n    </svg:g>\r\n  </svg:g>\r\n\r\n  <!-- SERIES LABELS -->\r\n  <svg:g *ngIf=\"canDisplayLabels\">\r\n    <svg:g *ngFor=\"let item of seriesLabels; let i = index\">\r\n      <svg:g #svgLabels po-chart-circular-label\r\n        [attr.key]=\"'po-chart-circular-label-' + i\"\r\n        [p-serie]=\"item\"\r\n        [p-show-label]=\"showLabels\">\r\n      </svg:g>\r\n    </svg:g>\r\n  </svg:g>\r\n</svg:g>\r\n\r\n"
            },] }
];
PoChartDonutComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,