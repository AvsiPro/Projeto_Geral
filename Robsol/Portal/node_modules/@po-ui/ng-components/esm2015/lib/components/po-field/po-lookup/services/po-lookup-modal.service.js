import { Injectable, EventEmitter } from '@angular/core';
import { PoComponentInjectorService } from '../../../../services/po-component-injector/po-component-injector.service';
import { PoLookupModalComponent } from '../po-lookup-modal/po-lookup-modal.component';
/**
 * @docsPrivate
 *
 * Serviço responsável por controlar a abertura do componente Po Lookup Modal.
 */
export class PoLookupModalService {
    constructor(poComponentInjector) {
        this.poComponentInjector = poComponentInjector;
        this.selectValueEvent = new EventEmitter();
        this.componentRef = null;
    }
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param advancedFilters {Array<PoDynamicFormField>} Objeto utilizado para criar o busca avançada.
     * @param service {PoLookupFilter} Serviço responsável por realizar a busca no serviço dos dados.
     * @param columns {Array<PoLookupColumn>} Definição das colunas na modal de busca.
     * @param filterParams {any} Valor que será repassado aos métodos do serviço para auxiliar no filtro dos dados.
     * @param title {string} Definição do título da modal.
     * @param literals {PoLookupLiterals} Literais utilizadas no componente.
     * @param selectedItems {any} Valor que está selecionado que será repassado para o modal para apresentar na tabela.
     * @param fieldLabel {string} Valor que será utilizado como descrição do campo.
     * @param fieldValue {string} Valor que será utilizado como valor do campo.
     */
    openModal(params) {
        const { advancedFilters, service, columns, filterParams, title, literals, infiniteScroll, multiple, selectedItems, fieldLabel, fieldValue } = params;
        this.componentRef = this.poComponentInjector.createComponentInApplication(PoLookupModalComponent);
        this.componentRef.instance.advancedFilters = advancedFilters;
        this.componentRef.instance.title = title;
        this.componentRef.instance.columns = columns;
        this.componentRef.instance.filterService = service;
        this.componentRef.instance.filterParams = filterParams;
        this.componentRef.instance.literals = literals;
        this.componentRef.instance.model.subscribe($event => {
            this.selectValue($event);
        });
        this.componentRef.instance.infiniteScroll = infiniteScroll;
        this.componentRef.instance.multiple = multiple;
        this.componentRef.instance.selectedItems = selectedItems;
        this.componentRef.instance.fieldLabel = fieldLabel;
        this.componentRef.instance.fieldValue = fieldValue;
        this.componentRef.changeDetectorRef.detectChanges();
        this.componentRef.instance.openModal();
    }
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    selectValue(value) {
        if (value) {
            this.selectValueEvent.emit(value);
        }
        this.componentRef.destroy();
    }
}
PoLookupModalService.decorators = [
    { type: Injectable }
];
PoLookupModalService.ctorParameters = () => [
    { type: PoComponentInjectorService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLW1vZGFsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tbG9va3VwL3NlcnZpY2VzL3BvLWxvb2t1cC1tb2RhbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWdCLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUd2RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwwRUFBMEUsQ0FBQztBQUl0SCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUV0Rjs7OztHQUlHO0FBRUgsTUFBTSxPQUFPLG9CQUFvQjtJQUsvQixZQUFvQixtQkFBK0M7UUFBL0Msd0JBQW1CLEdBQW5CLG1CQUFtQixDQUE0QjtRQUpuRSxxQkFBZ0IsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUV0RCxpQkFBWSxHQUFzQixJQUFJLENBQUM7SUFFdUIsQ0FBQztJQUV2RTs7Ozs7Ozs7Ozs7O09BWUc7SUFDSCxTQUFTLENBQUMsTUFZVDtRQUNDLE1BQU0sRUFDSixlQUFlLEVBQ2YsT0FBTyxFQUNQLE9BQU8sRUFDUCxZQUFZLEVBQ1osS0FBSyxFQUNMLFFBQVEsRUFDUixjQUFjLEVBQ2QsUUFBUSxFQUNSLGFBQWEsRUFDYixVQUFVLEVBQ1YsVUFBVSxFQUNYLEdBQUcsTUFBTSxDQUFDO1FBRVgsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsNEJBQTRCLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUNsRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO1FBQzdELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDekMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUM3QyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO1FBQ25ELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDdkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2xELElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBQzNELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDL0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUN6RCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQ25ELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNwRCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBRUQsc0VBQXNFO0lBQ3RFLFdBQVcsQ0FBQyxLQUFLO1FBQ2YsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25DO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM5QixDQUFDOzs7WUF6RUYsVUFBVTs7O1lBWEYsMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50UmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1GaWVsZCB9IGZyb20gJy4vLi4vLi4vLi4vcG8tZHluYW1pYy9wby1keW5hbWljLWZvcm0vcG8tZHluYW1pYy1mb3JtLWZpZWxkLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvcG8tY29tcG9uZW50LWluamVjdG9yL3BvLWNvbXBvbmVudC1pbmplY3Rvci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUG9Mb29rdXBDb2x1bW4gfSBmcm9tICcuLi8uLi8uLi8uLi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWxvb2t1cC9pbnRlcmZhY2VzL3BvLWxvb2t1cC1jb2x1bW4uaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9Mb29rdXBGaWx0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWxvb2t1cC9pbnRlcmZhY2VzL3BvLWxvb2t1cC1maWx0ZXIuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9Mb29rdXBMaXRlcmFscyB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tbG9va3VwLWxpdGVyYWxzLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvTG9va3VwTW9kYWxDb21wb25lbnQgfSBmcm9tICcuLi9wby1sb29rdXAtbW9kYWwvcG8tbG9va3VwLW1vZGFsLmNvbXBvbmVudCc7XHJcblxyXG4vKipcclxuICogQGRvY3NQcml2YXRlXHJcbiAqXHJcbiAqIFNlcnZpw6dvIHJlc3BvbnPDoXZlbCBwb3IgY29udHJvbGFyIGEgYWJlcnR1cmEgZG8gY29tcG9uZW50ZSBQbyBMb29rdXAgTW9kYWwuXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQb0xvb2t1cE1vZGFsU2VydmljZSB7XHJcbiAgc2VsZWN0VmFsdWVFdmVudDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgcHJpdmF0ZSBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+ID0gbnVsbDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwb0NvbXBvbmVudEluamVjdG9yOiBQb0NvbXBvbmVudEluamVjdG9yU2VydmljZSkge31cclxuXHJcbiAgLyoqXHJcbiAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIGFicmlyIGEgbW9kYWwgZGUgYnVzY2EgZGFzIGluZm9ybWHDp8O1ZXMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gYWR2YW5jZWRGaWx0ZXJzIHtBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+fSBPYmpldG8gdXRpbGl6YWRvIHBhcmEgY3JpYXIgbyBidXNjYSBhdmFuw6dhZGEuXHJcbiAgICogQHBhcmFtIHNlcnZpY2Uge1BvTG9va3VwRmlsdGVyfSBTZXJ2acOnbyByZXNwb25zw6F2ZWwgcG9yIHJlYWxpemFyIGEgYnVzY2Egbm8gc2VydmnDp28gZG9zIGRhZG9zLlxyXG4gICAqIEBwYXJhbSBjb2x1bW5zIHtBcnJheTxQb0xvb2t1cENvbHVtbj59IERlZmluacOnw6NvIGRhcyBjb2x1bmFzIG5hIG1vZGFsIGRlIGJ1c2NhLlxyXG4gICAqIEBwYXJhbSBmaWx0ZXJQYXJhbXMge2FueX0gVmFsb3IgcXVlIHNlcsOhIHJlcGFzc2FkbyBhb3MgbcOpdG9kb3MgZG8gc2VydmnDp28gcGFyYSBhdXhpbGlhciBubyBmaWx0cm8gZG9zIGRhZG9zLlxyXG4gICAqIEBwYXJhbSB0aXRsZSB7c3RyaW5nfSBEZWZpbmnDp8OjbyBkbyB0w610dWxvIGRhIG1vZGFsLlxyXG4gICAqIEBwYXJhbSBsaXRlcmFscyB7UG9Mb29rdXBMaXRlcmFsc30gTGl0ZXJhaXMgdXRpbGl6YWRhcyBubyBjb21wb25lbnRlLlxyXG4gICAqIEBwYXJhbSBzZWxlY3RlZEl0ZW1zIHthbnl9IFZhbG9yIHF1ZSBlc3TDoSBzZWxlY2lvbmFkbyBxdWUgc2Vyw6EgcmVwYXNzYWRvIHBhcmEgbyBtb2RhbCBwYXJhIGFwcmVzZW50YXIgbmEgdGFiZWxhLlxyXG4gICAqIEBwYXJhbSBmaWVsZExhYmVsIHtzdHJpbmd9IFZhbG9yIHF1ZSBzZXLDoSB1dGlsaXphZG8gY29tbyBkZXNjcmnDp8OjbyBkbyBjYW1wby5cclxuICAgKiBAcGFyYW0gZmllbGRWYWx1ZSB7c3RyaW5nfSBWYWxvciBxdWUgc2Vyw6EgdXRpbGl6YWRvIGNvbW8gdmFsb3IgZG8gY2FtcG8uXHJcbiAgICovXHJcbiAgb3Blbk1vZGFsKHBhcmFtczoge1xyXG4gICAgYWR2YW5jZWRGaWx0ZXJzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+O1xyXG4gICAgc2VydmljZTogUG9Mb29rdXBGaWx0ZXI7XHJcbiAgICBjb2x1bW5zOiBBcnJheTxQb0xvb2t1cENvbHVtbj47XHJcbiAgICBmaWx0ZXJQYXJhbXM6IGFueTtcclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICBsaXRlcmFsczogUG9Mb29rdXBMaXRlcmFscztcclxuICAgIGluZmluaXRlU2Nyb2xsOiBib29sZWFuO1xyXG4gICAgbXVsdGlwbGU6IGJvb2xlYW47XHJcbiAgICBzZWxlY3RlZEl0ZW1zOiBBcnJheTxhbnk+O1xyXG4gICAgZmllbGRMYWJlbDogc3RyaW5nO1xyXG4gICAgZmllbGRWYWx1ZTogc3RyaW5nO1xyXG4gIH0pOiB2b2lkIHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgYWR2YW5jZWRGaWx0ZXJzLFxyXG4gICAgICBzZXJ2aWNlLFxyXG4gICAgICBjb2x1bW5zLFxyXG4gICAgICBmaWx0ZXJQYXJhbXMsXHJcbiAgICAgIHRpdGxlLFxyXG4gICAgICBsaXRlcmFscyxcclxuICAgICAgaW5maW5pdGVTY3JvbGwsXHJcbiAgICAgIG11bHRpcGxlLFxyXG4gICAgICBzZWxlY3RlZEl0ZW1zLFxyXG4gICAgICBmaWVsZExhYmVsLFxyXG4gICAgICBmaWVsZFZhbHVlXHJcbiAgICB9ID0gcGFyYW1zO1xyXG5cclxuICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy5wb0NvbXBvbmVudEluamVjdG9yLmNyZWF0ZUNvbXBvbmVudEluQXBwbGljYXRpb24oUG9Mb29rdXBNb2RhbENvbXBvbmVudCk7XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5hZHZhbmNlZEZpbHRlcnMgPSBhZHZhbmNlZEZpbHRlcnM7XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS50aXRsZSA9IHRpdGxlO1xyXG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuY29sdW1ucyA9IGNvbHVtbnM7XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5maWx0ZXJTZXJ2aWNlID0gc2VydmljZTtcclxuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmZpbHRlclBhcmFtcyA9IGZpbHRlclBhcmFtcztcclxuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmxpdGVyYWxzID0gbGl0ZXJhbHM7XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5tb2RlbC5zdWJzY3JpYmUoJGV2ZW50ID0+IHtcclxuICAgICAgdGhpcy5zZWxlY3RWYWx1ZSgkZXZlbnQpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5pbmZpbml0ZVNjcm9sbCA9IGluZmluaXRlU2Nyb2xsO1xyXG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UubXVsdGlwbGUgPSBtdWx0aXBsZTtcclxuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLnNlbGVjdGVkSXRlbXMgPSBzZWxlY3RlZEl0ZW1zO1xyXG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZmllbGRMYWJlbCA9IGZpZWxkTGFiZWw7XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5maWVsZFZhbHVlID0gZmllbGRWYWx1ZTtcclxuICAgIHRoaXMuY29tcG9uZW50UmVmLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcclxuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLm9wZW5Nb2RhbCgpO1xyXG4gIH1cclxuXHJcbiAgLy8gRXN0ZSBtZXRvZG8gw6kgY2hhbWFkbyBxdWFuZG8gw6kgc2VsZWNpb25hZG8gdW0gaXRlbSBuYSBsb29rdXAgbW9kYWwuXHJcbiAgc2VsZWN0VmFsdWUodmFsdWUpIHtcclxuICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICB0aGlzLnNlbGVjdFZhbHVlRXZlbnQuZW1pdCh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5kZXN0cm95KCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==