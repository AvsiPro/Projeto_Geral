import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
export class PoMultiselectFilterService {
    constructor(http) {
        this.http = http;
        this.fieldLabel = 'label';
        this.fieldValue = 'value';
        this.messages = [];
    }
    get url() {
        return this._url;
    }
    getFilteredData({ value }) {
        const params = value ? { filter: value } : {};
        return this.http
            .get(this.url, {
            params
        })
            .pipe(map(response => this.parseToArrayMultiselectOptions(response['items'])));
    }
    getObjectsByValues(value) {
        return this.http
            .get(`${this.url}?${this.fieldValue}=${value.toString()}`)
            .pipe(map(response => this.parseToArrayMultiselectOptions(response['items'])));
    }
    configProperties(url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    }
    parseToArrayMultiselectOptions(items) {
        if (items && items.length > 0) {
            return items.map(item => this.parseToMultiselectOption(item));
        }
        return [];
    }
    parseToMultiselectOption(item) {
        const label = item[this.fieldLabel];
        const value = item[this.fieldValue];
        return { label, value };
    }
}
PoMultiselectFilterService.decorators = [
    { type: Injectable }
];
PoMultiselectFilterService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbXVsdGlzZWxlY3QtZmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tbXVsdGlzZWxlY3QvcG8tbXVsdGlzZWxlY3QtZmlsdGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3JDLE1BQU0sT0FBTywwQkFBMEI7SUFXckMsWUFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQVZwQyxlQUFVLEdBQVcsT0FBTyxDQUFDO1FBQzdCLGVBQVUsR0FBVyxPQUFPLENBQUM7UUFHckIsYUFBUSxHQUFHLEVBQUUsQ0FBQztJQU1pQixDQUFDO0lBSnhDLElBQUksR0FBRztRQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBSUQsZUFBZSxDQUFDLEVBQUUsS0FBSyxFQUFPO1FBQzVCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUM5QyxPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDYixNQUFNO1NBQ1AsQ0FBQzthQUNELElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxLQUE2QjtRQUM5QyxPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO2FBQ3pELElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxHQUFXLEVBQUUsVUFBa0IsRUFBRSxVQUFrQjtRQUNsRSxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUMvQixDQUFDO0lBRU8sOEJBQThCLENBQUMsS0FBaUI7UUFDdEQsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDN0IsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDL0Q7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFTyx3QkFBd0IsQ0FBQyxJQUFTO1FBQ3hDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVwQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQzFCLENBQUM7OztZQWhERixVQUFVOzs7WUFSRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBQb011bHRpc2VsZWN0RmlsdGVyIH0gZnJvbSAnLi9wby1tdWx0aXNlbGVjdC1maWx0ZXIuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9NdWx0aXNlbGVjdE9wdGlvbiB9IGZyb20gJy4vcG8tbXVsdGlzZWxlY3Qtb3B0aW9uLmludGVyZmFjZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQb011bHRpc2VsZWN0RmlsdGVyU2VydmljZSBpbXBsZW1lbnRzIFBvTXVsdGlzZWxlY3RGaWx0ZXIge1xyXG4gIGZpZWxkTGFiZWw6IHN0cmluZyA9ICdsYWJlbCc7XHJcbiAgZmllbGRWYWx1ZTogc3RyaW5nID0gJ3ZhbHVlJztcclxuXHJcbiAgcHJpdmF0ZSBfdXJsOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBtZXNzYWdlcyA9IFtdO1xyXG5cclxuICBnZXQgdXJsKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fdXJsO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7fVxyXG5cclxuICBnZXRGaWx0ZXJlZERhdGEoeyB2YWx1ZSB9OiBhbnkpOiBPYnNlcnZhYmxlPEFycmF5PFBvTXVsdGlzZWxlY3RPcHRpb24+PiB7XHJcbiAgICBjb25zdCBwYXJhbXMgPSB2YWx1ZSA/IHsgZmlsdGVyOiB2YWx1ZSB9IDoge307XHJcbiAgICByZXR1cm4gdGhpcy5odHRwXHJcbiAgICAgIC5nZXQodGhpcy51cmwsIHtcclxuICAgICAgICBwYXJhbXNcclxuICAgICAgfSlcclxuICAgICAgLnBpcGUobWFwKHJlc3BvbnNlID0+IHRoaXMucGFyc2VUb0FycmF5TXVsdGlzZWxlY3RPcHRpb25zKHJlc3BvbnNlWydpdGVtcyddKSkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0T2JqZWN0c0J5VmFsdWVzKHZhbHVlOiBBcnJheTxzdHJpbmcgfCBudW1iZXI+KTogT2JzZXJ2YWJsZTxBcnJheTxQb011bHRpc2VsZWN0T3B0aW9uPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cFxyXG4gICAgICAuZ2V0KGAke3RoaXMudXJsfT8ke3RoaXMuZmllbGRWYWx1ZX09JHt2YWx1ZS50b1N0cmluZygpfWApXHJcbiAgICAgIC5waXBlKG1hcChyZXNwb25zZSA9PiB0aGlzLnBhcnNlVG9BcnJheU11bHRpc2VsZWN0T3B0aW9ucyhyZXNwb25zZVsnaXRlbXMnXSkpKTtcclxuICB9XHJcblxyXG4gIGNvbmZpZ1Byb3BlcnRpZXModXJsOiBzdHJpbmcsIGZpZWxkTGFiZWw6IHN0cmluZywgZmllbGRWYWx1ZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLl91cmwgPSB1cmw7XHJcbiAgICB0aGlzLmZpZWxkTGFiZWwgPSBmaWVsZExhYmVsO1xyXG4gICAgdGhpcy5maWVsZFZhbHVlID0gZmllbGRWYWx1ZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcGFyc2VUb0FycmF5TXVsdGlzZWxlY3RPcHRpb25zKGl0ZW1zOiBBcnJheTxhbnk+KTogQXJyYXk8UG9NdWx0aXNlbGVjdE9wdGlvbj4ge1xyXG4gICAgaWYgKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+IHRoaXMucGFyc2VUb011bHRpc2VsZWN0T3B0aW9uKGl0ZW0pKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHBhcnNlVG9NdWx0aXNlbGVjdE9wdGlvbihpdGVtOiBhbnkpOiBQb011bHRpc2VsZWN0T3B0aW9uIHtcclxuICAgIGNvbnN0IGxhYmVsID0gaXRlbVt0aGlzLmZpZWxkTGFiZWxdO1xyXG4gICAgY29uc3QgdmFsdWUgPSBpdGVtW3RoaXMuZmllbGRWYWx1ZV07XHJcblxyXG4gICAgcmV0dXJuIHsgbGFiZWwsIHZhbHVlIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==