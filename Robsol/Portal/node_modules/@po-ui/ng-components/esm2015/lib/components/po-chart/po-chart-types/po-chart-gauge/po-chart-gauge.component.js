import { ChangeDetectorRef, Component, ComponentFactoryResolver, ElementRef, NgZone, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import { PoChartCircular } from '../po-chart-circular/po-chart-circular';
import { poChartGaugeStartAngle } from '../po-chart-circular/po-chart-circular.constant';
import { PoChartGaugeTextContentComponent } from './po-chart-gauge-text-content/po-chart-gauge-text-content.component';
export class PoChartGaugeComponent extends PoChartCircular {
    /* istanbul ignore next */
    constructor(changeDetection, componentFactoryResolver, el, ngZone, renderer) {
        super(el, ngZone, renderer);
        this.changeDetection = changeDetection;
        this.componentFactoryResolver = componentFactoryResolver;
        this.chartItemStartAngle = poChartGaugeStartAngle;
        this._series = [];
    }
    set series(series) {
        this._series = this.getGaugeSerie(series);
    }
    get series() {
        return this._series;
    }
    ngAfterViewInit() {
        this.drawBasePath();
        this.createComponent();
    }
    createComponent() {
        const factory = this.componentFactoryResolver.resolveComponentFactory(PoChartGaugeTextContentComponent);
        const componentRef = this.svgContainerRef.createComponent(factory);
        const instance = componentRef.instance;
        instance.serie = this.series.length && this.series[0];
        instance.gaugeWidth = this.getGaugeBaseWidth();
        this.resizeListenerSubscription(instance);
    }
    checkGaugeValueLimits(value) {
        if (value <= 0) {
            return 0;
        }
        else if (value >= 100) {
            return 100;
        }
        else {
            return value;
        }
    }
    drawBasePath() {
        const basePath = this.el.nativeElement.querySelector('.po-chart-gauge-base-path');
        this.drawPath(basePath, this.chartItemStartAngle, 0);
    }
    getGaugeBaseWidth() {
        const basePath = this.el.nativeElement.querySelector('.po-chart-gauge-base-path');
        if (basePath) {
            return basePath.getBoundingClientRect().width;
        }
    }
    getGaugeSerie(series = []) {
        const [serie] = series;
        if (serie && typeof serie === 'object') {
            return [
                Object.assign(Object.assign({}, serie), { color: this.colors[0], value: this.checkGaugeValueLimits(serie.value) })
            ];
        }
        return [];
    }
    resizeListenerSubscription(instance) {
        this.windowResizeEmitter.subscribe(() => {
            instance.gaugeWidth = this.getGaugeBaseWidth();
            this.changeDetection.detectChanges();
        });
    }
}
PoChartGaugeComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-chart-gauge',
                template: "<div #chartBody class=\"po-chart-body\">\r\n  <div #svgContainer class=\"po-chart-svg-container\"></div>\r\n\r\n  <div #tooltipElement *ngIf=\"!isChartGaugeType\" class=\"po-chart-tooltip po-tooltip po-invisible\">\r\n    <div class=\"po-tooltip-arrow po-arrow-bottom\"></div>\r\n    <div class=\"po-tooltip-content\">{{ tooltipText }}</div>\r\n  </div>\r\n</div>\r\n"
            },] }
];
PoChartGaugeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 }
];
PoChartGaugeComponent.propDecorators = {
    svgContainerRef: [{ type: ViewChild, args: ['svgContainer', { static: true, read: ViewContainerRef },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZ2F1Z2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWNoYXJ0L3BvLWNoYXJ0LXR5cGVzL3BvLWNoYXJ0LWdhdWdlL3BvLWNoYXJ0LWdhdWdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCx3QkFBd0IsRUFDeEIsVUFBVSxFQUNWLE1BQU0sRUFDTixTQUFTLEVBQ1QsU0FBUyxFQUNULGdCQUFnQixFQUNqQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFekUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saURBQWlELENBQUM7QUFDekYsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0scUVBQXFFLENBQUM7QUFNdkgsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGVBQWU7SUFleEQsMEJBQTBCO0lBQzFCLFlBQ1UsZUFBa0MsRUFDbEMsd0JBQWtELEVBQzFELEVBQWMsRUFDZCxNQUFjLEVBQ2QsUUFBbUI7UUFFbkIsS0FBSyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFOcEIsb0JBQWUsR0FBZixlQUFlLENBQW1CO1FBQ2xDLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFmNUQsd0JBQW1CLEdBQVcsc0JBQXNCLENBQUM7UUFFM0MsWUFBTyxHQUE2QixFQUFFLENBQUM7SUFtQmpELENBQUM7SUFqQkQsSUFBSSxNQUFNLENBQUMsTUFBZ0M7UUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQWFELGVBQWU7UUFDYixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFTyxlQUFlO1FBQ3JCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyx1QkFBdUIsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBRXhHLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25FLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUM7UUFFdkMsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELFFBQVEsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFL0MsSUFBSSxDQUFDLDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTyxxQkFBcUIsQ0FBQyxLQUFhO1FBQ3pDLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTtZQUNkLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7YUFBTSxJQUFJLEtBQUssSUFBSSxHQUFHLEVBQUU7WUFDdkIsT0FBTyxHQUFHLENBQUM7U0FDWjthQUFNO1lBQ0wsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7SUFFTyxZQUFZO1FBQ2xCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBRWxGLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU8saUJBQWlCO1FBQ3ZCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBRWxGLElBQUksUUFBUSxFQUFFO1lBQ1osT0FBTyxRQUFRLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxLQUFLLENBQUM7U0FDL0M7SUFDSCxDQUFDO0lBRU8sYUFBYSxDQUFDLFNBQW1DLEVBQUU7UUFDekQsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUV2QixJQUFJLEtBQUssSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDdEMsT0FBTztnREFFQSxLQUFLLEtBQ1IsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ3JCLEtBQUssRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQzthQUVqRCxDQUFDO1NBQ0g7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFTywwQkFBMEIsQ0FBQyxRQUEwQztRQUMzRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUN0QyxRQUFRLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQy9DLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7WUE1RkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLDJYQUFzRDthQUN2RDs7O1lBbEJDLGlCQUFpQjtZQUVqQix3QkFBd0I7WUFDeEIsVUFBVTtZQUNWLE1BQU07WUFDTixTQUFTOzs7OEJBZVIsU0FBUyxTQUFDLGNBQWMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBBZnRlclZpZXdJbml0LFxyXG4gIENoYW5nZURldGVjdG9yUmVmLFxyXG4gIENvbXBvbmVudCxcclxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgRWxlbWVudFJlZixcclxuICBOZ1pvbmUsXHJcbiAgUmVuZGVyZXIyLFxyXG4gIFZpZXdDaGlsZCxcclxuICBWaWV3Q29udGFpbmVyUmVmXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBQb0NoYXJ0Q2lyY3VsYXIgfSBmcm9tICcuLi9wby1jaGFydC1jaXJjdWxhci9wby1jaGFydC1jaXJjdWxhcic7XHJcbmltcG9ydCB7IFBvQ2hhcnRHYXVnZVNlcmllIH0gZnJvbSAnLi9wby1jaGFydC1nYXVnZS1zZXJpZXMuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgcG9DaGFydEdhdWdlU3RhcnRBbmdsZSB9IGZyb20gJy4uL3BvLWNoYXJ0LWNpcmN1bGFyL3BvLWNoYXJ0LWNpcmN1bGFyLmNvbnN0YW50JztcclxuaW1wb3J0IHsgUG9DaGFydEdhdWdlVGV4dENvbnRlbnRDb21wb25lbnQgfSBmcm9tICcuL3BvLWNoYXJ0LWdhdWdlLXRleHQtY29udGVudC9wby1jaGFydC1nYXVnZS10ZXh0LWNvbnRlbnQuY29tcG9uZW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAncG8tY2hhcnQtZ2F1Z2UnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi4vcG8tY2hhcnQtZHluYW1pYy10eXBlLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUG9DaGFydEdhdWdlQ29tcG9uZW50IGV4dGVuZHMgUG9DaGFydENpcmN1bGFyIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgQFZpZXdDaGlsZCgnc3ZnQ29udGFpbmVyJywgeyBzdGF0aWM6IHRydWUsIHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSkgc3ZnQ29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmO1xyXG5cclxuICBjaGFydEl0ZW1TdGFydEFuZ2xlOiBudW1iZXIgPSBwb0NoYXJ0R2F1Z2VTdGFydEFuZ2xlO1xyXG5cclxuICBwcm90ZWN0ZWQgX3NlcmllczogQXJyYXk8UG9DaGFydEdhdWdlU2VyaWU+ID0gW107XHJcblxyXG4gIHNldCBzZXJpZXMoc2VyaWVzOiBBcnJheTxQb0NoYXJ0R2F1Z2VTZXJpZT4pIHtcclxuICAgIHRoaXMuX3NlcmllcyA9IHRoaXMuZ2V0R2F1Z2VTZXJpZShzZXJpZXMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHNlcmllcygpIHtcclxuICAgIHJldHVybiB0aGlzLl9zZXJpZXM7XHJcbiAgfVxyXG5cclxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgbmdab25lOiBOZ1pvbmUsXHJcbiAgICByZW5kZXJlcjogUmVuZGVyZXIyXHJcbiAgKSB7XHJcbiAgICBzdXBlcihlbCwgbmdab25lLCByZW5kZXJlcik7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICB0aGlzLmRyYXdCYXNlUGF0aCgpO1xyXG4gICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQ29tcG9uZW50KCkge1xyXG4gICAgY29uc3QgZmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFBvQ2hhcnRHYXVnZVRleHRDb250ZW50Q29tcG9uZW50KTtcclxuXHJcbiAgICBjb25zdCBjb21wb25lbnRSZWYgPSB0aGlzLnN2Z0NvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQoZmFjdG9yeSk7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IGNvbXBvbmVudFJlZi5pbnN0YW5jZTtcclxuXHJcbiAgICBpbnN0YW5jZS5zZXJpZSA9IHRoaXMuc2VyaWVzLmxlbmd0aCAmJiB0aGlzLnNlcmllc1swXTtcclxuICAgIGluc3RhbmNlLmdhdWdlV2lkdGggPSB0aGlzLmdldEdhdWdlQmFzZVdpZHRoKCk7XHJcblxyXG4gICAgdGhpcy5yZXNpemVMaXN0ZW5lclN1YnNjcmlwdGlvbihpbnN0YW5jZSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrR2F1Z2VWYWx1ZUxpbWl0cyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICBpZiAodmFsdWUgPD0gMCkge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH0gZWxzZSBpZiAodmFsdWUgPj0gMTAwKSB7XHJcbiAgICAgIHJldHVybiAxMDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGRyYXdCYXNlUGF0aCgpIHtcclxuICAgIGNvbnN0IGJhc2VQYXRoID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wby1jaGFydC1nYXVnZS1iYXNlLXBhdGgnKTtcclxuXHJcbiAgICB0aGlzLmRyYXdQYXRoKGJhc2VQYXRoLCB0aGlzLmNoYXJ0SXRlbVN0YXJ0QW5nbGUsIDApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRHYXVnZUJhc2VXaWR0aCgpIHtcclxuICAgIGNvbnN0IGJhc2VQYXRoID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wby1jaGFydC1nYXVnZS1iYXNlLXBhdGgnKTtcclxuXHJcbiAgICBpZiAoYmFzZVBhdGgpIHtcclxuICAgICAgcmV0dXJuIGJhc2VQYXRoLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRHYXVnZVNlcmllKHNlcmllczogQXJyYXk8UG9DaGFydEdhdWdlU2VyaWU+ID0gW10pIHtcclxuICAgIGNvbnN0IFtzZXJpZV0gPSBzZXJpZXM7XHJcblxyXG4gICAgaWYgKHNlcmllICYmIHR5cGVvZiBzZXJpZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgcmV0dXJuIFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAuLi5zZXJpZSxcclxuICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yc1swXSxcclxuICAgICAgICAgIHZhbHVlOiB0aGlzLmNoZWNrR2F1Z2VWYWx1ZUxpbWl0cyhzZXJpZS52YWx1ZSlcclxuICAgICAgICB9XHJcbiAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZXNpemVMaXN0ZW5lclN1YnNjcmlwdGlvbihpbnN0YW5jZTogUG9DaGFydEdhdWdlVGV4dENvbnRlbnRDb21wb25lbnQpIHtcclxuICAgIHRoaXMud2luZG93UmVzaXplRW1pdHRlci5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICBpbnN0YW5jZS5nYXVnZVdpZHRoID0gdGhpcy5nZXRHYXVnZUJhc2VXaWR0aCgpO1xyXG4gICAgICB0aGlzLmNoYW5nZURldGVjdGlvbi5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19