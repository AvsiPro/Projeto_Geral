import { Component, ElementRef, forwardRef, Injector, Renderer2, ViewChild } from '@angular/core';
import { NgControl, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { PoLookupBaseComponent } from './po-lookup-base.component';
import { PoLookupFilterService } from './services/po-lookup-filter.service';
import { PoLookupModalService } from './services/po-lookup-modal.service';
/* istanbul ignore next */
const providers = [
    PoLookupFilterService,
    PoLookupModalService,
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoLookupComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoLookupComponent),
        multi: true
    },
    {
        provide: NgControl,
        useExisting: forwardRef(() => PoLookupComponent),
        multi: false
    }
];
/**
 * @docsExtends PoLookupBaseComponent
 *
 * @description
 *
 * Quando existe muitos dados o po-lookup por padrão traz apenas 10 itens na tabela e os demais são carregados por demanda através do
 * botão 'Carregar mais resultados'. Para que funcione corretamente, é importante que o serviço siga o
 * [Guia de implementação das APIs TOTVS](https://po-ui.io/guides/api).
 *
 * Importante:
 *
 * - Caso o po-lookup contenha o [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então será necessário informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * ```
 * <po-lookup
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </po-lookup>
 * ```
 *
 * @example
 *
 * <example name="po-lookup-basic" title="PO Lookup Basic">
 *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.html"> </file>
 *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-labs" title="PO Lookup Labs">
 *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.html"> </file>
 *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-hero" title="PO Lookup - Hero">
 *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.html"> </file>
 *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-hero-reactive-form" title="PO Lookup - Hero Reactive Form">
 *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.html"> </file>
 *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-sw-films" title="PO Lookup - Star Wars films">
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.html"> </file>
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.ts"> </file>
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-multiple" title="PO Lookup - Multiple">
 *  <file name="sample-po-lookup-multiple/sample-po-lookup-multiple.component.html"> </file>
 *  <file name="sample-po-lookup-multiple/sample-po-lookup-multiple.component.ts"> </file>
 *  <file name="sample-po-lookup-multiple/sample-po-lookup-multiple.service.ts"> </file>
 * </example>
 */
export class PoLookupComponent extends PoLookupBaseComponent {
    constructor(renderer, poLookupFilterService, poLookupModalService, injector) {
        super(poLookupFilterService, injector);
        this.renderer = renderer;
        this.poLookupModalService = poLookupModalService;
        this.initialized = false;
        this.visibleElement = false;
        this.disclaimers = [];
        this.visibleDisclaimers = [];
        this.isCalculateVisibleItems = true;
    }
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.autoFocus) {
            this.focus();
        }
        this.initialized = true;
    }
    ngDoCheck() {
        var _a;
        const inputWidth = (_a = this.inputEl) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
            this.debounceResize();
            this.visibleElement = true;
        }
    }
    ngOnDestroy() {
        if (this.modalSubscription) {
            this.modalSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        super.ngOnInit();
        this.initializeListeners();
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoLookupComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoLookupComponent, { static: true }) lookup: PoLookupComponent;
     *
     * focusLookup() {
     *   this.lookup.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    openLookup() {
        if (this.isAllowedOpenModal()) {
            const { advancedFilters, service, columns, filterParams, literals, infiniteScroll, multiple, fieldLabel, fieldValue } = this;
            const selectedItems = this.checkSelectedItems();
            this.poLookupModalService.openModal({
                advancedFilters,
                service,
                columns,
                filterParams,
                title: this.label,
                literals,
                infiniteScroll,
                multiple,
                selectedItems,
                fieldLabel,
                fieldValue
            });
            if (!this.modalSubscription) {
                this.modalSubscription = this.poLookupModalService.selectValueEvent.subscribe(selectedOptions => {
                    if (selectedOptions.length > 1 || this.disclaimers.length) {
                        this.setDisclaimers(selectedOptions);
                        this.updateVisibleItems();
                    }
                    this.selectModel(selectedOptions);
                });
            }
        }
    }
    checkSelectedItems() {
        var _a;
        if (this.multiple) {
            if (!this.disclaimers.length && ((_a = this.valueToModel) === null || _a === void 0 ? void 0 : _a.length)) {
                return [Object.assign({ value: this.valueToModel[0], label: this.oldValue }, this.selectedOptions[0])];
            }
            return this.disclaimers;
        }
        else {
            return this.valueToModel;
        }
    }
    setDisclaimers(selectedOptions) {
        this.disclaimers = selectedOptions.map(selectedOption => (Object.assign({ value: selectedOption[this.fieldValue], label: selectedOption[this.fieldLabel] }, selectedOption)));
        this.visibleDisclaimers = [...this.disclaimers];
    }
    setViewValue(value, object) {
        if (this.inputEl && this.fieldFormat) {
            this.setInputValueWipoieldFormat(object);
        }
        else if (this.inputEl) {
            this.inputEl.nativeElement.value = this.valueToModel || this.valueToModel === 0 ? value : '';
        }
    }
    getViewValue() {
        return this.inputEl.nativeElement.value;
    }
    searchEvent() {
        var _a, _b;
        (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
        const value = this.getViewValue();
        if (((_b = this.oldValue) === null || _b === void 0 ? void 0 : _b.toString()) !== value) {
            this.searchById(value);
        }
    }
    closeDisclaimer(value) {
        this.disclaimers = this.disclaimers.filter(disclaimer => disclaimer.value !== value);
        this.valueToModel = this.valueToModel.filter(model => model !== value);
        this.updateVisibleItems();
        this.callOnChange(this.valueToModel.length ? this.valueToModel : undefined);
    }
    updateVisibleItems() {
        if (this.disclaimers && this.disclaimers.length > 0) {
            this.visibleDisclaimers = [].concat(this.disclaimers);
        }
        this.debounceResize();
        if (!this.inputEl.nativeElement.offsetWidth) {
            this.isCalculateVisibleItems = true;
        }
    }
    debounceResize() {
        if (!this.autoHeight) {
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(() => {
                this.calculateVisibleItems();
            }, 200);
        }
    }
    getInputWidth() {
        return this.inputEl.nativeElement.offsetWidth - 40;
    }
    getDisclaimersWidth() {
        const disclaimers = this.inputEl.nativeElement.querySelectorAll('po-disclaimer');
        return Array.from(disclaimers).map(disclaimer => disclaimer['offsetWidth']);
    }
    calculateVisibleItems() {
        const disclaimersWidth = this.getDisclaimersWidth();
        const inputWidth = this.getInputWidth();
        const extraDisclaimerSize = 38;
        const disclaimersVisible = disclaimersWidth[0];
        const newDisclaimers = [];
        const disclaimers = this.disclaimers;
        if (inputWidth > 0) {
            let sum = 0;
            let i = 0;
            for (i = 0; i < disclaimers.length; i++) {
                sum += disclaimersWidth[i];
                newDisclaimers.push(disclaimers[i]);
                if (sum > inputWidth) {
                    sum -= disclaimersWidth[i];
                    this.isCalculateVisibleItems = false;
                    break;
                }
            }
            if (disclaimersVisible || !disclaimers.length) {
                if (i === disclaimers.length) {
                    this.isCalculateVisibleItems = false;
                    return;
                }
                if (sum + extraDisclaimerSize > inputWidth) {
                    newDisclaimers.splice(-2, 2);
                    const label = '+' + (disclaimers.length + 1 - i).toString();
                    newDisclaimers.push({ value: '', label: label });
                }
                else {
                    newDisclaimers.splice(-1, 1);
                    const label = '+' + (disclaimers.length - i).toString();
                    newDisclaimers.push({ value: '', label: label });
                }
            }
        }
        this.visibleDisclaimers = [...newDisclaimers];
    }
    isAllowedOpenModal() {
        if (!this.service) {
            console.warn('No service informed');
        }
        return !!(this.service && !this.disabled);
    }
    formatFields(objectSelected, properties) {
        let formatedField;
        if (Array.isArray(properties)) {
            for (const property of properties) {
                if (objectSelected && objectSelected[property]) {
                    if (!formatedField) {
                        formatedField = objectSelected[property];
                    }
                    else {
                        formatedField = formatedField + ' - ' + objectSelected[property];
                    }
                }
            }
        }
        if (!formatedField) {
            formatedField = objectSelected[this.fieldValue];
        }
        return formatedField;
    }
    setInputValueWipoieldFormat(objectSelected) {
        const isEmpty = Object.keys(objectSelected).length === 0;
        let fieldFormated;
        if (Array.isArray(this.fieldFormat)) {
            fieldFormated = this.formatFields(objectSelected, this.fieldFormat);
        }
        else {
            fieldFormated = this.fieldFormat(objectSelected);
        }
        this.oldValue = isEmpty ? '' : fieldFormated;
        this.inputEl.nativeElement.value = isEmpty ? '' : fieldFormated;
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.updateVisibleItems();
        });
    }
}
PoLookupComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-lookup',
                template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content\" *ngIf=\"!disclaimers.length; else disclaimersTemplate\">\r\n    <input\r\n      #inp\r\n      class=\"po-input\"\r\n      type=\"text\"\r\n      [ngClass]=\"clean && inp.value ? 'po-input-double-icon-right' : 'po-input-icon-right'\"\r\n      [autocomplete]=\"autocomplete\"\r\n      [disabled]=\"disabled\"\r\n      [placeholder]=\"placeholder\"\r\n      [required]=\"required\"\r\n      (blur)=\"searchEvent()\"\r\n    />\r\n\r\n    <div class=\"po-field-icon-container-right\">\r\n      <po-clean *ngIf=\"clean && !disabled\" [p-element-ref]=\"inputEl\" (p-change-event)=\"cleanModel()\"> </po-clean>\r\n\r\n      <span\r\n        #iconLookup\r\n        class=\"po-icon po-field-icon po-icon-search\"\r\n        tabindex=\"-1\"\r\n        [class.po-field-icon]=\"!disabled\"\r\n        [class.po-field-icon-disabled]=\"disabled\"\r\n        (click)=\"openLookup()\"\r\n        (focus)=\"inp.focus()\"\r\n      >\r\n      </span>\r\n    </div>\r\n  </div>\r\n  <po-field-container-bottom></po-field-container-bottom>\r\n</po-field-container>\r\n\r\n<ng-template #disclaimersTemplate>\r\n  <div class=\"po-field-container-content\">\r\n    <div\r\n      #inp\r\n      [tabindex]=\"disabled ? -1 : 0\"\r\n      class=\"po-input po-input-icon-right po-lookup-input\"\r\n      [class.po-lookup-input-auto]=\"autoHeight\"\r\n      [class.po-lookup-input-static]=\"!autoHeight\"\r\n      [class.po-lookup-input-disabled]=\"disabled\"\r\n    >\r\n      <span *ngIf=\"placeholder && !disclaimers?.length\" class=\"po-lookup-input-placeholder\">\r\n        {{ placeholder }}\r\n      </span>\r\n\r\n      <po-disclaimer\r\n        *ngFor=\"let disclaimer of visibleDisclaimers\"\r\n        class=\"po-lookup-input-disclaimer\"\r\n        [p-label]=\"disclaimer.label\"\r\n        [p-value]=\"disclaimer.value\"\r\n        [p-hide-close]=\"disclaimer.value === '' || disabled\"\r\n        [class.po-clickable]=\"disclaimer.value === '' && !disabled\"\r\n        (p-close-action)=\"closeDisclaimer(disclaimer.value)\"\r\n      >\r\n      </po-disclaimer>\r\n    </div>\r\n\r\n    <div class=\"po-field-icon-container-right\">\r\n      <span\r\n        #iconLookup\r\n        class=\"po-icon po-field-icon po-icon-search\"\r\n        tabindex=\"-1\"\r\n        [class.po-field-icon]=\"!disabled\"\r\n        [class.po-field-icon-disabled]=\"disabled\"\r\n        (click)=\"openLookup()\"\r\n        (focus)=\"inp.focus()\"\r\n      >\r\n      </span>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n",
                providers
            },] }
];
PoLookupComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: PoLookupFilterService },
    { type: PoLookupModalService },
    { type: Injector }
];
PoLookupComponent.propDecorators = {
    inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef, static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,