import { Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
 */
export class PoMultiselectDropdownComponent {
    constructor() {
        /** Propriedade que indica se deve exibir o loading. */
        this.isServerSearching = false;
        /** Propriedade que indica se o campo de pesquisa deverá ser escondido. */
        this.hideSearch = false;
        /** Propriedade que recebe a lista de opções selecionadas. */
        this.selectedOptions = [];
        /** Propriedade que recebe a lista com todas as opções. */
        this.options = [];
        /** Propriedade que recebe a lista de opções que deverão ser criadas no dropdown. */
        this.visibleOptions = [];
        /** Propriedade que indica se o campo "Selecionar todos" deverá ser escondido. */
        this.hideSelectAll = false;
        /** Evento disparado a cada tecla digitada na pesquisa. */
        this.changeSearch = new EventEmitter();
        /** Evento disparado a cada alteração na lista das opções selecionadas. */
        this.change = new EventEmitter();
        /**
         * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
         * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
         * para notificar o componente principal que deve fechar o dropdown.
         */
        this.closeDropdown = new EventEmitter();
        this.scrollTop = 0;
        this.show = false;
    }
    get hasOptions() {
        var _a;
        return !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.length);
    }
    onKeydown(event) {
        if (event.keyCode === 9) {
            this.closeDropdown.emit();
        }
    }
    scrollTo(index) {
        this.scrollTop = index <= 2 ? 0 : index * 44 - 88;
    }
    isSelectedItem(option) {
        return this.selectedOptions.some(selectedItem => selectedItem.value === option.value);
    }
    clickItem(check, option) {
        this.updateSelectedValues(check, option);
        if (!this.hideSearch) {
            this.searchElement.setFocus();
        }
    }
    onClickSelectAll() {
        const selectedValues = this.selectedOptions.map(({ value }) => value);
        if (this.everyVisibleOptionsSelected(selectedValues)) {
            this.selectedOptions = [];
        }
        else {
            this.selectedOptions = this.uniqueSelectedOptions(selectedValues);
        }
        this.change.emit(this.selectedOptions);
    }
    updateSelectedValues(checked, option) {
        if (checked) {
            this.selectedOptions.push(option);
        }
        else {
            this.selectedOptions = this.selectedOptions.filter(selectedOption => selectedOption.value !== option.value);
        }
        this.change.emit(this.selectedOptions);
    }
    everyVisibleOptionsSelected(selectedValues) {
        return this.visibleOptions.every(visibleOption => selectedValues.includes(visibleOption.value));
    }
    someVisibleOptionsSelected(selectedValues) {
        return this.visibleOptions.some(visibleOption => selectedValues.includes(visibleOption.value));
    }
    getStateSelectAll() {
        const selectedValues = this.selectedOptions.map(({ value }) => value);
        if (this.everyVisibleOptionsSelected(selectedValues)) {
            return true;
        }
        else if (this.someVisibleOptionsSelected(selectedValues)) {
            return null;
        }
        else {
            return false;
        }
    }
    callChangeSearch(event) {
        this.changeSearch.emit(event);
    }
    controlVisibility(toOpen) {
        this.show = toOpen;
        setTimeout(() => {
            if (toOpen && this.searchElement && !this.hideSearch) {
                this.searchElement.setFocus();
                this.searchElement.clean();
            }
        });
    }
    uniqueSelectedOptions(selectedValues) {
        const newSelectedOptions = [...this.selectedOptions];
        for (const visibleOption of this.visibleOptions) {
            if (!selectedValues.includes(visibleOption.value)) {
                newSelectedOptions.push(visibleOption);
            }
        }
        return newSelectedOptions;
    }
}
PoMultiselectDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-multiselect-dropdown',
                template: "<div #container class=\"po-multiselect-container\" [hidden]=\"!show\">\r\n  <po-multiselect-search\r\n    #searchElement\r\n    *ngIf=\"!hideSearch\"\r\n    [p-literals]=\"literals\"\r\n    [p-placeholder]=\"placeholderSearch\"\r\n    (p-change)=\"callChangeSearch($event)\"\r\n  >\r\n  </po-multiselect-search>\r\n\r\n  <ul class=\"po-multiselect-items-container\" [scrollTop]=\"scrollTop\" #ulElement>\r\n    <div *ngIf=\"!visibleOptions.length && !isServerSearching\" class=\"po-multiselect-container-no-data po-text-center\">\r\n      <span> {{ literals.noData }}</span>\r\n    </div>\r\n\r\n    <div *ngIf=\"isServerSearching\" class=\"po-multiselect-container-loading po-text-center\">\r\n      <po-loading></po-loading>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"!isServerSearching\">\r\n      <po-multiselect-item\r\n        *ngIf=\"!searchElement?.inputValue && visibleOptions.length && !hideSelectAll\"\r\n        [p-label]=\"literals?.selectAll\"\r\n        [p-selected]=\"getStateSelectAll()\"\r\n        (p-change)=\"onClickSelectAll()\"\r\n      >\r\n      </po-multiselect-item>\r\n\r\n      <po-multiselect-item\r\n        *ngFor=\"let option of visibleOptions\"\r\n        [p-label]=\"option.label\"\r\n        [p-selected]=\"isSelectedItem(option)\"\r\n        (p-change)=\"clickItem($event, option)\"\r\n      >\r\n      </po-multiselect-item>\r\n    </ng-container>\r\n  </ul>\r\n</div>\r\n"
            },] }
];
PoMultiselectDropdownComponent.propDecorators = {
    isServerSearching: [{ type: Input, args: ['p-searching',] }],
    hideSearch: [{ type: Input, args: ['p-hide-search',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    placeholderSearch: [{ type: Input, args: ['p-placeholder-search',] }],
    selectedOptions: [{ type: Input, args: ['p-selected-options',] }],
    options: [{ type: Input, args: ['p-options',] }],
    visibleOptions: [{ type: Input, args: ['p-visible-options',] }],
    hideSelectAll: [{ type: Input, args: ['p-hide-select-all',] }],
    changeSearch: [{ type: Output, args: ['p-change-search',] }],
    change: [{ type: Output, args: ['p-change',] }],
    closeDropdown: [{ type: Output, args: ['p-close-dropdown',] }],
    container: [{ type: ViewChild, args: ['container', { read: ElementRef, static: true },] }],
    ulElement: [{ type: ViewChild, args: ['ulElement', { read: ElementRef, static: true },] }],
    searchElement: [{ type: ViewChild, args: ['searchElement',] }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbXVsdGlzZWxlY3QtZHJvcGRvd24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLW11bHRpc2VsZWN0L3BvLW11bHRpc2VsZWN0LWRyb3Bkb3duL3BvLW11bHRpc2VsZWN0LWRyb3Bkb3duLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTTVHOzs7Ozs7R0FNRztBQUtILE1BQU0sT0FBTyw4QkFBOEI7SUFKM0M7UUFLRSx1REFBdUQ7UUFDakMsc0JBQWlCLEdBQWEsS0FBSyxDQUFDO1FBRTFELDBFQUEwRTtRQUNsRCxlQUFVLEdBQWEsS0FBSyxDQUFDO1FBUXJELDZEQUE2RDtRQUNoQyxvQkFBZSxHQUFlLEVBQUUsQ0FBQztRQUU5RCwwREFBMEQ7UUFDdEMsWUFBTyxHQUErQixFQUFFLENBQUM7UUFFN0Qsb0ZBQW9GO1FBQ3hELG1CQUFjLEdBQStCLEVBQUUsQ0FBQztRQUU1RSxpRkFBaUY7UUFDckQsa0JBQWEsR0FBYSxLQUFLLENBQUM7UUFFNUQsMERBQTBEO1FBQy9CLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUU3RCwwRUFBMEU7UUFDdEQsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFaEQ7Ozs7V0FJRztRQUN5QixrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFNL0QsY0FBUyxHQUFHLENBQUMsQ0FBQztRQUNkLFNBQUksR0FBWSxLQUFLLENBQUM7SUFpR3hCLENBQUM7SUEvRkMsSUFBSSxVQUFVOztRQUNaLE9BQU8sQ0FBQyxDQUFDLENBQUEsTUFBQSxJQUFJ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QkFBbUI7NEJBR3pCLEtBQUssU0FBQyxtQkFBbUI7MkJBR3pCLE1BQU0sU0FBQyxpQkFBaUI7cUJBR3hCLE1BQU0sU0FBQyxVQUFVOzRCQU9qQixNQUFNLFNBQUMsa0JBQWtCO3dCQUV6QixTQUFTLFNBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO3dCQUN6RCxTQUFTLFNBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOzRCQUN6RCxTQUFTLFNBQUMsZUFBZTt3QkFTekIsWUFBWSxTQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPdXRwdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgUG9NdWx0aXNlbGVjdExpdGVyYWxzIH0gZnJvbSAnLi4vLi4vaW5kZXgnO1xyXG5pbXBvcnQgeyBQb011bHRpc2VsZWN0T3B0aW9uIH0gZnJvbSAnLi4vcG8tbXVsdGlzZWxlY3Qtb3B0aW9uLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvTXVsdGlzZWxlY3RTZWFyY2hDb21wb25lbnQgfSBmcm9tICcuLy4uL3BvLW11bHRpc2VsZWN0LXNlYXJjaC9wby1tdWx0aXNlbGVjdC1zZWFyY2guY29tcG9uZW50JztcclxuXHJcbi8qKlxyXG4gKiBAZG9jc1ByaXZhdGVcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIENvbXBvbmVudGUgcXVlIGNvbnN0cnXDrXJhIG8gZHJvcGRvd24sIGNvbnRlbmRvIG8gY2FtcG8gZGUgcGVzcXVpc2EgZSBvcyBpdGVucyBwYXJhIHNlbGXDp8Ojby5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAncG8tbXVsdGlzZWxlY3QtZHJvcGRvd24nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1tdWx0aXNlbGVjdC1kcm9wZG93bi5jb21wb25lbnQuaHRtbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFBvTXVsdGlzZWxlY3REcm9wZG93bkNvbXBvbmVudCB7XHJcbiAgLyoqIFByb3ByaWVkYWRlIHF1ZSBpbmRpY2Egc2UgZGV2ZSBleGliaXIgbyBsb2FkaW5nLiAqL1xyXG4gIEBJbnB1dCgncC1zZWFyY2hpbmcnKSBpc1NlcnZlclNlYXJjaGluZz86IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgLyoqIFByb3ByaWVkYWRlIHF1ZSBpbmRpY2Egc2UgbyBjYW1wbyBkZSBwZXNxdWlzYSBkZXZlcsOhIHNlciBlc2NvbmRpZG8uICovXHJcbiAgQElucHV0KCdwLWhpZGUtc2VhcmNoJykgaGlkZVNlYXJjaD86IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgLyoqIFByb3ByaWVkYWRlIHF1ZSBxdWUgcmVjZWJlIGFzIGxpdGVyYWlzIGRlZmluaWRhcyBubyBjb21wb25lbnRlIGBwby1tdWx0aXNlbGVjdGAuICovXHJcbiAgQElucHV0KCdwLWxpdGVyYWxzJykgbGl0ZXJhbHM/OiBQb011bHRpc2VsZWN0TGl0ZXJhbHM7XHJcblxyXG4gIC8qKiBQbGFjZWhvbGRlciBkbyBjYW1wbyBkZSBwZXNxdWlzYS4gKi9cclxuICBASW5wdXQoJ3AtcGxhY2Vob2xkZXItc2VhcmNoJykgcGxhY2Vob2xkZXJTZWFyY2g6IHN0cmluZztcclxuXHJcbiAgLyoqIFByb3ByaWVkYWRlIHF1ZSByZWNlYmUgYSBsaXN0YSBkZSBvcMOnw7VlcyBzZWxlY2lvbmFkYXMuICovXHJcbiAgQElucHV0KCdwLXNlbGVjdGVkLW9wdGlvbnMnKSBzZWxlY3RlZE9wdGlvbnM6IEFycmF5PGFueT4gPSBbXTtcclxuXHJcbiAgLyoqIFByb3ByaWVkYWRlIHF1ZSByZWNlYmUgYSBsaXN0YSBjb20gdG9kYXMgYXMgb3DDp8O1ZXMuICovXHJcbiAgQElucHV0KCdwLW9wdGlvbnMnKSBvcHRpb25zOiBBcnJheTxQb011bHRpc2VsZWN0T3B0aW9uPiA9IFtdO1xyXG5cclxuICAvKiogUHJvcHJpZWRhZGUgcXVlIHJlY2ViZSBhIGxpc3RhIGRlIG9ww6fDtWVzIHF1ZSBkZXZlcsOjbyBzZXIgY3JpYWRhcyBubyBkcm9wZG93bi4gKi9cclxuICBASW5wdXQoJ3AtdmlzaWJsZS1vcHRpb25zJykgdmlzaWJsZU9wdGlvbnM6IEFycmF5PFBvTXVsdGlzZWxlY3RPcHRpb24+ID0gW107XHJcblxyXG4gIC8qKiBQcm9wcmllZGFkZSBxdWUgaW5kaWNhIHNlIG8gY2FtcG8gXCJTZWxlY2lvbmFyIHRvZG9zXCIgZGV2ZXLDoSBzZXIgZXNjb25kaWRvLiAqL1xyXG4gIEBJbnB1dCgncC1oaWRlLXNlbGVjdC1hbGwnKSBoaWRlU2VsZWN0QWxsPzogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAvKiogRXZlbnRvIGRpc3BhcmFkbyBhIGNhZGEgdGVjbGEgZGlnaXRhZGEgbmEgcGVzcXVpc2EuICovXHJcbiAgQE91dHB1dCgncC1jaGFuZ2Utc2VhcmNoJykgY2hhbmdlU2VhcmNoID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAvKiogRXZlbnRvIGRpc3BhcmFkbyBhIGNhZGEgYWx0ZXJhw6fDo28gbmEgbGlzdGEgZGFzIG9ww6fDtWVzIHNlbGVjaW9uYWRhcy4gKi9cclxuICBAT3V0cHV0KCdwLWNoYW5nZScpIGNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgLyoqXHJcbiAgICogRXZlbnRvIGRpc3BhcmFkbyBxdWFuZG8gZm9yIGRldGVjdGFkYSB1bWEgYcOnw6NvIHF1ZSBuZWNlc3NpdGUgZmVjaGFyIG8gZHJvcGRvd24uXHJcbiAgICogUG9yIGV4ZW1wbG8sIG5vIGNhc28gZGUgc2VyIHRlY2xhZG8gVEFCIGRlbnRybyBkbyBkcm9wZG93biwgZW50w6NvIMOpIGRpc3BhcmFkbyBlc3RlIGV2ZW50b1xyXG4gICAqIHBhcmEgbm90aWZpY2FyIG8gY29tcG9uZW50ZSBwcmluY2lwYWwgcXVlIGRldmUgZmVjaGFyIG8gZHJvcGRvd24uXHJcbiAgICovXHJcbiAgQE91dHB1dCgncC1jbG9zZS1kcm9wZG93bicpIGNsb3NlRHJvcGRvd24gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2NvbnRhaW5lcicsIHsgcmVhZDogRWxlbWVudFJlZiwgc3RhdGljOiB0cnVlIH0pIGNvbnRhaW5lcjogRWxlbWVudFJlZjtcclxuICBAVmlld0NoaWxkKCd1bEVsZW1lbnQnLCB7IHJlYWQ6IEVsZW1lbnRSZWYsIHN0YXRpYzogdHJ1ZSB9KSB1bEVsZW1lbnQ6IEVsZW1lbnRSZWY7XHJcbiAgQFZpZXdDaGlsZCgnc2VhcmNoRWxlbWVudCcpIHNlYXJjaEVsZW1lbnQ6IFBvTXVsdGlzZWxlY3RTZWFyY2hDb21wb25lbnQ7XHJcblxyXG4gIHNjcm9sbFRvcCA9IDA7XHJcbiAgc2hvdzogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICBnZXQgaGFzT3B0aW9ucygpIHtcclxuICAgIHJldHVybiAhIXRoaXMub3B0aW9ucz8ubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXHJcbiAgb25LZXlkb3duKGV2ZW50OiBhbnkpIHtcclxuICAgIGlmIChldmVudC5rZXlDb2RlID09PSA5KSB7XHJcbiAgICAgIHRoaXMuY2xvc2VEcm9wZG93bi5lbWl0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzY3JvbGxUbyhpbmRleCkge1xyXG4gICAgdGhpcy5zY3JvbGxUb3AgPSBpbmRleCA8PSAyID8gMCA6IGluZGV4ICogNDQgLSA4ODtcclxuICB9XHJcblxyXG4gIGlzU2VsZWN0ZWRJdGVtKG9wdGlvbjogUG9NdWx0aXNlbGVjdE9wdGlvbikge1xyXG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRPcHRpb25zLnNvbWUoc2VsZWN0ZWRJdGVtID0+IHNlbGVjdGVkSXRlbS52YWx1ZSA9PT0gb3B0aW9uLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIGNsaWNrSXRlbShjaGVjaywgb3B0aW9uKSB7XHJcbiAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkVmFsdWVzKGNoZWNrLCBvcHRpb24pO1xyXG5cclxuICAgIGlmICghdGhpcy5oaWRlU2VhcmNoKSB7XHJcbiAgICAgIHRoaXMuc2VhcmNoRWxlbWVudC5zZXRGb2N1cygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25DbGlja1NlbGVjdEFsbCgpIHtcclxuICAgIGNvbnN0IHNlbGVjdGVkVmFsdWVzID0gdGhpcy5zZWxlY3RlZE9wdGlvbnMubWFwKCh7IHZhbHVlIH0pID0+IHZhbHVlKTtcclxuXHJcbiAgICBpZiAodGhpcy5ldmVyeVZpc2libGVPcHRpb25zU2VsZWN0ZWQoc2VsZWN0ZWRWYWx1ZXMpKSB7XHJcbiAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb25zID0gW107XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNlbGVjdGVkT3B0aW9ucyA9IHRoaXMudW5pcXVlU2VsZWN0ZWRPcHRpb25zKHNlbGVjdGVkVmFsdWVzKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNoYW5nZS5lbWl0KHRoaXMuc2VsZWN0ZWRPcHRpb25zKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVNlbGVjdGVkVmFsdWVzKGNoZWNrZWQsIG9wdGlvbikge1xyXG4gICAgaWYgKGNoZWNrZWQpIHtcclxuICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbnMucHVzaChvcHRpb24pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbnMgPSB0aGlzLnNlbGVjdGVkT3B0aW9ucy5maWx0ZXIoc2VsZWN0ZWRPcHRpb24gPT4gc2VsZWN0ZWRPcHRpb24udmFsdWUgIT09IG9wdGlvbi52YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jaGFuZ2UuZW1pdCh0aGlzLnNlbGVjdGVkT3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBldmVyeVZpc2libGVPcHRpb25zU2VsZWN0ZWQoc2VsZWN0ZWRWYWx1ZXMpIHtcclxuICAgIHJldHVybiB0aGlzLnZpc2libGVPcHRpb25zLmV2ZXJ5KHZpc2libGVPcHRpb24gPT4gc2VsZWN0ZWRWYWx1ZXMuaW5jbHVkZXModmlzaWJsZU9wdGlvbi52YWx1ZSkpO1xyXG4gIH1cclxuXHJcbiAgc29tZVZpc2libGVPcHRpb25zU2VsZWN0ZWQoc2VsZWN0ZWRWYWx1ZXMpIHtcclxuICAgIHJldHVybiB0aGlzLnZpc2libGVPcHRpb25zLnNvbWUodmlzaWJsZU9wdGlvbiA9PiBzZWxlY3RlZFZhbHVlcy5pbmNsdWRlcyh2aXNpYmxlT3B0aW9uLnZhbHVlKSk7XHJcbiAgfVxyXG5cclxuICBnZXRTdGF0ZVNlbGVjdEFsbCgpIHtcclxuICAgIGNvbnN0IHNlbGVjdGVkVmFsdWVzID0gdGhpcy5zZWxlY3RlZE9wdGlvbnMubWFwKCh7IHZhbHVlIH0pID0+IHZhbHVlKTtcclxuXHJcbiAgICBpZiAodGhpcy5ldmVyeVZpc2libGVPcHRpb25zU2VsZWN0ZWQoc2VsZWN0ZWRWYWx1ZXMpKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLnNvbWVWaXNpYmxlT3B0aW9uc1NlbGVjdGVkKHNlbGVjdGVkVmFsdWVzKSkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNhbGxDaGFuZ2VTZWFyY2goZXZlbnQpIHtcclxuICAgIHRoaXMuY2hhbmdlU2VhcmNoLmVtaXQoZXZlbnQpO1xyXG4gIH1cclxuXHJcbiAgY29udHJvbFZpc2liaWxpdHkodG9PcGVuKSB7XHJcbiAgICB0aGlzLnNob3cgPSB0b09wZW47XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGlmICh0b09wZW4gJiYgdGhpcy5zZWFyY2hFbGVtZW50ICYmICF0aGlzLmhpZGVTZWFyY2gpIHtcclxuICAgICAgICB0aGlzLnNlYXJjaEVsZW1lbnQuc2V0Rm9jdXMoKTtcclxuICAgICAgICB0aGlzLnNlYXJjaEVsZW1lbnQuY2xlYW4oKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVuaXF1ZVNlbGVjdGVkT3B0aW9ucyhzZWxlY3RlZFZhbHVlcykge1xyXG4gICAgY29uc3QgbmV3U2VsZWN0ZWRPcHRpb25zID0gWy4uLnRoaXMuc2VsZWN0ZWRPcHRpb25zXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHZpc2libGVPcHRpb24gb2YgdGhpcy52aXNpYmxlT3B0aW9ucykge1xyXG4gICAgICBpZiAoIXNlbGVjdGVkVmFsdWVzLmluY2x1ZGVzKHZpc2libGVPcHRpb24udmFsdWUpKSB7XHJcbiAgICAgICAgbmV3U2VsZWN0ZWRPcHRpb25zLnB1c2godmlzaWJsZU9wdGlvbik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3U2VsZWN0ZWRPcHRpb25zO1xyXG4gIH1cclxufVxyXG4iXX0=