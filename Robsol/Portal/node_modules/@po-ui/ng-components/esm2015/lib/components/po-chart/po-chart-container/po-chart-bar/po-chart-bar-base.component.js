import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { PoChartMathsService } from '../../services/po-chart-maths.service';
export class PoChartBarBaseComponent {
    constructor(mathsService) {
        this.mathsService = mathsService;
        this.barClick = new EventEmitter();
        this.barHover = new EventEmitter();
        this._containerSize = {};
        this._range = {};
        this._series = [];
    }
    set range(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._range = value;
            this.calculateSeriesPathsCoordinates(this.containerSize, this._series, this._range);
        }
    }
    get range() {
        return this._range;
    }
    set containerSize(value) {
        this._containerSize = value;
        this.calculateSeriesPathsCoordinates(this._containerSize, this.series, this.range);
    }
    get containerSize() {
        return this._containerSize;
    }
    set series(seriesList) {
        const seriesDataArrayFilter = seriesList.filter(serie => Array.isArray(serie.data));
        if (seriesDataArrayFilter.length) {
            this._series = seriesDataArrayFilter;
            this.seriesGreaterLength = this.mathsService.seriesGreaterLength(this.series);
            this.calculateSeriesPathsCoordinates(this.containerSize, seriesDataArrayFilter, this.range);
        }
        else {
            this._series = [];
        }
    }
    get series() {
        return this._series;
    }
    onSerieBarClick(selectedItem) {
        this.barClick.emit(selectedItem);
    }
    onSerieBarHover(selectedItem) {
        this.barHover.emit(selectedItem);
    }
    trackBy(index) {
        return index;
    }
    calculateSeriesPathsCoordinates(containerSize, series, range) {
        this.seriesPathsCoordinates = series.map((serie, seriesIndex) => {
            if (Array.isArray(serie.data)) {
                let pathCoordinates = [];
                serie.data.forEach((data, serieDataIndex) => {
                    if (this.mathsService.verifyIfFloatOrInteger(data)) {
                        const coordinates = this.barCoordinates(seriesIndex, serieDataIndex, containerSize, range, data);
                        const category = this.serieCategory(serieDataIndex, this.categories);
                        const label = serie['label'];
                        const color = serie['color'];
                        const tooltip = serie['tooltip'];
                        const tooltipLabel = this.getTooltipLabel(data, label, tooltip);
                        pathCoordinates = [...pathCoordinates, { category, color, label, tooltipLabel, data, coordinates }];
                    }
                });
                return pathCoordinates;
            }
        });
    }
    getTooltipLabel(data, label, tooltipLabel) {
        const dataLabel = label ? `${label}: ` : '';
        const dataValue = data.toString();
        return tooltipLabel || `${dataLabel}${dataValue}`;
    }
    serieCategory(index, categories = []) {
        var _a;
        return (_a = categories[index]) !== null && _a !== void 0 ? _a : undefined;
    }
}
PoChartBarBaseComponent.decorators = [
    { type: Directive }
];
PoChartBarBaseComponent.ctorParameters = () => [
    { type: PoChartMathsService }
];
PoChartBarBaseComponent.propDecorators = {
    categories: [{ type: Input, args: ['p-categories',] }],
    barClick: [{ type: Output, args: ['p-bar-click',] }],
    barHover: [{ type: Output, args: ['p-bar-hover',] }],
    range: [{ type: Input, args: ['p-range',] }],
    containerSize: [{ type: Input, args: ['p-container-size',] }],
    series: [{ type: Input, args: ['p-series',] }]
};
//# sourceMappingURL=data:application/json;base64,