import { __decorate } from "tslib";
import { Input, Directive } from '@angular/core';
import { InputBoolean } from '../../decorators';
import { convertToInt } from './../../utils/util';
const poSlideIntervalDefault = 4000;
/**
 * @description
 *
 * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
 * customizar sua visualização utilizando a diretiva **[p-slide-content-template](/documentation/po-slide-content-template)**.
 *
 * #### Boas práticas:
 * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
 * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
 * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
 */
export class PoSlideBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Define a exibição das setas de navegação.
         *
         * @default `false`
         */
        this.hideArrows = false;
        this._interval = poSlideIntervalDefault;
    }
    /**
     * @optional
     *
     * @description
     * Altura do po-slide, caso seja slide com template customizado, não assume o valor `default`.
     *
     * @default `336`
     */
    set height(value) {
        this._height = convertToInt(value);
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
     *
     * @default `4000`
     */
    set interval(value) {
        this._interval = convertToInt(value, poSlideIntervalDefault);
        this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
    }
    get interval() {
        return this._interval;
    }
    /**
     * @description
     *
     * Array de imagens ou dados para o slide, pode ser de três formas:
     *
     * - Array implementando objetos da interface `PoSlideItem`:
     * ```
     * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
     * ```
     * - Array de `strings` com os caminhos das imagens:
     * ```
     * ['/assets/image-1', '/assets/image-2' ]
     * ```
     * - Array com lista de itens (para utilizar template):
     * ```
     * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
     * ```
     *
     * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
     */
    set slides(value) {
        this._slides = value;
        this.setSlideItems(value);
        if (value && value.length) {
            this.startSlide();
        }
    }
    get slides() {
        return this._slides;
    }
}
PoSlideBaseComponent.decorators = [
    { type: Directive }
];
PoSlideBaseComponent.propDecorators = {
    hideArrows: [{ type: Input, args: ['p-hide-arrows',] }],
    height: [{ type: Input, args: ['p-height',] }],
    interval: [{ type: Input, args: ['p-interval',] }],
    slides: [{ type: Input, args: ['p-slides',] }]
};
__decorate([
    InputBoolean()
], PoSlideBaseComponent.prototype, "hideArrows", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2xpZGUtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tc2xpZGUvcG8tc2xpZGUtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJbEQsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUM7QUFFcEM7Ozs7Ozs7Ozs7R0FVRztBQUVILE1BQU0sT0FBZ0Isb0JBQW9CO0lBRDFDO1FBRUU7Ozs7Ozs7O1dBUUc7UUFDcUMsZUFBVSxHQUFZLEtBQUssQ0FBQztRQUU1RCxjQUFTLEdBQVcsc0JBQXNCLENBQUM7SUE2RXJELENBQUM7SUF6RUM7Ozs7Ozs7T0FPRztJQUNILElBQXVCLE1BQU0sQ0FBQyxLQUFhO1FBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsSUFBeUIsUUFBUSxDQUFDLEtBQWE7UUFDN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hFLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BbUJHO0lBQ0gsSUFBdUIsTUFBTSxDQUFDLEtBQXdDO1FBQ3BFLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFMUIsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUN6QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDbkI7SUFDSCxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7OztZQWxGRixTQUFTOzs7eUJBV1AsS0FBSyxTQUFDLGVBQWU7cUJBY3JCLEtBQUssU0FBQyxVQUFVO3VCQWlCaEIsS0FBSyxTQUFDLFlBQVk7cUJBNkJsQixLQUFLLFNBQUMsVUFBVTs7QUE1RHVCO0lBQWYsWUFBWSxFQUFFO3dEQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IElucHV0Qm9vbGVhbiB9IGZyb20gJy4uLy4uL2RlY29yYXRvcnMnO1xyXG5pbXBvcnQgeyBjb252ZXJ0VG9JbnQgfSBmcm9tICcuLy4uLy4uL3V0aWxzL3V0aWwnO1xyXG5cclxuaW1wb3J0IHsgUG9TbGlkZUl0ZW0gfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tc2xpZGUtaXRlbS5pbnRlcmZhY2UnO1xyXG5cclxuY29uc3QgcG9TbGlkZUludGVydmFsRGVmYXVsdCA9IDQwMDA7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIENvbXBvbmVudGUgZGUgc2xpZGUgcGFyYSB2aXN1YWxpemHDp8OjbyBlIGNvbnRyb2xlIGRlIGVsZW1lbnRvcyBkZSBmb3JtYSBjw61jbGljYS4gRXhpYmUgdW0gY29uanVudG8gZGUgaW1hZ2VucyBvdSBkYWRvcyBxdWUgcGVybWl0ZW1cclxuICogY3VzdG9taXphciBzdWEgdmlzdWFsaXphw6fDo28gdXRpbGl6YW5kbyBhIGRpcmV0aXZhICoqW3Atc2xpZGUtY29udGVudC10ZW1wbGF0ZV0oL2RvY3VtZW50YXRpb24vcG8tc2xpZGUtY29udGVudC10ZW1wbGF0ZSkqKi5cclxuICpcclxuICogIyMjIyBCb2FzIHByw6F0aWNhczpcclxuICogLSBVdGlsaXphciBpbWFnZW5zIG5vIHNsaWRlLCBtZXNtbyBxdWFuZG8gcG9zc3VpIGNvbnRlw7pkbyBwZXJzb25hbGl6YWRvLlxyXG4gKiAtIEV2aXRhciB1dGlsaXphciBhcGVuYXMgdW0gc2xpZGUgaXNvbGFkbywgdXRpbGl6ZSBwZWxvIG1lbm9zIGRvaXMuXHJcbiAqIC0gRXZpdGFyIHV0aWxpemFyIG1haXMgZGUgNSBzbGlkZXMsIHBvaXMgYSBpZGVpYSBkbyBjb21wb25lbnRlIMOpIGRlc3RhY2FyIGFwZW5hcyBpbmZvcm1hw6fDtWVzIGltcG9ydGFudGVzLlxyXG4gKi9cclxuQERpcmVjdGl2ZSgpXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQb1NsaWRlQmFzZUNvbXBvbmVudCB7XHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIERlZmluZSBhIGV4aWJpw6fDo28gZGFzIHNldGFzIGRlIG5hdmVnYcOnw6NvLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1oaWRlLWFycm93cycpIEBJbnB1dEJvb2xlYW4oKSBoaWRlQXJyb3dzOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIHByaXZhdGUgX2ludGVydmFsOiBudW1iZXIgPSBwb1NsaWRlSW50ZXJ2YWxEZWZhdWx0O1xyXG4gIHByaXZhdGUgX2hlaWdodD86IG51bWJlcjtcclxuICBwcml2YXRlIF9zbGlkZXM6IEFycmF5PFBvU2xpZGVJdGVtIHwgc3RyaW5nIHwgYW55PjtcclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBBbHR1cmEgZG8gcG8tc2xpZGUsIGNhc28gc2VqYSBzbGlkZSBjb20gdGVtcGxhdGUgY3VzdG9taXphZG8sIG7Do28gYXNzdW1lIG8gdmFsb3IgYGRlZmF1bHRgLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgYDMzNmBcclxuICAgKi9cclxuICBASW5wdXQoJ3AtaGVpZ2h0Jykgc2V0IGhlaWdodCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLl9oZWlnaHQgPSBjb252ZXJ0VG9JbnQodmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBWYWxvciBlbSBtaWxpc3NlZ3VuZG9zIHF1ZSBkZWZpbmUgbyB0ZW1wbyBkZSB0cm9jYSBkb3Mgc2xpZGVzLCBjYXNvIG8gdmFsb3Igc2VqYSBtZW5vciBxdWUgYDEwMDBgIG9zIHNsaWRlcyBuw6NvIHRyb2NhbSBhdXRvbWF0aWNhbWVudGUuXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCBgNDAwMGBcclxuICAgKi9cclxuICBASW5wdXQoJ3AtaW50ZXJ2YWwnKSBzZXQgaW50ZXJ2YWwodmFsdWU6IG51bWJlcikge1xyXG4gICAgdGhpcy5faW50ZXJ2YWwgPSBjb252ZXJ0VG9JbnQodmFsdWUsIHBvU2xpZGVJbnRlcnZhbERlZmF1bHQpO1xyXG4gICAgdGhpcy5faW50ZXJ2YWwgPj0gMTAwMCA/IHRoaXMuc3RhcnRJbnRlcnZhbCgpIDogdGhpcy5jYW5jZWxJbnRlcnZhbCgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGludGVydmFsKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5faW50ZXJ2YWw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIEFycmF5IGRlIGltYWdlbnMgb3UgZGFkb3MgcGFyYSBvIHNsaWRlLCBwb2RlIHNlciBkZSB0csOqcyBmb3JtYXM6XHJcbiAgICpcclxuICAgKiAtIEFycmF5IGltcGxlbWVudGFuZG8gb2JqZXRvcyBkYSBpbnRlcmZhY2UgYFBvU2xpZGVJdGVtYDpcclxuICAgKiBgYGBcclxuICAgKiBbeyBpbWFnZTogJy9hc3NldHMvaW1hZ2UtMScsIGFjdGlvbjogJ2ltYWdlQ2xpY2suYmluZCh0aGlzKSd9LCB7IGltYWdlOiAnL2Fzc2V0cy9pbWFnZS0yJyB9XVxyXG4gICAqIGBgYFxyXG4gICAqIC0gQXJyYXkgZGUgYHN0cmluZ3NgIGNvbSBvcyBjYW1pbmhvcyBkYXMgaW1hZ2VuczpcclxuICAgKiBgYGBcclxuICAgKiBbJy9hc3NldHMvaW1hZ2UtMScsICcvYXNzZXRzL2ltYWdlLTInIF1cclxuICAgKiBgYGBcclxuICAgKiAtIEFycmF5IGNvbSBsaXN0YSBkZSBpdGVucyAocGFyYSB1dGlsaXphciB0ZW1wbGF0ZSk6XHJcbiAgICogYGBgXHJcbiAgICogW3sgbGFiZWw6ICcxJywgaW1nOiAnL2Fzc2V0cy9pbWFnZS0xJyB9LCB7IGxhYmVsOiAnMicsIGltZzogJy9hc3NldHMvaW1hZ2UtMScgfV1cclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqID4gQXMgc2V0YXMgZGUgbmF2ZWdhw6fDo28gZSBvIGNvbnRyb2xlIGNvbSBjw61yY3Vsb3MgYXBlbmFzIHNlcsOjbyByZW5kZXJpemFkb3MgY2FzbyBwb3NzdWEgbWFpcyBkZSB1bSBzbGlkZS5cclxuICAgKi9cclxuICBASW5wdXQoJ3Atc2xpZGVzJykgc2V0IHNsaWRlcyh2YWx1ZTogQXJyYXk8UG9TbGlkZUl0ZW0gfCBzdHJpbmcgfCBhbnk+KSB7XHJcbiAgICB0aGlzLl9zbGlkZXMgPSB2YWx1ZTtcclxuICAgIHRoaXMuc2V0U2xpZGVJdGVtcyh2YWx1ZSk7XHJcblxyXG4gICAgaWYgKHZhbHVlICYmIHZhbHVlLmxlbmd0aCkge1xyXG4gICAgICB0aGlzLnN0YXJ0U2xpZGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBzbGlkZXMoKTogQXJyYXk8UG9TbGlkZUl0ZW0gfCBzdHJpbmcgfCBhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLl9zbGlkZXM7XHJcbiAgfVxyXG5cclxuICBhYnN0cmFjdCBzZXRTbGlkZUhlaWdodChoZWlnaHQ6IG51bWJlcik6IHZvaWQ7XHJcblxyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBjYW5jZWxJbnRlcnZhbCgpOiB2b2lkO1xyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzZXRTbGlkZUl0ZW1zKHZhbHVlOiBBcnJheTxQb1NsaWRlSXRlbSB8IHN0cmluZyB8IGFueT4pOiB2b2lkO1xyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzdGFydFNsaWRlKCk6IHZvaWQ7XHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHN0YXJ0SW50ZXJ2YWwoKTogdm9pZDtcclxufVxyXG4iXX0=