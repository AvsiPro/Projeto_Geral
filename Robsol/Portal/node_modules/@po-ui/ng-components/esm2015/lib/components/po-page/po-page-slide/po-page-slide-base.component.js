import { __decorate } from "tslib";
import { Directive, Input } from '@angular/core';
import { InputBoolean } from '../../../decorators';
/**
 * @description
 *
 * O componente `po-page-slide` é utilizado para incluir conteúdos secundários
 * adicionando controles e navegações adicionais, mas mantendo o usuário na
 * página principal.
 *
 * Este componente é ativado a partir do método `#open()` e pode ser  encerrado
 * através do botão que encontra-se no cabeçalho do mesmo ou através do método
 * `#close()`.
 *
 * > Para o correto funcionamento do componente `po-page-slide`, deve ser
 * > importado o módulo `BrowserAnimationsModule` no módulo principal da sua
 * > aplicação.
 */
export class PoPageSlideBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Oculta o botão de encerramento da página.
         *
         * Esta opção só é possível se a propriedade `p-click-out` estiver habilitada.
         *
         * @default `false`
         */
        this.hideClose = false;
        /**
         * @optional
         *
         * @description
         *
         * Define se permite o encerramento da página ao clicar fora da mesma.
         *
         * @default `false`
         */
        this.clickOut = false;
        // Controla se a página está ou não oculta, por padrão é oculto.
        this.hidden = true;
        this._size = 'md';
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho da página.
     *
     * Valores válidos:
     *  - `sm` (pequeno)
     *  - `md` (médio)
     *  - `lg` (grande)
     *  - `xl` (extra-grande)
     *  - `auto` (automático)
     *
     * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
     *
     * @default `md`
     */
    set size(value) {
        const sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
        this._size = sizes.indexOf(value) > -1 ? value : 'md';
    }
    get size() {
        return this._size;
    }
    /**
     * Ativa a visualização da página.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo
     * ser utilizado o `ViewChild` da seguinte forma:
     *
     * ```typescript
     * import { PoPageSlideComponent } from '@po/ng-components';
     *
     * ...
     *
     * @ViewChild(PoPageSlideComponent, { static: true }) pageSlide: PoPageSlideComponent;
     *
     * public openPage() {
     *   this.pageSlide.open();
     * }
     * ```
     */
    open() {
        // Evita com que a página seja aberta sem que seja possível fechá-la.
        if (this.hideClose && !this.clickOut) {
            this.hideClose = false;
        }
        this.hidden = false;
    }
    /**
     * Encerra a visualização da página.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo
     * ser utilizado o `ViewChild` da seguinte forma:
     *
     * ```typescript
     * import { PoPageSlideComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoPageSlideComponent, { static: true }) pageSlide: PoPageSlideComponent;
     *
     * public closePage() {
     *   this.pageSlide.close();
     * }
     * ```
     */
    close() {
        this.hidden = true;
    }
}
PoPageSlideBaseComponent.decorators = [
    { type: Directive }
];
PoPageSlideBaseComponent.propDecorators = {
    title: [{ type: Input, args: ['p-title',] }],
    subtitle: [{ type: Input, args: ['p-subtitle',] }],
    hideClose: [{ type: Input, args: ['p-hide-close',] }],
    clickOut: [{ type: Input, args: ['p-click-out',] }],
    size: [{ type: Input, args: ['p-size',] }]
};
__decorate([
    InputBoolean()
], PoPageSlideBaseComponent.prototype, "hideClose", void 0);
__decorate([
    InputBoolean()
], PoPageSlideBaseComponent.prototype, "clickOut", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1zbGlkZS1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1wYWdlL3BvLXBhZ2Utc2xpZGUvcG8tcGFnZS1zbGlkZS1iYXNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRW5EOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBRUgsTUFBTSxPQUFPLHdCQUF3QjtJQURyQztRQWdCRTs7Ozs7Ozs7OztXQVVHO1FBQ29DLGNBQVMsR0FBYSxLQUFLLENBQUM7UUFFbkU7Ozs7Ozs7O1dBUUc7UUFDbUMsYUFBUSxHQUFhLEtBQUssQ0FBQztRQUVqRSxnRUFBZ0U7UUFDekQsV0FBTSxHQUFHLElBQUksQ0FBQztRQUViLFVBQUssR0FBRyxJQUFJLENBQUM7SUE2RXZCLENBQUM7SUEzRUM7Ozs7Ozs7Ozs7Ozs7Ozs7O09BaUJHO0lBQ0gsSUFBcUIsSUFBSSxDQUFDLEtBQWE7UUFDckMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN4RCxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FpQkc7SUFDSSxJQUFJO1FBQ1QscUVBQXFFO1FBQ3JFLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7U0FDeEI7UUFFRCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7O09BaUJHO0lBQ0ksS0FBSztRQUNWLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7OztZQXZIRixTQUFTOzs7b0JBT1AsS0FBSyxTQUFDLFNBQVM7dUJBT2YsS0FBSyxTQUFDLFlBQVk7d0JBYWxCLEtBQUssU0FBQyxjQUFjO3VCQVdwQixLQUFLLFNBQUMsYUFBYTttQkF5Qm5CLEtBQUssU0FBQyxRQUFROztBQXBDd0I7SUFBZixZQUFZLEVBQUU7MkRBQTZCO0FBVzdCO0lBQWYsWUFBWSxFQUFFOzBEQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IElucHV0Qm9vbGVhbiB9IGZyb20gJy4uLy4uLy4uL2RlY29yYXRvcnMnO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBPIGNvbXBvbmVudGUgYHBvLXBhZ2Utc2xpZGVgIMOpIHV0aWxpemFkbyBwYXJhIGluY2x1aXIgY29udGXDumRvcyBzZWN1bmTDoXJpb3NcclxuICogYWRpY2lvbmFuZG8gY29udHJvbGVzIGUgbmF2ZWdhw6fDtWVzIGFkaWNpb25haXMsIG1hcyBtYW50ZW5kbyBvIHVzdcOhcmlvIG5hXHJcbiAqIHDDoWdpbmEgcHJpbmNpcGFsLlxyXG4gKlxyXG4gKiBFc3RlIGNvbXBvbmVudGUgw6kgYXRpdmFkbyBhIHBhcnRpciBkbyBtw6l0b2RvIGAjb3BlbigpYCBlIHBvZGUgc2VyICBlbmNlcnJhZG9cclxuICogYXRyYXbDqXMgZG8gYm90w6NvIHF1ZSBlbmNvbnRyYS1zZSBubyBjYWJlw6dhbGhvIGRvIG1lc21vIG91IGF0cmF2w6lzIGRvIG3DqXRvZG9cclxuICogYCNjbG9zZSgpYC5cclxuICpcclxuICogPiBQYXJhIG8gY29ycmV0byBmdW5jaW9uYW1lbnRvIGRvIGNvbXBvbmVudGUgYHBvLXBhZ2Utc2xpZGVgLCBkZXZlIHNlclxyXG4gKiA+IGltcG9ydGFkbyBvIG3Ds2R1bG8gYEJyb3dzZXJBbmltYXRpb25zTW9kdWxlYCBubyBtw7NkdWxvIHByaW5jaXBhbCBkYSBzdWFcclxuICogPiBhcGxpY2HDp8Ojby5cclxuICovXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgY2xhc3MgUG9QYWdlU2xpZGVCYXNlQ29tcG9uZW50IHtcclxuICAvKipcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIFTDrXR1bG8gZGEgcMOhZ2luYS5cclxuICAgKi9cclxuICBASW5wdXQoJ3AtdGl0bGUnKSB0aXRsZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIFN1YnTDrXR1bG8gZGEgcMOhZ2luYS5cclxuICAgKi9cclxuICBASW5wdXQoJ3Atc3VidGl0bGUnKSBzdWJ0aXRsZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIE9jdWx0YSBvIGJvdMOjbyBkZSBlbmNlcnJhbWVudG8gZGEgcMOhZ2luYS5cclxuICAgKlxyXG4gICAqIEVzdGEgb3DDp8OjbyBzw7Mgw6kgcG9zc8OtdmVsIHNlIGEgcHJvcHJpZWRhZGUgYHAtY2xpY2stb3V0YCBlc3RpdmVyIGhhYmlsaXRhZGEuXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICovXHJcbiAgQElucHV0KCdwLWhpZGUtY2xvc2UnKSBASW5wdXRCb29sZWFuKCkgaGlkZUNsb3NlPzogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAvKipcclxuICAgKiBAb3B0aW9uYWxcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogRGVmaW5lIHNlIHBlcm1pdGUgbyBlbmNlcnJhbWVudG8gZGEgcMOhZ2luYSBhbyBjbGljYXIgZm9yYSBkYSBtZXNtYS5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcclxuICAgKi9cclxuICBASW5wdXQoJ3AtY2xpY2stb3V0JykgQElucHV0Qm9vbGVhbigpIGNsaWNrT3V0PzogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAvLyBDb250cm9sYSBzZSBhIHDDoWdpbmEgZXN0w6Egb3UgbsOjbyBvY3VsdGEsIHBvciBwYWRyw6NvIMOpIG9jdWx0by5cclxuICBwdWJsaWMgaGlkZGVuID0gdHJ1ZTtcclxuXHJcbiAgcHJpdmF0ZSBfc2l6ZSA9ICdtZCc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBEZWZpbmUgbyB0YW1hbmhvIGRhIHDDoWdpbmEuXHJcbiAgICpcclxuICAgKiBWYWxvcmVzIHbDoWxpZG9zOlxyXG4gICAqICAtIGBzbWAgKHBlcXVlbm8pXHJcbiAgICogIC0gYG1kYCAobcOpZGlvKVxyXG4gICAqICAtIGBsZ2AgKGdyYW5kZSlcclxuICAgKiAgLSBgeGxgIChleHRyYS1ncmFuZGUpXHJcbiAgICogIC0gYGF1dG9gIChhdXRvbcOhdGljbylcclxuICAgKlxyXG4gICAqID4gVG9kYXMgYXMgb3DDp8O1ZXMgZGUgdGFtYW5obyBwb3NzdWVtIHVtYSBsYXJndXJhIG3DoXhpbWEgZGUgKio3NjhweCoqLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgYG1kYFxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1zaXplJykgc2V0IHNpemUodmFsdWU6IHN0cmluZykge1xyXG4gICAgY29uc3Qgc2l6ZXMgPSBbJ3NtJywgJ21kJywgJ2xnJywgJ3hsJywgJ2F1dG8nXTtcclxuICAgIHRoaXMuX3NpemUgPSBzaXplcy5pbmRleE9mKHZhbHVlKSA+IC0xID8gdmFsdWUgOiAnbWQnO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHNpemUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEF0aXZhIGEgdmlzdWFsaXphw6fDo28gZGEgcMOhZ2luYS5cclxuICAgKlxyXG4gICAqIFBhcmEgdXRpbGl6w6EtbGEgw6kgbmVjZXNzw6FyaW8gdGVyIGEgaW5zdMOibmNpYSBkbyBjb21wb25lbnRlIG5vIERPTSwgcG9kZW5kb1xyXG4gICAqIHNlciB1dGlsaXphZG8gbyBgVmlld0NoaWxkYCBkYSBzZWd1aW50ZSBmb3JtYTpcclxuICAgKlxyXG4gICAqIGBgYHR5cGVzY3JpcHRcclxuICAgKiBpbXBvcnQgeyBQb1BhZ2VTbGlkZUNvbXBvbmVudCB9IGZyb20gJ0Bwby9uZy1jb21wb25lbnRzJztcclxuICAgKlxyXG4gICAqIC4uLlxyXG4gICAqXHJcbiAgICogQFZpZXdDaGlsZChQb1BhZ2VTbGlkZUNvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSkgcGFnZVNsaWRlOiBQb1BhZ2VTbGlkZUNvbXBvbmVudDtcclxuICAgKlxyXG4gICAqIHB1YmxpYyBvcGVuUGFnZSgpIHtcclxuICAgKiAgIHRoaXMucGFnZVNsaWRlLm9wZW4oKTtcclxuICAgKiB9XHJcbiAgICogYGBgXHJcbiAgICovXHJcbiAgcHVibGljIG9wZW4oKSB7XHJcbiAgICAvLyBFdml0YSBjb20gcXVlIGEgcMOhZ2luYSBzZWphIGFiZXJ0YSBzZW0gcXVlIHNlamEgcG9zc8OtdmVsIGZlY2jDoS1sYS5cclxuICAgIGlmICh0aGlzLmhpZGVDbG9zZSAmJiAhdGhpcy5jbGlja091dCkge1xyXG4gICAgICB0aGlzLmhpZGVDbG9zZSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuaGlkZGVuID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFbmNlcnJhIGEgdmlzdWFsaXphw6fDo28gZGEgcMOhZ2luYS5cclxuICAgKlxyXG4gICAqIFBhcmEgdXRpbGl6w6EtbGEgw6kgbmVjZXNzw6FyaW8gdGVyIGEgaW5zdMOibmNpYSBkbyBjb21wb25lbnRlIG5vIERPTSwgcG9kZW5kb1xyXG4gICAqIHNlciB1dGlsaXphZG8gbyBgVmlld0NoaWxkYCBkYSBzZWd1aW50ZSBmb3JtYTpcclxuICAgKlxyXG4gICAqIGBgYHR5cGVzY3JpcHRcclxuICAgKiBpbXBvcnQgeyBQb1BhZ2VTbGlkZUNvbXBvbmVudCB9IGZyb20gJ0Bwby11aS9uZy1jb21wb25lbnRzJztcclxuICAgKlxyXG4gICAqIC4uLlxyXG4gICAqXHJcbiAgICogQFZpZXdDaGlsZChQb1BhZ2VTbGlkZUNvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSkgcGFnZVNsaWRlOiBQb1BhZ2VTbGlkZUNvbXBvbmVudDtcclxuICAgKlxyXG4gICAqIHB1YmxpYyBjbG9zZVBhZ2UoKSB7XHJcbiAgICogICB0aGlzLnBhZ2VTbGlkZS5jbG9zZSgpO1xyXG4gICAqIH1cclxuICAgKiBgYGBcclxuICAgKi9cclxuICBwdWJsaWMgY2xvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmhpZGRlbiA9IHRydWU7XHJcbiAgfVxyXG59XHJcbiJdfQ==