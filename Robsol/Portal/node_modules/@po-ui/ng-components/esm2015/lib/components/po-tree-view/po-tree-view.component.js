import { ChangeDetectionStrategy, Component } from '@angular/core';
import { PoTreeViewBaseComponent } from './po-tree-view-base.component';
import { PoTreeViewService } from './services/po-tree-view.service';
/**
 * @docsExtends PoTreeViewBaseComponent
 *
 * @example
 *
 * <example name="po-tree-view-basic" title="PO Tree View Basic">
 *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.html"> </file>
 *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-labs" title="PO Tree View Labs">
 *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.html"> </file>
 *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-folder-structure" title="PO Tree View - Folder Structure">
 *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.html"> </file>
 *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-supermarket" title="PO Tree View - Supermarket">
 *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.html"> </file>
 *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.ts"> </file>
 * </example>
 */
export class PoTreeViewComponent extends PoTreeViewBaseComponent {
    constructor(treeViewService) {
        super();
        this.treeViewService = treeViewService;
    }
    get hasItems() {
        return !!(this.items && this.items.length);
    }
    ngOnInit() {
        this.treeViewService.onExpand().subscribe((treeViewItem) => {
            this.emitExpanded(treeViewItem);
        });
        this.treeViewService.onSelect().subscribe((treeViewItem) => {
            this.emitSelected(treeViewItem);
        });
    }
    trackByFunction(index) {
        return index;
    }
}
PoTreeViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-tree-view',
                template: "<po-container *ngIf=\"hasItems\" p-no-padding p-no-shadow>\r\n  <ul class=\"po-tree-view\">\r\n    <po-tree-view-item *ngFor=\"let item of items; trackBy: trackByFunction\" [p-item]=\"item\" [p-selectable]=\"selectable\">\r\n    </po-tree-view-item>\r\n  </ul>\r\n</po-container>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [PoTreeViewService]
            },] }
];
PoTreeViewComponent.ctorParameters = () => [
    { type: PoTreeViewService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdHJlZS12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby10cmVlLXZpZXcvcG8tdHJlZS12aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBRTNFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXhFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRXBFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3Qkc7QUFPSCxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsdUJBQXVCO0lBSzlELFlBQW9CLGVBQWtDO1FBQ3BELEtBQUssRUFBRSxDQUFDO1FBRFUsb0JBQWUsR0FBZixlQUFlLENBQW1CO0lBRXRELENBQUM7SUFORCxJQUFJLFFBQVE7UUFDVixPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBTUQsUUFBUTtRQUNOLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsWUFBNEIsRUFBRSxFQUFFO1lBQ3pFLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQTRCLEVBQUUsRUFBRTtZQUN6RSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUFhO1FBQzNCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7O1lBM0JGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsdVNBQTRDO2dCQUM1QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUM7YUFDL0I7OztZQWhDUSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFBvVHJlZVZpZXdCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9wby10cmVlLXZpZXctYmFzZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBQb1RyZWVWaWV3SXRlbSB9IGZyb20gJy4vcG8tdHJlZS12aWV3LWl0ZW0vcG8tdHJlZS12aWV3LWl0ZW0uaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9UcmVlVmlld1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3BvLXRyZWUtdmlldy5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBAZG9jc0V4dGVuZHMgUG9UcmVlVmlld0Jhc2VDb21wb25lbnRcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogPGV4YW1wbGUgbmFtZT1cInBvLXRyZWUtdmlldy1iYXNpY1wiIHRpdGxlPVwiUE8gVHJlZSBWaWV3IEJhc2ljXCI+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRyZWUtdmlldy1iYXNpYy9zYW1wbGUtcG8tdHJlZS12aWV3LWJhc2ljLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdHJlZS12aWV3LWJhc2ljL3NhbXBsZS1wby10cmVlLXZpZXctYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tdHJlZS12aWV3LWxhYnNcIiB0aXRsZT1cIlBPIFRyZWUgVmlldyBMYWJzXCI+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRyZWUtdmlldy1sYWJzL3NhbXBsZS1wby10cmVlLXZpZXctbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRyZWUtdmlldy1sYWJzL3NhbXBsZS1wby10cmVlLXZpZXctbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxyXG4gKiA8L2V4YW1wbGU+XHJcbiAqXHJcbiAqIDxleGFtcGxlIG5hbWU9XCJwby10cmVlLXZpZXctZm9sZGVyLXN0cnVjdHVyZVwiIHRpdGxlPVwiUE8gVHJlZSBWaWV3IC0gRm9sZGVyIFN0cnVjdHVyZVwiPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10cmVlLXZpZXctZm9sZGVyLXN0cnVjdHVyZS9zYW1wbGUtcG8tdHJlZS12aWV3LWZvbGRlci1zdHJ1Y3R1cmUuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10cmVlLXZpZXctZm9sZGVyLXN0cnVjdHVyZS9zYW1wbGUtcG8tdHJlZS12aWV3LWZvbGRlci1zdHJ1Y3R1cmUuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tdHJlZS12aWV3LXN1cGVybWFya2V0XCIgdGl0bGU9XCJQTyBUcmVlIFZpZXcgLSBTdXBlcm1hcmtldFwiPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10cmVlLXZpZXctc3VwZXJtYXJrZXQvc2FtcGxlLXBvLXRyZWUtdmlldy1zdXBlcm1hcmtldC5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRyZWUtdmlldy1zdXBlcm1hcmtldC9zYW1wbGUtcG8tdHJlZS12aWV3LXN1cGVybWFya2V0LmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XHJcbiAqIDwvZXhhbXBsZT5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAncG8tdHJlZS12aWV3JyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdHJlZS12aWV3LmNvbXBvbmVudC5odG1sJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBwcm92aWRlcnM6IFtQb1RyZWVWaWV3U2VydmljZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIFBvVHJlZVZpZXdDb21wb25lbnQgZXh0ZW5kcyBQb1RyZWVWaWV3QmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgZ2V0IGhhc0l0ZW1zKCkge1xyXG4gICAgcmV0dXJuICEhKHRoaXMuaXRlbXMgJiYgdGhpcy5pdGVtcy5sZW5ndGgpO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmVlVmlld1NlcnZpY2U6IFBvVHJlZVZpZXdTZXJ2aWNlKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLnRyZWVWaWV3U2VydmljZS5vbkV4cGFuZCgpLnN1YnNjcmliZSgodHJlZVZpZXdJdGVtOiBQb1RyZWVWaWV3SXRlbSkgPT4ge1xyXG4gICAgICB0aGlzLmVtaXRFeHBhbmRlZCh0cmVlVmlld0l0ZW0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy50cmVlVmlld1NlcnZpY2Uub25TZWxlY3QoKS5zdWJzY3JpYmUoKHRyZWVWaWV3SXRlbTogUG9UcmVlVmlld0l0ZW0pID0+IHtcclxuICAgICAgdGhpcy5lbWl0U2VsZWN0ZWQodHJlZVZpZXdJdGVtKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdHJhY2tCeUZ1bmN0aW9uKGluZGV4OiBudW1iZXIpIHtcclxuICAgIHJldHVybiBpbmRleDtcclxuICB9XHJcbn1cclxuIl19