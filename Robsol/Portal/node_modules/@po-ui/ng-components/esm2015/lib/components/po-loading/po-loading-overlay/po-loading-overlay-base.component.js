import { Input, Directive } from '@angular/core';
import { convertToBoolean } from './../../../utils/util';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
export const poLoadingOverlayLiteralsDefault = {
    en: {
        loading: 'Loading'
    },
    es: {
        loading: 'Cargando'
    },
    pt: {
        loading: 'Carregando'
    },
    ru: {
        loading: 'погрузка'
    }
};
/**
 *
 * @description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 */
export class PoLoadingOverlayBaseComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this._screenLock = false;
        this.text = this.getTextDefault();
    }
    /**
     * @optional
     *
     * @description
     *
     * Define se o *overlay* será aplicado a um *container* ou a página inteira.
     *
     * Para utilizar o componente como um *container*, o elemento pai deverá receber uma posição relativa, por exemplo:
     *
     * ```
     * <div style="position: relative">
     *
     *  <po-chart [p-series]="[{ value: 10, category: 'Example' }]">
     *  </po-chart>
     *
     *  <po-loading-overlay>
     *  </po-loading-overlay>
     * </div>
     * ```
     *
     * @default `false`
     */
    set screenLock(screenLock) {
        this._screenLock = convertToBoolean(screenLock);
    }
    get screenLock() {
        return this._screenLock;
    }
    /**
     * @optional
     *
     * @description
     *
     * Texto a ser exibido no componente.
     *
     * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
     *
     * @default `Carregando`
     */
    set text(value) {
        this._text = value || this.getTextDefault();
    }
    get text() {
        return this._text;
    }
    getTextDefault() {
        const language = this.languageService.getShortLanguage();
        return poLoadingOverlayLiteralsDefault[language].loading;
    }
}
PoLoadingOverlayBaseComponent.decorators = [
    { type: Directive }
];
PoLoadingOverlayBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoLoadingOverlayBaseComponent.propDecorators = {
    screenLock: [{ type: Input, args: ['p-screen-lock',] }],
    text: [{ type: Input, args: ['p-text',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9hZGluZy1vdmVybGF5LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWxvYWRpbmcvcG8tbG9hZGluZy1vdmVybGF5L3BvLWxvYWRpbmctb3ZlcmxheS1iYXNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV6RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUl0RixNQUFNLENBQUMsTUFBTSwrQkFBK0IsR0FBRztJQUM3QyxFQUFFLEVBQTRCO1FBQzVCLE9BQU8sRUFBRSxTQUFTO0tBQ25CO0lBQ0QsRUFBRSxFQUE0QjtRQUM1QixPQUFPLEVBQUUsVUFBVTtLQUNwQjtJQUNELEVBQUUsRUFBNEI7UUFDNUIsT0FBTyxFQUFFLFlBQVk7S0FDdEI7SUFDRCxFQUFFLEVBQTRCO1FBQzVCLE9BQU8sRUFBRSxVQUFVO0tBQ3BCO0NBQ0YsQ0FBQztBQUVGOzs7Ozs7R0FNRztBQUVILE1BQU0sT0FBTyw2QkFBNkI7SUFxRHhDLFlBQW9CLGVBQWtDO1FBQWxDLG9CQUFlLEdBQWYsZUFBZSxDQUFtQjtRQXBEOUMsZ0JBQVcsR0FBYSxLQUFLLENBQUM7UUFxRHBDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFuREQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXFCRztJQUNILElBQTRCLFVBQVUsQ0FBQyxVQUFtQjtRQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7SUFDSCxJQUFxQixJQUFJLENBQUMsS0FBYTtRQUNyQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDOUMsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBTU8sY0FBYztRQUNwQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFFekQsT0FBTywrQkFBK0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDM0QsQ0FBQzs7O1lBOURGLFNBQVM7OztZQTFCRCxpQkFBaUI7Ozt5QkFxRHZCLEtBQUssU0FBQyxlQUFlO21CQW1CckIsS0FBSyxTQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi8uLi8uLi8uLi91dGlscy91dGlsJztcclxuXHJcbmltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBQb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHMgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tbG9hZGluZy1vdmVybGF5LWxpdGVyYWxzLmludGVyZmFjZSc7XHJcblxyXG5leHBvcnQgY29uc3QgcG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzRGVmYXVsdCA9IHtcclxuICBlbjogPFBvTG9hZGluZ092ZXJsYXlMaXRlcmFscz57XHJcbiAgICBsb2FkaW5nOiAnTG9hZGluZydcclxuICB9LFxyXG4gIGVzOiA8UG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzPntcclxuICAgIGxvYWRpbmc6ICdDYXJnYW5kbydcclxuICB9LFxyXG4gIHB0OiA8UG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzPntcclxuICAgIGxvYWRpbmc6ICdDYXJyZWdhbmRvJ1xyXG4gIH0sXHJcbiAgcnU6IDxQb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHM+e1xyXG4gICAgbG9hZGluZzogJ9C/0L7Qs9GA0YPQt9C60LAnXHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBFc3RlIGNvbXBvbmVudGUgbW9zdHJhIGFvIHVzdcOhcmlvIHVtYSBpbWFnZW0gZGUgX2xvYWRpbmdfIGUgYmxvcXVlaWEgYSBww6FnaW5hIGludGVpcmEgb3UgbyBjb250YWluZXIgZXNjb2xoaWRvLFxyXG4gKiBlbnF1YW50byBhZ3VhcmRhIGEgcmVzcG9zdGEgZGUgYWxndW1hIHJlcXVpc2nDp8Ojby5cclxuICovXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgY2xhc3MgUG9Mb2FkaW5nT3ZlcmxheUJhc2VDb21wb25lbnQge1xyXG4gIHByaXZhdGUgX3NjcmVlbkxvY2s/OiBib29sZWFuID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBfdGV4dD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIERlZmluZSBzZSBvICpvdmVybGF5KiBzZXLDoSBhcGxpY2FkbyBhIHVtICpjb250YWluZXIqIG91IGEgcMOhZ2luYSBpbnRlaXJhLlxyXG4gICAqXHJcbiAgICogUGFyYSB1dGlsaXphciBvIGNvbXBvbmVudGUgY29tbyB1bSAqY29udGFpbmVyKiwgbyBlbGVtZW50byBwYWkgZGV2ZXLDoSByZWNlYmVyIHVtYSBwb3Npw6fDo28gcmVsYXRpdmEsIHBvciBleGVtcGxvOlxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogPGRpdiBzdHlsZT1cInBvc2l0aW9uOiByZWxhdGl2ZVwiPlxyXG4gICAqXHJcbiAgICogIDxwby1jaGFydCBbcC1zZXJpZXNdPVwiW3sgdmFsdWU6IDEwLCBjYXRlZ29yeTogJ0V4YW1wbGUnIH1dXCI+XHJcbiAgICogIDwvcG8tY2hhcnQ+XHJcbiAgICpcclxuICAgKiAgPHBvLWxvYWRpbmctb3ZlcmxheT5cclxuICAgKiAgPC9wby1sb2FkaW5nLW92ZXJsYXk+XHJcbiAgICogPC9kaXY+XHJcbiAgICogYGBgXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICovXHJcbiAgQElucHV0KCdwLXNjcmVlbi1sb2NrJykgc2V0IHNjcmVlbkxvY2soc2NyZWVuTG9jazogYm9vbGVhbikge1xyXG4gICAgdGhpcy5fc2NyZWVuTG9jayA9IGNvbnZlcnRUb0Jvb2xlYW4oc2NyZWVuTG9jayk7XHJcbiAgfVxyXG5cclxuICBnZXQgc2NyZWVuTG9jaygpIHtcclxuICAgIHJldHVybiB0aGlzLl9zY3JlZW5Mb2NrO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIFRleHRvIGEgc2VyIGV4aWJpZG8gbm8gY29tcG9uZW50ZS5cclxuICAgKlxyXG4gICAqID4gTyB2YWxvciBwYWRyw6NvIHNlcsOhIHRyYWR1emlkbyBhY29yZG8gY29tIG8gaWRpb21hIGNvbmZpZ3VyYWRvIG5vIFsqKlBvSTE4bioqXSgvZG9jdW1lbnRhdGlvbi9wby1pMThuKSBvdSBuYXZlZ2Fkb3IuXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCBgQ2FycmVnYW5kb2BcclxuICAgKi9cclxuICBASW5wdXQoJ3AtdGV4dCcpIHNldCB0ZXh0KHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX3RleHQgPSB2YWx1ZSB8fCB0aGlzLmdldFRleHREZWZhdWx0KCk7XHJcbiAgfVxyXG5cclxuICBnZXQgdGV4dCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX3RleHQ7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpIHtcclxuICAgIHRoaXMudGV4dCA9IHRoaXMuZ2V0VGV4dERlZmF1bHQoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0VGV4dERlZmF1bHQoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGxhbmd1YWdlID0gdGhpcy5sYW5ndWFnZVNlcnZpY2UuZ2V0U2hvcnRMYW5ndWFnZSgpO1xyXG5cclxuICAgIHJldHVybiBwb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHNEZWZhdWx0W2xhbmd1YWdlXS5sb2FkaW5nO1xyXG4gIH1cclxufVxyXG4iXX0=