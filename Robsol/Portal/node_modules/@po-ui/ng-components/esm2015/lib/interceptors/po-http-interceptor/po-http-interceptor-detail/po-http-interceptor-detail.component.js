import { Component, EventEmitter, ViewChild } from '@angular/core';
import { PoModalComponent } from '../../../components/po-modal/po-modal.component';
import { poHttpInterceptorDetailLiteralsDefault } from './po-http-interceptor-detail-literals.interface';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
export const colors = { success: 'color-11', error: 'color-07', warning: 'color-08', info: '' };
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a modal de detalhes exibida pelo interceptor
 */
export class PoHttpInterceptorDetailComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.closed = new EventEmitter();
        this.details = [];
        this.language = this.languageService.getShortLanguage();
        this.literals = poHttpInterceptorDetailLiteralsDefault[this.language];
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.primaryAction = {
            action: () => this.close(),
            label: this.literals.closeButton
        };
    }
    set detail(details) {
        if (details && details.length) {
            this.details = this.filterByValidDetails(details);
        }
        this.title = this.formatTitle(this.details);
    }
    close() {
        this.modal.close();
        this.closed.emit();
    }
    formatDetailItemTitle(detail) {
        return detail.detailTitle
            ? detail.detailTitle
            : detail.code
                ? `${detail.code} - ${detail.message}`
                : detail.message;
    }
    open() {
        this.modal.open();
    }
    typeColor(type) {
        return colors[type];
    }
    typeValue(type) {
        return poHttpInterceptorDetailLiteralsDefault[this.language][type] || type;
    }
    addValidDetail(newDetails, detail) {
        return detail.message ? newDetails.concat(this.getValidDetailProperties(detail)) : newDetails;
    }
    getValidDetailProperties({ code, message, detailedMessage, type, detailTitle }) {
        return detailTitle
            ? { code, message, detailedMessage, type, detailTitle }
            : { code, message, detailedMessage, type };
    }
    filterByValidDetails(details) {
        return details.reduce((newDetails, detail) => this.addValidDetail(newDetails, detail), []);
    }
    formatTitle(details) {
        return details.length > 1
            ? `${this.literals.details} (${details.length})`
            : details.length === 1
                ? this.formatDetailItemTitle(details[0])
                : this.literals.detail;
    }
}
PoHttpInterceptorDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-http-interceptor-detail',
                template: "<po-modal p-hide-close p-size=\"lg\" [p-primary-action]=\"primaryAction\" [p-title]=\"title\">\r\n  <div class=\"po-row\">\r\n    <po-accordion class=\"po-md-12 po-mt-1 po-mb-1\" *ngIf=\"details.length > 1; else elseBlock\">\r\n      <po-accordion-item *ngFor=\"let detail of details\" [p-label]=\"formatDetailItemTitle(detail)\">\r\n        <ng-template [ngTemplateOutlet]=\"body\" [ngTemplateOutletContext]=\"{detail}\"></ng-template>\r\n      </po-accordion-item>\r\n    </po-accordion>\r\n  </div>\r\n</po-modal>\r\n\r\n<ng-template #elseBlock>\r\n  <ng-container [ngTemplateOutlet]=\"body\" [ngTemplateOutletContext]=\"{ detail: details[0] || {} }\"></ng-container>\r\n</ng-template>\r\n\r\n<ng-template #body let-detail=\"detail\">\r\n  <div *ngIf=\"detail.type\" class=\"po-row po-mb-1\">\r\n    <po-tag [p-color]=\"typeColor(detail.type)\" [p-value]=\"typeValue(detail.type)\"></po-tag>\r\n  </div>\r\n\r\n  <p *ngIf=\"detail.detailTitle\">\r\n    <strong>{{ detail.code }}</strong>\r\n  </p>\r\n\r\n  <div class=\"po-row\">\r\n    <p>{{ detail.detailedMessage }}</p>\r\n  </div>\r\n</ng-template>\r\n"
            },] }
];
PoHttpInterceptorDetailComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoHttpInterceptorDetailComponent.propDecorators = {
    modal: [{ type: ViewChild, args: [PoModalComponent, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,