import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';
import { PoTooltipBaseDirective } from './po-tooltip-base.directive';
import { PoTooltipControlPositionService } from './po-tooltip-control-position.service';
/**
 * @docsExtends PoTooltipBaseDirective
 *
 * @example
 *
 * <example name="po-tooltip-basic" title="PO Tooltip Basic" >
 *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.html"> </file>
 *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tooltip-labs" title="PO Tooltip Labs" >
 *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.html"> </file>
 *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tooltip-new-user" title="PO Tooltip - New User" >
 *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.html"> </file>
 *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.ts"> </file>
 * </example>
 *
 */
export class PoTooltipDirective extends PoTooltipBaseDirective {
    constructor(elementRef, renderer, poControlPosition) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.poControlPosition = poControlPosition;
        this.tooltipOffset = 8;
    }
    onMouseEnter() {
        if (!this.displayTooltip) {
            this.addTooltipAction();
        }
    }
    onMouseLeave() {
        if (!this.displayTooltip) {
            this.removeTooltipAction();
        }
    }
    ngOnInit() {
        this.initScrollEventListenerFunction();
    }
    addTooltipAction() {
        setTimeout(() => {
            if (this.tooltip) {
                this.tooltipContent ? this.showTooltip() : this.createTooltip();
                this.removeArrow(this.arrowDirection);
                this.poControlPosition.adjustPosition(this.tooltipPosition);
                this.arrowDirection = this.poControlPosition.getArrowDirection();
                this.addArrow(this.arrowDirection);
                this.lastTooltipText = this.tooltip;
            }
        });
    }
    removeTooltipAction() {
        // necessita do timeout para conseguir adicionar ".po-invisible", pois quando tem alguns elementos
        // próximos com tooltips e ficar passando o mouse em cima, os mesmos não estavam ficando invisiveis.
        setTimeout(() => {
            if (this.appendInBody && this.tooltipContent) {
                this.renderer.removeChild(document.body, this.tooltipContent);
                this.tooltipContent = undefined;
            }
            else {
                this.hideTooltip();
            }
        });
    }
    addArrow(arrowDirection) {
        this.renderer.addClass(this.divArrow, `po-arrow-${arrowDirection}`);
    }
    addScrollEventListener() {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    }
    // Monta a estrutura do tooltip
    createTooltip() {
        this.tooltipContent = this.renderer.createElement('div');
        this.renderer.addClass(this.tooltipContent, 'po-tooltip');
        this.divArrow = this.renderer.createElement('div');
        this.renderer.addClass(this.divArrow, 'po-tooltip-arrow');
        this.divContent = this.renderer.createElement('div');
        this.renderer.addClass(this.divContent, 'po-tooltip-content');
        this.textContent = this.renderer.createText(this.tooltip);
        this.renderer.appendChild(this.divContent, this.textContent);
        this.renderer.appendChild(this.tooltipContent, this.divArrow);
        this.renderer.appendChild(this.tooltipContent, this.divContent);
        const parentTarget = this.appendInBody ? document.body : this.elementRef.nativeElement;
        this.renderer.appendChild(parentTarget, this.tooltipContent);
        this.poControlPosition.setElements(this.tooltipContent, this.tooltipOffset, this.elementRef);
        this.addScrollEventListener();
    }
    initScrollEventListenerFunction() {
        this.eventListenerFunction = () => {
            if (!this.isHidden) {
                setTimeout(() => {
                    this.poControlPosition.adjustPosition(this.tooltipPosition);
                });
            }
        };
    }
    hideTooltip() {
        if (this.tooltipContent) {
            this.renderer.addClass(this.tooltipContent, 'po-invisible');
            this.isHidden = true;
            this.removeScrollEventListener();
        }
    }
    removeArrow(arrowDirection) {
        if (this.elementRef.nativeElement.querySelector(`.po-arrow-${arrowDirection}`)) {
            this.renderer.removeClass(this.divArrow, `po-arrow-${arrowDirection}`);
        }
    }
    removeScrollEventListener() {
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    }
    showTooltip() {
        this.renderer.removeClass(this.tooltipContent, 'po-invisible');
        this.updateTextContent();
        this.isHidden = false;
        this.addScrollEventListener();
    }
    updateTextContent() {
        if (this.lastTooltipText !== this.tooltip) {
            this.renderer.removeChild(this.divContent, this.textContent);
            this.textContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.divContent, this.textContent);
        }
    }
}
PoTooltipDirective.decorators = [
    { type: Directive, args: [{
                selector: '[p-tooltip]',
                providers: [PoTooltipControlPositionService]
            },] }
];
PoTooltipDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: PoTooltipControlPositionService }
];
PoTooltipDirective.propDecorators = {
    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }]
};
//# sourceMappingURL=data:application/json;base64,