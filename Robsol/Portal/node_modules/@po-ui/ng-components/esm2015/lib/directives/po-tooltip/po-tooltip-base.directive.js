import { __decorate } from "tslib";
import { Input, Directive } from '@angular/core';
import { InputBoolean } from '../../decorators';
import { PO_CONTROL_POSITIONS } from './../../services/po-control-position/po-control-position.constants';
const CONTENT_MAX_LENGTH = 140;
const PO_TOOLTIP_POSITION_DEFAULT = 'bottom';
/**
 * @description
 *
 * A diretiva po-tooltip deve ser utilizada para oferecer informações adicionais quando os usuários
 * passam o mouse sobre o elemento alvo ao qual ela está atribuída.
 *
 * O conteúdo é formado por um pequeno texto que deve contribuir para uma tomada de decisão ou
 * orientação do usuário. A ativação dele pode estar em qualquer componente ou tag HTML.
 *
 * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como
 * conteúdo deve-se utilizar o [**po-popover**](https://po-ui.io/documentation/po-popover?view=doc).
 */
export class PoTooltipBaseDirective {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Define que o po-tooltip será incluido no body e não dentro do elemento ao qual o tooltip foi especificado.
         * Opção necessária para o caso de uso de tooltip em um elemento SVG.
         *
         * @default `false`
         */
        this.appendInBody = false;
        this._tooltipPosition = 'bottom';
        this._displayTooltip = false;
        this._tooltip = '';
    }
    /**
     * @description
     *
     * Habilita e atribui um texto ao po-tooltip, com limitação de 140 caracteres.
     */
    set tooltip(tooltip) {
        if (tooltip && tooltip.length > CONTENT_MAX_LENGTH) {
            this._tooltip = tooltip.substring(0, CONTENT_MAX_LENGTH);
        }
        else {
            this._tooltip = tooltip;
        }
    }
    get tooltip() {
        return this._tooltip;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a posição que o po-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-tooltip no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-tooltip no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-tooltip no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-tooltip abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-tooltip abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-tooltip abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-tooltip no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-tooltip no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-tooltip no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-tooltip acima do componente alvo.
     * - `top-right`: Posiciona o po-tooltip acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-tooltip acima e à esquerda do componente alvo.
     *
     * @default bottom
     */
    set tooltipPosition(position) {
        this._tooltipPosition = PO_CONTROL_POSITIONS.includes(position) ? position : PO_TOOLTIP_POSITION_DEFAULT;
    }
    get tooltipPosition() {
        return this._tooltipPosition;
    }
    set displayTooltip(value) {
        this._displayTooltip = value;
        this._displayTooltip ? this.addTooltipAction() : this.removeTooltipAction();
    }
    get displayTooltip() {
        return this._displayTooltip;
    }
}
PoTooltipBaseDirective.decorators = [
    { type: Directive }
];
PoTooltipBaseDirective.propDecorators = {
    appendInBody: [{ type: Input, args: ['p-append-in-body',] }],
    tooltip: [{ type: Input, args: ['p-tooltip',] }],
    tooltipPosition: [{ type: Input, args: ['p-tooltip-position',] }],
    displayTooltip: [{ type: Input, args: ['p-display-tooltip',] }]
};
__decorate([
    InputBoolean()
], PoTooltipBaseDirective.prototype, "appendInBody", void 0);
__decorate([
    InputBoolean()
], PoTooltipBaseDirective.prototype, "displayTooltip", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdG9vbHRpcC1iYXNlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvZGlyZWN0aXZlcy9wby10b29sdGlwL3BvLXRvb2x0aXAtYmFzZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVoRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvRUFBb0UsQ0FBQztBQUUxRyxNQUFNLGtCQUFrQixHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLDJCQUEyQixHQUFHLFFBQVEsQ0FBQztBQUU3Qzs7Ozs7Ozs7Ozs7R0FXRztBQUdILE1BQU0sT0FBZ0Isc0JBQXNCO0lBRDVDO1FBRUU7Ozs7Ozs7OztXQVNHO1FBQ3dDLGlCQUFZLEdBQVksS0FBSyxDQUFDO1FBRS9ELHFCQUFnQixHQUFZLFFBQVEsQ0FBQztRQUd2QyxvQkFBZSxHQUFZLEtBQUssQ0FBQztRQUNqQyxhQUFRLEdBQVcsRUFBRSxDQUFDO0lBNkRoQyxDQUFDO0lBM0RDOzs7O09BSUc7SUFDSCxJQUF3QixPQUFPLENBQUMsT0FBZTtRQUM3QyxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLGtCQUFrQixFQUFFO1lBQ2xELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztTQUMxRDthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBQ0QsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09Bd0JHO0lBQ0gsSUFBaUMsZUFBZSxDQUFDLFFBQWdCO1FBQy9ELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsMkJBQTJCLENBQUM7SUFDM0csQ0FBQztJQUNELElBQUksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUMvQixDQUFDO0lBRTJDLElBQUksY0FBYyxDQUFDLEtBQWM7UUFDM0UsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzlFLENBQUM7SUFFRCxJQUFJLGNBQWM7UUFDaEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7OztZQTNFRixTQUFTOzs7MkJBWVAsS0FBSyxTQUFDLGtCQUFrQjtzQkFheEIsS0FBSyxTQUFDLFdBQVc7OEJBb0NqQixLQUFLLFNBQUMsb0JBQW9COzZCQU8xQixLQUFLLFNBQUMsbUJBQW1COztBQXhEaUI7SUFBZixZQUFZLEVBQUU7NERBQStCO0FBd0Q3QjtJQUFmLFlBQVksRUFBRTs0REFHMUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBJbnB1dEJvb2xlYW4gfSBmcm9tICcuLi8uLi9kZWNvcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IFBPX0NPTlRST0xfUE9TSVRJT05TIH0gZnJvbSAnLi8uLi8uLi9zZXJ2aWNlcy9wby1jb250cm9sLXBvc2l0aW9uL3BvLWNvbnRyb2wtcG9zaXRpb24uY29uc3RhbnRzJztcclxuXHJcbmNvbnN0IENPTlRFTlRfTUFYX0xFTkdUSCA9IDE0MDtcclxuY29uc3QgUE9fVE9PTFRJUF9QT1NJVElPTl9ERUZBVUxUID0gJ2JvdHRvbSc7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIEEgZGlyZXRpdmEgcG8tdG9vbHRpcCBkZXZlIHNlciB1dGlsaXphZGEgcGFyYSBvZmVyZWNlciBpbmZvcm1hw6fDtWVzIGFkaWNpb25haXMgcXVhbmRvIG9zIHVzdcOhcmlvc1xyXG4gKiBwYXNzYW0gbyBtb3VzZSBzb2JyZSBvIGVsZW1lbnRvIGFsdm8gYW8gcXVhbCBlbGEgZXN0w6EgYXRyaWJ1w61kYS5cclxuICpcclxuICogTyBjb250ZcO6ZG8gw6kgZm9ybWFkbyBwb3IgdW0gcGVxdWVubyB0ZXh0byBxdWUgZGV2ZSBjb250cmlidWlyIHBhcmEgdW1hIHRvbWFkYSBkZSBkZWNpc8OjbyBvdVxyXG4gKiBvcmllbnRhw6fDo28gZG8gdXN1w6FyaW8uIEEgYXRpdmHDp8OjbyBkZWxlIHBvZGUgZXN0YXIgZW0gcXVhbHF1ZXIgY29tcG9uZW50ZSBvdSB0YWcgSFRNTC5cclxuICpcclxuICogUGFyYSB0ZXh0b3MgbWFpb3JlcyBvdSBubyBjYXNvIGRlIGhhdmVyIGEgbmVjZXNzaWRhZGUgZGUgdXRpbGl6YXIgYWxndW0gb3V0cm8gZWxlbWVudG8gY29tb1xyXG4gKiBjb250ZcO6ZG8gZGV2ZS1zZSB1dGlsaXphciBvIFsqKnBvLXBvcG92ZXIqKl0oaHR0cHM6Ly9wby11aS5pby9kb2N1bWVudGF0aW9uL3BvLXBvcG92ZXI/dmlldz1kb2MpLlxyXG4gKi9cclxuXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9Ub29sdGlwQmFzZURpcmVjdGl2ZSB7XHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIERlZmluZSBxdWUgbyBwby10b29sdGlwIHNlcsOhIGluY2x1aWRvIG5vIGJvZHkgZSBuw6NvIGRlbnRybyBkbyBlbGVtZW50byBhbyBxdWFsIG8gdG9vbHRpcCBmb2kgZXNwZWNpZmljYWRvLlxyXG4gICAqIE9ww6fDo28gbmVjZXNzw6FyaWEgcGFyYSBvIGNhc28gZGUgdXNvIGRlIHRvb2x0aXAgZW0gdW0gZWxlbWVudG8gU1ZHLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1hcHBlbmQtaW4tYm9keScpIEBJbnB1dEJvb2xlYW4oKSBhcHBlbmRJbkJvZHk6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgcHJvdGVjdGVkIF90b29sdGlwUG9zaXRpb24/OiBzdHJpbmcgPSAnYm90dG9tJztcclxuICBwcm90ZWN0ZWQgdG9vbHRpcENvbnRlbnQ7XHJcblxyXG4gIHByaXZhdGUgX2Rpc3BsYXlUb29sdGlwOiBib29sZWFuID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBfdG9vbHRpcDogc3RyaW5nID0gJyc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogSGFiaWxpdGEgZSBhdHJpYnVpIHVtIHRleHRvIGFvIHBvLXRvb2x0aXAsIGNvbSBsaW1pdGHDp8OjbyBkZSAxNDAgY2FyYWN0ZXJlcy5cclxuICAgKi9cclxuICBASW5wdXQoJ3AtdG9vbHRpcCcpIHNldCB0b29sdGlwKHRvb2x0aXA6IHN0cmluZykge1xyXG4gICAgaWYgKHRvb2x0aXAgJiYgdG9vbHRpcC5sZW5ndGggPiBDT05URU5UX01BWF9MRU5HVEgpIHtcclxuICAgICAgdGhpcy5fdG9vbHRpcCA9IHRvb2x0aXAuc3Vic3RyaW5nKDAsIENPTlRFTlRfTUFYX0xFTkdUSCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl90b29sdGlwID0gdG9vbHRpcDtcclxuICAgIH1cclxuICB9XHJcbiAgZ2V0IHRvb2x0aXAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fdG9vbHRpcDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBEZWZpbmUgYSBwb3Npw6fDo28gcXVlIG8gcG8tdG9vbHRpcCBhYnJpcsOhIGVtIHJlbGHDp8OjbyBhbyBjb21wb25lbnRlIGFsdm8uIFN1Z2VyZS1zZSBxdWUgc2VqYVxyXG4gICAqIHVzYWRhIGEgb3JpZW50YcOnw6NvIFwiYm90dG9tXCIgKGFiYWl4byksIHBvcsOpbSBvIG1lc21vIMOpIGZsZXjDrXZlbCBlIHNlcsOhIHJvdGFjaW9uYWRvXHJcbiAgICogYXV0b21hdGljYW1lbnRlIHBhcmEgc2UgYWRlcXVhciBhIHRlbGEsIGNhc28gbmVjZXNzw6FyaW8uXHJcbiAgICpcclxuICAgKiBQb3Npw6fDtWVzIHbDoWxpZGFzOlxyXG4gICAqIC0gYHJpZ2h0YDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBubyBsYWRvIGRpcmVpdG8gZG8gY29tcG9uZW50ZSBhbHZvLlxyXG4gICAqIC0gYHJpZ2h0LWJvdHRvbWA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgbm8gbGFkbyBkaXJlaXRvIGluZmVyaW9yIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgKiAtIGByaWdodC10b3BgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIG5vIGxhZG8gZGlyZWl0byBzdXBlcmlvciBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICogLSBgYm90dG9tYDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBhYmFpeG8gZG8gY29tcG9uZW50ZSBhbHZvLlxyXG4gICAqIC0gYGJvdHRvbS1sZWZ0YDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBhYmFpeG8gZSDDoCBlc3F1ZXJkYSBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICogLSBgYm90dG9tLXJpZ2h0YDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBhYmFpeG8gZSDDoCBkaXJlaXRhIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgKiAtIGBsZWZ0YDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBubyBsYWRvIGVzcXVlcmRvIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgKiAtIGBsZWZ0LXRvcGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgbm8gbGFkbyBlc3F1ZXJkbyBzdXBlcmlvciBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICogLSBgbGVmdC1ib3R0b21gOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIG5vIGxhZG8gZXNxdWVyZG8gaW5mZXJpb3IgZG8gY29tcG9uZW50ZSBhbHZvLlxyXG4gICAqIC0gYHRvcGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgYWNpbWEgZG8gY29tcG9uZW50ZSBhbHZvLlxyXG4gICAqIC0gYHRvcC1yaWdodGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgYWNpbWEgZSDDoCBkaXJlaXRhIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgKiAtIGB0b3AtbGVmdGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgYWNpbWEgZSDDoCBlc3F1ZXJkYSBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCBib3R0b21cclxuICAgKi9cclxuICBASW5wdXQoJ3AtdG9vbHRpcC1wb3NpdGlvbicpIHNldCB0b29sdGlwUG9zaXRpb24ocG9zaXRpb246IHN0cmluZykge1xyXG4gICAgdGhpcy5fdG9vbHRpcFBvc2l0aW9uID0gUE9fQ09OVFJPTF9QT1NJVElPTlMuaW5jbHVkZXMocG9zaXRpb24pID8gcG9zaXRpb24gOiBQT19UT09MVElQX1BPU0lUSU9OX0RFRkFVTFQ7XHJcbiAgfVxyXG4gIGdldCB0b29sdGlwUG9zaXRpb24oKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl90b29sdGlwUG9zaXRpb247XHJcbiAgfVxyXG5cclxuICBASW5wdXQoJ3AtZGlzcGxheS10b29sdGlwJykgQElucHV0Qm9vbGVhbigpIHNldCBkaXNwbGF5VG9vbHRpcCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5fZGlzcGxheVRvb2x0aXAgPSB2YWx1ZTtcclxuICAgIHRoaXMuX2Rpc3BsYXlUb29sdGlwID8gdGhpcy5hZGRUb29sdGlwQWN0aW9uKCkgOiB0aGlzLnJlbW92ZVRvb2x0aXBBY3Rpb24oKTtcclxuICB9XHJcblxyXG4gIGdldCBkaXNwbGF5VG9vbHRpcCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9kaXNwbGF5VG9vbHRpcDtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBhZGRUb29sdGlwQWN0aW9uKCk7XHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHJlbW92ZVRvb2x0aXBBY3Rpb24oKTtcclxufVxyXG4iXX0=