import { Component, ViewChild } from '@angular/core';
import { poLocaleDefault } from '../po-language/po-language.constant';
import { PoLanguageService } from '../po-language/po-language.service';
import { PoDialogType } from './po-dialog.enum';
import { PoModalComponent } from '../../components/po-modal/po-modal.component';
export const poDialogAlertLiteralsDefault = {
    en: { ok: 'Ok' },
    es: { ok: 'Ok' },
    pt: { ok: 'Ok' },
    ru: { ok: 'Ок' }
};
export const poDialogConfirmLiteralsDefault = {
    en: { cancel: 'Cancel', confirm: 'Confirm' },
    es: { cancel: 'Cancelar', confirm: 'Confirmar' },
    pt: { cancel: 'Cancelar', confirm: 'Confirmar' },
    ru: { cancel: 'отменить', confirm: 'подтвердить' }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que serve como container do po-dialog.service
 */
export class PoDialogComponent {
    constructor(languageService) {
        // Objeto primary do poModal
        this.primaryAction = { label: 'ok', action: () => { } };
        this.language = languageService.getShortLanguage();
    }
    ngOnDestroy() {
        this.closeSubscription.unsubscribe();
    }
    ngOnInit() {
        this.closeSubscription = this.poModal.onXClosed.subscribe(close => this.close(true));
    }
    // Fecha o poModal
    close(xClosed = false) {
        if (xClosed && this.closeAction) {
            this.closeAction();
        }
        this.poModal.close();
        this.destroy();
    }
    destroy() {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    }
    // Insere os valores recebidos de this.open para o poModal
    configDialog(primaryLabel, primaryAction, secondaryLabel, secondaryAction, closeAction) {
        this.primaryAction = {
            label: primaryLabel,
            action: () => {
                if (primaryAction) {
                    primaryAction();
                }
                this.close();
            }
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: () => {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    this.close();
                }
            };
        }
        this.closeAction = closeAction;
    }
    // Insere os valores recebidos de po-dialog.service de acordo com o tipo de diálago solicitado
    open(dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        this.setDialogLiterals(dialogOptions, dialogType);
        switch (dialogType) {
            case PoDialogType.Confirm: {
                this.configDialog(this.literalsConfirm.confirm, dialogOptions.confirm, this.literalsConfirm.cancel, dialogOptions.cancel, dialogOptions.close);
                break;
            }
            case PoDialogType.Alert: {
                this.configDialog(this.literalsAlert.ok, dialogOptions.ok);
                break;
            }
        }
        this.poModal.open();
    }
    setDialogLiterals(dialogOptions, dialogType) {
        const alertLiterals = poDialogAlertLiteralsDefault;
        const confirmLiterals = poDialogConfirmLiteralsDefault;
        const literals = dialogOptions.literals;
        if (dialogType === PoDialogType.Alert) {
            this.literalsAlert = Object.assign(Object.assign(Object.assign({}, alertLiterals[poLocaleDefault]), alertLiterals[this.language]), literals);
        }
        else {
            this.literalsConfirm = Object.assign(Object.assign(Object.assign({}, confirmLiterals[poLocaleDefault]), confirmLiterals[this.language]), literals);
        }
    }
}
PoDialogComponent.decorators = [
    { type: Component, args: [{
                template: "<po-modal [p-title]=\"title\" [p-primary-action]=\"primaryAction\" [p-secondary-action]=\"secondaryAction\">\r\n  <div [innerHtml]=\"message\"></div>\r\n</po-modal>\r\n"
            },] }
];
PoDialogComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoDialogComponent.propDecorators = {
    poModal: [{ type: ViewChild, args: [PoModalComponent, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,