(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('@angular/animations'), require('@angular/router'), require('@angular/common/http'), require('@angular/forms'), require('rxjs/operators'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('@po-ui/ng-components', ['exports', '@angular/core', '@angular/common', 'rxjs', '@angular/animations', '@angular/router', '@angular/common/http', '@angular/forms', 'rxjs/operators', '@angular/platform-browser'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['po-ui'] = global['po-ui'] || {}, global['po-ui']['ng-components'] = {}), global.ng.core, global.ng.common, global.rxjs, global.ng.animations, global.ng.router, global.ng.common.http, global.ng.forms, global.rxjs.operators, global.ng.platformBrowser));
}(this, (function (exports, i0, common, rxjs, animations, router, i1, forms, operators, platformBrowser) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /**
     * @description
     *
     * Componente utilizado para agrupar visualmente uma lista de conteúdos, mostrando-os individualmente
     * ao clicar no título de cada item.
     *
     * Para utilizá-lo, é necessário envolver cada item no componente [`po-accordion-item`](/documentation/po-accordion-item),
     * como no exemplo abaixo:
     *
     * ```
     * <po-accordion>
     *   <po-accordion-item p-label="PO Accordion 1">
     *      Accordion 1
     *   </po-accordion-item>
     *
     *   <po-accordion-item p-label="PO Accordion 2">
     *      Accordion 2
     *   </po-accordion-item>
     * </po-accordion>
     * ```
     *
     * O componente já faz o controle de abertura e fechamento dos itens automaticamente.
     *
     * Caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript
     * acesse a [documentação do PoAccordionItem](/documentation/po-accordion-item).
     */
    var PoAccordionBaseComponent = /** @class */ (function () {
        function PoAccordionBaseComponent() {
        }
        return PoAccordionBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço para poder notificar o componente `po-accordion` quando um `po-accordion-item` for
     * expandido/colapsado.
     */
    var PoAccordionService = /** @class */ (function () {
        function PoAccordionService() {
            this.subjectChild = new rxjs.Subject();
        }
        // Recebe o accordionItem
        PoAccordionService.prototype.receiveFromChildAccordionClicked = function () {
            return this.subjectChild.asObservable();
        };
        // Envia accordionItem colapsado/expadido do accordion
        PoAccordionService.prototype.sendToParentAccordionItemClicked = function (accordionItem) {
            this.subjectChild.next(accordionItem);
        };
        return PoAccordionService;
    }());
    PoAccordionService.decorators = [
        { type: i0.Injectable }
    ];

    /**
     * @description
     *
     * Componente utilizado para renderizar os itens do `po-accordion`.
     *
     * O componente `po-accordion` já faz o controle de abertura e fechamento dos itens automaticamente,
     * mas caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript, pode ser feita da seguinte forma:
     *
     * ```
     * <po-accordion>
     *   <po-accordion-item p-label="PO Accordion 1" #item1>
     *      Accordion 1
     *   </po-accordion-item>
     *
     *   <po-accordion-item p-label="PO Accordion 2">
     *      Accordion 2
     *   </po-accordion-item>
     * </po-accordion>
     * ```
     *
     * e no typescript pode-se utilizar o `@ViewChild`:
     *
     * ```
     *  @ViewChild(PoAccordionItemComponent, { static: true }) item1: PoAccordionItemComponent;
     *
     *  ngAfterContentInit() {
     *    // ou utilizar o método collapse()
     *    this.item1.expand();
     *  }
     * ```
     */
    var PoAccordionItemComponent = /** @class */ (function () {
        function PoAccordionItemComponent(accordionService) {
            this.accordionService = accordionService;
        }
        /**
         * Método para colapsar o `po-accordion-item`.
         */
        PoAccordionItemComponent.prototype.collapse = function () {
            this.expanded = false;
            this.accordionService.sendToParentAccordionItemClicked(this);
        };
        /**
         * Método para expandir o `po-accordion-item`.
         */
        PoAccordionItemComponent.prototype.expand = function () {
            this.expanded = true;
            this.accordionService.sendToParentAccordionItemClicked(this);
        };
        return PoAccordionItemComponent;
    }());
    PoAccordionItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-accordion-item',
                    template: "<ng-template>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n"
                },] }
    ];
    PoAccordionItemComponent.ctorParameters = function () { return [
        { type: PoAccordionService }
    ]; };
    PoAccordionItemComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['p-label',] }],
        templateRef: [{ type: i0.ViewChild, args: [i0.TemplateRef, { static: true },] }]
    };

    /**
     * @docsExtends PoAccordionBaseComponent
     *
     * @example
     *
     * <example name="po-accordion-basic" title="PO Accordion Basic" >
     *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.html"> </file>
     *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.ts"> </file>
     *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="po-accordion-labs" title="PO Accordion Labs" >
     *  <file name="sample-po-accordion-labs/sample-po-accordion-labs.component.html"> </file>
     *  <file name="sample-po-accordion-labs/sample-po-accordion-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-accordion-faq" title="PO Accordion - FAQs" >
     *  <file name="sample-po-accordion-faq/sample-po-accordion-faq.component.html"> </file>
     *  <file name="sample-po-accordion-faq/sample-po-accordion-faq.component.ts"> </file>
     * </example>
     */
    var PoAccordionComponent = /** @class */ (function (_super) {
        __extends(PoAccordionComponent, _super);
        function PoAccordionComponent(accordionService) {
            var _this = _super.call(this) || this;
            _this.accordionService = accordionService;
            _this.receiveFromChildAccordionSubscription();
            return _this;
        }
        PoAccordionComponent.prototype.ngOnDestroy = function () {
            this.accordionServiceSubscription.unsubscribe();
        };
        PoAccordionComponent.prototype.headerToggle = function (event, poAccordionItem) {
            poAccordionItem.expanded = event;
            this.toggle(poAccordionItem);
        };
        PoAccordionComponent.prototype.receiveFromChildAccordionSubscription = function () {
            var _this = this;
            this.accordionServiceSubscription = this.accordionService
                .receiveFromChildAccordionClicked()
                .subscribe(function (poAccordionItem) { return _this.toggle(poAccordionItem); });
        };
        PoAccordionComponent.prototype.toggle = function (poAccordionItem) {
            var isCurrentAccordionCollapsed = !poAccordionItem.expanded;
            if (isCurrentAccordionCollapsed) {
                this.expandedActiveAccordionItem = null;
                return;
            }
            if (this.expandedActiveAccordionItem) {
                this.expandedActiveAccordionItem.collapse();
            }
            this.expandedActiveAccordionItem = poAccordionItem;
        };
        return PoAccordionComponent;
    }(PoAccordionBaseComponent));
    PoAccordionComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-accordion',
                    template: "<div class=\"po-accordion po-container po-container-no-padding\">\r\n  <section\r\n    *ngFor=\"let poAccordionItem of poAccordionItems\"\r\n    class=\"po-accordion-item\"\r\n    [class.po-accordion-item-active]=\"poAccordionItem.expanded\"\r\n  >\r\n    <po-accordion-item-header\r\n      [p-expanded]=\"poAccordionItem.expanded\"\r\n      [p-label]=\"poAccordionItem.label\"\r\n      (p-toggle)=\"headerToggle($event, poAccordionItem)\"\r\n    >\r\n    </po-accordion-item-header>\r\n\r\n    <po-accordion-item-body [p-expanded]=\"poAccordionItem.expanded\">\r\n      <ng-container *ngTemplateOutlet=\"poAccordionItem.templateRef\"></ng-container>\r\n    </po-accordion-item-body>\r\n  </section>\r\n</div>\r\n",
                    providers: [PoAccordionService]
                },] }
    ];
    PoAccordionComponent.ctorParameters = function () { return [
        { type: PoAccordionService }
    ]; };
    PoAccordionComponent.propDecorators = {
        poAccordionItems: [{ type: i0.ContentChildren, args: [PoAccordionItemComponent,] }]
    };

    var PoAccordionItemBodyComponent = /** @class */ (function () {
        function PoAccordionItemBodyComponent() {
            this.expanded = false;
        }
        return PoAccordionItemBodyComponent;
    }());
    PoAccordionItemBodyComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-accordion-item-body',
                    template: "<div class=\"po-accordion-item-body\" *ngIf=\"expanded\" @toggleBody>\r\n  <div class=\"po-accordion-item-body-content\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n",
                    animations: [
                        animations.trigger('toggleBody', [
                            animations.transition('* => void', [animations.style({ height: '*' }), animations.animate(200, animations.style({ height: 0 }))]),
                            animations.transition('void => *', [animations.style({ height: '0' }), animations.animate(200, animations.style({ height: '*' }))])
                        ])
                    ]
                },] }
    ];
    PoAccordionItemBodyComponent.propDecorators = {
        expanded: [{ type: i0.Input, args: ['p-expanded',] }]
    };

    var PoAccordionItemHeaderComponent = /** @class */ (function () {
        function PoAccordionItemHeaderComponent() {
            this.expanded = false;
            this.toggle = new i0.EventEmitter();
        }
        PoAccordionItemHeaderComponent.prototype.onClick = function () {
            this.expanded = !this.expanded;
            this.toggle.emit(this.expanded);
        };
        return PoAccordionItemHeaderComponent;
    }());
    PoAccordionItemHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-accordion-item-header',
                    template: "<header class=\"po-accordion-item-header\">\r\n  <button class=\"po-accordion-item-header-button po-clickable\" (click)=\"onClick()\">\r\n    <div class=\"po-text-ellipsis po-accordion-item-header-title\">{{ label }}</div>\r\n    <span #icon class=\"po-icon po-accordion-item-header-icon po-icon-arrow-down\"> </span>\r\n  </button>\r\n</header>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoAccordionItemHeaderComponent.propDecorators = {
        expanded: [{ type: i0.Input, args: ['p-expanded',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        toggle: [{ type: i0.Output, args: ['p-toggle',] }]
    };

    /**
     * @description
     *
     * Módulo do componente `po-accordion`.
     *
     * > Para o correto funcionamento do componente `po-accordion`, deve ser importado o módulo `BrowserAnimationsModule` no
     * > módulo principal da sua aplicação.
     *
     * Módulo da aplicação:
     * ```
     * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
     * import { PoModule } from '@po-ui/ng-components';
     * ...
     *
     * @NgModule({
     *   imports: [
     *     BrowserModule,
     *     BrowserAnimationsModule,
     *     ...
     *     PoModule
     *   ],
     *   declarations: [
     *     AppComponent,
     *     ...
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     */
    var PoAccordionModule = /** @class */ (function () {
        function PoAccordionModule() {
        }
        return PoAccordionModule;
    }());
    PoAccordionModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [
                        PoAccordionComponent,
                        PoAccordionItemBodyComponent,
                        PoAccordionItemComponent,
                        PoAccordionItemHeaderComponent
                    ],
                    exports: [PoAccordionComponent, PoAccordionItemComponent]
                },] }
    ];

    var PO_AVATAR_SIZES = ['xs', 'sm', 'md', 'lg', 'xl'];
    var PO_AVATAR_SIZE_DEFAULT = 'md';
    /**
     * @description
     *
     * O componente `po-avatar` é um container para imagens em miniatura, possui um formato redondo e cinco opções de
     * tamanho, pode ser utilizado para mostrar a foto do perfil de um usuário, entre outras possibilidades.
     *
     * Além de poder ser utilizado separadamente, é possível usar o `po-avatar` juntamente com outros componentes e criar
     * layouts ricos e bem interessantes para os usuários, como por exemplo, uma lista de itens ou produtos.
     */
    var PoAvatarBaseComponent = /** @class */ (function () {
        function PoAvatarBaseComponent() {
            /**
             * @optional
             *
             * @description
             *
             * Indica como o navegador deve carregar a imagem.
             *
             * Valores válidos:
             *  - `eager` (a imagem é carregada imediatamente, independente de estar visível ou não)
             *  - `lazy` (a imagem só é carregada quando estiver próxima de ser renderizada)
             *
             * @default `eager`
             */
            this.loading = 'eager';
            /** Evento disparado ao clicar na imagem do *avatar*. */
            this.click = new i0.EventEmitter();
            this._size = 'md';
        }
        Object.defineProperty(PoAvatarBaseComponent.prototype, "size", {
            get: function () {
                return this._size;
            },
            /**
             * @optional
             *
             * @description
             *
             * Tamanho de exibição do componente.
             *
             * Valores válidos:
             *  - `xs` (24x24)
             *  - `sm` (32x32)
             *  - `md` (64x64)
             *  - `lg` (96x96)
             *  - `xl` (144x144)
             *
             * @default `md`
             */
            set: function (value) {
                this._size = PO_AVATAR_SIZES.includes(value) ? value : PO_AVATAR_SIZE_DEFAULT;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoAvatarBaseComponent.prototype, "hasClickEvent", {
            get: function () {
                return !!this.click.observers.length;
            },
            enumerable: false,
            configurable: true
        });
        return PoAvatarBaseComponent;
    }());
    PoAvatarBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoAvatarBaseComponent.propDecorators = {
        src: [{ type: i0.Input, args: ['p-src',] }],
        loading: [{ type: i0.Input, args: ['p-loading',] }],
        click: [{ type: i0.Output, args: ['p-click',] }],
        size: [{ type: i0.Input, args: ['p-size',] }]
    };

    /**
     * @docsExtends PoAvatarBaseComponent
     *
     * @example
     *
     * <example name="po-avatar-basic" title="PO Avatar Basic" >
     *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.html"> </file>
     *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.ts"> </file>
     *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="po-avatar-labs" title="PO Avatar Labs" >
     *  <file name="sample-po-avatar-labs/sample-po-avatar-labs.component.html"> </file>
     *  <file name="sample-po-avatar-labs/sample-po-avatar-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-avatar-business-card" title="PO Avatar - Business Card" >
     *  <file name="sample-po-avatar-business-card/sample-po-avatar-business-card.component.html"> </file>
     *  <file name="sample-po-avatar-business-card/sample-po-avatar-business-card.component.ts"> </file>
     * </example>
     */
    var PoAvatarComponent = /** @class */ (function (_super) {
        __extends(PoAvatarComponent, _super);
        function PoAvatarComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoAvatarComponent.prototype.ngOnInit = function () {
            if (!this.src) {
                this.src = undefined;
            }
        };
        PoAvatarComponent.prototype.onError = function () {
            this.src = undefined;
        };
        return PoAvatarComponent;
    }(PoAvatarBaseComponent));
    PoAvatarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-avatar',
                    template: "<div class=\"po-avatar po-avatar-{{ size }}\" [class.po-clickable]=\"hasClickEvent\" (click)=\"click.emit()\">\r\n  <ng-container *ngIf=\"src; then sourceImage; else defaultIcon\"></ng-container>\r\n</div>\r\n\r\n<ng-template #sourceImage>\r\n  <img class=\"po-avatar-image\" [src]=\"src\" alt=\"\" [attr.loading]=\"loading\" (error)=\"onError()\" />\r\n</ng-template>\r\n\r\n<ng-template #defaultIcon>\r\n  <span class=\"po-icon po-icon-user po-avatar-default-icon\"></span>\r\n</ng-template>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];

    /**
     * @description
     *
     * Módulo do componente po-avatar.
     */
    var PoAvatarModule = /** @class */ (function () {
        function PoAvatarModule() {
        }
        return PoAvatarModule;
    }());
    PoAvatarModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [PoAvatarComponent],
                    exports: [PoAvatarComponent]
                },] }
    ];

    /**
     * @description
     *
     * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
     * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
     *
     * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
     * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
     *
     * Caso um endereço seja especificado na propriedade `p-favorite-service`, o componente permite ao usuário
     * favoritar a URL.
     *
     * Havendo necessidade de incluir parâmetros na requisição do serviço,
     * o componente dispõe da propriedade `p-params-service` que recebe um objeto contendo as informações.
     */
    var PoBreadcrumbBaseComponent = /** @class */ (function () {
        function PoBreadcrumbBaseComponent() {
            this.itemsView = [];
            this._items = [];
        }
        Object.defineProperty(PoBreadcrumbBaseComponent.prototype, "items", {
            get: function () {
                return this._items;
            },
            /**
             * @description
             *
             * Lista de itens do _breadcrumb_.
             *
             * **Exemplo:**
             * ```
             * { label: 'Po Portal', link: 'portal' }
             * ```
             */
            set: function (items) {
                this._items = items;
                this.itemsView = [].concat(items);
            },
            enumerable: false,
            configurable: true
        });
        return PoBreadcrumbBaseComponent;
    }());
    PoBreadcrumbBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoBreadcrumbBaseComponent.propDecorators = {
        favoriteService: [{ type: i0.Input, args: ['p-favorite-service',] }],
        paramsService: [{ type: i0.Input, args: ['p-params-service',] }],
        items: [{ type: i0.Input, args: ['p-items',] }]
    };

    /**
     * @docsExtends PoBreadcrumbBaseComponent
     *
     * @example
     *
     * <example name="po-breadcrumb-basic" title="PO Breadcrumb Basic">
     *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.html"> </file>
     *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-breadcrumb-labs" title="PO Breadcrumb Labs">
     *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.html"> </file>
     *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.ts"> </file>
     * </example>
     */
    var PoBreadcrumbComponent = /** @class */ (function (_super) {
        __extends(PoBreadcrumbComponent, _super);
        function PoBreadcrumbComponent(differs, element, renderer) {
            var _this = _super.call(this) || this;
            _this.element = element;
            _this.renderer = renderer;
            _this.showDropdown = false;
            _this.showDropdownToggle = false;
            _this._breadcrumbItemsLenght = 0;
            _this.calculatedElement = false;
            _this.hiddenWithoutResize = false;
            _this.initialized = false;
            _this.wasClickedonDropdown = function (event) {
                var clickedOutIconDropdown = _this.checkClickOutElement(event, _this.dropdownIcon);
                if (clickedOutIconDropdown) {
                    _this.showDropdown = false;
                    _this.removeClickoutListener();
                }
            };
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        PoBreadcrumbComponent.prototype.ngAfterViewInit = function () {
            this.initialized = true;
            this.initializeResizeListener();
        };
        PoBreadcrumbComponent.prototype.ngDoCheck = function () {
            var breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;
            // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
            // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
            if (breadcrumbWidth && !this.calculatedElement && this.initialized) {
                this.initBreadcrumbSize();
            }
            if (this.hiddenWithoutResize) {
                this.debounceResize();
                this.hiddenWithoutResize = false;
            }
            this.checkChangeOnItems();
        };
        PoBreadcrumbComponent.prototype.ngOnDestroy = function () {
            this.removeClickoutListener();
            this.removeResizeListener();
        };
        PoBreadcrumbComponent.prototype.toggleDropdown = function () {
            this.showDropdown = !this.showDropdown;
            this.initializeClickoutListener();
        };
        PoBreadcrumbComponent.prototype.checkClickOutElement = function (event, element) {
            return element && !element.nativeElement.contains(event.target);
        };
        PoBreadcrumbComponent.prototype.checkChangeOnItems = function () {
            if (this.differ) {
                var changes = this.differ.diff(this.items);
                if (changes) {
                    this.calcBreadcrumbItemsWidth();
                    this.calculatedElement = false;
                }
            }
        };
        PoBreadcrumbComponent.prototype.calcBreadcrumb = function () {
            var breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();
            var breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite);
            if (breadcrumb <= this._breadcrumbItemsLenght) {
                this.enableBreadcrumbResponsive();
            }
            else {
                this.disableBreadcrumbResponsive();
            }
        };
        PoBreadcrumbComponent.prototype.getBreadcrumbFavoriteWidth = function () {
            return this.favoriteService
                ? this.element.nativeElement.querySelector('.po-breadcrumb-favorite').offsetWidth + 20
                : 0;
        };
        PoBreadcrumbComponent.prototype.getBreadcrumbWidth = function (breadcrumbFavorite) {
            return this.element.nativeElement.querySelector('.po-breadcrumb').offsetWidth - breadcrumbFavorite;
        };
        PoBreadcrumbComponent.prototype.calcBreadcrumbItemsWidth = function () {
            var breadcrumbItem = this.element.nativeElement.querySelectorAll('.po-breadcrumb-item, .po-breadcrumb-item-unclickable');
            this._breadcrumbItemsLenght = Array.from(breadcrumbItem)
                .map(function (breadcrumb) { return breadcrumb['offsetWidth']; })
                .reduce(function (a, b) { return a + b; }, 16);
        };
        PoBreadcrumbComponent.prototype.enableBreadcrumbResponsive = function () {
            this.showDropdownToggle = true;
            this.itemsView = this.items.slice(-2);
            this.dropdownItems = this.items.slice(0, -2).reverse();
        };
        PoBreadcrumbComponent.prototype.disableBreadcrumbResponsive = function () {
            this.showDropdownToggle = false;
            this.itemsView = [].concat(this.items);
            this.showDropdown = false;
        };
        PoBreadcrumbComponent.prototype.debounceResize = function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(function () {
                if (_this.calculatedElement &&
                    !_this.hiddenWithoutResize &&
                    _this.breadcrumbElement.nativeElement.offsetWidth === 0) {
                    _this.hiddenWithoutResize = true;
                }
                else {
                    _this.calcBreadcrumb();
                }
            }, 50);
        };
        PoBreadcrumbComponent.prototype.initBreadcrumbSize = function () {
            this.calcBreadcrumbItemsWidth();
            this.calcBreadcrumb();
            this.calculatedElement = true;
        };
        PoBreadcrumbComponent.prototype.initializeClickoutListener = function () {
            this.clickoutListener = this.renderer.listen('document', 'click', this.wasClickedonDropdown);
        };
        PoBreadcrumbComponent.prototype.initializeResizeListener = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
                _this.debounceResize();
            });
        };
        PoBreadcrumbComponent.prototype.removeClickoutListener = function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
        };
        PoBreadcrumbComponent.prototype.removeResizeListener = function () {
            this.resizeListener();
        };
        return PoBreadcrumbComponent;
    }(PoBreadcrumbBaseComponent));
    PoBreadcrumbComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-breadcrumb',
                    template: "<div class=\"po-breadcrumb\" #breadcrumb>\r\n  <ul class=\"po-breadcrumb-items\">\r\n    <li #dropdownIcon *ngIf=\"showDropdownToggle\" class=\"po-breadcrumb-item po-clickable\" (click)=\"toggleDropdown()\">\r\n      <span class=\"po-breadcrumb-icon-more po-icon po-icon-more\"></span>\r\n      <div class=\"po-breadcrumb-arrow\"></div>\r\n    </li>\r\n\r\n    <div *ngFor=\"let item of itemsView; let itemIndex = index\">\r\n      <po-breadcrumb-item\r\n        [p-action]=\"item.action\"\r\n        [p-label]=\"item.label\"\r\n        [p-link]=\"item.link\"\r\n        [p-item-active]=\"itemIndex === itemsView.length - 1\"\r\n      >\r\n      </po-breadcrumb-item>\r\n    </div>\r\n  </ul>\r\n\r\n  <po-breadcrumb-favorite\r\n    *ngIf=\"favoriteService\"\r\n    [p-favorite-service]=\"favoriteService\"\r\n    [p-item-active]=\"items[items.length - 1]\"\r\n    [p-params-service]=\"paramsService\"\r\n  >\r\n  </po-breadcrumb-favorite>\r\n\r\n  <po-breadcrumb-dropdown *ngIf=\"showDropdown\" [p-items]=\"dropdownItems\"> </po-breadcrumb-dropdown>\r\n</div>\r\n"
                },] }
    ];
    PoBreadcrumbComponent.ctorParameters = function () { return [
        { type: i0.IterableDiffers },
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    PoBreadcrumbComponent.propDecorators = {
        breadcrumbElement: [{ type: i0.ViewChild, args: ['breadcrumb', { read: i0.ElementRef, static: true },] }],
        dropdownIcon: [{ type: i0.ViewChild, args: ['dropdownIcon', { read: i0.ElementRef },] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que renderiza o dropdown do po-breadcrumb.
     */
    var PoBreadcrumbDropdownComponent = /** @class */ (function () {
        function PoBreadcrumbDropdownComponent() {
        }
        return PoBreadcrumbDropdownComponent;
    }());
    PoBreadcrumbDropdownComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-breadcrumb-dropdown',
                    template: "<ul class=\"po-breadcrumb-dropdown\">\r\n  <li class=\"po-breadcrumb-dropdown-item\" *ngFor=\"let item of items\" [routerLink]=\"item.link\">\r\n    {{ item.label }}\r\n  </li>\r\n</ul>\r\n"
                },] }
    ];
    PoBreadcrumbDropdownComponent.propDecorators = {
        items: [{ type: i0.Input, args: ['p-items',] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço utilizado para favoritar/desfavoritar uma url no componente po-breadcrumb.
     * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
     * objeto deve ser retornado.
     * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
     * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
     * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
     * junto com a requisição.
     *
     */
    var PoBreadcrumbFavoriteService = /** @class */ (function () {
        function PoBreadcrumbFavoriteService(http) {
            this.http = http;
        }
        Object.defineProperty(PoBreadcrumbFavoriteService.prototype, "url", {
            get: function () {
                return this._url;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoBreadcrumbFavoriteService.prototype, "bodyParams", {
            get: function () {
                return this._bodyParams;
            },
            enumerable: false,
            configurable: true
        });
        PoBreadcrumbFavoriteService.prototype.configService = function (url, params, item) {
            this._url = url;
            this._bodyParams = {
                isFavorite: false,
                url: item.link,
                params: params
            };
        };
        PoBreadcrumbFavoriteService.prototype.sendStatusFavorite = function (status) {
            this.bodyParams['isFavorite'] = status;
            return this.http.post(this.url, this.bodyParams);
        };
        PoBreadcrumbFavoriteService.prototype.getFavorite = function () {
            return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
        };
        return PoBreadcrumbFavoriteService;
    }());
    PoBreadcrumbFavoriteService.decorators = [
        { type: i0.Injectable }
    ];
    PoBreadcrumbFavoriteService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    /**
     * @description
     *
     * <a id="poLanguageDefault"></a>
     *
     *
     * A constante poLanguageDefault possui as linguagens de suporte padrão do Po-UI
     *
     * > Português, Inglês, Espanhol e Russo.
     *
     * @usedBy PoI18nModule
     */
    var poLanguageDefault = [
        { description: 'English', language: 'en' },
        { description: 'Español', language: 'es' },
        { description: 'Português', language: 'pt' },
        { description: 'Pусский', language: 'ru' }
    ];
    var ɵ0 = function (language) { return language.language; };
    /**
     * @description
     *
     * <a id="poLocales"></a>
     *
     *
     * A constante poLocales possui somente os códigos das linguagem padrão
     *
     * @usedBy PoI18nModule
     */
    var poLocales = poLanguageDefault.map(ɵ0);
    /**
     * @description
     *
     * <a id="poLocaleDefault"></a>
     *
     *
     * A constante poLocaleDefault possui o código da linguagem padrão do Po-UI
     *
     * @usedBy PoI18nModule
     */
    var poLocaleDefault = 'pt';
    /**
     * @description
     *
     * <a id="poLocaleDecimalSeparatorList"></a>
     *
     *
     * A constante poLocaleDecimalSeparatorList possui os separadores de decimal por linguagens de suporte padrão do Po-UI
     *
     * @usedBy PoI18nModule
     */
    var poLocaleDecimalSeparatorList = [
        { separator: '.', language: 'en' },
        { separator: ',', language: 'es' },
        { separator: ',', language: 'pt' },
        { separator: ',', language: 'ru' }
    ];
    /**
     * @description
     *
     * <a id="poLocaleDecimalSeparatorList"></a>
     *
     *
     * A constante poLocaleDecimalSeparatorList possui os separadores de decimal por linguagens de suporte padrão do Po-UI
     *
     * @usedBy PoI18nModule
     */
    var poLocaleThousandSeparatorList = [
        { separator: ',', language: 'en' },
        { separator: '.', language: 'es' },
        { separator: '.', language: 'pt' },
        { separator: ' ', language: 'ru' }
    ];

    /**
     * @deprecated
     * Utilize o método `getShortBrowserLanguage`.
     *
     * @description
     * Retorna idioma do browser ou o idioma padrão.
     */
    function browserLanguage() {
        return getShortBrowserLanguage();
    }
    /**
     * Converte e formata os bytes em formato mais legível para o usuário.
     *
     * Por exemplo:
     * - 31457280 em 30 MB.
     * - 21474836480 em 20 GB.
     * - 12.5666666 em 12.57 Bytes (duas casas decimais).
     *
     * @param bytes {number} Valor em bytes
     * @param decimals {number} Quantidade de casas decimais que terá após a conversão.
     */
    function formatBytes(bytes, decimals) {
        if (decimals === void 0) { decimals = 2; }
        if (!bytes) {
            return undefined;
        }
        var multiplier = 1024;
        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        var result = Math.floor(Math.log(bytes) / Math.log(multiplier));
        decimals = decimals < 0 ? 0 : decimals;
        return parseFloat((bytes / Math.pow(multiplier, result)).toFixed(decimals)) + " " + sizes[result];
    }
    /**
     * Retorna o idioma atual do navegador
     */
    function getBrowserLanguage() {
        // navigator.userLanguage is the value for IE10
        var language = navigator.language || navigator['userLanguage'];
        var shortLanguage = getShortLanguage(language);
        return poLocales.includes(shortLanguage) ? language : poLocaleDefault;
    }
    /**
     * Retorna o idioma do navegador, com somente as duas primeiras letras. Por exemplo: "pt" ou "es".
     *
     * Caso o valor retornado pelo navegador não estiver dentro dos idiomas suportados pelo PO,
     * será retornado a linguagem padrão (poLocaleDefault).
     */
    function getShortBrowserLanguage() {
        return getShortLanguage(getBrowserLanguage());
    }
    /**
     * Retorna o idioma com somente a abreviação do idioma (duas primeiras letras).
     * Por exemplo: "pt" ou "es".
     *
     * @param language {string} linguagem.
     *
     * @returns sigla do idioma padrão {string}.
     *
     * @default pt
     */
    function getShortLanguage(language) {
        return (language || poLocaleDefault).toLowerCase().substring(0, 2);
    }
    function isLanguage(value) {
        var languageRegex = new RegExp('^[a-z]{2}(-[a-z]{2})?$', 'i');
        return languageRegex.test(value);
    }
    /* istanbul ignore next */
    function reloadCurrentPage() {
        window.location.assign(location.href);
    }
    function convertToBoolean(val) {
        if (typeof val === 'string') {
            val = val.toLowerCase().trim();
            return val === 'true' || val === 'on' || val === '';
        }
        if (typeof val === 'number') {
            return val === 1;
        }
        return !!val;
    }
    function convertToInt(value, valueDefault) {
        var validNumber = parseInt(value, 10);
        var validDefaultValue = parseInt(valueDefault, 10);
        var defaultValue = validDefaultValue || validDefaultValue === 0 ? validDefaultValue : undefined;
        return validNumber || validNumber === 0 ? validNumber : defaultValue;
    }
    function isTypeof(object, type) {
        return typeof object === type;
    }
    /**
     *
     * @param fn Função que será executada dentro do contexto. Podendo ser o nome da função
     * ou a referência da mesma.
     *
     * @param context Contexto do qual a função será executada.
     */
    function callFunction(fn, context, param) {
        if (isTypeof(fn, 'function')) {
            fn.call(context, param);
        }
        else {
            context[fn](param);
        }
    }
    function convertIsoToDate(value, start, end) {
        if (value) {
            var day = parseInt(value.substring(8, 10), 10);
            var month = parseInt(value.substring(5, 7), 10);
            var year = parseInt(value.substring(0, 4), 10);
            if (start) {
                var date = new Date(year, month - 1, day, 0, 0, 0);
                setYearFrom0To100(date, year);
                return date;
            }
            else if (end) {
                var date = new Date(year, month - 1, day, 23, 59, 59);
                setYearFrom0To100(date, year);
                return date;
            }
            else {
                var milliseconds = Date.parse(value);
                var timezone = new Date().getTimezoneOffset() * 60000;
                return new Date(milliseconds + timezone);
            }
        }
    }
    function convertDateToISODate(date) {
        if (date) {
            var getMonth = date.getMonth() + 1;
            var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
            var month = getMonth < 10 ? '0' + getMonth : getMonth;
            var year = formatYear(date.getFullYear());
            return year + '-' + month + '-' + day;
        }
        else {
            return null;
        }
    }
    function convertDateToISOExtended(date, time) {
        if (date) {
            var getMonth = date.getMonth() + 1;
            var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
            var month = getMonth < 10 ? '0' + getMonth : getMonth;
            var year = formatYear(date.getFullYear());
            var dateString = date.toString();
            if (time !== null) {
                return year + '-' + month + '-' + day + time;
            }
            else {
                return (year +
                    '-' +
                    month +
                    '-' +
                    day +
                    'T' +
                    dateString.substring(16, 24) +
                    dateString.substring(28, 31) +
                    ':' +
                    dateString.substring(31, 33));
            }
        }
        else {
            return null;
        }
    }
    /**
     * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
     *
     * @param year Ano
     */
    function formatYear(year) {
        if (year >= 1000) {
            return year.toString();
        }
        if (year > 99 && year < 1000) {
            return "0" + year;
        }
        if (year > 9 && year < 100) {
            return "00" + year;
        }
        if (year >= 0 && year < 10) {
            return "000" + year;
        }
    }
    // Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
    function isIEOrEdge() {
        var userAgent = window.navigator.userAgent;
        return /msie\s|trident\/|edge\//i.test(userAgent);
    }
    // Verifica se o navegador em que está sendo usado é Internet Explorer
    function isIE() {
        var userAgent = window.navigator.userAgent;
        return /msie\s|trident/i.test(userAgent);
    }
    // Verifica se o navegador em que está sendo usado é Firefox
    function isFirefox() {
        var userAgent = window.navigator.userAgent;
        return userAgent.toLowerCase().indexOf('firefox') > -1;
    }
    // Verifica qual o dispositivo que está sendo usado
    function isMobile() {
        var userAgent = window.navigator.userAgent;
        return userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone/i);
    }
    function isEquals(value, comparedValue) {
        return JSON.stringify(value) === JSON.stringify(comparedValue);
    }
    function isKeyCodeEnter(event) {
        return event.keyCode === 13 || event.which === 13;
    }
    /**
     * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
     *
     * @param date Data
     * @param year Ano original
     */
    function setYearFrom0To100(date, year) {
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
    }
    function sortOptionsByProperty(options, property) {
        options.sort(function (optionA, optionB) {
            optionA = optionA[property].toString().toLowerCase();
            optionB = optionB[property].toString().toLowerCase();
            if (optionA < optionB) {
                return -1;
            }
            if (optionA > optionB) {
                return 1;
            }
            return 0;
        });
    }
    /**
     * Ordena o campos baseado no valor da propriedade `order`.
     *
     * Só serão aceitos valores com números inteiros maiores do que zero para a ordenação.
     *
     * Campos sem `order` ou com valores negativos, zerados ou inválidos
     * receberão o valor default e seguirão o posicionamento dentro do
     * array.
     *
     * @param fields campo que se deseja ordenar.
     * @param defaultOrdering valor que será utilizado para manter na posição do array.
     */
    function sortFields(fields, defaultOrdering) {
        if (fields === void 0) { fields = []; }
        if (defaultOrdering === void 0) { defaultOrdering = -1; }
        var resultClassification = { fieldAComesFirst: -1, fieldAComesAfter: 1, keepPositions: 0 };
        var isOrderValid = function (order) { return isTypeof(order, 'number') && order > 0; };
        var applyDefaultOrdering = function (order) { return (isOrderValid(order) ? order : defaultOrdering); };
        return fields.sort(function (fieldA, fieldB) {
            var orderA = applyDefaultOrdering(fieldA.order);
            var orderB = applyDefaultOrdering(fieldB.order);
            if (orderA === orderB) {
                return resultClassification.keepPositions;
            }
            if (orderA === defaultOrdering) {
                return resultClassification.fieldAComesAfter;
            }
            if (orderB === defaultOrdering) {
                return resultClassification.fieldAComesFirst;
            }
            return orderA - orderB;
        });
    }
    function removeDuplicatedOptions(list) {
        var _loop_1 = function (i) {
            if (i === 0) {
                return out_i_1 = i, "continue";
            }
            if (list.findIndex(function (op) { return op.value === list[i].value; }) !== i) {
                list.splice(i, 1);
                i--;
            }
            out_i_1 = i;
        };
        var out_i_1;
        for (var i = 0; i < list.length; i++) {
            _loop_1(i);
            i = out_i_1;
        }
    }
    function removeUndefinedAndNullOptions(list) {
        for (var i = 0; i < list.length; i++) {
            if (list[i].value === undefined || list[i].value === null) {
                list.splice(i, 1);
                i--;
            }
        }
    }
    function validValue(value) {
        return (value !== null && value !== undefined && value !== '') || value === false;
    }
    function isExternalLink(url) {
        return url ? url.startsWith('http') : false;
    }
    function openExternalLink(url) {
        window.open(url, '_blank');
    }
    function getFormattedLink(link) {
        var formattedLink = '';
        // Retira todos os pontos no começo da URL.
        if (link) {
            formattedLink = link.replace(/^(\.)+/g, '');
        }
        // Verifica se foi utilizado uma rota que não comece com barra.
        if (!formattedLink.startsWith('/')) {
            formattedLink = '/'.concat(formattedLink);
        }
        return formattedLink;
    }
    /**
     * Método responsável por ordenar dois valores.
     *
     * @param leftSide Primeiro valor a ser comparado.
     * @param rightSide Segundo valor a ser comparado.
     * @param ascending Determina se será em ordem ascendente ou descendente.
     */
    function sortValues(leftSide, rightSide, ascending) {
        if (ascending === void 0) { ascending = true; }
        var left = isTypeof(leftSide, 'string') ? leftSide.toLowerCase() : leftSide;
        var right = isTypeof(rightSide, 'string') ? rightSide.toLowerCase() : rightSide;
        var leftIsInvalid = left === null || left === undefined || Number.isNaN(left);
        var rightIsInvalid = right === null || right === undefined || Number.isNaN(right);
        if (ascending) {
            if (left < right || leftIsInvalid) {
                return -1;
            }
            else if (left > right || rightIsInvalid) {
                return 1;
            }
        }
        else if (ascending === false) {
            if (left < right || leftIsInvalid) {
                return 1;
            }
            else if (left > right || rightIsInvalid) {
                return -1;
            }
        }
        return 0;
    }
    function validateDateRange(date, dateStart, dateEnd) {
        if (dateStart && dateEnd) {
            return date >= dateStart && date <= dateEnd;
        }
        else if (dateStart && !dateEnd) {
            return date >= dateStart;
        }
        else if (!dateStart && dateEnd) {
            return date <= dateEnd;
        }
        else {
            return true;
        }
    }
    function uuid() {
        function hex4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return hex4() + hex4() + '-' + hex4() + '-' + hex4() + '-' + hex4() + '-' + hex4() + hex4() + hex4();
    }
    function capitalizeFirstLetter(text) {
        return "" + text.charAt(0).toUpperCase() + text.slice(1);
    }
    /**
     * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
     * origem.
     *
     * Exemplo:
     *
     * ```
     * const people = [
     *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
     *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
     *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
     * ];
     *
     * const properties = ['id', 'name'];
     *
     * const idAndName = mapArrayByProperties(people, properties);
     *
     * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
     * ```
     *
     * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
     *
     * ```
     * const customers = [
     *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
     *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
     *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
     * ];
     * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
     *
     * const pattern = mapArrayByProperties(customers, properties);
     * console.log(pattern);
     *
     * // [
     * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
     * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
     * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
     * // ]
     * ```
     *
     * @param items {Array<any>} Array de items original.
     * @param properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
     *
     * @returns Array<any>
     */
    function mapArrayByProperties(items, properties) {
        if (items === void 0) { items = []; }
        if (properties === void 0) { properties = []; }
        return items.map(function (item) { return mapObjectByProperties(item, properties); });
    }
    /**
     * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
     *
     * Exemplo:
     *
     * ```
     * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
     *
     * const properties = ['id', 'name'];
     *
     * const idAndName = mapObjectByProperties(person, properties);
     *
     * console.log(idAndName); // { id: 1, name: 'Fulano' }
     * ```
     *
     * @param object {Array<any>} Array de items original.
     * @param properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
     *
     * @returns Array<any>
     */
    function mapObjectByProperties(object, properties) {
        if (object === void 0) { object = {}; }
        if (properties === void 0) { properties = []; }
        var getSelectedProperties = function (selectedProperties, property) {
            var _b;
            return (Object.assign(Object.assign({}, selectedProperties), (_b = {}, _b[property] = object[property], _b)));
        };
        return properties.reduce(getSelectedProperties, {});
    }
    /**
     * Retorna os valores de um objeto dentro de um array.
     *
     * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
     *
     * @param object Objeto de onde será pego os valores.
     */
    function valuesFromObject(object) {
        if (object === void 0) { object = {}; }
        return Object.keys(object).map(function (property) { return object[property]; });
    }
    /**
     * Converte um arquivo em base64.
     *
     * @param file arquivo que será convertido.
     */
    function convertImageToBase64(file) {
        return new Promise(function (resolve, reject) {
            var reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = function () { return resolve(reader.result); };
            /* istanbul ignore next */
            reader.onerror = function (error) { return reject(error); };
        });
    }
    /**
     * Converte um número em decimal baseado na quantidade de casas decimais.
     *
     * Caso o valor seja inválido, será retornado o valor `undefined`.
     * Valores inválidos são: `false`, `NaN`, `strings` que não numéricas, `undefined` e `null`.
     *
     * @param number valor que será convertido
     * @param decimalsPlace quantidade de casas decimais
     */
    function convertNumberToDecimal(number, decimalsPlace) {
        var isValidValue = (number || number === 0) && !isNaN(number);
        var floatValue = isValidValue ? parseFloat(number) : undefined;
        try {
            return parseFloat(floatValue.toFixed(decimalsPlace));
        }
        catch (_a) {
            return floatValue;
        }
    }
    /**
     * Retorna uma copia do objeto sujo, sem as propriedades nulas ou indefinidas.
     * Retorna o objeto sem as propriedades que contém valores nulos ou indefinidos.
     *
     * @param dirtyObject
     */
    function clearObject(dirtyObject) {
        var cleanObject = {};
        Object.keys(dirtyObject).forEach(function (key) {
            if (dirtyObject[key] !== null && dirtyObject[key] !== undefined) {
                cleanObject[key] = dirtyObject[key];
            }
        });
        return cleanObject;
    }
    function validateObjectType(value) {
        return isTypeof(value, 'object') && !Array.isArray(value) ? value : undefined;
    }
    /**
     * Retorna os elementos DOM capazes de receber foco.
     *
     * > Atualmente são considerados "focáveis" os elementos DOM `input`, `select`,
     * `textarea`, `button` e `a`.
     *
     * @param parentElement Elemento DOM pai.
     * @returns Lista dos elementos DOM filhos "focáveis".
     */
    function getFocusableElements(parentElement) {
        var focusableElements = 'button:not([disabled]), [href], input, select, textarea, [tabindex]:not([tabindex="-1"]';
        return parentElement.querySelectorAll(focusableElements);
    }

    var poDefaultLanguage = 'PO_DEFAULT_LANGUAGE';
    var poLocaleKey = 'PO_USER_LOCALE';
    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço responsável por gerenciar as linguagens da aplicação.
     */
    var PoLanguageService = /** @class */ (function () {
        function PoLanguageService() {
        }
        Object.defineProperty(PoLanguageService.prototype, "languageDefault", {
            get: function () {
                return localStorage.getItem(poDefaultLanguage);
            },
            set: function (language) {
                if (language && isLanguage(language)) {
                    localStorage.setItem(poDefaultLanguage, language);
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @description
         *
         * Método responsável por retornar o idioma ativo.
         *
         * A busca do idioma será feita na seguinte ordem:
         *
         *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
         *
         *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
         * na propriedade `language` da interface `PoI18nConfigDefault`.
         *
         *   3 - o idioma do navegador utilizado.
         *
         * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
         *
         * **Retorno:** `string` com a sigla do idioma ativo.
         */
        PoLanguageService.prototype.getLanguage = function () {
            var language = localStorage.getItem(poLocaleKey) || this.languageDefault || getBrowserLanguage();
            return language && language.toLowerCase();
        };
        /**
         * @description
         *
         * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
         * do parâmetro `config`.
         *
         * **Retorno:** `string` com a sigla do idioma *default*.
         */
        PoLanguageService.prototype.getLanguageDefault = function () {
            return this.languageDefault;
        };
        /**
         * @description
         *
         * Método responsável por retornar a abreviação do idioma ativo na aplicação.
         *
         * @default `pt`
         *
         * **Retorno:** `string` com a sigla abreviada do idioma ativo.
         */
        PoLanguageService.prototype.getShortLanguage = function () {
            var language = this.getLanguage();
            var shortLanguage = getShortLanguage(language);
            return poLocales.includes(shortLanguage) ? shortLanguage : poLocaleDefault;
        };
        /**
         * @description
         *
         * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
         *
         * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
         *
         * @param language sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma,
         * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         */
        PoLanguageService.prototype.setLanguage = function (language) {
            if (!isLanguage(language)) {
                return;
            }
            localStorage.setItem(poLocaleKey, language.toLowerCase());
        };
        /**
         * @description
         *
         * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
         *
         * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
         *
         * @param language sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma,
         * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         */
        PoLanguageService.prototype.setLanguageDefault = function (language) {
            this.languageDefault = language;
        };
        /**
         * @description
         *
         * Método que retorna o separador
         *
         * @param language sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         */
        PoLanguageService.prototype.getNumberSeparators = function (language) {
            var _a, _b, _c, _d;
            language = language || this.getShortLanguage();
            var decimal = (_a = poLocaleDecimalSeparatorList.find(function (separator) { return separator.language === language; })) !== null && _a !== void 0 ? _a : {};
            var thousand = (_b = poLocaleThousandSeparatorList.find(function (separator) { return separator.language === language; })) !== null && _b !== void 0 ? _b : {};
            var decimalSeparator = (_c = decimal.separator) !== null && _c !== void 0 ? _c : ',';
            var thousandSeparator = (_d = thousand.separator) !== null && _d !== void 0 ? _d : '.';
            return { decimalSeparator: decimalSeparator, thousandSeparator: thousandSeparator };
        };
        return PoLanguageService;
    }());
    PoLanguageService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PoLanguageService_Factory() { return new PoLanguageService(); }, token: PoLanguageService, providedIn: "root" });
    PoLanguageService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PoLanguageService.ctorParameters = function () { return []; };

    var PoBreadcrumbLiterals = {
        en: {
            favorite: 'Favorite',
            unfavorite: 'Unfavorite'
        },
        es: {
            favorite: 'Favor',
            unfavorite: 'Desfavorecer'
        },
        pt: {
            favorite: 'Favoritar',
            unfavorite: 'Desfavoritar'
        },
        ru: {
            favorite: 'Любимый',
            unfavorite: 'Немилость'
        }
    };
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que renderiza o serviço de favoritar do po-breadcrumb.
     */
    var PoBreadcrumbFavoriteComponent = /** @class */ (function () {
        function PoBreadcrumbFavoriteComponent(service, languageService) {
            this.service = service;
            this.languageService = languageService;
            this.favorite = false;
            var language = languageService.getShortLanguage();
            this.literals = Object.assign({}, PoBreadcrumbLiterals[language]);
        }
        PoBreadcrumbFavoriteComponent.prototype.ngOnInit = function () {
            this.service.configService(this.favoriteService, this.paramsService, this.itemActive);
            this.getStatusFavorite();
        };
        PoBreadcrumbFavoriteComponent.prototype.ngOnDestroy = function () {
            if (this.getSubscription) {
                this.getSubscription.unsubscribe();
            }
            if (this.setSubscription) {
                this.setSubscription.unsubscribe();
            }
        };
        PoBreadcrumbFavoriteComponent.prototype.toggleFavoriteAction = function () {
            this.favorite ? this.setStatusFavorite(false) : this.setStatusFavorite(true);
        };
        PoBreadcrumbFavoriteComponent.prototype.getStatusFavorite = function () {
            var _this = this;
            this.getSubscription = this.service.getFavorite().subscribe(function (result) { return (_this.favorite = result.isFavorite); });
        };
        PoBreadcrumbFavoriteComponent.prototype.setStatusFavorite = function (status) {
            var _this = this;
            this.setSubscription = this.service
                .sendStatusFavorite(status)
                .subscribe(function (result) { return (_this.favorite = result.isFavorite); });
        };
        return PoBreadcrumbFavoriteComponent;
    }());
    PoBreadcrumbFavoriteComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-breadcrumb-favorite',
                    template: "<div class=\"po-breadcrumb-favorite po-clickable\" (click)=\"toggleFavoriteAction()\">\r\n  <span\r\n    class=\"po-icon po-icon-star po-breadcrumb-favorite-star po-clickable\"\r\n    [class.po-breadcrumb-favorite-star-active]=\"favorite\"\r\n  >\r\n  </span>\r\n\r\n  <span class=\"po-hidden-sm po-breadcrumb-favorite-label\" *ngIf=\"favorite\">{{ literals?.unfavorite }}</span>\r\n  <span class=\"po-hidden-sm po-breadcrumb-favorite-label\" *ngIf=\"!favorite\">{{ literals?.favorite }}</span>\r\n</div>\r\n",
                    providers: [PoBreadcrumbFavoriteService]
                },] }
    ];
    PoBreadcrumbFavoriteComponent.ctorParameters = function () { return [
        { type: PoBreadcrumbFavoriteService },
        { type: PoLanguageService }
    ]; };
    PoBreadcrumbFavoriteComponent.propDecorators = {
        favoriteService: [{ type: i0.Input, args: ['p-favorite-service',] }],
        itemActive: [{ type: i0.Input, args: ['p-item-active',] }],
        paramsService: [{ type: i0.Input, args: ['p-params-service',] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que renderiza cada item do po-breadcrumb.
     */
    var PoBreadcrumbItemComponent = /** @class */ (function () {
        function PoBreadcrumbItemComponent() {
            // Especifica se item é o link ativo.
            this.itemActive = false;
        }
        return PoBreadcrumbItemComponent;
    }());
    PoBreadcrumbItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-breadcrumb-item',
                    template: "<li\r\n  *ngIf=\"!itemActive\"\r\n  [class.po-breadcrumb-item]=\"link || action\"\r\n  [class.po-breadcrumb-item-unclickable]=\"!link && !action\"\r\n>\r\n  <a *ngIf=\"link\" [routerLink]=\"link\">\r\n    <label class=\"po-breadcrumb-label\">{{ label }}</label>\r\n    <div class=\"po-breadcrumb-arrow\"></div>\r\n  </a>\r\n\r\n  <a *ngIf=\"!link && action\" (click)=\"action(label)\">\r\n    <label class=\"po-breadcrumb-label\">{{ label }}</label>\r\n    <div class=\"po-breadcrumb-arrow\"></div>\r\n  </a>\r\n\r\n  <a *ngIf=\"!link && !action\">\r\n    <label class=\"po-breadcrumb-label\">{{ label }}</label>\r\n    <div class=\"po-breadcrumb-arrow\"></div>\r\n  </a>\r\n</li>\r\n\r\n<li *ngIf=\"itemActive\" class=\"po-breadcrumb-item-unclickable\">\r\n  <label class=\"po-breadcrumb-label\">{{ label }}</label>\r\n</li>\r\n"
                },] }
    ];
    PoBreadcrumbItemComponent.propDecorators = {
        action: [{ type: i0.Input, args: ['p-action',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        link: [{ type: i0.Input, args: ['p-link',] }],
        itemActive: [{ type: i0.Input, args: ['p-item-active',] }]
    };

    /**
     * @description
     *
     * Módulo do componente po-breadcrumb.
     *
     */
    var PoBreadcrumbModule = /** @class */ (function () {
        function PoBreadcrumbModule() {
        }
        return PoBreadcrumbModule;
    }());
    PoBreadcrumbModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, router.RouterModule],
                    declarations: [
                        PoBreadcrumbComponent,
                        PoBreadcrumbDropdownComponent,
                        PoBreadcrumbFavoriteComponent,
                        PoBreadcrumbItemComponent
                    ],
                    exports: [PoBreadcrumbComponent]
                },] }
    ];

    /**
     * @docsPrivate
     *
     * @usedBy PoButton
     *
     * @description
     *
     * Permite a exibição de ícones.
     */
    var PoIconComponent = /** @class */ (function () {
        function PoIconComponent() {
        }
        Object.defineProperty(PoIconComponent.prototype, "icon", {
            get: function () {
                return this._icon;
            },
            /**
             * Define o ícone a ser exibido.
             *
             * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
             * ```
             * <po-button p-icon="po-icon-user" p-label="PO button"></po-button>
             * ```
             * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
             * ```
             * <po-button p-icon="fa fa-podcast" p-label="PO button"></po-button>
             * ```
             * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
             * ```
             * <po-button [p-icon]="template" p-label="button template ionic"></po-button>
             *
             * <ng-template #template>
             *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
             * </ng-template>
             * ```
             * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.
             */
            set: function (value) {
                if (typeof value === 'string') {
                    this.addClasses(value);
                }
                else if (value instanceof i0.TemplateRef) {
                    this._icon = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        PoIconComponent.prototype.addClasses = function (value) {
            this.class = value.startsWith('po-icon-')
                ? (this.class = "po-icon " + value)
                : (this.class = "po-fonts-icon " + value);
        };
        return PoIconComponent;
    }());
    PoIconComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-icon',
                    template: "<ng-container *ngIf=\"class; then fontTemplate; else icon\"></ng-container>\r\n\r\n<ng-template #fontTemplate>\r\n  <i [class]=\"class\" aria-hidden=\"true\"></i>\r\n</ng-template>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoIconComponent.ctorParameters = function () { return []; };
    PoIconComponent.propDecorators = {
        icon: [{ type: i0.Input, args: ['p-icon',] }]
    };

    /**
     * @description
     *
     * Módulo do componente Po-Icon.
     */
    var PoIconModule = /** @class */ (function () {
        function PoIconModule() {
        }
        return PoIconModule;
    }());
    PoIconModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [PoIconComponent],
                    exports: [PoIconComponent]
                },] }
    ];

    var poLoadingOverlayLiteralsDefault = {
        en: {
            loading: 'Loading'
        },
        es: {
            loading: 'Cargando'
        },
        pt: {
            loading: 'Carregando'
        },
        ru: {
            loading: 'погрузка'
        }
    };
    /**
     *
     * @description
     *
     * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
     * enquanto aguarda a resposta de alguma requisição.
     */
    var PoLoadingOverlayBaseComponent = /** @class */ (function () {
        function PoLoadingOverlayBaseComponent(languageService) {
            this.languageService = languageService;
            this._screenLock = false;
            this.text = this.getTextDefault();
        }
        Object.defineProperty(PoLoadingOverlayBaseComponent.prototype, "screenLock", {
            get: function () {
                return this._screenLock;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define se o *overlay* será aplicado a um *container* ou a página inteira.
             *
             * Para utilizar o componente como um *container*, o elemento pai deverá receber uma posição relativa, por exemplo:
             *
             * ```
             * <div style="position: relative">
             *
             *  <po-chart [p-series]="[{ value: 10, category: 'Example' }]">
             *  </po-chart>
             *
             *  <po-loading-overlay>
             *  </po-loading-overlay>
             * </div>
             * ```
             *
             * @default `false`
             */
            set: function (screenLock) {
                this._screenLock = convertToBoolean(screenLock);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoLoadingOverlayBaseComponent.prototype, "text", {
            get: function () {
                return this._text;
            },
            /**
             * @optional
             *
             * @description
             *
             * Texto a ser exibido no componente.
             *
             * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
             *
             * @default `Carregando`
             */
            set: function (value) {
                this._text = value || this.getTextDefault();
            },
            enumerable: false,
            configurable: true
        });
        PoLoadingOverlayBaseComponent.prototype.getTextDefault = function () {
            var language = this.languageService.getShortLanguage();
            return poLoadingOverlayLiteralsDefault[language].loading;
        };
        return PoLoadingOverlayBaseComponent;
    }());
    PoLoadingOverlayBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoLoadingOverlayBaseComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoLoadingOverlayBaseComponent.propDecorators = {
        screenLock: [{ type: i0.Input, args: ['p-screen-lock',] }],
        text: [{ type: i0.Input, args: ['p-text',] }]
    };

    /**
     *
     * @docsExtends PoLoadingOverlayBaseComponent
     *
     * @example
     *
     * <example name="po-loading-overlay-basic" title="PO Loading Overlay Basic">
     *  <file name="sample-po-loading-overlay-basic/sample-po-loading-overlay-basic.component.html"> </file>
     *  <file name="sample-po-loading-overlay-basic/sample-po-loading-overlay-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-loading-overlay-labs" title="PO Loading Overlay Labs">
     *  <file name="sample-po-loading-overlay-labs/sample-po-loading-overlay-labs.component.html"> </file>
     *  <file name="sample-po-loading-overlay-labs/sample-po-loading-overlay-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-loading-overlay-connection-test" title="PO Loading Overlay - Connection Test">
     *  <file name="sample-po-loading-overlay-connection-test/sample-po-loading-overlay-connection-test.component.html"> </file>
     *  <file name="sample-po-loading-overlay-connection-test/sample-po-loading-overlay-connection-test.component.ts"> </file>
     * </example>
     */
    var PoLoadingOverlayComponent = /** @class */ (function (_super) {
        __extends(PoLoadingOverlayComponent, _super);
        function PoLoadingOverlayComponent(changeDetector, languageService) {
            var _this = _super.call(this, languageService) || this;
            _this.changeDetector = changeDetector;
            return _this;
        }
        return PoLoadingOverlayComponent;
    }(PoLoadingOverlayBaseComponent));
    PoLoadingOverlayComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-loading-overlay',
                    template: "<div [class.po-overlay-absolute]=\"!screenLock\" [class.po-overlay-fixed]=\"screenLock\">\r\n  <po-loading class=\"po-loading-overlay-content\" [p-text]=\"text\"></po-loading>\r\n</div>\r\n"
                },] }
    ];
    PoLoadingOverlayComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: PoLanguageService }
    ]; };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que exibe um ícone de carregamento de conteúdo. A cor padrão para ele é a primária conforme o tema utilizado.
     * É possível alterá-la para um tom cinza conforme a necessidade.
     */
    var PoLoadingIconComponent = /** @class */ (function () {
        function PoLoadingIconComponent() {
        }
        Object.defineProperty(PoLoadingIconComponent.prototype, "neutralColor", {
            get: function () {
                return this._neutralColor;
            },
            /**
             * @optional
             *
             * @description
             *
             * Definição para cor neutra (cinza) para o ícone de carregamento.
             *
             * @default `false`
             */
            set: function (value) {
                this._neutralColor = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        return PoLoadingIconComponent;
    }());
    PoLoadingIconComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-loading-icon',
                    template: "<div class=\"po-loading-icon\" [class.po-loading-icon-neutral-color]=\"neutralColor\">\r\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-1\"></span>\r\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-2\"></span>\r\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-3\"></span>\r\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-4\"></span>\r\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-5\"></span>\r\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-6\"></span>\r\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-7\"></span>\r\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-8\"></span>\r\n</div>\r\n"
                },] }
    ];
    PoLoadingIconComponent.propDecorators = {
        neutralColor: [{ type: i0.Input, args: ['p-neutral-color',] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Este componente tem o objetivo de mostrar visualmente aos usuários que a aplicação está processando
     * ou aguardando a resposta de alguma requisição.
     */
    var PoLoadingBaseComponent = /** @class */ (function () {
        function PoLoadingBaseComponent() {
            /**
             * Texto a ser exibido no componente.
             */
            this.text = 'Carregando';
        }
        return PoLoadingBaseComponent;
    }());
    PoLoadingBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoLoadingBaseComponent.propDecorators = {
        text: [{ type: i0.Input, args: ['p-text',] }]
    };

    /**
     * @docsPrivate
     *
     * @docsExtends PoLoadingBaseComponent
     */
    var PoLoadingComponent = /** @class */ (function (_super) {
        __extends(PoLoadingComponent, _super);
        function PoLoadingComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PoLoadingComponent;
    }(PoLoadingBaseComponent));
    PoLoadingComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-loading',
                    template: "<div class=\"po-loading\">\r\n  <po-loading-icon></po-loading-icon>\r\n  <span class=\"po-loading-label po-text-ellipsis\" *ngIf=\"text\">{{ text }}</span>\r\n</div>\r\n"
                },] }
    ];

    /**
     * @description
     *
     * Módulo do serviço `po-language`.
     */
    var PoLanguageModule = /** @class */ (function () {
        function PoLanguageModule() {
        }
        return PoLanguageModule;
    }());
    PoLanguageModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [PoLanguageService]
                },] }
    ];

    /**
     *
     * @description
     *
     * Módulo do componente po-loading-overlay.
     */
    var PoLoadingModule = /** @class */ (function () {
        function PoLoadingModule() {
        }
        return PoLoadingModule;
    }());
    PoLoadingModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, PoLanguageModule],
                    declarations: [PoLoadingComponent, PoLoadingIconComponent, PoLoadingOverlayComponent],
                    exports: [PoLoadingComponent, PoLoadingIconComponent, PoLoadingOverlayComponent]
                },] }
    ];

    /**
     * Função utilizada pela fábrica de decoradores para validar uma propriedade de uma classe durante
     * o ciclo de vida do Angular.
     *
     * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
     * @param lifecycleName clico de vida que se deseja executar com a validação.
     * @param callback função que será executada para validadar a propriedade.
     */
    function validatePropertyOnLifeCycle(decoratorProperties, lifecycleName, callback) {
        var target = decoratorProperties.target, property = decoratorProperties.property;
        var emptyFunction = function () { };
        var lifecycleFunctionClone = target[lifecycleName] || emptyFunction;
        Object.defineProperty(target, lifecycleName, {
            value: function () {
                callback.call(this, property, target);
                lifecycleFunctionClone.call(this);
            }
        });
    }
    /**
     * Função utilizada pela fábrica de decoradores para alterar/manipular o valor de uma propriedade.
     *
     * > Este decorator irá criar os métodos get e set internamente. Portanto,
     * é importante **não** criar nomes privados para as propriedades utilizando
     * `$$__nomeDaPropriedade` ao utilizar este decorator, pois ela será sobrescrita pela propriedade privada
     * criada pelo decorator.
     *
     * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
     * @param decoratorName nome do decorator
     * @param callback função que será executada para alterar o valor da propriedade
     */
    function changeValueByCallback(decoratorProperties, decoratorName, callback) {
        var target = decoratorProperties.target, property = decoratorProperties.property, originalDescriptor = decoratorProperties.originalDescriptor;
        var privatePropertyName = createPrivateProperty(target, property, decoratorName);
        return {
            get: getter(originalDescriptor, privatePropertyName),
            set: setter(originalDescriptor, callback, privatePropertyName)
        };
    }
    function setter(originalDescriptor, callback, privatePropertyName) {
        return function (value) {
            if (originalDescriptor && originalDescriptor.set) {
                originalDescriptor.set.bind(this)(callback(value));
            }
            this[privatePropertyName] = callback(value);
        };
    }
    function getter(originalDescriptor, privatePropName) {
        return function () {
            return originalDescriptor && originalDescriptor.get ? originalDescriptor.get.bind(this)() : this[privatePropName];
        };
    }
    function createPrivateProperty(target, propertyName, decoratorName) {
        var privatePropName = "$$__" + propertyName;
        if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {
            console.warn("The prop \"" + privatePropName + "\" is already exist, it will be overrided by " + decoratorName + " decorator.");
        }
        Object.defineProperty(target, privatePropName, {
            configurable: true,
            writable: true
        });
        return privatePropName;
    }

    /**
     * Converte o valor de um campo de entrada para booleano.
     *
     * Forma de utilização:
     *
     * ```
     * @Input('p-loading') @InputBoolean() loading: boolean;
     * ```
     */
    function InputBoolean() {
        return function (target, property, originalDescriptor) {
            var decoratorProperties = { target: target, property: property, originalDescriptor: originalDescriptor };
            return changeValueByCallback(decoratorProperties, 'InputBoolean', convertToBoolean);
        };
    }

    /**
     * @docsPrivate
     *
     * @description
     *
     * Verifica se uma entrada de um componente foi preenchida.
     *
     * Na ausência da propriedade o decorator irá disparar um warn no console
     * do navegador do usuário.
     *
     * > Esta verificação é feita apenas no ngOnInit do componente.
     *
     * Forma de utilização:
     * ```
     * @Input('p-label') @InputRequired() label: string;
     * ```
     *
     * Referência:
     * https://netbasal.com/how-to-add-angular-component-input-validation-b078a30af97f
     * https://medium.com/@abdelelmedny/angular-input-decorators-5d38089070aa
     */
    function InputRequired() {
        return function (target, property) {
            var decoratorProperties = { target: target, property: property };
            validatePropertyOnLifeCycle(decoratorProperties, 'ngOnInit', validateProperty);
        };
    }
    function validateProperty(property, target) {
        if (this[property] == null) {
            console.warn(target.constructor.name + ": " + property + " is required, but was not provided");
        }
    }

    var PO_BUTTON_TYPES = ['default', 'primary', 'danger', 'link'];
    var PO_BUTTON_TYPE_DEFAULT = 'default';
    /**
     * @description
     *
     * O `po-button` permite que o usuário execute ações predefinidas pelo desenvolvedor.
     *
     * Através dos tipos, é possível identificar a importância de cada ação, sendo ela primária (`primary`) ou até mesmo uma
     * ação irreversível (`danger`), como a exclusão de um registro.
     *
     * #### Boas práticas
     *
     * - Evite `labels` extensos que quebram o layout do `po-button`, use `labels` diretos, curtos e intuitivos.
     * - Utilize apenas um `po-button` configurado como `primary` por página.
     * - Para ações irreversíveis use sempre o tipo `danger`.
     */
    var PoButtonBaseComponent = /** @class */ (function () {
        function PoButtonBaseComponent() {
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             * > Caso mais de um elemento seja configurado com essa propriedade,
             * o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /** Ação que será executada quando o usuário clicar sobre o `po-button`. */
            this.click = new i0.EventEmitter();
            this._disabled = false;
            this._loading = false;
            this._small = false;
            this._type = 'default';
        }
        Object.defineProperty(PoButtonBaseComponent.prototype, "loading", {
            get: function () {
                return this._loading;
            },
            /**
             * @optional
             *
             * @description
             *
             * Exibe um ícone de carregamento à esquerda do _label_ do botão.
             *
             * > Quando esta propriedade estiver habilitada, desabilitará o botão.
             *
             * @default `false`
             */
            set: function (value) {
                this._loading = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoButtonBaseComponent.prototype, "small", {
            get: function () {
                return this._small;
            },
            /**
             * @optional
             *
             * @description
             *
             * Deixa o botão menor.
             *
             * @default `false`
             */
            set: function (value) {
                this._small = value === '' ? true : convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoButtonBaseComponent.prototype, "type", {
            get: function () {
                return this._type;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o estilo do `po-button`.
             *
             * Valore válidos:
             *  - `default`: estilo padrão do `po-button`.
             *  - `primary`: deixa o `po-button` com destaque, deve ser usado para ações primárias.
             *  - `danger`: deve ser usado para ações que o usuário precisa ter cuidado ao executa-lá.
             *  - `link`: o `po-button` recebe o estilo de um link.
             *
             * @default `default`
             */
            set: function (value) {
                this._type = PO_BUTTON_TYPES.includes(value) ? value : PO_BUTTON_TYPE_DEFAULT;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoButtonBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o `po-button` e não permite que o usuário interaja com o mesmo.
             *
             * @default `false`
             */
            set: function (value) {
                this._disabled = value === '' ? true : convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        return PoButtonBaseComponent;
    }());
    PoButtonBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoButtonBaseComponent.propDecorators = {
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        icon: [{ type: i0.Input, args: ['p-icon',] }],
        click: [{ type: i0.Output, args: ['p-click',] }],
        loading: [{ type: i0.Input, args: ['p-loading',] }],
        small: [{ type: i0.Input, args: ['p-small',] }],
        type: [{ type: i0.Input, args: ['p-type',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }]
    };
    __decorate([
        InputBoolean()
    ], PoButtonBaseComponent.prototype, "autoFocus", void 0);

    /**
     * @docsExtends PoButtonBaseComponent
     *
     * @example
     *
     * <example name="po-button-basic" title="PO Button Basic">
     *  <file name="sample-po-button-basic/sample-po-button-basic.component.html"> </file>
     *  <file name="sample-po-button-basic/sample-po-button-basic.component.ts"> </file>
     *  <file name="sample-po-button-basic/sample-po-button-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-button-basic/sample-po-button-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="po-button-labs" title="PO Button Labs">
     *  <file name="sample-po-button-labs/sample-po-button-labs.component.html"> </file>
     *  <file name="sample-po-button-labs/sample-po-button-labs.component.ts"> </file>
     *  <file name="sample-po-button-labs/sample-po-button-labs.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-button-labs/sample-po-button-labs.component.po.ts"> </file>
     * </example>
     *
     * <example name="po-button-social-network" title="PO Button Social Network">
     *  <file name="sample-po-button-social-network/sample-po-button-social-network.component.html"> </file>
     *  <file name="sample-po-button-social-network/sample-po-button-social-network.component.ts"> </file>
     * </example>
     */
    var PoButtonComponent = /** @class */ (function (_super) {
        __extends(PoButtonComponent, _super);
        function PoButtonComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoButtonComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoButtonComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoButtonComponent, { static: true }) button: PoButtonComponent;
         *
         * focusButton() {
         *   this.button.focus();
         * }
         * ```
         */
        PoButtonComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.buttonElement.nativeElement.focus();
            }
        };
        PoButtonComponent.prototype.onClick = function () {
            this.click.emit(null);
        };
        return PoButtonComponent;
    }(PoButtonBaseComponent));
    PoButtonComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-button',
                    template: "<button\r\n  #button\r\n  class=\"po-button po-text-ellipsis\"\r\n  type=\"button\"\r\n  [class.po-button-danger]=\"type === 'danger'\"\r\n  [class.po-button-link]=\"type === 'link'\"\r\n  [class.po-button-primary]=\"type === 'primary'\"\r\n  [class.po-button-sm]=\"small\"\r\n  [class.po-clickable]=\"type === 'link'\"\r\n  [disabled]=\"disabled || loading\"\r\n  (click)=\"onClick()\"\r\n>\r\n  <div *ngIf=\"loading\" class=\"po-button-loading-icon\">\r\n    <po-loading-icon p-neutral-color></po-loading-icon>\r\n  </div>\r\n\r\n  <po-icon *ngIf=\"icon\" class=\"po-button-icon\" [p-icon]=\"icon\"></po-icon>\r\n  <span *ngIf=\"label\" class=\"po-button-label\">{{ label }}</span>\r\n</button>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoButtonComponent.propDecorators = {
        buttonElement: [{ type: i0.ViewChild, args: ['button', { static: true },] }]
    };

    /**
     * @description
     *
     * Módulo do componente po-button.
     */
    var PoButtonModule = /** @class */ (function () {
        function PoButtonModule() {
        }
        return PoButtonModule;
    }());
    PoButtonModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, PoLoadingModule, PoIconModule],
                    declarations: [PoButtonComponent],
                    exports: [PoButtonComponent]
                },] }
    ];

    // Array de posições.
    var PO_CONTROL_POSITIONS = [
        'right',
        'right-top',
        'right-bottom',
        'top',
        'top-left',
        'top-right',
        'left',
        'left-top',
        'left-bottom',
        'bottom',
        'bottom-left',
        'bottom-right'
    ];

    var CONTENT_MAX_LENGTH = 140;
    var PO_TOOLTIP_POSITION_DEFAULT = 'bottom';
    /**
     * @description
     *
     * A diretiva po-tooltip deve ser utilizada para oferecer informações adicionais quando os usuários
     * passam o mouse sobre o elemento alvo ao qual ela está atribuída.
     *
     * O conteúdo é formado por um pequeno texto que deve contribuir para uma tomada de decisão ou
     * orientação do usuário. A ativação dele pode estar em qualquer componente ou tag HTML.
     *
     * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como
     * conteúdo deve-se utilizar o [**po-popover**](https://po-ui.io/documentation/po-popover?view=doc).
     */
    var PoTooltipBaseDirective = /** @class */ (function () {
        function PoTooltipBaseDirective() {
            /**
             * @optional
             *
             * @description
             *
             * Define que o po-tooltip será incluido no body e não dentro do elemento ao qual o tooltip foi especificado.
             * Opção necessária para o caso de uso de tooltip em um elemento SVG.
             *
             * @default `false`
             */
            this.appendInBody = false;
            this._tooltipPosition = 'bottom';
            this._displayTooltip = false;
            this._tooltip = '';
        }
        Object.defineProperty(PoTooltipBaseDirective.prototype, "tooltip", {
            get: function () {
                return this._tooltip;
            },
            /**
             * @description
             *
             * Habilita e atribui um texto ao po-tooltip, com limitação de 140 caracteres.
             */
            set: function (tooltip) {
                if (tooltip && tooltip.length > CONTENT_MAX_LENGTH) {
                    this._tooltip = tooltip.substring(0, CONTENT_MAX_LENGTH);
                }
                else {
                    this._tooltip = tooltip;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTooltipBaseDirective.prototype, "tooltipPosition", {
            get: function () {
                return this._tooltipPosition;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a posição que o po-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
             * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
             * automaticamente para se adequar a tela, caso necessário.
             *
             * Posições válidas:
             * - `right`: Posiciona o po-tooltip no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o po-tooltip no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o po-tooltip no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o po-tooltip abaixo do componente alvo.
             * - `bottom-left`: Posiciona o po-tooltip abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o po-tooltip abaixo e à direita do componente alvo.
             * - `left`: Posiciona o po-tooltip no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o po-tooltip no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o po-tooltip no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o po-tooltip acima do componente alvo.
             * - `top-right`: Posiciona o po-tooltip acima e à direita do componente alvo.
             * - `top-left`: Posiciona o po-tooltip acima e à esquerda do componente alvo.
             *
             * @default bottom
             */
            set: function (position) {
                this._tooltipPosition = PO_CONTROL_POSITIONS.includes(position) ? position : PO_TOOLTIP_POSITION_DEFAULT;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTooltipBaseDirective.prototype, "displayTooltip", {
            get: function () {
                return this._displayTooltip;
            },
            set: function (value) {
                this._displayTooltip = value;
                this._displayTooltip ? this.addTooltipAction() : this.removeTooltipAction();
            },
            enumerable: false,
            configurable: true
        });
        return PoTooltipBaseDirective;
    }());
    PoTooltipBaseDirective.decorators = [
        { type: i0.Directive }
    ];
    PoTooltipBaseDirective.propDecorators = {
        appendInBody: [{ type: i0.Input, args: ['p-append-in-body',] }],
        tooltip: [{ type: i0.Input, args: ['p-tooltip',] }],
        tooltipPosition: [{ type: i0.Input, args: ['p-tooltip-position',] }],
        displayTooltip: [{ type: i0.Input, args: ['p-display-tooltip',] }]
    };
    __decorate([
        InputBoolean()
    ], PoTooltipBaseDirective.prototype, "appendInBody", void 0);
    __decorate([
        InputBoolean()
    ], PoTooltipBaseDirective.prototype, "displayTooltip", null);

    /**
     * @docsPrivate
     * @description
     *
     * Serviço responsável por gerenciar as posições de um elemento em relação a um elemento alvo. Ele pode receber as
     * seguintes posições:
     *
     * - `right`: Posiciona o elemento no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o elemento no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o elemento no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o elemento abaixo do componente alvo.
     * - `bottom-left`: Posiciona o elemento abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o elemento abaixo e à direita do componente alvo.
     * - `left`: Posiciona o elemento no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o elemento no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o elemento no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o elemento acima do componente alvo.
     * - `top-right`: Posiciona o elemento acima e à direita do componente alvo.
     * - `top-left`: Posiciona o elemento acima e à esquerda do componente alvo.
     *
     * Caso o elemento não caiba na tela na posição indicada ele será rotacionado automaticamente para se adequar,
     * inicialmente no lado definido como padrão e em seguida seguindo o sentido horário.
     */
    var poControlPositionSidesDefault = [
        'bottom',
        'bottom-left',
        'bottom-right',
        'left',
        'left-top',
        'left-bottom',
        'top',
        'top-right',
        'top-left',
        'right',
        'right-bottom',
        'right-top'
    ];
    var PoControlPositionService = /** @class */ (function () {
        function PoControlPositionService() {
            this.differenceDiagonalToWidthArrow = 3;
            this.isSetElementWidth = false;
            // offset da seta em relação ao canto do componente
            this.offsetArrow = 12;
        }
        /**
         * @description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
         *
         * @param value posição para exibição do elemento
         */
        PoControlPositionService.prototype.adjustPosition = function (value) {
            var position = value || 'bottom';
            this.elementPosition(position);
            this.customPositions && this.customPositions.length
                ? this.adjustCustomPosition(position)
                : this.adjustDefaultPosition(position);
        };
        /**
         * @description Retorna a direção da seta, conforme a posição do elemento.
         */
        PoControlPositionService.prototype.getArrowDirection = function () {
            return this.arrowDirection;
        };
        /**
         * @description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
         *
         * @param element elemento que será exibido
         * @param elementOffset offSet do elemento
         * @param targetElement elemento de onde deve partir a exibição
         * @param customPositions posições que sobrescreve as posições padrões
         * @param isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
         * @param isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
         */
        PoControlPositionService.prototype.setElements = function (element, elementOffset, targetElement, customPositions, isSetElementWidth, isCornerAligned) {
            if (isSetElementWidth === void 0) { isSetElementWidth = false; }
            if (isCornerAligned === void 0) { isCornerAligned = false; }
            this.element = element instanceof i0.ElementRef ? element.nativeElement : element;
            this.targetElement = targetElement instanceof i0.ElementRef ? targetElement.nativeElement : targetElement;
            this.elementOffset = elementOffset;
            this.customPositions = customPositions;
            this.isSetElementWidth = isSetElementWidth;
            this.isCornerAligned = isCornerAligned;
        };
        PoControlPositionService.prototype.adjustCustomPosition = function (position) {
            var positionLength = this.customPositions.length;
            var sidesCount = 0;
            while (sidesCount++ < positionLength) {
                if (this.overflowAllSides(position)) {
                    position = this.nextPosition(position, this.customPositions);
                    this.elementPosition(position);
                }
            }
        };
        PoControlPositionService.prototype.adjustDefaultPosition = function (position) {
            var mainPositions = this.getMainPositions();
            var mainPositionLength = mainPositions.length;
            var mainSidesCount = 0;
            while (mainSidesCount++ < mainPositionLength) {
                var mainPosition = this.getMainPosition(position);
                this.elementPosition(position);
                if (this.overflowMain(mainPosition)) {
                    position = this.nextPosition(mainPosition, mainPositions);
                    continue;
                }
                else if (this.overflowAllSides(position)) {
                    this.verifySubPositions(position);
                    return;
                }
                return;
            }
        };
        PoControlPositionService.prototype.elementPosition = function (position) {
            this.isCornerAligned ? this.setAlignedElementPosition(position) : this.setElementPosition(position);
        };
        PoControlPositionService.prototype.getMainPosition = function (position) {
            return position.indexOf('-') > -1 ? position.substring(0, position.indexOf('-')) : position;
        };
        PoControlPositionService.prototype.getMainPositions = function () {
            var defaultMainPositions = ['top', 'right', 'bottom', 'left'];
            return this.customPositions && this.customPositions.length
                ? this.getMainPositionsByCustomPositions(this.customPositions)
                : defaultMainPositions;
        };
        PoControlPositionService.prototype.getMainPositionsByCustomPositions = function (customPositions) {
            var mainPositions = [];
            var customPositionsLength = customPositions.length;
            for (var i = 0; i < customPositionsLength; i++) {
                var position = customPositions[i];
                var mainPosition = this.getMainPosition(position);
                if (!mainPositions.includes(mainPosition)) {
                    mainPositions.push(mainPosition);
                }
            }
            return mainPositions;
        };
        PoControlPositionService.prototype.getOverflows = function () {
            var sizesAndPositions = this.getSizesAndPositions();
            return {
                right: sizesAndPositions.element.right > sizesAndPositions.window.innerWidth,
                top: sizesAndPositions.element.top <= 0,
                left: sizesAndPositions.element.left <= 0,
                bottom: sizesAndPositions.element.bottom > sizesAndPositions.window.innerHeight
            };
        };
        PoControlPositionService.prototype.getSizesAndPositions = function () {
            return {
                window: {
                    scrollY: window.scrollY,
                    scrollX: window.scrollX,
                    innerWidth: window.innerWidth,
                    innerHeight: window.innerHeight
                },
                element: this.element.getBoundingClientRect(),
                target: this.targetElement ? this.targetElement.getBoundingClientRect() : { top: 0, bottom: 0, right: 0, left: 0 }
            };
        };
        PoControlPositionService.prototype.nextPosition = function (position, positions) {
            if (positions === void 0) { positions = []; }
            var index = positions.indexOf(position);
            var nextIndex = index + 1;
            if (index > -1 && nextIndex < positions.length) {
                return positions[nextIndex];
            }
            else {
                return positions[0];
            }
        };
        PoControlPositionService.prototype.overflowAllSides = function (position) {
            var overflows = this.getOverflows();
            switch (position) {
                case 'top':
                    return overflows.top || overflows.right || overflows.left;
                case 'top-right':
                    return overflows.top || overflows.right || overflows.left;
                case 'top-left':
                    return overflows.top || overflows.left || overflows.right;
                case 'right':
                    return overflows.right || overflows.top || overflows.bottom;
                case 'right-top':
                    return overflows.right || overflows.top;
                case 'right-bottom':
                    return overflows.right || overflows.bottom;
                case 'bottom':
                    return overflows.bottom || overflows.right || overflows.left;
                case 'bottom-right':
                    return overflows.bottom || overflows.right || overflows.left;
                case 'bottom-left':
                    return overflows.bottom || overflows.left || overflows.right;
                case 'left':
                    return overflows.left || overflows.top || overflows.bottom;
                case 'left-top':
                    return overflows.left || overflows.top;
                case 'left-bottom':
                    return overflows.left || overflows.bottom;
            }
        };
        PoControlPositionService.prototype.overflowMain = function (position) {
            var overflows = this.getOverflows();
            switch (position) {
                case 'top':
                    return overflows.top;
                case 'right':
                    return overflows.right;
                case 'bottom':
                    return overflows.bottom;
                case 'left':
                    return overflows.left;
            }
        };
        PoControlPositionService.prototype.setAlignedArrowDirection = function (elementPosition) {
            switch (elementPosition) {
                case 'top-left':
                    return 'bottom-left';
                case 'top-right':
                    return 'bottom-right';
                case 'bottom-right':
                    return 'top-right';
                case 'bottom-left':
                    return 'top-left';
            }
        };
        PoControlPositionService.prototype.setAlignedBottomPositions = function (displacement, sizesAndPositions) {
            this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
            this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
        };
        PoControlPositionService.prototype.setAlignedElementPosition = function (position) {
            this.setElementWidth();
            var sizesAndPositions = this.getSizesAndPositions();
            switch (position) {
                case 'bottom-left':
                    this.setAlignedBottomPositions(0, sizesAndPositions);
                    break;
                case 'bottom-right':
                    this.setAlignedBottomPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                    break;
                case 'top-left':
                    this.setAlignedTopPositions(0, sizesAndPositions);
                    break;
                case 'top-right':
                    this.setAlignedTopPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                    break;
            }
            this.arrowDirection = this.setAlignedArrowDirection(position);
        };
        PoControlPositionService.prototype.setAlignedTopPositions = function (displacement, sizesAndPositions) {
            this.element.style.top =
                sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
            this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
        };
        PoControlPositionService.prototype.setArrowDirection = function (elementPosition) {
            switch (elementPosition) {
                case 'top':
                    return 'bottom';
                case 'top-left':
                    return 'bottom-right';
                case 'top-right':
                    return 'bottom-left';
                case 'right':
                    return 'left';
                case 'right-top':
                    return 'left-bottom';
                case 'right-bottom':
                    return 'left-top';
                case 'bottom':
                    return 'top';
                case 'bottom-right':
                    return 'top-left';
                case 'bottom-left':
                    return 'top-right';
                case 'left':
                    return 'right';
                case 'left-bottom':
                    return 'right-top';
                case 'left-top':
                    return 'right-bottom';
            }
        };
        PoControlPositionService.prototype.setBottomPositions = function (displacement, sizesAndPositions) {
            this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
            this.element.style.left = sizesAndPositions.target.left + sizesAndPositions.target.width / 2 - displacement + 'px';
        };
        PoControlPositionService.prototype.setElementPosition = function (position) {
            this.setElementWidth();
            var sizesAndPositions = this.getSizesAndPositions();
            switch (position) {
                case 'top':
                    this.setTopPositions(sizesAndPositions.element.width / 2, sizesAndPositions);
                    break;
                case 'top-left':
                    this.setTopPositions(sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow, sizesAndPositions);
                    break;
                case 'top-right':
                    this.setTopPositions(this.offsetArrow + this.differenceDiagonalToWidthArrow, sizesAndPositions);
                    break;
                case 'right':
                    this.setRightPositions(sizesAndPositions.element.height / 2, sizesAndPositions);
                    break;
                case 'right-top':
                    this.setRightPositions(sizesAndPositions.element.height - this.offsetArrow - this.differenceDiagonalToWidthArrow, sizesAndPositions);
                    break;
                case 'right-bottom':
                    this.setRightPositions(this.offsetArrow, sizesAndPositions);
                    break;
                case 'bottom':
                    this.setBottomPositions(sizesAndPositions.element.width / 2, sizesAndPositions);
                    break;
                case 'bottom-right':
                    this.setBottomPositions(this.offsetArrow + this.differenceDiagonalToWidthArrow, sizesAndPositions);
                    break;
                case 'bottom-left':
                    this.setBottomPositions(sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow, sizesAndPositions);
                    break;
                case 'left':
                    this.setLeftPositions(sizesAndPositions.element.height / 2, sizesAndPositions);
                    break;
                case 'left-bottom':
                    this.setLeftPositions(this.offsetArrow, sizesAndPositions);
                    break;
                case 'left-top':
                    this.setLeftPositions(sizesAndPositions.element.height - this.offsetArrow, sizesAndPositions);
                    break;
            }
            this.arrowDirection = this.setArrowDirection(position);
        };
        PoControlPositionService.prototype.setElementWidth = function () {
            if (this.isSetElementWidth && this.targetElement) {
                this.element.style.width = this.targetElement.clientWidth + "px";
            }
        };
        PoControlPositionService.prototype.setLeftPositions = function (displacement, sizesAndPositions) {
            this.element.style.top = sizesAndPositions.target.top - displacement + sizesAndPositions.target.height / 2 + 'px';
            this.element.style.left =
                sizesAndPositions.target.left - sizesAndPositions.element.width - this.elementOffset + 'px';
        };
        PoControlPositionService.prototype.setRightPositions = function (displacement, sizesAndPositions) {
            this.element.style.top = sizesAndPositions.target.top - displacement + sizesAndPositions.target.height / 2 + 'px';
            this.element.style.left = sizesAndPositions.target.right + this.elementOffset + 'px';
        };
        PoControlPositionService.prototype.setTopPositions = function (displacement, sizesAndPositions) {
            this.element.style.top =
                sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
            this.element.style.left = sizesAndPositions.target.left + sizesAndPositions.target.width / 2 - displacement + 'px';
        };
        PoControlPositionService.prototype.verifySubPositions = function (position) {
            if (position.indexOf('-') > -1) {
                position = position.substring(0, position.indexOf('-'));
                this.elementPosition(position);
            }
            var align = 0;
            while (align++ < 3) {
                if (this.overflowAllSides(position)) {
                    position = this.nextPosition(position, poControlPositionSidesDefault);
                    this.elementPosition(position);
                }
                else {
                    return null;
                }
            }
        };
        return PoControlPositionService;
    }());
    PoControlPositionService.decorators = [
        { type: i0.Injectable }
    ];

    var PoTooltipControlPositionService = /** @class */ (function (_super) {
        __extends(PoTooltipControlPositionService, _super);
        function PoTooltipControlPositionService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PoTooltipControlPositionService;
    }(PoControlPositionService));
    PoTooltipControlPositionService.decorators = [
        { type: i0.Injectable }
    ];

    /**
     * @docsExtends PoTooltipBaseDirective
     *
     * @example
     *
     * <example name="po-tooltip-basic" title="PO Tooltip Basic" >
     *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.html"> </file>
     *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-tooltip-labs" title="PO Tooltip Labs" >
     *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.html"> </file>
     *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-tooltip-new-user" title="PO Tooltip - New User" >
     *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.html"> </file>
     *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.ts"> </file>
     * </example>
     *
     */
    var PoTooltipDirective = /** @class */ (function (_super) {
        __extends(PoTooltipDirective, _super);
        function PoTooltipDirective(elementRef, renderer, poControlPosition) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.poControlPosition = poControlPosition;
            _this.tooltipOffset = 8;
            return _this;
        }
        PoTooltipDirective.prototype.onMouseEnter = function () {
            if (!this.displayTooltip) {
                this.addTooltipAction();
            }
        };
        PoTooltipDirective.prototype.onMouseLeave = function () {
            if (!this.displayTooltip) {
                this.removeTooltipAction();
            }
        };
        PoTooltipDirective.prototype.ngOnInit = function () {
            this.initScrollEventListenerFunction();
        };
        PoTooltipDirective.prototype.addTooltipAction = function () {
            var _this = this;
            setTimeout(function () {
                if (_this.tooltip) {
                    _this.tooltipContent ? _this.showTooltip() : _this.createTooltip();
                    _this.removeArrow(_this.arrowDirection);
                    _this.poControlPosition.adjustPosition(_this.tooltipPosition);
                    _this.arrowDirection = _this.poControlPosition.getArrowDirection();
                    _this.addArrow(_this.arrowDirection);
                    _this.lastTooltipText = _this.tooltip;
                }
            });
        };
        PoTooltipDirective.prototype.removeTooltipAction = function () {
            var _this = this;
            // necessita do timeout para conseguir adicionar ".po-invisible", pois quando tem alguns elementos
            // próximos com tooltips e ficar passando o mouse em cima, os mesmos não estavam ficando invisiveis.
            setTimeout(function () {
                if (_this.appendInBody && _this.tooltipContent) {
                    _this.renderer.removeChild(document.body, _this.tooltipContent);
                    _this.tooltipContent = undefined;
                }
                else {
                    _this.hideTooltip();
                }
            });
        };
        PoTooltipDirective.prototype.addArrow = function (arrowDirection) {
            this.renderer.addClass(this.divArrow, "po-arrow-" + arrowDirection);
        };
        PoTooltipDirective.prototype.addScrollEventListener = function () {
            window.addEventListener('scroll', this.eventListenerFunction, true);
        };
        // Monta a estrutura do tooltip
        PoTooltipDirective.prototype.createTooltip = function () {
            this.tooltipContent = this.renderer.createElement('div');
            this.renderer.addClass(this.tooltipContent, 'po-tooltip');
            this.divArrow = this.renderer.createElement('div');
            this.renderer.addClass(this.divArrow, 'po-tooltip-arrow');
            this.divContent = this.renderer.createElement('div');
            this.renderer.addClass(this.divContent, 'po-tooltip-content');
            this.textContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.divContent, this.textContent);
            this.renderer.appendChild(this.tooltipContent, this.divArrow);
            this.renderer.appendChild(this.tooltipContent, this.divContent);
            var parentTarget = this.appendInBody ? document.body : this.elementRef.nativeElement;
            this.renderer.appendChild(parentTarget, this.tooltipContent);
            this.poControlPosition.setElements(this.tooltipContent, this.tooltipOffset, this.elementRef);
            this.addScrollEventListener();
        };
        PoTooltipDirective.prototype.initScrollEventListenerFunction = function () {
            var _this = this;
            this.eventListenerFunction = function () {
                if (!_this.isHidden) {
                    setTimeout(function () {
                        _this.poControlPosition.adjustPosition(_this.tooltipPosition);
                    });
                }
            };
        };
        PoTooltipDirective.prototype.hideTooltip = function () {
            if (this.tooltipContent) {
                this.renderer.addClass(this.tooltipContent, 'po-invisible');
                this.isHidden = true;
                this.removeScrollEventListener();
            }
        };
        PoTooltipDirective.prototype.removeArrow = function (arrowDirection) {
            if (this.elementRef.nativeElement.querySelector(".po-arrow-" + arrowDirection)) {
                this.renderer.removeClass(this.divArrow, "po-arrow-" + arrowDirection);
            }
        };
        PoTooltipDirective.prototype.removeScrollEventListener = function () {
            window.removeEventListener('scroll', this.eventListenerFunction, true);
        };
        PoTooltipDirective.prototype.showTooltip = function () {
            this.renderer.removeClass(this.tooltipContent, 'po-invisible');
            this.updateTextContent();
            this.isHidden = false;
            this.addScrollEventListener();
        };
        PoTooltipDirective.prototype.updateTextContent = function () {
            if (this.lastTooltipText !== this.tooltip) {
                this.renderer.removeChild(this.divContent, this.textContent);
                this.textContent = this.renderer.createText(this.tooltip);
                this.renderer.appendChild(this.divContent, this.textContent);
            }
        };
        return PoTooltipDirective;
    }(PoTooltipBaseDirective));
    PoTooltipDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[p-tooltip]',
                    providers: [PoTooltipControlPositionService]
                },] }
    ];
    PoTooltipDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: PoTooltipControlPositionService }
    ]; };
    PoTooltipDirective.propDecorators = {
        onMouseEnter: [{ type: i0.HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: i0.HostListener, args: ['mouseleave',] }]
    };

    /**
     * @description
     *
     * Módulo da diretiva Po-Tooltip.
     */
    var PoTooltipModule = /** @class */ (function () {
        function PoTooltipModule() {
        }
        return PoTooltipModule;
    }());
    PoTooltipModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [PoTooltipDirective],
                    exports: [PoTooltipDirective]
                },] }
    ];

    /**
     * @usedBy PoButtonGroupComponent
     *
     * @description
     *
     * Define o tipo de seleção dos botões do `po-button-group`.
     */
    exports.PoButtonGroupToggle = void 0;
    (function (PoButtonGroupToggle) {
        /** Seleção múltipla. */
        PoButtonGroupToggle["Multiple"] = "multiple";
        /** Seleção desabilitada. */
        PoButtonGroupToggle["None"] = "none";
        /** Seleção única. */
        PoButtonGroupToggle["Single"] = "single";
    })(exports.PoButtonGroupToggle || (exports.PoButtonGroupToggle = {}));

    var PO_TOGGLE_TYPE_DEFAULT = 'none';
    /**
     * @description
     *
     * O componente `po-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
     * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
     *
     * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
     * para seleções multiplas e únicas.
     *
     * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
     * parte de um mesmo contexto.
     *
     * #### Boas práticas
     *
     * - Evite usar o `po-button-group` com apenas 1 ação, para isso utilize o `po-button`.
     * - Procure utilizar no máximo 3 ações para cada `po-button-group`.
     *
     * > As recomendações do `po-button` também valem para o `po-button-group`.
     */
    var PoButtonGroupBaseComponent = /** @class */ (function () {
        function PoButtonGroupBaseComponent() {
            /** Lista de botões. */
            this.buttons = [];
            this._small = false;
            this._toggle = PO_TOGGLE_TYPE_DEFAULT;
        }
        Object.defineProperty(PoButtonGroupBaseComponent.prototype, "small", {
            get: function () {
                return this._small;
            },
            /**
             * @optional
             *
             * @description
             *
             * Torna o grupo de botões com tamanho minificado.
             *
             * @default `false`
             */
            set: function (value) {
                this._small = value === '' ? true : convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoButtonGroupBaseComponent.prototype, "toggle", {
            get: function () {
                return this._toggle;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o modo de seleção de botões.
             *
             * > Veja os valores válidos no *enum* `PoMultiselectFilterMode`.
             *
             * @default `none`
             */
            set: function (value) {
                this._toggle = Object.values(exports.PoButtonGroupToggle).includes(value) ? value : PO_TOGGLE_TYPE_DEFAULT;
                this.checkSelecteds(this._toggle);
            },
            enumerable: false,
            configurable: true
        });
        PoButtonGroupBaseComponent.prototype.onButtonClick = function (buttonClicked, buttonIndex) {
            if (this.toggle === exports.PoButtonGroupToggle.Single) {
                this.buttons.forEach(function (button, index) { return (button.selected = index === buttonIndex ? !buttonClicked.selected : false); });
            }
            else if (this.toggle === exports.PoButtonGroupToggle.Multiple) {
                buttonClicked.selected = !buttonClicked.selected;
            }
        };
        PoButtonGroupBaseComponent.prototype.checkSelecteds = function (toggleMode) {
            if (toggleMode === exports.PoButtonGroupToggle.None) {
                this.deselectAllButtons();
            }
            else if (toggleMode === exports.PoButtonGroupToggle.Single) {
                var hasMoreOneSelected = this.buttons.filter(function (button) { return button.selected; }).length > 1;
                if (hasMoreOneSelected) {
                    this.deselectAllButtons();
                }
            }
        };
        PoButtonGroupBaseComponent.prototype.deselectAllButtons = function () {
            this.buttons.forEach(function (button) { return (button.selected = false); });
        };
        return PoButtonGroupBaseComponent;
    }());
    PoButtonGroupBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoButtonGroupBaseComponent.propDecorators = {
        buttons: [{ type: i0.Input, args: ['p-buttons',] }],
        small: [{ type: i0.Input, args: ['p-small',] }],
        toggle: [{ type: i0.Input, args: ['p-toggle',] }]
    };

    /**
     * @docsExtends PoButtonGroupBaseComponent
     *
     * @example
     *
     * <example name="po-button-group-basic" title="PO Button Group Basic">
     *  <file name="sample-po-button-group-basic/sample-po-button-group-basic.component.html"> </file>
     *  <file name="sample-po-button-group-basic/sample-po-button-group-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-button-group-labs" title="PO Button Group Labs">
     *  <file name="sample-po-button-group-labs/sample-po-button-group-labs.component.html"> </file>
     *  <file name="sample-po-button-group-labs/sample-po-button-group-labs.component.ts"> </file>
     * </example>
     *
     *
     * <example name="po-button-group-attendance" title="PO Button Group - Attendance">
     *  <file name="sample-po-button-group-attendance/sample-po-button-group-attendance.component.html"> </file>
     *  <file name="sample-po-button-group-attendance/sample-po-button-group-attendance.component.ts"> </file>
     * </example>
     *
     * <example name="po-button-group-post" title="PO Button Group - Post">
     *  <file name="sample-po-button-group-post/sample-po-button-group-post.component.html"> </file>
     *  <file name="sample-po-button-group-post/sample-po-button-group-post.component.ts"> </file>
     * </example>
     */
    var PoButtonGroupComponent = /** @class */ (function (_super) {
        __extends(PoButtonGroupComponent, _super);
        function PoButtonGroupComponent(viewRef) {
            return _super.call(this) || this;
        }
        return PoButtonGroupComponent;
    }(PoButtonGroupBaseComponent));
    PoButtonGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-button-group',
                    template: "<div class=\"po-button-group-container\">\r\n  <po-button\r\n    *ngFor=\"let button of buttons; index as i\"\r\n    class=\"po-sm-12 po-button-group\"\r\n    [class.po-button-group-button-selected]=\"button.selected\"\r\n    [class.po-button-group-disabled]=\"button.disabled\"\r\n    p-tooltip-position=\"bottom\"\r\n    [p-disabled]=\"button.disabled\"\r\n    [p-icon]=\"button.icon\"\r\n    [p-label]=\"button.label\"\r\n    [p-small]=\"small\"\r\n    [p-tooltip]=\"!button.disabled ? button.tooltip : undefined\"\r\n    (p-click)=\"button.action(button); onButtonClick(button, i)\"\r\n  >\r\n  </po-button>\r\n</div>\r\n"
                },] }
    ];
    PoButtonGroupComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef }
    ]; };

    /**
     * @description
     *
     * Módulo do componente po-button-group.
     */
    var PoButtonGroupModule = /** @class */ (function () {
        function PoButtonGroupModule() {
        }
        return PoButtonGroupModule;
    }());
    PoButtonGroupModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, PoButtonModule, PoTooltipModule],
                    declarations: [PoButtonGroupComponent],
                    exports: [PoButtonGroupComponent]
                },] }
    ];

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço responsável por gerenciar o tratamento dos formatos de data e hora.
     */
    var PoDateService = /** @class */ (function () {
        function PoDateService() {
            this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' + '(?:0[1-9]|1[0-2])-' + '(?:0[1-9]|[12]\\d|3[01])$');
            this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
                '(?:0[1-9]|1[0-2])-' +
                '(?:0[1-9]|[12]\\d|3[01])' +
                'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
                '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
                '(?:|:?[0-5]\\d)$');
        }
        /**
         * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
         *
         * @param dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
         * @param minDate Definir `true` caso seja `minDate`.
         * @param maxDate Definir `true` caso seja `maxDate`.
         */
        PoDateService.prototype.convertIsoToDate = function (dateString, minDate, maxDate) {
            if (dateString) {
                var _a = this.getDateFromIso(dateString), year = _a.year, month = _a.month, day = _a.day;
                if (minDate) {
                    var date = new Date(year, month - 1, day, 0, 0, 0);
                    this.setYearFrom0To100(date, year);
                    return date;
                }
                else if (maxDate) {
                    var date = new Date(year, month - 1, day, 23, 59, 59);
                    this.setYearFrom0To100(date, year);
                    return date;
                }
                else {
                    var miliseconds = Date.parse(dateString);
                    var timezone = new Date().getTimezoneOffset() * 60000;
                    return new Date(miliseconds + timezone);
                }
            }
        };
        /**
         * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
         *
         * @param date Data no formato `Date`.
         */
        PoDateService.prototype.convertDateToISO = function (date) {
            if (date) {
                var fullYear = date.getFullYear();
                var getMonth = date.getMonth() + 1;
                var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
                var month = getMonth < 10 ? '0' + getMonth : getMonth;
                var year = this.formatYear(fullYear);
                return year + '-' + month + '-' + day;
            }
            else {
                return null;
            }
        };
        /**
         * Método responsável por adicionar zeros a esquerda do anos em formato string.
         *
         * @param year Ano a ser validado.
         */
        PoDateService.prototype.formatYear = function (year) {
            if (year > 999) {
                return year.toString();
            }
            if (year > 99 && year < 1000) {
                return "0" + year;
            }
            if (year > 9 && year < 100) {
                return "00" + year;
            }
            if (year >= 0 && year < 10) {
                return "000" + year;
            }
        };
        /**
         * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
         *
         * @param isoDate Ano em formato string.
         */
        PoDateService.prototype.getDateFromIso = function (isoDate) {
            var day = parseInt(isoDate.substring(8, 10), 10);
            var month = parseInt(isoDate.substring(5, 7), 10);
            var year = parseInt(isoDate.substring(0, 4), 10);
            return { year: year, month: month, day: day };
        };
        /**
         * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
         * caso `isMindate` seja igual a `false` .
         *
         * @param date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
         * @param isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
         */
        PoDateService.prototype.getDateForDateRange = function (date, isMinDate) {
            var lastHour = isMinDate ? [0, 0, 0] : [23, 59, 59];
            if (date instanceof Date) {
                var _a = this.splitDate(date), year = _a.year, month = _a.month, day = _a.day;
                var validDate = new (Date.bind.apply(Date, __spreadArray([void 0, year, month, day], __read(lastHour))))();
                this.setYearFrom0To100(validDate, year);
                return validDate;
            }
            else if (this.isValidIso(date)) {
                return this.convertIsoToDate(date, isMinDate, !isMinDate);
            }
        };
        /**
         * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
         *
         * @param dateA primeira data
         * @param dateB segunda data
         */
        PoDateService.prototype.isDateRangeValid = function (dateA, dateB) {
            if (dateA === void 0) { dateA = ''; }
            if (dateB === void 0) { dateB = ''; }
            var dateASplitted = dateA.split('-').map(function (item) { return parseInt(item, 10); });
            var dateBSplitted = dateB.split('-').map(function (item) { return parseInt(item, 10); });
            for (var index = 0; index <= dateASplitted.length; index++) {
                if (dateASplitted[index] > dateBSplitted[index]) {
                    return true;
                }
                else if (dateASplitted[index] < dateBSplitted[index]) {
                    return false;
                }
            }
            return true;
        };
        /**
         * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
         *
         * @param stringDate Data.
         */
        PoDateService.prototype.isValidIso = function (stringDate) {
            return this.dateRegex.test(stringDate) || this.isoRegex.test(stringDate);
        };
        /**
         * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
         *
         * @param date Data.
         * @param year .
         */
        PoDateService.prototype.setYearFrom0To100 = function (date, year) {
            if (year >= 0 && year < 100) {
                date.setFullYear(year);
            }
        };
        /**
         * Método responsável por retornar o dia , mês e ano de uma data informada.
         *
         * @param date Valor da data.
         */
        PoDateService.prototype.splitDate = function (date) {
            var year = date.getFullYear();
            var month = date.getMonth();
            var day = date.getDate();
            return { year: year, month: month, day: day };
        };
        /**
         * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
         *
         * @param date Data a ser validada.
         * @param minDate Data inicial.
         * @param maxDate Data final.
         */
        PoDateService.prototype.validateDateRange = function (date, minDate, maxDate) {
            if (minDate && maxDate) {
                return date >= minDate && date <= maxDate;
            }
            else if (minDate && !maxDate) {
                return date >= minDate;
            }
            else if (!minDate && maxDate) {
                return date <= maxDate;
            }
            else {
                return true;
            }
        };
        /**
         * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
         * 'Date' padrão do javascript.
         *
         * @param date Data que será validada.
         */
        PoDateService.prototype.validateDate = function (date) {
            var validDate = date instanceof Date ? this.convertDateToISO(date) : date;
            return this.isValidIso(validDate) ? validDate : undefined;
        };
        return PoDateService;
    }());
    PoDateService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PoDateService_Factory() { return new PoDateService(); }, token: PoDateService, providedIn: "root" });
    PoDateService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    /**
     * @description
     *
     * Módulo do serviço `po-date`.
     */
    var PoDateTimeModule = /** @class */ (function () {
        function PoDateTimeModule() {
        }
        return PoDateTimeModule;
    }());
    PoDateTimeModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [PoDateService],
                    bootstrap: []
                },] }
    ];

    /**
     * @usedBy PoCalendarComponent
     *
     * @description
     *
     * *Enum* `PoCalendarMode` para especificar os modos de visualização do calendário.
     */
    exports.PoCalendarMode = void 0;
    (function (PoCalendarMode) {
        /** Define que o calendário será exibido em modo faixa de seleção. */
        PoCalendarMode["Range"] = "range";
    })(exports.PoCalendarMode || (exports.PoCalendarMode = {}));

    /**
     * @description
     *
     * O `po-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
     * de direcionamento e nos *labels* do ano ou mês.
     *
     * Este componente pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     *
     * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
     * formato **Data (E8601DAw.): yyyy-mm-dd**.
     *
     * Importante:
     *
     * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
     * a data desabilitada porém o *model* não será alterado.
     * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
     */
    var PoCalendarBaseComponent = /** @class */ (function () {
        function PoCalendarBaseComponent(poDate, languageService) {
            this.poDate = poDate;
            this.languageService = languageService;
            /** Evento disparado ao selecionar um dia do calendário. */
            this.change = new i0.EventEmitter();
            this.onTouched = null;
            this.propagateChange = null;
            this.today = new Date();
            this._locale = this.languageService.getShortLanguage();
            this.shortLanguage = languageService.getShortLanguage();
        }
        Object.defineProperty(PoCalendarBaseComponent.prototype, "locale", {
            get: function () {
                return this._locale;
            },
            /**
             * @optional
             *
             * @description
             *
             * Idioma do calendário.
             *
             * > O locale padrão sera recuperado com base no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
             */
            set: function (locale) {
                this._locale = poLocales.includes(locale) ? locale : this.shortLanguage;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoCalendarBaseComponent.prototype, "maxDate", {
            get: function () {
                return this._maxDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a data máxima possível de ser selecionada.
             *
             * Pode receber os seguintes formatos de data:
             *
             * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
             * ```
             * this.date = '2017-11-28T00:00:00-02:00';
             * ```
             *
             * - **Data (E8601DAw.): yyyy-mm-dd**
             * ```
             * this.date = '2017-11-28';
             * ```
             *
             * - **JavaScript Date Object:**
             * ```
             * this.date = new Date(2017, 10, 28);
             * ```
             */
            set: function (maxDate) {
                this._maxDate = this.poDate.getDateForDateRange(maxDate, false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoCalendarBaseComponent.prototype, "minDate", {
            get: function () {
                return this._minDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a data mínima possível de ser selecionada.
             *
             * Pode receber os seguintes formatos de data:
             *
             * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
             * ```
             * this.date = '2017-11-28T00:00:00-02:00';
             * ```
             *
             * - **Data (E8601DAw.): yyyy-mm-dd**
             * ```
             * this.date = '2017-11-28';
             * ```
             *
             * - **JavaScript Date Object:**
             * ```
             * this.date = new Date(2017, 10, 28);
             * ```
             */
            set: function (minDate) {
                this._minDate = this.poDate.getDateForDateRange(minDate, true);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoCalendarBaseComponent.prototype, "mode", {
            get: function () {
                return this._mode;
            },
            /**
             * Propriedade que permite informar o modo de exibição do calendar.
             *
             * Implementa o enum `PoCalendarMode`.
             */
            set: function (value) {
                this._mode = value;
                this.setActivateDate();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoCalendarBaseComponent.prototype, "isRange", {
            get: function () {
                return this.mode === exports.PoCalendarMode.Range;
            },
            enumerable: false,
            configurable: true
        });
        PoCalendarBaseComponent.prototype.setActivateDate = function (date) {
            var activateDate = date ? date : this.verifyActivateDate();
            if (this.isRange) {
                var checkedStart = typeof activateDate === 'string' ? this.poDate.convertIsoToDate(activateDate) : new Date(activateDate);
                var checkedEnd = new Date(new Date(checkedStart).setMonth(checkedStart.getMonth() + 1));
                this.activateDate = { start: checkedStart, end: checkedEnd };
            }
            else {
                this.activateDate = new Date(activateDate);
            }
        };
        PoCalendarBaseComponent.prototype.verifyActivateDate = function () {
            var today = this.today;
            if (this.minDate && this.minDate > this.today) {
                today = this.minDate;
            }
            else if (this.maxDate && this.maxDate < this.today) {
                today = this.maxDate;
            }
            return today;
        };
        return PoCalendarBaseComponent;
    }());
    PoCalendarBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoCalendarBaseComponent.ctorParameters = function () { return [
        { type: PoDateService },
        { type: PoLanguageService }
    ]; };
    PoCalendarBaseComponent.propDecorators = {
        change: [{ type: i0.Output, args: ['p-change',] }],
        locale: [{ type: i0.Input, args: ['p-locale',] }],
        maxDate: [{ type: i0.Input, args: ['p-max-date',] }],
        minDate: [{ type: i0.Input, args: ['p-min-date',] }],
        mode: [{ type: i0.Input, args: ['p-mode',] }]
    };

    /* istanbul ignore next */
    var providers$6 = [
        {
            provide: forms.NG_VALUE_ACCESSOR,
            // eslint-disable-next-line
            useExisting: i0.forwardRef(function () { return PoCalendarComponent; }),
            multi: true
        },
        {
            provide: forms.NG_VALIDATORS,
            // eslint-disable-next-line
            useExisting: i0.forwardRef(function () { return PoCalendarComponent; }),
            multi: true
        }
    ];
    var poCalendarRangeWidth = 600;
    /**
     * @docsExtends PoCalendarBaseComponent
     *
     * @example
     *
     * <example name="po-calendar-basic" title="PO Calendar Basic" >
     *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.html"> </file>
     *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-calendar-labs" title="PO Calendar Labs" >
     *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.html"> </file>
     *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-calendar-ticket-sales" title="PO Calendar - Ticket Sales" >
     *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.html"> </file>
     *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.ts"> </file>
     * </example>
     */
    var PoCalendarComponent = /** @class */ (function (_super) {
        __extends(PoCalendarComponent, _super);
        function PoCalendarComponent(changeDetector, poDate, languageService) {
            var _this = _super.call(this, poDate, languageService) || this;
            _this.changeDetector = changeDetector;
            return _this;
        }
        Object.defineProperty(PoCalendarComponent.prototype, "isResponsive", {
            get: function () {
                return window.innerWidth < poCalendarRangeWidth;
            },
            enumerable: false,
            configurable: true
        });
        PoCalendarComponent.prototype.ngOnInit = function () {
            this.setActivateDate();
        };
        PoCalendarComponent.prototype.ngOnChanges = function (changes) {
            if (changes.minDate || changes.maxDate) {
                this.setActivateDate();
            }
        };
        PoCalendarComponent.prototype.getActivateDate = function (partType) {
            if (this.isRange && this.activateDate) {
                return this.activateDate[partType];
            }
            else {
                return this.activateDate;
            }
        };
        PoCalendarComponent.prototype.getValue = function (partType) {
            if (this.isRange && this.value) {
                return this.value[partType];
            }
            else {
                return this.value;
            }
        };
        PoCalendarComponent.prototype.onSelectDate = function (selectedDate, partType) {
            var _a;
            var newValue;
            if (this.isRange) {
                newValue = this.getValueFromSelectedDate(selectedDate);
                if (partType === 'end' && (!((_a = this.value) === null || _a === void 0 ? void 0 : _a.start) || (this.value.start && this.value.end))) {
                    this.setActivateDate(selectedDate);
                }
            }
            else {
                newValue = selectedDate;
                this.setActivateDate(selectedDate);
            }
            this.value = newValue;
            var newModel = this.convertDateToISO(this.value);
            this.updateModel(newModel);
            this.change.emit(newModel);
        };
        PoCalendarComponent.prototype.onHoverDate = function (date) {
            this.hoverValue = date;
        };
        PoCalendarComponent.prototype.onHeaderChange = function (_b, partType) {
            var month = _b.month, year = _b.year;
            if (this.isRange) {
                var newStart = void 0;
                var newEnd = void 0;
                var _c = this.activateDate, start = _c.start, end = _c.end;
                if (partType === 'end') {
                    var newYear = month === 0 ? year - 1 : year;
                    newStart = new Date(new Date(start.setMonth(month - 1)).setFullYear(newYear));
                    newEnd = new Date(new Date(end.setMonth(month)).setFullYear(year));
                }
                else {
                    var newYear = month === 11 ? year + 1 : year;
                    newEnd = new Date(new Date(end.setMonth(month + 1)).setFullYear(newYear));
                    newStart = new Date(new Date(start.setMonth(month)).setFullYear(year));
                }
                this.activateDate = { start: newStart, end: newEnd };
            }
        };
        PoCalendarComponent.prototype.registerOnChange = function (fn) {
            this.propagateChange = fn;
        };
        PoCalendarComponent.prototype.registerOnTouched = function (func) {
            this.onTouched = func;
        };
        PoCalendarComponent.prototype.validate = function (c) {
            return null;
        };
        PoCalendarComponent.prototype.writeValue = function (value) {
            if (value) {
                this.writeDate(value);
            }
            else {
                this.value = null;
            }
            var activateDate = this.getValidateStartDate(value);
            this.setActivateDate(activateDate);
            this.changeDetector.markForCheck();
        };
        PoCalendarComponent.prototype.getValidateStartDate = function (value) {
            if (this.isRange) {
                return (value === null || value === void 0 ? void 0 : value.start) || null;
            }
            else if (value instanceof Date || typeof value === 'string') {
                return value;
            }
            return null;
        };
        PoCalendarComponent.prototype.getValueFromSelectedDate = function (selectedDate) {
            var _a;
            if (!((_a = this.value) === null || _a === void 0 ? void 0 : _a.start) || this.value.start > selectedDate || (this.value.end && this.value.start)) {
                return { start: new Date(selectedDate), end: null };
            }
            return { start: new Date(this.value.start), end: new Date(selectedDate) };
        };
        PoCalendarComponent.prototype.convertDateToISO = function (date) {
            if (this.isRange) {
                var start = (date === null || date === void 0 ? void 0 : date.start) instanceof Date ? this.poDate.convertDateToISO(date.start) : null;
                var end = (date === null || date === void 0 ? void 0 : date.end) instanceof Date ? this.poDate.convertDateToISO(date.end) : null;
                return { start: start, end: end };
            }
            else {
                return this.poDate.convertDateToISO(date);
            }
        };
        PoCalendarComponent.prototype.convertDateFromIso = function (stringDate) {
            if (stringDate && typeof stringDate === 'string') {
                var _b = this.poDate.getDateFromIso(stringDate), year = _b.year, month = _b.month, day = _b.day;
                var date = new Date(year, month - 1, day);
                this.poDate.setYearFrom0To100(date, year);
                return date;
            }
            return null;
        };
        PoCalendarComponent.prototype.updateModel = function (value) {
            if (this.propagateChange) {
                this.propagateChange(value);
            }
        };
        PoCalendarComponent.prototype.writeDate = function (value) {
            if (this.isRange) {
                var start = value === null || value === void 0 ? void 0 : value.start;
                var end = value === null || value === void 0 ? void 0 : value.end;
                var newStart = start instanceof Date ? new Date(start) : this.convertDateFromIso(start);
                var newEnd = end instanceof Date ? new Date(end) : this.convertDateFromIso(end);
                this.value = { start: newStart, end: newEnd };
            }
            else {
                this.value = value instanceof Date ? new Date(value) : this.convertDateFromIso(value);
            }
        };
        return PoCalendarComponent;
    }(PoCalendarBaseComponent));
    PoCalendarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-calendar',
                    template: "<ng-container *ngIf=\"isRange; then rangeTemplate; else calendarTemplate\"></ng-container>\r\n\r\n<ng-template #rangeTemplate>\r\n  <div class=\"po-calendar-range\">\r\n    <ng-container *ngTemplateOutlet=\"calendarWrapper; context: { partType: 'start' }\"></ng-container>\r\n    <ng-container *ngIf=\"!isResponsive\">\r\n      <ng-container *ngTemplateOutlet=\"calendarWrapper; context: { partType: 'end' }\"></ng-container>\r\n    </ng-container>\r\n  </div>\r\n</ng-template>\r\n<ng-template #calendarTemplate>\r\n  <div class=\"po-calendar\">\r\n    <ng-template [ngTemplateOutlet]=\"calendarWrapper\"></ng-template>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #calendarWrapper let-partType=\"partType\">\r\n  <po-calendar-wrapper\r\n    [p-value]=\"getValue(partType)\"\r\n    [p-activate-date]=\"getActivateDate(partType)\"\r\n    [p-locale]=\"locale\"\r\n    [p-min-date]=\"minDate\"\r\n    [p-max-date]=\"maxDate\"\r\n    [p-part-type]=\"partType\"\r\n    [p-range]=\"isRange\"\r\n    [p-responsive]=\"isResponsive\"\r\n    [p-selected-value]=\"value\"\r\n    [p-hover-value]=\"hoverValue\"\r\n    (p-header-change)=\"onHeaderChange($event, partType)\"\r\n    (p-select-date)=\"onSelectDate($event, partType)\"\r\n    (p-hover-date)=\"onHoverDate($event)\"\r\n  >\r\n  </po-calendar-wrapper>\r\n</ng-template>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: providers$6
                },] }
    ];
    PoCalendarComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: PoDateService },
        { type: PoLanguageService }
    ]; };

    var PoCalendarHeaderComponent = /** @class */ (function () {
        function PoCalendarHeaderComponent() {
            this.hidePrevious = false;
            this.hideNext = false;
            this.previous = new i0.EventEmitter();
            this.next = new i0.EventEmitter();
        }
        return PoCalendarHeaderComponent;
    }());
    PoCalendarHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-calendar-header',
                    template: "<div class=\"po-calendar-header\">\r\n  <span\r\n    *ngIf=\"previous?.observers && !hidePrevious\"\r\n    class=\"po-calendar-header-left po-icon po-icon-arrow-left\"\r\n    (click)=\"previous.emit()\"\r\n  >\r\n  </span>\r\n\r\n  <div class=\"po-calendar-header-title\" attr-calendar>\r\n    <ng-content></ng-content>\r\n  </div>\r\n\r\n  <span\r\n    *ngIf=\"next?.observers.length && !hideNext\"\r\n    class=\"po-calendar-header-right po-icon po-icon-arrow-right\"\r\n    (click)=\"next.emit()\"\r\n  >\r\n  </span>\r\n</div>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoCalendarHeaderComponent.ctorParameters = function () { return []; };
    PoCalendarHeaderComponent.propDecorators = {
        hidePrevious: [{ type: i0.Input, args: ['p-hide-previous',] }],
        hideNext: [{ type: i0.Input, args: ['p-hide-next',] }],
        previous: [{ type: i0.Output, args: ['p-previous',] }],
        next: [{ type: i0.Output, args: ['p-next',] }]
    };

    var PoCalendarLangService = /** @class */ (function () {
        function PoCalendarLangService() {
            this.language = poLocaleDefault;
            this.months = [
                {
                    pt: 'Janeiro',
                    en: 'January',
                    es: 'Enero',
                    ru: 'Январь'
                },
                {
                    pt: 'Fevereiro',
                    en: 'February',
                    es: 'Febrero',
                    ru: 'Февраль'
                },
                {
                    pt: 'Março',
                    en: 'March',
                    es: 'Marzo',
                    ru: 'Март'
                },
                {
                    pt: 'Abril',
                    en: 'April',
                    es: 'Abril',
                    ru: 'Апрель'
                },
                {
                    pt: 'Maio',
                    en: 'May',
                    es: 'Mayo',
                    ru: 'Май'
                },
                {
                    pt: 'Junho',
                    en: 'June',
                    es: 'Junio',
                    ru: 'Июнь'
                },
                {
                    pt: 'Julho',
                    en: 'July',
                    es: 'Julio',
                    ru: 'Июль'
                },
                {
                    pt: 'Agosto',
                    en: 'August',
                    es: 'Agosto',
                    ru: 'Август'
                },
                {
                    pt: 'Setembro',
                    en: 'September',
                    es: 'Setiembre',
                    ru: 'Сентябрь'
                },
                {
                    pt: 'Outubro',
                    en: 'October',
                    es: 'Octubre',
                    ru: 'Октябрь'
                },
                {
                    pt: 'Novembro',
                    en: 'November',
                    es: 'Noviembre',
                    ru: 'Ноябрь'
                },
                {
                    pt: 'Dezembro',
                    en: 'December',
                    es: 'Diciembre',
                    ru: 'Декабрь'
                }
            ];
            this.shortWeekDays = [
                {
                    pt: 'Dom',
                    en: 'Sun',
                    es: 'Dom',
                    ru: 'Вс'
                },
                {
                    pt: 'Seg',
                    en: 'Mon',
                    es: 'Lun',
                    ru: 'Пн'
                },
                {
                    pt: 'Ter',
                    en: 'Tue',
                    es: 'Mar',
                    ru: 'Вт'
                },
                {
                    pt: 'Qua',
                    en: 'Wed',
                    es: 'Mié',
                    ru: 'Ср'
                },
                {
                    pt: 'Qui',
                    en: 'Thu',
                    es: 'Jue',
                    ru: 'Чт'
                },
                {
                    pt: 'Sex',
                    en: 'Fri',
                    es: 'Vie',
                    ru: 'Пт'
                },
                {
                    pt: 'Sáb',
                    en: 'Sat',
                    es: 'Sáb',
                    ru: 'Сб'
                }
            ];
            this.monthLabel = {
                pt: 'Mês',
                en: 'Month',
                es: 'Mes',
                ru: 'Месяц'
            };
            this.yearLabel = {
                pt: 'Ano',
                en: 'Year',
                es: 'Año',
                ru: 'Год'
            };
            this.todayLabel = {
                pt: 'Hoje',
                en: 'Today',
                es: 'Hoy',
                ru: 'Сегодня'
            };
        }
        PoCalendarLangService.prototype.getMonth = function (month) {
            return this.months[month][this.language];
        };
        PoCalendarLangService.prototype.getMonthLabel = function () {
            return this.monthLabel[this.language];
        };
        PoCalendarLangService.prototype.getMonthsArray = function () {
            var arrMonths = Array();
            for (var i = 0; i < this.months.length; i++) {
                arrMonths.push(this.months[i][this.language]);
            }
            return arrMonths;
        };
        PoCalendarLangService.prototype.getWeekDays = function (day) {
            return this.shortWeekDays[day][this.language];
        };
        PoCalendarLangService.prototype.getWeekDaysArray = function () {
            var arrWeekDays = Array();
            for (var i = 0; i < this.shortWeekDays.length; i++) {
                var weekDay = this.shortWeekDays[i][this.language];
                arrWeekDays.push(weekDay.toLowerCase());
            }
            return arrWeekDays;
        };
        PoCalendarLangService.prototype.getYearLabel = function () {
            return this.yearLabel[this.language];
        };
        PoCalendarLangService.prototype.getTodayLabel = function () {
            return this.todayLabel[this.language];
        };
        PoCalendarLangService.prototype.setLanguage = function (language) {
            if (language && language.length >= 2) {
                language = language.toLowerCase().slice(0, 2);
                this.language = poLocales.includes(language) ? language : poLocaleDefault;
            }
        };
        return PoCalendarLangService;
    }());
    PoCalendarLangService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PoCalendarLangService_Factory() { return new PoCalendarLangService(); }, token: PoCalendarLangService, providedIn: "root" });
    PoCalendarLangService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    var poCalendarServiceFirstWeekDayDefault = 0;
    var PoCalendarService = /** @class */ (function () {
        function PoCalendarService() {
        }
        PoCalendarService.prototype.monthDates = function (year, month, dayFormatter, weekFormatter) {
            if (dayFormatter === void 0) { dayFormatter = null; }
            if (weekFormatter === void 0) { weekFormatter = null; }
            if (typeof month !== 'number' || month < 0 || month > 11) {
                throw Error('month must be a number (Jan is 0)');
            }
            var weeks = [];
            var week = [];
            var i = 0;
            var date = new Date(year, month, 1);
            if (year >= 0 && year < 100) {
                date.setFullYear(year);
            }
            date = this.weekStartDate(date);
            do {
                for (i = 0; i < 7; i++) {
                    week.push(dayFormatter ? dayFormatter(date) : date);
                    date = new Date(date.getTime());
                    date.setDate(date.getDate() + 1);
                }
                weeks.push(weekFormatter ? weekFormatter(week) : week);
                week = [];
            } while (date.getMonth() <= month && date.getFullYear() === year);
            return weeks;
        };
        PoCalendarService.prototype.monthDays = function (year, month) {
            var getDayOrZero = function (date) {
                return date.getMonth() === month ? date : 0;
            };
            return this.monthDates(year, month, getDayOrZero);
        };
        PoCalendarService.prototype.weekStartDate = function (date) {
            var startDate = new Date(date.getTime());
            while (startDate.getDay() !== poCalendarServiceFirstWeekDayDefault) {
                startDate.setDate(startDate.getDate() - 1);
            }
            return startDate;
        };
        return PoCalendarService;
    }());
    PoCalendarService.decorators = [
        { type: i0.Injectable }
    ];

    var PoCalendarWrapperComponent = /** @class */ (function () {
        function PoCalendarWrapperComponent(poCalendarService, poCalendarLangService, poDate) {
            this.poCalendarService = poCalendarService;
            this.poCalendarLangService = poCalendarLangService;
            this.poDate = poDate;
            this.mode = 'day';
            this.responsive = false;
            this.range = false;
            this.activateDate = new Date();
            this.headerChange = new i0.EventEmitter();
            this.selectDate = new i0.EventEmitter();
            this.hoverDate = new rxjs.Subject().pipe(operators.debounceTime(100));
            this.displayMonths = Array();
            this.displayWeekDays = Array();
            this.today = new Date();
        }
        Object.defineProperty(PoCalendarWrapperComponent.prototype, "locale", {
            get: function () {
                return this._locale;
            },
            set: function (value) {
                this._locale = value;
                this.initializeLanguage();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoCalendarWrapperComponent.prototype, "monthLabel", {
            get: function () {
                return this.poCalendarLangService.getMonthLabel();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoCalendarWrapperComponent.prototype, "yearLabel", {
            get: function () {
                return this.poCalendarLangService.getYearLabel();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoCalendarWrapperComponent.prototype, "isDayVisible", {
            get: function () {
                return this.mode === 'day';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoCalendarWrapperComponent.prototype, "isMonthVisible", {
            get: function () {
                return this.mode === 'month';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoCalendarWrapperComponent.prototype, "isYearVisible", {
            get: function () {
                return this.mode === 'year';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoCalendarWrapperComponent.prototype, "isStartPart", {
            get: function () {
                return this.partType === 'start';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoCalendarWrapperComponent.prototype, "isEndPart", {
            get: function () {
                return this.partType === 'end';
            },
            enumerable: false,
            configurable: true
        });
        PoCalendarWrapperComponent.prototype.ngOnInit = function () {
            this.init();
        };
        PoCalendarWrapperComponent.prototype.ngOnChanges = function (changes) {
            var activateDate = changes.activateDate;
            if (activateDate) {
                this.updateDate(activateDate.currentValue);
            }
        };
        PoCalendarWrapperComponent.prototype.getBackgroundColor = function (displayValue, propertyValue) {
            return displayValue === propertyValue ? 'po-calendar-box-background-selected' : 'po-calendar-box-background';
        };
        PoCalendarWrapperComponent.prototype.getDayBackgroundColor = function (date) {
            return this.getDayColor(date, 'background');
        };
        PoCalendarWrapperComponent.prototype.getDayForegroundColor = function (date) {
            return this.getDayColor(date, 'foreground');
        };
        PoCalendarWrapperComponent.prototype.getForegroundColor = function (displayValue, propertyValue) {
            return displayValue === propertyValue ? 'po-calendar-box-foreground-selected' : 'po-calendar-box-foreground';
        };
        PoCalendarWrapperComponent.prototype.isTodayUnavailable = function () {
            return this.minDate > this.today || this.maxDate < this.today;
        };
        PoCalendarWrapperComponent.prototype.onNextMonth = function () {
            this.displayMonthNumber < 11
                ? this.updateDisplay(this.displayYear, this.displayMonthNumber + 1)
                : this.updateDisplay(this.displayYear + 1, 0);
            this.headerChange.emit({ month: this.displayMonthNumber, year: this.displayYear });
        };
        PoCalendarWrapperComponent.prototype.onPreviousMonth = function () {
            if (this.displayMonthNumber > 0) {
                this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
            }
            else {
                this.updateDisplay(this.displayYear - 1, 11);
            }
            this.headerChange.emit({ month: this.displayMonthNumber, year: this.displayYear });
        };
        PoCalendarWrapperComponent.prototype.onMouseEnter = function (day) {
            this.hoverDate.next(day);
        };
        PoCalendarWrapperComponent.prototype.onMouseLeave = function () {
            this.hoverDate.next(null);
        };
        // Ao selecionar uma data
        PoCalendarWrapperComponent.prototype.onSelectDate = function (date) {
            this.selectDate.emit(date);
        };
        // Ao selecionar um mês
        PoCalendarWrapperComponent.prototype.onSelectMonth = function (year, month) {
            this.selectDisplayMode('day');
            this.updateDisplay(year, month);
            this.headerChange.emit({ month: month, year: year });
        };
        // Ao selecionar um ano
        PoCalendarWrapperComponent.prototype.onSelectYear = function (year, month) {
            // Se veio da tela de seleção de mês
            this.selectDisplayMode(this.lastDisplay === 'month' ? 'month' : 'day');
            this.currentYear = year;
            this.updateDisplay(year, month);
            this.headerChange.emit({ month: month, year: year });
        };
        PoCalendarWrapperComponent.prototype.selectDisplayMode = function (mode) {
            this.lastDisplay = this.mode;
            this.mode = mode;
        };
        PoCalendarWrapperComponent.prototype.updateYear = function (value) {
            this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
        };
        PoCalendarWrapperComponent.prototype.addAllYearsInDecade = function (year) {
            var i;
            for (i = year; i < year + 10; i++) {
                this.displayDecade.push(i);
            }
        };
        PoCalendarWrapperComponent.prototype.equalsDate = function (date1, date2) {
            try {
                return (date1.getFullYear() === date2.getFullYear() &&
                    date1.getMonth() === date2.getMonth() &&
                    date1.getDate() === date2.getDate());
            }
            catch (error) {
                return false;
            }
        };
        // Obtém um array de todos os anos desta década
        PoCalendarWrapperComponent.prototype.getDecadeArray = function (year) {
            this.displayDecade = Array();
            if (year % 10 !== 0) {
                while (year % 10 !== 0) {
                    year--;
                }
            }
            this.updateDecade(year);
        };
        PoCalendarWrapperComponent.prototype.getColorForDate = function (date, local) {
            return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
                ? "po-calendar-box-" + local + "-selected"
                : "po-calendar-box-" + local + "-selected-disabled";
        };
        PoCalendarWrapperComponent.prototype.getColorForDefaultDate = function (date, local) {
            return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
                ? "po-calendar-box-" + local
                : "po-calendar-box-" + local + "-disabled";
        };
        PoCalendarWrapperComponent.prototype.getColorForToday = function (date, local) {
            return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
                ? "po-calendar-box-" + local + "-today"
                : "po-calendar-box-" + local + "-today-disabled";
        };
        PoCalendarWrapperComponent.prototype.getColorForDateRange = function (date, local) {
            return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
                ? "po-calendar-box-" + local + "-in-range"
                : "po-calendar-box-" + local + "-in-range-disabled";
        };
        PoCalendarWrapperComponent.prototype.getDayColor = function (date, local) {
            var _a, _b;
            var start = (_a = this.selectedValue) === null || _a === void 0 ? void 0 : _a.start;
            var end = (_b = this.selectedValue) === null || _b === void 0 ? void 0 : _b.end;
            if (this.range && (this.equalsDate(date, start) || this.equalsDate(date, end))) {
                return this.getColorForDate(date, local);
            }
            else if (this.range && start && end && date > start && date < end) {
                return this.getColorForDateRange(date, local);
            }
            else if (this.range && start && !end && date > start && date < this.hoverValue) {
                return "po-calendar-box-" + local + "-hover";
            }
            else if (!this.range && this.equalsDate(date, this.value)) {
                return this.getColorForDate(date, local);
            }
            else if (this.equalsDate(date, this.today)) {
                return this.getColorForToday(date, local);
            }
            else {
                return this.getColorForDefaultDate(date, local);
            }
        };
        PoCalendarWrapperComponent.prototype.init = function () {
            this.updateDate(this.activateDate);
            this.initializeLanguage();
            this.selectDisplayMode('day');
        };
        PoCalendarWrapperComponent.prototype.initializeLanguage = function () {
            this.poCalendarLangService.setLanguage(this.locale);
            this.displayWeekDays = this.poCalendarLangService.getWeekDaysArray();
            this.displayMonths = this.poCalendarLangService.getMonthsArray();
            this.displayMonth = this.displayMonths[this.displayMonthNumber];
            this.displayToday = this.poCalendarLangService.getTodayLabel();
        };
        PoCalendarWrapperComponent.prototype.updateDate = function (value) {
            if (value === void 0) { value = new Date(); }
            var date = new Date(value);
            this.currentMonthNumber = date.getMonth();
            this.currentYear = date.getFullYear();
            this.updateDisplay(this.currentYear, this.currentMonthNumber);
        };
        PoCalendarWrapperComponent.prototype.updateDecade = function (year) {
            this.addAllYearsInDecade(year);
            this.displayStartDecade = year;
            this.displayFinalDecade = year + 9;
        };
        PoCalendarWrapperComponent.prototype.updateDisplay = function (year, month) {
            var calendarArray = this.poCalendarService.monthDays(year, month);
            this.displayDays = [].concat.apply([], calendarArray);
            this.displayMonthNumber = month;
            this.displayMonth = this.displayMonths[month];
            this.displayYear = year;
            this.getDecadeArray(year);
        };
        return PoCalendarWrapperComponent;
    }());
    PoCalendarWrapperComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-calendar-wrapper',
                    template: "<div class=\"po-calendar-wrapper\">\r\n  <ng-container *ngIf=\"isDayVisible\">\r\n    <po-calendar-header\r\n      [p-hide-previous]=\"isEndPart\"\r\n      [p-hide-next]=\"isStartPart && !responsive\"\r\n      (p-previous)=\"onPreviousMonth()\"\r\n      (p-next)=\"onNextMonth()\"\r\n    >\r\n      <span class=\"po-clickable po-mr-1\" (click)=\"selectDisplayMode('month')\">{{ displayMonth }}</span>\r\n      <span class=\"po-clickable\" (click)=\"selectDisplayMode('year')\">{{ displayYear }}</span>\r\n    </po-calendar-header>\r\n\r\n    <div class=\"po-calendar-content\">\r\n      <div class=\"po-calendar-labels\">\r\n        <div class=\"po-calendar-label\" *ngFor=\"let weekDay of displayWeekDays\">\r\n          {{ weekDay }}\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"po-calendar-content-list-day\">\r\n        <div\r\n          *ngFor=\"let day of displayDays\"\r\n          class=\"po-calendar-day\"\r\n          [ngClass]=\"getDayBackgroundColor(day)\"\r\n          (click)=\"onSelectDate(day)\"\r\n          (mouseenter)=\"onMouseEnter(day)\"\r\n          (mouseleave)=\"onMouseLeave()\"\r\n          attr-calendar\r\n        >\r\n          <span *ngIf=\"day !== 0\" [ngClass]=\"getDayForegroundColor(day)\">\r\n            {{ day.getDate() }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"isMonthVisible\">\r\n    <po-calendar-header (p-previous)=\"updateYear(-1)\" (p-next)=\"updateYear(1)\">\r\n      <span class=\"po-clickable\" (click)=\"selectDisplayMode('year')\">\r\n        {{ displayYear }}\r\n      </span>\r\n    </po-calendar-header>\r\n\r\n    <div class=\"po-calendar-content\">\r\n      <div class=\"po-calendar-labels\">\r\n        <div class=\"po-calendar-label\">\r\n          {{ monthLabel }}\r\n        </div>\r\n      </div>\r\n      <div class=\"po-calendar-content-list-month\">\r\n        <div\r\n          *ngFor=\"let month of displayMonths; let i = index\"\r\n          class=\"po-calendar-month\"\r\n          [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\"\r\n          (click)=\"onSelectMonth(displayYear, i)\"\r\n          attr-calendar\r\n        >\r\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\r\n            {{ month }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"isYearVisible\">\r\n    <po-calendar-header (p-previous)=\"updateYear(-10)\" (p-next)=\"updateYear(10)\">\r\n      {{ displayStartDecade }} - {{ displayFinalDecade }}\r\n    </po-calendar-header>\r\n\r\n    <div class=\"po-calendar-content\">\r\n      <div class=\"po-calendar-labels\">\r\n        <div class=\"po-calendar-label\">\r\n          {{ yearLabel }}\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"po-calendar-content-list-year\">\r\n        <div\r\n          *ngFor=\"let year of displayDecade; let i = index\"\r\n          class=\"po-calendar-year\"\r\n          [ngClass]=\"getBackgroundColor(year, currentYear)\"\r\n          (click)=\"onSelectYear(year, displayMonthNumber)\"\r\n          attr-calendar\r\n        >\r\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\r\n            {{ year }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"!range\">\r\n    <div class=\"po-calendar-footer\">\r\n      <div class=\"po-calendar-footer-today\">\r\n        <button class=\"po-calendar-footer-today-button\" (click)=\"onSelectDate(today)\" [disabled]=\"isTodayUnavailable()\">\r\n          {{ displayToday }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n",
                    providers: [PoCalendarService],
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoCalendarWrapperComponent.ctorParameters = function () { return [
        { type: PoCalendarService },
        { type: PoCalendarLangService },
        { type: PoDateService }
    ]; };
    PoCalendarWrapperComponent.propDecorators = {
        value: [{ type: i0.Input, args: ['p-value',] }],
        mode: [{ type: i0.Input, args: ['p-mode',] }],
        responsive: [{ type: i0.Input, args: ['p-responsive',] }],
        partType: [{ type: i0.Input, args: ['p-part-type',] }],
        range: [{ type: i0.Input, args: ['p-range',] }],
        activateDate: [{ type: i0.Input, args: ['p-activate-date',] }],
        selectedValue: [{ type: i0.Input, args: ['p-selected-value',] }],
        minDate: [{ type: i0.Input, args: ['p-min-date',] }],
        maxDate: [{ type: i0.Input, args: ['p-max-date',] }],
        hoverValue: [{ type: i0.Input, args: ['p-hover-value',] }],
        headerChange: [{ type: i0.Output, args: ['p-header-change',] }],
        selectDate: [{ type: i0.Output, args: ['p-select-date',] }],
        hoverDate: [{ type: i0.Output, args: ['p-hover-date',] }],
        locale: [{ type: i0.Input, args: ['p-locale',] }]
    };

    /**
     * @description
     * Módulo do componente `po-calendar`.
     */
    var PoCalendarModule = /** @class */ (function () {
        function PoCalendarModule() {
        }
        return PoCalendarModule;
    }());
    PoCalendarModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [PoCalendarComponent, PoCalendarHeaderComponent, PoCalendarWrapperComponent],
                    exports: [PoCalendarComponent]
                },] }
    ];

    /**
     * @usedBy PoChartComponent
     *
     * @description
     *
     * *Enum* `PoChartType` para especificação dos tipos de gráficos.
     */
    exports.PoChartType = void 0;
    (function (PoChartType) {
        /**
         * Tipo de gráfico que exibe os dados de modo quantitativo, utilizando linhas contínuas demarcadas por pontos para cada valor de série definido.
         * Similar ao gráfico de linha, diferencia-se pela área localizada abaixo da linha das séries, que é preenchida com cores para um destaque explícita da evolução e mudança dos dados.
         */
        PoChartType["Area"] = "area";
        /**
         * Exibe os dados em formato de rosca, dividindo em partes proporcionais.
         */
        PoChartType["Donut"] = "donut";
        /**
         * @deprecated 6.x.x
         *
         * @description
         *
         * **Deprecated 6.x.x**
         *
         * O gráfico de *gauge* fornece como opção uma melhor relação de intensidade de dados que nos gráficos de pizza padrão ou rosca, uma vez
         * que o centro em branco pode ser usado para exibir dados adicionais relacionados.
         *
         * > Componente depreciado, por favor utilizar componente [po-gauge](/documentation/po-gauge).
         */
        PoChartType["Gauge"] = "gauge";
        /**
         * Exibe os dados em formato circular, dividindo proporcionalmente em fatias.
         */
        PoChartType["Pie"] = "pie";
        /**
         * Gráfico que mostra os dados de modo linear e contínuo. É útil, por exemplo, para fazer comparações de tendência durante determinado período.
         * Pode ser utilizado em conjunto com gráficos dos tipos `column` e `area`, definindo-se o tipo através da propriedade `PoChartSerie.type`.
         */
        PoChartType["Line"] = "line";
        /**
         * Gráfico que exibe os dados em forma de barras verticais e sua extensão varia de acordo com seus valores. É comumente usado como comparativo entre diversas séries.
         * As séries são exibidas lado-a-lado, com um pequeno espaço entre elas.
         */
        PoChartType["Column"] = "column";
        /**
         * Gráfico que exibe os dados em forma de barras horizontais e sua extensão varia de acordo com seus valores. É comumente usado como comparativo de séries e categorias.
         */
        PoChartType["Bar"] = "bar";
    })(exports.PoChartType || (exports.PoChartType = {}));

    // Padding padrão
    var PoChartPadding = 24;
    // Área lateral designada para os rótulos do eixo X
    var PoChartAxisXLabelArea = 56;
    // Quantidade de linhas do eixo X
    var PoChartGridLines = 5;
    // Padding top para área interna de plotagem do grid para evitar overflow no hover dos pontos do gráfico do tipo linha;
    var PoChartPlotAreaPaddingTop = 8;
    // Angulação inicial de raio para gráficos do tipo circular
    var PoChartStartAngle = -Math.PI / 2;
    // Valor referente à espessura padrão do gráfico do tipo Donut.
    var PoChartDonutDefaultThickness = 40;
    // Valor para subtração do valor de angulo radiano final de série em tipos Donut e Pie. Necessário para o caso de uma série única: se uma circunferência tiver valores de ângulo de raio inicial e final iguais não plota.
    var PoChartCompleteCircle = 0.0001;
    // Duração da animação para gráficos dos tipos Donut e Pie.
    var durationTime = 1500;
    var PoChartAngleStepInterval = (Math.PI * 2) / Math.floor(durationTime / 60);

    var PoChartMathsService = /** @class */ (function () {
        function PoChartMathsService() {
        }
        /**
         * Calcula e retorna os válores mínimo e máximo das séries.
         *
         * @param series Lista de séries.
         * @param acceptNegativeValues boolean.
         */
        PoChartMathsService.prototype.calculateMinAndMaxValues = function (series, acceptNegativeValues) {
            if (acceptNegativeValues === void 0) { acceptNegativeValues = true; }
            var minValue = this.getDomain(series, 'min');
            var maxValue = this.getDomain(series, 'max');
            return {
                minValue: !acceptNegativeValues && minValue < 0 ? 0 : minValue,
                maxValue: acceptNegativeValues && maxValue < 0 ? 0 : maxValue
            };
        };
        /**
         * Retorna o valor com maior quantidade de dígitos entre todas as séries.
         * Pode receber uma lista de categorias para o caso de gráfico de barra, ou então a lista de séries se o tipo de gráfico for linha ou coluna.
         *
         * @param data Lista de séries.
         * @param type O tipo do gráfico'.
         * @param options As opções para validação de número de linhas do eixo X'.
         */
        PoChartMathsService.prototype.getLongestDataValue = function (data, type, options) {
            if (data === void 0) { data = []; }
            if (type === exports.PoChartType.Bar) {
                return this.getLongestData(data);
            }
            else {
                return this.getAxisXLabelLongestValue(data, this.amountOfGridLines(options === null || options === void 0 ? void 0 : options.axis));
            }
        };
        /**
         * Retorna o tamanho da série que tiver mais itens.
         *
         * @param series Lista de séries.
         */
        PoChartMathsService.prototype.seriesGreaterLength = function (series) {
            return series.reduce(function (result, serie) { return (result > serie.data.length ? result : serie.data.length); }, 0);
        };
        /**
         * Retorna o percentual em decimal da série passada pela distância entre os valores mínimos e máximos da série.
         *
         * Se o valor mínimo for negativo o alcance partirá dele como sendo zero %.
         *
         * Por exemplo:
         *    minValue = -10;
         *    maxValue = 0;
         *    serieValue = -8
         *    O resultado será de 0.20;
         *
         * @param minMaxValues Objeto contendo os valores mínimo e máximo de todas as séries.
         * @param serieValue O valor da série.
         */
        PoChartMathsService.prototype.getSeriePercentage = function (minMaxValues, serieValue) {
            var minValue = minMaxValues.minValue, maxValue = minMaxValues.maxValue;
            var range = maxValue - minValue;
            var displacement = serieValue - minValue;
            var result = displacement / range;
            return isNaN(result) ? 0 : result;
        };
        /**
         * Calcula e retorna uma lista de valores referentes aos textos dos eixos X em relação à quantidade de linhas horizontais.
         *
         * @param minMaxValues Objeto contendo os valores mínimo e máximo de todas as séries.
         * @param gridLines Quantidade de linhas horizontais. Valor default é 5.
         */
        PoChartMathsService.prototype.range = function (minMaxValues, gridLines) {
            if (gridLines === void 0) { gridLines = 5; }
            var minValue = minMaxValues.minValue, maxValue = minMaxValues.maxValue;
            var result = [];
            var step = this.getGridLineArea(minMaxValues, gridLines);
            for (var index = minValue; index <= maxValue; index = (index * 10 + step * 10) / 10) {
                result.push(index);
            }
            return result;
        };
        /**
         *
         * Verifica se o valor passado é um Integer ou Float.
         *
         * @param number O valor a ser validado
         */
        PoChartMathsService.prototype.verifyIfFloatOrInteger = function (number) {
            var notABoolean = typeof number !== 'boolean';
            var notInfinity = number !== Infinity;
            var isInteger = Number(number) === number && number % 1 === 0 && notInfinity;
            var isFloat = Number(number) === number && number % 1 !== 0 && notInfinity;
            return (notABoolean && isInteger) || (notABoolean && isFloat);
        };
        PoChartMathsService.prototype.amountOfGridLines = function (options) {
            var _a;
            var gridLines = (_a = options === null || options === void 0 ? void 0 : options.gridLines) !== null && _a !== void 0 ? _a : PoChartGridLines;
            return gridLines && gridLines >= 2 && gridLines <= 10 ? gridLines : PoChartGridLines;
        };
        PoChartMathsService.prototype.getAxisXLabelLongestValue = function (data, gridLines) {
            var allowNegativeData = data.every(function (dataItem) { return dataItem.type === exports.PoChartType.Line; });
            var domain = this.calculateMinAndMaxValues(data, allowNegativeData);
            var axisXLabelsList = this.range(domain, gridLines);
            return this.getLongestData(axisXLabelsList);
        };
        // Cálculo que retorna o valor obtido de gridLines em relação ao alcance dos valores mínimos e máximos das séries (maxMinValues)
        PoChartMathsService.prototype.getGridLineArea = function (minMaxValues, gridLines) {
            var percentageValue = this.getFractionFromInt(gridLines - 1);
            var minValue = minMaxValues.minValue, maxValue = minMaxValues.maxValue;
            var result = (percentageValue * (maxValue - minValue)) / 100;
            return result === 0 ? 1 : result;
        };
        // Retorna o valor máximo ou mínimo das séries baseado no tipo passado(type).
        PoChartMathsService.prototype.getDomain = function (series, type) {
            var result = Math[type].apply(Math, __spreadArray([], __read(series.map(function (serie) {
                if (Array.isArray(serie.data)) {
                    return Math[type].apply(Math, __spreadArray([], __read(serie.data)));
                }
            }))));
            return isNaN(result) ? 0 : result;
        };
        // Retorna a fração do número passado referente à quantidade de linhas no eixo X (gridLines)
        PoChartMathsService.prototype.getFractionFromInt = function (value) {
            return (1 / value) * (100 / 1);
        };
        PoChartMathsService.prototype.getLongestData = function (serie) {
            var newSerie = __spreadArray([], __read(serie));
            return newSerie.sort(function (longest, current) { return current.toString().length - longest.toString().length; })['0'];
        };
        return PoChartMathsService;
    }());
    PoChartMathsService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PoChartMathsService_Factory() { return new PoChartMathsService(); }, token: PoChartMathsService, providedIn: "root" });
    PoChartMathsService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    var PoChartLineBaseComponent = /** @class */ (function () {
        function PoChartLineBaseComponent(mathsService, renderer, elementRef) {
            this.mathsService = mathsService;
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.alignByTheCorners = false;
            this.pointClick = new i0.EventEmitter();
            this.pointHover = new i0.EventEmitter();
            this.animate = true;
            this.seriesPointsCoordinates = [];
            this._containerSize = {};
            this._range = {};
            this._series = [];
        }
        Object.defineProperty(PoChartLineBaseComponent.prototype, "range", {
            get: function () {
                return this._range;
            },
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._range = value;
                    this.seriePathPointsDefinition(this.containerSize, this._series, this._range);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartLineBaseComponent.prototype, "containerSize", {
            get: function () {
                return this._containerSize;
            },
            set: function (value) {
                this._containerSize = value;
                this.seriePathPointsDefinition(this._containerSize, this.series, this.range);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartLineBaseComponent.prototype, "series", {
            get: function () {
                return this._series;
            },
            set: function (seriesList) {
                var seriesDataArrayFilter = seriesList.filter(function (serie) { return Array.isArray(serie.data); });
                if (seriesDataArrayFilter.length) {
                    this._series = seriesDataArrayFilter;
                    this.animate = true;
                    this.seriesLength = this.mathsService.seriesGreaterLength(this.series);
                    this.chartType = this._series[0].type;
                    this.seriePathPointsDefinition(this.containerSize, seriesDataArrayFilter, this.range);
                }
                else {
                    this._series = [];
                }
            },
            enumerable: false,
            configurable: true
        });
        PoChartLineBaseComponent.prototype.onSeriePointClick = function (selectedItem) {
            this.pointClick.emit(selectedItem);
        };
        PoChartLineBaseComponent.prototype.trackBy = function (index) {
            return index;
        };
        PoChartLineBaseComponent.prototype.getTooltipLabel = function (data, label, tooltipLabel) {
            var dataLabel = label ? label + ": " : '';
            var dataValue = data.toString();
            return tooltipLabel || "" + dataLabel + dataValue;
        };
        PoChartLineBaseComponent.prototype.svgPathCommand = function () {
            var command = this.firstValidItemFromSerieArray ? 'M' : 'L';
            // firstValidItemFromSerieArray: tratamento para permitir ao usuário definir o primeiro valor como null para que seja ignorado;
            this.firstValidItemFromSerieArray = false;
            return command;
        };
        PoChartLineBaseComponent.prototype.xCoordinate = function (index, containerSize) {
            var halfCategoryWidth = !this.alignByTheCorners
                ? (containerSize.svgWidth - containerSize.axisXLabelWidth) / this.seriesLength / 2
                : 0;
            var divideIndexBySeriesLength = index / (this.alignByTheCorners ? this.seriesLength - 1 : this.seriesLength);
            var xRatio = isNaN(divideIndexBySeriesLength) ? 0 : divideIndexBySeriesLength;
            return Math.floor(containerSize.axisXLabelWidth +
                halfCategoryWidth +
                (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio);
        };
        PoChartLineBaseComponent.prototype.serieCategory = function (index, categories) {
            if (categories === void 0) { categories = []; }
            var _a;
            return (_a = categories[index]) !== null && _a !== void 0 ? _a : undefined;
        };
        PoChartLineBaseComponent.prototype.seriePathPointsDefinition = function (containerSize, series, range) {
            var _this = this;
            this.seriesPointsCoordinates = [];
            this.seriesPathsCoordinates = series.map(function (serie) {
                if (Array.isArray(serie.data)) {
                    var pathCoordinates_1 = '';
                    var pointCoordinates_1 = [];
                    var color_1 = serie.color;
                    _this.firstValidItemFromSerieArray = true;
                    serie.data.forEach(function (data, index) {
                        if (_this.mathsService.verifyIfFloatOrInteger(data)) {
                            var svgPathCommand = _this.svgPathCommand();
                            var xCoordinate = _this.xCoordinate(index, containerSize);
                            var yCoordinate = _this.yCoordinate(range, data, containerSize);
                            var category = _this.serieCategory(index, _this.categories);
                            var label = serie.label;
                            var tooltip = serie.tooltip;
                            var tooltipLabel = _this.getTooltipLabel(data, label, tooltip);
                            var isActive = _this.chartType === exports.PoChartType.Line;
                            pointCoordinates_1 = __spreadArray(__spreadArray([], __read(pointCoordinates_1)), [
                                { category: category, label: label, tooltipLabel: tooltipLabel, data: data, xCoordinate: xCoordinate, yCoordinate: yCoordinate, color: color_1, isActive: isActive }
                            ]);
                            pathCoordinates_1 += " " + svgPathCommand + xCoordinate + " " + yCoordinate;
                        }
                    });
                    pathCoordinates_1 = _this.verifyIfClosePath(pathCoordinates_1, serie.data.length - 1, range, 0, containerSize);
                    _this.seriesPointsCoordinates = __spreadArray(__spreadArray([], __read(_this.seriesPointsCoordinates)), [pointCoordinates_1]);
                    return { coordinates: pathCoordinates_1, color: color_1, isActive: true };
                }
            });
        };
        PoChartLineBaseComponent.prototype.verifyIfClosePath = function (pathCoordinates, lastIndex, range, data, containerSize) {
            var axisXLabelWidth = containerSize.axisXLabelWidth, svgWidth = containerSize.svgWidth;
            if (this.chartType === exports.PoChartType.Area) {
                var xLastPosition = this.xCoordinate(lastIndex, containerSize);
                var baseYCoordinate = this.yCoordinate(range, data, containerSize);
                var xInitialPosition = Math.floor(this.alignByTheCorners
                    ? axisXLabelWidth
                    : axisXLabelWidth + (svgWidth - axisXLabelWidth) / this.seriesLength / 2);
                return pathCoordinates + " " + xLastPosition + " " + baseYCoordinate + " L" + xInitialPosition + " " + baseYCoordinate + " Z";
            }
            return pathCoordinates;
        };
        PoChartLineBaseComponent.prototype.yCoordinate = function (range, data, containerSize) {
            var yRratio = this.mathsService.getSeriePercentage(range, data);
            var yCoordinate = containerSize.svgPlottingAreaHeight - containerSize.svgPlottingAreaHeight * yRratio + PoChartPlotAreaPaddingTop;
            return Math.floor(yCoordinate);
        };
        return PoChartLineBaseComponent;
    }());
    PoChartLineBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoChartLineBaseComponent.ctorParameters = function () { return [
        { type: PoChartMathsService },
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    PoChartLineBaseComponent.propDecorators = {
        alignByTheCorners: [{ type: i0.Input, args: ['p-align-by-the-corners',] }],
        categories: [{ type: i0.Input, args: ['p-categories',] }],
        categoriesCoordinates: [{ type: i0.Input, args: ['p-categories-coordinates',] }],
        svgSpace: [{ type: i0.Input, args: ['p-svg-space',] }],
        pointClick: [{ type: i0.Output, args: ['p-point-click',] }],
        pointHover: [{ type: i0.Output, args: ['p-point-hover',] }],
        chartLine: [{ type: i0.ViewChild, args: ['chartLine',] }],
        range: [{ type: i0.Input, args: ['p-range',] }],
        containerSize: [{ type: i0.Input, args: ['p-container-size',] }],
        series: [{ type: i0.Input, args: ['p-series',] }]
    };

    var PoChartAreaComponent = /** @class */ (function (_super) {
        __extends(PoChartAreaComponent, _super);
        function PoChartAreaComponent(mathsService, renderer, elementRef) {
            var _this = _super.call(this, mathsService, renderer, elementRef) || this;
            _this.mathsService = mathsService;
            _this.renderer = renderer;
            _this.elementRef = elementRef;
            return _this;
        }
        PoChartAreaComponent.prototype.onEnter = function (serieIndex) {
            this.applyActiveItem(this.seriesPathsCoordinates, serieIndex);
            this.initializeListener(serieIndex);
            this.activeTooltip = true;
        };
        PoChartAreaComponent.prototype.onLeave = function (serieIndex) {
            this.removeListener();
            this.applyActiveItem(this.seriesPathsCoordinates);
            this.applyActiveItem(this.seriesPointsCoordinates[serieIndex], null);
        };
        PoChartAreaComponent.prototype.onSeriePointHover = function (selectedItem) {
            var relativeTo = selectedItem.relativeTo, item = __rest(selectedItem, ["relativeTo"]);
            this.pointHover.emit(item);
        };
        PoChartAreaComponent.prototype.applyActiveItem = function (list, index) {
            list.forEach(function (serie, seriesIndex) {
                serie['isActive'] = index === undefined ? true : index === seriesIndex;
            });
        };
        PoChartAreaComponent.prototype.getMouseCoordinates = function (event) {
            event.preventDefault();
            var _a = this.svgSpace, svgDomMatrix = _a.svgDomMatrix, svgPoint = _a.svgPoint;
            svgPoint.x = event.clientX;
            svgPoint.y = event.clientY;
            // Retorna as coordenadas do mouse em relação ao container svg.
            return svgPoint.matrixTransform(svgDomMatrix);
        };
        PoChartAreaComponent.prototype.initializeListener = function (serieIndex) {
            var _this = this;
            var pointPosition;
            this.previousActiveSerieIndex = undefined;
            this.mouseMoveSubscription$ = rxjs.fromEvent(this.elementRef.nativeElement, 'mousemove')
                .pipe(operators.debounceTime(10), operators.tap(function (event) { return (pointPosition = _this.getMouseCoordinates(event)); }), operators.switchMap(function () { return rxjs.of(_this.verifyActiveArea(pointPosition)); }))
                .subscribe(function (activeObjIndex) {
                if (activeObjIndex !== undefined) {
                    _this.applyActiveItem(_this.seriesPointsCoordinates[serieIndex], activeObjIndex);
                }
            });
        };
        PoChartAreaComponent.prototype.removeListener = function () {
            this.mouseMoveSubscription$.unsubscribe();
        };
        PoChartAreaComponent.prototype.verifyActiveArea = function (pointPosition) {
            var _this = this;
            var x = pointPosition.x;
            this.currentActiveSerieIndex = this.categoriesCoordinates.findIndex(function (category, index) { return (x >= category && index === _this.categoriesCoordinates.length - 1) ||
                (x >= category && x <= _this.categoriesCoordinates[index + 1]); });
            if (this.currentActiveSerieIndex >= 0 && this.currentActiveSerieIndex !== this.previousActiveSerieIndex) {
                this.previousActiveSerieIndex = this.currentActiveSerieIndex;
                return this.currentActiveSerieIndex;
            }
            return undefined;
        };
        return PoChartAreaComponent;
    }(PoChartLineBaseComponent));
    PoChartAreaComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-chart-area]',
                    template: "<svg:g #chartLine>\r\n\r\n  <svg:g *ngFor=\"let item of seriesPathsCoordinates; let i = index; trackBy: trackBy\"\r\n    [class]=\"'po-chart-line-path-group-' + i\"\r\n    (mouseenter)=\"onEnter(i)\"\r\n    (mouseleave)=\"onLeave(i)\"\r\n  >\r\n    <!-- SERIES PATHS -->\r\n    <svg:g po-chart-path\r\n      [p-chart-line]=\"chartType === 'line'\"\r\n      [attr.key]=\"'po-chart-line-path-' + i\"\r\n      [p-animate]=\"animate\"\r\n      [p-color]=\"item.color\" \r\n      [p-coordinates]=\"item?.coordinates\"\r\n      [p-is-active]=\"item.isActive\"\r\n      >\r\n      </svg:g>\r\n\r\n    <!-- SERIES POINTS -->\r\n    <svg:g po-chart-series-point\r\n      [p-animate]=\"animate\"\r\n      [p-chart-line]=\"chartType === 'line'\"\r\n      [p-color]=\"item.color\"\r\n      [p-coordinates]=\"seriesPointsCoordinates[i]\"\r\n      [p-is-active]=\"activeTooltip\"\r\n      [p-relative-to]=\"'po-chart-line-path-group-' + i\" \r\n      [attr.key]=\"'po-chart-line-path-points-group-' + i\"\r\n      (p-point-click)=\"onSeriePointClick($event)\"\r\n      (p-point-hover)=\"onSeriePointHover($event)\"\r\n      ></svg:g>\r\n  </svg:g>\r\n\r\n</svg:g>"
                },] }
    ];
    PoChartAreaComponent.ctorParameters = function () { return [
        { type: PoChartMathsService },
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };

    var PoChartAxisComponent = /** @class */ (function () {
        function PoChartAxisComponent(mathsService) {
            this.mathsService = mathsService;
            this.alignByTheCorners = false;
            this.categoriesCoordinates = new i0.EventEmitter();
            this.axisXLabels = [];
            this.axisYLabels = [];
            this.gridLines = PoChartGridLines;
            this.seriesLength = 0;
            this._categories = [];
            this._containerSize = {};
            this._series = [];
        }
        Object.defineProperty(PoChartAxisComponent.prototype, "series", {
            get: function () {
                return this._series;
            },
            set: function (seriesList) {
                var seriesDataArrayFilter = seriesList.filter(function (serie) { return Array.isArray(serie.data); });
                if (seriesDataArrayFilter.length) {
                    this._series = seriesDataArrayFilter;
                    this.seriesLength = this.mathsService.seriesGreaterLength(this.series);
                    this.checkAxisOptions(this.axisOptions);
                    this.setAxisXCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
                    this.setAxisYCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
                }
                else {
                    this._series = [];
                    this.cleanUpCoordinates();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartAxisComponent.prototype, "categories", {
            get: function () {
                return this._categories;
            },
            set: function (value) {
                this._categories = value;
                if (this.type === exports.PoChartType.Bar) {
                    this.setAxisXCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
                }
                else {
                    this.setAxisYCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartAxisComponent.prototype, "containerSize", {
            get: function () {
                return this._containerSize;
            },
            set: function (value) {
                this._containerSize = value;
                this.checkAxisOptions(this.axisOptions);
                this.setAxisXCoordinates(this.gridLines, this.seriesLength, this._containerSize, this.range, this.type);
                this.setAxisYCoordinates(this.gridLines, this.seriesLength, this._containerSize, this.range, this.type);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartAxisComponent.prototype, "axisOptions", {
            get: function () {
                return this._axisOptions;
            },
            set: function (value) {
                this._axisOptions = value;
                this.checkAxisOptions(this._axisOptions);
                if (this.type === exports.PoChartType.Bar) {
                    this.setAxisYCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
                }
                else {
                    this.setAxisXCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
                }
            },
            enumerable: false,
            configurable: true
        });
        PoChartAxisComponent.prototype.setAxisXCoordinates = function (gridLines, seriesLength, containerSize, minMaxAxisValues, type) {
            if (seriesLength) {
                var amountOfAxisLabels = type === exports.PoChartType.Bar ? seriesLength : gridLines;
                this.calculateAxisXLabelCoordinates(amountOfAxisLabels, containerSize, minMaxAxisValues, type);
            }
            var amountOfAxisXLines = this.amountOfAxisXLines(seriesLength, gridLines, type);
            this.calculateAxisXCoordinates(amountOfAxisXLines, containerSize, minMaxAxisValues);
        };
        PoChartAxisComponent.prototype.amountOfAxisXLines = function (seriesLength, gridLines, type) {
            if (type === exports.PoChartType.Bar) {
                return seriesLength <= 1 ? 2 : seriesLength + 1;
            }
            return gridLines === 0 ? 1 : gridLines;
        };
        PoChartAxisComponent.prototype.setAxisYCoordinates = function (gridLines, seriesLength, containerSize, minMaxAxisValues, type) {
            var amountOfAxisY = type === exports.PoChartType.Bar ? gridLines : seriesLength;
            if (seriesLength) {
                this.calculateAxisYLabelCoordinates(amountOfAxisY, containerSize, minMaxAxisValues, type);
            }
            if (type === exports.PoChartType.Area) {
                this.getCategoriesRangeForMouseMove(amountOfAxisY, containerSize);
            }
            this.calculateAxisYCoordinates(amountOfAxisY, containerSize, type, minMaxAxisValues);
        };
        PoChartAxisComponent.prototype.calculateAxisXCoordinates = function (amountOfAxisX, containerSize, range) {
            var _this = this;
            var startX = containerSize.axisXLabelWidth;
            var endX = containerSize.svgWidth;
            var coordinatesReferedToZero;
            var coordinatesList = __spreadArray([], __read(Array(amountOfAxisX))).map(function (_, index) {
                var yCoordinate = _this.calculateAxisXCoordinateY(amountOfAxisX, containerSize, index);
                var coordinates = "M" + startX + " " + yCoordinate + " L" + endX + ", " + yCoordinate;
                return { coordinates: coordinates };
            });
            // Avalia a necessidade de adicionar a linha referente ao valor zero em gráficos do tipo `column`, `area` e `line`.
            if (this.type !== exports.PoChartType.Bar && range.minValue < 0 && !this.axisXLabels.includes('0')) {
                coordinatesReferedToZero = this.getCoordinatesRelatedToZero(containerSize, range, startX, endX);
                coordinatesList = __spreadArray(__spreadArray([], __read(coordinatesList)), [coordinatesReferedToZero]);
            }
            this.axisXCoordinates = coordinatesList;
        };
        PoChartAxisComponent.prototype.getCoordinatesRelatedToZero = function (containerSize, range, start, end, isAxisY) {
            if (isAxisY === void 0) { isAxisY = false; }
            var type = isAxisY ? exports.PoChartType.Bar : exports.PoChartType.Column;
            var basePosition = this.axisCoordinatesForValueZero(range, 0, containerSize, isAxisY);
            var coordinates = {
                column: {
                    startX: start,
                    endX: end,
                    startY: basePosition,
                    endY: basePosition
                },
                bar: {
                    startX: basePosition,
                    endX: basePosition,
                    startY: start,
                    endY: end
                }
            };
            return {
                coordinates: "M" + coordinates[type].startX + " " + coordinates[type].startY + " L" + coordinates[type].endX + " " + coordinates[type].endY
            };
        };
        PoChartAxisComponent.prototype.axisCoordinatesForValueZero = function (range, data, containerSize, isAxisY) {
            var axisXLabelWidth = containerSize.axisXLabelWidth, svgWidth = containerSize.svgWidth, svgPlottingAreaHeight = containerSize.svgPlottingAreaHeight;
            var ratio = this.mathsService.getSeriePercentage(range, data);
            return Math.floor(isAxisY
                ? axisXLabelWidth + (svgWidth - axisXLabelWidth) * ratio
                : svgPlottingAreaHeight - svgPlottingAreaHeight * ratio + PoChartPlotAreaPaddingTop);
        };
        PoChartAxisComponent.prototype.calculateAxisXLabelCoordinates = function (amountOfAxisX, containerSize, minMaxAxisValues, type) {
            var _this = this;
            this.axisXLabels = this.getAxisXLabels(type, minMaxAxisValues, amountOfAxisX);
            this.axisXLabelCoordinates = __spreadArray([], __read(Array(amountOfAxisX))).map(function (_, index) {
                var label = _this.axisXLabels[index];
                var xCoordinate = _this.calculateAxisXLabelXCoordinate(containerSize.axisXLabelWidth);
                var yCoordinate = _this.calculateAxisXLabelYCoordinate(amountOfAxisX, containerSize, type, index);
                return { label: label, xCoordinate: xCoordinate, yCoordinate: yCoordinate };
            });
        };
        PoChartAxisComponent.prototype.calculateAxisYCoordinates = function (amountOfAxisY, containerSize, type, range) {
            var _this = this;
            var startY = PoChartPlotAreaPaddingTop;
            var endY = containerSize.svgPlottingAreaHeight + PoChartPlotAreaPaddingTop;
            // tratamento necessário para criar uma linha a mais para fechar o gráfico
            var length = amountOfAxisY === 0 || type === exports.PoChartType.Bar ? amountOfAxisY : amountOfAxisY + 1;
            var coordinatesReferedToZero;
            var coordinatesList = __spreadArray([], __read(Array(length))).map(function (_, index) {
                var xCoordinate = _this.calculateAxisYCoordinateX(containerSize, amountOfAxisY, index);
                var coordinates = "M" + xCoordinate + " " + startY + " L" + xCoordinate + ", " + endY;
                return { coordinates: coordinates };
            });
            // Avalia a necessidade de adicionar a linha referente ao valor zero em gráficos do tipo `bar`.
            if (type === exports.PoChartType.Bar && range.minValue < 0 && !this.axisYLabels.includes('0')) {
                coordinatesReferedToZero = this.getCoordinatesRelatedToZero(containerSize, range, startY, endY, true);
                coordinatesList = __spreadArray(__spreadArray([], __read(coordinatesList)), [coordinatesReferedToZero]);
            }
            this.axisYCoordinates = __spreadArray([], __read(coordinatesList));
        };
        PoChartAxisComponent.prototype.calculateAxisYLabelCoordinates = function (amountOfAxisY, containerSize, minMaxAxisValues, type) {
            var _this = this;
            this.axisYLabels = this.getAxisYLabels(type, minMaxAxisValues, amountOfAxisY);
            this.axisYLabelCoordinates = __spreadArray([], __read(Array(amountOfAxisY))).map(function (_, index) {
                var label = _this.axisYLabels[index];
                var xCoordinate = _this.getAxisXCoordinates(containerSize, amountOfAxisY, type, index);
                var yCoordinate = _this.calculateAxisYLabelYCoordinate(containerSize);
                return { label: label, xCoordinate: xCoordinate, yCoordinate: yCoordinate };
            });
        };
        PoChartAxisComponent.prototype.calculateAxisXLabelXCoordinate = function (axisXLabelWidth) {
            var labelPoChartPadding = PoChartPadding / 3;
            return axisXLabelWidth - labelPoChartPadding;
        };
        PoChartAxisComponent.prototype.calculateAxisXLabelYCoordinate = function (amountOfAxisX, containerSize, type, index) {
            var amountOfLines = type === exports.PoChartType.Bar ? amountOfAxisX : amountOfAxisX - 1;
            var yRatio = index / amountOfLines;
            if (type !== exports.PoChartType.Bar) {
                return (containerSize.svgPlottingAreaHeight - containerSize.svgPlottingAreaHeight * yRatio + PoChartPlotAreaPaddingTop);
            }
            var halfCategoryHeight = containerSize.svgPlottingAreaHeight / amountOfAxisX / 2;
            return (containerSize.svgPlottingAreaHeight -
                halfCategoryHeight -
                containerSize.svgPlottingAreaHeight * yRatio +
                PoChartPlotAreaPaddingTop);
        };
        PoChartAxisComponent.prototype.calculateAxisXCoordinateY = function (amountOfAxisX, containerSize, index) {
            var yRatio = index / (amountOfAxisX - 1);
            return (containerSize.svgPlottingAreaHeight - containerSize.svgPlottingAreaHeight * yRatio + PoChartPlotAreaPaddingTop);
        };
        PoChartAxisComponent.prototype.calculateAxisYLabelYCoordinate = function (containerSize) {
            var textPoChartPadding = PoChartPadding / 3;
            return containerSize.svgHeight - textPoChartPadding;
        };
        PoChartAxisComponent.prototype.centeredInCategoryArea = function (containerSize, amountOfAxisY, type, index) {
            var amountOfLines = type === exports.PoChartType.Bar ? amountOfAxisY - 1 : amountOfAxisY;
            var xRatio = index / amountOfLines;
            if (type === exports.PoChartType.Bar) {
                return Math.round(containerSize.axisXLabelWidth + (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio);
            }
            var halfCategoryWidth = (containerSize.svgWidth - containerSize.axisXLabelWidth) / amountOfAxisY / 2;
            return Math.round(containerSize.axisXLabelWidth +
                halfCategoryWidth +
                (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio);
        };
        PoChartAxisComponent.prototype.calculateAxisYCoordinateX = function (containerSize, amountOfAxisY, index, subtractCategoryWidth) {
            if (subtractCategoryWidth === void 0) { subtractCategoryWidth = false; }
            var amountOfLines = this.alignByTheCorners ? amountOfAxisY - 1 : amountOfAxisY;
            var halfCategoryWidth = this.alignByTheCorners && subtractCategoryWidth
                ? (containerSize.svgWidth - containerSize.axisXLabelWidth) / (amountOfAxisY - 1) / 2
                : 0;
            var divideIndexByAmountOfLines = index / amountOfLines;
            var xRatio = divideIndexByAmountOfLines === Infinity ? 0 : divideIndexByAmountOfLines;
            return Math.round(containerSize.axisXLabelWidth +
                (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio -
                halfCategoryWidth);
        };
        PoChartAxisComponent.prototype.checkAxisOptions = function (options) {
            if (options === void 0) { options = {}; }
            this.gridLines =
                options.gridLines && this.isValidGridLinesLengthOption(options.gridLines) ? options.gridLines : PoChartGridLines;
        };
        PoChartAxisComponent.prototype.cleanUpCoordinates = function () {
            this.axisXCoordinates = [];
            this.axisYCoordinates = [];
            this.axisXLabelCoordinates = [];
            this.axisYLabelCoordinates = [];
            this.seriesLength = 0;
        };
        PoChartAxisComponent.prototype.getAxisXCoordinates = function (containerSize, amountOfAxisY, type, index) {
            return this.alignByTheCorners
                ? this.calculateAxisYCoordinateX(containerSize, amountOfAxisY, index)
                : this.centeredInCategoryArea(containerSize, amountOfAxisY, type, index);
        };
        PoChartAxisComponent.prototype.getCategoriesRangeForMouseMove = function (amountOfAxisY, containerSize) {
            var _this = this;
            var categoriesCoordinates = __spreadArray([], __read(Array(amountOfAxisY))).map(function (_, index) { return _this.calculateAxisYCoordinateX(containerSize, amountOfAxisY, index, true); });
            this.categoriesCoordinates.emit(categoriesCoordinates);
        };
        PoChartAxisComponent.prototype.isValidGridLinesLengthOption = function (gridLines) {
            return gridLines >= 2 && gridLines <= 10;
        };
        PoChartAxisComponent.prototype.getAxisXLabels = function (type, minMaxAxisValues, amountOfAxisX) {
            if (type === exports.PoChartType.Bar) {
                var axisXLabelsList = this.formatCategoriesLabels(amountOfAxisX, this.categories);
                return axisXLabelsList.reverse();
            }
            return this.generateAverageOfLabels(minMaxAxisValues, amountOfAxisX);
        };
        PoChartAxisComponent.prototype.getAxisYLabels = function (type, minMaxAxisValues, amountOfAxisX) {
            return type === exports.PoChartType.Bar
                ? this.generateAverageOfLabels(minMaxAxisValues, amountOfAxisX)
                : this.formatCategoriesLabels(amountOfAxisX, this.categories);
        };
        PoChartAxisComponent.prototype.formatCategoriesLabels = function (amountOfAxisX, categories) {
            if (categories === void 0) { categories = []; }
            return __spreadArray([], __read(Array(amountOfAxisX))).map(function (_, index) { var _a; return (_a = categories[index]) !== null && _a !== void 0 ? _a : '-'; });
        };
        PoChartAxisComponent.prototype.generateAverageOfLabels = function (minMaxAxisValues, amountOfAxisLines) {
            var averageLabelsList = this.mathsService.range(minMaxAxisValues, amountOfAxisLines);
            return averageLabelsList.map(function (label) {
                var formattedDigit = label.toFixed(label % 1 && 2);
                // Remove dígitos com zero.
                // Também trata caso quando o valor retornado era -0, substituindo-o por 0.
                var removeZeroDigits = formattedDigit.replace(/\.00$/, '').replace(/\-0$/, 0);
                return removeZeroDigits.toString();
            });
        };
        return PoChartAxisComponent;
    }());
    PoChartAxisComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-chart-axis]',
                    template: "<svg:g po-chart-axis-path [p-axis-x-coordinates]=\"axisXCoordinates\" [p-axis-y-coordinates]=\"axisYCoordinates\"></svg:g>\r\n\r\n<svg:g po-chart-axis-label \r\n  [p-align-by-the-corners]=\"alignByTheCorners\" \r\n  [p-axis-x-label-coordinates]=\"axisXLabelCoordinates\" \r\n  [p-axis-y-label-coordinates]=\"axisYLabelCoordinates\" \r\n  [p-type]=\"type\"\r\n  >\r\n</svg:g>"
                },] }
    ];
    PoChartAxisComponent.ctorParameters = function () { return [
        { type: PoChartMathsService }
    ]; };
    PoChartAxisComponent.propDecorators = {
        alignByTheCorners: [{ type: i0.Input, args: ['p-align-by-the-corners',] }],
        type: [{ type: i0.Input, args: ['p-type',] }],
        range: [{ type: i0.Input, args: ['p-range',] }],
        categoriesCoordinates: [{ type: i0.Output, args: ['p-categories-coordinates',] }],
        series: [{ type: i0.Input, args: ['p-series',] }],
        categories: [{ type: i0.Input, args: ['p-categories',] }],
        containerSize: [{ type: i0.Input, args: ['p-container-size',] }],
        axisOptions: [{ type: i0.Input, args: ['p-options',] }]
    };

    var PoChartAxisPathComponent = /** @class */ (function () {
        function PoChartAxisPathComponent() {
        }
        PoChartAxisPathComponent.prototype.trackBy = function (index) {
            return index;
        };
        return PoChartAxisPathComponent;
    }());
    PoChartAxisPathComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-chart-axis-path]',
                    template: "<svg:g>\r\n  <svg:path *ngFor=\"let item of axisXCoordinates; trackBy: trackBy\"\r\n    class=\"po-chart-axis-path\" \r\n    [attr.d]=\"item.coordinates\">\r\n  </svg:path> \r\n</svg:g>\r\n\r\n<svg:g>\r\n  <svg:path *ngFor=\"let item of axisYCoordinates; trackBy: trackBy\"\r\n    class=\"po-chart-axis-path\" \r\n    [attr.d]=\"item.coordinates\">\r\n  </svg:path> \r\n</svg:g>"
                },] }
    ];
    PoChartAxisPathComponent.ctorParameters = function () { return []; };
    PoChartAxisPathComponent.propDecorators = {
        axisXCoordinates: [{ type: i0.Input, args: ['p-axis-x-coordinates',] }],
        axisYCoordinates: [{ type: i0.Input, args: ['p-axis-y-coordinates',] }]
    };

    var PoChartAxisLabelComponent = /** @class */ (function () {
        function PoChartAxisLabelComponent() {
            this.alignByTheCorners = false;
        }
        PoChartAxisLabelComponent.prototype.trackBy = function (index) {
            return index;
        };
        return PoChartAxisLabelComponent;
    }());
    PoChartAxisLabelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-chart-axis-label]',
                    template: "<svg:g>\r\n  <svg:text *ngFor=\"let item of axisXLabelCoordinates; trackBy: trackBy\"\r\n    class=\"po-chart-axis-x-label\" \r\n    dominant-baseline=\"middle\"\r\n    [attr.x]=\"item.xCoordinate\"\r\n    [attr.y]=\"item.yCoordinate\">\r\n    {{ item.label }}\r\n  </svg:text> \r\n</svg:g>\r\n\r\n<svg:g>\r\n  <svg:text *ngFor=\"let item of axisYLabelCoordinates; let first = first; let last = last; trackBy: trackBy\"\r\n    class=\"po-chart-axis-y-label\" \r\n    [class.po-chart-centered-label]=\"!alignByTheCorners\"\r\n    [attr.x]=\"item.xCoordinate\"\r\n    [attr.y]=\"item.yCoordinate\">\r\n    {{ item.label }}\r\n  </svg:text> \r\n</svg:g>"
                },] }
    ];
    PoChartAxisLabelComponent.ctorParameters = function () { return []; };
    PoChartAxisLabelComponent.propDecorators = {
        alignByTheCorners: [{ type: i0.Input, args: ['p-align-by-the-corners',] }],
        axisXLabelCoordinates: [{ type: i0.Input, args: ['p-axis-x-label-coordinates',] }],
        axisYLabelCoordinates: [{ type: i0.Input, args: ['p-axis-y-label-coordinates',] }],
        type: [{ type: i0.Input, args: ['p-type',] }]
    };

    var PoChartBarBaseComponent = /** @class */ (function () {
        function PoChartBarBaseComponent(mathsService) {
            this.mathsService = mathsService;
            this.barClick = new i0.EventEmitter();
            this.barHover = new i0.EventEmitter();
            this._containerSize = {};
            this._range = {};
            this._series = [];
        }
        Object.defineProperty(PoChartBarBaseComponent.prototype, "range", {
            get: function () {
                return this._range;
            },
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._range = value;
                    this.calculateSeriesPathsCoordinates(this.containerSize, this._series, this._range);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartBarBaseComponent.prototype, "containerSize", {
            get: function () {
                return this._containerSize;
            },
            set: function (value) {
                this._containerSize = value;
                this.calculateSeriesPathsCoordinates(this._containerSize, this.series, this.range);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartBarBaseComponent.prototype, "series", {
            get: function () {
                return this._series;
            },
            set: function (seriesList) {
                var seriesDataArrayFilter = seriesList.filter(function (serie) { return Array.isArray(serie.data); });
                if (seriesDataArrayFilter.length) {
                    this._series = seriesDataArrayFilter;
                    this.seriesGreaterLength = this.mathsService.seriesGreaterLength(this.series);
                    this.calculateSeriesPathsCoordinates(this.containerSize, seriesDataArrayFilter, this.range);
                }
                else {
                    this._series = [];
                }
            },
            enumerable: false,
            configurable: true
        });
        PoChartBarBaseComponent.prototype.onSerieBarClick = function (selectedItem) {
            this.barClick.emit(selectedItem);
        };
        PoChartBarBaseComponent.prototype.onSerieBarHover = function (selectedItem) {
            this.barHover.emit(selectedItem);
        };
        PoChartBarBaseComponent.prototype.trackBy = function (index) {
            return index;
        };
        PoChartBarBaseComponent.prototype.calculateSeriesPathsCoordinates = function (containerSize, series, range) {
            var _this = this;
            this.seriesPathsCoordinates = series.map(function (serie, seriesIndex) {
                if (Array.isArray(serie.data)) {
                    var pathCoordinates_1 = [];
                    serie.data.forEach(function (data, serieDataIndex) {
                        if (_this.mathsService.verifyIfFloatOrInteger(data)) {
                            var coordinates = _this.barCoordinates(seriesIndex, serieDataIndex, containerSize, range, data);
                            var category = _this.serieCategory(serieDataIndex, _this.categories);
                            var label = serie['label'];
                            var color = serie['color'];
                            var tooltip = serie['tooltip'];
                            var tooltipLabel = _this.getTooltipLabel(data, label, tooltip);
                            pathCoordinates_1 = __spreadArray(__spreadArray([], __read(pathCoordinates_1)), [{ category: category, color: color, label: label, tooltipLabel: tooltipLabel, data: data, coordinates: coordinates }]);
                        }
                    });
                    return pathCoordinates_1;
                }
            });
        };
        PoChartBarBaseComponent.prototype.getTooltipLabel = function (data, label, tooltipLabel) {
            var dataLabel = label ? label + ": " : '';
            var dataValue = data.toString();
            return tooltipLabel || "" + dataLabel + dataValue;
        };
        PoChartBarBaseComponent.prototype.serieCategory = function (index, categories) {
            if (categories === void 0) { categories = []; }
            var _a;
            return (_a = categories[index]) !== null && _a !== void 0 ? _a : undefined;
        };
        return PoChartBarBaseComponent;
    }());
    PoChartBarBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoChartBarBaseComponent.ctorParameters = function () { return [
        { type: PoChartMathsService }
    ]; };
    PoChartBarBaseComponent.propDecorators = {
        categories: [{ type: i0.Input, args: ['p-categories',] }],
        barClick: [{ type: i0.Output, args: ['p-bar-click',] }],
        barHover: [{ type: i0.Output, args: ['p-bar-hover',] }],
        range: [{ type: i0.Input, args: ['p-range',] }],
        containerSize: [{ type: i0.Input, args: ['p-container-size',] }],
        series: [{ type: i0.Input, args: ['p-series',] }]
    };

    var PoChartBarComponent = /** @class */ (function (_super) {
        __extends(PoChartBarComponent, _super);
        function PoChartBarComponent(mathsService) {
            var _this = _super.call(this, mathsService) || this;
            _this.mathsService = mathsService;
            _this.tooltipPosition = 'right';
            return _this;
        }
        PoChartBarComponent.prototype.barCoordinates = function (seriesIndex, serieItemDataIndex, containerSize, minMaxSeriesValues, serieValue) {
            var _a = this.calculateElementsMeasurements(containerSize), svgPlottingAreaWidth = _a.svgPlottingAreaWidth, barHeight = _a.barHeight, spaceBetweenBars = _a.spaceBetweenBars;
            var _b = this.xCoordinates(minMaxSeriesValues, svgPlottingAreaWidth, containerSize.axisXLabelWidth, containerSize.svgWidth, serieValue), x1 = _b.x1, x2 = _b.x2;
            var _c = this.yCoordinates(seriesIndex, serieItemDataIndex, containerSize.svgPlottingAreaHeight, barHeight, spaceBetweenBars), y1 = _c.y1, y2 = _c.y2;
            return ['M', x1, y2, 'L', x2, y2, 'L', x2, y1, 'L', x1, y1, 'z'].join(' ');
        };
        PoChartBarComponent.prototype.calculateElementsMeasurements = function (containerSize) {
            var svgWidth = containerSize.svgWidth, svgPlottingAreaHeight = containerSize.svgPlottingAreaHeight, axisXLabelWidth = containerSize.axisXLabelWidth;
            // Fração das séries em relação à largura da categoria. Incrementa + 2 na extensão das séries pois se trata da área de margem entre as categorias.
            var svgPlottingAreaWidth = svgWidth - axisXLabelWidth;
            var categoryHeight = svgPlottingAreaHeight / this.seriesGreaterLength;
            var columnFraction = categoryHeight / (this.series.length + 2);
            // Área entre as colunas: retorna zero se houver apenas uma série.
            var spaceBetweenBars = this.series.length > 1 ? columnFraction / (this.series.length + 2) : 0;
            // Subtrai a fração das séries pelo espaço entre as colunas.
            var barHeight = columnFraction - (spaceBetweenBars * (this.series.length - 1)) / (this.series.length + 2);
            return { svgPlottingAreaWidth: svgPlottingAreaWidth, barHeight: barHeight, spaceBetweenBars: spaceBetweenBars };
        };
        PoChartBarComponent.prototype.xCoordinates = function (minMaxSeriesValues, svgPlottingAreaWidth, axisXLabelWidth, svgWidth, serieValue) {
            var minValue = minMaxSeriesValues.minValue;
            var valueZeroPercentage = this.mathsService.getSeriePercentage(minMaxSeriesValues, minValue < 0 ? 0 : minValue);
            var x1 = axisXLabelWidth + (svgWidth - axisXLabelWidth) * valueZeroPercentage;
            var xRatio = this.mathsService.getSeriePercentage(minMaxSeriesValues, serieValue);
            var x2 = Math.round(svgPlottingAreaWidth * xRatio + axisXLabelWidth);
            return { x1: x1, x2: x2 };
        };
        PoChartBarComponent.prototype.yCoordinates = function (seriesIndex, serieItemDataIndex, svgPlottingAreaHeight, barHeight, spaceBetweenBars) {
            var spaceBetweenAxisAndBars = barHeight;
            var yRatio = serieItemDataIndex / this.seriesGreaterLength;
            var y1 = Math.round(PoChartPlotAreaPaddingTop +
                svgPlottingAreaHeight * yRatio +
                spaceBetweenAxisAndBars +
                barHeight * seriesIndex +
                spaceBetweenBars * seriesIndex);
            var y2 = Math.round(y1 + barHeight);
            return { y1: y1, y2: y2 };
        };
        return PoChartBarComponent;
    }(PoChartBarBaseComponent));
    PoChartBarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-chart-bar]',
                    template: "<svg:g>\r\n  <svg:g *ngFor=\"let item of seriesPathsCoordinates; let i = index; trackBy: trackBy\"\r\n    [class]=\"'po-chart-bar-group-' + i\"\r\n  >\r\n    <!-- SERIES PATHS -->\r\n    <svg:g po-chart-bar-path\r\n      [attr.key]=\"'po-chart-bar-path-' + i\"\r\n      [p-color]=\"item[0]?.color\" \r\n      [p-coordinates]=\"item\"\r\n      [p-tooltip-position]=\"tooltipPosition\"\r\n      (p-bar-click)=\"onSerieBarClick($event)\"\r\n      (p-bar-hover)=\"onSerieBarHover($event)\"\r\n      >\r\n      </svg:g>\r\n  </svg:g>\r\n</svg:g>"
                },] }
    ];
    PoChartBarComponent.ctorParameters = function () { return [
        { type: PoChartMathsService }
    ]; };

    var PoChartColumnComponent = /** @class */ (function (_super) {
        __extends(PoChartColumnComponent, _super);
        function PoChartColumnComponent(mathsService) {
            var _this = _super.call(this, mathsService) || this;
            _this.mathsService = mathsService;
            _this.tooltipPosition = 'top';
            return _this;
        }
        PoChartColumnComponent.prototype.barCoordinates = function (seriesIndex, serieItemDataIndex, containerSize, minMaxSeriesValues, serieValue) {
            var svgWidth = containerSize.svgWidth, axisXLabelWidth = containerSize.axisXLabelWidth, svgPlottingAreaHeight = containerSize.svgPlottingAreaHeight;
            var _a = this.calculateElementsMeasurements(svgWidth, axisXLabelWidth), chartBarPlotArea = _a.chartBarPlotArea, barWidth = _a.barWidth, spaceBetweenBars = _a.spaceBetweenBars;
            var _b = this.xCoordinates(seriesIndex, serieItemDataIndex, chartBarPlotArea, barWidth, spaceBetweenBars, axisXLabelWidth), x1 = _b.x1, x2 = _b.x2;
            var _c = this.yCoordinates(minMaxSeriesValues, svgPlottingAreaHeight, serieValue), y1 = _c.y1, y2 = _c.y2;
            return ['M', x1, y2, 'L', x2, y2, 'L', x2, y1, 'L', x1, y1, 'z'].join(' ');
        };
        PoChartColumnComponent.prototype.calculateElementsMeasurements = function (svgWidth, axisXLabelWidth) {
            // Fração das séries em relação à largura da categoria. Incrementa + 2 na extensão das séries pois se trata da área de margem entre as categorias.
            var chartBarPlotArea = svgWidth - axisXLabelWidth;
            var categoryWidth = chartBarPlotArea / this.seriesGreaterLength;
            var columnFraction = categoryWidth / (this.series.length + 2);
            // Área entre as colunas: retorna zero se houver apenas uma série.
            var spaceBetweenBars = this.series.length > 1 ? columnFraction / (this.series.length + 2) : 0;
            // Subtrai a fração das séries pelo espaço entre as colunas.
            var barWidth = columnFraction - (spaceBetweenBars * (this.series.length - 1)) / (this.series.length + 2);
            return { chartBarPlotArea: chartBarPlotArea, barWidth: barWidth, spaceBetweenBars: spaceBetweenBars };
        };
        PoChartColumnComponent.prototype.xCoordinates = function (seriesIndex, serieItemDataIndex, chartBarPlotArea, barWidth, spaceBetweenBars, axisXLabelWidth) {
            // A área lateral entre a coluna e a linha do eixo Y do grid será sempre equivalente à largura da coluna.
            var spaceBetweenAxisAndBars = barWidth;
            var xRatio = serieItemDataIndex / this.seriesGreaterLength;
            var x1 = Math.round(axisXLabelWidth +
                chartBarPlotArea * xRatio +
                spaceBetweenAxisAndBars +
                barWidth * seriesIndex +
                spaceBetweenBars * seriesIndex);
            var x2 = Math.round(x1 + barWidth);
            return { x1: x1, x2: x2 };
        };
        PoChartColumnComponent.prototype.yCoordinates = function (minMaxSeriesValues, svgPlottingAreaHeight, serieValue) {
            var minValue = minMaxSeriesValues.minValue;
            var minValuePercentage = this.mathsService.getSeriePercentage(minMaxSeriesValues, minValue < 0 ? 0 : minValue);
            var y1 = Math.round(svgPlottingAreaHeight - svgPlottingAreaHeight * minValuePercentage + PoChartPlotAreaPaddingTop);
            var yRatio = this.mathsService.getSeriePercentage(minMaxSeriesValues, serieValue);
            var y2 = Math.round(svgPlottingAreaHeight - svgPlottingAreaHeight * yRatio + PoChartPlotAreaPaddingTop);
            return { y1: y1, y2: y2 };
        };
        return PoChartColumnComponent;
    }(PoChartBarBaseComponent));
    PoChartColumnComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-chart-column]',
                    template: "<svg:g>\r\n  <svg:g *ngFor=\"let item of seriesPathsCoordinates; let i = index; trackBy: trackBy\"\r\n    [class]=\"'po-chart-bar-group-' + i\"\r\n  >\r\n    <!-- SERIES PATHS -->\r\n    <svg:g po-chart-bar-path\r\n      [attr.key]=\"'po-chart-bar-path-' + i\"\r\n      [p-color]=\"item[0]?.color\" \r\n      [p-coordinates]=\"item\"\r\n      [p-tooltip-position]=\"tooltipPosition\"\r\n      (p-bar-click)=\"onSerieBarClick($event)\"\r\n      (p-bar-hover)=\"onSerieBarHover($event)\"\r\n      >\r\n      </svg:g>\r\n  </svg:g>\r\n</svg:g>"
                },] }
    ];
    PoChartColumnComponent.ctorParameters = function () { return [
        { type: PoChartMathsService }
    ]; };

    // Array de cores para gráficos definido pela equipe de UX PO.
    var PoDefaultColors = [
        ['#29B6C5'],
        ['#0C6C94', '#29B6C5'],
        ['#0C6C94', '#29B6C5', '#C9ECF0'],
        ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2'],
        ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2', '#C9ECF0'],
        ['#0C6C94', '#00A5C5', '#0082A8', '#31628D', '#364473', '#32285C'],
        ['#0C6C94', '#00AACB', '#018DAE', '#277099', '#325783', '#35426E', '#32285D'],
        ['#0C6C94', '#00AFCE', '#0194B6', '#117FA2', '#0088AC', '#23789F', '#2B6992', '#32285C'],
        ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#32285C'],
        ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#32285C'],
        [
            '#0C6C94',
            '#00BAD5',
            '#00A7C7',
            '#0197B8',
            '#0088AC',
            '#23789F',
            '#2B6992',
            '#315C87',
            '#364E7C',
            '#36436F',
            '#32285C'
        ],
        [
            '#0C6C94',
            '#00BAD5',
            '#00A7C7',
            '#0197B8',
            '#0088AC',
            '#23789F',
            '#2B6992',
            '#315C87',
            '#364E7C',
            '#36436F',
            '#333565',
            '#32285C'
        ]
    ];
    // Cores que será utilizado texto preto
    var PoDefaultColorsTextBlack = ['#94DAE2', '#C9ECF0'];

    /**
     * @docsPrivate
     *
     * @description
     *
     * Enum que contém paleta de 12 cores.
     */
    var PoColorPaletteEnum;
    (function (PoColorPaletteEnum) {
        /** #0c9abe */
        PoColorPaletteEnum["Color01"] = "color-01";
        /** #2c85c8 */
        PoColorPaletteEnum["Color02"] = "color-02";
        /** #2c43c8 */
        PoColorPaletteEnum["Color03"] = "color-03";
        /** #5843c8 */
        PoColorPaletteEnum["Color04"] = "color-04";
        /** #ab43c8 */
        PoColorPaletteEnum["Color05"] = "color-05";
        /** #ab4391 */
        PoColorPaletteEnum["Color06"] = "color-06";
        /** #c64840 */
        PoColorPaletteEnum["Color07"] = "color-07";
        /** #ea9b3e */
        PoColorPaletteEnum["Color08"] = "color-08";
        /** #abc249 */
        PoColorPaletteEnum["Color09"] = "color-09";
        /** #56b96b */
        PoColorPaletteEnum["Color10"] = "color-10";
        /** #00b28e */
        PoColorPaletteEnum["Color11"] = "color-11";
        /** #06a6a5 */
        PoColorPaletteEnum["Color12"] = "color-12";
    })(PoColorPaletteEnum || (PoColorPaletteEnum = {}));

    var poColorPalette = Object.values(PoColorPaletteEnum);
    var PoColorService = /** @class */ (function () {
        function PoColorService() {
            this.defaultColors = [];
        }
        /**
         * Avalia a propriedade `color` na lista de items passada. Caso sim, trata se é decimal ou string `po-color`. Caso não haja, retorna a cor default.
         *
         * @param data
         */
        PoColorService.prototype.getColors = function (data) {
            var _this = this;
            this.verifyIfHasColorProperty(data);
            return data.map(function (dataItem, index) {
                if (dataItem.color) {
                    dataItem.color = _this.verifyIfIsPoColorPalette(dataItem.color);
                    return dataItem;
                }
                var color = _this.defaultColors[index];
                return Object.assign(Object.assign({}, dataItem), { color: color });
            });
        };
        PoColorService.prototype.verifyIfHasColorProperty = function (data) {
            var hasColorProperty = data.every(function (dataItem) { var _a; return dataItem.hasOwnProperty('color') && ((_a = dataItem.color) === null || _a === void 0 ? void 0 : _a.length) > 0; });
            if (!hasColorProperty) {
                this.defaultColors = this.getDefaultColors(data.length);
            }
        };
        PoColorService.prototype.verifyIfIsPoColorPalette = function (color) {
            if (poColorPalette.includes(color)) {
                return "po-" + color;
            }
            return color;
        };
        PoColorService.prototype.getDefaultColors = function (length) {
            if (length === 1) {
                return PoDefaultColors[0];
            }
            var colorsLength = PoDefaultColors.length;
            if (length > colorsLength) {
                var quantityDuplicates = length / colorsLength;
                var colors = PoDefaultColors[colorsLength - 1];
                for (var i = 0; i <= quantityDuplicates; i++) {
                    colors = colors.concat(PoDefaultColors[colorsLength]);
                }
                return colors;
            }
            return PoDefaultColors[length - 1];
        };
        return PoColorService;
    }());
    PoColorService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PoColorService_Factory() { return new PoColorService(); }, token: PoColorService, providedIn: "root" });
    PoColorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    var poChartDefaultHeight = 400;
    var poChartMinHeight = 200;
    /**
     * @description
     *
     * O `po-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
     * visualização destes dados mais agradável.
     *
     * Através de suas principais propriedades é possível definir atributos, tais como tipo de gráfico, altura, título, cores customizadas, opções para os eixos, entre outros.
     *
     * O componente permite utilizar em conjunto séries do tipo linha e coluna.
     *
     * Além disso, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
     * e outra que será executada ao passar o *mouse* sobre o elemento.
     *
     * #### Guia de uso para Gráficos
     *
     * > Veja nosso [guia de uso para gráficos](/guides/guide-charts) para auxiliar na construção do seu gráfico,
     * informando em qual caso utilizar, o que devemos evitar e boas práticas relacionada a cores.
     */
    var PoChartBaseComponent = /** @class */ (function () {
        function PoChartBaseComponent(colorService) {
            this.colorService = colorService;
            /**
             * @optional
             *
             * @description
             *
             * Evento executado quando o usuário clicar sobre um elemento do gráfico.
             *
             * O evento emitirá o seguinte parâmetro:
             * - *donut* e *pie*: um objeto contendo a categoria e valor da série.
             * - *area*, *line*, *column* e *bar*: um objeto contendo o nome da série, valor e categoria do eixo do gráfico.
             */
            this.seriesClick = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
             *
             * O evento emitirá o seguinte parâmetro de acordo com o tipo de gráfico:
             * - *donut* e *pie*: um objeto contendo a categoria e valor da série.
             * - *area*, *line*, *column* e *bar*: um objeto contendo a categoria, valor da série e categoria do eixo do gráfico.
             */
            this.seriesHover = new i0.EventEmitter();
            // manipulação das séries tratadas internamente para preservar 'p-series';
            this.chartSeries = [];
        }
        Object.defineProperty(PoChartBaseComponent.prototype, "height", {
            get: function () {
                return this._height || this.setDefaultHeight();
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura do gráfico.
             *
             * > O valor mínimo aceito nesta propriedade é 200.
             *
             * @default `400px`
             */
            set: function (value) {
                var intValue = convertToInt(value);
                var height;
                if (isTypeof(value, 'number')) {
                    height = intValue <= poChartMinHeight ? poChartMinHeight : intValue;
                }
                else {
                    height = this.setDefaultHeight();
                }
                this._height = height;
                this.getSvgContainerSize();
                this.rebuildComponentRef();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartBaseComponent.prototype, "type", {
            get: function () {
                return this._type;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o tipo de gráfico.
             *
             * É possível também combinar gráficos dos tipos linha e coluna. Para isso, opte pela declaração de `type` conforme a interface `PoChartSerie`.
             *
             * > Note que, se houver declaração de tipo de gráfico tanto em `p-type` quanto em `PochartSerie.type`, o valor `{ type }` da primeira série anulará o valor definido em `p-type`.
             *
             * Se não passado valor, o padrão será relativo à primeira série passada em `p-series`:
             * - Se `p-series = [{ data: [1,2,3] }]`: será `PoChartType.Column`.
             * - Se `p-series = [{ data: 1 }]`: será `PoChartType.Pie`.
             *
             * > Veja os valores válidos no *enum* `PoChartType`.
             */
            set: function (value) {
                // O Valor default definido em `p-series` de acordo com a primeira série passada.
                this._type = Object.values(exports.PoChartType).includes(value) ? value : undefined;
                this.rebuildComponentRef();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartBaseComponent.prototype, "series", {
            get: function () {
                return this._series;
            },
            /**
             * @description
             *
             * Define os elementos do gráfico que serão criados dinamicamente.
             */
            set: function (value) {
                this._series = value || [];
                if (Array.isArray(this._series) && this._series.length) {
                    this.setTypeDefault(this._series[0]);
                }
                else {
                    this.transformObjectToArrayObject(this.series);
                    this.rebuildComponentRef();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartBaseComponent.prototype, "categories", {
            get: function () {
                return this._categories;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define os nomes das categorias que serão plotadas no eixo X do gráfico caso seja do tipo `bar`, ou então nos eixos Y do grid de gráficos dos tipos `area`, `columnn` e `line`.
             *
             * > Gráficos do tipo `bar` dimensionam a área do gráfico de acordo com a largura do maior texto de categorias. No entanto, é uma boa prática optar por palavras curtas para que a leitura do gráfico não seja prejudicada.
             *
             * > Caso não seja especificado um valor para a categoria, será plotado um hífen na categoria referente a cada série.
             */
            set: function (value) {
                if (Array.isArray(value)) {
                    this._categories = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartBaseComponent.prototype, "options", {
            get: function () {
                return this._options;
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as configurações usadas no `po-chart`.
             *
             * É possível, por exemplo, definir as configurações de exibição das legendas,
             * configurar os eixos(*axis*) para os gráficos dos tipos `area`, `line`, `column` e `bar` da seguinte forma:
             *
             * ```
             *  chartOptions: PoChartOptions = {
             *    legend: true,
             *    axis: {
             *      minRange: 0,
             *      maxRange: 100,
             *      gridLines: 5,
             *    },
             *  };
             * ```
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._options = value;
                    if (this._options.hasOwnProperty('legend') && typeof this._options.legend === 'boolean') {
                        this.getSvgContainerSize();
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartBaseComponent.prototype, "isTypeCircular", {
            get: function () {
                return this.defaultType === exports.PoChartType.Pie || this.defaultType === exports.PoChartType.Donut;
            },
            enumerable: false,
            configurable: true
        });
        PoChartBaseComponent.prototype.ngOnChanges = function (changes) {
            var isArrayOfseries = Array.isArray(this.series) && this.series.length > 0;
            if ((changes.series && isArrayOfseries) ||
                (changes.type && isArrayOfseries) ||
                (changes.categories && isArrayOfseries)) {
                this.validateSerieAndAddType(this.series);
            }
            if ((changes.type && !this.isTypeCircular) || (changes.categories && !this.isTypeCircular)) {
                this.svgContainerSize = Object.assign(Object.assign({}, this.svgContainerSize), { axisXLabelWidth: this.calculateAxisXLabelArea() });
            }
        };
        PoChartBaseComponent.prototype.onSeriesClick = function (event) {
            this.seriesClick.emit(event);
        };
        PoChartBaseComponent.prototype.onSeriesHover = function (event) {
            this.seriesHover.emit(event);
        };
        PoChartBaseComponent.prototype.setDefaultHeight = function () {
            return this.type === exports.PoChartType.Gauge ? poChartMinHeight : poChartDefaultHeight;
        };
        PoChartBaseComponent.prototype.transformObjectToArrayObject = function (serie) {
            this.chartSeries = typeof serie === 'object' && Object.keys(serie).length ? [Object.assign({}, serie)] : [];
        };
        PoChartBaseComponent.prototype.setTypeDefault = function (serie) {
            var _a;
            var data = (_a = serie.data) !== null && _a !== void 0 ? _a : serie.value;
            var serieType = Object.values(exports.PoChartType).includes(serie.type) ? serie.type : undefined;
            this.defaultType = serieType ? serieType : Array.isArray(data) ? exports.PoChartType.Column : exports.PoChartType.Pie;
        };
        PoChartBaseComponent.prototype.validateSerieAndAddType = function (series) {
            var _this = this;
            var filteredSeries = series.filter(function (serie) { return _this.isTypeCircular
                ? typeof serie.data === 'number' || typeof serie.value === 'number'
                : Array.isArray(serie.data); });
            this.chartSeries = this.appendType(this.appendColors(filteredSeries));
        };
        PoChartBaseComponent.prototype.appendColors = function (series) {
            return this.colorService.getColors(series);
        };
        PoChartBaseComponent.prototype.appendType = function (series) {
            var _this = this;
            return series.map(function (serie, index) {
                if (index === 0) {
                    _this.chartType = Object.values(exports.PoChartType).includes(serie.type)
                        ? serie.type
                        : _this.type || _this.defaultType;
                }
                return Object.assign(Object.assign({}, serie), { type: serie.type || _this.chartType });
            });
        };
        return PoChartBaseComponent;
    }());
    PoChartBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoChartBaseComponent.ctorParameters = function () { return [
        { type: PoColorService }
    ]; };
    PoChartBaseComponent.propDecorators = {
        title: [{ type: i0.Input, args: ['p-title',] }],
        seriesClick: [{ type: i0.Output, args: ['p-series-click',] }],
        seriesHover: [{ type: i0.Output, args: ['p-series-hover',] }],
        height: [{ type: i0.Input, args: ['p-height',] }],
        type: [{ type: i0.Input, args: ['p-type',] }],
        series: [{ type: i0.Input, args: ['p-series',] }],
        categories: [{ type: i0.Input, args: ['p-categories',] }],
        options: [{ type: i0.Input, args: ['p-options',] }]
    };

    var PoChartSvgContainerService = /** @class */ (function () {
        function PoChartSvgContainerService() {
        }
        /**
         * Retorna um objeto do tipo PoChartContainerSize contendo as dimensões necessárias para plotagem do SVG.
         *
         * @param chartHeight
         * @param chartWrapperWidth
         * @param chartHeaderHeight
         * @param chartLegendHeight
         */
        PoChartSvgContainerService.prototype.calculateSVGContainerMeasurements = function (chartHeight, chartWrapperWidth, chartHeaderHeight, chartLegendHeight) {
            if (chartHeight === void 0) { chartHeight = 0; }
            if (chartWrapperWidth === void 0) { chartWrapperWidth = 0; }
            if (chartHeaderHeight === void 0) { chartHeaderHeight = 0; }
            if (chartLegendHeight === void 0) { chartLegendHeight = 0; }
            var svgWidth = this.svgWidth(chartWrapperWidth);
            var centerX = this.center(chartWrapperWidth);
            var svgHeight = this.svgHeight(chartHeight, chartHeaderHeight, chartLegendHeight);
            var centerY = this.center(svgHeight);
            var svgPlottingAreaHeight = this.svgPlottingAreaHeight(svgHeight);
            return {
                svgWidth: svgWidth,
                svgHeight: svgHeight,
                centerX: centerX,
                centerY: centerY,
                svgPlottingAreaHeight: svgPlottingAreaHeight
            };
        };
        // Largura do container.
        PoChartSvgContainerService.prototype.svgWidth = function (chartWrapperWidth) {
            var wrapperWidth = chartWrapperWidth - PoChartPadding * 2;
            return wrapperWidth > 0 ? wrapperWidth : 0;
        };
        // O centro do container. Usado para gráficos do tipo circular.
        PoChartSvgContainerService.prototype.center = function (dimension) {
            return dimension / 2;
        };
        // Altura do container
        PoChartSvgContainerService.prototype.svgHeight = function (chartHeight, chartHeaderHeight, chartLegendHeight) {
            var subtractedHeights = chartHeight - chartHeaderHeight - chartLegendHeight - PoChartPadding * 2;
            return subtractedHeights <= 0 ? 0 : subtractedHeights;
        };
        /**
         * Altura da área de plotagem.
         * Subtrai a altura do container SVG pelo padding superior + área para overflow de labels do eixo X.
         */
        PoChartSvgContainerService.prototype.svgPlottingAreaHeight = function (svgHeight) {
            return svgHeight - PoChartPadding - 8;
        };
        return PoChartSvgContainerService;
    }());
    PoChartSvgContainerService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PoChartSvgContainerService_Factory() { return new PoChartSvgContainerService(); }, token: PoChartSvgContainerService, providedIn: "root" });
    PoChartSvgContainerService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PoChartSvgContainerService.ctorParameters = function () { return []; };

    var poChartAnimationDurationTime = 1500;
    var poChartAngleStepInterval = (Math.PI * 2) / Math.floor(poChartAnimationDurationTime / 60);
    var poChartCompleteCircle = 0.0001;
    var poChartGaugeStartAngle = -Math.PI;
    var poChartPadding = 24;
    var poChartStartAngle = -Math.PI / 2;
    // tamanho da largura da serie proporcional ao grafico do tipo Donut, o valor 0.27 fica proximo de 32px
    var poChartDonutSerieWidth = 0.27;
    // tamanho da largura da serie proporcional ao grafico do tipo Gauge, o valor 0.04 fica proximo de 8px
    var poChartGaugeSerieWidth = 0.06;

    var Padding = 24;
    /* eslint-disable @angular-eslint/directive-class-suffix */
    var PoChartDynamicTypeComponent = /** @class */ (function () {
        function PoChartDynamicTypeComponent() {
            this.innerRadius = 0;
            this.onSerieClick = new rxjs.Subject();
            this.onSerieHover = new rxjs.Subject();
            // eslint-disable-next-line
            this._series = [];
        }
        Object.defineProperty(PoChartDynamicTypeComponent.prototype, "isChartGaugeType", {
            get: function () {
                return this.type === exports.PoChartType.Gauge;
            },
            enumerable: false,
            configurable: true
        });
        PoChartDynamicTypeComponent.prototype.calculateSVGContainerDimensions = function (chartWrapperElement, chartHeaderElement, chartLegendElement) {
            var svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - Padding * 2;
            this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;
            this.centerX = chartWrapperElement / 2;
        };
        PoChartDynamicTypeComponent.prototype.calculateTotalValue = function () {
            this.totalValue =
                this.type === exports.PoChartType.Gauge
                    ? 100
                    : this.series.reduce(function (previousValue, serie) { return previousValue + (serie.data ? serie.data : serie.value); }, 0);
        };
        Object.defineProperty(PoChartDynamicTypeComponent.prototype, "series", {
            get: function () {
                return this._series;
            },
            set: function (value) {
                this._series = this.getSeriesWithValue(value);
            },
            enumerable: false,
            configurable: true
        });
        PoChartDynamicTypeComponent.prototype.getSeriesWithValue = function (value) {
            return value;
        };
        return PoChartDynamicTypeComponent;
    }());
    PoChartDynamicTypeComponent.decorators = [
        { type: i0.Directive }
    ];
    PoChartDynamicTypeComponent.propDecorators = {
        chartBody: [{ type: i0.ViewChild, args: ['chartBody', { static: true },] }],
        svgContainer: [{ type: i0.ViewChild, args: ['svgContainer', { static: true },] }]
    };

    var poChartBlackColor = '#000000';
    var poChartWhiteColor = '#ffffff';
    var PoChartCircular = /** @class */ (function (_super) {
        __extends(PoChartCircular, _super);
        function PoChartCircular(el, ngZone, renderer) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.ngZone = ngZone;
            _this.renderer = renderer;
            _this.chartItemStartAngle = poChartStartAngle;
            _this.windowResizeEmitter = new rxjs.Subject();
            _this.chartItemsEndAngleList = [];
            _this.svgPathElementsList = [];
            _this.svgTextElementsList = [];
            return _this;
        }
        PoChartCircular.prototype.ngOnDestroy = function () {
            this.removeWindowResizeListener();
            this.removeWindowScrollListener();
            this.animationRunning = false;
        };
        PoChartCircular.prototype.ngOnInit = function () {
            this.chartInitSetup();
            this.setEventListeners();
        };
        PoChartCircular.prototype.removeTooltip = function () {
            if (this.tooltipElement) {
                this.renderer.addClass(this.tooltipElement, 'po-invisible');
            }
        };
        PoChartCircular.prototype.drawPath = function (path, chartItemStartAngle, chartItemEndAngle) {
            var sinAlpha = Math.sin(chartItemStartAngle);
            var cosAlpha = Math.cos(chartItemStartAngle);
            var sinBeta = Math.sin(chartItemEndAngle);
            var cosBeta = Math.cos(chartItemEndAngle);
            var startX = this.centerX + cosAlpha * this.centerX;
            var startY = this.centerX + sinAlpha * this.centerX;
            var endX = this.centerX + cosBeta * this.centerX;
            var endY = this.centerX + sinBeta * this.centerX;
            var startInnerX = this.centerX + cosAlpha * this.innerRadius;
            var startInnerY = this.centerX + sinAlpha * this.innerRadius;
            var endInnerX = this.centerX + cosBeta * this.innerRadius;
            var endInnerY = this.centerX + sinBeta * this.innerRadius;
            var halfGaugeCoordinates = [
                'M',
                startX,
                startY,
                'A',
                this.centerX,
                this.centerX,
                0,
                '0,1',
                endX,
                endY,
                'A',
                1,
                1,
                0,
                '0,1',
                endInnerX,
                endInnerY,
                'A',
                this.innerRadius,
                this.innerRadius,
                0,
                '0,0',
                startInnerX,
                startInnerY,
                'A',
                1,
                1,
                0,
                '0,1',
                startX,
                startY,
                'Z'
            ].join(' ');
            return path.setAttribute('d', halfGaugeCoordinates);
        };
        PoChartCircular.prototype.getSeriesWithValue = function (series) {
            var _this = this;
            var newSeries = [];
            series.forEach(function (serie, index) {
                var _a;
                var value = (_a = serie.data) !== null && _a !== void 0 ? _a : serie.value;
                if (value > 0) {
                    newSeries.push(Object.assign(Object.assign({}, serie), { color: _this.colors[index] }));
                }
            });
            return newSeries;
        };
        PoChartCircular.prototype.animationSetup = function () {
            this.chartItemEndAngle = this.chartItemsEndAngleList[0];
            this.animationRunning = true;
            this.drawPathInit();
        };
        PoChartCircular.prototype.appendGaugeBackgroundPathElement = function (svgPathsWrapper) {
            var svgPath = this.renderer.createElement('svg:path', 'svg');
            this.renderer.setAttribute(svgPath, 'class', 'po-chart-gauge-base-path');
            svgPathsWrapper.appendChild(svgPath);
            this.renderer.appendChild(this.svgElement, svgPathsWrapper);
        };
        PoChartCircular.prototype.calculateAngleRadians = function () {
            var _this = this;
            this.series.forEach(function (serie, index) {
                var _a;
                var data = (_a = serie.data) !== null && _a !== void 0 ? _a : serie.value;
                _this.chartItemsEndAngleList[index] = _this.calculateEndAngle(data, _this.totalValue);
            });
        };
        PoChartCircular.prototype.calculateCurrentEndAngle = function (angleCurrentPosition) {
            var isSerieDrawCompleted = this.chartItemStartAngle + angleCurrentPosition > this.chartItemStartAngle + this.chartItemEndAngle;
            if (isSerieDrawCompleted) {
                return this.chartItemStartAngle + this.chartItemEndAngle - poChartCompleteCircle;
            }
            else {
                return this.chartItemStartAngle + angleCurrentPosition;
            }
        };
        PoChartCircular.prototype.calculateEndAngle = function (value, totalValue) {
            var endAngle = (value / totalValue) * (Math.PI * 2);
            return this.isChartGaugeType ? endAngle / 2 : endAngle;
        };
        PoChartCircular.prototype.calculateSVGDimensions = function () {
            this.calculateSVGContainerDimensions(this.chartWrapper, this.chartHeader, this.chartLegend);
            this.innerRadius = this.setInnerRadius(this.type);
        };
        PoChartCircular.prototype.changeTooltipPosition = function (event) {
            if (this.tooltipElement && this.tooltipElement.classList.contains('po-invisible')) {
                this.showTooltip();
            }
            var tooltipPositions = this.setTooltipPositions(event);
            this.renderer.setStyle(this.tooltipElement, 'left', tooltipPositions.left + "px");
            this.renderer.setStyle(this.tooltipElement, 'top', tooltipPositions.top + "px");
        };
        PoChartCircular.prototype.chartInitSetup = function () {
            this.calculateSVGDimensions();
            this.calculateTotalValue();
            this.calculateAngleRadians();
            this.createSVGElements();
            this.animationSetup();
        };
        PoChartCircular.prototype.checkingIfScrollsWithPoPage = function () {
            var poPageContent = document.getElementsByClassName('po-page-content');
            return poPageContent.length ? poPageContent[0] : window;
        };
        PoChartCircular.prototype.createPath = function (serie, svgPathsWrapper) {
            var svgPath = this.renderer.createElement('svg:path', 'svg');
            this.renderer.setAttribute(svgPath, 'class', 'po-path-item');
            this.renderer.setAttribute(svgPath, 'fill', serie.color);
            this.setElementAttributes(svgPath, serie);
            svgPathsWrapper.appendChild(svgPath);
            this.renderer.appendChild(this.svgElement, svgPathsWrapper);
            this.svgPathElementsList.push(svgPath);
        };
        PoChartCircular.prototype.createPaths = function () {
            var _this = this;
            var svgPathsWrapper = this.renderer.createElement('svg:g', 'svg');
            if (this.isChartGaugeType) {
                this.appendGaugeBackgroundPathElement(svgPathsWrapper);
                // Tratamento para evitar que o path desenhe os arcos referentes ao border radius do path.
                if (this.isSerieValueEqualZero()) {
                    return;
                }
            }
            this.series.forEach(function (serie) { return _this.createPath(serie, svgPathsWrapper); });
        };
        PoChartCircular.prototype.createText = function (serie) {
            var data = serie.value;
            var svgG = this.renderer.createElement('svg:g', 'svg');
            var svgText = this.renderer.createElement('svg:text', 'svg');
            var fontSize = this.getFontSize();
            var textColor = this.getTextColor(serie.color);
            svgText.textContent = this.getPercentValue(data, this.totalValue) + '%';
            this.renderer.setAttribute(svgText, 'class', 'po-path-item');
            this.renderer.setAttribute(svgText, 'fill', textColor);
            this.renderer.setAttribute(svgText, 'font-size', fontSize);
            this.renderer.setAttribute(svgText, 'fill-opacity', '0');
            this.setElementAttributes(svgText, serie);
            this.renderer.appendChild(svgG, svgText);
            this.renderer.appendChild(this.svgElement, svgG);
            this.svgTextElementsList.push(svgText);
        };
        PoChartCircular.prototype.createTexts = function () {
            var _this = this;
            if (this.type === exports.PoChartType.Donut) {
                this.series.forEach(function (serie) { return _this.createText(serie); });
            }
        };
        PoChartCircular.prototype.createSVGElements = function () {
            var viewBoxHeight = this.isChartGaugeType
                ? this.centerX + this.centerX * poChartGaugeSerieWidth
                : this.chartWrapper;
            var preserveAspectRatio = this.isChartGaugeType ? 'xMidYMax' : 'xMidYMin';
            this.svgElement = this.renderer.createElement('svg:svg', 'svg');
            this.renderer.setAttribute(this.svgElement, 'viewBox', "0 0 " + this.chartWrapper + " " + viewBoxHeight);
            this.renderer.setAttribute(this.svgElement, 'preserveAspectRatio', preserveAspectRatio + " meet");
            this.renderer.setAttribute(this.svgElement, 'class', 'po-chart-svg-element');
            this.renderer.setAttribute(this.svgElement, 'width', "" + this.centerX);
            this.renderer.setAttribute(this.svgElement, 'height', "" + this.svgHeight);
            this.svgContainer.nativeElement.appendChild(this.svgElement);
            this.createPaths();
            this.createTexts();
        };
        PoChartCircular.prototype.drawPathInit = function () {
            var _this = this;
            if (!this.animationRunning) {
                return;
            }
            else {
                this.ngZone.runOutsideAngular(function () { return _this.drawSeries(); });
            }
        };
        PoChartCircular.prototype.drawSeries = function (currentSerieIndex, angleCurrentPosition) {
            if (currentSerieIndex === void 0) { currentSerieIndex = 0; }
            if (angleCurrentPosition === void 0) { angleCurrentPosition = 0; }
            var isFinishedDrawingCurrentSeries = angleCurrentPosition > this.chartItemEndAngle;
            var isFinishedDrawingAllSeries = currentSerieIndex === this.svgPathElementsList.length;
            if (isFinishedDrawingAllSeries) {
                return;
            }
            if (isFinishedDrawingCurrentSeries) {
                this.chartItemStartAngle = this.chartItemStartAngle + this.chartItemEndAngle;
                currentSerieIndex++;
                this.chartItemEndAngle = this.chartItemsEndAngleList[currentSerieIndex];
                angleCurrentPosition = 0;
            }
            else {
                angleCurrentPosition += poChartAngleStepInterval;
                this.drawPath(this.svgPathElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
                this.setTextProperties(this.svgTextElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
            }
            window.requestAnimationFrame(this.drawSeries.bind(this, currentSerieIndex, angleCurrentPosition));
        };
        PoChartCircular.prototype.emitEventOnEnter = function (event) {
            this.onSerieHover.next(event);
        };
        PoChartCircular.prototype.getFontSize = function () {
            var fontSizePorcent = 0.04;
            var fontSize = fontSizePorcent * this.chartWrapper;
            return fontSize.toFixed(0) + "px";
        };
        PoChartCircular.prototype.getPercentValue = function (value, totalValue) {
            var percentValue = (value / totalValue) * 100;
            var floatPercentValue = convertNumberToDecimal(percentValue, 2);
            return String(floatPercentValue).replace('.', ',');
        };
        PoChartCircular.prototype.getTextColor = function (color) {
            if (PoDefaultColorsTextBlack.includes(color)) {
                return poChartBlackColor;
            }
            return poChartWhiteColor;
        };
        PoChartCircular.prototype.getTooltipValue = function (value) {
            if (this.type === exports.PoChartType.Pie) {
                return value.toString();
            }
            return this.getPercentValue(value, this.totalValue) + '%';
        };
        PoChartCircular.prototype.isSerieValueEqualZero = function () {
            return this.series.length && this.series[0].value === 0;
        };
        PoChartCircular.prototype.onMouseClick = function () {
            var serieOnClick;
            var _a = this.series[0], color = _a.color, serie = __rest(_a, ["color"]);
            serieOnClick = serie;
            this.onSerieClick.next(serieOnClick);
        };
        PoChartCircular.prototype.onMouseEnter = function (event) {
            var serieOnEnter;
            var _a = this.series[0], color = _a.color, serie = __rest(_a, ["color"]);
            this.chartElementDescription = event.target.getAttributeNS(null, 'data-tooltip-category');
            serieOnEnter = serie;
            this.emitEventOnEnter(serieOnEnter);
        };
        PoChartCircular.prototype.onWindowResize = function () {
            this.calculateSVGDimensions();
            this.renderer.setAttribute(this.svgElement, 'width', "" + this.centerX);
            this.renderer.setAttribute(this.svgElement, 'height', "" + this.svgHeight);
            this.windowResizeEmitter.next();
        };
        PoChartCircular.prototype.removeWindowResizeListener = function () {
            if (this.windowResizeListener) {
                this.windowResizeListener();
            }
        };
        PoChartCircular.prototype.removeWindowScrollListener = function () {
            if (this.windowScrollListener) {
                this.windowScrollListener();
            }
        };
        PoChartCircular.prototype.setEventListeners = function () {
            var _this = this;
            var chartSeries = this.el.nativeElement.querySelectorAll('.po-path-item');
            chartSeries = Array.from(chartSeries);
            chartSeries.forEach(function (serie) {
                _this.renderer.listen(serie, 'click', _this.onMouseClick.bind(_this));
                _this.renderer.listen(serie, 'mouseenter', _this.onMouseEnter.bind(_this));
                if (!_this.isChartGaugeType) {
                    _this.renderer.listen(serie, 'mousemove', _this.changeTooltipPosition.bind(_this));
                    _this.renderer.listen(serie, 'mouseleave', _this.removeTooltip.bind(_this));
                }
            });
            this.windowResizeListener = this.renderer.listen(window, 'resize', this.onWindowResize.bind(this));
            this.windowScrollListener = this.renderer.listen(this.checkingIfScrollsWithPoPage(), 'scroll', this.removeTooltip.bind(this));
        };
        PoChartCircular.prototype.setInnerRadius = function (type) {
            var serieWidth;
            switch (type) {
                case exports.PoChartType.Donut: {
                    serieWidth = poChartDonutSerieWidth;
                    break;
                }
                case exports.PoChartType.Gauge: {
                    serieWidth = poChartGaugeSerieWidth;
                    break;
                }
                case exports.PoChartType.Pie: {
                    return 0;
                }
            }
            return this.centerX - this.centerX * serieWidth;
        };
        PoChartCircular.prototype.setTextProperties = function (text, startAngle, endAngle) {
            // necessário text.getClientRects().length para contornar erro de console causado no Firefox
            if (this.type === exports.PoChartType.Donut && text.getClientRects().length) {
                // utilizado para recuperar o angulo do meio, entre o inicio e fim para centralizar o texto
                var centerAngle = (startAngle + endAngle) / 2;
                var textBox = text.getBBox();
                var halfTextWidth = textBox.width / 2;
                var halfTextHeight = textBox.height / 2;
                // radius interno (circulo branco) + a metade da diferença entre tamanho do centro e radius interno
                var radius = this.innerRadius + (this.centerX - this.innerRadius) / 2;
                var xCoordinate = radius * Math.cos(centerAngle) + this.centerX - halfTextWidth;
                var yCoordinate = radius * Math.sin(centerAngle) + this.centerX + halfTextHeight / 2;
                text.setAttribute('x', xCoordinate);
                text.setAttribute('y', yCoordinate);
                text.setAttribute('fill-opacity', '1');
            }
        };
        PoChartCircular.prototype.setTooltipPositions = function (event) {
            var displacement = 8;
            return {
                left: event.clientX - this.tooltipElement.offsetWidth / 2,
                top: event.clientY - this.tooltipElement.offsetHeight - displacement
            };
        };
        PoChartCircular.prototype.setElementAttributes = function (svgElement, serie) {
            var _a, _b;
            var tooltip = serie.tooltip;
            var data = (_a = serie.data) !== null && _a !== void 0 ? _a : serie.value;
            var label = (_b = serie.label) !== null && _b !== void 0 ? _b : (serie.description || serie.category);
            this.renderer.setAttribute(svgElement, 'data-tooltip-value', "" + data);
            if (this.isChartGaugeType) {
                this.renderer.setAttribute(svgElement, 'data-tooltip-description', label);
            }
            else {
                var tooltipValue = this.getTooltipValue(data);
                this.renderer.setAttribute(svgElement, 'data-tooltip-category', label);
                this.renderer.setAttribute(svgElement, 'data-tooltip-text', tooltip || label + ": " + tooltipValue);
            }
        };
        PoChartCircular.prototype.showTooltip = function () {
            this.renderer.removeClass(this.tooltipElement, 'po-invisible');
        };
        return PoChartCircular;
    }(PoChartDynamicTypeComponent));
    PoChartCircular.decorators = [
        { type: i0.Directive }
    ];
    PoChartCircular.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.NgZone },
        { type: i0.Renderer2 }
    ]; };

    var PoChartGaugeTextContentComponent = /** @class */ (function () {
        function PoChartGaugeTextContentComponent(changeDetection) {
            this.changeDetection = changeDetection;
        }
        Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "gaugeWidth", {
            get: function () {
                return this._gaugeWidth;
            },
            set: function (value) {
                this._gaugeWidth = value;
                this.checkTextDescriptionSize();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "serie", {
            get: function () {
                return this._serie;
            },
            set: function (serie) {
                if (serie) {
                    this.serieValueConverted = this.convertValueInPercentFormat(serie.value);
                    this._serie = Object.assign({}, serie);
                }
                else {
                    this._serie = undefined;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "hasSerieDescription", {
            get: function () {
                return this.serie && this.serie.description;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "hasSerieValue", {
            get: function () {
                return this.serie && this.serie.value >= 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "maxDescriptionWidth", {
            get: function () {
                // Diferença contemplando a largura do path base e padding interno.
                var subtractionArea = this.gaugeWidth * poChartGaugeSerieWidth * 2 * 2;
                var descriptionWidth = this.gaugeWidth - subtractionArea;
                return { 'max-width': descriptionWidth + "px" };
            },
            enumerable: false,
            configurable: true
        });
        PoChartGaugeTextContentComponent.prototype.ngAfterViewInit = function () {
            this.checkTextDescriptionSize();
        };
        PoChartGaugeTextContentComponent.prototype.checkTextDescriptionSize = function () {
            var _this = this;
            if (this.descriptionElement) {
                // tooltip necessário para contornar comportamento inesperado do tooltip.
                setTimeout(function () {
                    _this.tooltip = _this.isEllipsisActive();
                });
                this.changeDetection.detectChanges();
            }
        };
        PoChartGaugeTextContentComponent.prototype.convertValueInPercentFormat = function (value) {
            var decimalValue = String(convertNumberToDecimal(value, 1)).replace('.', ',');
            return decimalValue + "%";
        };
        PoChartGaugeTextContentComponent.prototype.isEllipsisActive = function () {
            var isExceededWidth = this.descriptionElement.nativeElement.offsetWidth < this.descriptionElement.nativeElement.scrollWidth;
            return isExceededWidth ? this.serie.description : undefined;
        };
        return PoChartGaugeTextContentComponent;
    }());
    PoChartGaugeTextContentComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-chart-gauge-text-content',
                    template: "<div *ngIf=\"hasSerieValue\" class=\"po-chart-gauge-text-content\" tabindex=\"0\" [ngStyle]=\"maxDescriptionWidth\">\r\n  <p class=\"po-chart-gauge-text-value\">{{ serieValueConverted }}</p>\r\n  <p *ngIf=\"hasSerieDescription\" #description class=\"po-chart-gauge-text-description\" [p-tooltip]=\"tooltip\">\r\n    {{ serie?.description }}\r\n  </p>\r\n</div>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoChartGaugeTextContentComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    PoChartGaugeTextContentComponent.propDecorators = {
        descriptionElement: [{ type: i0.ViewChild, args: ['description', { read: i0.ElementRef },] }],
        gaugeWidth: [{ type: i0.Input, args: ['p-gauge-width',] }],
        serie: [{ type: i0.Input, args: ['p-serie',] }]
    };

    var PoChartGaugeComponent = /** @class */ (function (_super) {
        __extends(PoChartGaugeComponent, _super);
        /* istanbul ignore next */
        function PoChartGaugeComponent(changeDetection, componentFactoryResolver, el, ngZone, renderer) {
            var _this = _super.call(this, el, ngZone, renderer) || this;
            _this.changeDetection = changeDetection;
            _this.componentFactoryResolver = componentFactoryResolver;
            _this.chartItemStartAngle = poChartGaugeStartAngle;
            _this._series = [];
            return _this;
        }
        Object.defineProperty(PoChartGaugeComponent.prototype, "series", {
            get: function () {
                return this._series;
            },
            set: function (series) {
                this._series = this.getGaugeSerie(series);
            },
            enumerable: false,
            configurable: true
        });
        PoChartGaugeComponent.prototype.ngAfterViewInit = function () {
            this.drawBasePath();
            this.createComponent();
        };
        PoChartGaugeComponent.prototype.createComponent = function () {
            var factory = this.componentFactoryResolver.resolveComponentFactory(PoChartGaugeTextContentComponent);
            var componentRef = this.svgContainerRef.createComponent(factory);
            var instance = componentRef.instance;
            instance.serie = this.series.length && this.series[0];
            instance.gaugeWidth = this.getGaugeBaseWidth();
            this.resizeListenerSubscription(instance);
        };
        PoChartGaugeComponent.prototype.checkGaugeValueLimits = function (value) {
            if (value <= 0) {
                return 0;
            }
            else if (value >= 100) {
                return 100;
            }
            else {
                return value;
            }
        };
        PoChartGaugeComponent.prototype.drawBasePath = function () {
            var basePath = this.el.nativeElement.querySelector('.po-chart-gauge-base-path');
            this.drawPath(basePath, this.chartItemStartAngle, 0);
        };
        PoChartGaugeComponent.prototype.getGaugeBaseWidth = function () {
            var basePath = this.el.nativeElement.querySelector('.po-chart-gauge-base-path');
            if (basePath) {
                return basePath.getBoundingClientRect().width;
            }
        };
        PoChartGaugeComponent.prototype.getGaugeSerie = function (series) {
            if (series === void 0) { series = []; }
            var _a = __read(series, 1), serie = _a[0];
            if (serie && typeof serie === 'object') {
                return [
                    Object.assign(Object.assign({}, serie), { color: this.colors[0], value: this.checkGaugeValueLimits(serie.value) })
                ];
            }
            return [];
        };
        PoChartGaugeComponent.prototype.resizeListenerSubscription = function (instance) {
            var _this = this;
            this.windowResizeEmitter.subscribe(function () {
                instance.gaugeWidth = _this.getGaugeBaseWidth();
                _this.changeDetection.detectChanges();
            });
        };
        return PoChartGaugeComponent;
    }(PoChartCircular));
    PoChartGaugeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-chart-gauge',
                    template: "<div #chartBody class=\"po-chart-body\">\r\n  <div #svgContainer class=\"po-chart-svg-container\"></div>\r\n\r\n  <div #tooltipElement *ngIf=\"!isChartGaugeType\" class=\"po-chart-tooltip po-tooltip po-invisible\">\r\n    <div class=\"po-tooltip-arrow po-arrow-bottom\"></div>\r\n    <div class=\"po-tooltip-content\">{{ tooltipText }}</div>\r\n  </div>\r\n</div>\r\n"
                },] }
    ];
    PoChartGaugeComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.ComponentFactoryResolver },
        { type: i0.ElementRef },
        { type: i0.NgZone },
        { type: i0.Renderer2 }
    ]; };
    PoChartGaugeComponent.propDecorators = {
        svgContainerRef: [{ type: i0.ViewChild, args: ['svgContainer', { static: true, read: i0.ViewContainerRef },] }]
    };

    /**
     * @docsExtends PoChartBaseComponent
     *
     * @example
     *
     * <example name="po-chart-basic" title="PO Chart Basic">
     *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.html"> </file>
     *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-chart-labs" title="PO Chart Labs">
     *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.html"> </file>
     *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-chart-coffee-ranking" title="PO Chart - Coffee Ranking">
     *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.html"> </file>
     *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.ts"> </file>
     * </example>
     */
    var PoChartComponent = /** @class */ (function (_super) {
        __extends(PoChartComponent, _super);
        function PoChartComponent(colorService, changeDetector, containerService, componentFactoryResolver, elementRef, mathsService, renderer) {
            var _a;
            var _this = _super.call(this, colorService) || this;
            _this.colorService = colorService;
            _this.changeDetector = changeDetector;
            _this.containerService = containerService;
            _this.componentFactoryResolver = componentFactoryResolver;
            _this.elementRef = elementRef;
            _this.mathsService = mathsService;
            _this.renderer = renderer;
            _this.calculatedComponentRefElement = false;
            _this.calculatedSvgContainerElement = false;
            _this.initialized = false;
            _this.windowResizeListener = new rxjs.Subject();
            _this.subscription = new rxjs.Subscription();
            _this.mappings = (_a = {},
                _a[exports.PoChartType.Gauge] = PoChartGaugeComponent,
                _a);
            _this.onResize = function () {
                _this.getSvgContainerSize();
                _this.windowResizeListener.next();
            };
            return _this;
        }
        Object.defineProperty(PoChartComponent.prototype, "isChartGaugeType", {
            get: function () {
                return this.type === exports.PoChartType.Gauge;
            },
            enumerable: false,
            configurable: true
        });
        PoChartComponent.prototype.ngAfterViewInit = function () {
            this.initialized = true;
            this.getSvgContainerSize();
        };
        PoChartComponent.prototype.ngDoCheck = function () {
            var charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
            var isDynamicChart = this.getComponentType(this.type);
            // Permite que o chart seja calculado na primeira vez que o componente torna-se visível,
            // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
            // Quando modificada a estrutura dos gráficos do tipo circular isto será melhorado.
            if (charWrapperWidth && this.initialized) {
                if (!isDynamicChart && !this.calculatedSvgContainerElement) {
                    this.getSvgContainerSize();
                    this.calculatedSvgContainerElement = true;
                }
                else if (isDynamicChart && !this.calculatedComponentRefElement) {
                    this.dynamicComponentSetting();
                    this.calculatedComponentRefElement = true;
                }
            }
        };
        PoChartComponent.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
            this.removeWindowResizeListener();
        };
        PoChartComponent.prototype.resizeAction = function () {
            this.getSvgContainerSize();
            this.windowResizeListener.next();
            this.changeDetector.detectChanges();
        };
        PoChartComponent.prototype.ngOnInit = function () {
            this.getSvgContainerSize();
        };
        PoChartComponent.prototype.rebuildComponentRef = function () {
            if (this.componentRef) {
                this.componentRef.destroy();
                if (this.isChartGaugeType) {
                    this.dynamicComponentSetting();
                }
            }
        };
        PoChartComponent.prototype.calculateAxisXLabelArea = function () {
            var axisXLabels = this.chartType === exports.PoChartType.Bar ? this.categories : this.chartSeries;
            return this.getAxisXLabelArea(this.mathsService.getLongestDataValue(axisXLabels, this.chartType, this.options));
        };
        PoChartComponent.prototype.getSvgContainerSize = function () {
            var axisXLabelWidth;
            var _a = this.getChartMeasurements(), chartHeaderHeight = _a.chartHeaderHeight, chartLegendHeight = _a.chartLegendHeight, chartWrapperWidth = _a.chartWrapperWidth;
            if (!this.isTypeCircular) {
                axisXLabelWidth = this.calculateAxisXLabelArea();
            }
            this.svgContainerSize = Object.assign(Object.assign({}, this.containerService.calculateSVGContainerMeasurements(this.height, chartWrapperWidth, chartHeaderHeight, chartLegendHeight)), { axisXLabelWidth: axisXLabelWidth });
        };
        PoChartComponent.prototype.chartLegendHeight = function (chartLegend) {
            return chartLegend ? chartLegend.nativeElement.offsetHeight : 0;
        };
        PoChartComponent.prototype.createComponent = function () {
            var componentType = this.getComponentType(this.type);
            var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            this.componentRef = this.chartContainer.createComponent(factory);
            var instance = this.componentRef.instance;
            this.setComponentRefProperties(instance);
            return instance;
        };
        PoChartComponent.prototype.dynamicComponentSetting = function () {
            var instance = this.createComponent();
            this.setResizeListenerSubscribe(instance);
            this.changeDetector.detectChanges();
            this.setClickSubscribe(instance);
            this.setHoverSubscribe(instance);
        };
        PoChartComponent.prototype.getAxisXLabelArea = function (axisXLabel) {
            var labelPoChartPadding = PoChartPadding / 3;
            var spanElement = this.renderer.createElement('span');
            this.renderer.addClass(spanElement, 'po-chart-axis-x-label');
            spanElement.innerHTML = axisXLabel;
            this.renderer.appendChild(this.elementRef.nativeElement, spanElement);
            var axisXLabelWidth = Math.ceil(spanElement.offsetWidth) + labelPoChartPadding;
            this.renderer.removeChild(this.elementRef.nativeElement, spanElement);
            return axisXLabelWidth > PoChartAxisXLabelArea ? axisXLabelWidth : PoChartAxisXLabelArea;
        };
        PoChartComponent.prototype.getComponentType = function (typeName) {
            return this.mappings[typeName];
        };
        PoChartComponent.prototype.getChartMeasurements = function () {
            var chartWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
            var chartHeaderHeight = this.chartHeader.nativeElement.offsetHeight;
            var chartLegendHeight = this.chartLegendHeight(this.chartLegend);
            return { chartWrapperWidth: chartWrapperWidth, chartHeaderHeight: chartHeaderHeight, chartLegendHeight: chartLegendHeight };
        };
        PoChartComponent.prototype.removeWindowResizeListener = function () {
            if (this.onResize) {
                this.onResize = function () { };
            }
        };
        PoChartComponent.prototype.setComponentRefProperties = function (instance) {
            var _a = this.getChartMeasurements(), chartHeaderHeight = _a.chartHeaderHeight, chartLegendHeight = _a.chartLegendHeight, chartWrapperWidth = _a.chartWrapperWidth;
            instance.chartHeader = chartHeaderHeight;
            instance.chartLegend = chartLegendHeight;
            instance.chartWrapper = chartWrapperWidth;
            instance.colors = PoDefaultColors[0];
            instance.height = this.height;
            instance.type = this.type;
            instance.series = this.chartSeries || [];
        };
        PoChartComponent.prototype.setClickSubscribe = function (instance) {
            var _this = this;
            this.subscription.add(instance.onSerieClick.subscribe(function (event) {
                _this.onSeriesClick(event);
            }));
        };
        PoChartComponent.prototype.setHoverSubscribe = function (instance) {
            var _this = this;
            this.subscription.add(instance.onSerieHover.subscribe(function (event) {
                _this.onSeriesHover(event);
            }));
        };
        PoChartComponent.prototype.setResizeListenerSubscribe = function (instance) {
            var _this = this;
            this.subscription.add(this.windowResizeListener.subscribe(function () {
                var measuresForComponentRef = _this.getChartMeasurements();
                instance.chartWrapper = measuresForComponentRef.chartWrapperWidth;
                instance.chartHeader = measuresForComponentRef.chartHeaderHeight;
                instance.chartLegend = measuresForComponentRef.chartLegendHeight;
            }));
        };
        return PoChartComponent;
    }(PoChartBaseComponent));
    PoChartComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-chart',
                    template: "<div #chartWrapper class=\"po-chart-wrapper\" (p-resize-observer)=\"resizeAction()\">\r\n  <div #chartHeader class=\"po-chart-header\">\r\n    <div class=\"po-chart-title\">{{ title }}</div>\r\n  </div>\r\n\r\n  <po-chart-container\r\n    *ngIf=\"!isChartGaugeType\"\r\n    [p-options]=\"options\"\r\n    [p-type]=\"chartType\"\r\n    [p-series]=\"chartSeries\"\r\n    [p-categories]=\"categories\"\r\n    [p-container-size]=\"svgContainerSize\"\r\n    (p-serie-click)=\"onSeriesClick($event)\"\r\n    (p-serie-hover)=\"onSeriesHover($event)\"\r\n  ></po-chart-container>\r\n\r\n  <!-- Inje\u00E7\u00E3o de gr\u00E1ficos do tipo gauge. Remover na deprecia\u00E7\u00E3o.  -->\r\n  <ng-template #chartContainer></ng-template>\r\n\r\n  <div *ngIf=\"!isChartGaugeType && options?.legend !== false\">\r\n    <ng-container *ngTemplateOutlet=\"chartLegendGroup\"></ng-container>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #chartLegendGroup>\r\n  <po-chart-legend #chartLegend [p-series]=\"chartSeries\" [p-type]=\"type\"> </po-chart-legend>\r\n</ng-template>\r\n"
                },] }
    ];
    PoChartComponent.ctorParameters = function () { return [
        { type: PoColorService },
        { type: i0.ChangeDetectorRef },
        { type: PoChartSvgContainerService },
        { type: i0.ComponentFactoryResolver },
        { type: i0.ElementRef },
        { type: PoChartMathsService },
        { type: i0.Renderer2 }
    ]; };
    PoChartComponent.propDecorators = {
        chartContainer: [{ type: i0.ViewChild, args: ['chartContainer', { read: i0.ViewContainerRef, static: true },] }],
        chartHeader: [{ type: i0.ViewChild, args: ['chartHeader', { static: true },] }],
        chartLegend: [{ type: i0.ViewChild, args: ['chartLegend', { read: i0.ElementRef },] }],
        chartWrapper: [{ type: i0.ViewChild, args: ['chartWrapper', { static: true },] }],
        onResize: [{ type: i0.HostListener, args: ['window:resize',] }]
    };

    var PoChartContainerComponent = /** @class */ (function () {
        function PoChartContainerComponent(mathsService) {
            this.mathsService = mathsService;
            this.serieClick = new i0.EventEmitter();
            this.serieHover = new i0.EventEmitter();
            this._series = [];
        }
        Object.defineProperty(PoChartContainerComponent.prototype, "options", {
            get: function () {
                return this._options;
            },
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._options = value;
                    this.verifyAxisOptions(this._options);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartContainerComponent.prototype, "series", {
            get: function () {
                return this._series;
            },
            set: function (data) {
                this._series = data;
                this.setAlignByTheCorners(this._series);
                this.setSeriesByType(this._series);
                this.setRange(this._series, this.options);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartContainerComponent.prototype, "isTypeCircular", {
            get: function () {
                return this.type === exports.PoChartType.Pie || this.type === exports.PoChartType.Donut;
            },
            enumerable: false,
            configurable: true
        });
        PoChartContainerComponent.prototype.ngOnChanges = function (changes) {
            if (changes.type || changes.containerSize) {
                this.setViewBox();
                this.setSvgSpace();
            }
        };
        PoChartContainerComponent.prototype.getCategoriesCoordinates = function (value) {
            this.categoriesCoordinates = value;
        };
        PoChartContainerComponent.prototype.onSerieClick = function (event) {
            this.serieClick.emit(event);
        };
        PoChartContainerComponent.prototype.onSerieHover = function (event) {
            this.serieHover.emit(event);
        };
        PoChartContainerComponent.prototype.getRange = function (series, options) {
            if (options === void 0) { options = {}; }
            var _a, _b, _c;
            var domain = this.mathsService.calculateMinAndMaxValues(series);
            var minValue = !((_a = options.axis) === null || _a === void 0 ? void 0 : _a.minRange) && domain.minValue > 0
                ? 0
                : ((_b = options.axis) === null || _b === void 0 ? void 0 : _b.minRange) < domain.minValue
                    ? options.axis.minRange
                    : domain.minValue;
            var maxValue = ((_c = options.axis) === null || _c === void 0 ? void 0 : _c.maxRange) > domain.maxValue ? options.axis.maxRange : domain.maxValue;
            var updatedDomainValues = { minValue: minValue, maxValue: maxValue };
            return Object.assign(Object.assign({}, domain), updatedDomainValues);
        };
        PoChartContainerComponent.prototype.setSvgSpace = function () {
            var _a;
            // Representa um ponto 2D dentro do viewport do SVG. Ele é a representação do cursor do mouse para comparação de coordenadas com cada dado de série.
            var svgPoint = this.svgELement.nativeElement.createSVGPoint();
            // Retorna um DOMMatrix representando as matrizes 2D e 3D transformadas a partir das coordenadas do elemento, em relação ao document, para coordenadas relativas ao viewport do SVG.
            // É utilizado nos gráficos do tipo área para que seja possível equiparar as coordenadas do evento com cada dado de série, para assim ativar o ponto de dado equivalente.
            var svgDomMatrix = (_a = this.svgELement.nativeElement.getScreenCTM()) === null || _a === void 0 ? void 0 : _a.inverse();
            this.svgSpace = { svgPoint: svgPoint, svgDomMatrix: svgDomMatrix };
        };
        PoChartContainerComponent.prototype.setAlignByTheCorners = function (series) {
            this.alignByTheCorners = series.every(function (serie) { return serie.type === exports.PoChartType.Area || serie.type === exports.PoChartType.Bar; });
        };
        PoChartContainerComponent.prototype.setRange = function (series, options) {
            if (options === void 0) { options = {}; }
            if (!this.isTypeCircular) {
                this.range = this.getRange(series, options);
            }
        };
        PoChartContainerComponent.prototype.setSeriesByType = function (series) {
            var _d;
            this.seriesByType = (_d = {},
                _d[exports.PoChartType.Area] = series.filter(function (serie) { return serie.type === exports.PoChartType.Area; }),
                _d[exports.PoChartType.Column] = series.filter(function (serie) { return serie.type === exports.PoChartType.Column; }),
                _d[exports.PoChartType.Bar] = series.filter(function (serie) { return serie.type === exports.PoChartType.Bar; }),
                _d[exports.PoChartType.Line] = series.filter(function (serie) { return serie.type === exports.PoChartType.Line; }),
                _d[exports.PoChartType.Donut] = series.filter(function (serie) { return serie.type === exports.PoChartType.Donut; }),
                _d[exports.PoChartType.Pie] = series.filter(function (serie) { return serie.type === exports.PoChartType.Pie; }),
                _d);
        };
        PoChartContainerComponent.prototype.setViewBox = function () {
            var _d = this.containerSize, svgWidth = _d.svgWidth, svgHeight = _d.svgHeight;
            var viewBoxWidth = this.isTypeCircular ? svgHeight : svgWidth;
            // Tratamento necessário para que não corte o vetor nas extremidades
            var offsetXY = 1;
            this.viewBox = offsetXY + " -" + offsetXY + " " + viewBoxWidth + " " + this.containerSize.svgHeight;
        };
        PoChartContainerComponent.prototype.verifyAxisOptions = function (options) {
            if (!this.isTypeCircular && options.hasOwnProperty('axis')) {
                this.range = this.getRange(this.series, this.options);
                this.axisOptions = Object.assign(Object.assign({}, this.axisOptions), options.axis);
            }
        };
        return PoChartContainerComponent;
    }());
    PoChartContainerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-chart-container',
                    template: "<svg:svg\r\n  #svgELement\r\n  class=\"po-chart-svg-element\"\r\n  preserveAspectRatio=\"xMidYMin meet\"\r\n  [attr.viewBox]=\"viewBox\"\r\n  [attr.width]=\"containerSize.svgWidth\"\r\n  [attr.height]=\"containerSize.svgHeight\"\r\n>\r\n  <!-- axis -->\r\n  <svg:g\r\n    *ngIf=\"!isTypeCircular\"\r\n    po-chart-axis\r\n    [p-align-by-the-corners]=\"alignByTheCorners\"\r\n    [p-range]=\"range\"\r\n    [p-type]=\"type\"\r\n    [p-series]=\"series\"\r\n    [p-container-size]=\"containerSize\"\r\n    [p-options]=\"axisOptions\"\r\n    [p-categories]=\"categories\"\r\n    (p-categories-coordinates)=\"getCategoriesCoordinates($event)\"\r\n  ></svg:g>\r\n\r\n  <!-- chart area -->\r\n  <svg:g\r\n    *ngIf=\"(type === 'area' || type === 'line' || type === 'column') && seriesByType['area'].length\"\r\n    po-chart-area\r\n    [p-align-by-the-corners]=\"alignByTheCorners\"\r\n    [p-svg-space]=\"svgSpace\"\r\n    [p-categories]=\"categories\"\r\n    [p-categories-coordinates]=\"categoriesCoordinates\"\r\n    [p-range]=\"range\"\r\n    [p-series]=\"seriesByType['area']\"\r\n    [p-container-size]=\"containerSize\"\r\n    (p-bar-hover)=\"onSerieHover($event)\"\r\n    (p-bar-click)=\"onSerieClick($event)\"\r\n  ></svg:g>\r\n\r\n  <!-- chart column -->\r\n  <svg:g\r\n    *ngIf=\"(type === 'area' || type === 'line' || type === 'column') && seriesByType['column'].length\"\r\n    po-chart-column\r\n    [p-categories]=\"categories\"\r\n    [p-range]=\"range\"\r\n    [p-series]=\"seriesByType['column']\"\r\n    [p-container-size]=\"containerSize\"\r\n    (p-bar-hover)=\"onSerieHover($event)\"\r\n    (p-bar-click)=\"onSerieClick($event)\"\r\n  ></svg:g>\r\n\r\n  <!-- chart line -->\r\n  <svg:g\r\n    *ngIf=\"(type === 'area' || type === 'line' || type === 'column') && seriesByType['line'].length\"\r\n    po-chart-line\r\n    [p-categories]=\"categories\"\r\n    [p-range]=\"range\"\r\n    [p-series]=\"seriesByType['line']\"\r\n    [p-container-size]=\"containerSize\"\r\n    (p-point-hover)=\"onSerieHover($event)\"\r\n    (p-point-click)=\"onSerieClick($event)\"\r\n  ></svg:g>\r\n\r\n  <!-- chart bar -->\r\n  <svg:g\r\n    *ngIf=\"type === 'bar'\"\r\n    po-chart-bar\r\n    [p-categories]=\"categories\"\r\n    [p-range]=\"range\"\r\n    [p-series]=\"seriesByType['bar']\"\r\n    [p-container-size]=\"containerSize\"\r\n    (p-bar-hover)=\"onSerieHover($event)\"\r\n    (p-bar-click)=\"onSerieClick($event)\"\r\n  ></svg:g>\r\n\r\n  <svg:g\r\n    *ngIf=\"type === 'pie'\"\r\n    po-chart-pie\r\n    [p-series]=\"seriesByType['pie']\"\r\n    [p-container-size]=\"containerSize\"\r\n    (p-circular-hover)=\"onSerieHover($event)\"\r\n    (p-circular-click)=\"onSerieClick($event)\"\r\n  ></svg:g>\r\n\r\n  <svg:g\r\n    *ngIf=\"type === 'donut'\"\r\n    po-chart-donut\r\n    [p-options]=\"options\"\r\n    [p-series]=\"seriesByType['donut']\"\r\n    [p-container-size]=\"containerSize\"\r\n    (p-circular-hover)=\"onSerieHover($event)\"\r\n    (p-circular-click)=\"onSerieClick($event)\"\r\n  ></svg:g>\r\n</svg:svg>\r\n"
                },] }
    ];
    PoChartContainerComponent.ctorParameters = function () { return [
        { type: PoChartMathsService }
    ]; };
    PoChartContainerComponent.propDecorators = {
        categories: [{ type: i0.Input, args: ['p-categories',] }],
        type: [{ type: i0.Input, args: ['p-type',] }],
        containerSize: [{ type: i0.Input, args: ['p-container-size',] }],
        serieClick: [{ type: i0.Output, args: ['p-serie-click',] }],
        serieHover: [{ type: i0.Output, args: ['p-serie-hover',] }],
        svgELement: [{ type: i0.ViewChild, args: ['svgELement', { static: true },] }],
        options: [{ type: i0.Input, args: ['p-options',] }],
        series: [{ type: i0.Input, args: ['p-series',] }]
    };

    var PoChartLegendComponent = /** @class */ (function () {
        function PoChartLegendComponent() {
        }
        Object.defineProperty(PoChartLegendComponent.prototype, "series", {
            get: function () {
                return this._series;
            },
            set: function (value) {
                this._series = value;
            },
            enumerable: false,
            configurable: true
        });
        return PoChartLegendComponent;
    }());
    PoChartLegendComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-chart-legend',
                    template: "<div class=\"po-chart-legend\">\r\n  <div class=\"po-chart-legend-container\">\r\n    <div class=\"po-chart-legend-item\" *ngFor=\"let serie of series; let i = index\">\r\n      <div\r\n        class=\"po-chart-legend-square\"\r\n        [class]=\"serie.color?.includes('po-color') ? serie.color : ''\"\r\n        [style.background]=\"serie.color\"\r\n      ></div>\r\n      <span class=\"po-chart-legend-text\">{{ serie.label || serie.category }}</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoChartLegendComponent.propDecorators = {
        type: [{ type: i0.Input, args: ['p-type',] }],
        series: [{ type: i0.Input, args: ['p-series',] }]
    };

    var PoChartLineComponent = /** @class */ (function (_super) {
        __extends(PoChartLineComponent, _super);
        function PoChartLineComponent(mathsService, renderer, elementRef) {
            var _this = _super.call(this, mathsService, renderer, elementRef) || this;
            _this.mathsService = mathsService;
            _this.renderer = renderer;
            _this.elementRef = elementRef;
            return _this;
        }
        PoChartLineComponent.prototype.onEnter = function (serieIndex) {
            return null;
        };
        PoChartLineComponent.prototype.onLeave = function (serieIndex) {
            return null;
        };
        PoChartLineComponent.prototype.onSeriePointHover = function (selectedItem) {
            var relativeTo = selectedItem.relativeTo, item = __rest(selectedItem, ["relativeTo"]);
            this.reorderSVGGroup(relativeTo);
            this.pointHover.emit(item);
        };
        // É necessário reordenar os svgs on hover pois eventualmente os elemntos svg ficam por trás de outros. Não há z-index para svgElement.
        PoChartLineComponent.prototype.reorderSVGGroup = function (pathGroup) {
            var pathGroupElement = this.elementRef.nativeElement.querySelectorAll("." + pathGroup);
            this.animate = false;
            this.renderer.appendChild(this.chartLine.nativeElement, pathGroupElement[0]);
        };
        return PoChartLineComponent;
    }(PoChartLineBaseComponent));
    PoChartLineComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-chart-line]',
                    template: "<svg:g #chartLine>\r\n\r\n  <svg:g *ngFor=\"let item of seriesPathsCoordinates; let i = index; trackBy: trackBy\"\r\n    [class]=\"'po-chart-line-path-group-' + i\"\r\n    (mouseenter)=\"onEnter(i)\"\r\n    (mouseleave)=\"onLeave(i)\"\r\n  >\r\n    <!-- SERIES PATHS -->\r\n    <svg:g po-chart-path\r\n      [p-chart-line]=\"chartType === 'line'\"\r\n      [attr.key]=\"'po-chart-line-path-' + i\"\r\n      [p-animate]=\"animate\"\r\n      [p-color]=\"item.color\" \r\n      [p-coordinates]=\"item?.coordinates\"\r\n      [p-is-active]=\"item.isActive\"\r\n      >\r\n      </svg:g>\r\n\r\n    <!-- SERIES POINTS -->\r\n    <svg:g po-chart-series-point\r\n      [p-animate]=\"animate\"\r\n      [p-chart-line]=\"chartType === 'line'\"\r\n      [p-color]=\"item.color\"\r\n      [p-coordinates]=\"seriesPointsCoordinates[i]\"\r\n      [p-is-active]=\"activeTooltip\"\r\n      [p-relative-to]=\"'po-chart-line-path-group-' + i\" \r\n      [attr.key]=\"'po-chart-line-path-points-group-' + i\"\r\n      (p-point-click)=\"onSeriePointClick($event)\"\r\n      (p-point-hover)=\"onSeriePointHover($event)\"\r\n      ></svg:g>\r\n  </svg:g>\r\n\r\n</svg:g>"
                },] }
    ];
    PoChartLineComponent.ctorParameters = function () { return [
        { type: PoChartMathsService },
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };

    var PoChartBarPathComponent = /** @class */ (function () {
        function PoChartBarPathComponent() {
            this.barClick = new i0.EventEmitter();
            this.barHover = new i0.EventEmitter();
        }
        PoChartBarPathComponent.prototype.trackBy = function (index) {
            return index;
        };
        PoChartBarPathComponent.prototype.onClick = function (item) {
            var selectedItem = { label: item.label, data: item.data, category: item.category };
            this.barClick.emit(selectedItem);
        };
        PoChartBarPathComponent.prototype.onMouseEnter = function (item) {
            var selectedItem = { label: item.label, data: item.data, category: item.category };
            this.barHover.emit(selectedItem);
        };
        return PoChartBarPathComponent;
    }());
    PoChartBarPathComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-chart-bar-path]',
                    template: "<svg:path *ngFor=\"let item of coordinates; trackBy: trackBy\"\r\n  [p-tooltip]=\"item.tooltipLabel\"\r\n  [p-tooltip-position]=\"tooltipPosition\"\r\n  [p-append-in-body]='true'\r\n  class=\"po-chart-bar-path\"\r\n  [class]=\"color?.includes('po-color') ? color : ''\"\r\n  [attr.fill]=\"color\"\r\n  [attr.d]=\"item.coordinates\"\r\n  (mouseenter)=\"onMouseEnter(item)\"\r\n  (click)=\"onClick(item)\">\r\n</svg:path> \r\n"
                },] }
    ];
    PoChartBarPathComponent.ctorParameters = function () { return []; };
    PoChartBarPathComponent.propDecorators = {
        color: [{ type: i0.Input, args: ['p-color',] }],
        coordinates: [{ type: i0.Input, args: ['p-coordinates',] }],
        tooltipPosition: [{ type: i0.Input, args: ['p-tooltip-position',] }],
        barClick: [{ type: i0.Output, args: ['p-bar-click',] }],
        barHover: [{ type: i0.Output, args: ['p-bar-hover',] }]
    };

    var pathDashoffsetDefaultWidth = 0;
    var PoChartPathComponent = /** @class */ (function () {
        function PoChartPathComponent(changeDetector) {
            this.changeDetector = changeDetector;
            this.isActive = true;
            this.chartLine = false;
        }
        Object.defineProperty(PoChartPathComponent.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this._color = value.includes('po-color') && this.chartLine ? value.replace('po-color', 'po-border-color') : value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartPathComponent.prototype, "animate", {
            get: function () {
                return this._animate;
            },
            set: function (value) {
                this._animate = value;
                if (!this.animate) {
                    this.pathWidth = pathDashoffsetDefaultWidth;
                }
            },
            enumerable: false,
            configurable: true
        });
        PoChartPathComponent.prototype.ngAfterViewInit = function () {
            if (!isIE()) {
                this.pathAnimation();
            }
        };
        PoChartPathComponent.prototype.pathAnimation = function () {
            this.pathWidth = this.chartPath.nativeElement.getTotalLength();
            this.changeDetector.detectChanges();
            setTimeout(this.preventsAnimatingAgain.bind(this), 700);
        };
        // Redefine pathWidth para zero após o período da animação para que a linha se expanda normalmente on resize.
        PoChartPathComponent.prototype.preventsAnimatingAgain = function () {
            this.pathWidth = pathDashoffsetDefaultWidth;
        };
        return PoChartPathComponent;
    }());
    PoChartPathComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-chart-path]',
                    template: "<svg:path #chartPath\r\n  class=\"po-chart-path\"\r\n  [class.po-chart-active-path]=\"isActive\"\r\n  [class.po-chart-line-path]=\"chartLine\"\r\n  [class]=\"color?.includes('po-border-color') || color?.includes('po-color') ? color : ''\"\r\n  [attr.fill]=\"chartLine ? 'none' : color\"\r\n  [attr.stroke-dasharray]=\"pathWidth\"\r\n  [attr.stroke-dashoffset]=\"pathWidth\"\r\n  [attr.stroke]=\"chartLine ? color : ''\"\r\n  [attr.d]=\"coordinates\">\r\n</svg:path> "
                },] }
    ];
    PoChartPathComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    PoChartPathComponent.propDecorators = {
        isActive: [{ type: i0.Input, args: ['p-is-active',] }],
        chartLine: [{ type: i0.Input, args: ['p-chart-line',] }],
        coordinates: [{ type: i0.Input, args: ['p-coordinates',] }],
        chartPath: [{ type: i0.ViewChild, args: ['chartPath', { static: true },] }],
        color: [{ type: i0.Input, args: ['p-color',] }],
        animate: [{ type: i0.Input, args: ['p-animate',] }]
    };
    __decorate([
        InputBoolean()
    ], PoChartPathComponent.prototype, "isActive", void 0);
    __decorate([
        InputBoolean()
    ], PoChartPathComponent.prototype, "chartLine", void 0);

    var RADIUS_DEFAULT_SIZE = 5;
    var RADIUS_HOVER_SIZE = 10;
    var ANIMATION_DURATION_TIME = 700;
    var PoChartSeriesPointComponent = /** @class */ (function () {
        function PoChartSeriesPointComponent(renderer, elementRef) {
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.chartLine = false;
            this.pointClick = new i0.EventEmitter();
            this.pointHover = new i0.EventEmitter();
            this.radius = RADIUS_DEFAULT_SIZE;
            this._coordinates = [];
            this.animationState = true;
        }
        Object.defineProperty(PoChartSeriesPointComponent.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this.strokeColor = value.includes('po-color') ? value.replace('po-color', 'po-border-color') : value;
                this._color = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartSeriesPointComponent.prototype, "coordinates", {
            get: function () {
                return this._coordinates;
            },
            set: function (value) {
                this._coordinates = value;
                this.coordinates$ = this.displayPointsWithDelay(this._coordinates);
            },
            enumerable: false,
            configurable: true
        });
        PoChartSeriesPointComponent.prototype.trackBy = function (index) {
            return index;
        };
        PoChartSeriesPointComponent.prototype.onClick = function (point) {
            var selectedItem = { label: point.label, data: point.data, category: point.category };
            this.pointClick.emit(selectedItem);
        };
        PoChartSeriesPointComponent.prototype.onMouseEnter = function (event, point) {
            this.setPointAttribute(event.target, true);
            var selectedItem = { label: point.label, data: point.data, category: point.category };
            this.pointHover.emit(Object.assign({ relativeTo: this.relativeTo }, selectedItem));
        };
        PoChartSeriesPointComponent.prototype.onMouseLeave = function (event) {
            this.setPointAttribute(event.target, false);
        };
        PoChartSeriesPointComponent.prototype.displayPointsWithDelay = function (coordinates) {
            var _this = this;
            if (this.animationState && !isIE()) {
                var animationTimer_1 = ANIMATION_DURATION_TIME / coordinates.length;
                return rxjs.from(coordinates).pipe(operators.concatMap(function (item, index) { return rxjs.timer(index === 0 || !_this.animate ? 0 : animationTimer_1).pipe(operators.mapTo(item)); }), operators.scan(function (acc, curr) { return acc.concat(curr); }, []), operators.tap(function () { return (_this.animationState = false); }));
            }
            else {
                return rxjs.from([coordinates]);
            }
        };
        PoChartSeriesPointComponent.prototype.setPointAttribute = function (target, isHover) {
            this.renderer.setAttribute(target, 'r', isHover ? RADIUS_HOVER_SIZE.toString() : RADIUS_DEFAULT_SIZE.toString());
            if (this.color.includes('po-color')) {
                this.renderer.setAttribute(target, 'class', isHover ? this.strokeColor + " " + this.color : "po-chart-line-point po-chart-active-point " + this.strokeColor);
            }
            else {
                this.renderer[isHover ? 'setStyle' : 'removeStyle'](target, 'fill', isHover ? this.color : undefined);
            }
        };
        return PoChartSeriesPointComponent;
    }());
    PoChartSeriesPointComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-chart-series-point]',
                    template: "<svg:circle *ngFor=\"let item of coordinates$ | async; trackBy: trackBy\" \r\n  [p-tooltip]=\"item.tooltipLabel\"\r\n  [p-append-in-body]='true'\r\n  [p-display-tooltip]=\"!chartLine && item.isActive\"\r\n  p-tooltip-position=\"top\"\r\n  class=\"po-chart-line-point\"\r\n  [class]=\"strokeColor?.includes('po-border-color') ? strokeColor : ''\"\r\n  [class.po-chart-active-point]=\"item.isActive\"\r\n  [attr.cx]=\"item.xCoordinate\"\r\n  [attr.cy]=\"item.yCoordinate\"\r\n  [attr.r]=\"radius\"\r\n  [attr.stroke]=\"strokeColor\"\r\n  (click)=\"onClick(item)\"\r\n  (mouseenter)=\"onMouseEnter($event, item)\"\r\n  (mouseleave)=\"onMouseLeave($event)\"\r\n  >\r\n</svg:circle>\r\n"
                },] }
    ];
    PoChartSeriesPointComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    PoChartSeriesPointComponent.propDecorators = {
        animate: [{ type: i0.Input, args: ['p-animate',] }],
        isActive: [{ type: i0.Input, args: ['p-is-active',] }],
        chartLine: [{ type: i0.Input, args: ['p-chart-line',] }],
        relativeTo: [{ type: i0.Input, args: ['p-relative-to',] }],
        pointClick: [{ type: i0.Output, args: ['p-point-click',] }],
        pointHover: [{ type: i0.Output, args: ['p-point-hover',] }],
        color: [{ type: i0.Input, args: ['p-color',] }],
        coordinates: [{ type: i0.Input, args: ['p-coordinates',] }]
    };
    __decorate([
        InputBoolean()
    ], PoChartSeriesPointComponent.prototype, "isActive", void 0);
    __decorate([
        InputBoolean()
    ], PoChartSeriesPointComponent.prototype, "chartLine", void 0);

    var PoChartCircularComponent = /** @class */ (function () {
        function PoChartCircularComponent(ngZone, changeDetector) {
            this.ngZone = ngZone;
            this.changeDetector = changeDetector;
            this.circularClick = new i0.EventEmitter();
            this.circularHover = new i0.EventEmitter();
            this.canDisplayLabels = false;
            this.seriesLabels = [];
            this.showLabels = false;
        }
        Object.defineProperty(PoChartCircularComponent.prototype, "options", {
            get: function () {
                return this._options;
            },
            set: function (value) {
                if (!isNaN(value === null || value === void 0 ? void 0 : value.innerRadius)) {
                    this._options = value;
                    this.innerRadius = Math.min(Math.max(this._options.innerRadius, 0), 100);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoChartCircularComponent.prototype, "series", {
            get: function () {
                return this._series;
            },
            set: function (value) {
                this._series = value;
                this.animate = true;
            },
            enumerable: false,
            configurable: true
        });
        PoChartCircularComponent.prototype.onSerieClick = function (selectedItem) {
            this.circularClick.emit(selectedItem);
        };
        PoChartCircularComponent.prototype.onSerieHover = function (selectedItem) {
            this.circularHover.emit(selectedItem);
        };
        PoChartCircularComponent.prototype.calculateAngle = function (data, totalValue) {
            return (data / totalValue) * (Math.PI * 2);
        };
        PoChartCircularComponent.prototype.drawSeries = function (series, height) {
            if (series === void 0) { series = []; }
            this.seriesList = [];
            this.showLabels = false;
            this.totalValue = this.calculateTotalValue(series);
            if (this.totalValue && this.totalValue > 0) {
                this.seriesList = this.validateSeries(series);
                this.changeDetector.detectChanges();
                if (this.seriesList.length && this.svgPaths) {
                    this.initDrawPaths(this.seriesList, this.totalValue, height);
                }
            }
        };
        PoChartCircularComponent.prototype.calculateTotalValue = function (series) {
            return series.reduce(function (previousValue, serie) {
                var data = serie.data ? serie.data : serie.value;
                return previousValue + (data > 0 ? data : 0);
            }, 0);
        };
        PoChartCircularComponent.prototype.calculateSerieCoordinates = function (series, totalValue, height) {
            var _this = this;
            var startRadianAngle;
            var endRadianAngle = PoChartStartAngle;
            series.forEach(function (serie, index) {
                startRadianAngle = endRadianAngle;
                endRadianAngle = startRadianAngle + _this.calculateAngle(serie.data, totalValue) - PoChartCompleteCircle;
                var coordinates = _this.calculateCoordinates(height, startRadianAngle, endRadianAngle);
                _this.svgPaths.toArray()[index].applyCoordinates(coordinates);
                _this.showLabels = _this.canDisplayLabels;
            });
        };
        PoChartCircularComponent.prototype.calculateCoordinatesWithAnimation = function (series, totalValue, height, startRadianAngle, endRadianAngle, currentRadianAngle, seriesIndex) {
            if (currentRadianAngle === void 0) { currentRadianAngle = 0; }
            if (seriesIndex === void 0) { seriesIndex = 0; }
            var finishedCurrentSerie = currentRadianAngle > endRadianAngle;
            var finishedAllSeries = seriesIndex === series.length;
            if (finishedAllSeries) {
                this.animate = false;
                return;
            }
            if (finishedCurrentSerie) {
                this.setSerieLabelCoordinates(seriesIndex);
                currentRadianAngle = 0;
                seriesIndex++;
                startRadianAngle = startRadianAngle + endRadianAngle;
                endRadianAngle =
                    seriesIndex < series.length ? this.calculateAngle(series[seriesIndex].data, totalValue) : undefined;
            }
            else {
                currentRadianAngle += PoChartAngleStepInterval;
                var currentEndRadianAngle = this.calculateCurrentEndAngle(currentRadianAngle, startRadianAngle, endRadianAngle);
                var coordinates = this.calculateCoordinates(height, startRadianAngle, currentEndRadianAngle);
                this.svgPaths.toArray()[seriesIndex].applyCoordinates(coordinates);
            }
            window.requestAnimationFrame(this.calculateCoordinatesWithAnimation.bind(this, series, totalValue, height, startRadianAngle, endRadianAngle, currentRadianAngle, seriesIndex));
        };
        PoChartCircularComponent.prototype.calculateCurrentEndAngle = function (currentRadianAngle, startRadianAngle, endRadianAngle) {
            var isSerieDrawCompleted = startRadianAngle + currentRadianAngle > startRadianAngle + endRadianAngle;
            return isSerieDrawCompleted
                ? startRadianAngle + endRadianAngle - PoChartCompleteCircle
                : startRadianAngle + currentRadianAngle;
        };
        PoChartCircularComponent.prototype.initDrawPaths = function (seriesList, totalValue, height) {
            var _this = this;
            if (!this.animate) {
                this.calculateSerieCoordinates(seriesList, totalValue, height);
            }
            else {
                var startRadianAngle_1 = PoChartStartAngle;
                var endRadianAngle_1 = this.calculateAngle(seriesList[0].data, totalValue);
                this.ngZone.runOutsideAngular(function () { return _this.calculateCoordinatesWithAnimation(seriesList, totalValue, height, startRadianAngle_1, endRadianAngle_1); });
            }
        };
        PoChartCircularComponent.prototype.setSerieLabelCoordinates = function (index) {
            if (this.svgLabels.toArray().length) {
                this.svgLabels.toArray()[index].applyCoordinates(this.seriesLabels[index]);
            }
        };
        PoChartCircularComponent.prototype.validateSeries = function (series) {
            var _this = this;
            return series.reduce(function (seriesList, serie) {
                var _a;
                var data = (_a = serie.data) !== null && _a !== void 0 ? _a : serie.value;
                if (data && data > 0) {
                    var color = serie.color;
                    var label = serie.label;
                    var tooltip = serie.tooltip;
                    var tooltipLabel = _this.getTooltipLabel(data, label, tooltip);
                    seriesList = __spreadArray(__spreadArray([], __read(seriesList)), [{ data: data, color: color, label: label, tooltipLabel: tooltipLabel }]);
                }
                return seriesList;
            }, []);
        };
        return PoChartCircularComponent;
    }());
    PoChartCircularComponent.decorators = [
        { type: i0.Directive }
    ];
    PoChartCircularComponent.ctorParameters = function () { return [
        { type: i0.NgZone },
        { type: i0.ChangeDetectorRef }
    ]; };
    PoChartCircularComponent.propDecorators = {
        containerSize: [{ type: i0.Input, args: ['p-container-size',] }],
        circularClick: [{ type: i0.Output, args: ['p-circular-click',] }],
        circularHover: [{ type: i0.Output, args: ['p-circular-hover',] }],
        svgPaths: [{ type: i0.ViewChildren, args: ['svgPaths',] }],
        svgLabels: [{ type: i0.ViewChildren, args: ['svgLabels',] }],
        options: [{ type: i0.Input, args: ['p-options',] }],
        series: [{ type: i0.Input, args: ['p-series',] }]
    };

    var PoChartPieComponent = /** @class */ (function (_super) {
        __extends(PoChartPieComponent, _super);
        /* istanbul ignore next */
        function PoChartPieComponent(ngZone, changeDetector) {
            return _super.call(this, ngZone, changeDetector) || this;
        }
        PoChartPieComponent.prototype.ngOnChanges = function (changes) {
            if (changes.series || changes.containerSize) {
                this.drawSeries(this.series, this.containerSize.svgHeight);
            }
        };
        PoChartPieComponent.prototype.calculateCoordinates = function (height, startRadianAngle, endRadianAngle) {
            var radius = height / 2;
            var sinAlpha = Math.sin(startRadianAngle);
            var cosAlpha = Math.cos(startRadianAngle);
            var sinBeta = Math.sin(endRadianAngle);
            var cosBeta = Math.cos(endRadianAngle);
            var startX = radius + cosAlpha * radius;
            var startY = radius + sinAlpha * radius;
            var endX = radius + cosBeta * radius;
            var endY = radius + sinBeta * radius;
            var largeArc = endRadianAngle - startRadianAngle > Math.PI;
            return [
                'M',
                startX,
                startY,
                'A',
                radius,
                radius,
                0,
                largeArc ? '1,1' : '0,1',
                endX,
                endY,
                'L',
                radius,
                radius,
                'Z'
            ].join(' ');
        };
        PoChartPieComponent.prototype.getTooltipLabel = function (data, label, tooltipLabel) {
            var dataLabel = label ? label + ": " : '';
            var dataValue = data.toString();
            return tooltipLabel || "" + dataLabel + dataValue;
        };
        return PoChartPieComponent;
    }(PoChartCircularComponent));
    PoChartPieComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-chart-pie]',
                    template: "<svg:g>\r\n  <!-- SERIES PATHS -->\r\n  <svg:g *ngFor=\"let item of seriesList; let i = index\">\r\n    <svg:g #svgPaths po-chart-circular-path\r\n      [attr.key]=\"'po-chart-circular-path-' + i\"\r\n      [p-serie]=\"item\"\r\n      (p-on-click)=\"onSerieClick($event)\"\r\n      (p-on-hover)=\"onSerieHover($event)\">\r\n    </svg:g>\r\n  </svg:g>\r\n\r\n  <!-- SERIES LABELS -->\r\n  <svg:g *ngIf=\"canDisplayLabels\">\r\n    <svg:g *ngFor=\"let item of seriesLabels; let i = index\">\r\n      <svg:g #svgLabels po-chart-circular-label\r\n        [attr.key]=\"'po-chart-circular-label-' + i\"\r\n        [p-serie]=\"item\"\r\n        [p-show-label]=\"showLabels\">\r\n      </svg:g>\r\n    </svg:g>\r\n  </svg:g>\r\n</svg:g>\r\n\r\n"
                },] }
    ];
    PoChartPieComponent.ctorParameters = function () { return [
        { type: i0.NgZone },
        { type: i0.ChangeDetectorRef }
    ]; };

    var PoChartDonutComponent = /** @class */ (function (_super) {
        __extends(PoChartDonutComponent, _super);
        /* istanbul ignore next */
        function PoChartDonutComponent(ngZone, changeDetector) {
            var _this = _super.call(this, ngZone, changeDetector) || this;
            _this.poChartBlackColor = '#000000';
            _this.poChartWhiteColor = '#ffffff';
            return _this;
        }
        PoChartDonutComponent.prototype.ngOnChanges = function (changes) {
            if (changes.series || changes.containerSize || changes.options) {
                this.drawSeries(this.series, this.containerSize.svgHeight);
                this.applySeriesLabels(this.seriesList, this.containerSize.svgHeight);
            }
        };
        PoChartDonutComponent.prototype.calculateCoordinates = function (height, startRadianAngle, endRadianAngle) {
            var radius = height / 2;
            var innerRadius = this.getInnerRadius(radius);
            var sinAlpha = Math.sin(startRadianAngle);
            var cosAlpha = Math.cos(startRadianAngle);
            var sinBeta = Math.sin(endRadianAngle);
            var cosBeta = Math.cos(endRadianAngle);
            var startX = radius + cosAlpha * radius;
            var startY = radius + sinAlpha * radius;
            var endX = radius + cosBeta * radius;
            var endY = radius + sinBeta * radius;
            var startInnerX = radius + cosAlpha * innerRadius;
            var startInnerY = radius + sinAlpha * innerRadius;
            var endInnerX = radius + cosBeta * innerRadius;
            var endInnerY = radius + sinBeta * innerRadius;
            var largeArc = endRadianAngle - startRadianAngle > Math.PI;
            this.verifyDisplayLabels(radius, innerRadius);
            return [
                'M',
                startX,
                startY,
                'A',
                radius,
                radius,
                0,
                largeArc ? '1,1' : '0,1',
                endX,
                endY,
                'L',
                endInnerX,
                endInnerY,
                'A',
                innerRadius,
                innerRadius,
                0,
                largeArc ? '1,0' : '0,0',
                startInnerX,
                startInnerY,
                'Z'
            ].join(' ');
        };
        PoChartDonutComponent.prototype.getTooltipLabel = function (data, label, tooltipLabel) {
            var dataLabel = label ? label + ": " : '';
            var dataValue = this.getPercentValue(data, this.totalValue) + '%';
            return tooltipLabel || "" + dataLabel + dataValue;
        };
        PoChartDonutComponent.prototype.applySeriesLabels = function (seriesList, height) {
            var _this = this;
            var startRadianAngle = PoChartStartAngle;
            var endRadianAngle = PoChartStartAngle;
            this.seriesLabels = seriesList.map(function (serie) {
                startRadianAngle = endRadianAngle;
                endRadianAngle = startRadianAngle + _this.calculateAngle(serie.data, _this.totalValue);
                var label = _this.getPercentValue(serie.data, _this.totalValue) + '% ';
                var color = _this.getTextColor(serie.color);
                var coordinates = _this.calculateLabelCoordinates(height, startRadianAngle, endRadianAngle);
                return Object.assign(Object.assign({}, coordinates), { label: label, color: color });
            });
        };
        PoChartDonutComponent.prototype.calculateLabelCoordinates = function (height, startRadianAngle, endRadianAngle) {
            var radius = height / 2;
            var innerRadius = this.getInnerRadius(radius);
            var sliceCenterAngle = (startRadianAngle + endRadianAngle) / 2;
            var labelRadius = innerRadius + (radius - innerRadius) / 2;
            var xCoordinate = labelRadius * Math.cos(sliceCenterAngle) + radius;
            var yCoordinate = labelRadius * Math.sin(sliceCenterAngle) + radius;
            return { xCoordinate: xCoordinate, yCoordinate: yCoordinate };
        };
        PoChartDonutComponent.prototype.getInnerRadius = function (radius) {
            var defaultInnerRadius = radius - PoChartDonutDefaultThickness;
            return this.innerRadius >= 0 ? (this.innerRadius / 100) * radius : defaultInnerRadius;
        };
        PoChartDonutComponent.prototype.getPercentValue = function (value, totalValue) {
            var percentValue = (value / totalValue) * 100;
            var floatPercentValue = convertNumberToDecimal(percentValue, 2);
            return String(floatPercentValue).replace('.', ',');
        };
        PoChartDonutComponent.prototype.getTextColor = function (color) {
            if (PoDefaultColorsTextBlack.includes(color)) {
                return this.poChartBlackColor;
            }
            return this.poChartWhiteColor;
        };
        PoChartDonutComponent.prototype.verifyDisplayLabels = function (radius, innerRadius) {
            this.canDisplayLabels = radius - innerRadius >= radius - (radius - PoChartDonutDefaultThickness);
        };
        return PoChartDonutComponent;
    }(PoChartCircularComponent));
    PoChartDonutComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-chart-donut]',
                    template: "<svg:g>\r\n  <!-- SERIES PATHS -->\r\n  <svg:g *ngFor=\"let item of seriesList; let i = index\">\r\n    <svg:g #svgPaths po-chart-circular-path\r\n      [attr.key]=\"'po-chart-circular-path-' + i\"\r\n      [p-serie]=\"item\"\r\n      (p-on-click)=\"onSerieClick($event)\"\r\n      (p-on-hover)=\"onSerieHover($event)\">\r\n    </svg:g>\r\n  </svg:g>\r\n\r\n  <!-- SERIES LABELS -->\r\n  <svg:g *ngIf=\"canDisplayLabels\">\r\n    <svg:g *ngFor=\"let item of seriesLabels; let i = index\">\r\n      <svg:g #svgLabels po-chart-circular-label\r\n        [attr.key]=\"'po-chart-circular-label-' + i\"\r\n        [p-serie]=\"item\"\r\n        [p-show-label]=\"showLabels\">\r\n      </svg:g>\r\n    </svg:g>\r\n  </svg:g>\r\n</svg:g>\r\n\r\n"
                },] }
    ];
    PoChartDonutComponent.ctorParameters = function () { return [
        { type: i0.NgZone },
        { type: i0.ChangeDetectorRef }
    ]; };

    var PoChartCircularLabelComponent = /** @class */ (function () {
        function PoChartCircularLabelComponent(changeDetection, renderer) {
            this.changeDetection = changeDetection;
            this.renderer = renderer;
        }
        PoChartCircularLabelComponent.prototype.applyCoordinates = function (coordinates) {
            this.renderer.setAttribute(this.svgLabel.nativeElement, 'x', coordinates.xCoordinate.toString());
            this.renderer.setAttribute(this.svgLabel.nativeElement, 'y', coordinates.yCoordinate.toString());
            this.showLabel = true;
            this.changeDetection.detectChanges();
        };
        return PoChartCircularLabelComponent;
    }());
    PoChartCircularLabelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-chart-circular-label]',
                    template: "<svg:text #svgLabel \r\n  class=\"po-chart-label\" \r\n  dominant-baseline=\"middle\"\r\n  [class.po-invisible]=\"!showLabel\"\r\n  [attr.fill]=\"serie?.color\"\r\n  [attr.x]=\"serie?.xCoordinate\"\r\n  [attr.y]=\"serie?.yCoordinate\">\r\n  {{ serie?.label }}\r\n</svg:text> "
                },] }
    ];
    PoChartCircularLabelComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.Renderer2 }
    ]; };
    PoChartCircularLabelComponent.propDecorators = {
        serie: [{ type: i0.Input, args: ['p-serie',] }],
        showLabel: [{ type: i0.Input, args: ['p-show-label',] }],
        svgLabel: [{ type: i0.ViewChild, args: ['svgLabel', { read: i0.ElementRef },] }]
    };

    var PoChartCircularPathComponent = /** @class */ (function () {
        function PoChartCircularPathComponent(renderer) {
            this.renderer = renderer;
            this.onClick = new i0.EventEmitter();
            this.onHover = new i0.EventEmitter();
        }
        PoChartCircularPathComponent.prototype.applyCoordinates = function (coordinates) {
            this.renderer.setAttribute(this.svgPath.nativeElement, 'd', coordinates);
        };
        PoChartCircularPathComponent.prototype.onMouseClick = function () {
            var _a = this.serie, label = _a.label, data = _a.data;
            this.onClick.emit({ label: label, data: data });
        };
        PoChartCircularPathComponent.prototype.onMouseEnter = function () {
            var _a = this.serie, label = _a.label, data = _a.data;
            this.onHover.emit({ label: label, data: data });
        };
        return PoChartCircularPathComponent;
    }());
    PoChartCircularPathComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-chart-circular-path]',
                    template: "<svg:path #svgPath\r\n  class=\"po-path-item\"\r\n  [class]=\"serie?.color.includes('po-color') ? serie.color : ''\"\r\n  [p-chart-tooltip]=\"serie?.tooltipLabel\"\r\n  [attr.fill]=\"serie?.color\"\r\n  (click)=\"onMouseClick()\"\r\n  (mouseenter)=\"onMouseEnter()\"\r\n  >\r\n</svg:path> \r\n"
                },] }
    ];
    PoChartCircularPathComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 }
    ]; };
    PoChartCircularPathComponent.propDecorators = {
        serie: [{ type: i0.Input, args: ['p-serie',] }],
        onClick: [{ type: i0.Output, args: ['p-on-click',] }],
        onHover: [{ type: i0.Output, args: ['p-on-hover',] }],
        svgPath: [{ type: i0.ViewChild, args: ['svgPath', { read: i0.ElementRef },] }]
    };

    var PoChartTooltipDirective = /** @class */ (function () {
        function PoChartTooltipDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
        }
        PoChartTooltipDirective.prototype.onMouseEnter = function (event) {
            this.tooltipElement ? this.showTooltip() : this.createTooltip();
            this.tooltipPosition(event);
            this.lastTooltipText = this.tooltip;
        };
        PoChartTooltipDirective.prototype.onMouseLeave = function () {
            this.hideTooltip();
        };
        PoChartTooltipDirective.prototype.onMouseMove = function (event) {
            this.tooltipPosition(event);
        };
        PoChartTooltipDirective.prototype.calculateTooltipPosition = function (event) {
            var displacement = 12;
            return {
                left: event.clientX - this.tooltipElement.offsetWidth / 2,
                top: event.clientY - this.tooltipElement.offsetHeight - displacement
            };
        };
        PoChartTooltipDirective.prototype.createTooltip = function () {
            var chartWrapper = this.elementRef.nativeElement.closest('.po-chart-wrapper');
            this.tooltipElement = this.renderer.createElement('div');
            this.renderer.addClass(this.tooltipElement, 'po-chart-tooltip');
            this.renderer.addClass(this.tooltipElement, 'po-tooltip');
            var divArrow = this.renderer.createElement('div');
            this.renderer.addClass(divArrow, 'po-tooltip-arrow');
            this.renderer.addClass(divArrow, 'po-arrow-bottom');
            this.tooltipText = this.renderer.createElement('p');
            this.renderer.addClass(this.tooltipText, 'po-tooltip-content');
            this.tooltipTextContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.tooltipText, this.tooltipTextContent);
            this.renderer.appendChild(this.tooltipElement, divArrow);
            this.renderer.appendChild(this.tooltipElement, this.tooltipText);
            this.renderer.appendChild(chartWrapper, this.tooltipElement);
        };
        PoChartTooltipDirective.prototype.hideTooltip = function () {
            this.renderer.addClass(this.tooltipElement, 'po-invisible');
        };
        PoChartTooltipDirective.prototype.showTooltip = function () {
            this.renderer.removeClass(this.tooltipElement, 'po-invisible');
            this.updatetooltipTextContent();
        };
        PoChartTooltipDirective.prototype.tooltipPosition = function (event) {
            var tooltipPositions = this.calculateTooltipPosition(event);
            this.renderer.setStyle(this.tooltipElement, 'left', tooltipPositions.left + "px");
            this.renderer.setStyle(this.tooltipElement, 'top', tooltipPositions.top + "px");
        };
        PoChartTooltipDirective.prototype.updatetooltipTextContent = function () {
            if (this.lastTooltipText !== this.tooltip) {
                this.renderer.removeChild(this.tooltipText, this.tooltipTextContent);
                this.tooltipTextContent = this.renderer.createText(this.tooltip);
                this.renderer.appendChild(this.tooltipText, this.tooltipTextContent);
            }
        };
        return PoChartTooltipDirective;
    }());
    PoChartTooltipDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[p-chart-tooltip]'
                },] }
    ];
    PoChartTooltipDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    PoChartTooltipDirective.propDecorators = {
        tooltip: [{ type: i0.Input, args: ['p-chart-tooltip',] }],
        onMouseEnter: [{ type: i0.HostListener, args: ['mouseenter', ['$event'],] }],
        onMouseLeave: [{ type: i0.HostListener, args: ['mouseleave',] }],
        onMouseMove: [{ type: i0.HostListener, args: ['mousemove', ['$event'],] }]
    };

    /// <reference types="resize-observer-browser" />
    var PoResizeObserverDirective = /** @class */ (function () {
        function PoResizeObserverDirective(elementRef) {
            this.elementRef = elementRef;
            this.resize = new i0.EventEmitter();
            this.subscription = new rxjs.Subscription();
            this.chartWidthResize$ = new rxjs.Subject();
        }
        PoResizeObserverDirective.prototype.ngOnDestroy = function () {
            if (this.isResizeObserverSupported) {
                this.observer.unobserve(this.elementRef.nativeElement);
                this.subscription.unsubscribe();
            }
        };
        PoResizeObserverDirective.prototype.ngOnInit = function () {
            var _this = this;
            if (this.isResizeObserverSupported) {
                this.observer = new window.ResizeObserver(function () {
                    _this.chartWidthResize$.next();
                });
                this.observer.observe(this.elementRef.nativeElement);
                this.subscription.add(this.chartWidthResize$.pipe(operators.debounceTime(20)).subscribe(function (_) {
                    _this.resize.emit();
                }));
            }
        };
        Object.defineProperty(PoResizeObserverDirective.prototype, "isResizeObserverSupported", {
            get: function () {
                return typeof window.ResizeObserver === 'function';
            },
            enumerable: false,
            configurable: true
        });
        return PoResizeObserverDirective;
    }());
    PoResizeObserverDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[p-resize-observer]'
                },] }
    ];
    PoResizeObserverDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PoResizeObserverDirective.propDecorators = {
        resize: [{ type: i0.Output, args: ['p-resize-observer',] }]
    };

    /**
     * @description
     *
     * Módulo do componente `po-chart`.
     */
    var PoChartModule = /** @class */ (function () {
        function PoChartModule() {
        }
        return PoChartModule;
    }());
    PoChartModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, PoTooltipModule],
                    declarations: [
                        PoChartAreaComponent,
                        PoChartAxisComponent,
                        PoChartAxisPathComponent,
                        PoChartAxisLabelComponent,
                        PoChartComponent,
                        PoChartContainerComponent,
                        PoChartGaugeComponent,
                        PoChartGaugeTextContentComponent,
                        PoChartLegendComponent,
                        PoChartLineComponent,
                        PoChartPathComponent,
                        PoChartPieComponent,
                        PoChartDonutComponent,
                        PoChartSeriesPointComponent,
                        PoChartBarComponent,
                        PoChartColumnComponent,
                        PoChartBarPathComponent,
                        PoChartCircularPathComponent,
                        PoChartCircularLabelComponent,
                        PoChartTooltipDirective,
                        PoResizeObserverDirective
                    ],
                    exports: [PoChartComponent]
                },] }
    ];

    /**
     * @description
     *
     * O `po-container` é um componente que visa facilitar o agrupamento de conteúdos.
     * Por padrão o mesmo exibe uma borda, um efeito de sombra ao seu redor e um espaçamento em sua parte interna, os quais
     * podem ser desabilitados. Ao remover sua borda a sombra também será removida. Além disso, sua altura acompanha a
     * quantidade do conteúdo, porém pode ser fixada. Para controlar sua largura, utilize o [Grid System](/guides/grid-system),
     * assim possibilitando o tratamento para diferentes resoluções.
     */
    var PoContainerBaseComponent = /** @class */ (function () {
        function PoContainerBaseComponent() {
            this._noBorder = false;
            this._noPadding = false;
            this._noShadow = false;
        }
        Object.defineProperty(PoContainerBaseComponent.prototype, "height", {
            get: function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura do `po-container`.
             *
             * > Caso não seja definido um valor, a altura se ajustará de acordo com o conteúdo.
             */
            set: function (value) {
                this._height = convertToInt(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoContainerBaseComponent.prototype, "noBorder", {
            get: function () {
                return this._noBorder;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita a borda e a sombra em torno do `po-container`.
             *
             * @default `false`
             */
            set: function (value) {
                this._noBorder = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoContainerBaseComponent.prototype, "noPadding", {
            get: function () {
                return this._noPadding;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o espaçamento interno do `po-container`.
             *
             * @default `false`
             */
            set: function (value) {
                this._noPadding = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoContainerBaseComponent.prototype, "noShadow", {
            get: function () {
                return this._noShadow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o sombreamento em torno do `po-container`.
             *
             * @default `false`
             */
            set: function (value) {
                this._noShadow = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        return PoContainerBaseComponent;
    }());
    PoContainerBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoContainerBaseComponent.propDecorators = {
        height: [{ type: i0.Input, args: ['p-height',] }],
        noBorder: [{ type: i0.Input, args: ['p-no-border',] }],
        noPadding: [{ type: i0.Input, args: ['p-no-padding',] }],
        noShadow: [{ type: i0.Input, args: ['p-no-shadow',] }]
    };

    /**
     * @docsExtends PoContainerBaseComponent
     *
     * @example
     *
     * <example name="po-container-basic" title="PO Container Basic">
     *  <file name="sample-po-container-basic/sample-po-container-basic.component.html"> </file>
     *  <file name="sample-po-container-basic/sample-po-container-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-container-labs" title="PO Container Labs">
     *  <file name="sample-po-container-labs/sample-po-container-labs.component.html"> </file>
     *  <file name="sample-po-container-labs/sample-po-container-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-container-dashboard" title="PO Container - Dashboard">
     *  <file name="sample-po-container-dashboard/sample-po-container-dashboard.component.html"> </file>
     *  <file name="sample-po-container-dashboard/sample-po-container-dashboard.component.ts"> </file>
     *  <file name="sample-po-container-dashboard/sample-po-container-dashboard.service.ts"> </file>
     * </example>
     */
    var PoContainerComponent = /** @class */ (function (_super) {
        __extends(PoContainerComponent, _super);
        function PoContainerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PoContainerComponent;
    }(PoContainerBaseComponent));
    PoContainerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-container',
                    template: "<div\r\n  class=\"po-container\"\r\n  [class.po-container-no-border]=\"noBorder\"\r\n  [class.po-container-no-padding]=\"noPadding\"\r\n  [class.po-container-no-shadow]=\"noShadow\"\r\n  [style.height]=\"height ? height + 'px' : 'auto'\"\r\n>\r\n  <ng-content></ng-content>\r\n</div>\r\n"
                },] }
    ];

    /**
     * @description
     *
     * Módulo do componente `po-container`.
     */
    var PoContainerModule = /** @class */ (function () {
        function PoContainerModule() {
        }
        return PoContainerModule;
    }());
    PoContainerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    exports: [PoContainerComponent],
                    declarations: [PoContainerComponent]
                },] }
    ];

    var PO_DISCLAIMER_TYPES = ['default', 'danger'];
    var PO_DISCLAIMER_DEFAULT_TYPE = 'default';
    /**
     * @docsPrivate
     *
     * @description
     *
     * O componente po-disclaimer é responsável por representar tags.
     * Seu uso é recomendado em buscas e em campos onde é necessário representar objetos selecionados,
     * como por exemplo, no po-multi-select.
     *
     */
    var PoDisclaimerBaseComponent = /** @class */ (function () {
        function PoDisclaimerBaseComponent() {
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao fechar o disclaimer.
             * Para este evento será passado como parâmetro um objeto com value, label e property.
             */
            this.closeAction = new i0.EventEmitter();
            this.showDisclaimer = true;
            this._type = 'default';
            this._hideClose = false;
        }
        Object.defineProperty(PoDisclaimerBaseComponent.prototype, "hideClose", {
            get: function () {
                return this._hideClose;
            },
            /**
             * @description
             *
             * Esta propriedade esconde o botão para fechamento do po-disclaimer, ao utilizar esta propriedade
             * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
             *
             * @default false
             */
            set: function (value) {
                this._hideClose = value === '' ? true : convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDisclaimerBaseComponent.prototype, "type", {
            get: function () {
                return this._type;
            },
            /**
             * @description
             *
             * Tipo do po-disclaimer. Pode ser 'default' ou 'danger'.
             *
             * @default default
             * @optional
             */
            set: function (type) {
                this._type = PO_DISCLAIMER_TYPES.includes(type) ? type : PO_DISCLAIMER_DEFAULT_TYPE;
            },
            enumerable: false,
            configurable: true
        });
        PoDisclaimerBaseComponent.prototype.close = function () {
            this.showDisclaimer = false;
            this.closeAction.emit({ value: this.value, label: this.label, property: this.property });
        };
        PoDisclaimerBaseComponent.prototype.getLabel = function () {
            return this.label ? this.label : this.value;
        };
        return PoDisclaimerBaseComponent;
    }());
    PoDisclaimerBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoDisclaimerBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['p-label',] }],
        value: [{ type: i0.Input, args: ['p-value',] }],
        property: [{ type: i0.Input, args: ['p-property',] }],
        closeAction: [{ type: i0.Output, args: ['p-close-action',] }],
        hideClose: [{ type: i0.Input, args: ['p-hide-close',] }],
        type: [{ type: i0.Input, args: ['p-type',] }]
    };

    /**
     * @docsPrivate
     *
     * @docsExtends PoDisclaimerBaseComponent
     *
     * @examplePrivate
     *
     * <example-private name="po-disclaimer" title="PO Disclaimer">
     *   <file name="sample-po-disclaimer.component.html"> </file>
     *   <file name="sample-po-disclaimer.component.ts"> </file>
     * </example-private>
     */
    var PoDisclaimerComponent = /** @class */ (function (_super) {
        __extends(PoDisclaimerComponent, _super);
        function PoDisclaimerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoDisclaimerComponent.prototype.onKeyPress = function (event) {
            if (isKeyCodeEnter(event)) {
                this.close();
            }
        };
        return PoDisclaimerComponent;
    }(PoDisclaimerBaseComponent));
    PoDisclaimerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-disclaimer',
                    template: "<div *ngIf=\"showDisclaimer === true\" class=\"po-disclaimer\">\r\n  <span class=\"po-disclaimer-label\" [class.po-disclaimer-label-danger]=\"type === 'danger'\">\r\n    {{ getLabel() }}\r\n  </span>\r\n\r\n  <span\r\n    *ngIf=\"hideClose === false\"\r\n    class=\"po-disclaimer-remove po-icon po-icon-close po-clickable\"\r\n    tabindex=\"0\"\r\n    [class.po-disclaimer-remove-danger]=\"type === 'danger'\"\r\n    (click)=\"close()\"\r\n    (keydown)=\"onKeyPress($event)\"\r\n  >\r\n  </span>\r\n</div>\r\n"
                },] }
    ];

    /**
     * @description
     * Módulo do componente po-disclaimer.
     */
    var PoDisclaimerModule = /** @class */ (function () {
        function PoDisclaimerModule() {
        }
        return PoDisclaimerModule;
    }());
    PoDisclaimerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [PoDisclaimerComponent],
                    exports: [PoDisclaimerComponent]
                },] }
    ];

    var poDisclaimerGroupLiteralsDefault = {
        en: { removeAll: 'Remove all' },
        es: { removeAll: 'Eliminar todos' },
        pt: { removeAll: 'Remover todos' },
        ru: { removeAll: 'Удалить все' }
    };
    /**
     * @description
     *
     * O componente `po-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
     *
     * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
     * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
     *
     * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
     * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
     *
     * > Veja a integração destas funcionalidade no componente [po-page-list](/documentation/po-page-list).
     */
    var PoDisclaimerGroupBaseComponent = /** @class */ (function () {
        function PoDisclaimerGroupBaseComponent(differs, languageService) {
            /**
             * @optional
             *
             * @description
             *
             * Função que será disparada quando a lista de *disclaimers* for modificada.
             */
            this.change = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Função que será disparada quando um *disclaimer* for removido da lista de *disclaimers* pelo usuário.
             *
             * Recebe como parâmetro um objeto conforme a interface `PoDisclaimerGroupRemoveAction`.
             */
            this.remove = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Função que será disparada quando todos os *disclaimers* forem removidos da lista de *disclaimers* pelo usuário,
             * utilizando o botão "remover todos".
             *
             * Recebe como parâmetro uma lista contendo todos os `disclaimers` removidos.
             */
            this.removeAll = new i0.EventEmitter();
            this._disclaimers = [];
            this._hideRemoveAll = false;
            this.previousDisclaimers = [];
            var language = languageService.getShortLanguage();
            this.differ = differs.find([]).create(null);
            this.literals = Object.assign(Object.assign({}, poDisclaimerGroupLiteralsDefault[poLocaleDefault]), poDisclaimerGroupLiteralsDefault[language]);
        }
        Object.defineProperty(PoDisclaimerGroupBaseComponent.prototype, "disclaimers", {
            get: function () {
                return this._disclaimers;
            },
            /** Lista de *disclaimers*. */
            /**
             * @description
             *
             * Lista de *disclaimers*.
             *
             * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `PoDisclaimer`.
             *
             * Exemplo adicionando um *disclaimer* no array:
             *
             * ```
             * this.disclaimers = [...this.disclaimers, disclaimer];
             * ```
             *
             * ou
             *
             * ```
             * this.disclaimers = this.disclaimers.concat(disclaimer);
             * ```
             */
            set: function (value) {
                this.previousDisclaimers = __spreadArray([], __read(this.disclaimers));
                this._disclaimers = this.checkDisclaimers(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDisclaimerGroupBaseComponent.prototype, "hideRemoveAll", {
            get: function () {
                return this._hideRemoveAll;
            },
            /**
             * @optional
             *
             * @description
             *
             * Oculta o botão para remover todos os *disclaimers* do grupo.
             *
             * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
             *
             * @default `false`
             */
            set: function (value) {
                this._hideRemoveAll = value === '' ? true : convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        PoDisclaimerGroupBaseComponent.prototype.ngDoCheck = function () {
            this.checkChanges();
        };
        PoDisclaimerGroupBaseComponent.prototype.onCloseAction = function (disclaimer) {
            this.removeDisclaimer(disclaimer);
            this.emitChangeDisclaimers();
            this.remove.emit({
                removedDisclaimer: Object.assign({}, disclaimer),
                currentDisclaimers: __spreadArray([], __read(this.disclaimers))
            });
        };
        PoDisclaimerGroupBaseComponent.prototype.isRemoveAll = function () {
            return !this.hideRemoveAll && this.disclaimers.filter(function (c) { return !c.hideClose; }).length > 1;
        };
        PoDisclaimerGroupBaseComponent.prototype.onKeyPress = function (event) {
            if (isKeyCodeEnter(event)) {
                this.removeAllItems();
            }
        };
        PoDisclaimerGroupBaseComponent.prototype.removeAllItems = function () {
            var _this = this;
            var removeItems = [];
            this.disclaimers.forEach(function (disclaimer) {
                if (!disclaimer.hideClose) {
                    removeItems.push(disclaimer);
                }
            });
            removeItems.forEach(function (disclaimer) { return _this.removeDisclaimer(disclaimer); });
            this.emitChangeDisclaimers();
            this.removeAll.emit(__spreadArray([], __read(removeItems)));
        };
        PoDisclaimerGroupBaseComponent.prototype.removeDisclaimer = function (disclaimer) {
            var itemIndex = this.disclaimers.findIndex(function (d) { return d['$id'] === disclaimer['$id']; });
            this.disclaimers.splice(itemIndex, 1);
        };
        PoDisclaimerGroupBaseComponent.prototype.checkChanges = function () {
            if (this.differ) {
                var changes = this.differ.diff(this.disclaimers);
                if (changes && this.disclaimersAreChanged(this.disclaimers)) {
                    this.emitChangeDisclaimers();
                }
            }
        };
        PoDisclaimerGroupBaseComponent.prototype.checkDisclaimers = function (disclaimers) {
            if (Array.isArray(disclaimers)) {
                for (var i = 0; i < disclaimers.length; i++) {
                    var disclaimer = disclaimers[i];
                    if (disclaimer.value || disclaimer.value === 0 || disclaimer.value === false) {
                        disclaimer['$id'] = uuid();
                    }
                    else {
                        disclaimers.splice(i, 1);
                        i--;
                    }
                }
                return disclaimers;
            }
            return [];
        };
        PoDisclaimerGroupBaseComponent.prototype.disclaimersAreChanged = function (disclaimers) {
            var _this = this;
            var currentValues = disclaimers;
            if (currentValues.length !== this.previousDisclaimers.length) {
                return true;
            }
            return currentValues.some(function (disclaimer, index) { return disclaimer.value !== _this.previousDisclaimers[index].value ||
                disclaimer.property !== _this.previousDisclaimers[index].property; });
        };
        PoDisclaimerGroupBaseComponent.prototype.emitChangeDisclaimers = function () {
            var _this = this;
            setTimeout(function () {
                _this.change.emit(_this.disclaimers);
            });
            this.previousDisclaimers = __spreadArray([], __read(this._disclaimers));
        };
        return PoDisclaimerGroupBaseComponent;
    }());
    PoDisclaimerGroupBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoDisclaimerGroupBaseComponent.ctorParameters = function () { return [
        { type: i0.IterableDiffers },
        { type: PoLanguageService }
    ]; };
    PoDisclaimerGroupBaseComponent.propDecorators = {
        title: [{ type: i0.Input, args: ['p-title',] }],
        change: [{ type: i0.Output, args: ['p-change',] }],
        remove: [{ type: i0.Output, args: ['p-remove',] }],
        removeAll: [{ type: i0.Output, args: ['p-remove-all',] }],
        disclaimers: [{ type: i0.Input, args: ['p-disclaimers',] }],
        hideRemoveAll: [{ type: i0.Input, args: ['p-hide-remove-all',] }]
    };

    /**
     * @docsExtends PoDisclaimerGroupBaseComponent
     *
     * @example
     *
     * <example name="po-disclaimer-group-basic" title="PO Disclaimer Group Basic">
     *   <file name="sample-po-disclaimer-group-basic/sample-po-disclaimer-group-basic.component.html"> </file>
     *   <file name="sample-po-disclaimer-group-basic/sample-po-disclaimer-group-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-disclaimer-group-labs" title="PO Disclaimer Group Labs">
     *   <file name="sample-po-disclaimer-group-labs/sample-po-disclaimer-group-labs.component.html"> </file>
     *   <file name="sample-po-disclaimer-group-labs/sample-po-disclaimer-group-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-disclaimer-group-sw-planets" title="PO Disclaimer Group - Star Wars Planets">
     *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.component.html"> </file>
     *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.component.ts"> </file>
     *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.service.ts"> </file>
     * </example>
     *
     */
    var PoDisclaimerGroupComponent = /** @class */ (function (_super) {
        __extends(PoDisclaimerGroupComponent, _super);
        function PoDisclaimerGroupComponent(differs, languageService) {
            return _super.call(this, differs, languageService) || this;
        }
        return PoDisclaimerGroupComponent;
    }(PoDisclaimerGroupBaseComponent));
    PoDisclaimerGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-disclaimer-group',
                    template: "<div class=\"po-disclaimer-group\" *ngIf=\"disclaimers.length > 0\">\r\n  <div class=\"po-disclaimer-group-title\">{{ title }}</div>\r\n\r\n  <po-disclaimer-remove\r\n    *ngIf=\"isRemoveAll()\"\r\n    class=\"po-disclaimer-group-disclaimer-align\"\r\n    [p-label]=\"literals.removeAll\"\r\n    (keydown)=\"onKeyPress($event)\"\r\n    (p-remove-all-action)=\"removeAllItems()\"\r\n  >\r\n  </po-disclaimer-remove>\r\n\r\n  <po-disclaimer\r\n    *ngFor=\"let disclaimer of disclaimers\"\r\n    class=\"po-disclaimer-group-disclaimer-align\"\r\n    [p-hide-close]=\"disclaimer.hideClose\"\r\n    [p-label]=\"disclaimer.label\"\r\n    [p-property]=\"disclaimer.property\"\r\n    [p-value]=\"disclaimer.value\"\r\n    (p-close-action)=\"onCloseAction(disclaimer)\"\r\n  >\r\n  </po-disclaimer>\r\n</div>\r\n"
                },] }
    ];
    PoDisclaimerGroupComponent.ctorParameters = function () { return [
        { type: i0.IterableDiffers },
        { type: PoLanguageService }
    ]; };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Este é um componente interno utilizado pelo po-disclaimer-group, se comporta como um botão e recebe uma ação para remover todos os
     * po-disclaimers do grupo.
     */
    var PoDisclaimerRemoveComponent = /** @class */ (function () {
        function PoDisclaimerRemoveComponent() {
            /** Ação para remover todos.  */
            this.removeAllAction = new i0.EventEmitter();
        }
        // Emite a ação de remover todos.
        PoDisclaimerRemoveComponent.prototype.removeAction = function () {
            this.removeAllAction.emit();
        };
        return PoDisclaimerRemoveComponent;
    }());
    PoDisclaimerRemoveComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-disclaimer-remove',
                    template: "<po-disclaimer\r\n  class=\"po-clickable\"\r\n  tabindex=\"0\"\r\n  p-hide-close=\"true\"\r\n  p-type=\"danger\"\r\n  [p-label]=\"label\"\r\n  (click)=\"removeAction()\"\r\n>\r\n</po-disclaimer>\r\n"
                },] }
    ];
    PoDisclaimerRemoveComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['p-label',] }],
        removeAllAction: [{ type: i0.Output, args: ['p-remove-all-action',] }]
    };

    /**
     * @description
     *
     * Módulo do componente po-disclaimer-group.
     */
    var PoDisclaimerGroupModule = /** @class */ (function () {
        function PoDisclaimerGroupModule() {
        }
        return PoDisclaimerGroupModule;
    }());
    PoDisclaimerGroupModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, PoDisclaimerModule],
                    declarations: [PoDisclaimerGroupComponent, PoDisclaimerRemoveComponent],
                    exports: [PoDisclaimerGroupComponent]
                },] }
    ];

    /**
     * @description
     *
     * Este componente apresenta uma linha demarcadora de blocos e pode conter um *label*. Seu uso é indicado para definição
     * e organização de informações em uma tela e sua característica é semelhante à tag `<hr>`.
     */
    var PoDividerBaseComponent = /** @class */ (function () {
        function PoDividerBaseComponent() {
        }
        return PoDividerBaseComponent;
    }());
    PoDividerBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoDividerBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['p-label',] }]
    };

    /**
     * @docsExtends PoDividerBaseComponent
     *
     * @example
     *
     * <example name="po-divider-basic" title="PO Divider Basic" >
     *  <file name="sample-po-divider-basic/sample-po-divider-basic.component.html"> </file>
     *  <file name="sample-po-divider-basic/sample-po-divider-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-divider-labs" title="PO Divider Labs" >
     *  <file name="sample-po-divider-labs/sample-po-divider-labs.component.html"> </file>
     *  <file name="sample-po-divider-labs/sample-po-divider-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-divider-user-detail" title="PO Divider - User Detail" >
     *  <file name="sample-po-divider-user-detail/sample-po-divider-user-detail.component.html"> </file>
     *  <file name="sample-po-divider-user-detail/sample-po-divider-user-detail.component.ts"> </file>
     * </example>
     */
    var PoDividerComponent = /** @class */ (function (_super) {
        __extends(PoDividerComponent, _super);
        function PoDividerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PoDividerComponent;
    }(PoDividerBaseComponent));
    PoDividerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-divider',
                    template: "<div class=\"po-divider\">\r\n  <div *ngIf=\"label\" class=\"po-divider-label\">{{ label }}</div>\r\n</div>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];

    /**
     * @description
     *
     * Módulo do componente po-divider.
     */
    var PoDividerModule = /** @class */ (function () {
        function PoDividerModule() {
        }
        return PoDividerModule;
    }());
    PoDividerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [PoDividerComponent],
                    exports: [PoDividerComponent]
                },] }
    ];

    var poPopupDefaultPosition = 'bottom-left';
    /**
     * @description
     *
     * O componente `po-popup` é um container pequeno recomendado para ações de navegação:
     * Ele abre sobreposto aos outros componentes.
     *
     * É possível escolher as posições do `po-popup` em relação ao componente alvo, para isto veja a propriedade `p-position`.
     *
     * Também é possível informar um _template_ _header_ para o `po-popup`, que será exibido acima das ações.
     * Para funcionar corretamente é preciso adicionar a propriedade `p-popup-header-template` no elemento que servirá de template, por exemplo:
     *
     * ```
     * <po-popup [p-target]="target">
     *   <div p-popup-header-template>
     *     <div>
     *       Dev PO
     *     </div>
     *     <div>
     *       dev.po@po-ui.com.br
     *     </div>
     *   </div>
     * </po-popup >
     * ```
     */
    var PoPopupBaseComponent = /** @class */ (function () {
        function PoPopupBaseComponent() {
            this.arrowDirection = 'top-right';
            this.showPopup = false;
            this._hideArrow = false;
            this._isCornerAlign = false;
            this._position = poPopupDefaultPosition;
        }
        Object.defineProperty(PoPopupBaseComponent.prototype, "actions", {
            get: function () {
                return this._actions;
            },
            /** Lista de ações que serão exibidas no componente. */
            set: function (value) {
                this._actions = Array.isArray(value) ? value : [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoPopupBaseComponent.prototype, "hideArrow", {
            get: function () {
                return this._hideArrow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Oculta a seta do componente *popup*.
             *
             * @default `false`
             */
            set: function (value) {
                this._hideArrow = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoPopupBaseComponent.prototype, "isCornerAlign", {
            get: function () {
                return this._isCornerAlign;
            },
            // Define se o `po-popup` será alinhado pelos cantos do elemento target.
            set: function (value) {
                this._isCornerAlign = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoPopupBaseComponent.prototype, "position", {
            get: function () {
                return this._position;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a posição inicial que o `po-popup` abrirá em relação ao componente alvo. Sugere-se que seja
             * usada a orientação `bottom-left` (abaixo e a esquerda), porém o mesmo é flexível e será rotacionado
             * automaticamente para se adequar a tela, caso necessário.
             *
             * > Caso seja definido um `p-custom-positions` o componente irá abrir na posição definida na propriedade `p-position`
             * e caso não caiba na posição inicial ele irá rotacionar seguindo a ordem de posições definidas no `p-custom-positions`.
             *
             * Posições válidas:
             * - `right`: Posiciona o po-popup no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o po-popup abaixo do componente alvo.
             * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.
             * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o po-popup acima do componente alvo.
             * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.
             * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.
             *
             * @default `bottom-left`
             */
            set: function (value) {
                this._position = PO_CONTROL_POSITIONS.includes(value) ? value : poPopupDefaultPosition;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoPopupBaseComponent.prototype, "customPositions", {
            get: function () {
                return this._customPositions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define as posições e a sequência que o `po-popup` poderá rotacionar. A sequência será definida pela ordem passada
             * no *array*. Caso não seja definido, o `po-popup` irá rotacionar em todas as posições válidas.
             *
             * > O componente sempre irá abrir na posição definida no `p-position` e caso não caiba na posição definida o mesmo
             * irá rotacionar seguindo a ordem definida pelo `p-custom-position`.
             *
             * Posições válidas:
             * - `right`: Posiciona o po-popup no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o po-popup abaixo do componente alvo.
             * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.
             * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o po-popup acima do componente alvo.
             * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.
             * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.
             */
            set: function (value) {
                this._customPositions = Array.isArray(value) ? value : [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoPopupBaseComponent.prototype, "target", {
            get: function () {
                return this._target;
            },
            /**
             * @description
             *
             * Para utilizar o `po-popup` deve-se colocar uma variável local no componente que disparará o evento
             * de abertura no mesmo e com isso, invocará a função `toggle`, por exemplo:
             *
             * ```
             * <span #icon class="po-icon po-icon-credit-payment" (click)="popup.toggle()">
             *   Credit Actions
             * </span>
             *
             * <po-popup #popup
             *   [p-actions]="actions"
             *   [p-target]="icon">
             * </po-popup>
             * ```
             *
             * Caso o elemento alvo for um componente, será preciso obter o `ElementRef` do mesmo e passá-lo à propriedade, por exemplo:
             *
             * ```
             * // component.html
             *
             * <po-button #poButton
             *   p-label="Open Popover"
             *   (p-click)="popup.toggle()">
             * </po-button>
             *
             * <po-popup #popup
             *   [p-actions]="actions"
             *   [p-target]="poButtonRef">
             * </po-popup>
             *
             * // component.ts
             *
             * @ViewChild('poButton', { read: ElementRef }) poButtonRef: ElementRef;
             * ```
             */
            set: function (value) {
                this._target = value instanceof i0.ElementRef ? value.nativeElement : value;
            },
            enumerable: false,
            configurable: true
        });
        return PoPopupBaseComponent;
    }());
    PoPopupBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoPopupBaseComponent.propDecorators = {
        actions: [{ type: i0.Input, args: ['p-actions',] }],
        hideArrow: [{ type: i0.Input, args: ['p-hide-arrow',] }],
        isCornerAlign: [{ type: i0.Input, args: ['p-is-corner-align',] }],
        position: [{ type: i0.Input, args: ['p-position',] }],
        customPositions: [{ type: i0.Input, args: ['p-custom-positions',] }],
        target: [{ type: i0.Input, args: ['p-target',] }]
    };

    /**
     *
     * @docsExtends PoPopupBaseComponent
     *
     * @example
     *
     * <example name="po-popup-basic" title="PO Popup - Basic">
     *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.html"> </file>
     *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-popup-labs" title="PO Popup - Labs">
     *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.html"> </file>
     *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-popup-email" title="PO Popup Email">
     *   <file name="sample-po-popup-email/sample-po-popup-email.component.html"> </file>
     *   <file name="sample-po-popup-email/sample-po-popup-email.component.ts"> </file>
     * </example>
     *
     */
    var PoPopupComponent = /** @class */ (function (_super) {
        __extends(PoPopupComponent, _super);
        function PoPopupComponent(viewContainerRef, renderer, router, poControlPosition, changeDetector) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.router = router;
            _this.poControlPosition = poControlPosition;
            _this.changeDetector = changeDetector;
            _this.onScroll = function (_a) {
                var target = _a.target;
                if (_this.showPopup && target.className !== 'po-popup-container') {
                    _this.close();
                }
            };
            return _this;
        }
        /**
         * Fecha o componente *popup*.
         *
         * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
         */
        PoPopupComponent.prototype.close = function () {
            this.removeListeners();
            this.showPopup = false;
        };
        PoPopupComponent.prototype.onActionClick = function (popupAction) {
            var actionNoDisabled = popupAction && !this.returnBooleanValue(popupAction, 'disabled');
            if (popupAction && popupAction.action && actionNoDisabled) {
                this.close();
                popupAction.action(this.param || popupAction);
            }
            if (popupAction && popupAction.url && actionNoDisabled) {
                this.close();
                return this.openUrl(popupAction.url);
            }
        };
        /**
         * Abre o componente *popup*.
         *
         * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
         */
        PoPopupComponent.prototype.open = function (param) {
            this.oldTarget = this.target;
            this.param = param;
            this.showPopup = true;
            this.changeDetector.detectChanges();
            this.validateInitialContent();
        };
        PoPopupComponent.prototype.returnBooleanValue = function (popupAction, property) {
            return isTypeof(popupAction[property], 'function')
                ? popupAction[property](this.param || popupAction)
                : popupAction[property];
        };
        /**
         * Responsável por abrir e fechar o *popup*.
         *
         * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
         *
         * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
         */
        PoPopupComponent.prototype.toggle = function (param) {
            this.showPopup && this.oldTarget === this.target ? this.close() : this.open(param);
        };
        PoPopupComponent.prototype.clickedOutDisabledItem = function (event) {
            var containsItemDisabled = this.elementContains(event.target, 'po-popup-item-disabled') ||
                this.elementContains(event.target.parentElement, 'po-popup-item-disabled');
            return !containsItemDisabled;
        };
        PoPopupComponent.prototype.clickedOutHeaderTemplate = function (event) {
            var popupHeaderTemplate = this.popupRef && this.popupRef.nativeElement.querySelector('[p-popup-header-template]');
            return !(popupHeaderTemplate && popupHeaderTemplate.contains(event.target));
        };
        PoPopupComponent.prototype.clickedOutTarget = function (event) {
            return this.target && !this.target.contains(event.target);
        };
        PoPopupComponent.prototype.closePopupOnClickout = function (event) {
            if (this.clickedOutTarget(event) && this.clickedOutDisabledItem(event) && this.clickedOutHeaderTemplate(event)) {
                this.close();
            }
        };
        PoPopupComponent.prototype.elementContains = function (element, className) {
            return element && element.classList.contains(className);
        };
        PoPopupComponent.prototype.hasContentToShow = function () {
            return !!(this.popupRef.nativeElement && this.popupRef.nativeElement.clientHeight);
        };
        PoPopupComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function () {
                _this.close();
            });
            this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
                _this.closePopupOnClickout(event);
            });
            window.addEventListener('scroll', this.onScroll, true);
        };
        PoPopupComponent.prototype.openUrl = function (url) {
            if (isExternalLink(url)) {
                return openExternalLink(url);
            }
            if (url) {
                return this.router.navigate([url]);
            }
        };
        PoPopupComponent.prototype.removeListeners = function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
            if (this.resizeListener) {
                this.resizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        PoPopupComponent.prototype.setPosition = function () {
            this.poControlPosition.setElements(this.popupRef.nativeElement, 8, this.target, this.customPositions, false, this.isCornerAlign);
            this.poControlPosition.adjustPosition(this.position);
            this.arrowDirection = this.poControlPosition.getArrowDirection();
        };
        PoPopupComponent.prototype.validateInitialContent = function () {
            if (this.hasContentToShow()) {
                this.setPosition();
                this.initializeListeners();
            }
            else {
                this.close();
            }
        };
        return PoPopupComponent;
    }(PoPopupBaseComponent));
    PoPopupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-popup',
                    template: "<div #popupRef class=\"po-popup\" *ngIf=\"showPopup\">\r\n  <div *ngIf=\"!hideArrow\" class=\"po-popup-arrow po-arrow-{{ arrowDirection }}\"></div>\r\n\r\n  <ng-content select=\"[p-popup-header-template]\"></ng-content>\r\n\r\n  <div class=\"po-popup-container\">\r\n    <ng-container *ngFor=\"let action of actions; let actionIndex = index\">\r\n      <div\r\n        *ngIf=\"action.visible !== false\"\r\n        [class.po-popup-item-default]=\"action.type !== 'danger'\"\r\n        [class.po-popup-item-danger]=\"action.type === 'danger'\"\r\n        [class.po-popup-item-disabled]=\"returnBooleanValue(action, 'disabled')\"\r\n        [class.po-popup-item-separator]=\"action.separator && actionIndex !== 0\"\r\n        [class.po-popup-item-selected]=\"action.selected\"\r\n        (click)=\"onActionClick(action)\"\r\n      >\r\n        <po-icon *ngIf=\"action.icon\" class=\"po-popup-icon-item po-icon\" [p-icon]=\"action.icon\"></po-icon>\r\n        {{ action.label }}\r\n      </div>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n",
                    providers: [PoControlPositionService]
                },] }
    ];
    PoPopupComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: i0.Renderer2 },
        { type: router.Router },
        { type: PoControlPositionService },
        { type: i0.ChangeDetectorRef }
    ]; };
    PoPopupComponent.propDecorators = {
        popupRef: [{ type: i0.ViewChild, args: ['popupRef', { read: i0.ElementRef },] }]
    };

    /**
     * @description
     *
     * Módulo do componente po-popup.
     */
    var PoPopupModule = /** @class */ (function () {
        function PoPopupModule() {
        }
        return PoPopupModule;
    }());
    PoPopupModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, PoIconModule],
                    declarations: [PoPopupComponent],
                    exports: [PoPopupComponent],
                    providers: [],
                    schemas: []
                },] }
    ];

    /**
     * @description
     *
     * O componente `po-dropdown` pode ser utilizado como um agrupador de ações e / ou opções.
     *
     * > Caso não haja configuração de rotas em sua aplicação, se faz necessário importar o `RouterModule`
     * no módulo principal para o correto funcionamento deste componente:
     *
     * ```
     * import { RouterModule } from '@angular/router';
     *
     * @NgModule({
     *   imports: [
     *     ...
     *     RouterModule.forRoot([]),
     *     PoModule
     *   ],
     *   declarations: [
     *     AppComponent
     *   ],
     *   exports: [],
     *   providers: [],
     *   bootstrap: [
     *     AppComponent
     *   ]
     * })
     * export class AppModule { }
     * ```
     * > Para maiores dúvidas referente à configuração de rotas, acesse em nosso portal /Guias /Começando
     * [/Configurando as rotas do po-menu](/guides/getting-started).
     */
    var PoDropdownBaseComponent = /** @class */ (function () {
        function PoDropdownBaseComponent() {
            this.icon = 'po-icon-arrow-down';
            this.open = false;
            this._disabled = false;
        }
        Object.defineProperty(PoDropdownBaseComponent.prototype, "actions", {
            get: function () {
                return this._actions;
            },
            /** Lista de ações que serão exibidas no componente. */
            set: function (value) {
                this._actions = Array.isArray(value) ? value : [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDropdownBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o campo.
             *
             * @default `false`
             */
            set: function (value) {
                this._disabled = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        return PoDropdownBaseComponent;
    }());
    PoDropdownBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoDropdownBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['p-label',] }],
        actions: [{ type: i0.Input, args: ['p-actions',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }]
    };

    /**
     * @docsExtends PoDropdownBaseComponent
     *
     * @example
     *
     * <example name="po-dropdown-basic" title="PO Dropdown Basic" >
     *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.html"> </file>
     *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.ts"> </file>
     *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="po-dropdown-labs" title="PO Dropdown Labs" >
     *  <file name="sample-po-dropdown-labs/sample-po-dropdown-labs.component.html"> </file>
     *  <file name="sample-po-dropdown-labs/sample-po-dropdown-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-dropdown-social-network" title="PO Dropdown - Social Network" >
     *  <file name="sample-po-dropdown-social-network/sample-po-dropdown-social-network.component.html"> </file>
     *  <file name="sample-po-dropdown-social-network/sample-po-dropdown-social-network.component.ts"> </file>
     * </example>
     */
    var PoDropdownComponent = /** @class */ (function (_super) {
        __extends(PoDropdownComponent, _super);
        function PoDropdownComponent(renderer) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.onScroll = function (_a) {
                var target = _a.target;
                if (_this.open && target.className !== 'po-popup-container') {
                    _this.hideDropdown();
                }
            };
            return _this;
        }
        PoDropdownComponent.prototype.onKeyDown = function (event) {
            if (isKeyCodeEnter(event)) {
                this.toggleDropdown();
            }
        };
        PoDropdownComponent.prototype.toggleDropdown = function () {
            this.dropdownRef && !this.open && !this.disabled ? this.showDropdown() : this.hideDropdown();
        };
        PoDropdownComponent.prototype.checkClickArea = function (event) {
            return this.dropdownRef && this.dropdownRef.nativeElement.contains(event.target);
        };
        PoDropdownComponent.prototype.hideDropdown = function () {
            this.icon = 'po-icon-arrow-down';
            this.removeListeners();
            this.popupRef.close();
            this.open = false;
        };
        PoDropdownComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
                _this.wasClickedOnDropdown(event);
            });
            this.resizeListener = this.renderer.listen('window', 'resize', function () {
                _this.hideDropdown();
            });
            window.addEventListener('scroll', this.onScroll, true);
        };
        PoDropdownComponent.prototype.removeListeners = function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
            if (this.resizeListener) {
                this.resizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        PoDropdownComponent.prototype.showDropdown = function () {
            this.icon = 'po-icon-arrow-up';
            this.initializeListeners();
            this.popupRef.open();
            this.open = true;
        };
        PoDropdownComponent.prototype.wasClickedOnDropdown = function (event) {
            var clickedOnDropdown = this.checkClickArea(event);
            if (!clickedOnDropdown) {
                this.hideDropdown();
            }
        };
        return PoDropdownComponent;
    }(PoDropdownBaseComponent));
    PoDropdownComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-dropdown',
                    template: "<div\r\n  #dropdownRef\r\n  class=\"po-dropdown\"\r\n  tabindex=\"{{ disabled ? -1 : 0 }}\"\r\n  (click)=\"toggleDropdown()\"\r\n  (keydown)=\"onKeyDown($event)\"\r\n>\r\n  <div class=\"po-dropdown-button\" [ngClass]=\"{ 'po-dropdown-button-disabled': disabled }\">\r\n    {{ label }}\r\n    <div class=\"po-dropdown-icon po-icon {{ icon }}\"></div>\r\n  </div>\r\n\r\n  <po-popup\r\n    #popupRef\r\n    p-hide-arrow\r\n    p-is-corner-align\r\n    p-position=\"bottom-left\"\r\n    [p-actions]=\"actions\"\r\n    [p-custom-positions]=\"['bottom-left', 'top-left']\"\r\n    [p-target]=\"dropdownRef\"\r\n  >\r\n  </po-popup>\r\n</div>\r\n"
                },] }
    ];
    PoDropdownComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 }
    ]; };
    PoDropdownComponent.propDecorators = {
        dropdownRef: [{ type: i0.ViewChild, args: ['dropdownRef', { read: i0.ElementRef, static: true },] }],
        popupRef: [{ type: i0.ViewChild, args: ['popupRef',] }]
    };

    /**
     * @description
     * Módulo do componente po-dropdown.
     */
    var PoDropdownModule = /** @class */ (function () {
        function PoDropdownModule() {
        }
        return PoDropdownModule;
    }());
    PoDropdownModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, PoPopupModule],
                    declarations: [PoDropdownComponent],
                    exports: [PoDropdownComponent]
                },] }
    ];

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente de uso interno, responsável por gerar uma margem inferior nos componentes que utilizam o po-field-container.
     * Essa margem inferior pode conter uma mensagem de erro.
     */
    var PoFieldContainerBottomComponent = /** @class */ (function () {
        function PoFieldContainerBottomComponent() {
            /**
             * Mensagem que será apresentada quando o pattern ou a máscara não for satisfeita.
             * Obs: Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
             */
            this.errorPattern = '';
        }
        return PoFieldContainerBottomComponent;
    }());
    PoFieldContainerBottomComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-field-container-bottom',
                    template: "<div class=\"po-field-container-bottom\">\r\n  <span *ngIf=\"errorPattern\" class=\"po-field-container-bottom-text-error\">\r\n    <span class=\"po-icon po-icon-warning po-field-container-icon-error\"></span>\r\n    {{ errorPattern }}\r\n  </span>\r\n</div>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoFieldContainerBottomComponent.propDecorators = {
        errorPattern: [{ type: i0.Input, args: ['p-error-pattern',] }]
    };

    var poFieldContainerLiterals = {
        en: {
            optional: '(Optional)'
        },
        es: {
            optional: '(Opcional)'
        },
        pt: {
            optional: '(Opcional)'
        },
        ru: {
            optional: '(Пожеланию)'
        }
    };

    /**
     * @docsPrivate
     *
     * Componente de uso interno, responsável por atribuir uma label para o campo
     */
    var PoFieldContainerComponent = /** @class */ (function () {
        function PoFieldContainerComponent(languageService) {
            this._optional = false;
            var language = languageService.getShortLanguage();
            this.literals = Object.assign({}, poFieldContainerLiterals[language]);
        }
        Object.defineProperty(PoFieldContainerComponent.prototype, "optional", {
            get: function () {
                return this._optional;
            },
            /** Indica se o campo será opcional. */
            set: function (value) {
                this._optional = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        return PoFieldContainerComponent;
    }());
    PoFieldContainerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-field-container',
                    template: "<div class=\"po-field-container\">\r\n  <div class=\"po-field-container-title\">\r\n    <span class=\"po-field-title\">{{ label }}</span>\r\n    <span class=\"po-field-optional\" *ngIf=\"optional && (label || help)\">{{ literals.optional }}</span>\r\n  </div>\r\n\r\n  <div class=\"po-field-help\" *ngIf=\"help\">{{ help }}</div>\r\n\r\n  <ng-content></ng-content>\r\n</div>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoFieldContainerComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoFieldContainerComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['p-label',] }],
        help: [{ type: i0.Input, args: ['p-help',] }],
        optional: [{ type: i0.Input, args: ['p-optional',] }]
    };

    /**
     * @description
     *
     * Módulo do componente `po-field-container`.
     */
    var PoFieldContainerModule = /** @class */ (function () {
        function PoFieldContainerModule() {
        }
        return PoFieldContainerModule;
    }());
    PoFieldContainerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    exports: [PoFieldContainerBottomComponent, PoFieldContainerComponent],
                    declarations: [PoFieldContainerBottomComponent, PoFieldContainerComponent]
                },] }
    ];

    function requiredFailed(required, disabled, value) {
        var valid = (typeof value === 'string' && value) ||
            (typeof value === 'object' && value && value.length) ||
            (typeof value === 'number' && (value || value === 0)) ||
            (typeof value === 'boolean' && value);
        return required && !disabled && !valid;
    }
    function maxlengpoailed(maxlength, value) {
        var validMaxlength = maxlength || maxlength === 0;
        var validValue = (value || value === 0) && value.toString();
        return validMaxlength && validValue && validValue.length > Number(maxlength);
    }
    function minlengpoailed(minlength, value) {
        var validMinlength = minlength || minlength === 0;
        var validValue = (value || value === 0) && value.toString();
        return validMinlength && validValue && validValue.length < Number(minlength);
    }
    function patternFailed(pattern, value) {
        var reg;
        try {
            reg = new RegExp(pattern);
        }
        catch (e) {
            return true;
        }
        return pattern && value && !reg.test(value);
    }
    function minFailed(min, value) {
        var validValue = value || value === 0;
        var validMin = min || min === 0;
        return validValue && validMin && value < min;
    }
    function maxFailed(max, value) {
        var validValue = value || value === 0;
        var validMax = max || max === 0;
        return validValue && validMax && value > max;
    }
    function dateFailed(value) {
        return value && isNaN(Date.parse(value));
    }

    var poCheckboxGroupColumnsDefaultLength = 6;
    var poCheckboxGroupColumnsTotalLength = 12;
    /**
     * @description
     *
     * O componente `po-checkbox-group` exibe uma lista de múltipla escolha onde o usuário pode marcar e desmarcar,
     * utilizando a tecla de espaço ou o clique do mouse, várias opções.
     *
     * > Para seleção única, utilize o [**PO Radio Group**](/documentation/po-radio-group).
     *
     * Por padrão, o po-checkbox-group retorna um array com os valores dos itens selecionados para o model.
     *
     * ```
     * favorites = ['PO', 'Angular'];
     * ```
     *
     * Na maioria das situações, o array com os objetos setados já atende as necessidades mas, caso o desenvolvedor
     * tenha necessidade de usar um valor indeterminado (`null`), ou seja, nem marcado (`true`) e nem desmarcado (`false`),
     * deve setar a propriedade `p-indeterminate` como `true`.
     *
     * Nesse caso, o po-checkbox-group vai retornar um objeto com todas as opções disponíveis e seus valores.
     *
     * ```
     * favorites = {
     *  PO: true,
     *  Angular: true,
     *  VueJS: false,
     *  React: null // indeterminado
     * };
     * ```
     */
    var PoCheckboxGroupBaseComponent = /** @class */ (function () {
        function PoCheckboxGroupBaseComponent() {
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /**
             * @optional
             *
             * @description
             *
             * Função para atualizar o `ngModel` do componente, necessário quando não for utilizado dentro da tag form.
             *
             * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
             * two-way binding no componente deve se utilizar da seguinte forma:
             *
             * ```
             * <po-checkbox-group ... [ngModel]="checkboxgroupModel" (ngModelChange)="checkboxgroupModel = $event"> </po-checkbox-group>
             * ```
             *
             */
            this.ngModelChange = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao alterar valor do campo
             */
            this.change = new i0.EventEmitter();
            this.checkedOptions = {};
            this.checkedOptionsList = [];
            this.mdColumns = poCheckboxGroupColumnsDefaultLength;
            this._columns = poCheckboxGroupColumnsDefaultLength;
            this._disabled = false;
            this._indeterminate = false;
            this._required = false;
        }
        Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "columns", {
            get: function () {
                return this._columns;
            },
            /**
             * @optional
             *
             * @description
             *
             * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
             * - É possível exibir as opções entre `1` e `4` colunas.
             * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
             * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
             * o *grid system* será composto por `2` colunas.
             * - Para evitar a quebra de linha, prefira a utilização de `1` coluna para opções com textos grandes.
             *
             * @default `2`
             *
             */
            set: function (value) {
                var columns = convertToInt(value, poCheckboxGroupColumnsDefaultLength);
                this._columns = this.getGridSystemColumns(columns, 4);
                this.mdColumns = this.getGridSystemColumns(columns, 2);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita todos os itens do checkbox.
             *
             * @default `false`
             */
            set: function (value) {
                this._disabled = convertToBoolean(value);
                this.validateModel(this.checkIndeterminate());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "indeterminate", {
            get: function () {
                return this._indeterminate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
             * a propriedade `p-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
             *
             * Quando essa propriedade é setada como `true`, o *po-checkbox-group* passa a devolver um objeto completo para o
             * `ngModel`, diferente do array que contém apenas os valores selecionados.
             *
             * @default `false`
             */
            set: function (indeterminate) {
                this._indeterminate = convertToBoolean(indeterminate);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "options", {
            get: function () {
                return this._options;
            },
            /**
             * @optional
             *
             * @description
             * Lista de opções que serão exibidas
             * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoCheckboxGroupOption
             */
            set: function (value) {
                this._options = Array.isArray(value) ? value : [];
                this.removeDuplicatedOptions();
                this.setCheckboxGroupOptionsView(this.options);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define que o campo será obrigatório.
             *
             * @default `false`
             */
            set: function (required) {
                this._required = convertToBoolean(required);
                this.validateModel(this.checkIndeterminate());
            },
            enumerable: false,
            configurable: true
        });
        PoCheckboxGroupBaseComponent.prototype.changeValue = function () {
            var value = this.checkIndeterminate();
            if (this.propagateChange) {
                this.propagateChange(value);
            }
            else {
                this.ngModelChange.emit(value);
            }
            this.change.emit(value);
        };
        PoCheckboxGroupBaseComponent.prototype.checkIndeterminate = function () {
            return this.indeterminate ? this.checkedOptions : this.checkedOptionsList;
        };
        PoCheckboxGroupBaseComponent.prototype.checkOption = function (value) {
            if (!this._disabled && !value.disabled) {
                this.checkOptionModel(value);
                this.changeValue();
            }
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar os estados de habilitado via forms api
        PoCheckboxGroupBaseComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        PoCheckboxGroupBaseComponent.prototype.registerOnChange = function (fn) {
            this.propagateChange = fn;
        };
        PoCheckboxGroupBaseComponent.prototype.registerOnTouched = function (fn) { };
        PoCheckboxGroupBaseComponent.prototype.writeValue = function (optionsModel) {
            if (optionsModel && this.checkedOptions !== optionsModel) {
                this.generateCheckOptions(optionsModel);
            }
            else {
                this.checkedOptionsList = [];
                this.checkedOptions = {};
            }
        };
        PoCheckboxGroupBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoCheckboxGroupBaseComponent.prototype.validate = function (abstractControl) {
            if ((!this.indeterminate && requiredFailed(this.required, this.disabled, abstractControl.value)) ||
                this.isInvalidIndeterminate()) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
        };
        PoCheckboxGroupBaseComponent.prototype.validateModel = function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        PoCheckboxGroupBaseComponent.prototype.checkColumnsRange = function (columns, maxColumns) {
            var minColumns = 1;
            return columns >= minColumns && columns <= maxColumns;
        };
        PoCheckboxGroupBaseComponent.prototype.checkOptionModel = function (optionChecked) {
            this.checkedOptions[optionChecked.value] = !this.checkedOptions[optionChecked.value];
            if (!this.indeterminate && this.checkedOptionsList.includes(optionChecked.value)) {
                this.checkedOptionsList.splice(this.checkedOptionsList.indexOf(optionChecked.value), 1);
            }
            else if (!this.indeterminate) {
                this.checkedOptionsList.push(optionChecked.value);
            }
        };
        PoCheckboxGroupBaseComponent.prototype.generateCheckOptions = function (optionsModel) {
            var _this = this;
            this.checkedOptions = {};
            if (optionsModel instanceof Array) {
                this.checkedOptionsList = optionsModel;
                this.options.forEach(function (option) {
                    _this.checkedOptions[option.value] = optionsModel.includes(option.value);
                });
            }
            else {
                this.options.forEach(function (option) {
                    optionsModel[option.value] = optionsModel[option.value] === undefined ? false : optionsModel[option.value];
                    _this.checkedOptions = optionsModel;
                });
            }
        };
        PoCheckboxGroupBaseComponent.prototype.getGridSystemColumns = function (columns, maxColumns) {
            var gridSystemColumns = poCheckboxGroupColumnsTotalLength / columns;
            return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poCheckboxGroupColumnsDefaultLength;
        };
        PoCheckboxGroupBaseComponent.prototype.isInvalidIndeterminate = function () {
            if (this.indeterminate && this.required && this.checkedOptions) {
                return Object.values(this.checkedOptions).every(function (value) { return value === false; });
            }
            return false;
        };
        PoCheckboxGroupBaseComponent.prototype.removeDuplicatedOptions = function () {
            var _this = this;
            this.options.forEach(function (option, index) {
                var duplicatedIndex = _this.options.findIndex(function (optionFind) { return optionFind.value === option.value; }) === index;
                if (!duplicatedIndex) {
                    _this.options.splice(_this.options.indexOf(option), 1);
                }
            });
        };
        PoCheckboxGroupBaseComponent.prototype.setCheckboxGroupOptionsView = function (optionsList) {
            this.checkboxGroupOptionsView = optionsList.map(function (option) { return (Object.assign(Object.assign({}, option), { id: uuid() })); });
        };
        return PoCheckboxGroupBaseComponent;
    }());
    PoCheckboxGroupBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoCheckboxGroupBaseComponent.propDecorators = {
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        help: [{ type: i0.Input, args: ['p-help',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        optional: [{ type: i0.Input, args: ['p-optional',] }],
        ngModelChange: [{ type: i0.Output, args: ['ngModelChange',] }],
        change: [{ type: i0.Output, args: ['p-change',] }],
        columns: [{ type: i0.Input, args: ['p-columns',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        indeterminate: [{ type: i0.Input, args: ['p-indeterminate',] }],
        options: [{ type: i0.Input, args: ['p-options',] }],
        required: [{ type: i0.Input, args: ['p-required',] }]
    };
    __decorate([
        InputBoolean()
    ], PoCheckboxGroupBaseComponent.prototype, "autoFocus", void 0);

    /**
     * @docsExtends PoCheckboxGroupBaseComponent
     *
     * @example
     *
     * <example name="po-checkbox-group-basic" title="PO Checkbox Group Basic">
     *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.html"> </file>
     *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-checkbox-group-labs" title="PO Checkbox Group Labs">
     *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.html"> </file>
     *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-checkbox-group-password-policy" title="PO Checkbox Group – Security policy">
     *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.html"> </file>
     *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.ts"> </file>
     * </example>
     */
    var PoCheckboxGroupComponent = /** @class */ (function (_super) {
        __extends(PoCheckboxGroupComponent, _super);
        function PoCheckboxGroupComponent(changeDetector) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            return _this;
        }
        PoCheckboxGroupComponent.prototype.ngAfterViewChecked = function () {
            this.changeDetector.detectChanges();
        };
        PoCheckboxGroupComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoCheckboxGroupComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoCheckboxGroupComponent, { static: true }) checkbox: PoCheckboxGroupComponent;
         *
         * focusCheckbox() {
         *   this.checkbox.focus();
         * }
         * ```
         */
        PoCheckboxGroupComponent.prototype.focus = function () {
            var _this = this;
            if (this.checkboxLabels && !this.disabled) {
                var checkboxLabel = this.checkboxLabels.find(function (_, index) { return !_this.options[index].disabled; });
                if (checkboxLabel) {
                    checkboxLabel.nativeElement.focus();
                }
            }
        };
        PoCheckboxGroupComponent.prototype.onKeyDown = function (event, option) {
            var spaceBar = 32;
            if (event.which === spaceBar || event.keyCode === spaceBar) {
                this.checkOption(option);
                event.preventDefault();
            }
        };
        PoCheckboxGroupComponent.prototype.trackByFn = function (index) {
            return index;
        };
        return PoCheckboxGroupComponent;
    }(PoCheckboxGroupBaseComponent));
    PoCheckboxGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-checkbox-group',
                    template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content po-checkbox-group-content\">\r\n    <div class=\"po-row po-pt-1 po-pb-1\">\r\n      <div\r\n        *ngFor=\"let option of checkboxGroupOptionsView; trackBy: trackByFn\"\r\n        class=\"po-checkbox-group-item po-md-{{ mdColumns }} po-lg-{{ columns }}\"\r\n        [class.po-checkbox-group-item-disabled]=\"option.disabled || disabled\"\r\n      >\r\n        <input\r\n          class=\"po-input po-checkbox-group-input\"\r\n          type=\"checkbox\"\r\n          [class.po-checkbox-group-input-checked]=\"checkedOptions[option.value]\"\r\n          [class.po-checkbox-group-input-indeterminate]=\"checkedOptions[option.value] === null\"\r\n          [checked]=\"option.value\"\r\n          [disabled]=\"option.disabled || disabled\"\r\n          [id]=\"option.id\"\r\n          [required]=\"required\"\r\n          [value]=\"option.value\"\r\n        />\r\n\r\n        <label\r\n          #checkboxLabel\r\n          class=\"po-checkbox-group-label\"\r\n          [class.po-clickable]=\"!option.disabled && !disabled\"\r\n          [for]=\"option.id\"\r\n          [tabindex]=\"option.disabled || disabled ? -1 : 0\"\r\n          (click)=\"checkOption(option)\"\r\n          (keydown)=\"onKeyDown($event, option)\"\r\n        >\r\n          {{ option.label }}\r\n        </label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <po-field-container-bottom></po-field-container-bottom>\r\n</po-field-container>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return PoCheckboxGroupComponent; }),
                            multi: true
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return PoCheckboxGroupComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    PoCheckboxGroupComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    PoCheckboxGroupComponent.propDecorators = {
        checkboxLabels: [{ type: i0.ViewChildren, args: ['checkboxLabel',] }]
    };

    /**
     * @description
     *
     * Módulo do componente `po-checkbox-group`.
     */
    var PoCheckboxGroupModule = /** @class */ (function () {
        function PoCheckboxGroupModule() {
        }
        return PoCheckboxGroupModule;
    }());
    PoCheckboxGroupModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, PoFieldContainerModule],
                    exports: [PoCheckboxGroupComponent],
                    declarations: [PoCheckboxGroupComponent]
                },] }
    ];

    /**
     * @docsPrivate
     *
     * Este componente é de uso interno utilizado por componentes de entrada de dados com o objetivo de resetar as informações do model.
     *
     * Por padrão limpa o valor do campo e executa o método onChangePropagate, caso tenha a necessidade de tratar a função de limpar o campo,
     * deve implementar a interface PoClean.
     */
    var PoCleanBaseComponent = /** @class */ (function () {
        function PoCleanBaseComponent() {
            /** Valor que será atribuído ao campo quando for clicado no po-clean. */
            this.defaultValue = '';
            /**
             * @optional
             *
             * @description
             *
             *
             * Evento disparado quando executada ação do po-clean.
             * Este evento deve ser usado para avisar para o componente que está usando o po-clean, que o botão foi disparado,
             * e provavelmente será preciso emitir o evento para atualizar o model.
             */
            this.changeEvent = new i0.EventEmitter();
        }
        PoCleanBaseComponent.prototype.clear = function () {
            this.setInputValue(this.defaultValue);
            this.changeEvent.emit(this.defaultValue);
        };
        PoCleanBaseComponent.prototype.showIcon = function () {
            return this.defaultValue !== this.getInputValue();
        };
        return PoCleanBaseComponent;
    }());
    PoCleanBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoCleanBaseComponent.propDecorators = {
        inputRef: [{ type: i0.Input, args: ['p-element-ref',] }],
        defaultValue: [{ type: i0.Input, args: ['p-default-value',] }],
        changeEvent: [{ type: i0.Output, args: ['p-change-event',] }]
    };

    /**
     * @docsPrivate
     *
     * @docsExtends PoCleanBaseComponent
     *
     * @examplePrivate
     *
     * <example-private name="po-clean-labs" title="PO Clean Labs">
     *   <file name="sample-po-clean-labs.component.html"> </file>
     *   <file name="sample-po-clean-labs.component.ts"> </file>
     * </example-private>
     */
    var PoCleanComponent = /** @class */ (function (_super) {
        __extends(PoCleanComponent, _super);
        function PoCleanComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoCleanComponent.prototype.setInputValue = function (value) {
            if (this.inputRef && this.inputRef.nativeElement) {
                this.inputRef.nativeElement.value = value;
            }
        };
        PoCleanComponent.prototype.getInputValue = function () {
            if (this.inputRef && this.inputRef.nativeElement) {
                return this.inputRef.nativeElement.value;
            }
        };
        return PoCleanComponent;
    }(PoCleanBaseComponent));
    PoCleanComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-clean',
                    template: "<span *ngIf=\"showIcon()\" class=\"po-icon po-field-icon po-icon-close\" (click)=\"clear()\"> </span>\r\n"
                },] }
    ];

    /**
     * @description
     *
     * Módulo do componente `po-clean`.
     */
    var PoCleanModule = /** @class */ (function () {
        function PoCleanModule() {
        }
        return PoCleanModule;
    }());
    PoCleanModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    exports: [PoCleanComponent],
                    declarations: [PoCleanComponent]
                },] }
    ];

    /**
     * Para usar o po-mask é preciso instanciar esta classe passando a máscara como
     * primeiro parâmetro, e no segundo parâmetro, deve se informado true, caso queira
     * que o model seja formatado ou false para o que o model seja limpo.
     */
    var PoMask = /** @class */ (function () {
        function PoMask(mask, formatModel) {
            this.mask = '';
            this.formatModel = false;
            // controle de posição
            this.initialPosition = 0;
            this.finalPosition = 0;
            this.pattern = '';
            this.mask = mask;
            this.formatModel = formatModel;
            this.pattern = this.getRegexFromMask(mask);
        }
        Object.defineProperty(PoMask.prototype, "getPattern", {
            get: function () {
                return this.pattern;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMask.prototype, "getValueToInput", {
            get: function () {
                return this.valueToInput;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMask.prototype, "setValueToInput", {
            set: function (value) {
                this.valueToInput = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMask.prototype, "getValueToModel", {
            get: function () {
                return this.valueToModel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMask.prototype, "setValueToModel", {
            set: function (value) {
                this.valueToModel = value;
            },
            enumerable: false,
            configurable: true
        });
        PoMask.prototype.keyup = function ($event) {
            if (this.mask) {
                var value = $event.target.value;
                // formata o valor quando for colado com control + v e reposiciona o cursor
                if ($event.keyCode === 17 || $event.keyCode === 91) {
                    $event.target.value = this.controlFormatting(value);
                    this.resetPositions($event);
                }
                $event.preventDefault();
                switch ($event.keyCode) {
                    case 37: // seta esquerda
                        if (this.initialPosition > 0) {
                            this.initialPosition--;
                        }
                        this.setPositionNotShiftKey($event);
                        this.setSelectionRange($event);
                        break;
                    case 39: // seta direita
                        if (this.initialPosition < value.toString().length) {
                            this.initialPosition++;
                        }
                        this.setPositionNotShiftKey($event);
                        this.setSelectionRange($event);
                        break;
                    case 35: // end
                        this.finalPosition = value.toString().length;
                        if ($event.shiftKey) {
                            this.setPositions($event);
                        }
                        else {
                            this.initialPosition = this.finalPosition;
                            this.setPositions($event);
                        }
                        break;
                    case 36: // HOME
                        if ($event.shiftKey) {
                            this.finalPosition = this.initialPosition;
                            this.initialPosition = 0;
                            this.setPositions($event);
                        }
                        else {
                            this.initialPosition = 0;
                            this.finalPosition = 0;
                            this.setPositions($event);
                        }
                        break;
                }
            }
        };
        PoMask.prototype.setPositionNotShiftKey = function ($event) {
            if (!$event.shiftKey) {
                this.finalPosition = this.initialPosition;
            }
        };
        PoMask.prototype.setSelectionRange = function ($event) {
            if (this.initialPosition > this.finalPosition) {
                $event.target.setSelectionRange(this.finalPosition, this.initialPosition);
            }
            else {
                $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
            }
        };
        PoMask.prototype.keydown = function ($event) {
            if (this.mask) {
                var value = $event.target.value;
                if ($event.keyCode === 9) {
                    return;
                }
                if (!$event.ctrlKey && !$event.metaKey) {
                    $event.preventDefault();
                }
                // Não faz nada quando for digitado CTRL ou COMMAND e V
                // Já está sendo tratado no evento keyup
                if ($event.ctrlKey ||
                    ($event.metaKey && $event.keyCode !== 86) ||
                    ($event.keyCode >= 37 && $event.keyCode <= 40) ||
                    $event.keyCode === 16 ||
                    $event.keyCode === 9) {
                    return;
                }
                // Valida a tecla digitada
                if (this.isKeyValid($event.keyCode)) {
                    if (this.finalPosition === null) {
                        this.finalPosition = this.initialPosition;
                    }
                    this.revertPositions(this.initialPosition, this.finalPosition);
                    switch ($event.keyCode) {
                        case 8: // backspace
                            this.getPosition($event);
                            if (this.initialPosition < 0) {
                                this.initialPosition = 0;
                                this.setPositions($event);
                            }
                            if (this.initialPosition === this.finalPosition) {
                                this.checkMaskBefore($event, -1);
                                if (this.initialPosition !== 0) {
                                    value = value.slice(0, this.initialPosition - 1) + value.slice(this.finalPosition);
                                    value = this.controlFormatting(value);
                                    $event.target.value = value;
                                    this.changePosition($event, -1);
                                    this.checkMaskBefore($event, -1);
                                    this.setPositions($event);
                                    this.resetPositions($event);
                                }
                            }
                            else {
                                this.clearRangeSelection(value, $event, true);
                            }
                            this.setPositions($event);
                            break;
                        case 46: // delete
                            this.getPosition($event);
                            if (this.initialPosition === this.finalPosition) {
                                this.checkMaskAfter($event, 1);
                                value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition + 1);
                                value = this.controlFormatting(value);
                                $event.target.value = value;
                                this.setPositions($event);
                                this.resetPositions($event);
                            }
                            else {
                                this.clearRangeSelection(value, $event, false);
                            }
                            this.setPositions($event);
                            break;
                        default:
                            // qualquer outra tecla válida
                            this.getPosition($event);
                            value = value.slice(0, this.initialPosition) + $event.key + value.slice(this.finalPosition);
                            value = this.controlFormatting(value);
                            $event.target.value = value;
                            this.changePosition($event, 1);
                            this.checkMaskBefore($event, 1);
                            this.setPositions($event);
                            this.resetPositions($event);
                            this.setPositions($event);
                    }
                }
            }
        };
        PoMask.prototype.clearRangeSelection = function (value, $event, isBackspace) {
            value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition);
            value = this.controlFormatting(value);
            $event.target.value = value;
            if (isBackspace) {
                this.checkMaskBefore($event, -1);
            }
            this.setPositions($event);
            this.resetPositions($event);
        };
        // passa a posição do click para o controle de posição
        PoMask.prototype.click = function ($event) {
            this.initialPosition = $event.target.selectionStart;
            this.finalPosition = $event.target.selectionEnd;
        };
        PoMask.prototype.blur = function ($event) {
            // Se houver algum valor definido na máscara
            if (this.mask) {
                // pega o valor do campo, formata e passa para o model
                var value = $event.target.value;
                value = this.controlFormatting(value);
                $event.target.value = value;
            }
        };
        PoMask.prototype.revertPositions = function (initialPosition, finalPosition) {
            if (initialPosition > finalPosition) {
                // inverte o controle de posição caso o inicial esteja maior que o final
                var tempPosition = initialPosition;
                this.initialPosition = finalPosition;
                this.finalPosition = tempPosition;
            }
        };
        // reseta o controle de posição
        PoMask.prototype.resetPositions = function ($event) {
            this.initialPosition = $event.target.selectionStart;
            this.finalPosition = this.initialPosition;
        };
        // posiciona o cursor de acordo com o controle de posição
        PoMask.prototype.setPositions = function ($event) {
            $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
        };
        // muda a posição do cursor e atualiza o controle de posição
        PoMask.prototype.changePosition = function ($event, value) {
            this.initialPosition = this.initialPosition + value;
            this.finalPosition = this.finalPosition + value;
            this.setPositions($event);
        };
        PoMask.prototype.getPosition = function ($event) {
            this.initialPosition = $event.target.selectionStart;
            this.finalPosition = $event.target.selectionEnd;
            this.setPositions($event);
        };
        // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
        // quando houver valores opcionais (?)
        PoMask.prototype.controlFormatting = function (value) {
            // Se o valor for vazio, retorna vazio
            if (!value) {
                this.valueToInput = '';
                this.valueToModel = '';
                return '';
            }
            var valueProcessed;
            var maskTmp = this.mask;
            // Array que será usado para armazenar todas as máscaras possíveis para
            // quando houver um valor opcional (?)
            var arrMasks = [];
            var contMasks = 0;
            // Enquanto houver algum 9? na máscara
            while (this.hasOptionalNumber(maskTmp)) {
                arrMasks.push(maskTmp);
                maskTmp = this.replaceOptionalNumber(maskTmp);
            }
            arrMasks.push(maskTmp);
            // Inverte o array
            arrMasks.reverse();
            // Informa que a formatação ainda não chegou ao fim
            this.formattingEnds = false;
            while (!this.formattingEnds) {
                // Seta a formatação como terminada
                // Então o método formatValue irá setar como não terminado caso haja
                this.formattingEnds = true;
                // Se não existe mais nenhuma máscara possível, então encerra a formatação
                if (!arrMasks[contMasks]) {
                    break;
                }
                // Chama a formatação passando a máscara e o valor
                valueProcessed = this.formatValue(value, arrMasks[contMasks]);
                contMasks++;
            }
            return valueProcessed;
        };
        // Função que formata a máscara com o valor passado
        PoMask.prototype.formatValue = function (value, mask) {
            // Remove as marcas de valor opciona (?)
            mask = mask.replace(/\?/g, '');
            // Substitui todos os caracteres que não são fixos da máscara por _
            var guide = mask.replace(this.listValidKeys(), '_');
            // Contador usado para percorrer o guide
            var contGuide = 0;
            // String final formatada
            var valueProcessed = '';
            // Remove do valor todos os caracteres fixos como ()/-+
            value = this.removeFormattingValue(value);
            // Percorre todo o valor e coloca a formatação de acordo com a máscara
            for (var i = 0; i < value.length; i++) {
                var charValue = value[i];
                // Se o guide acabou, seta a formatação como não terminada para que o método controlFormatting
                // tente formatar com outra possível máscara
                if (!guide[contGuide]) {
                    this.formattingEnds = false;
                    break;
                }
                // Percorre o Guide enquanto tem caracteres fixos
                while (this.isFixedCharacterGuide(guide[contGuide]) && guide[contGuide]) {
                    valueProcessed += guide[contGuide];
                    contGuide++;
                }
                // É um caracter válido de acordo com a máscara
                if (this.isKeyValidMask(charValue, mask[contGuide])) {
                    valueProcessed += charValue;
                    contGuide++;
                }
                else {
                    // Se não é um caracter válido, deve interromper.
                    break;
                }
            }
            if (this.formatModel) {
                this.valueToInput = valueProcessed;
                this.valueToModel = valueProcessed;
            }
            else {
                this.valueToInput = valueProcessed;
                this.valueToModel = this.removeFormattingValue(valueProcessed);
            }
            return valueProcessed;
        };
        // verifica se tem algum caracter de mascara antes do cursor
        PoMask.prototype.checkMaskBefore = function ($event, position) {
            if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition - 1))) {
                this.changePosition($event, position);
                this.checkMaskBefore($event, position);
            }
        };
        // verifica se tem algum caracter de mascara depois do cursor
        PoMask.prototype.checkMaskAfter = function ($event, position) {
            if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition))) {
                this.changePosition($event, position);
                this.checkMaskAfter($event, position);
            }
        };
        // Retorna a máscara sem um valor opcional
        PoMask.prototype.replaceOptionalNumber = function (mask) {
            var i = 9;
            while (i >= 0) {
                if (mask.indexOf(i + '?') > -1) {
                    return mask.replace(i + '?', '');
                }
                i--;
            }
            return mask;
        };
        // Verifica se contém caracteres permitidos somente na máscara \/() +-
        PoMask.prototype.isFixedCharacterGuide = function (key) {
            return this.testRegex(key, this.getFixedCharacterGuide());
        };
        // Retorna caracteres permitidos somente na máscara \/() +-
        PoMask.prototype.getFixedCharacterGuide = function () {
            return /[\\\/() +-.\:]/g;
        };
        // Caracteres permitidos de serem digitados
        PoMask.prototype.listValidKeys = function () {
            return /[a-zA-Z0-9]/g;
        };
        // Se é um dígito válido
        PoMask.prototype.isKeyValid = function (keyCode) {
            return this.isKeyCodeValid(keyCode);
        };
        // Verifica se a tecla digitada é permitida
        // Permite apenas números, letras, backspace e del
        PoMask.prototype.isKeyCodeValid = function (keyCode) {
            return ((keyCode >= 48 && keyCode <= 57) ||
                (keyCode >= 65 && keyCode <= 90) ||
                (keyCode >= 96 && keyCode <= 105) ||
                keyCode === 8 ||
                keyCode === 9 ||
                keyCode === 46);
        };
        // Se está de acordo com a máscara
        PoMask.prototype.isKeyValidMask = function (key, keyMask) {
            return this.testRegex(key, this.replaceMask(keyMask));
        };
        // Retorna se a chave foi aprovada pela expressão regular
        PoMask.prototype.testRegex = function (key, regex) {
            return regex.test(key);
        };
        // Remove a formatacão do valor
        // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
        PoMask.prototype.removeFormattingValue = function (value) {
            return value.replace(this.getFixedCharacterGuide(), '');
        };
        // Verifica se contém valor opcional na máscara 0-9?
        PoMask.prototype.hasOptionalNumber = function (mask) {
            return mask.match(/\d\?/g);
        };
        // Retorna a expressão regular correspondente ao comando passado
        PoMask.prototype.replaceMask = function (char) {
            var regex = /./;
            switch (char) {
                case '0':
                    regex = /[0]/;
                    break;
                case '1':
                    regex = /[0-1]/;
                    break;
                case '2':
                    regex = /[0-2]/;
                    break;
                case '3':
                    regex = /[0-3]/;
                    break;
                case '4':
                    regex = /[0-4]/;
                    break;
                case '5':
                    regex = /[0-5]/;
                    break;
                case '6':
                    regex = /[0-6]/;
                    break;
                case '7':
                    regex = /[0-7]/;
                    break;
                case '8':
                    regex = /[0-8]/;
                    break;
                case '9':
                    regex = /[0-9]/;
                    break;
                case ' ':
                    regex = /\s/;
                    break;
                case '@':
                    regex = /[a-zA-Z]/;
                    break;
                case 'w':
                    regex = /[a-zA-Z0-9]/;
                    break;
            }
            return regex;
        };
        PoMask.prototype.getRegexFromMask = function (mask) {
            if (mask) {
                var pattern = void 0;
                if (this.formatModel) {
                    pattern = mask.replace(/\\/g, '\\\\');
                    pattern = pattern.replace(/\+/g, '\\+');
                    pattern = pattern.replace(/\./g, '\\.');
                    pattern = pattern.replace(/-/g, '-');
                    pattern = pattern.replace(/\(/g, '\\(');
                    pattern = pattern.replace(/\)/g, '\\)');
                    pattern = pattern.replace(/\//g, '\\/');
                    pattern = pattern.replace(/\s/g, '\\s');
                    pattern = pattern.replace(/:/g, '\\:');
                    pattern = pattern.replace(/\@(?!\s)/g, '\\w');
                    pattern = pattern.replace(/\d/g, '\\w');
                }
                else {
                    pattern = mask.replace(/\\/g, '');
                    pattern = pattern.replace(/\+/g, '');
                    pattern = pattern.replace(/\./g, '');
                    pattern = pattern.replace(/-/g, '');
                    pattern = pattern.replace(/\(/g, '');
                    pattern = pattern.replace(/\)/g, '');
                    pattern = pattern.replace(/\//g, '');
                    pattern = pattern.replace(/\s/g, '');
                    pattern = pattern.replace(/:/g, '');
                    pattern = pattern.replace(/\@/g, '\\w');
                    pattern = pattern.replace(/\d/g, '\\w');
                }
                return pattern;
            }
            else {
                return null;
            }
        };
        return PoMask;
    }());

    /**
     * @usedBy PoDatepickerComponent
     *
     * @description
     *
     * *Enum* que define o padrão de formatação das datas.
     *
     * > Caso um formato padrão seja definido, o mesmo não será mais alterado de acordo com o formato de entrada.
     */
    exports.PoDatepickerIsoFormat = void 0;
    (function (PoDatepickerIsoFormat) {
        /** Padrão **E8601DAw** (*yyyy-mm-dd*). */
        PoDatepickerIsoFormat["Basic"] = "basic";
        /** Padrão **E8601DZw** (*yyyy-mm-ddThh:mm:ss+|-hh:mm*). */
        PoDatepickerIsoFormat["Extended"] = "extended";
    })(exports.PoDatepickerIsoFormat || (exports.PoDatepickerIsoFormat = {}));

    var poDatepickerFormatDefault = 'dd/mm/yyyy';
    /**
     * @description
     *
     * O `po-datepicker` é um componente específico para manipulação de datas permitindo a digitação e / ou seleção.
     *
     * O formato de exibição da data, ou seja, o formato que é apresentado ao usuário é o dd/mm/yyyy,
     * mas podem ser definidos outros padrões (veja mais na propriedade `p-format`).
     *
     * O idioma padrão do calendário será exibido de acordo com o navegador, caso tenha necessidade de alterar
     * use a propriedade `p-locale`.
     *
     * O datepicker aceita três formatos de data: o E8601DZw (yyyy-mm-ddThh:mm:ss+|-hh:mm), o E8601DAw (yyyy-mm-dd) e o
     * Date padrão do Javascript.
     *
     * > Por padrão, o formato de saída do *model* se ajustará conforme o formato de entrada. Se por acaso precisar controlar o valor de saída,
     * a propriedade `p-iso-format` provê esse controle independentemente do formato de entrada. Veja abaixo os formatos disponíveis:
     *
     * - Formato de entrada e saída (E8601DZw) - `'2017-11-28T00:00:00-02:00'`;
     *
     * - Formato de entrada e saída (E8601DAw) - `'2017-11-28'`;
     *
     * - Formato de entrada (Date) - `new Date(2017, 10, 28)` e saída (E8601DAw) - `'2017-11-28'`;
     *
     * **Importante:**
     *
     * - Para utilizar datas com ano inferior a 100, verificar o comportamento do [`new Date`](https://www.w3schools.com/js/js_dates.asp)
     * e utilizar o método [`setFullYear`](https://www.w3schools.com/jsref/jsref_setfullyear.asp).
     * - Caso a data esteja inválida, o `model` receberá **'Data inválida'**.
     * - Caso o `input` esteja passando um `[(ngModel)]`, mas não tenha um `name`, então irá ocorrer um erro
     * do próprio Angular (`[ngModelOptions]="{standalone: true}"`).
     *
     * Exemplo:
     *
     * ```
     * <po-datepicker
     *   [(ngModel)]="pessoa.nome"
     *   [ngModelOptions]="{standalone: true}"
     * </po-datepicker>
     * ```
     *
     * > Não esqueça de importar o `FormsModule` em seu módulo, tal como para utilizar o `input default`.
     */
    var PoDatepickerBaseComponent = /** @class */ (function () {
        function PoDatepickerBaseComponent(languageService) {
            this.languageService = languageService;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /**
             * Mensagem apresentada quando a data for inválida ou fora do período.
             *
             * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.
             */
            this.errorPattern = '';
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao sair do campo.
             */
            this.onblur = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao alterar valor do campo.
             */
            this.onchange = new i0.EventEmitter();
            this.firstStart = true;
            this.hour = 'T00:00:01-00:00';
            this.isExtendedISO = false;
            this.onChangeModel = null;
            this.onTouchedModel = null;
            this._format = poDatepickerFormatDefault;
            this._noAutocomplete = false;
            this._placeholder = '';
            /** Desabilita o campo. */
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.disabled = false;
            /** Torna o elemento somente leitura. */
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.readonly = false;
            /** Faz com que o campo seja obrigatório. */
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.required = false;
            /** Habilita ação para limpar o campo. */
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.clean = false;
            this.shortLanguage = this.languageService.getShortLanguage();
        }
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "noAutocomplete", {
            get: function () {
                return this._noAutocomplete;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a propriedade nativa `autocomplete` do campo como `off`.
             *
             * @default `false`
             */
            set: function (value) {
                this._noAutocomplete = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "placeholder", {
            get: function () {
                return this._placeholder;
            },
            /**
             * @optional
             *
             * @description
             *
             * Mensagem que aparecerá enquanto o campo não estiver preenchido.
             */
            set: function (placeholder) {
                this._placeholder = isTypeof(placeholder, 'string') ? placeholder : '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "setDisabled", {
            set: function (disabled) {
                this.disabled = disabled === '' ? true : convertToBoolean(disabled);
                this.validateModel(convertDateToISOExtended(this.date, this.hour));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "setReadonly", {
            set: function (readonly) {
                this.readonly = readonly === '' ? true : convertToBoolean(readonly);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "setRequired", {
            set: function (required) {
                this.required = required === '' ? true : convertToBoolean(required);
                this.validateModel(convertDateToISOExtended(this.date, this.hour));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "setClean", {
            set: function (clean) {
                this.clean = clean === '' ? true : convertToBoolean(clean);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "minDate", {
            get: function () {
                return this._minDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma data mínima para o `po-datepicker`.
             */
            set: function (value) {
                if (value instanceof Date) {
                    var year = value.getFullYear();
                    var date = new Date(year, value.getMonth(), value.getDate(), 0, 0, 0);
                    setYearFrom0To100(date, year);
                    this._minDate = date;
                }
                else {
                    this._minDate = convertIsoToDate(value, true, false);
                }
                this.validateModel(convertDateToISOExtended(this.date, this.hour));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "maxDate", {
            get: function () {
                return this._maxDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma data máxima para o `po-datepicker`.
             */
            set: function (value) {
                if (value instanceof Date) {
                    var year = value.getFullYear();
                    var date = new Date(year, value.getMonth(), value.getDate(), 23, 59, 59);
                    setYearFrom0To100(date, year);
                    this._maxDate = date;
                }
                else {
                    this._maxDate = convertIsoToDate(value, false, true);
                }
                this.validateModel(convertDateToISOExtended(this.date, this.hour));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "format", {
            get: function () {
                return this._format;
            },
            /**
             * @optional
             *
             * @description
             *
             * Formato de exibição da data.
             *
             * Valores válidos:
             *  - `dd/mm/yyyy`
             *  - `mm/dd/yyyy`
             *  - `yyyy/mm/dd`
             *
             * @default `dd/mm/yyyy`
             */
            set: function (value) {
                if (value) {
                    value = value.toLowerCase();
                    if (value.match(/dd/) && value.match(/mm/) && value.match(/yyyy/)) {
                        this._format = value;
                        this.objMask = this.buildMask();
                        this.refreshValue(this.date);
                        return;
                    }
                }
                this._format = poDatepickerFormatDefault;
                this.objMask = this.buildMask();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "isoFormat", {
            get: function () {
                return this._isoFormat;
            },
            /**
             * @optional
             *
             * @description
             *
             * Padrão de formatação para saída do *model*, independentemente do formato de entrada.
             *
             * > Veja os valores válidos no *enum* `PoDatepickerIsoFormat`.
             */
            set: function (value) {
                if (Object.values(exports.PoDatepickerIsoFormat).includes(value)) {
                    this._isoFormat = value;
                    this.isExtendedISO = value === exports.PoDatepickerIsoFormat.Extended;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "locale", {
            get: function () {
                return this._locale || this.shortLanguage;
            },
            set: function (value) {
                if (value) {
                    this._locale = value.length >= 2 ? value : poLocaleDefault;
                }
                else {
                    this._locale = this.shortLanguage;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "date", {
            get: function () {
                return this._date;
            },
            set: function (value) {
                this._date = typeof value === 'string' ? convertIsoToDate(value, false, false) : value;
            },
            enumerable: false,
            configurable: true
        });
        PoDatepickerBaseComponent.prototype.ngOnInit = function () {
            // Classe de máscara
            this.objMask = this.buildMask();
        };
        // Converte um objeto string em Date
        PoDatepickerBaseComponent.prototype.getDateFromString = function (dateString) {
            var day = parseInt(dateString.substring(this.format.indexOf('d'), this.format.indexOf('d') + 2), 10);
            var month = parseInt(dateString.substring(this.format.indexOf('m'), this.format.indexOf('m') + 2), 10) - 1;
            var year = parseInt(dateString.substring(this.format.indexOf('y'), this.format.indexOf('y') + 4), 10);
            var date = new Date(year, month, day);
            setYearFrom0To100(date, year);
            return date.getFullYear() === year && date.getMonth() === month && date.getDate() === day ? date : null;
        };
        // Formata a data.
        PoDatepickerBaseComponent.prototype.formatToDate = function (value) {
            var dateFormatted = this.format;
            dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
            dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
            dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
            return dateFormatted;
        };
        // Método responsável por controlar o modelo.
        PoDatepickerBaseComponent.prototype.controlModel = function (date) {
            this.date = date;
            if (date && this.isExtendedISO) {
                this.callOnChange(convertDateToISOExtended(this.date, this.hour));
            }
            else if (date && !this.isExtendedISO) {
                this.callOnChange(convertDateToISODate(this.date));
            }
            else {
                date === undefined ? this.callOnChange('') : this.callOnChange('Data inválida');
            }
        };
        // Executa a função onChange
        PoDatepickerBaseComponent.prototype.callOnChange = function (value, retry) {
            var _this = this;
            if (retry === void 0) { retry = true; }
            if (this.onChangeModel && value !== this.previousValue) {
                this.onChangeModel(value);
                this.previousValue = value;
            }
            else if (retry) {
                setTimeout(function () { return _this.callOnChange(value, false); });
            }
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar os estados de habilitado via forms api
        PoDatepickerBaseComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoDatepickerBaseComponent.prototype.registerOnChange = function (func) {
            this.onChangeModel = func;
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoDatepickerBaseComponent.prototype.registerOnTouched = function (func) {
            this.onTouchedModel = func;
        };
        PoDatepickerBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoDatepickerBaseComponent.prototype.validate = function (c) {
            // Verifica se já possui algum error pattern padrão.
            this.errorPattern =
                this.errorPattern !== 'Data inválida' && this.errorPattern !== 'Data fora do período' ? this.errorPattern : '';
            if (dateFailed(c.value)) {
                this.errorPattern = this.errorPattern || 'Data inválida';
                return {
                    date: {
                        valid: false
                    }
                };
            }
            if (requiredFailed(this.required, this.disabled, c.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
            if (this.date && !validateDateRange(this.date, this._minDate, this._maxDate)) {
                this.errorPattern = this.errorPattern || 'Data fora do período';
                return {
                    date: {
                        valid: false
                    }
                };
            }
            return null;
        };
        PoDatepickerBaseComponent.prototype.validateModel = function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        // Retorna um objeto do tipo PoMask com a mascara configurada.
        PoDatepickerBaseComponent.prototype.buildMask = function () {
            var mask = this.format.toUpperCase();
            mask = mask.replace(/DD/g, '99');
            mask = mask.replace(/MM/g, '99');
            mask = mask.replace(/YYYY/g, '9999');
            return new PoMask(mask, true);
        };
        return PoDatepickerBaseComponent;
    }());
    PoDatepickerBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoDatepickerBaseComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoDatepickerBaseComponent.propDecorators = {
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        optional: [{ type: i0.Input, args: ['p-optional',] }],
        errorPattern: [{ type: i0.Input, args: ['p-error-pattern',] }],
        onblur: [{ type: i0.Output, args: ['p-blur',] }],
        onchange: [{ type: i0.Output, args: ['p-change',] }],
        noAutocomplete: [{ type: i0.Input, args: ['p-no-autocomplete',] }],
        placeholder: [{ type: i0.Input, args: ['p-placeholder',] }],
        setDisabled: [{ type: i0.Input, args: ['p-disabled',] }],
        setReadonly: [{ type: i0.Input, args: ['p-readonly',] }],
        setRequired: [{ type: i0.Input, args: ['p-required',] }],
        setClean: [{ type: i0.Input, args: ['p-clean',] }],
        minDate: [{ type: i0.Input, args: ['p-min-date',] }],
        maxDate: [{ type: i0.Input, args: ['p-max-date',] }],
        format: [{ type: i0.Input, args: ['p-format',] }],
        isoFormat: [{ type: i0.Input, args: ['p-iso-format',] }],
        locale: [{ type: i0.Input, args: ['p-locale',] }]
    };
    __decorate([
        InputBoolean()
    ], PoDatepickerBaseComponent.prototype, "autoFocus", void 0);

    var poCalendarContentOffset$1 = 8;
    var poCalendarPositionDefault$1 = 'bottom-left';
    /**
     * @docsExtends PoDatepickerBaseComponent
     *
     * @example
     *
     * <example name="po-datepicker-basic" title="PO Datepicker Basic">
     *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.html"> </file>
     *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.ts"> </file>
     *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.po.ts"> </file>
     *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.e2e-spec.ts"> </file>
     * </example>
     *
     * <example name="po-datepicker-labs" title="PO Datepicker Labs">
     *  <file name="sample-po-datepicker-labs/sample-po-datepicker-labs.component.html"> </file>
     *  <file name="sample-po-datepicker-labs/sample-po-datepicker-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-datepicker-airfare" title="PO Datepicker - Airfare">
     *  <file name="sample-po-datepicker-airfare/sample-po-datepicker-airfare.component.html"> </file>
     *  <file name="sample-po-datepicker-airfare/sample-po-datepicker-airfare.component.ts"> </file>
     * </example>
     *
     * <example name="po-datepicker-airfare-reactive-form" title="PO Datepicker - Airfare Reactive Form">
     *  <file name="sample-po-datepicker-airfare-reactive-form/sample-po-datepicker-airfare-reactive-form.component.html"> </file>
     *  <file name="sample-po-datepicker-airfare-reactive-form/sample-po-datepicker-airfare-reactive-form.component.ts"> </file>
     * </example>
     */
    var PoDatepickerComponent = /** @class */ (function (_super) {
        __extends(PoDatepickerComponent, _super);
        function PoDatepickerComponent(controlPosition, languageService, renderer, el) {
            var _this = _super.call(this, languageService) || this;
            _this.controlPosition = controlPosition;
            _this.renderer = renderer;
            _this.visible = false;
            _this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' + '(?:0[1-9]|1[0-2])-' + '(?:0[1-9]|[12]\\d|3[01])$');
            _this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
                '(?:0[1-9]|1[0-2])-' +
                '(?:0[1-9]|[12]\\d|3[01])' +
                'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
                '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
                '(?:|:?[0-5]\\d)$');
            _this.onScroll = function () {
                _this.controlPosition.adjustPosition(poCalendarPositionDefault$1);
            };
            _this.el = el;
            return _this;
        }
        Object.defineProperty(PoDatepickerComponent.prototype, "autocomplete", {
            get: function () {
                return this.noAutocomplete ? 'off' : 'on';
            },
            enumerable: false,
            configurable: true
        });
        PoDatepickerComponent.prototype.onKeyup = function ($event) {
            if (this.readonly) {
                return;
            }
            this.objMask.keyup($event);
            // Controla a atualização do model, verificando se a data é valida
            if (this.objMask.valueToModel || this.objMask.valueToModel === '') {
                if (this.objMask.valueToModel.length >= 10) {
                    this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                    this.date = this.getDateFromString(this.inputEl.nativeElement.value);
                }
                else {
                    this.date = undefined;
                    this.controlModel(this.date);
                }
            }
            else {
                this.date = undefined;
            }
        };
        PoDatepickerComponent.prototype.onKeydown = function ($event) {
            if (this.readonly) {
                return;
            }
            this.objMask.keydown($event);
        };
        PoDatepickerComponent.prototype.ngAfterViewInit = function () {
            this.setDialogPickerStyleDisplay('none');
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoDatepickerComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoDatepickerComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoDatepickerComponent, { static: true }) datepicker: PoDatepickerComponent;
         *
         * focusDatepicker() {
         *   this.datepicker.focus();
         * }
         * ```
         */
        PoDatepickerComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.inputEl.nativeElement.focus();
            }
        };
        PoDatepickerComponent.prototype.togglePicker = function () {
            if (this.disabled || this.readonly) {
                return;
            }
            if (!this.visible) {
                this.setCalendarPosition();
                this.initializeListeners();
                this.visible = true;
            }
            else {
                this.inputEl.nativeElement.disabled = false;
                this.closeCalendar();
            }
        };
        PoDatepickerComponent.prototype.dateSelected = function () {
            if (!this.verifyMobile()) {
                this.inputEl.nativeElement.focus();
            }
            this.inputEl.nativeElement.value = this.formatToDate(this.date);
            this.controlModel(this.date);
            this.controlChangeEmitter();
            this.closeCalendar();
        };
        // Esconde Picker quando for clicado fora
        PoDatepickerComponent.prototype.wasClickedOnPicker = function (event) {
            if (!this.dialogPicker || !this.iconDatepicker) {
                return;
            }
            if ((!this.dialogPicker.nativeElement.contains(event.target) || this.hasOverlayClass(event.target)) &&
                !this.iconDatepicker.nativeElement.contains(event.target) &&
                !this.hasAttrCalendar(event.target)) {
                this.closeCalendar();
            }
        };
        PoDatepickerComponent.prototype.hasInvalidClass = function () {
            return (this.el.nativeElement.classList.contains('ng-invalid') &&
                this.el.nativeElement.classList.contains('ng-dirty') &&
                this.inputEl.nativeElement.value !== '');
        };
        PoDatepickerComponent.prototype.getErrorPattern = function () {
            return this.errorPattern !== '' && this.hasInvalidClass() ? this.errorPattern : '';
        };
        PoDatepickerComponent.prototype.clear = function () {
            this.valueBeforeChange = this.formatToDate(this.date);
            this.date = undefined;
            this.controlModel(this.date);
            this.controlChangeEmitter();
        };
        PoDatepickerComponent.prototype.eventOnBlur = function ($event) {
            var _a;
            (_a = this.onTouchedModel) === null || _a === void 0 ? void 0 : _a.call(this);
            var date = this.inputEl.nativeElement.value;
            var newDate = date ? this.getDateFromString(date) : undefined;
            this.objMask.blur($event);
            this.onblur.emit();
            if (this.objMask.valueToModel) {
                if (this.objMask.valueToModel.length >= 10) {
                    this.controlModel(newDate);
                    this.date = newDate;
                }
                else {
                    this.date = null;
                    this.controlModel(this.date);
                }
            }
            else {
                this.date = undefined;
                this.callOnChange(this.date);
            }
            this.controlChangeEmitter();
        };
        PoDatepickerComponent.prototype.eventOnClick = function ($event) {
            var _this = this;
            if (this.verifyMobile()) {
                $event.target.blur();
                // abre o calendar quando clicar no input somente no mobile
                setTimeout(function () { return _this.togglePicker(); }, 0);
            }
            else {
                // Atualiza a posição do cursor ao clicar
                this.objMask.click($event);
            }
        };
        PoDatepickerComponent.prototype.formatToDate = function (value) {
            if (!value) {
                return undefined;
            }
            var dateFormatted = this.format;
            dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
            dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
            dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
            return dateFormatted;
        };
        PoDatepickerComponent.prototype.refreshValue = function (value) {
            if (value) {
                this.inputEl.nativeElement.value = this.formatToDate(value);
            }
        };
        // Função implementada do ControlValueAccessor
        PoDatepickerComponent.prototype.writeValue = function (value) {
            if (this.inputEl && value) {
                if (value instanceof Date) {
                    var dateString = value.toString();
                    this.hour =
                        'T' + dateString.substring(16, 24) + dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
                    this.date = value;
                    this.inputEl.nativeElement.value = this.formatToDate(value);
                }
                else if (this.isValidDateIso(value) || this.isValidExtendedIso(value)) {
                    if (this.isValidExtendedIso(value)) {
                        this.hour = value.substring(10, 25);
                    }
                    if (this.isoFormat === undefined) {
                        this.isExtendedISO = this.isValidExtendedIso(value);
                    }
                    var day = parseInt(value.substring(8, 10), 10);
                    var month = parseInt(value.substring(5, 7), 10) - 1;
                    var year = parseInt(value.substring(0, 4), 10);
                    var dateTemp = new Date(year, month, day);
                    setYearFrom0To100(dateTemp, year);
                    this.date = dateTemp;
                    this.inputEl.nativeElement.value = this.formatToDate(dateTemp);
                }
                else {
                    this.inputEl.nativeElement.value = '';
                    this.date = undefined;
                }
                this.controlModel(this.date);
            }
            else if (this.inputEl) {
                this.inputEl.nativeElement.value = '';
                this.date = undefined;
                this.callOnChange(this.date, false);
            }
            this.valueBeforeChange = this.formatToDate(this.date);
        };
        PoDatepickerComponent.prototype.isValidDateIso = function (value) {
            return this.dateRegex.test(value);
        };
        PoDatepickerComponent.prototype.isValidExtendedIso = function (value) {
            return this.isoRegex.test(value);
        };
        PoDatepickerComponent.prototype.hasOverlayClass = function (element) {
            return element.classList.contains('po-datepicker-calendar-overlay');
        };
        /* istanbul ignore next */
        PoDatepickerComponent.prototype.verifyMobile = function () {
            return isMobile();
        };
        PoDatepickerComponent.prototype.closeCalendar = function () {
            this.visible = false;
            this.removeListeners();
            this.setDialogPickerStyleDisplay('none');
        };
        PoDatepickerComponent.prototype.controlChangeEmitter = function () {
            var _this = this;
            var dateModelFormatted = this.formatToDate(this.date);
            if (dateModelFormatted !== this.valueBeforeChange) {
                this.valueBeforeChange = dateModelFormatted;
                clearTimeout(this.timeoutChange);
                this.timeoutChange = setTimeout(function () {
                    _this.onchange.emit(dateModelFormatted);
                }, 200);
            }
        };
        PoDatepickerComponent.prototype.hasAttrCalendar = function (element) {
            var attrCalendar = 'attr-calendar';
            return ((element && element.hasAttribute(attrCalendar)) ||
                (element.parentElement && element.parentElement.hasAttribute(attrCalendar)));
        };
        PoDatepickerComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.clickListener = this.renderer.listen('document', 'click', function (event) {
                _this.wasClickedOnPicker(event);
            });
            this.eventResizeListener = this.renderer.listen('window', 'resize', function () {
                _this.closeCalendar();
            });
            window.addEventListener('scroll', this.onScroll, true);
        };
        PoDatepickerComponent.prototype.removeListeners = function () {
            if (this.clickListener) {
                this.clickListener();
            }
            if (this.eventResizeListener) {
                this.eventResizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        PoDatepickerComponent.prototype.setDialogPickerStyleDisplay = function (value) {
            this.dialogPicker.nativeElement.style.display = value;
        };
        PoDatepickerComponent.prototype.setCalendarPosition = function () {
            this.setDialogPickerStyleDisplay('block');
            this.controlPosition.setElements(this.dialogPicker.nativeElement, poCalendarContentOffset$1, this.inputEl, ['top-left', 'top-right', 'bottom-left', 'bottom-right'], false, true);
            this.controlPosition.adjustPosition(poCalendarPositionDefault$1);
        };
        return PoDatepickerComponent;
    }(PoDatepickerBaseComponent));
    PoDatepickerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-datepicker',
                    template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content\">\r\n    <input\r\n      #inp\r\n      class=\"po-input po-datepicker\"\r\n      [ngClass]=\"clean && inp.value ? 'po-input-double-icon-right' : 'po-input-icon-right'\"\r\n      type=\"text\"\r\n      [attr.name]=\"name\"\r\n      [autocomplete]=\"autocomplete\"\r\n      [disabled]=\"disabled\"\r\n      [placeholder]=\"placeholder\"\r\n      [readonly]=\"readonly\"\r\n      [required]=\"required\"\r\n      (blur)=\"eventOnBlur($event)\"\r\n      (click)=\"eventOnClick($event)\"\r\n    />\r\n\r\n    <div class=\"po-field-icon-container-right\">\r\n      <po-clean *ngIf=\"clean && !disabled && !readonly\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear()\">\r\n      </po-clean>\r\n\r\n      <span\r\n        #iconDatepicker\r\n        class=\"po-icon po-field-icon po-icon-calendar\"\r\n        [class.po-field-icon]=\"!disabled && !readonly\"\r\n        [class.po-field-icon-disabled]=\"disabled || readonly\"\r\n        (click)=\"togglePicker()\"\r\n      >\r\n      </span>\r\n    </div>\r\n  </div>\r\n\r\n  <div #dialogPicker [class.po-datepicker-popup-calendar]=\"!verifyMobile()\">\r\n    <div *ngIf=\"verifyMobile()\" class=\"po-datepicker-calendar-overlay\"></div>\r\n    <po-calendar\r\n      [class.po-datepicker-calendar-mobile]=\"verifyMobile()\"\r\n      #calendar\r\n      [(ngModel)]=\"date\"\r\n      [p-max-date]=\"maxDate\"\r\n      [p-min-date]=\"minDate\"\r\n      [p-locale]=\"locale\"\r\n      (p-change)=\"dateSelected()\"\r\n    >\r\n    </po-calendar>\r\n  </div>\r\n\r\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"></po-field-container-bottom>\r\n</po-field-container>\r\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return PoDatepickerComponent; }),
                            multi: true
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return PoDatepickerComponent; }),
                            multi: true
                        },
                        PoControlPositionService
                    ],
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoDatepickerComponent.ctorParameters = function () { return [
        { type: PoControlPositionService },
        { type: PoLanguageService },
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    PoDatepickerComponent.propDecorators = {
        calendar: [{ type: i0.ViewChild, args: ['calendar', { static: true },] }],
        dialogPicker: [{ type: i0.ViewChild, args: ['dialogPicker', { read: i0.ElementRef, static: true },] }],
        iconDatepicker: [{ type: i0.ViewChild, args: ['iconDatepicker', { read: i0.ElementRef, static: true },] }],
        inputEl: [{ type: i0.ViewChild, args: ['inp', { read: i0.ElementRef, static: true },] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        help: [{ type: i0.Input, args: ['p-help',] }],
        onKeyup: [{ type: i0.HostListener, args: ['keyup', ['$event'],] }],
        onKeydown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }]
    };

    /**
     * @description
     *
     * Módulo do componente `po-datepicker`.
     */
    var PoDatepickerModule = /** @class */ (function () {
        function PoDatepickerModule() {
        }
        return PoDatepickerModule;
    }());
    PoDatepickerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, PoFieldContainerModule, PoCleanModule, PoCalendarModule],
                    exports: [PoDatepickerComponent],
                    declarations: [PoDatepickerComponent]
                },] }
    ];

    var poModalLiterals = {
        en: {
            close: 'Close'
        },
        es: {
            close: 'Cerrar'
        },
        pt: {
            close: 'Fechar'
        },
        ru: {
            close: 'близко'
        }
    };

    /**
     * @description
     *
     * O componente `po-modal` é utilizado para incluir conteúdos rápidos e informativos.
     *
     * No cabeçalho do componente é possível definir um título e como também permite ocultar o ícone de fechamento da modal.
     *
     * Em seu corpo é possível definir um conteúdo informativo, podendo utilizar componentes como por exemplo `po-chart`,
     * `po-table` e os demais componentes do PO.
     *
     * No rodapé encontram-se os botões de ação primária e secundária, no qual permitem definir uma ação e um rótulo, bem como
     * definir um estado de carregando e / ou desabilitado e / ou definir o botão com o tipo *danger*. Também é possível utilizar
     * o componente [`PoModalFooter`](/documentation/po-modal-footer).
     *
     * > É possível fechar a modal através da tecla *ESC*, quando a propriedade `p-hide-close` não estiver habilitada.
     */
    var PoModalBaseComponent = /** @class */ (function () {
        function PoModalBaseComponent(poLanguageService) {
            // Controla se a modal fica oculto ou visível, por padrão é oculto
            this.isHidden = true;
            // Event emmiter para quando a modal é fechada pelo 'X'.
            this.onXClosed = new i0.EventEmitter();
            this._hideClose = false;
            this._size = 'md';
            /**
             * Define o fechamento da modal ao clicar fora da mesma.
             * Informe o valor `true` para ativar o fechamento ao clicar fora da modal.
             */
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.clickOut = false;
            this.language = poLanguageService.getShortLanguage();
            this.literals = Object.assign({}, poModalLiterals[this.language]);
        }
        Object.defineProperty(PoModalBaseComponent.prototype, "size", {
            get: function () {
                return this._size;
            },
            /**
             * Define o tamanho da modal.
             *
             * Valores válidos:
             *  - `sm` (pequeno)
             *  - `md` (médio)
             *  - `lg` (grande)
             *  - `xl` (extra grande)
             *  - `auto` (automático)
             *
             * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
             * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
             *
             * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
             */
            set: function (value) {
                var sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
                this._size = sizes.indexOf(value) > -1 ? value : 'md';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoModalBaseComponent.prototype, "setClickOut", {
            set: function (value) {
                this.clickOut = value === '' ? false : convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoModalBaseComponent.prototype, "hideClose", {
            get: function () {
                return this._hideClose;
            },
            /**
             * @optional
             *
             * @description
             *
             * Oculta o ícone de fechar do cabeçalho da modal.
             *
             * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
             *
             * @default `false`
             */
            set: function (value) {
                this._hideClose = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        /** Função para fechar a modal. */
        PoModalBaseComponent.prototype.close = function (xClosed) {
            if (xClosed === void 0) { xClosed = false; }
            this.isHidden = true;
            if (xClosed) {
                this.onXClosed.emit(xClosed);
            }
        };
        /** Função para abrir a modal. */
        PoModalBaseComponent.prototype.open = function () {
            this.validPrimaryAction();
            this.isHidden = false;
        };
        PoModalBaseComponent.prototype.validPrimaryAction = function () {
            var _this = this;
            if (!this.primaryAction) {
                this.primaryAction = {
                    action: function () { return _this.close(); },
                    label: this.literals.close
                };
            }
            if (!this.primaryAction['action']) {
                this.primaryAction['action'] = function () { return _this.close(); };
            }
            if (!this.primaryAction['label']) {
                this.primaryAction['label'] = this.literals.close;
            }
        };
        return PoModalBaseComponent;
    }());
    PoModalBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoModalBaseComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoModalBaseComponent.propDecorators = {
        title: [{ type: i0.Input, args: ['p-title',] }],
        primaryAction: [{ type: i0.Input, args: ['p-primary-action',] }],
        secondaryAction: [{ type: i0.Input, args: ['p-secondary-action',] }],
        size: [{ type: i0.Input, args: ['p-size',] }],
        setClickOut: [{ type: i0.Input, args: ['p-click-out',] }],
        hideClose: [{ type: i0.Input, args: ['p-hide-close',] }]
    };

    /**
     * @description
     *
     * O componente `po-modal-footer` pode ser utilizado para incluir os botões de ações no rodapé da [`PoModal`](/documentation/po-modal), bem como para dar liberdade ao desenvolvedor de incluir outros itens necessários.
     * > Como boa prática, deve-se observar a utilização de apenas um botão primário.
     *
     * ```
     * <po-modal p-title="Title Modal" #modal>
     *  <po-modal-footer>
     *    <po-button p-label="Close" (p-click)="modal.close()"> </po-button>
     *    <po-button p-label="Clean" (p-click)="clean()"> </po-button>
     *    <po-button p-label="Confirm" p-type="primary" (p-click)="confirm()"> </po-button>
     *  </po-modal-footer>
     * </po-modal>
     * ```
     */
    var PoModalFooterComponent = /** @class */ (function () {
        function PoModalFooterComponent() {
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o alinhamento padrão, à direita, dos botões de ações que ficam no rodapé da [`PoModal`](/documentation/po-modal).
             *
             * > Caso a propriedade esteja habilitada, o alinhamento deverá ser a esquerda e pode ser personalizado.
             *
             * @default false
             */
            this.disabledAlign = false;
        }
        return PoModalFooterComponent;
    }());
    PoModalFooterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-modal-footer',
                    template: "<div class=\"po-modal-footer\" [class.po-modal-footer-align-right]=\"!disabledAlign\">\r\n  <ng-content></ng-content>\r\n</div>\r\n"
                },] }
    ];
    PoModalFooterComponent.propDecorators = {
        disabledAlign: [{ type: i0.Input, args: ['p-disabled-align',] }]
    };

    var PoActiveOverlayService = /** @class */ (function () {
        function PoActiveOverlayService() {
            this.activeOverlay = [];
        }
        return PoActiveOverlayService;
    }());
    PoActiveOverlayService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PoActiveOverlayService_Factory() { return new PoActiveOverlayService(); }, token: PoActiveOverlayService, providedIn: "root" });
    PoActiveOverlayService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    /**
     * @docsExtends PoModalBaseComponent
     *
     * @example
     *
     * <example name="po-modal-basic" title="PO Modal Basic">
     *  <file name="sample-po-modal-basic/sample-po-modal-basic.component.html"> </file>
     *  <file name="sample-po-modal-basic/sample-po-modal-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-modal-labs" title="PO Modal Labs">
     *  <file name="sample-po-modal-labs/sample-po-modal-labs.component.html"> </file>
     *  <file name="sample-po-modal-labs/sample-po-modal-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-modal-fruits-salad" title="PO Modal - Fruits Salad">
     *  <file name="sample-po-modal-fruits-salad/sample-po-modal-fruits-salad.component.html"> </file>
     *  <file name="sample-po-modal-fruits-salad/sample-po-modal-fruits-salad.component.ts"> </file>
     * </example>
     */
    var PoModalComponent = /** @class */ (function (_super) {
        __extends(PoModalComponent, _super);
        function PoModalComponent(poActiveOverlayService, poLanguageService) {
            var _this = _super.call(this, poLanguageService) || this;
            _this.poActiveOverlayService = poActiveOverlayService;
            _this.focusableElements = 'input, select, textarea, button:not([disabled]), a';
            _this.id = uuid();
            return _this;
        }
        PoModalComponent.prototype.close = function (xClosed) {
            if (xClosed === void 0) { xClosed = false; }
            this.poActiveOverlayService.activeOverlay.pop();
            _super.prototype.close.call(this, xClosed);
            this.removeEventListeners();
            if (this.sourceElement) {
                this.sourceElement.focus();
            }
        };
        PoModalComponent.prototype.closeModalOnEscapeKey = function (event) {
            if (!this.hideClose) {
                event.preventDefault();
                event.stopPropagation();
                this.close();
            }
        };
        PoModalComponent.prototype.getPrimaryActionButtonType = function () {
            return this.primaryAction.danger ? 'danger' : 'primary';
        };
        PoModalComponent.prototype.getSecondaryActionButtonType = function () {
            return this.secondaryAction && this.secondaryAction.danger && !this.primaryAction.danger ? 'danger' : 'default';
        };
        PoModalComponent.prototype.onClickOut = function (event) {
            if (this.clickOut && !this.modalContent.nativeElement.contains(event.target)) {
                this.close();
            }
        };
        PoModalComponent.prototype.open = function () {
            this.sourceElement = document.activeElement;
            _super.prototype.open.call(this);
            this.handleFocus();
        };
        PoModalComponent.prototype.handleFocus = function () {
            var _this = this;
            this.poActiveOverlayService.activeOverlay.push(this.id);
            setTimeout(function () {
                if (_this.modalContent) {
                    _this.initFocus();
                    document.addEventListener('focus', _this.focusFunction, true);
                }
            });
        };
        PoModalComponent.prototype.initFocus = function () {
            var _this = this;
            this.focusFunction = function (event) {
                var modalElement = _this.modalContent.nativeElement;
                if (!modalElement.contains(event.target) &&
                    _this.poActiveOverlayService.activeOverlay[_this.poActiveOverlayService.activeOverlay.length - 1] === _this.id) {
                    event.stopPropagation();
                    _this.firstElement.focus();
                }
            };
            this.setFirstElement();
            if (this.hideClose) {
                this.firstElement.focus();
            }
            else {
                var firstFieldElement = this.modalContent.nativeElement.querySelectorAll(this.focusableElements)[1] || this.modalContent.nativeElement;
                firstFieldElement.focus();
            }
        };
        PoModalComponent.prototype.removeEventListeners = function () {
            document.removeEventListener('focus', this.focusFunction, true);
        };
        PoModalComponent.prototype.setFirstElement = function () {
            this.firstElement =
                this.modalContent.nativeElement.querySelector(this.focusableElements) || this.modalContent.nativeElement;
        };
        return PoModalComponent;
    }(PoModalBaseComponent));
    PoModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-modal',
                    template: "<div *ngIf=\"!isHidden\" class=\"po-modal\" tabindex=\"0\" (keydown.esc)=\"closeModalOnEscapeKey($event)\">\r\n  <div class=\"po-modal-overlay\">\r\n    <div class=\"po-modal-container po-pb-2 po-pt-2\" (mousedown)=\"onClickOut($event)\">\r\n      <div class=\"po-modal-vertical-align\">\r\n        <div #modalContent class=\"po-modal-content po-modal-{{ size }}\" tabindex=\"-1\">\r\n          <div class=\"po-modal-header\">\r\n            <div class=\"po-modal-title po-text-ellipsis\">\r\n              {{ title }}\r\n            </div>\r\n\r\n            <a *ngIf=\"!hideClose\" class=\"po-modal-header-close-button\" tabindex=\"0\" (click)=\"close(true)\">\r\n              <span class=\"po-icon po-icon-close\"></span>\r\n            </a>\r\n          </div>\r\n\r\n          <div class=\"po-modal-body\">\r\n            <ng-content></ng-content>\r\n          </div>\r\n\r\n          <ng-container *ngIf=\"modalFooter; else defaultModalFooterTemplate\">\r\n            <ng-content select=\"po-modal-footer\"></ng-content>\r\n          </ng-container>\r\n\r\n          <ng-template #defaultModalFooterTemplate>\r\n            <po-modal-footer>\r\n              <po-button\r\n                *ngIf=\"secondaryAction\"\r\n                [p-disabled]=\"secondaryAction.disabled\"\r\n                [p-label]=\"secondaryAction.label\"\r\n                [p-loading]=\"secondaryAction.loading\"\r\n                [p-type]=\"getSecondaryActionButtonType()\"\r\n                (p-click)=\"secondaryAction.action()\"\r\n              >\r\n              </po-button>\r\n\r\n              <po-button\r\n                class=\"po-button-modal-first-action\"\r\n                [p-disabled]=\"primaryAction.disabled\"\r\n                [p-label]=\"primaryAction.label\"\r\n                [p-loading]=\"primaryAction.loading\"\r\n                [p-type]=\"getPrimaryActionButtonType()\"\r\n                (p-click)=\"primaryAction.action()\"\r\n              >\r\n              </po-button>\r\n            </po-modal-footer>\r\n          </ng-template>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
                },] }
    ];
    PoModalComponent.ctorParameters = function () { return [
        { type: PoActiveOverlayService },
        { type: PoLanguageService }
    ]; };
    PoModalComponent.propDecorators = {
        modalContent: [{ type: i0.ViewChild, args: ['modalContent', { read: i0.ElementRef },] }],
        modalFooter: [{ type: i0.ContentChild, args: [PoModalFooterComponent,] }]
    };

    /**
     * @description
     * Módulo do componente po-modal
     */
    var PoModalModule = /** @class */ (function () {
        function PoModalModule() {
        }
        return PoModalModule;
    }());
    PoModalModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, PoButtonModule],
                    declarations: [PoModalComponent, PoModalFooterComponent],
                    exports: [PoModalComponent, PoModalFooterComponent]
                },] }
    ];

    var PoProgressBarComponent = /** @class */ (function () {
        function PoProgressBarComponent() {
        }
        Object.defineProperty(PoProgressBarComponent.prototype, "valueScale", {
            get: function () {
                return "" + this.value / 100;
            },
            enumerable: false,
            configurable: true
        });
        return PoProgressBarComponent;
    }());
    PoProgressBarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-progress-bar',
                    template: "<div [class.po-progress-bar-indeterminate]=\"indeterminate\">\r\n  <div class=\"po-progress-bar-element po-progress-bar-primary\" [style.transform]=\"'scaleX(' + valueScale + ')'\"></div>\r\n  <div class=\"po-progress-bar-element po-progress-bar-secondary\"></div>\r\n</div>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoProgressBarComponent.propDecorators = {
        indeterminate: [{ type: i0.Input, args: ['p-indeterminate',] }],
        value: [{ type: i0.Input, args: ['p-value',] }]
    };

    /**
     * @usedBy PoProgressComponent
     *
     * @description
     *
     * *Enum* `PoProgressStatus` para os status de barra de progresso.
     */
    exports.PoProgressStatus = void 0;
    (function (PoProgressStatus) {
        /** Define o status `default` para a barra de progresso. */
        PoProgressStatus["Default"] = "default";
        /** Define o status de `error` para a barra de progresso. */
        PoProgressStatus["Error"] = "error";
        /** Define o status de `success` para a barra de progresso. */
        PoProgressStatus["Success"] = "success";
    })(exports.PoProgressStatus || (exports.PoProgressStatus = {}));

    var poProgressMaxValue = 100;
    var poProgressMinValue = 0;
    /**
     * @description
     *
     * Componente de barra de progresso que possibilita exibir visualmente o progresso/carregamento de uma tarefa.
     *
     * Este componente pode ser utilizado no *upload* de arquivos, uma atualização no sistema ou o processamento de uma imagem.
     */
    var PoProgressBaseComponent = /** @class */ (function () {
        function PoProgressBaseComponent() {
            /**
             * @optional
             *
             * @description
             *
             * Status da barra de progresso que indicará visualmente ao usuário
             * o andamento, por exemplo, se a mesma foi concluída com sucesso.
             *
             * @default `PoProgressStatus.Default`
             */
            this.status = exports.PoProgressStatus.Default;
            /**
             * @optional
             *
             * @description
             *
             * Evento que será disparado ao clicar no ícone de cancelamento ("x") na parte inferior da barra de progresso.
             *
             * Ao ser disparado, a função receberá como parâmetro o status atual da barra de progresso.
             *
             * > Se nenhuma função for passada para o evento ou a barra de progresso estiver com o status `PoProgressStatus.Success`,
             * o ícone de cancelamento não será exibido.
             */
            this.cancel = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento que será disparado ao clicar no ícone de tentar novamente na parte inferior da barra de progresso.
             *
             * > o ícone será exibido apenas se informar uma função neste evento e o status da barra de progresso for
             * `PoProgressStatus.Error`.
             */
            this.retry = new i0.EventEmitter();
            this._value = 0;
        }
        Object.defineProperty(PoProgressBaseComponent.prototype, "indeterminate", {
            get: function () {
                return this._indeterminate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita o modo indeterminado na barra de progresso, que mostra uma animação fixa sem um valor estabelecido.
             *
             * Esta opção pode ser utilizada quando não souber quanto tempo levará para que um processo seja concluído.
             *
             * > Caso esta propriedade e a `p-value` seja habilitada, a propriedade `p-value` será ignorada.
             *
             * @default `false`
             */
            set: function (indeterminate) {
                this._indeterminate = convertToBoolean(indeterminate);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoProgressBaseComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            /**
             * @optional
             *
             * @description
             *
             * Valor que representará o progresso.
             *
             * > Os valores aceitos são números inteiros de `0` à `100`.
             *
             * @default `0`
             */
            set: function (value) {
                var integerValue = convertToInt(value, poProgressMinValue);
                var isProgressRangeValue = this.isProgressRangeValue(integerValue);
                this._value = isProgressRangeValue ? integerValue : poProgressMinValue;
            },
            enumerable: false,
            configurable: true
        });
        PoProgressBaseComponent.prototype.isProgressRangeValue = function (value) {
            return value >= poProgressMinValue && value <= poProgressMaxValue;
        };
        return PoProgressBaseComponent;
    }());
    PoProgressBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoProgressBaseComponent.propDecorators = {
        info: [{ type: i0.Input, args: ['p-info',] }],
        infoIcon: [{ type: i0.Input, args: ['p-info-icon',] }],
        status: [{ type: i0.Input, args: ['p-status',] }],
        text: [{ type: i0.Input, args: ['p-text',] }],
        cancel: [{ type: i0.Output, args: ['p-cancel',] }],
        retry: [{ type: i0.Output, args: ['p-retry',] }],
        indeterminate: [{ type: i0.Input, args: ['p-indeterminate',] }],
        value: [{ type: i0.Input, args: ['p-value',] }]
    };

    /**
     * @docsExtends PoProgressBaseComponent
     *
     * @example
     * <example name="po-progress-basic" title="PO Progress Basic">
     *   <file name="sample-po-progress-basic/sample-po-progress-basic.component.html"> </file>
     *   <file name="sample-po-progress-basic/sample-po-progress-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-progress-labs" title="PO Progress Labs">
     *   <file name="sample-po-progress-labs/sample-po-progress-labs.component.html"> </file>
     *   <file name="sample-po-progress-labs/sample-po-progress-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-progress-publication" title="PO Progress - Publication">
     *   <file name="sample-po-progress-publication/sample-po-progress-publication.component.html"> </file>
     *   <file name="sample-po-progress-publication/sample-po-progress-publication.component.ts"> </file>
     * </example>
     */
    var PoProgressComponent = /** @class */ (function (_super) {
        __extends(PoProgressComponent, _super);
        function PoProgressComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PoProgressComponent.prototype, "isAllowCancel", {
            get: function () {
                return !!this.cancel.observers.length && this.status !== exports.PoProgressStatus.Success;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoProgressComponent.prototype, "isAllowProgressInfo", {
            get: function () {
                return !!(this.info || this.infoIcon || this.isAllowCancel || this.isAllowRetry);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoProgressComponent.prototype, "isAllowRetry", {
            get: function () {
                return !!this.retry.observers.length && this.status === exports.PoProgressStatus.Error;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoProgressComponent.prototype, "statusClass", {
            get: function () {
                if (this.status === exports.PoProgressStatus.Success) {
                    return 'po-progress-success';
                }
                if (this.status === exports.PoProgressStatus.Error) {
                    return 'po-progress-error';
                }
                return 'po-progress-default';
            },
            enumerable: false,
            configurable: true
        });
        PoProgressComponent.prototype.emitCancellation = function () {
            this.cancel.emit(this.status);
        };
        PoProgressComponent.prototype.emitRetry = function () {
            this.retry.emit();
        };
        return PoProgressComponent;
    }(PoProgressBaseComponent));
    PoProgressComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-progress',
                    template: "<div class=\"po-progress\" [ngClass]=\"statusClass\">\r\n  <label *ngIf=\"text\" class=\"po-progress-description-mobile po-progress-description-text\">\r\n    {{ text }}\r\n  </label>\r\n\r\n  <po-progress-bar class=\"po-progress-bar\" [p-indeterminate]=\"indeterminate\" [p-value]=\"value\"> </po-progress-bar>\r\n\r\n  <div *ngIf=\"text\" class=\"po-progress-description\">\r\n    <label class=\"po-progress-description-text\">\r\n      {{ text }}\r\n    </label>\r\n  </div>\r\n\r\n  <div *ngIf=\"isAllowProgressInfo\" class=\"po-progress-info\">\r\n    <span *ngIf=\"infoIcon\" class=\"po-progress-info-icon po-icon {{ infoIcon }}\"></span>\r\n    <span *ngIf=\"info\" class=\"po-progress-info-text\">{{ info }}</span>\r\n\r\n    <button\r\n      *ngIf=\"isAllowRetry\"\r\n      class=\"po-progress-info-icon-action po-icon po-icon-refresh po-clickable\"\r\n      (click)=\"emitRetry()\"\r\n    ></button>\r\n\r\n    <button\r\n      *ngIf=\"isAllowCancel\"\r\n      class=\"po-progress-info-icon-action po-icon po-icon-close po-clickable\"\r\n      (click)=\"emitCancellation()\"\r\n    ></button>\r\n  </div>\r\n</div>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];

    /**
     * @description
     *
     * Módulo do componente `po-progress`.
     */
    var PoProgressModule = /** @class */ (function () {
        function PoProgressModule() {
        }
        return PoProgressModule;
    }());
    PoProgressModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    exports: [PoProgressComponent],
                    declarations: [PoProgressBarComponent, PoProgressComponent]
                },] }
    ];

    /**
     * @description
     *
     * Módulo do serviço `po-active-overlay`.
     */
    var PoActiveOverlayModule = /** @class */ (function () {
        function PoActiveOverlayModule() {
        }
        return PoActiveOverlayModule;
    }());
    PoActiveOverlayModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [PoActiveOverlayService],
                    bootstrap: []
                },] }
    ];

    var PoColorPaletteService = /** @class */ (function () {
        function PoColorPaletteService() {
        }
        PoColorPaletteService.prototype.getColor = function (value) {
            return Object.values(PoColorPaletteEnum).includes(value.color)
                ? value.color
                : this.getColorFromType(value.type || value.color);
        };
        PoColorPaletteService.prototype.getColorFromType = function (type) {
            switch (type) {
                case 'danger':
                    return PoColorPaletteEnum.Color07;
                case 'success':
                    return PoColorPaletteEnum.Color11;
                case 'warning':
                    return PoColorPaletteEnum.Color08;
                default:
                    return PoColorPaletteEnum.Color01;
            }
        };
        return PoColorPaletteService;
    }());
    PoColorPaletteService.decorators = [
        { type: i0.Injectable }
    ];

    /**
     * @description
     *
     * Módulo do serviço `po-color-palette`.
     */
    var PoColorPaletteModule = /** @class */ (function () {
        function PoColorPaletteModule() {
        }
        return PoColorPaletteModule;
    }());
    PoColorPaletteModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [PoColorPaletteService],
                    bootstrap: []
                },] }
    ];

    var PoComponentInjectorService = /** @class */ (function () {
        function PoComponentInjectorService(componentResolver, applicationRef, injector) {
            this.componentResolver = componentResolver;
            this.applicationRef = applicationRef;
            this.injector = injector;
        }
        // Cria um dinamicamente no ApplicationRef
        PoComponentInjectorService.prototype.createComponentInApplication = function (component) {
            var componentRef = this.componentResolver.resolveComponentFactory(component).create(this.injector);
            this.applicationRef.attachView(componentRef.hostView);
            var domElem = componentRef.hostView.rootNodes[0];
            document.body.appendChild(domElem);
            return componentRef;
        };
        // Destrói o componente e remove do ApplicationRef
        PoComponentInjectorService.prototype.destroyComponentInApplication = function (componentRef) {
            this.applicationRef.detachView(componentRef.hostView);
            componentRef.destroy();
        };
        return PoComponentInjectorService;
    }());
    PoComponentInjectorService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PoComponentInjectorService_Factory() { return new PoComponentInjectorService(i0__namespace.ɵɵinject(i0__namespace.ComponentFactoryResolver), i0__namespace.ɵɵinject(i0__namespace.ApplicationRef), i0__namespace.ɵɵinject(i0__namespace.INJECTOR)); }, token: PoComponentInjectorService, providedIn: "root" });
    PoComponentInjectorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PoComponentInjectorService.ctorParameters = function () { return [
        { type: i0.ComponentFactoryResolver },
        { type: i0.ApplicationRef },
        { type: i0.Injector }
    ]; };

    var PoComponentInjectorModule = /** @class */ (function () {
        function PoComponentInjectorModule() {
        }
        return PoComponentInjectorModule;
    }());
    PoComponentInjectorModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [PoComponentInjectorService],
                    bootstrap: []
                },] }
    ];

    /**
     * @description
     *
     * Módulo do serviço po-control-position.
     */
    var PoControlPositionModule = /** @class */ (function () {
        function PoControlPositionModule() {
        }
        return PoControlPositionModule;
    }());
    PoControlPositionModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [PoControlPositionService]
                },] }
    ];

    /**
     * @docsPrivate
     *
     * @usedBy PoDialogService
     *
     * @description
     * Enums para as ações do componente po-dialog-base.service.
     */
    exports.PoDialogType = void 0;
    (function (PoDialogType) {
        // Enum para alert
        PoDialogType[PoDialogType["Alert"] = 0] = "Alert";
        // Enum para confirm
        PoDialogType[PoDialogType["Confirm"] = 1] = "Confirm";
    })(exports.PoDialogType || (exports.PoDialogType = {}));

    var poDialogAlertLiteralsDefault = {
        en: { ok: 'Ok' },
        es: { ok: 'Ok' },
        pt: { ok: 'Ok' },
        ru: { ok: 'Ок' }
    };
    var poDialogConfirmLiteralsDefault = {
        en: { cancel: 'Cancel', confirm: 'Confirm' },
        es: { cancel: 'Cancelar', confirm: 'Confirmar' },
        pt: { cancel: 'Cancelar', confirm: 'Confirmar' },
        ru: { cancel: 'отменить', confirm: 'подтвердить' }
    };
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que serve como container do po-dialog.service
     */
    var PoDialogComponent = /** @class */ (function () {
        function PoDialogComponent(languageService) {
            // Objeto primary do poModal
            this.primaryAction = { label: 'ok', action: function () { } };
            this.language = languageService.getShortLanguage();
        }
        PoDialogComponent.prototype.ngOnDestroy = function () {
            this.closeSubscription.unsubscribe();
        };
        PoDialogComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.closeSubscription = this.poModal.onXClosed.subscribe(function (close) { return _this.close(true); });
        };
        // Fecha o poModal
        PoDialogComponent.prototype.close = function (xClosed) {
            if (xClosed === void 0) { xClosed = false; }
            if (xClosed && this.closeAction) {
                this.closeAction();
            }
            this.poModal.close();
            this.destroy();
        };
        PoDialogComponent.prototype.destroy = function () {
            if (this.componentRef) {
                this.componentRef.destroy();
            }
        };
        // Insere os valores recebidos de this.open para o poModal
        PoDialogComponent.prototype.configDialog = function (primaryLabel, primaryAction, secondaryLabel, secondaryAction, closeAction) {
            var _this = this;
            this.primaryAction = {
                label: primaryLabel,
                action: function () {
                    if (primaryAction) {
                        primaryAction();
                    }
                    _this.close();
                }
            };
            if (secondaryLabel) {
                this.secondaryAction = {
                    label: secondaryLabel,
                    action: function () {
                        if (secondaryAction) {
                            secondaryAction();
                        }
                        _this.close();
                    }
                };
            }
            this.closeAction = closeAction;
        };
        // Insere os valores recebidos de po-dialog.service de acordo com o tipo de diálago solicitado
        PoDialogComponent.prototype.open = function (dialogOptions, dialogType, componentRef) {
            this.title = dialogOptions.title;
            this.message = dialogOptions.message;
            this.componentRef = componentRef;
            this.setDialogLiterals(dialogOptions, dialogType);
            switch (dialogType) {
                case exports.PoDialogType.Confirm: {
                    this.configDialog(this.literalsConfirm.confirm, dialogOptions.confirm, this.literalsConfirm.cancel, dialogOptions.cancel, dialogOptions.close);
                    break;
                }
                case exports.PoDialogType.Alert: {
                    this.configDialog(this.literalsAlert.ok, dialogOptions.ok);
                    break;
                }
            }
            this.poModal.open();
        };
        PoDialogComponent.prototype.setDialogLiterals = function (dialogOptions, dialogType) {
            var alertLiterals = poDialogAlertLiteralsDefault;
            var confirmLiterals = poDialogConfirmLiteralsDefault;
            var literals = dialogOptions.literals;
            if (dialogType === exports.PoDialogType.Alert) {
                this.literalsAlert = Object.assign(Object.assign(Object.assign({}, alertLiterals[poLocaleDefault]), alertLiterals[this.language]), literals);
            }
            else {
                this.literalsConfirm = Object.assign(Object.assign(Object.assign({}, confirmLiterals[poLocaleDefault]), confirmLiterals[this.language]), literals);
            }
        };
        return PoDialogComponent;
    }());
    PoDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    template: "<po-modal [p-title]=\"title\" [p-primary-action]=\"primaryAction\" [p-secondary-action]=\"secondaryAction\">\r\n  <div [innerHtml]=\"message\"></div>\r\n</po-modal>\r\n"
                },] }
    ];
    PoDialogComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoDialogComponent.propDecorators = {
        poModal: [{ type: i0.ViewChild, args: [PoModalComponent, { static: true },] }]
    };

    /**
     * @description
     *
     * O po-dialog é um serviço para exibição de caixas de diálogo, é possível customiza-los passando alguns parâmetros de acordo com a
     * necessidade do desenvolvedor.
     */
    var PoDialogBaseService = /** @class */ (function () {
        function PoDialogBaseService() {
        }
        /** Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento. */
        PoDialogBaseService.prototype.confirm = function (confirmOptions) {
            this.openDialog(exports.PoDialogType.Confirm, confirmOptions);
        };
        /** Exibe um diálogo de alerta. */
        PoDialogBaseService.prototype.alert = function (alertOptions) {
            this.openDialog(exports.PoDialogType.Alert, alertOptions);
        };
        return PoDialogBaseService;
    }());

    /**
     * @docsExtends PoDialogBaseService
     *
     * @example
     *
     * <example name="po-dialog-basic" title="PO Dialog Basic">
     *  <file name="sample-po-dialog-basic/sample-po-dialog-basic.component.html"> </file>
     *  <file name="sample-po-dialog-basic/sample-po-dialog-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-dialog-labs" title="PO Dialog Labs">
     *  <file name="sample-po-dialog-labs/sample-po-dialog-labs.component.html"> </file>
     *  <file name="sample-po-dialog-labs/sample-po-dialog-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-dialog-cancel-credit-card" title="PO Dialog - Cancel Credit Card">
     *  <file name="sample-po-dialog-cancel-credit-card/sample-po-dialog-cancel-credit-card.component.html"> </file>
     *  <file name="sample-po-dialog-cancel-credit-card/sample-po-dialog-cancel-credit-card.component.ts"> </file>
     * </example>
     */
    var PoDialogService = /** @class */ (function (_super) {
        __extends(PoDialogService, _super);
        function PoDialogService(poComponentInjector) {
            var _this = _super.call(this) || this;
            _this.poComponentInjector = poComponentInjector;
            return _this;
        }
        PoDialogService.prototype.openDialog = function (dialogType, dialogOptions) {
            var componentRef = this.poComponentInjector.createComponentInApplication(PoDialogComponent);
            componentRef.changeDetectorRef.detectChanges();
            componentRef.instance.open(dialogOptions, dialogType, componentRef);
        };
        return PoDialogService;
    }(PoDialogBaseService));
    PoDialogService.decorators = [
        { type: i0.Injectable }
    ];
    PoDialogService.ctorParameters = function () { return [
        { type: PoComponentInjectorService }
    ]; };

    var PoDialogModule = /** @class */ (function () {
        function PoDialogModule() {
        }
        return PoDialogModule;
    }());
    PoDialogModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [PoDialogComponent],
                    imports: [PoModalModule],
                    exports: [PoDialogComponent],
                    providers: [PoDialogService]
                },] }
    ];

    /**
     * @description
     *
     * O pipe po-i18n é responsável por tratar literais parâmetrizadas, dando mais flexibilidade as literais de tradução.
     * O número de parâmetros inseridos nas literais deve coincidir com a quantia de parâmetros passados por parâmetro,
     * os parâmetros serão substituidos de acordo com a ordem informada.
     *
     * Para inserir um parâmetro em uma literal, o mesmo deverá ser inserido entre chaves dentro da literal e posicionado
     * de acordo como deve ser exibido após a sua transformação.
     *
     * ```
     * const i18nPT = {
     *   pagination: 'Página {1} de {2} páginas.',
     *   totalPages: 'Total de {totalPages} encontradas.'
     * };
     * ```
     *
     * É possível passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem
     * informada na literal.
     *
     * ```
     * {{ i18nPT.pagination | poI18n:[1,10] }}
     * {{ i18nPT.totalPages | poI18n:10 }}
     * ```
     */
    var PoI18nBasePipe = /** @class */ (function () {
        function PoI18nBasePipe() {
        }
        PoI18nBasePipe.prototype.transform = function (value, args) {
            var e_1, _a;
            if (!value) {
                return '';
            }
            if (!(args instanceof Array)) {
                args = [args];
            }
            try {
                for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
                    var arg = args_1_1.value;
                    value = value.replace(/(\{\w*\})+/, arg);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return value;
        };
        return PoI18nBasePipe;
    }());

    /**
     * @docsExtends PoI18nBasePipe
     *
     * @example
     * <example name='po-i18n-pipe-labs' title='PO i18n Pipe Labs' >
     *  <file name='sample-po-i18n-pipe-labs.component.html'> </file>
     *  <file name='sample-po-i18n-pipe-labs.component.ts'> </file>
     *  <file name='sample-po-i18n-pipe.component.html'> </file>
     *  <file name='sample-po-i18n-pipe.component.ts'> </file>
     * </example>
     */
    var PoI18nPipe = /** @class */ (function (_super) {
        __extends(PoI18nPipe, _super);
        function PoI18nPipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PoI18nPipe;
    }(PoI18nBasePipe));
    PoI18nPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'poI18n'
                },] }
    ];

    /**
     * @docsPrivate
     *
     * Enums para a orientação da notificação, do componente po-toaster-base.component.
     */
    exports.PoToasterOrientation = void 0;
    (function (PoToasterOrientation) {
        /** Orientção do componente fica no rodapé */
        PoToasterOrientation[PoToasterOrientation["Bottom"] = 0] = "Bottom";
        /** Orientção do componente fica no topo */
        PoToasterOrientation[PoToasterOrientation["Top"] = 1] = "Top";
    })(exports.PoToasterOrientation || (exports.PoToasterOrientation = {}));

    /**
     * @docsPrivate
     *
     * @description
     *
     * O componente po-toaster foi construído para exibir notificações para o usuário.
     */
    var PoToasterBaseComponent = /** @class */ (function () {
        function PoToasterBaseComponent() {
            /** Orientação da notificação, a mesma pode ser exibida na parte superior ou inferior da página. */
            this.orientation = exports.PoToasterOrientation.Bottom;
        }
        return PoToasterBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * Enums para os tipos de notificação, do componente po-toaster-base.component.
     */
    exports.PoToasterType = void 0;
    (function (PoToasterType) {
        /** Enum para informações do tipo "Erro" */
        PoToasterType[PoToasterType["Error"] = 0] = "Error";
        /** Enum para informações do tipo "Informação" */
        PoToasterType[PoToasterType["Information"] = 1] = "Information";
        /** Enum para informações do tipo "Sucesso" */
        PoToasterType[PoToasterType["Success"] = 2] = "Success";
        /** Enum para informações do tipo "Atenção" */
        PoToasterType[PoToasterType["Warning"] = 3] = "Warning";
    })(exports.PoToasterType || (exports.PoToasterType = {}));

    /**
     * @docsPrivate
     *
     * @docsExtends PoToasterBaseComponent
     */
    var PoToasterComponent = /** @class */ (function (_super) {
        __extends(PoToasterComponent, _super);
        function PoToasterComponent(languageService, changeDetector, elementeRef, renderer) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            _this.elementeRef = elementeRef;
            _this.renderer = renderer;
            _this.alive = true;
            /* Margem do Toaster referênte à sua orientação e posição*/
            _this.margin = 20;
            /* Observable para monitorar o Close to Toaster */
            _this.observableOnClose = new rxjs.Subject();
            /* Posição do Toaster*/
            _this.toasterPosition = 'po-toaster-bottom';
            return _this;
        }
        PoToasterComponent.prototype.ngOnDestroy = function () {
            this.alive = false;
        };
        PoToasterComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            setTimeout(function () { return _this.renderer.addClass(_this.toaster.nativeElement, 'po-toaster-visible'); });
        };
        /* Muda a posição do Toaster na tela*/
        PoToasterComponent.prototype.changePosition = function (position) {
            this.elementeRef.nativeElement.style.display = 'table';
            this.margin = 6 + 44 * position + position * 6;
            if (this.orientation === exports.PoToasterOrientation.Top) {
                this.toaster.nativeElement.style.top = this.margin + 'px';
            }
            else {
                this.toaster.nativeElement.style.bottom = this.margin + 'px';
            }
        };
        /* Fecha o componente Toaster */
        PoToasterComponent.prototype.close = function () {
            this.observableOnClose.next(true);
        };
        PoToasterComponent.prototype.setFadeOut = function () {
            this.renderer.removeClass(this.toaster.nativeElement, 'po-toaster-visible');
            this.renderer.addClass(this.toaster.nativeElement, 'po-toaster-invisible');
        };
        /* Configura o Toaster com os atributos passados para ele */
        PoToasterComponent.prototype.configToaster = function (poToaster) {
            this.type = poToaster.type;
            this.message = poToaster.message;
            this.orientation = poToaster.orientation;
            this.position = poToaster.position;
            this.action = poToaster.action;
            this.actionLabel = poToaster.actionLabel;
            this.componentRef = poToaster.componentRef;
            /* Muda a orientação do Toaster */
            if (this.orientation === exports.PoToasterOrientation.Top) {
                this.toasterPosition = 'po-toaster-top';
            }
            /* Muda a posição do Toaster */
            this.changePosition(this.position);
            /* Switch para o tipo de Toaster */
            switch (this.type) {
                case exports.PoToasterType.Error: {
                    this.toasterType = 'po-toaster-error';
                    this.icon = 'po-icon-warning';
                    break;
                }
                case exports.PoToasterType.Information: {
                    this.toasterType = 'po-toaster-info';
                    this.icon = 'po-icon-info';
                    break;
                }
                case exports.PoToasterType.Success: {
                    this.toasterType = 'po-toaster-success';
                    this.icon = 'po-icon-ok';
                    break;
                }
                case exports.PoToasterType.Warning: {
                    this.toasterType = 'po-toaster-warning';
                    this.icon = 'po-icon-warning';
                    break;
                }
            }
            this.changeDetector.detectChanges();
        };
        PoToasterComponent.prototype.getIcon = function () {
            return this.icon;
        };
        PoToasterComponent.prototype.getToasterPosition = function () {
            return this.toasterPosition;
        };
        PoToasterComponent.prototype.getToasterType = function () {
            return this.toasterType;
        };
        PoToasterComponent.prototype.onButtonClose = function (event) {
            event.preventDefault();
            event.stopPropagation();
            if (this.action && !this.actionLabel) {
                this.poToasterAction(event);
            }
            else {
                this.close();
            }
        };
        /* Chama a função passada pelo atributo `action` */
        PoToasterComponent.prototype.poToasterAction = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.action(this);
        };
        return PoToasterComponent;
    }(PoToasterBaseComponent));
    PoToasterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-toaster',
                    template: "<div #toaster class=\"po-toaster {{ getToasterType() }} {{ getToasterPosition() }} po-clickable\" (click)=\"close()\">\r\n  <div class=\"po-toaster-icon\">\r\n    <span class=\"po-icon {{ getIcon() }}\"></span>\r\n  </div>\r\n\r\n  <div class=\"po-toaster-message\">{{ message }}</div>\r\n\r\n  <div *ngIf=\"action && actionLabel\" (click)=\"poToasterAction($event)\" class=\"po-toaster-action\">\r\n    {{ actionLabel }}\r\n  </div>\r\n\r\n  <button class=\"po-toaster-close\" (click)=\"onButtonClose($event)\">\r\n    <span class=\"po-icon po-icon-close\"></span>\r\n  </button>\r\n</div>\r\n"
                },] }
    ];
    PoToasterComponent.ctorParameters = function () { return [
        { type: PoLanguageService },
        { type: i0.ChangeDetectorRef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    PoToasterComponent.propDecorators = {
        toaster: [{ type: i0.ViewChild, args: ['toaster',] }]
    };

    var PoNotificationModule = /** @class */ (function () {
        function PoNotificationModule() {
        }
        return PoNotificationModule;
    }());
    PoNotificationModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [PoToasterComponent],
                    imports: [common.CommonModule],
                    exports: [],
                    providers: [],
                    bootstrap: []
                },] }
    ];

    var PoServicesModule = /** @class */ (function () {
        function PoServicesModule() {
        }
        return PoServicesModule;
    }());
    PoServicesModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [PoI18nPipe],
                    imports: [
                        PoActiveOverlayModule,
                        PoColorPaletteModule,
                        PoComponentInjectorModule,
                        PoControlPositionModule,
                        PoDateTimeModule,
                        PoDialogModule,
                        PoLanguageModule,
                        PoNotificationModule
                    ],
                    exports: [
                        PoActiveOverlayModule,
                        PoColorPaletteModule,
                        PoComponentInjectorModule,
                        PoControlPositionModule,
                        PoDateTimeModule,
                        PoDialogModule,
                        PoI18nPipe,
                        PoNotificationModule
                    ],
                    providers: [],
                    bootstrap: []
                },] }
    ];

    var PO_POPOVER_DEFAULT_POSITION = 'right';
    var PO_POPOVER_DEFAULT_TRIGGER = 'click';
    var PO_POPOVER_TRIGGERS = ['click', 'hover'];
    /**
     * @description
     *
     * O componente `po-popover` é um container pequeno recomendado para incluir vários tipos de conteúdo como:
     * gráficos, textos, imagens e inputs. Ele abre sobreposto aos outros componentes.
     *
     * Para mostrar apenas pequenos textos recomenda-se o uso da diretiva
     * [**po-tooltip**](https://po-ui.io/documentation/po-tooltip?view=doc).
     *
     * Para conteúdos maiores recomenda-se o uso do [**po-modal**](https://po-ui.io/documentation/po-modal?view=doc).
     *
     * Ele contém um título e também é possível escolher as posições do popover em relação ao componente pai,
     * as posições permitidas são: `right`, `right-top`, `right-bottom`, `top`, `top-left`, `top-right`,
     * `left`, `left-top`, `left-bottom`, `bottom`, `bottom-left` e `bottom-right`.
     *
     * Também é possível escolher entre os dois eventos que podem abrir o *popover*.
     * Os eventos permitidos são: `click` e `hover`.
     *
     */
    var PoPopoverBaseComponent = /** @class */ (function () {
        function PoPopoverBaseComponent() {
            /** Evento disparado ao fechar o popover. */
            this.closePopover = new i0.EventEmitter();
            // Controla se o popover fica oculto ou visível, por padrão é oculto.
            this.isHidden = true;
            this._hideArrow = false;
            this._position = PO_POPOVER_DEFAULT_POSITION;
            this._trigger = PO_POPOVER_DEFAULT_TRIGGER;
        }
        Object.defineProperty(PoPopoverBaseComponent.prototype, "hideArrow", {
            get: function () {
                return this._hideArrow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita a seta do componente *popover*.
             *
             * @default `false`
             */
            set: function (value) {
                this._hideArrow = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoPopoverBaseComponent.prototype, "position", {
            get: function () {
                return this._position;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a posição que o po-popover abrirá em relação ao componente alvo. Sugere-se que seja
             * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
             * automaticamente para se adequar a tela, caso necessário.
             *
             * Posições válidas:
             * - `right`: Posiciona o po-popover no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o po-popover no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o po-popover no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o po-popover abaixo do componente alvo.
             * - `bottom-left`: Posiciona o po-popover abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o po-popover abaixo e à direita do componente alvo.
             * - `left`: Posiciona o po-popover no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o po-popover no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o po-popover no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o po-popover acima do componente alvo.
             * - `top-right`: Posiciona o po-popover acima e à direita do componente alvo.
             * - `top-left`: Posiciona o po-popover acima e à esquerda do componente alvo.
             *
             *
             * @default right
             */
            set: function (value) {
                this._position = PO_CONTROL_POSITIONS.includes(value) ? value : PO_POPOVER_DEFAULT_POSITION;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoPopoverBaseComponent.prototype, "trigger", {
            get: function () {
                return this._trigger;
            },
            /**
             * @description
             *
             * Define o evento que abrirá o po-popover.
             *
             * Valores válidos:
             *  - `click`: Abre ao clicar no componente alvo.
             *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
             *
             * @default click
             * @optional
             */
            set: function (value) {
                this._trigger = PO_POPOVER_TRIGGERS.includes(value) ? value : PO_POPOVER_DEFAULT_TRIGGER;
            },
            enumerable: false,
            configurable: true
        });
        return PoPopoverBaseComponent;
    }());
    PoPopoverBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoPopoverBaseComponent.propDecorators = {
        target: [{ type: i0.Input, args: ['p-target',] }],
        title: [{ type: i0.Input, args: ['p-title',] }],
        closePopover: [{ type: i0.Output, args: ['p-close',] }],
        hideArrow: [{ type: i0.Input, args: ['p-hide-arrow',] }],
        position: [{ type: i0.Input, args: ['p-position',] }],
        trigger: [{ type: i0.Input, args: ['p-trigger',] }]
    };

    /**
     *
     * @docsExtends PoPopoverBaseComponent
     *
     * @example
     *
     * <example name="po-popover-basic" title="PO Popover Basic">
     *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.html"> </file>
     *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-popover-labs" title="PO Popover Labs">
     *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.html"> </file>
     *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-popover-credit-card" title="PO Popover - Credit Card">
     *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.html"> </file>
     *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.ts"> </file>
     * </example>
     */
    var PoPopoverComponent = /** @class */ (function (_super) {
        __extends(PoPopoverComponent, _super);
        function PoPopoverComponent(renderer, poControlPosition) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.poControlPosition = poControlPosition;
            _this.arrowDirection = 'left';
            return _this;
        }
        PoPopoverComponent.prototype.ngAfterViewInit = function () {
            this.targetElement = this.target instanceof i0.ElementRef ? this.target.nativeElement : this.target;
            this.initEventListenerFunction();
            this.setElementsControlPosition();
            this.setRendererListenInit();
        };
        PoPopoverComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        PoPopoverComponent.prototype.close = function () {
            this.isHidden = true;
            this.closePopover.emit();
        };
        PoPopoverComponent.prototype.debounceResize = function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(function () {
                _this.setPopoverPosition();
            }, 200);
        };
        PoPopoverComponent.prototype.open = function () {
            var _this = this;
            this.addScrollEventListener();
            this.isHidden = false;
            this.setOpacity(0);
            setTimeout(function () {
                _this.setElementsControlPosition();
                _this.setPopoverPosition();
                _this.setOpacity(1);
            });
        };
        PoPopoverComponent.prototype.setOpacity = function (value) {
            this.popoverElement.nativeElement.style.opacity = value;
        };
        PoPopoverComponent.prototype.setPopoverPosition = function () {
            this.poControlPosition.adjustPosition(this.position);
            this.arrowDirection = this.poControlPosition.getArrowDirection();
        };
        PoPopoverComponent.prototype.setRendererListenInit = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
                if (!_this.isHidden) {
                    _this.debounceResize();
                }
            });
            if (this.trigger === 'hover') {
                this.mouseEnterListener = this.renderer.listen(this.targetElement, 'mouseenter', function (event) {
                    _this.open();
                });
                this.mouseLeaveListener = this.renderer.listen(this.targetElement, 'mouseleave', function (event) {
                    _this.close();
                });
            }
            else {
                this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
                    _this.togglePopup(event);
                });
            }
        };
        PoPopoverComponent.prototype.togglePopup = function (event) {
            if (!this.isHidden &&
                !this.popoverElement.nativeElement.contains(event.target) &&
                !this.targetElement.contains(event.target)) {
                this.close();
            }
            else if (this.targetElement.contains(event.target)) {
                this.popoverElement.nativeElement.hidden ? this.open() : this.close();
            }
        };
        PoPopoverComponent.prototype.addScrollEventListener = function () {
            window.addEventListener('scroll', this.eventListenerFunction, true);
        };
        PoPopoverComponent.prototype.initEventListenerFunction = function () {
            var _this = this;
            this.eventListenerFunction = function () {
                _this.setPopoverPosition();
            };
        };
        PoPopoverComponent.prototype.removeListeners = function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
            if (this.mouseEnterListener) {
                this.mouseEnterListener();
            }
            if (this.mouseLeaveListener) {
                this.mouseLeaveListener();
            }
            this.resizeListener();
            window.removeEventListener('scroll', this.eventListenerFunction, true);
        };
        PoPopoverComponent.prototype.setElementsControlPosition = function () {
            var popoverOffset = 8;
            this.poControlPosition.setElements(this.popoverElement.nativeElement, popoverOffset, this.target);
        };
        return PoPopoverComponent;
    }(PoPopoverBaseComponent));
    PoPopoverComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-popover',
                    template: "<div [hidden]=\"isHidden\" class=\"po-popover\" #popoverElement>\r\n  <div *ngIf=\"!hideArrow\" class=\"po-popover-arrow po-arrow-{{ arrowDirection }}\"></div>\r\n\r\n  <div class=\"po-popover-content\">\r\n    <span *ngIf=\"title\" class=\"po-popover-title\">{{ title }}</span>\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n",
                    providers: [PoControlPositionService]
                },] }
    ];
    PoPopoverComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: PoControlPositionService }
    ]; };
    PoPopoverComponent.propDecorators = {
        popoverElement: [{ type: i0.ViewChild, args: ['popoverElement', { read: i0.ElementRef, static: true },] }]
    };

    /**
     * @description
     * Módulo do componente po-popover.
     */
    var PoPopoverModule = /** @class */ (function () {
        function PoPopoverModule() {
        }
        return PoPopoverModule;
    }());
    PoPopoverModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [PoPopoverComponent],
                    exports: [PoPopoverComponent]
                },] }
    ];

    /**
     * @docsPrivate
     *
     * @description
     *
     * Pipe responsável por apresentar um horário baseado no formato de entrada definido na API do PO UI.
     */
    var PoTimePipe = /** @class */ (function () {
        function PoTimePipe() {
        }
        PoTimePipe.prototype.transform = function (time, format) {
            var hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\.]?([0-9]{1,6})?$/g;
            if (isTypeof(time, 'string') && hourRegex.test(time)) {
                var amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;
                var miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);
                var formatMiliseconds = this.getFormatMiliseconds(amountOfF);
                return this.formatValue(time, format, formatMiliseconds, miliseconds);
            }
            return null;
        };
        PoTimePipe.prototype.addDotMiliseconds = function (miliseconds, amountOfF) {
            if (miliseconds && amountOfF) {
                miliseconds = '.' + miliseconds;
            }
            return miliseconds;
        };
        PoTimePipe.prototype.formatValue = function (time, format, formatMiliseconds, miliseconds) {
            if (time && format) {
                var hour = time.substring(0, 2);
                var minutes = time.substring(3, 5);
                var seconds = time.substring(6, 8);
                format = format.replace('HH', hour);
                format = format.replace('mm', minutes);
                format = format.replace('ss', seconds);
                format = format.replace("." + formatMiliseconds, miliseconds);
                return format;
            }
            else {
                return time;
            }
        };
        PoTimePipe.prototype.getFormatMiliseconds = function (amountOfF) {
            var formatMiliseconds = '';
            for (var i = 0; i < amountOfF; i++) {
                formatMiliseconds += 'f';
            }
            return formatMiliseconds;
        };
        return PoTimePipe;
    }());
    PoTimePipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'po_time'
                },] }
    ];

    /**
     * @description
     *
     * Módulo do pipe `po-time`.
     */
    var PoTimeModule = /** @class */ (function () {
        function PoTimeModule() {
        }
        return PoTimeModule;
    }());
    PoTimeModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [PoTimePipe],
                    imports: [],
                    exports: [PoTimePipe],
                    providers: [],
                    bootstrap: []
                },] }
    ];

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente responsável por exibir ícones nas colunas.
     */
    var PoTableColumnIconComponent = /** @class */ (function () {
        function PoTableColumnIconComponent() {
            this._icons = [];
        }
        Object.defineProperty(PoTableColumnIconComponent.prototype, "icons", {
            get: function () {
                return this._icons;
            },
            /** Lista de colunas com ícones. */
            set: function (icons) {
                this._icons = this.convertToColumnIcon(icons);
            },
            enumerable: false,
            configurable: true
        });
        PoTableColumnIconComponent.prototype.click = function (columnIcon, event) {
            var isAbleAction = !this.isDisabled(columnIcon);
            if (isAbleAction) {
                if (columnIcon.action) {
                    columnIcon.action(this.row, columnIcon);
                }
                else if (this.column.action) {
                    this.column.action(this.row, columnIcon);
                }
                event.stopPropagation();
            }
        };
        PoTableColumnIconComponent.prototype.getColor = function (column) {
            var color = typeof column.color === 'function' ? column.color(this.row, column) : column.color;
            if (color) {
                return "po-text-" + color;
            }
        };
        PoTableColumnIconComponent.prototype.getIcon = function (column) {
            return column.icon || column.value;
        };
        PoTableColumnIconComponent.prototype.isClickable = function (columnIcon) {
            return !!(!this.isDisabled(columnIcon) && (columnIcon.action || this.column.action));
        };
        PoTableColumnIconComponent.prototype.isDisabled = function (column) {
            return column.disabled ? column.disabled(this.row) : false;
        };
        PoTableColumnIconComponent.prototype.trackByFunction = function (index) {
            return index;
        };
        PoTableColumnIconComponent.prototype.convertToColumnIcon = function (rowIcons) {
            if (Array.isArray(rowIcons)) {
                return rowIcons.map(function (rowIcon) { return (typeof rowIcon === 'string' ? { value: rowIcon } : rowIcon); });
            }
            if (typeof rowIcons === 'string') {
                return [{ value: rowIcons }];
            }
            return [];
        };
        return PoTableColumnIconComponent;
    }());
    PoTableColumnIconComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-table-column-icon',
                    template: "<po-table-icon\r\n  *ngFor=\"let column of icons; trackBy: trackByFunction\"\r\n  [p-clickable]=\"isClickable(column)\"\r\n  [p-color]=\"getColor(column)\"\r\n  [p-disabled]=\"isDisabled(column)\"\r\n  [p-icon]=\"getIcon(column)\"\r\n  [p-icon-tooltip]=\"column.tooltip\"\r\n  (p-click)=\"click(column, $event)\"\r\n>\r\n</po-table-icon>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoTableColumnIconComponent.propDecorators = {
        column: [{ type: i0.Input, args: ['p-column',] }],
        row: [{ type: i0.Input, args: ['p-row',] }],
        icons: [{ type: i0.Input, args: ['p-icons',] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para a criação da representação da legenda, em formato de texto .
     */
    var PoTableColumnLabelComponent = /** @class */ (function () {
        function PoTableColumnLabelComponent(poColorPaletteService) {
            this.poColorPaletteService = poColorPaletteService;
        }
        Object.defineProperty(PoTableColumnLabelComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            /** Objeto com os dados do label */
            set: function (value) {
                if (value) {
                    value.color = this.poColorPaletteService.getColor(value);
                }
                this._value = value;
            },
            enumerable: false,
            configurable: true
        });
        return PoTableColumnLabelComponent;
    }());
    PoTableColumnLabelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-table-column-label',
                    template: "<span [class]=\"'po-table-column-label po-' + value?.color\">\r\n  {{ value?.label }}\r\n</span>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoTableColumnLabelComponent.ctorParameters = function () { return [
        { type: PoColorPaletteService }
    ]; };
    PoTableColumnLabelComponent.propDecorators = {
        value: [{ type: i0.Input, args: ['p-value',] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente responsável por exibir link nas colunas.
     */
    var PoTableColumnLinkComponent = /** @class */ (function () {
        function PoTableColumnLinkComponent() {
        }
        Object.defineProperty(PoTableColumnLinkComponent.prototype, "type", {
            get: function () {
                if (this.disabled) {
                    return 'disabled';
                }
                if (this.action) {
                    return 'action';
                }
                if (isExternalLink(this.link)) {
                    return 'externalLink';
                }
                return 'internalLink';
            },
            enumerable: false,
            configurable: true
        });
        return PoTableColumnLinkComponent;
    }());
    PoTableColumnLinkComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-table-column-link',
                    template: "<ng-container [ngSwitch]=\"type\">\r\n  <p *ngSwitchCase=\"'disabled'\" class=\"po-table-link-disabled\">{{ value }}</p>\r\n  <a *ngSwitchCase=\"'action'\" class=\"po-table-link\" (click)=\"action(value, row)\">{{ value }}</a>\r\n  <a *ngSwitchCase=\"'externalLink'\" class=\"po-table-link\" [href]=\"link\" target=\"_blank\">{{ value }}</a>\r\n  <a *ngSwitchCase=\"'internalLink'\" class=\"po-table-link\" [routerLink]=\"link\">{{ value }}</a>\r\n</ng-container>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoTableColumnLinkComponent.propDecorators = {
        action: [{ type: i0.Input, args: ['p-action',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        link: [{ type: i0.Input, args: ['p-link',] }],
        row: [{ type: i0.Input, args: ['p-row',] }],
        value: [{ type: i0.Input, args: ['p-value',] }]
    };

    var PoTableColumnManagerMaxColumnsDefault = 99999;
    var poTableColumnManagerLiteralsDefault = {
        en: {
            columnsManager: 'Columns manager',
            restoreDefault: 'Restore default'
        },
        es: {
            columnsManager: 'Gerente de columna',
            restoreDefault: 'Restaurar por defecto'
        },
        pt: {
            columnsManager: 'Gerenciador de colunas',
            restoreDefault: 'Restaurar padrão'
        },
        ru: {
            columnsManager: 'менеджер колонок',
            restoreDefault: 'сброс настроек'
        }
    };
    var PoTableColumnManagerComponent = /** @class */ (function () {
        function PoTableColumnManagerComponent(renderer, languageService) {
            this.renderer = renderer;
            this.columns = [];
            this.lastVisibleColumnsSelected = [];
            this.visibleColumnsChange = new i0.EventEmitter();
            // Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
            // O po-table envia como parâmetro um array de string com as colunas visíveis atualizadas. Por exemplo: ["idCard", "name", "hireStatus", "age"].
            this.changeVisibleColumns = new i0.EventEmitter();
            this.columnsOptions = [];
            this.visibleColumns = [];
            this._maxColumns = PoTableColumnManagerMaxColumnsDefault;
            this.defaultColumns = [];
            var language = languageService.getShortLanguage();
            this.literals = Object.assign(Object.assign({}, poTableColumnManagerLiteralsDefault[poLocaleDefault]), poTableColumnManagerLiteralsDefault[language]);
        }
        Object.defineProperty(PoTableColumnManagerComponent.prototype, "maxColumns", {
            get: function () {
                return this._maxColumns;
            },
            set: function (value) {
                this._maxColumns = convertToInt(value, PoTableColumnManagerMaxColumnsDefault);
            },
            enumerable: false,
            configurable: true
        });
        PoTableColumnManagerComponent.prototype.ngOnChanges = function (changes) {
            var columns = changes.columns, maxColumns = changes.maxColumns, target = changes.target;
            if (target && target.firstChange) {
                this.initializeListeners();
            }
            if (columns) {
                this.onChangeColumns(columns);
            }
            if (maxColumns) {
                this.updateValues(this.columns);
            }
        };
        PoTableColumnManagerComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        // aqui chegam os eventos do checkbox e do close do popover que também é disparado no resize
        PoTableColumnManagerComponent.prototype.checkChanges = function (event, emit) {
            if (event === void 0) { event = []; }
            if (emit === void 0) { emit = false; }
            this.verifyToEmitChange(event);
            if (emit) {
                // controla emissões para o dev
                this.verifyToEmitVisibleColumns();
            }
        };
        PoTableColumnManagerComponent.prototype.restore = function () {
            this.restoreDefaultEvent = true;
            var defaultColumns = this.getVisibleColumns(this.defaultColumns);
            this.checkChanges(defaultColumns, this.restoreDefaultEvent);
        };
        PoTableColumnManagerComponent.prototype.verifyToEmitChange = function (event) {
            var newColumns = __spreadArray([], __read(event));
            if (this.allowsChangeVisibleColumns()) {
                this.emitChangesToSelectedColumns(newColumns);
            }
        };
        PoTableColumnManagerComponent.prototype.emitChangesToSelectedColumns = function (newColumns) {
            this.visibleColumns = __spreadArray([], __read(newColumns));
            var visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
            // emite alteração nas colunas selecionadas, porém não emite para o dev.
            this.visibleColumnsChange.emit(visibleTableColumns);
        };
        PoTableColumnManagerComponent.prototype.allowsChangeVisibleColumns = function () {
            var visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
            return this.stringify(visibleTableColumns) !== this.stringify(this.columns);
        };
        PoTableColumnManagerComponent.prototype.verifyToEmitVisibleColumns = function () {
            if (this.restoreDefaultEvent) {
                // veio do restore default
                this.verifyRestoreValues();
            }
            else {
                // foi disparado no close popover;
                this.verifyOnClose();
            }
        };
        PoTableColumnManagerComponent.prototype.verifyRestoreValues = function () {
            var defaultColumns = __spreadArray([], __read(this.defaultColumns));
            var defaultVisibleColumns = this.getVisibleColumns(defaultColumns);
            if (this.allowsChangeSelectedColumns(defaultVisibleColumns)) {
                this.emitChangeOnRestore(defaultVisibleColumns);
            }
            this.restoreDefaultEvent = false;
        };
        PoTableColumnManagerComponent.prototype.emitChangeOnRestore = function (defaultVisibleColumns) {
            this.visibleColumns = __spreadArray([], __read(defaultVisibleColumns));
            var visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
            this.visibleColumnsChange.emit(visibleTableColumns);
        };
        PoTableColumnManagerComponent.prototype.allowsChangeSelectedColumns = function (defaultVisibleColumns) {
            var visibleColumns = this.getVisibleColumns(this.columns);
            return !this.isEqualArrays(defaultVisibleColumns, visibleColumns);
        };
        PoTableColumnManagerComponent.prototype.verifyOnClose = function () {
            if (this.allowsEmission()) {
                this.emitVisibleColumns();
            }
        };
        PoTableColumnManagerComponent.prototype.emitVisibleColumns = function () {
            this.lastEmittedValue = __spreadArray([], __read(this.visibleColumns));
            this.changeVisibleColumns.emit(this.visibleColumns);
        };
        PoTableColumnManagerComponent.prototype.allowsEmission = function () {
            var updatedVisibleColumns = this.visibleColumns ? __spreadArray([], __read(this.visibleColumns)) : [];
            var lastEmittedValue = this.lastEmittedValue ? __spreadArray([], __read(this.lastEmittedValue)) : [];
            var lastVisibleColumnsSelected = this.lastVisibleColumnsSelected ? __spreadArray([], __read(this.lastVisibleColumnsSelected)) : [];
            var lastVisibleColumns = this.getVisibleColumns(lastVisibleColumnsSelected);
            return (this.isUpdate(updatedVisibleColumns, lastEmittedValue) ||
                this.isFirstTime(updatedVisibleColumns, lastVisibleColumns));
        };
        PoTableColumnManagerComponent.prototype.isFirstTime = function (updatedVisibleColumns, lastVisibleColumns) {
            return !this.lastEmittedValue && !this.isEqualArrays(updatedVisibleColumns, lastVisibleColumns);
        };
        PoTableColumnManagerComponent.prototype.isUpdate = function (updatedVisibleColumns, lastEmittedValue) {
            return this.lastEmittedValue && !this.isEqualArrays(updatedVisibleColumns, lastEmittedValue);
        };
        PoTableColumnManagerComponent.prototype.isEqualArrays = function (first, second) {
            var one = first ? __spreadArray([], __read(first)) : [];
            var two = second ? __spreadArray([], __read(second)) : [];
            var firstSort = one.slice().sort();
            var secondSort = two.slice().sort();
            var firstString = JSON.stringify(firstSort);
            var secondString = JSON.stringify(secondSort);
            return firstString === secondString;
        };
        // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
        PoTableColumnManagerComponent.prototype.disableColumnsOptions = function (columns) {
            var _this = this;
            if (columns === void 0) { columns = []; }
            return columns.map(function (column) { return (Object.assign(Object.assign({}, column), { disabled: _this.isDisableColumn(column.value) })); });
        };
        PoTableColumnManagerComponent.prototype.getColumnTitleLabel = function (column) {
            return column.label || capitalizeFirstLetter(column.property);
        };
        /** Retorna um Array de column.property das colunas que são visiveis. */
        PoTableColumnManagerComponent.prototype.getVisibleColumns = function (columns) {
            var _this = this;
            var visibleColumns = [];
            columns.forEach(function (column) {
                if (_this.isVisibleColumn(column, visibleColumns)) {
                    visibleColumns = __spreadArray(__spreadArray([], __read(visibleColumns)), [column.property]);
                }
            });
            return visibleColumns;
        };
        PoTableColumnManagerComponent.prototype.isVisibleColumn = function (column, visibleColumns) {
            return column.visible !== false && visibleColumns.length < this.maxColumns && column.type !== 'detail';
        };
        /** Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas. */
        PoTableColumnManagerComponent.prototype.getVisibleTableColumns = function (visibleColumns) {
            var columns = this.columns ? __spreadArray([], __read(this.columns)) : [];
            return columns.map(function (column) { return (Object.assign(Object.assign({}, column), { visible: visibleColumns.includes(column.property) || column.type === 'detail' })); });
        };
        PoTableColumnManagerComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function () {
                if (_this.popover && !_this.popover.isHidden) {
                    _this.popover.close();
                }
            });
        };
        PoTableColumnManagerComponent.prototype.isDisableColumn = function (property) {
            return this.visibleColumns.length >= this.maxColumns ? !this.visibleColumns.includes(property) : false;
        };
        PoTableColumnManagerComponent.prototype.mapTableColumnsToCheckboxOptions = function (columns) {
            var _this = this;
            if (columns === void 0) { columns = []; }
            var tableColumns = __spreadArray([], __read(columns));
            var columnsOptions = [];
            tableColumns.forEach(function (column) {
                if (column.type !== 'detail') {
                    columnsOptions.push({
                        value: column.property,
                        label: _this.getColumnTitleLabel(column),
                        disabled: _this.isDisableColumn(column.property)
                    });
                }
            });
            return columnsOptions;
        };
        PoTableColumnManagerComponent.prototype.onChangeColumns = function (columns) {
            var _a = columns.currentValue, currentValue = _a === void 0 ? [] : _a, _b = columns.previousValue, previousValue = _b === void 0 ? [] : _b;
            // atualizara o defaultColumns, quando for a primeira vez ou quando o defaultColumns for diferente do currentValue
            if (!this.lastVisibleColumnsSelected && this.stringify(this.defaultColumns) !== this.stringify(currentValue)) {
                this.defaultColumns = __spreadArray([], __read(currentValue));
            }
            // verifica se o valor anterior é diferente do atual para atualizar as columnsOptions apenas quando for necessario
            if (this.stringify(previousValue) !== this.stringify(currentValue)) {
                this.updateValues(currentValue);
            }
        };
        PoTableColumnManagerComponent.prototype.updateValues = function (currentValue) {
            var visibleColumns = this.getVisibleColumns(currentValue);
            this.visibleColumns = __spreadArray([], __read(visibleColumns));
            var columnsOptions = this.mapTableColumnsToCheckboxOptions(currentValue);
            this.columnsOptions = this.disableColumnsOptions(columnsOptions);
            this.checkChanges(visibleColumns, false);
        };
        PoTableColumnManagerComponent.prototype.removeListeners = function () {
            if (this.resizeListener) {
                this.resizeListener();
            }
        };
        PoTableColumnManagerComponent.prototype.stringify = function (columns) {
            // não faz o stringify da propriedade icon e searchService, pois pode conter objeto complexo e disparar um erro.
            return JSON.stringify(columns, function (key, value) {
                if (key !== 'icon' && key !== 'searchService') {
                    return value;
                }
            });
        };
        return PoTableColumnManagerComponent;
    }());
    PoTableColumnManagerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-table-column-manager',
                    template: "<po-popover #popover *ngIf=\"target\" [p-target]=\"target\" p-position=\"bottom-left\" (p-close)=\"checkChanges([], true)\">\r\n  <div class=\"po-table-column-manager-header\">\r\n    <div class=\"po-table-column-manager-header-title\">{{ literals.columnsManager }}</div>\r\n\r\n    <div class=\"po-table-column-manager-header-close\">\r\n      <button\r\n        class=\"po-table-column-manager-header-close-button po-clickable po-icon po-icon-close\"\r\n        (click)=\"popover.close()\"\r\n      ></button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"po-table-column-manager-body\">\r\n    <po-checkbox-group\r\n      name=\"visibleColumns\"\r\n      [(ngModel)]=\"visibleColumns\"\r\n      p-columns=\"1\"\r\n      [p-options]=\"columnsOptions\"\r\n      (p-change)=\"checkChanges($event, false)\"\r\n    >\r\n    </po-checkbox-group>\r\n  </div>\r\n\r\n  <div class=\"po-table-column-manager-footer\">\r\n    <po-button\r\n      class=\"po-table-column-manager-footer-restore\"\r\n      p-small\r\n      p-type=\"link\"\r\n      [p-label]=\"literals.restoreDefault\"\r\n      (p-click)=\"restore()\"\r\n    >\r\n    </po-button>\r\n  </div>\r\n</po-popover>\r\n"
                },] }
    ];
    PoTableColumnManagerComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: PoLanguageService }
    ]; };
    PoTableColumnManagerComponent.propDecorators = {
        popover: [{ type: i0.ViewChild, args: [PoPopoverComponent,] }],
        columns: [{ type: i0.Input, args: ['p-columns',] }],
        target: [{ type: i0.Input, args: ['p-target',] }],
        lastVisibleColumnsSelected: [{ type: i0.Input, args: ['p-last-visible-columns-selected',] }],
        visibleColumnsChange: [{ type: i0.Output, args: ['p-visible-columns-change',] }],
        changeVisibleColumns: [{ type: i0.Output, args: ['p-change-visible-columns',] }],
        maxColumns: [{ type: i0.Input, args: ['p-max-columns',] }]
    };

    /**
     * @usedBy PoTableComponent
     *
     * @description
     * Tipos de ordenação das colunas da tabela.
     */
    exports.PoTableColumnSortType = void 0;
    (function (PoTableColumnSortType) {
        /** Ordenação ascendente */
        PoTableColumnSortType["Ascending"] = "ascending";
        /** Ordenação descendente */
        PoTableColumnSortType["Descending"] = "descending";
    })(exports.PoTableColumnSortType || (exports.PoTableColumnSortType = {}));

    var PoTableService = /** @class */ (function () {
        function PoTableService(http) {
            this.http = http;
            this.headers = new i1.HttpHeaders({
                'X-PO-No-Message': 'true'
            });
        }
        PoTableService.prototype.getFilteredItems = function (filteredParams) {
            var params = this.validateParams(filteredParams);
            return this.http.get(this.url, { headers: this.headers, params: params });
        };
        PoTableService.prototype.setUrl = function (url) {
            this.url = url;
        };
        PoTableService.prototype.scrollListener = function (componentListner) {
            return rxjs.fromEvent(componentListner, 'scroll').pipe(operators.debounceTime(100));
        };
        PoTableService.prototype.validateParams = function (params) {
            return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
        };
        return PoTableService;
    }());
    PoTableService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PoTableService_Factory() { return new PoTableService(i0__namespace.ɵɵinject(i1__namespace.HttpClient)); }, token: PoTableService, providedIn: "root" });
    PoTableService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PoTableService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    var poTableContainer = ['border', 'shadow'];
    var poTableContainerDefault = 'border';
    var poTableLiteralsDefault = {
        en: {
            noColumns: 'Columns are not defined',
            noData: 'No data found',
            noVisibleColumn: 'No visible column',
            loadingData: 'Loading',
            loadMoreData: 'Load more data',
            seeCompleteSubtitle: 'See complete subtitle',
            completeSubtitle: 'Complete subtitle',
            columnsManager: 'Columns manager'
        },
        es: {
            noColumns: 'Columnas no definidas',
            noData: 'Datos no encontrados',
            noVisibleColumn: 'Sin columnas visibles',
            loadingData: 'Cargando datos',
            loadMoreData: 'Cargar más resultados',
            seeCompleteSubtitle: 'Ver subtitulo completo',
            completeSubtitle: 'Subtitulo completo',
            columnsManager: 'Gerente de columna'
        },
        pt: {
            noColumns: 'Nenhuma definição de colunas',
            noData: 'Nenhum dado encontrado',
            noVisibleColumn: 'Nenhuma coluna visível',
            loadingData: 'Carregando',
            loadMoreData: 'Carregar mais resultados',
            seeCompleteSubtitle: 'Ver legenda completa',
            completeSubtitle: 'Legenda completa',
            columnsManager: 'Gerenciador de colunas'
        },
        ru: {
            noColumns: 'Нет определения столбца',
            noData: 'Данные не найдены',
            noVisibleColumn: 'нет видимых столбцов',
            loadingData: 'погрузка',
            loadMoreData: 'загрузка',
            seeCompleteSubtitle: 'Посмотреть полный субтитр',
            completeSubtitle: 'Полный заголовок',
            columnsManager: 'менеджер колонок'
        }
    };
    /**
     * @description
     *
     * Este componente de tabela é utilizado para exibição de dados com diferentes tipos como por exemplo textos, data, horas e números com
     * formato personalizado.
     *
     * Também é possivel criar tabelas com ordenação de dados, linhas com detalhes, coluna para seleção de linhas, coluna com ações e também
     * carregamento por demanda através do botão **Carregar mais resultados**.
     *
     * > As linhas de detalhes podem também ser customizadas através do [`p-table-row-template`](/documentation/po-table-row-template).
     *
     * > As colunas podem ser customizadas através dos templates [`p-table-column-template`](/documentation/po-table-column-template)
     * e [`p-table-cell-template`](/documentation/po-table-cell-template).
     *
     * O componente permite gerenciar a exibição das colunas dinamicamente. Esta funcionalidade pode ser acessada através do ícone de engrenagem
     * no canto superior direito do cabeçalho da tabela.
     *
     * Caso a largura de todas as colunas forem definidas e o total ultrapassar o tamanho tabela, será exibido um *scroll* na horizontal para a
     * completa visualização dos dados.
     */
    var PoTableBaseComponent = /** @class */ (function () {
        function PoTableBaseComponent(poDate, languageService, poTableService) {
            this.poDate = poDate;
            this.poTableService = poTableService;
            /**
             * @optional
             *
             * @description
             *
             * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
             * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
             * o mesmo será exibido através do [`po-tooltip`](/documentation/po-tooltip).
             */
            this.hideTextOverflow = false;
            /**
             * @optional
             *
             * @description
             *
             * Permite que o gerenciador de colunas, responsável pela definição de quais colunas serão exibidas, seja escondido.
             *
             * @default `false`
             */
            this.hideColumnsManager = false;
            /**
             * @optional
             *
             * @description
             *
             * Permite fechar um detalhe ou row template automaticamente, ao abrir outro item.
             *
             * @default `false`
             */
            this.autoCollapse = false;
            /**
             * @optional
             *
             * @description
             *
             * Permite que seja adicionado o estado de carregamento no botão "Carregar mais resultados".
             *
             * @default `false`
             */
            this.loadingShowMore = false;
            /**
             * @optional
             *
             * @description
             *
             * Habilita em todas as colunas a opção de ordenação de dados. Caso a coluna seja do tipo 'data' ou 'dateTime' a
             * mesma deve respeitar os tipos de entrada definidos para que sejam ordenadas.
             *
             * @default `false`
             */
            this.sort = false;
            /**
             * @description
             *
             * Se verdadeiro, torna habilitado o botão "Carregar mais resultados".
             *
             * @default `false`
             */
            this.showMoreDisabled = false;
            /**
             * @description
             *
             * Habilita ou desabilita o estilo listrado da tabela (`striped`).
             * > Recomendado para tabelas com maior número de dados, facilitando a sua visualização na tabela.
             *
             * @default `false`
             */
            this.striped = false;
            /**
             * @description
             *
             * Esconde o *checkbox* para seleção de todas as linhas.
             *
             * > Sempre receberá *true* caso a seleção de apenas uma linha esteja ativa.
             *
             * @default `false`
             */
            this.hideSelectAll = false;
            /**
             * @description
             *
             * Define que somente uma linha da tabela pode ser selecionada.
             *
             * > Esta definição não se aplica aos itens filhos, os mesmos possuem comportamento independente do item pai.
             */
            this.singleSelect = false;
            /**
             * @optional
             *
             * @description
             * Evento executado quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
             */
            this.allSelected = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             * Evento executado quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
             */
            this.allUnselected = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento executado ao colapsar uma linha do `po-table`.
             *
             * > Como parâmetro o componente envia o item colapsado.
             */
            this.collapsed = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento executado ao expandir uma linha do `po-table`.
             *
             * > Como parâmetro o componente envia o item expandido.
             */
            this.expanded = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento executado ao selecionar uma linha do `po-table`.
             */
            this.selected = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
             * não é visível.
             *
             * Recebe um objeto `{ column, type }` onde:
             *
             * - column (`PoTableColumn`): objeto da coluna que está ordenada.
             * - type (`PoTableColumnSortType`): tipo da ordenação.
             */
            this.showMore = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento executado ao ordenar colunas da tabela.
             *
             * Recebe um objeto `{ column, type }` onde:
             *
             * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.
             * - type (`PoTableColumnSortType`): tipo da ordenação.
             */
            this.sortBy = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             * Evento executado ao desmarcar a seleção de uma linha do `po-table`.
             */
            this.unselected = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             * Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
             *
             * O componente envia como parâmetro um array de string com as colunas visíveis atualizadas.
             * Por exemplo: ["idCard", "name", "hireStatus", "age"].
             */
            this.changeVisibleColumns = new i0.EventEmitter();
            this.hasMainColumns = false;
            this.mainColumns = [];
            this.selectAll = false;
            this.sortedColumn = { property: null, ascending: true };
            this.subtitleColumns = [];
            this.page = 1;
            this.pageSize = 10;
            this.hasService = false;
            this._actions = [];
            this._columns = [];
            this._hideDetail = false;
            this._loading = false;
            this.language = poLocaleDefault;
            this._infiniteScrollDistance = 100;
            this._infiniteScroll = false;
            this.language = languageService.getShortLanguage();
        }
        Object.defineProperty(PoTableBaseComponent.prototype, "items", {
            get: function () {
                return this._items;
            },
            /**
             * @description
             *
             * Lista de itens da tabela.
             * > Se falso, será inicializado como um *array* vazio.
             */
            set: function (items) {
                var _this = this;
                this._items = Array.isArray(items) ? items : [];
                // when haven't items, selectAll should be unchecked.
                if (!this.hasItems) {
                    this.selectAll = false;
                }
                else if (!this.hasColumns) {
                    this.columns = this.getDefaultColumns(items[0]);
                }
                // timeout necessario para os itens serem refletidos na tabela
                setTimeout(function () { return _this.checkInfiniteScroll(); });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "columns", {
            get: function () {
                return this._columns;
            },
            /**
             * @optional
             *
             * @description
             *
             * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.
             * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
             * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
             *
             */
            set: function (columns) {
                this._columns = columns || [];
                if (this._columns.length) {
                    this.setColumnLink();
                    this.calculateWidthHeaders();
                }
                else if (this.hasItems) {
                    this._columns = this.getDefaultColumns(this.items[0]);
                }
                this.onChangeColumns();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "container", {
            get: function () {
                return this._container;
            },
            /**
             * @optional
             *
             * @description
             *
             * Adiciona um contorno arredondado ao `po-table`, as opções são:
             * - `border`: com bordas/linhas.
             * - `shadow`: com sombras.
             *
             * @default `border`
             */
            set: function (value) {
                this._container = poTableContainer.includes(value) ? value : poTableContainerDefault;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "height", {
            get: function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura da tabela em *pixels* e fixa o cabeçalho.
             */
            set: function (height) {
                this._height = height;
                this.calculateWidthHeaders();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "hideDetail", {
            get: function () {
                return this._hideDetail;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita a visualização da lista de detalhes de cada linha da coluna.
             *
             * @default `false`
             */
            set: function (hideDetail) {
                this._hideDetail = hideDetail != null && hideDetail.toString() === '' ? true : convertToBoolean(hideDetail);
                this.calculateWidthHeaders();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poTableLiteralsDefault[this.language];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-table`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoTableLiterals = {
             *    loadMoreData: 'Buscar mais dados',
             *    loadingData: 'Processando',
             *    noColumns: 'Sem colunas',
             *    noData: 'Sem dados',
             *    seeCompleteSubtitle: 'Mostrar legenda completa',
             *    completeSubtitle: 'Todas legendas'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: PoTableLiterals = {
             *    noData: 'Sem dados'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-table
             *   [p-literals]="customLiterals">
             * </po-table>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do
             * [`PoI18nService`](/documentation/po-i18n) ou do browser.
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = Object.assign(Object.assign(Object.assign({}, poTableLiteralsDefault[poLocaleDefault]), poTableLiteralsDefault[this.language]), value);
                }
                else {
                    this._literals = poTableLiteralsDefault[this.language];
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "loading", {
            get: function () {
                return this._loading;
            },
            /**
             * @optional
             *
             * @description
             *
             * Bloqueia a interação do usuário com os dados da _table_.
             *
             * @default `false`
             */
            set: function (loading) {
                this._loading = convertToBoolean(loading);
                this.calculateWidthHeaders();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "actions", {
            get: function () {
                return this._actions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma lista de ações.
             *
             * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
             * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.
             *
             * **A coluna de ações não será exibida quando:**
             *  - a lista conter valores inválidos ou indefinidos.
             *  - tenha uma única ação e a mesma não for visível.
             */
            set: function (actions) {
                this._actions = actions;
                this.calculateWidthHeaders();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "selectable", {
            get: function () {
                return this._selectable;
            },
            /**
             * @optional
             *
             * @description
             *
             * Permite a seleção de linhas na tabela e, caso a propriedade `p-single-select` esteja definida será possível
             * selecionar apenas uma única linha.
             *
             * **Importante:**
             *  - As linhas de detalhe definidas em `PoTableDetail` possuem comportamento independente da linha mestre;
             *  - Cada linha possui por padrão a propriedade dinâmica `$selected`, na qual é possível validar se a linha
             * está selecionada, por exemplo: `item.$selected` ou `item['$selected']`.
             *
             * @default `false`
             */
            set: function (value) {
                this._selectable = value === '' ? true : convertToBoolean(value);
                this.calculateWidthHeaders();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "infiniteScroll", {
            get: function () {
                return this._infiniteScroll;
            },
            /**
             * @optional
             *
             * @description
             *
             * Se verdadeiro, ativa a funcionalidade de scroll infinito para a tabela e o botão "Carregar Mais" deixará de ser exibido. Ao chegar no fim da tabela
             * executará a função `p-show-more`.
             *
             * **Regras de utilização:**
             *  - O scroll infinito só funciona para tabelas que utilizam a propriedade `p-height` e que possuem o scroll já na carga inicial dos dados.
             *
             * @default `false`
             */
            set: function (value) {
                this._infiniteScroll = convertToBoolean(value && this.height > 0);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "infiniteScrollDistance", {
            get: function () {
                return this._infiniteScrollDistance;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o percentual necessário para disparar o evento `p-show-more`, que é responsável por carregar mais dados na tabela. Caso o valor informado seja maior que 100 ou menor
             * que 0, o valor padrão será 100%
             *
             * **Exemplos:**
             *  - p-infinite-scroll-distance = 80: Quando atingir 80%  do scroll da tabela, o `p-show-more` será disparado.
             */
            set: function (value) {
                this._infiniteScrollDistance = value > 100 || value < 0 ? 100 : value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "serviceApi", {
            get: function () {
                return this._serviceApi;
            },
            /**
             * @optional
             *
             * @description
             *
             * URL da API responsável por retornar os registros.
             *
             * Ao realizar a busca de mais registros via paginação (Carregar mais resultados), será enviado os parâmetros `page` e `pageSize`, conforme abaixo:
             *
             * ```
             * url + ?page=1&pageSize=10
             * ```
             *
             * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:
             * - Coluna decrescente:
             * ```
             *  url + ?page=1&pageSize=10&order=-name
             * ```
             *
             * - Coluna ascendente:
             * ```
             *  url + ?page=1&pageSize=10&order=name
             * ```
             *
             * > Esta URL deve retornar e receber os dados no padrão de [API do PO UI](https://po-ui.io/guides/api).
             */
            set: function (service) {
                this._serviceApi = service;
                this.setService(this.serviceApi);
                this.hasService = !!service;
                this.showMoreDisabled = !this.hasService;
                this.page = 1;
                this.initializeData();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "hasColumns", {
            get: function () {
                return this.columns && this.columns.length > 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "hasItems", {
            get: function () {
                return !!(this.items && this.items.length);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "nameColumnDetail", {
            get: function () {
                return this.columnMasterDetail ? this.columnMasterDetail.property : null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "validColumns", {
            get: function () {
                var typesValid = [
                    'string',
                    'number',
                    'boolean',
                    'date',
                    'time',
                    'dateTime',
                    'currency',
                    'subtitle',
                    'link',
                    'label',
                    'icon',
                    'cellTemplate',
                    'columnTemplate'
                ];
                return this.columns.filter(function (col) { return !col.type || typesValid.includes(col.type); });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "sortType", {
            get: function () {
                return this.sortedColumn.ascending ? exports.PoTableColumnSortType.Ascending : exports.PoTableColumnSortType.Descending;
            },
            enumerable: false,
            configurable: true
        });
        PoTableBaseComponent.prototype.ngOnDestroy = function () {
            var _a;
            (_a = this.poTableServiceSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        };
        PoTableBaseComponent.prototype.ngOnChanges = function (changes) {
            if (this.singleSelect || this.hideSelectAll) {
                this.selectAll = false;
                this.hideSelectAll = true;
            }
            if (changes.height) {
                this.calculateHeightTableContainer(this.height);
            }
        };
        PoTableBaseComponent.prototype.selectAllRows = function () {
            var _this = this;
            if (!this.hideSelectAll) {
                this.selectAll = !this.selectAll;
                this.items.forEach(function (item) {
                    item.$selected = _this.selectAll;
                });
                this.emitSelectAllEvents(this.selectAll, __spreadArray([], __read(this.items)));
            }
        };
        PoTableBaseComponent.prototype.selectRow = function (row) {
            row.$selected = !row.$selected;
            this.emitSelectEvents(row);
            this.configAfterSelectRow(this.items, row);
        };
        PoTableBaseComponent.prototype.selectDetailRow = function (row) {
            this.emitSelectEvents(row);
        };
        PoTableBaseComponent.prototype.getClassColor = function (row, column) {
            return column.color ? "po-text-" + this.getColumnColor(row, column) : '';
        };
        PoTableBaseComponent.prototype.toggleDetail = function (row) {
            var rowShowDetail = row.$showDetail;
            if (this.autoCollapse) {
                this.collapseAllItems(this.items);
            }
            this.setShowDetail(row, !rowShowDetail);
            this.emitExpandEvents(row);
        };
        PoTableBaseComponent.prototype.toggleRowAction = function (row) {
            var toggleShowAction = row.$showAction;
            this.items.forEach(function (item) {
                if (item.$showAction) {
                    item.$showAction = false;
                }
            });
            row.$showAction = !toggleShowAction;
        };
        PoTableBaseComponent.prototype.sortColumn = function (column) {
            if (!this.sort || column.type === 'detail' || column.sortable === false) {
                return;
            }
            this.sortedColumn.ascending = this.sortedColumn.property === column ? !this.sortedColumn.ascending : true;
            this.sortArray(column, this.sortedColumn.ascending);
            this.sortBy.emit({ column: column, type: this.sortType });
            if (this.hasService && this.sort) {
                this.sortStore = { column: column, type: this.sortType };
            }
            this.sortedColumn.property = column;
        };
        PoTableBaseComponent.prototype.onShowMore = function () {
            var _this = this;
            var sort = this.sortedColumn.property ? { column: this.sortedColumn.property, type: this.sortType } : undefined;
            if (this.hasService) {
                this.page++;
                this.loading = true;
                this.loadingShowMore = true;
                this.poTableServiceSubscription = this.getFilteredItems().subscribe(function (data) {
                    _this.items = __spreadArray(__spreadArray([], __read(_this.items)), __read(data.items));
                    _this.showMoreDisabled = !data.hasNext;
                    _this.loading = false;
                    _this.loadingShowMore = false;
                });
            }
            this.showMore.emit(sort);
        };
        PoTableBaseComponent.prototype.getFilteredItems = function (queryParams) {
            var filteredParams = this.getFilteredParams(queryParams);
            return this.poTableService.getFilteredItems(filteredParams);
        };
        PoTableBaseComponent.prototype.setTableResponseProperties = function (data) {
            this.items = data.items || [];
            this.showMoreDisabled = !data.hasNext;
            this.loading = false;
        };
        PoTableBaseComponent.prototype.initializeData = function (params) {
            var _this = this;
            if (this.hasService) {
                this.loading = true;
                this.getFilteredItems(params).subscribe(function (data) {
                    _this.setTableResponseProperties(data);
                });
            }
        };
        PoTableBaseComponent.prototype.getDefaultColumns = function (item) {
            var keys = Object.keys(item);
            return keys
                .filter(function (key) { return typeof item[key] !== 'object'; })
                .map(function (key) { return ({ label: capitalizeFirstLetter(key), property: key }); });
        };
        PoTableBaseComponent.prototype.setShowDetail = function (rowIdentifier, isShowDetail) {
            var isRowIndex = typeof rowIdentifier === 'number' && this.items[rowIdentifier];
            var row = isRowIndex ? this.items[rowIdentifier] : rowIdentifier;
            row.$showDetail = isShowDetail;
        };
        PoTableBaseComponent.prototype.collapseAllItems = function (items) {
            var e_1, _b;
            try {
                for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                    var item = items_1_1.value;
                    if (item.$showDetail) {
                        this.setShowDetail(item, false);
                        this.emitExpandEvents(item);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (items_1_1 && !items_1_1.done && (_b = items_1.return)) _b.call(items_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        PoTableBaseComponent.prototype.configAfterSelectRow = function (rows, row) {
            if (this.singleSelect) {
                this.unselectOtherRows(rows, row);
            }
            else if (!this.hideSelectAll) {
                this.selectAll = this.isEverySelected(rows);
            }
        };
        PoTableBaseComponent.prototype.emitExpandEvents = function (row) {
            row.$showDetail ? this.expanded.emit(row) : this.collapsed.emit(row);
        };
        PoTableBaseComponent.prototype.emitSelectAllEvents = function (selectAll, rows) {
            selectAll ? this.allSelected.emit(rows) : this.allUnselected.emit(rows);
        };
        PoTableBaseComponent.prototype.emitSelectEvents = function (row) {
            row.$selected ? this.selected.emit(row) : this.unselected.emit(row);
        };
        PoTableBaseComponent.prototype.getColumnColor = function (row, column) {
            var columnColor = column.color;
            return isTypeof(columnColor, 'function') ? columnColor(row, column.property) : columnColor;
        };
        // Retorna a coluna da lista de colunas que é do tipo detail
        PoTableBaseComponent.prototype.getColumnMasterDetail = function () {
            return this.columns.find(function (col) { return col.type === 'detail'; });
        };
        // Colunas que são inseridas no <head> da tabela
        PoTableBaseComponent.prototype.getMainColumns = function () {
            return this.validColumns.filter(function (col) { return col.visible !== false; });
        };
        // Retorna as colunas com status
        PoTableBaseComponent.prototype.getSubtitleColumns = function () {
            return this.columns.filter(function (col) { return col.type === 'subtitle'; });
        };
        PoTableBaseComponent.prototype.isEverySelected = function (items) {
            var someCheckedOrIndeterminate = function (item) { return item.$selected || item.$selected === null; };
            var everyChecked = function (item) { return item.$selected; };
            if (items.every(everyChecked)) {
                return true;
            }
            if (items.some(someCheckedOrIndeterminate)) {
                return null;
            }
            return false;
        };
        PoTableBaseComponent.prototype.onChangeColumns = function () {
            this.setMainColumns();
            this.setColumnMasterDetail();
            this.setSubtitleColumns();
        };
        PoTableBaseComponent.prototype.setColumnLink = function () {
            this.columns.forEach(function (column) {
                if (column['type'] === 'link' && !column['link']) {
                    column['link'] = 'link';
                }
            });
        };
        PoTableBaseComponent.prototype.setColumnMasterDetail = function () {
            this.columnMasterDetail = this.getColumnMasterDetail();
        };
        PoTableBaseComponent.prototype.setMainColumns = function () {
            this.mainColumns = this.getMainColumns();
            this.hasMainColumns = !!this.mainColumns.length;
            this.allColumnsWidthPixels = this.verifyWidthColumnsPixels();
        };
        PoTableBaseComponent.prototype.setSubtitleColumns = function () {
            this.subtitleColumns = this.getSubtitleColumns();
        };
        PoTableBaseComponent.prototype.sortArray = function (column, ascending) {
            this.items.sort(function (leftSide, rightSide) { return sortValues(leftSide[column.property], rightSide[column.property], ascending); });
        };
        PoTableBaseComponent.prototype.unselectOtherRows = function (rows, row) {
            rows.forEach(function (item) {
                if (item !== row) {
                    item.$selected = false;
                }
            });
        };
        PoTableBaseComponent.prototype.verifyWidthColumnsPixels = function () {
            return this.hasMainColumns ? this.mainColumns.every(function (column) { return column.width && column.width.includes('px'); }) : false;
        };
        PoTableBaseComponent.prototype.setService = function (service) {
            if (service && isTypeof(service, 'string')) {
                this.poTableService.setUrl(service);
            }
        };
        PoTableBaseComponent.prototype.getFilteredParams = function (queryParams) {
            var _b = this, page = _b.page, pageSize = _b.pageSize, sortStore = _b.sortStore;
            var filteredParams = {};
            var order = this.getOrderParam(sortStore);
            var params = Object.assign({ page: page, pageSize: pageSize, order: order }, queryParams);
            for (var key in params) {
                if (params.hasOwnProperty(key) && params[key] !== undefined) {
                    filteredParams[key] = params[key];
                }
            }
            return filteredParams;
        };
        PoTableBaseComponent.prototype.getOrderParam = function (sort) {
            if (sort === void 0) { sort = { type: undefined }; }
            var column = sort.column, type = sort.type;
            if (!column) {
                return;
            }
            if (type === exports.PoTableColumnSortType.Descending) {
                return "-" + column.property;
            }
            return "" + column.property;
        };
        return PoTableBaseComponent;
    }());
    PoTableBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoTableBaseComponent.ctorParameters = function () { return [
        { type: PoDateService },
        { type: PoLanguageService },
        { type: PoTableService }
    ]; };
    PoTableBaseComponent.propDecorators = {
        hideTextOverflow: [{ type: i0.Input, args: ['p-hide-text-overflow',] }],
        hideColumnsManager: [{ type: i0.Input, args: ['p-hide-columns-manager',] }],
        autoCollapse: [{ type: i0.Input, args: ['p-auto-collapse',] }],
        loadingShowMore: [{ type: i0.Input, args: ['p-loading-show-more',] }],
        sort: [{ type: i0.Input, args: ['p-sort',] }],
        showMoreDisabled: [{ type: i0.Input, args: ['p-show-more-disabled',] }],
        striped: [{ type: i0.Input, args: ['p-striped',] }],
        hideSelectAll: [{ type: i0.Input, args: ['p-hide-select-all',] }],
        singleSelect: [{ type: i0.Input, args: ['p-single-select',] }],
        maxColumns: [{ type: i0.Input, args: ['p-max-columns',] }],
        allSelected: [{ type: i0.Output, args: ['p-all-selected',] }],
        allUnselected: [{ type: i0.Output, args: ['p-all-unselected',] }],
        collapsed: [{ type: i0.Output, args: ['p-collapsed',] }],
        expanded: [{ type: i0.Output, args: ['p-expanded',] }],
        selected: [{ type: i0.Output, args: ['p-selected',] }],
        showMore: [{ type: i0.Output, args: ['p-show-more',] }],
        sortBy: [{ type: i0.Output, args: ['p-sort-by',] }],
        unselected: [{ type: i0.Output, args: ['p-unselected',] }],
        changeVisibleColumns: [{ type: i0.Output, args: ['p-change-visible-columns',] }],
        items: [{ type: i0.Input, args: ['p-items',] }],
        columns: [{ type: i0.Input, args: ['p-columns',] }],
        container: [{ type: i0.Input, args: ['p-container',] }],
        height: [{ type: i0.Input, args: ['p-height',] }],
        hideDetail: [{ type: i0.Input, args: ['p-hide-detail',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        loading: [{ type: i0.Input, args: ['p-loading',] }],
        actions: [{ type: i0.Input, args: ['p-actions',] }],
        selectable: [{ type: i0.Input, args: ['p-selectable',] }],
        infiniteScroll: [{ type: i0.Input, args: ['p-infinite-scroll',] }],
        infiniteScrollDistance: [{ type: i0.Input, args: ['p-infinite-scroll-distance',] }],
        serviceApi: [{ type: i0.Input, args: ['p-service-api',] }]
    };
    __decorate([
        InputBoolean()
    ], PoTableBaseComponent.prototype, "hideTextOverflow", void 0);
    __decorate([
        InputBoolean()
    ], PoTableBaseComponent.prototype, "hideColumnsManager", void 0);
    __decorate([
        InputBoolean()
    ], PoTableBaseComponent.prototype, "autoCollapse", void 0);
    __decorate([
        InputBoolean()
    ], PoTableBaseComponent.prototype, "loadingShowMore", void 0);
    __decorate([
        InputBoolean()
    ], PoTableBaseComponent.prototype, "sort", void 0);
    __decorate([
        InputBoolean()
    ], PoTableBaseComponent.prototype, "showMoreDisabled", void 0);
    __decorate([
        InputBoolean()
    ], PoTableBaseComponent.prototype, "striped", void 0);
    __decorate([
        InputBoolean()
    ], PoTableBaseComponent.prototype, "hideSelectAll", void 0);
    __decorate([
        InputBoolean()
    ], PoTableBaseComponent.prototype, "singleSelect", void 0);

    /**
     * @usedBy PoTableRowTemplateDirective
     *
     * @description
     * Define a posição da arrow que expande o * row template* na tabela, será exibida na esquerda ou direita.
     */
    exports.PoTableRowTemplateArrowDirection = void 0;
    (function (PoTableRowTemplateArrowDirection) {
        /** Posiciona a *arrow* na esquerda. (Padrão) */
        PoTableRowTemplateArrowDirection["Left"] = "LEFT";
        /** Posiciona a *arrow* na direita */
        PoTableRowTemplateArrowDirection["Right"] = "RIGHT";
    })(exports.PoTableRowTemplateArrowDirection || (exports.PoTableRowTemplateArrowDirection = {}));

    /**
     * @usedBy PoTableComponent
     *
     * @description
     *
     * Esta diretiva permite que seja apresentada informações adicionais a respeito de uma determinada linha de
     * dados, de forma que possam ser exibidas e ocultadas através do botão de acionamento.
     *
     * > Quando utilizada, sobrepõe as funcionalidade básicas do *master-detail*.
     *
     * Em seu uso, deve-se utilizar como parâmetro a referência da _linha_ e/ou _índice_, sendo por padrão linha. Caso não seja declarado,
     * o componente não exibirá conteúdo.
     *  - Linha: `row` determina o item da linha corrente.
     *  - Índice: `rowIndex` determina o índice da linha corrente.
     *
     * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <po-table
     *   [p-columns]="columns"
     *   [p-items]="items">
     *     <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isShow">
     *       <detail-row [row]="rowItem"></detail-row>
     *     </ng-template>
     * ...
     * ```
     *
     * ```
     * ...
     * <po-table
     *   [p-columns]="columns"
     *   [p-items]="items">
     *     <div *p-table-row-template="let rowItem, let i=rowIndex">
     *       <detail-row [row]="rowItem"></detail-row>
     *     </div>
     * ...
     *
     * ```
     *
     * A diretiva **p-table-row-template**, possibilita também que determinada linha apresente ou não seu _template_. Para isto,
     * é necessário atribuir a referência da função que faz esta verificação, à propriedade `p-table-row-template-show`,
     * a mesma deve retornar um valor do tipo *boolean*. Veja o exemplo a seguir:
     *
     * ```
     * ...
     * @Component({
     *    selector: 'app-root',
     *    templateUrl: `
     *      ...
     *      <po-table
     *        [p-columns]="columns"
     *        [p-items]="items">
     *          <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isUndelivered">
     *            <detail-row [row]="rowItem"> </detail-row>
     *          </div>
     *      ...
     *    `
     * })
     * export class AppComponent {
     *    public dataTable = [{
     *      code: 1200,
     *      product: 'Rice',
     *      costumer: 'Supermarket 1',
     *      quantity: 3,
     *      status: 'delivered',
     *      license_plate: 'MDJD9191',
     *      batch_product: 18041822,
     *      driver: 'José Oliveira'
     *    }, {
     *      code: 1355,
     *      product: 'Bean',
     *      costumer: 'Supermarket 2',
     *      quantity: 1,
     *      status: 'transport',
     *      license_plate: 'XXA5454',
     *      batch_product: 18041821,
     *      driver: 'Francisco Pereira'
     *    }];
     *
     *    isUndelivered(row, index: number) {
     *      return row.status !== 'delivered';
     *    }
     * }
     * ```
     * > No exemplo acima, somente será disponibilizado os detalhes de informações nas linhas cujo o valor de `status`
     * não correspondam à *delivered*.
     */
    var PoTableRowTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function PoTableRowTemplateDirective(templateRef) {
            this.templateRef = templateRef;
            this._tableRowTemplateArrowDirection = exports.PoTableRowTemplateArrowDirection.Left;
        }
        Object.defineProperty(PoTableRowTemplateDirective.prototype, "tableRowTemplateArrowDirection", {
            get: function () {
                return this._tableRowTemplateArrowDirection;
            },
            /**
             * @optional
             *
             * @description
             *
             * Propriedade responsável por informar a posição do colapse que abrirá os detalhes da linha.
             *
             * @default `'LEFT'`
             */
            set: function (value) {
                value = value === null || value === void 0 ? void 0 : value.toUpperCase();
                this._tableRowTemplateArrowDirection = Object.values(exports.PoTableRowTemplateArrowDirection).includes(value)
                    ? value
                    : exports.PoTableRowTemplateArrowDirection.Left;
            },
            enumerable: false,
            configurable: true
        });
        return PoTableRowTemplateDirective;
    }());
    PoTableRowTemplateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[p-table-row-template]'
                },] }
    ];
    PoTableRowTemplateDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };
    PoTableRowTemplateDirective.propDecorators = {
        poTableRowTemplateShow: [{ type: i0.Input, args: ['p-table-row-template-show',] }],
        tableRowTemplateArrowDirection: [{ type: i0.Input, args: ['p-table-row-template-arrow-direction',] }]
    };

    /**
     * @usedBy PoTableComponent
     *
     * @description
     *
     * Esta diretiva permite que seja possível alterar o conteúdo das células de uma coluna, para que os valores possam ser exibidos
     * de acordo com a necessidade do usuário.
     *
     * Em seu uso, deve-se apenas adicionar a diretiva **p-table-cell-template** à tag `ng-template`.
     *
     * Retorno:
     *  - `column`: conteúdo da coluna corrente.
     *  - `row`: conteúdo da linha corrente
     *
     * Modo de uso:
     *
     * ```
     * ...
     * <po-table
     *   [p-columns]="columns"
     *   [p-items]="items">
     *     <ng-template p-table-cell-template let-column="column" let-row="row">
     *      <div *ngIf="column.property === 'status' && row.status === 'CANCELED'">
     *        <h1 [style.background]="'red'">CANCELADA</h1>
     *        <span (click)="onClick()"><small>clique aqui</small></span>
     *      </div>
     *      <h1 *ngIf="column.property === 'status' && row.status === 'FINISHED'" [style.background]="'green'">FINALIZADA</h1>
     *      <h1 *ngIf="column.property === 'status' && row.status === 'OPENED'" [style.background]="'orange'">ABERTA</h1>
     *      <h1 *ngIf="column.property === 'status2'">Conteúdo do status 2</h1>
     *      <h1 *ngIf="column.property === 'status3'">Conteúdo do status 3</h1>
     *    </ng-template>
     * ...
     * ```
     * > No exemplo acima, o usuário tem como retorno `row` e a `column` corrente, neste caso ele tem total liberdade para manipular os objetos.
     *
     * Abaixo, a declaração dos dados de entrada do PO-TABLE para o uso da directiva.
     * ```
     * ...
     * export class AppComponent {
     *
     *    items = [{
     *      code: 1200,
     *      product: 'Rice',
     *      status: 'CANCELED',
     *      status2: '',
     *      status3: ''
     *      },{
     *      code: 1355,
     *      product: 'Bean',
     *      status: 'FINISHED',
     *      status2: '',
     *      status3: ''
     *      }];
     *
     *    columns = [
     *       { property: 'code', label: 'ID' },
     *       { property: 'product', label: 'PRODUTO' },
     *       { property: 'status', label: 'STATUS', type: 'cellTemplate' },
     *       { property: 'status2', label: 'STATUS 2', type: 'cellTemplate' },
     *       { property: 'status3', label: 'STATUS 3', type: 'cellTemplate' }
     *    ];
     * }
     * ...
     * ```
     * > Observação: Sempre adicionar o **type** da coluna que deseja manipular com a directiva como `cellTemplate`
     */
    var PoTableCellTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do cell template.
        function PoTableCellTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return PoTableCellTemplateDirective;
    }());
    PoTableCellTemplateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[p-table-cell-template]'
                },] }
    ];
    PoTableCellTemplateDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };

    /**
     * @usedBy PoTableComponent
     *
     * @description
     *
     * Esta diretiva permite que seja possível alterar o conteúdo das células de uma coluna, para que os valores possam ser exibidos
     * de acordo com a necessidade do usuário.
     *
     * Em seu uso, deve-se utilizar como parâmetro de entrada o input [p-property], o qual é responsável por informar ao PO-TABLE qual a coluna que
     * será adicionado o conteúdo do template.
     *
     * Retorno:
     *  - value: valor referente ao conteúdo da linha corrente.
     *
     * Modo de uso:
     * ```html
     * ...
     * <po-table
     *   [p-columns]="columns"
     *   [p-items]="items">
     *   <ng-template p-table-column-template [p-property]="targetProperty" let-value>
     *     <span [innerText]="value"></span>
     *   </ng-template>
     * </po-table>
     * ...
     * ```
     * > No exemplo acima, todas as células correspondentes a coluna `status` terão o conteúdo alterado para `<h1>${value}</h1>`,
     * sendo que `value` refere-se ao conteúdo da linha.
     *
     * ```html
     * ...
     * <po-table
     *   [p-columns]="columns"
     *   [p-items]="items">
     *   <ng-template  p-table-column-template [p-property]="targetProperty" let-value>
     *     <span *ngIf="value === 'FINISHED'" [style.background]="'silver'" [innerText]="value"></span>
     *     <span *ngIf="value === 'OPENED'" [style.background]="'gray'" [innerText]="value"></span>
     *   </ng-template>
     * </po-table>
     * ...
     * ```
     * > Agora, neste exemplo, com o valor da linha corrente retornado (value), é feito uma validação para
     * definir o template exato para adicionar a uma específica célula.
     *
     * Abaixo, a declaração dos dados de entrada do PO-TABLE para o uso da directiva.
     * ```typescript
     * ...
     * export class AppComponent {
     *
     *    targetProperty= 'status';
     *
     *    items = [{
     *      code: 1200,
     *      product: 'Rice',
     *      status: 'CANCELED'
     *      },{
     *      code: 1355,
     *      product: 'Bean',
     *      status: 'FINISHED'
     *    }];
     *
     *    columns = [
     *      { property: 'code', label: 'ID' },
     *      { property: 'product', label: 'PRODUTO' },
     *      { property: 'status', label: 'STATUS', type: 'columnTemplate' }
     *    ];
     * }
     * ...
     * ```
     * > Observação: Sempre adicionar o **type** da coluna que deseja manipular com a directiva como `columnTemplate`
     */
    var PoTableColumnTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do column template.
        function PoTableColumnTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return PoTableColumnTemplateDirective;
    }());
    PoTableColumnTemplateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[p-table-column-template]'
                },] }
    ];
    PoTableColumnTemplateDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };
    PoTableColumnTemplateDirective.propDecorators = {
        targetProperty: [{ type: i0.Input, args: ['p-property',] }]
    };

    /**
     * @docsExtends PoTableBaseComponent
     *
     * @example
     *
     * <example name="po-table-basic" title="PO Table Basic">
     *  <file name="sample-po-table-basic/sample-po-table-basic.component.ts"> </file>
     *  <file name="sample-po-table-basic/sample-po-table-basic.component.html"> </file>
     * </example>
     *
     * <example name="po-table-labs" title="PO Table Labs">
     *  <file name="sample-po-table-labs/sample-po-table-labs.component.ts"> </file>
     *  <file name="sample-po-table-labs/sample-po-table-labs.component.html"> </file>
     *  <file name="sample-po-table-labs/sample-po-table-labs.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-table-labs/sample-po-table-labs.component.po.ts"> </file>
     *  <file name="sample-po-table-labs/sample-po-table-labs.service.ts"> </file>
     * </example>
     *
     * <example name="po-table-with-api" title="PO Table using API">
     *  <file name="sample-po-table-with-api/sample-po-table-with-api.component.ts"> </file>
     *  <file name="sample-po-table-with-api/sample-po-table-with-api.component.html"> </file>
     * </example>
     *
     * <example name="po-table-transport" title="PO Table - Transport">
     *  <file name="sample-po-table-transport/sample-po-table-transport.component.ts"> </file>
     *  <file name="sample-po-table-transport/sample-po-table-transport.component.html"> </file>
     *  <file name="sample-po-table-transport/sample-po-table-transport.service.ts"> </file>
     * </example>
     *
     * <example name="po-table-airfare" title="PO Table - Airfare">
     *  <file name="sample-po-table-airfare/sample-po-table-airfare.component.ts"> </file>
     *  <file name="sample-po-table-airfare/sample-po-table-airfare.component.html"> </file>
     *  <file name="sample-po-table-airfare/sample-po-table-airfare.service.ts"> </file>
     * </example>
     *
     * <example name="po-table-components" title="PO Table - Po Field Components">
     *  <file name="sample-po-table-components/sample-po-table-components.component.ts"> </file>
     *  <file name="sample-po-table-components/sample-po-table-components.enum.ts"> </file>
     *  <file name="sample-po-table-components/sample-po-table-components.component.html"> </file>
     *  <file name="sample-po-table-components/sample-po-table-components.service.ts"> </file>
     *  <file name="sample-po-table-components/sample-po-table-components.component.css"> </file>
     * </example>
     *
     */
    var PoTableComponent = /** @class */ (function (_super) {
        __extends(PoTableComponent, _super);
        function PoTableComponent(poDate, differs, renderer, poLanguageService, changeDetector, decimalPipe, router, defaultService) {
            var _this = _super.call(this, poDate, poLanguageService, defaultService) || this;
            _this.changeDetector = changeDetector;
            _this.decimalPipe = decimalPipe;
            _this.router = router;
            _this.defaultService = defaultService;
            _this.tableOpacity = 0;
            _this.initialized = false;
            _this.visibleElement = false;
            _this.differ = differs.find([]).create(null);
            // TODO: #5550 ao remover este listener, no portal, quando as colunas forem fixas não sofrem
            // alteração de largura, pois o ngDoCheck não é executado.
            _this.clickListener = renderer.listen('document', 'click', function () { });
            _this.resizeListener = renderer.listen('window', 'resize', function (event) {
                _this.debounceResize();
            });
            return _this;
        }
        Object.defineProperty(PoTableComponent.prototype, "columnManagerTarget", {
            get: function () {
                return this._columnManagerTarget;
            },
            set: function (value) {
                this._columnManagerTarget = value;
                this.changeDetector.detectChanges();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "hasRowTemplateWithArrowDirectionRight", {
            get: function () {
                var _a;
                return ((_a = this.tableRowTemplate) === null || _a === void 0 ? void 0 : _a.tableRowTemplateArrowDirection) === exports.PoTableRowTemplateArrowDirection.Right;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "columnCount", {
            get: function () {
                var columnCount = this.mainColumns.length +
                    (this.actions.length > 0 ? 1 : 0) +
                    (this.selectable ? 1 : 0) +
                    (!this.hideDetail && this.columnMasterDetail !== undefined ? 1 : 0);
                return columnCount || 1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "columnCountForMasterDetail", {
            get: function () {
                // caso tiver ações será utilizado a sua coluna para exibir o columnManager
                var columnManager = this.actions.length ? 0 : 1;
                return this.mainColumns.length + 1 + (this.actions.length > 0 ? 1 : 0) + (this.selectable ? 1 : 0) + columnManager;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "detailHideSelect", {
            get: function () {
                var masterDetail = this.columnMasterDetail;
                return masterDetail && masterDetail.detail ? masterDetail.detail.hideSelect : false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "hasVisibleActions", {
            get: function () {
                return !!this.visibleActions.length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "firstAction", {
            get: function () {
                return this.visibleActions && this.visibleActions[0];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "hasFooter", {
            get: function () {
                return this.hasItems && this.hasVisibleSubtitleColumns;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "hasMasterDetailColumn", {
            get: function () {
                return (this.hasMainColumns && this.hasItems && !this.hideDetail && !!(this.columnMasterDetail || this.hasRowTemplate));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "hasRowTemplate", {
            get: function () {
                return !!this.tableRowTemplate;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "hasSelectableColumn", {
            get: function () {
                return this.selectable && this.hasItems && this.hasMainColumns;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "hasValidColumns", {
            get: function () {
                return !!this.validColumns.length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "hasVisibleSubtitleColumns", {
            get: function () {
                return this.subtitleColumns.some(function (column) { return column.visible !== false; });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "isSingleAction", {
            get: function () {
                return this.visibleActions.length === 1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "visibleActions", {
            get: function () {
                return this.actions && this.actions.filter(function (action) { return action && action.visible !== false; });
            },
            enumerable: false,
            configurable: true
        });
        PoTableComponent.prototype.ngAfterViewInit = function () {
            this.initialized = true;
        };
        PoTableComponent.prototype.showMoreInfiniteScroll = function (_b) {
            var target = _b.target;
            var scrollPosition = target.offsetHeight + target.scrollTop;
            if (!this.showMoreDisabled && scrollPosition >= target.scrollHeight * (this.infiniteScrollDistance / 110)) {
                this.onShowMore();
            }
        };
        PoTableComponent.prototype.ngDoCheck = function () {
            var _a;
            this.checkChangesItems();
            this.verifyCalculateHeightTableContainer();
            // Permite que os cabeçalhos sejam calculados na primeira vez que o componente torna-se visível,
            // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
            if (((_a = this.tableWrapperElement) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth) && !this.visibleElement && this.initialized) {
                this.debounceResize();
                this.checkInfiniteScroll();
                this.visibleElement = true;
            }
        };
        PoTableComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        /**
         * Método responsável por realizar busca no serviço de dados podendo informar filtros e com o retorno, atualiza a tabela.
         *
         * Caso não seja informado parâmetro, nada será adicionado ao GET, conforme abaixo:
         * ```
         * url + ?page=1&pageSize=10
         * ```
         * > Obs: os parâmetros `page` e `pageSize` sempre serão chamados independente de ser enviados outros parâmetros.
         *
         * Caso sejam informados os parâmetros `{ name: 'JOHN', age: '23' }`, todos serão adicionados ao GET, conforme abaixo:
         * ```
         * url + ?page=1&pageSize=10&name=JOHN&age=23
         * ```
         *
         * @param { { key: value } } queryParams Formato do objeto a ser enviado.
         * > Pode ser utilizada qualquer string como key, e qualquer string ou number como value.
         */
        PoTableComponent.prototype.applyFilters = function (queryParams) {
            this.page = 1;
            this.initializeData(queryParams);
        };
        /**
         * Método que colapsa uma linha com detalhe quando executada.
         *
         * @param { number } rowIndex Índice da linha que será colapsada.
         * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
         */
        PoTableComponent.prototype.collapse = function (rowIndex) {
            this.setShowDetail(rowIndex, false);
        };
        /**
         * Método que expande uma linha com detalhe quando executada.
         *
         * @param { number } rowIndex Índice da linha que será expandida.
         * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
         */
        PoTableComponent.prototype.expand = function (rowIndex) {
            this.setShowDetail(rowIndex, true);
        };
        /**
         * Retorna as linhas do `po-table` que estão selecionadas.
         */
        PoTableComponent.prototype.getSelectedRows = function () {
            return this.items.filter(function (item) { return item.$selected; });
        };
        /**
         * Retorna as linhas do `po-table` que não estão selecionadas.
         */
        PoTableComponent.prototype.getUnselectedRows = function () {
            return this.items.filter(function (item) { return !item.$selected; });
        };
        /**
         * Desmarca as linhas que estão selecionadas.
         */
        PoTableComponent.prototype.unselectRows = function () {
            var columnDetail = this.nameColumnDetail;
            this.items.forEach(function (item) {
                var detailItems = columnDetail ? item[columnDetail] : null;
                if (Array.isArray(detailItems)) {
                    detailItems.forEach(function (detailItem) {
                        detailItem.$selected = false;
                    });
                }
                item.$selected = false;
            });
            this.selectAll = false;
        };
        PoTableComponent.prototype.checkDisabled = function (row, column) {
            return column.disabled ? column.disabled(row) : false;
        };
        PoTableComponent.prototype.containsMasterDetail = function (row) {
            return row[this.nameColumnDetail] && row[this.nameColumnDetail].length;
        };
        PoTableComponent.prototype.executeTableAction = function (row, tableAction) {
            if (!row.disabled && !this.validateTableAction(row, tableAction)) {
                tableAction.action(row);
                this.toggleRowAction(row);
            }
        };
        /**
         * Desmarca uma linha que está selecionada.
         */
        PoTableComponent.prototype.unselectRowItem = function (itemfn) {
            this.toggleSelect(itemfn, false);
            if (this.items.every(function (item) { return !item.$selected; })) {
                this.selectAll = false;
            }
            else {
                this.selectAll = null;
            }
        };
        /**
         * Seleciona uma linha do 'po-table'.
         */
        PoTableComponent.prototype.selectRowItem = function (itemfn) {
            this.toggleSelect(itemfn, true);
            if (this.items.every(function (item) { return item.$selected; })) {
                this.selectAll = true;
            }
            else {
                this.selectAll = null;
            }
        };
        PoTableComponent.prototype.formatNumber = function (value, format) {
            if (!format) {
                return value;
            }
            return this.decimalPipe.transform(value, format);
        };
        PoTableComponent.prototype.getBooleanLabel = function (rowValue, columnBoolean) {
            if (rowValue || rowValue === false || rowValue === 0) {
                rowValue = convertToBoolean(rowValue);
                if (columnBoolean.boolean) {
                    return rowValue ? columnBoolean.boolean.trueLabel || 'Sim' : columnBoolean.boolean.falseLabel || 'Não';
                }
                else {
                    return rowValue ? 'Sim' : 'Não';
                }
            }
            return rowValue;
        };
        PoTableComponent.prototype.getColumnIcons = function (row, column) {
            var rowIcons = row[column.property];
            if (column.icons) {
                if (Array.isArray(rowIcons)) {
                    return this.mergeCustomIcons(rowIcons, column.icons);
                }
                else {
                    return this.findCustomIcon(rowIcons, column);
                }
            }
            return rowIcons;
        };
        PoTableComponent.prototype.getColumnLabel = function (row, columnLabel) {
            return columnLabel.labels.find(function (labelItem) { return row[columnLabel.property] === labelItem.value; });
        };
        PoTableComponent.prototype.getSubtitleColumn = function (row, subtitleColumn) {
            return subtitleColumn.subtitles.find(function (subtitleItem) { return row[subtitleColumn.property] === subtitleItem.value; });
        };
        PoTableComponent.prototype.isShowMasterDetail = function (row) {
            return (!this.hideDetail &&
                this.nameColumnDetail &&
                row.$showDetail &&
                this.containsMasterDetail(row) &&
                !this.hasRowTemplate);
        };
        PoTableComponent.prototype.isShowRowTemplate = function (row, index) {
            if (this.tableRowTemplate && this.tableRowTemplate.poTableRowTemplateShow) {
                return this.tableRowTemplate.poTableRowTemplateShow(row, index);
            }
            return true;
        };
        PoTableComponent.prototype.onClickLink = function (event, row, column) {
            if (!this.checkDisabled(row, column)) {
                event.stopPropagation();
            }
        };
        PoTableComponent.prototype.onChangeVisibleColumns = function (columns) {
            this.changeVisibleColumns.emit(columns);
        };
        PoTableComponent.prototype.onVisibleColumnsChange = function (columns) {
            this.columns = columns;
            this.changeDetector.detectChanges();
        };
        PoTableComponent.prototype.tooltipMouseEnter = function (event, column, row) {
            this.tooltipText = undefined;
            if (this.hideTextOverflow && event.target.offsetWidth < event.target.scrollWidth && event.target.innerText.trim()) {
                return (this.tooltipText = event.target.innerText);
            }
            if (column) {
                this.checkingIfColumnHasTooltip(column, row);
            }
        };
        PoTableComponent.prototype.tooltipMouseLeave = function () {
            this.tooltipText = undefined;
        };
        PoTableComponent.prototype.togglePopup = function (row, targetRef) {
            this.popupTarget = targetRef;
            this.changeDetector.detectChanges();
            this.poPopupComponent.toggle(row);
        };
        PoTableComponent.prototype.trackBy = function (index) {
            return index;
        };
        PoTableComponent.prototype.validateTableAction = function (row, tableAction) {
            if (typeof tableAction.disabled === 'function') {
                return tableAction.disabled(row);
            }
            else {
                return tableAction.disabled;
            }
        };
        PoTableComponent.prototype.onOpenColumnManager = function () {
            this.lastVisibleColumnsSelected = __spreadArray([], __read(this.columns));
        };
        /**
         * Método que remove um item da tabela.
         *
         * @param { number | { key: value } } item Índice da linha ou o item que será removido.
         * > Ao remover o item, a linha que o representa será excluída da tabela.
         */
        PoTableComponent.prototype.removeItem = function (item) {
            if (item instanceof Object) {
                this.items = this.items.filter(function (filterItem) { return filterItem !== item; });
            }
            else if (typeof item === 'number') {
                var index = item;
                this.items.splice(index, 1);
            }
        };
        /**
         * Método que atualiza um item da tabela.
         *
         * @param { number | { key: value } } item Índice da linha ou o item que será atualizado.
         * @param { { key: value } } updatedItem Item que foi atualizado.
         * > Ao atualizar o item, a informação será alterada na tabela.
         */
        PoTableComponent.prototype.updateItem = function (item, updatedItem) {
            if (typeof item === 'number') {
                this.items.splice(item, 1, updatedItem);
            }
            else {
                var index = this.items.findIndex(function (indexItem) { return indexItem === item; });
                this.items.splice(index, 1, updatedItem);
            }
        };
        PoTableComponent.prototype.getTemplate = function (column) {
            var template = this.tableColumnTemplates.find(function (tableColumnTemplate) { return tableColumnTemplate.targetProperty === column.property; });
            if (!template) {
                console.warn("N\u00E3o foi poss\u00EDvel encontrar o template para a coluna: " + column.property + ", por gentileza informe a propriedade [p-property]");
                return null;
            }
            return template.templateRef;
        };
        PoTableComponent.prototype.calculateHeightTableContainer = function (height) {
            var value = parseFloat(height);
            this.heightTableContainer = value ? value - this.getHeightTableFooter() : undefined;
            this.setTableOpacity(1);
            this.changeDetector.detectChanges();
        };
        PoTableComponent.prototype.calculateWidthHeaders = function () {
            var _this = this;
            setTimeout(function () {
                if (_this.height) {
                    _this.headersTable.forEach(function (header) {
                        var divHeader = header.nativeElement.querySelector('.po-table-header-fixed-inner');
                        if (divHeader) {
                            divHeader.style.width = header.nativeElement.offsetWidth + "px";
                        }
                    });
                }
            });
        };
        PoTableComponent.prototype.checkInfiniteScroll = function () {
            if (this.hasInfiniteScroll()) {
                if (this.poTableTbody.nativeElement.scrollHeight > this.height) {
                    this.includeInfiniteScroll();
                }
                else {
                    this.infiniteScroll = false;
                }
            }
            this.changeDetector.detectChanges();
        };
        PoTableComponent.prototype.checkChangesItems = function () {
            var changesItems = this.differ.diff(this.items);
            if (changesItems && this.selectAll) {
                this.selectAll = null;
            }
            if (changesItems && !this.hasColumns && this.hasItems) {
                this.columns = this.getDefaultColumns(this.items[0]);
            }
        };
        PoTableComponent.prototype.checkingIfColumnHasTooltip = function (column, row) {
            if (column.type === 'link' && column.tooltip && !this.checkDisabled(row, column)) {
                return (this.tooltipText = column.tooltip);
            }
            if (column.type === 'label') {
                var columnLabel = this.getColumnLabel(row, column);
                return (this.tooltipText = columnLabel === null || columnLabel === void 0 ? void 0 : columnLabel.tooltip);
            }
        };
        PoTableComponent.prototype.debounceResize = function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(function () {
                _this.calculateWidthHeaders();
                // show the table
                _this.setTableOpacity(1);
            });
        };
        PoTableComponent.prototype.findCustomIcon = function (rowIcons, column) {
            var customIcon = column.icons.find(function (icon) { return rowIcons === icon.value; });
            return customIcon ? [customIcon] : undefined;
        };
        PoTableComponent.prototype.getHeightTableFooter = function () {
            return this.tableFooterElement ? this.tableFooterElement.nativeElement.offsetHeight : 0;
        };
        PoTableComponent.prototype.hasInfiniteScroll = function () {
            return (this.infiniteScroll &&
                this.hasItems &&
                !this.subscriptionScrollEvent &&
                this.height &&
                this.poTableTbody.nativeElement.scrollHeight);
        };
        PoTableComponent.prototype.includeInfiniteScroll = function () {
            var _this = this;
            this.scrollEvent$ = this.defaultService.scrollListener(this.poTableTbody.nativeElement);
            this.subscriptionScrollEvent = this.scrollEvent$.subscribe(function (event) { return _this.showMoreInfiniteScroll(event); });
        };
        PoTableComponent.prototype.mergeCustomIcons = function (rowIcons, customIcons) {
            var mergedIcons = [];
            rowIcons.forEach(function (columnValue) {
                var foundCustomIcon = customIcons.find(function (customIcon) { return columnValue === customIcon.icon || columnValue === customIcon.value; });
                foundCustomIcon ? mergedIcons.push(foundCustomIcon) : mergedIcons.push(columnValue);
            });
            return mergedIcons;
        };
        PoTableComponent.prototype.removeListeners = function () {
            if (this.resizeListener) {
                this.resizeListener();
            }
            if (this.clickListener) {
                this.clickListener();
            }
            if (this.subscriptionScrollEvent) {
                this.subscriptionScrollEvent.unsubscribe();
            }
        };
        PoTableComponent.prototype.setTableOpacity = function (value) {
            this.tableOpacity = value;
        };
        PoTableComponent.prototype.verifyChangeHeightInFooter = function () {
            return this.footerHeight !== this.getHeightTableFooter();
        };
        PoTableComponent.prototype.verifyCalculateHeightTableContainer = function () {
            if (this.height && this.verifyChangeHeightInFooter()) {
                this.footerHeight = this.getHeightTableFooter();
                this.calculateHeightTableContainer(this.height);
            }
        };
        PoTableComponent.prototype.toggleSelect = function (compare, selectValue) {
            if (typeof compare !== 'function') {
                this.items.forEach(function (item) {
                    if (item === compare) {
                        item.$selected = selectValue;
                    }
                });
            }
            else {
                this.items.forEach(function (item) {
                    if (compare(item)) {
                        item.$selected = selectValue;
                    }
                });
            }
        };
        return PoTableComponent;
    }(PoTableBaseComponent));
    PoTableComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-table',
                    template: "<po-container *ngIf=\"container; else tableContainerTemplate\" p-no-padding [p-no-shadow]=\"container === 'border'\">\r\n  <ng-container *ngTemplateOutlet=\"tableContainerTemplate\"></ng-container>\r\n</po-container>\r\n\r\n<ng-template #tableContainerTemplate>\r\n  <div [class.po-table-container-relative]=\"loading\">\r\n    <div *ngIf=\"loading\" class=\"po-table-overlay\">\r\n      <po-loading class=\"po-table-overlay-content\" [p-text]=\"literals.loadingData\"></po-loading>\r\n    </div>\r\n\r\n    <div class=\"po-table-main-container\">\r\n      <div\r\n        #tableWrapper\r\n        class=\"po-table-wrapper\"\r\n        [class.po-table-header-fixed-columns-pixels]=\"allColumnsWidthPixels\"\r\n        [style.opacity]=\"tableOpacity\"\r\n      >\r\n        <div *ngIf=\"height\" class=\"po-table-container\" [style.height.px]=\"heightTableContainer\">\r\n          <div class=\"po-table-header-fixed po-table-header\"></div>\r\n          <div #poTableTbody class=\"po-table-container-fixed-inner\">\r\n            <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container>\r\n          </div>\r\n        </div>\r\n\r\n        <div *ngIf=\"!height\">\r\n          <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"po-table-footer\" *ngIf=\"hasFooter\">\r\n    <ng-container *ngFor=\"let column of subtitleColumns; trackBy: trackBy\">\r\n      <po-table-subtitle-footer [p-literals]=\"literals\" [p-subtitles]=\"column.subtitles\"> </po-table-subtitle-footer>\r\n    </ng-container>\r\n  </div>\r\n</ng-template>\r\n\r\n<div\r\n  *ngIf=\"!infiniteScroll\"\r\n  class=\"po-row po-table-footer-show-more\"\r\n  [class.po-invisible]=\"showMore.observers.length === 0 && !hasService\"\r\n  #tableFooter\r\n>\r\n  <po-button\r\n    class=\"po-offset-xl-4 po-offset-lg-4 po-offset-md-3 po-lg-4 po-md-6\"\r\n    [p-disabled]=\"showMoreDisabled\"\r\n    [p-label]=\"literals.loadMoreData\"\r\n    [p-loading]=\"loadingShowMore\"\r\n    (p-click)=\"onShowMore()\"\r\n  >\r\n  </po-button>\r\n</div>\r\n\r\n<ng-template #tableTemplate>\r\n  <table class=\"po-table\" [class.po-table-striped]=\"striped\" [class.po-table-layout-fixed]=\"hideTextOverflow\">\r\n    <thead>\r\n      <tr [class.po-table-header]=\"!height\">\r\n        <th *ngIf=\"hasSelectableColumn\" class=\"po-table-column-selectable\">\r\n          <div [class.po-table-header-fixed-inner]=\"height\">\r\n            <input\r\n              *ngIf=\"!hideSelectAll\"\r\n              type=\"checkbox\"\r\n              class=\"po-table-checkbox\"\r\n              [class.po-table-checkbox-checked]=\"selectAll\"\r\n              [class.po-table-checkbox-indeterminate]=\"selectAll === null\"\r\n            />\r\n            <label *ngIf=\"!hideSelectAll\" class=\"po-table-checkbox-label po-clickable\" (click)=\"selectAllRows()\">\r\n            </label>\r\n          </div>\r\n        </th>\r\n\r\n        <th\r\n          *ngIf=\"(hasMasterDetailColumn || hasRowTemplate) && !hasRowTemplateWithArrowDirectionRight\"\r\n          class=\"po-table-header-column po-table-header-master-detail\"\r\n        ></th>\r\n\r\n        <th *ngIf=\"!hasMainColumns\" #noColumnsHeader class=\"po-table-header-column po-text-center\">\r\n          <ng-container *ngIf=\"height; then noColumnsWithHeight; else noColumnsWithoutHeight\"> </ng-container>\r\n        </th>\r\n\r\n        <th\r\n          *ngFor=\"let column of mainColumns; let i = index; trackBy: trackBy\"\r\n          #headersTable\r\n          class=\"po-table-header-ellipsis\"\r\n          [style.width]=\"column.width\"\r\n          [style.max-width]=\"column.width\"\r\n          [style.min-width]=\"column.width\"\r\n          [class.po-clickable]=\"(sort && column.sortable !== false) || hasService\"\r\n          [class.po-table-header-subtitle]=\"column.type === 'subtitle'\"\r\n          (click)=\"sortColumn(column)\"\r\n        >\r\n          <div\r\n            class=\"po-table-header-flex\"\r\n            [class.po-table-header-fixed-inner]=\"height\"\r\n            [class.po-table-header-flex-right]=\"column.type === 'currency' || column.type === 'number'\"\r\n            [class.po-table-header-flex-center]=\"column.type === 'subtitle'\"\r\n          >\r\n            <ng-container *ngTemplateOutlet=\"contentHeaderTemplate; context: { $implicit: column }\"> </ng-container>\r\n          </div>\r\n        </th>\r\n\r\n        <th\r\n          *ngIf=\"hasRowTemplateWithArrowDirectionRight && (hasVisibleActions || hideColumnsManager)\"\r\n          class=\"po-table-header-column po-table-header-master-detail\"\r\n        ></th>\r\n\r\n        <th\r\n          *ngIf=\"hasVisibleActions && hideColumnsManager\"\r\n          [class.po-table-header-single-action]=\"isSingleAction\"\r\n          [class.po-table-header-actions]=\"!isSingleAction\"\r\n        ></th>\r\n\r\n        <th\r\n          #columnManager\r\n          *ngIf=\"hasValidColumns && !hideColumnsManager\"\r\n          [class.po-table-header-column-manager]=\"!isSingleAction\"\r\n          [class.po-table-header-column-manager-border]=\"!height && container\"\r\n          [class.po-table-header-single-action]=\"isSingleAction\"\r\n        >\r\n          <div\r\n            [class.po-table-header-column-manager-border]=\"height && container\"\r\n            [class.po-table-header-column-manager-fixed-inner]=\"height\"\r\n            [style.width.px]=\"height && visibleActions.length ? columnManager.offsetWidth : undefined\"\r\n          >\r\n            <button\r\n              #columnManagerTarget\r\n              class=\"po-table-header-column-manager-button po-icon po-icon-settings po-clickable\"\r\n              p-tooltip-position=\"left\"\r\n              [p-tooltip]=\"literals.columnsManager\"\r\n              (click)=\"onOpenColumnManager()\"\r\n            ></button>\r\n          </div>\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n\r\n    <tbody class=\"po-table-group-row\" *ngIf=\"!hasItems || !hasMainColumns\">\r\n      <tr class=\"po-table-row\">\r\n        <td [colSpan]=\"columnCount\" class=\"po-table-no-data po-text-center\">\r\n          <span> {{ literals.noData }} </span>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n\r\n    <ng-container *ngIf=\"hasMainColumns\">\r\n      <tbody class=\"po-table-group-row\" *ngFor=\"let row of items; let rowIndex = index; trackBy: trackBy\">\r\n        <tr class=\"po-table-row\" [class.po-table-row-active]=\"row.$selected || (row.$selected === null && selectable)\">\r\n          <td *ngIf=\"selectable\" class=\"po-table-column po-table-column-selectable\">\r\n            <ng-container *ngTemplateOutlet=\"singleSelect ? inputRadio : inputCheckbox; context: { $implicit: row }\">\r\n            </ng-container>\r\n          </td>\r\n\r\n          <!-- Valida se a origem do detail \u00E9 pelo input do po-table -->\r\n          <td\r\n            *ngIf=\"columnMasterDetail && !hideDetail && !hasRowTemplate\"\r\n            class=\"po-table-column-detail-toggle\"\r\n            (click)=\"toggleDetail(row)\"\r\n          >\r\n            <ng-template\r\n              [ngTemplateOutlet]=\"poTableColumnDetail\"\r\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\r\n            >\r\n            </ng-template>\r\n          </td>\r\n\r\n          <!-- Valida se a origem do detail \u00E9 pela diretiva -->\r\n          <td\r\n            *ngIf=\"hasRowTemplate && !hasRowTemplateWithArrowDirectionRight\"\r\n            class=\"po-table-column-detail-toggle\"\r\n            (click)=\"toggleDetail(row)\"\r\n          >\r\n            <ng-template\r\n              [ngTemplateOutlet]=\"poTableColumnDetail\"\r\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\r\n            >\r\n            </ng-template>\r\n          </td>\r\n\r\n          <td\r\n            *ngFor=\"let column of mainColumns; let columnIndex = index; trackBy: trackBy\"\r\n            [style.width]=\"column.width\"\r\n            [style.max-width]=\"column.width\"\r\n            [style.min-width]=\"column.width\"\r\n            [class.po-table-column]=\"column.type !== 'icon'\"\r\n            [class.po-table-column-right]=\"column.type === 'currency' || column.type === 'number'\"\r\n            [class.po-table-column-center]=\"column.type === 'subtitle'\"\r\n            [class.po-table-column-icons]=\"column.type === 'icon'\"\r\n            [ngClass]=\"getClassColor(row, column)\"\r\n            (click)=\"selectable ? selectRow(row) : 'javascript:;'\"\r\n          >\r\n            <div\r\n              class=\"po-table-column-cell notranslate\"\r\n              [class.po-table-body-ellipsis]=\"hideTextOverflow\"\r\n              [ngSwitch]=\"column.type\"\r\n              [p-tooltip]=\"tooltipText\"\r\n              (mouseenter)=\"tooltipMouseEnter($event, column, row)\"\r\n              (mouseleave)=\"tooltipMouseLeave()\"\r\n            >\r\n              <span *ngSwitchCase=\"'columnTemplate'\">\r\n                <ng-container *ngTemplateOutlet=\"getTemplate(column); context: { $implicit: row[column.property] }\">\r\n                </ng-container>\r\n              </span>\r\n\r\n              <span *ngSwitchCase=\"'cellTemplate'\">\r\n                <ng-container *ngTemplateOutlet=\"tableCellTemplate?.templateRef; context: { row: row, column: column }\">\r\n                </ng-container>\r\n              </span>\r\n\r\n              <span *ngSwitchCase=\"'boolean'\">\r\n                {{ getBooleanLabel(row[column.property], column) }}\r\n              </span>\r\n\r\n              <span *ngSwitchCase=\"'currency'\">\r\n                {{ row[column.property] | currency: column.format:'symbol':'1.2-2' }}\r\n              </span>\r\n\r\n              <span *ngSwitchCase=\"'date'\">\r\n                {{ row[column.property] | date: column.format || 'dd/MM/yyyy' }}\r\n              </span>\r\n\r\n              <span *ngSwitchCase=\"'time'\">\r\n                {{ row[column.property] | po_time: column.format || 'HH:mm:ss.ffffff' }}\r\n              </span>\r\n\r\n              <span *ngSwitchCase=\"'dateTime'\">\r\n                {{ row[column.property] | date: column.format || 'dd/MM/yyyy HH:mm:ss' }}\r\n              </span>\r\n\r\n              <span *ngSwitchCase=\"'number'\">\r\n                {{ formatNumber(row[column.property], column.format) }}\r\n              </span>\r\n\r\n              <po-table-column-link\r\n                *ngSwitchCase=\"'link'\"\r\n                [p-action]=\"column.action\"\r\n                [p-disabled]=\"checkDisabled(row, column)\"\r\n                [p-link]=\"row[column.link]\"\r\n                [p-row]=\"row\"\r\n                [p-value]=\"row[column.property]\"\r\n                (click)=\"onClickLink($event, row, column)\"\r\n              >\r\n              </po-table-column-link>\r\n\r\n              <po-table-column-icon\r\n                *ngSwitchCase=\"'icon'\"\r\n                [p-column]=\"column\"\r\n                [p-icons]=\"getColumnIcons(row, column)\"\r\n                [p-row]=\"row\"\r\n              >\r\n              </po-table-column-icon>\r\n\r\n              <span *ngSwitchCase=\"'subtitle'\">\r\n                <po-table-subtitle-circle [p-subtitle]=\"getSubtitleColumn(row, column)\"></po-table-subtitle-circle>\r\n              </span>\r\n              <span *ngSwitchCase=\"'label'\">\r\n                <po-table-column-label [p-value]=\"getColumnLabel(row, column)\"></po-table-column-label>\r\n              </span>\r\n              <span *ngSwitchDefault>{{ row[column.property] }}</span>\r\n            </div>\r\n          </td>\r\n\r\n          <td\r\n            *ngIf=\"hasRowTemplateWithArrowDirectionRight\"\r\n            class=\"po-table-column-detail-toggle\"\r\n            (click)=\"toggleDetail(row)\"\r\n          >\r\n            <ng-template\r\n              [ngTemplateOutlet]=\"poTableColumnDetail\"\r\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\r\n            >\r\n            </ng-template>\r\n          </td>\r\n\r\n          <td *ngIf=\"isSingleAction\" class=\"po-table-column po-table-column-single-action\">\r\n            <div\r\n              *ngIf=\"firstAction.visible !== false\"\r\n              class=\"po-table-single-action po-clickable\"\r\n              [class.po-table-action-disabled]=\"firstAction.disabled ? validateTableAction(row, firstAction) : false\"\r\n              (click)=\"executeTableAction(row, firstAction)\"\r\n            >\r\n              <po-icon\r\n                *ngIf=\"firstAction.icon\"\r\n                class=\"po-table-single-action-content\"\r\n                [p-icon]=\"firstAction.icon\"\r\n              ></po-icon>\r\n              {{ firstAction.label }}\r\n            </div>\r\n          </td>\r\n\r\n          <td *ngIf=\"visibleActions.length > 1\" class=\"po-table-column-actions\">\r\n            <span #popupTarget class=\"po-icon po-icon-more po-clickable\" (click)=\"togglePopup(row, popupTarget)\"></span>\r\n          </td>\r\n          <!-- Column Manager -->\r\n          <td\r\n            *ngIf=\"!hasVisibleActions && !hideColumnsManager && !hasRowTemplateWithArrowDirectionRight\"\r\n            class=\"po-table-column\"\r\n          ></td>\r\n        </tr>\r\n\r\n        <tr *ngIf=\"hasMainColumns && hasRowTemplate && row.$showDetail && isShowRowTemplate(row, rowIndex)\">\r\n          <td class=\"po-table-row-template-container\" [colSpan]=\"columnCountForMasterDetail\">\r\n            <ng-template\r\n              [ngTemplateOutlet]=\"tableRowTemplate.templateRef\"\r\n              [ngTemplateOutletContext]=\"{ $implicit: row, rowIndex: rowIndex }\"\r\n            >\r\n            </ng-template>\r\n          </td>\r\n        </tr>\r\n\r\n        <tr *ngIf=\"hasMainColumns && isShowMasterDetail(row)\">\r\n          <td class=\"po-table-column-detail\" [colSpan]=\"columnCountForMasterDetail\">\r\n            <po-table-detail\r\n              [p-selectable]=\"selectable && !detailHideSelect\"\r\n              [p-detail]=\"columnMasterDetail.detail\"\r\n              [p-items]=\"row[nameColumnDetail]\"\r\n              (p-select-row)=\"selectDetailRow($event)\"\r\n            >\r\n            </po-table-detail>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </ng-container>\r\n  </table>\r\n</ng-template>\r\n\r\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"popupTarget\"> </po-popup>\r\n\r\n<ng-template #poTableColumnDetail let-row=\"row\" let-rowIndex=\"rowIndex\">\r\n  <span\r\n    *ngIf=\"(containsMasterDetail(row) && !hasRowTemplate) || (isShowRowTemplate(row, rowIndex) && hasRowTemplate)\"\r\n    class=\"po-icon po-clickable\"\r\n    [class.po-icon-arrow-up]=\"row.$showDetail\"\r\n    [class.po-icon-arrow-down]=\"!row.$showDetail\"\r\n  >\r\n  </span>\r\n</ng-template>\r\n\r\n<ng-template #inputRadio let-row>\r\n  <input type=\"radio\" class=\"po-table-radio\" [class.po-table-radio-checked]=\"row.$selected\" />\r\n  <label class=\"po-table-radio-label po-clickable\" (click)=\"selectable ? selectRow(row) : 'javascript:;'\"></label>\r\n</ng-template>\r\n\r\n<ng-template #inputCheckbox let-row>\r\n  <input type=\"checkbox\" class=\"po-table-checkbox\" [class.po-table-checkbox-checked]=\"row.$selected\" />\r\n  <label class=\"po-table-checkbox-label po-clickable\" (click)=\"selectable ? selectRow(row) : 'javascript:;'\"></label>\r\n</ng-template>\r\n\r\n<ng-template #contentHeaderTemplate let-column>\r\n  <span\r\n    #columnHeader\r\n    class=\"po-table-header-ellipsis\"\r\n    [p-tooltip]=\"tooltipText\"\r\n    (mouseenter)=\"tooltipMouseEnter($event)\"\r\n    (mouseleave)=\"tooltipMouseLeave()\"\r\n  >\r\n    {{ column.label || (column.property | titlecase) }}\r\n  </span>\r\n  <span\r\n    *ngIf=\"sort && column.sortable !== false\"\r\n    [class.po-table-header-icon-unselected]=\"sortedColumn?.property !== column\"\r\n    [class.po-table-header-icon-descending]=\"sortedColumn?.property === column && sortedColumn.ascending\"\r\n    [class.po-table-header-icon-ascending]=\"sortedColumn?.property === column && !sortedColumn.ascending\"\r\n  >\r\n  </span>\r\n</ng-template>\r\n\r\n<ng-template #noColumnsWithHeight>\r\n  <div class=\"po-table-header-fixed-inner\" [style.width.px]=\"noColumnsHeader?.nativeElement.offsetWidth\">\r\n    {{ hasValidColumns ? literals.noVisibleColumn : literals.noColumns }}\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #noColumnsWithoutHeight>\r\n  {{ hasValidColumns ? literals.noVisibleColumn : literals.noColumns }}\r\n</ng-template>\r\n\r\n<po-table-column-manager\r\n  *ngIf=\"!hideColumnsManager\"\r\n  [p-columns]=\"columns\"\r\n  [p-max-columns]=\"maxColumns\"\r\n  [p-target]=\"columnManagerTarget\"\r\n  [p-last-visible-columns-selected]=\"lastVisibleColumnsSelected\"\r\n  (p-visible-columns-change)=\"onVisibleColumnsChange($event)\"\r\n  (p-change-visible-columns)=\"onChangeVisibleColumns($event)\"\r\n>\r\n</po-table-column-manager>\r\n",
                    providers: [PoDateService]
                },] }
    ];
    PoTableComponent.ctorParameters = function () { return [
        { type: PoDateService },
        { type: i0.IterableDiffers },
        { type: i0.Renderer2 },
        { type: PoLanguageService },
        { type: i0.ChangeDetectorRef },
        { type: common.DecimalPipe },
        { type: router.Router },
        { type: PoTableService }
    ]; };
    PoTableComponent.propDecorators = {
        tableRowTemplate: [{ type: i0.ContentChild, args: [PoTableRowTemplateDirective, { static: true },] }],
        tableCellTemplate: [{ type: i0.ContentChild, args: [PoTableCellTemplateDirective,] }],
        tableColumnTemplates: [{ type: i0.ContentChildren, args: [PoTableColumnTemplateDirective,] }],
        noColumnsHeader: [{ type: i0.ViewChild, args: ['noColumnsHeader', { read: i0.ElementRef },] }],
        poPopupComponent: [{ type: i0.ViewChild, args: ['popup',] }],
        tableFooterElement: [{ type: i0.ViewChild, args: ['tableFooter', { read: i0.ElementRef, static: false },] }],
        tableWrapperElement: [{ type: i0.ViewChild, args: ['tableWrapper', { read: i0.ElementRef, static: false },] }],
        poTableTbody: [{ type: i0.ViewChild, args: ['poTableTbody', { read: i0.ElementRef, static: false },] }],
        actionsIconElement: [{ type: i0.ViewChildren, args: ['actionsIconElement', { read: i0.ElementRef },] }],
        actionsElement: [{ type: i0.ViewChildren, args: ['actionsElement', { read: i0.ElementRef },] }],
        headersTable: [{ type: i0.ViewChildren, args: ['headersTable',] }],
        columnManagerTarget: [{ type: i0.ViewChild, args: ['columnManagerTarget',] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente responsável por apresentar o detalhe de cada linha da tabela.
     */
    var PoTableDetailComponent = /** @class */ (function () {
        function PoTableDetailComponent(decimalPipe) {
            this.decimalPipe = decimalPipe;
            /**
             * Define se a tabela possui a opção de `selectable` habilitada.
             */
            this.isSelectable = false;
            /**
             * @optional
             *
             * @description
             *
             * Ação executada ao selecionar ou desmarcar a seleção de uma linha de detalhe do `po-table`.
             */
            this.selectRow = new i0.EventEmitter();
        }
        Object.defineProperty(PoTableDetailComponent.prototype, "detail", {
            get: function () {
                return this._detail;
            },
            /**
             * Configuração da linha de detalhes.
             */
            set: function (value) {
                this._detail = this.returnPoTableDetailObject(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableDetailComponent.prototype, "detailColumns", {
            get: function () {
                var _a;
                return ((_a = this.detail) === null || _a === void 0 ? void 0 : _a.columns) || [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableDetailComponent.prototype, "typeHeaderInline", {
            get: function () {
                return (this.detail && !this.detail['typeHeader']) || this.detail['typeHeader'] === 'inline';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTableDetailComponent.prototype, "typeHeaderTop", {
            get: function () {
                return this.detail && this.detail['typeHeader'] === 'top';
            },
            enumerable: false,
            configurable: true
        });
        PoTableDetailComponent.prototype.formatNumberDetail = function (value, format) {
            if (!format) {
                return value;
            }
            return this.decimalPipe.transform(value, format);
        };
        PoTableDetailComponent.prototype.getColumnTitleLabel = function (detail) {
            return detail.label || capitalizeFirstLetter(detail.property);
        };
        PoTableDetailComponent.prototype.onSelectRow = function (item) {
            item.$selected = !item.$selected;
            this.selectRow.emit(item);
        };
        PoTableDetailComponent.prototype.returnPoTableDetailObject = function (value) {
            if (value && isTypeof(value, 'object')) {
                if (value.columns) {
                    value.columns.forEach(function (column) { return (column.property = column.property || column.column); });
                }
                if (Array.isArray(value)) {
                    return { columns: value };
                }
                if (value.columns) {
                    return value;
                }
            }
        };
        return PoTableDetailComponent;
    }());
    PoTableDetailComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-table-detail',
                    template: "<table class=\"po-table-master-detail\">\r\n  <thead *ngIf=\"typeHeaderTop\">\r\n    <tr>\r\n      <th class=\"po-table-header po-table-column-selectable\" *ngIf=\"isSelectable\"></th>\r\n      <th class=\"po-table-header po-table-header-column po-table-header-master-detail\"></th>\r\n      <th class=\"po-table-header po-table-header-ellipsis\" *ngFor=\"let detail of detail.columns\">\r\n        {{ getColumnTitleLabel(detail) }}\r\n      </th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr\r\n      class=\"po-table-detail-row\"\r\n      [class.po-table-row-active]=\"item.$selected && isSelectable\"\r\n      *ngFor=\"let item of items\"\r\n    >\r\n      <ng-container *ngIf=\"isSelectable; else masterDetailSpace\">\r\n        <td class=\"po-table-column-master-detail-space-checkbox\"></td>\r\n        <td class=\"po-table-column po-table-column-selectable\">\r\n          <input class=\"po-table-checkbox\" type=\"checkbox\" [class.po-table-checkbox-checked]=\"item.$selected\" />\r\n          <label class=\"po-table-checkbox-label po-clickable\" (click)=\"onSelectRow(item)\"> </label>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <ng-template #masterDetailSpace>\r\n        <td class=\"po-table-column-master-detail-space\"></td>\r\n      </ng-template>\r\n\r\n      <td\r\n        class=\"po-table-column-master-detail po-table-master-detail-label\"\r\n        (click)=\"isSelectable ? onSelectRow(item) : 'javascript:;'\"\r\n        *ngFor=\"let detail of detailColumns\"\r\n      >\r\n        <strong *ngIf=\"typeHeaderInline\"> {{ getColumnTitleLabel(detail) }}: </strong>\r\n\r\n        <ng-container [ngSwitch]=\"detail.type\">\r\n          <span *ngSwitchCase=\"'currency'\">{{ item[detail.property] | currency: detail.format:'symbol':'1.2-2' }}</span>\r\n          <span *ngSwitchCase=\"'date'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy' }}</span>\r\n          <span *ngSwitchCase=\"'time'\">{{ item[detail.property] | po_time: detail.format || 'HH:mm:ss.ffffff' }}</span>\r\n          <span *ngSwitchCase=\"'dateTime'\">\r\n            {{ item[detail.property] | date: detail.format || 'dd/MM/yyyy HH:mm:ss' }}\r\n          </span>\r\n          <span *ngSwitchCase=\"'number'\">{{ formatNumberDetail(item[detail.property], detail.format) }}</span>\r\n          <span *ngSwitchDefault>{{ item[detail.property] }}</span>\r\n        </ng-container>\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n"
                },] }
    ];
    PoTableDetailComponent.ctorParameters = function () { return [
        { type: common.DecimalPipe }
    ]; };
    PoTableDetailComponent.propDecorators = {
        items: [{ type: i0.Input, args: ['p-items',] }],
        isSelectable: [{ type: i0.Input, args: ['p-selectable',] }],
        selectRow: [{ type: i0.Output, args: ['p-select-row',] }],
        detail: [{ type: i0.Input, args: ['p-detail',] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente responsável por exibir um ícone na tabela.
     */
    var PoTableIconComponent = /** @class */ (function () {
        function PoTableIconComponent() {
            /** Output click. */
            this.click = new i0.EventEmitter();
        }
        Object.defineProperty(PoTableIconComponent.prototype, "allowTooltip", {
            get: function () {
                return !this.disabled && this.iconTooltip;
            },
            enumerable: false,
            configurable: true
        });
        PoTableIconComponent.prototype.onClick = function (event) {
            if (this.clickable) {
                this.click.emit(event);
            }
        };
        PoTableIconComponent.prototype.tooltipMouseEnter = function () {
            if (this.allowTooltip) {
                this.tooltip = this.iconTooltip;
            }
        };
        PoTableIconComponent.prototype.tooltipMouseLeave = function () {
            this.tooltip = undefined;
        };
        return PoTableIconComponent;
    }());
    PoTableIconComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-table-icon',
                    template: "<po-icon\r\n  class=\"po-table-icon-content {{ disabled ? '' : color }}\"\r\n  [ngClass]=\"{ 'po-clickable': clickable, 'po-table-icon-disabled': disabled }\"\r\n  [p-icon]=\"icon\"\r\n  [p-tooltip]=\"tooltip\"\r\n  (click)=\"onClick($event)\"\r\n  (mouseenter)=\"tooltipMouseEnter()\"\r\n  (mouseleave)=\"tooltipMouseLeave()\"\r\n></po-icon>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoTableIconComponent.propDecorators = {
        clickable: [{ type: i0.Input, args: ['p-clickable',] }],
        color: [{ type: i0.Input, args: ['p-color',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        icon: [{ type: i0.Input, args: ['p-icon',] }],
        iconTooltip: [{ type: i0.Input, args: ['p-icon-tooltip',] }],
        click: [{ type: i0.Output, args: ['p-click',] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para a criação de um botão e modal para visualização de todas as legendas.
     */
    var PoTableShowSubtitleComponent = /** @class */ (function () {
        function PoTableShowSubtitleComponent() {
        }
        return PoTableShowSubtitleComponent;
    }());
    PoTableShowSubtitleComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-table-show-subtitle',
                    template: "<div class=\"po-table-footer-show-subtitle\" (click)=\"modal.open()\">\r\n  <div class=\"po-table-footer-show-subtitle-container\">\r\n    <span class=\"po-table-show-subtitle\">{{ literals.seeCompleteSubtitle }}</span>\r\n  </div>\r\n</div>\r\n\r\n<po-modal #modal p-size=\"sm\" [p-title]=\"literals.completeSubtitle\">\r\n  <div *ngFor=\"let subtitle of subtitles\" class=\"po-table-subtitle-footer-modal po-row\">\r\n    <po-table-subtitle-circle p-hide-title=\"true\" [p-subtitle]=\"subtitle\"> </po-table-subtitle-circle>\r\n    <span class=\"po-table-subtitle-text\">{{ subtitle.label }}</span>\r\n  </div>\r\n</po-modal>\r\n"
                },] }
    ];
    PoTableShowSubtitleComponent.propDecorators = {
        subtitles: [{ type: i0.Input, args: ['p-subtitles',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para a criação da representação da legenda, em formato de círculo.
     */
    var PoTableSubtitleCircleComponent = /** @class */ (function () {
        function PoTableSubtitleCircleComponent(poColorPaletteService) {
            this.poColorPaletteService = poColorPaletteService;
            /** Esconde a tooltip. */
            this.hideTitle = false;
        }
        Object.defineProperty(PoTableSubtitleCircleComponent.prototype, "subtitle", {
            get: function () {
                return this._subtitle;
            },
            /** Objeto com os dados da legenda. */
            set: function (subtitle) {
                if (subtitle) {
                    subtitle.color = this.poColorPaletteService.getColor(subtitle);
                }
                this._subtitle = subtitle;
            },
            enumerable: false,
            configurable: true
        });
        return PoTableSubtitleCircleComponent;
    }());
    PoTableSubtitleCircleComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-table-subtitle-circle',
                    template: "<span [title]=\"hideTitle ? '' : subtitle?.label\" class=\"po-table-subtitle-circle po-{{ subtitle?.color }}\">\r\n  {{ subtitle?.content }}\r\n</span>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoTableSubtitleCircleComponent.ctorParameters = function () { return [
        { type: PoColorPaletteService }
    ]; };
    PoTableSubtitleCircleComponent.propDecorators = {
        hideTitle: [{ type: i0.Input, args: ['p-hide-title',] }],
        subtitle: [{ type: i0.Input, args: ['p-subtitle',] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para a criação de um conjunto de legendas.
     */
    var PoTableSubtitleFooterComponent = /** @class */ (function () {
        function PoTableSubtitleFooterComponent(element, renderer) {
            this.element = element;
            this.renderer = renderer;
        }
        PoTableSubtitleFooterComponent.prototype.ngAfterViewInit = function () {
            this.initializeResizeListener();
            this.debounceResize();
        };
        PoTableSubtitleFooterComponent.prototype.ngDoCheck = function () {
            if (!this.isVisible && this.getContainerSize() > 0) {
                this.toggleShowCompleteSubtitle();
                this.isVisible = true;
            }
        };
        PoTableSubtitleFooterComponent.prototype.ngOnDestroy = function () {
            this.removeResizeListener();
        };
        PoTableSubtitleFooterComponent.prototype.debounceResize = function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(function () {
                _this.toggleShowCompleteSubtitle();
            });
        };
        PoTableSubtitleFooterComponent.prototype.getContainerSize = function () {
            return this.element.nativeElement.querySelector('.po-table-subtitle-footer-container').offsetWidth;
        };
        PoTableSubtitleFooterComponent.prototype.getItemsSize = function () {
            var items = this.element.nativeElement.querySelectorAll('.po-table-subtitle-footer');
            return Array.from(items)
                .map(function (item) { return item['offsetWidth']; })
                .reduce(function (a, b) { return a + b; }, 16);
        };
        PoTableSubtitleFooterComponent.prototype.initializeResizeListener = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
                _this.debounceResize();
            });
        };
        PoTableSubtitleFooterComponent.prototype.removeResizeListener = function () {
            this.resizeListener();
        };
        PoTableSubtitleFooterComponent.prototype.toggleShowCompleteSubtitle = function () {
            var containerSize = this.getContainerSize();
            var itemsSize = this.getItemsSize();
            this.showSubtitle = itemsSize > containerSize;
        };
        return PoTableSubtitleFooterComponent;
    }());
    PoTableSubtitleFooterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-table-subtitle-footer',
                    template: "<div class=\"po-table-subtitle-footer-container\">\r\n  <div *ngFor=\"let subtitle of subtitles\" class=\"po-table-subtitle-footer\">\r\n    <po-table-subtitle-circle p-hide-title=\"true\" [p-subtitle]=\"subtitle\"> </po-table-subtitle-circle>\r\n    <span class=\"po-table-subtitle-text\">{{ subtitle.label }}</span>\r\n  </div>\r\n  <po-table-show-subtitle *ngIf=\"showSubtitle\" [p-literals]=\"literals\" [p-subtitles]=\"subtitles\">\r\n  </po-table-show-subtitle>\r\n</div>\r\n"
                },] }
    ];
    PoTableSubtitleFooterComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    PoTableSubtitleFooterComponent.propDecorators = {
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        subtitles: [{ type: i0.Input, args: ['p-subtitles',] }]
    };

    /**
     * @description
     * Módulo do componente po-table
     */
    var PoTableModule = /** @class */ (function () {
        function PoTableModule() {
        }
        return PoTableModule;
    }());
    PoTableModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        router.RouterModule,
                        PoButtonModule,
                        PoCheckboxGroupModule,
                        PoContainerModule,
                        PoLoadingModule,
                        PoModalModule,
                        PoPopoverModule,
                        PoPopupModule,
                        PoTimeModule,
                        PoTooltipModule,
                        PoIconModule
                    ],
                    declarations: [
                        PoTableComponent,
                        PoTableColumnIconComponent,
                        PoTableColumnLabelComponent,
                        PoTableColumnLinkComponent,
                        PoTableColumnManagerComponent,
                        PoTableDetailComponent,
                        PoTableIconComponent,
                        PoTableRowTemplateDirective,
                        PoTableShowSubtitleComponent,
                        PoTableSubtitleCircleComponent,
                        PoTableSubtitleFooterComponent,
                        PoTableCellTemplateDirective,
                        PoTableColumnTemplateDirective
                    ],
                    exports: [
                        PoTableComponent,
                        PoTableRowTemplateDirective,
                        PoTableCellTemplateDirective,
                        PoTableColumnTemplateDirective
                    ],
                    providers: [common.DecimalPipe]
                },] }
    ];

    /**
     * @docsPrivate
     *
     * @description
     *
     * Enum que contém os valores numéricos dos *keyCodes*.
     */
    var PoKeyCodeEnum;
    (function (PoKeyCodeEnum) {
        /** Seta para baixo */
        PoKeyCodeEnum[PoKeyCodeEnum["arrowDown"] = 40] = "arrowDown";
        /** Seta para cima */
        PoKeyCodeEnum[PoKeyCodeEnum["arrowUp"] = 38] = "arrowUp";
        /** Backspace */
        PoKeyCodeEnum[PoKeyCodeEnum["backspace"] = 8] = "backspace";
        /** Delete */
        PoKeyCodeEnum[PoKeyCodeEnum["delete"] = 46] = "delete";
        /** Enter */
        PoKeyCodeEnum[PoKeyCodeEnum["enter"] = 13] = "enter";
        /** Esc */
        PoKeyCodeEnum[PoKeyCodeEnum["esc"] = 27] = "esc";
        /** Tecla K */
        PoKeyCodeEnum[PoKeyCodeEnum["keyK"] = 75] = "keyK";
        /** Tecla L */
        PoKeyCodeEnum[PoKeyCodeEnum["keyL"] = 76] = "keyL";
        /** Espaço */
        PoKeyCodeEnum[PoKeyCodeEnum["space"] = 32] = "space";
        /** Tab */
        PoKeyCodeEnum[PoKeyCodeEnum["tab"] = 9] = "tab";
    })(PoKeyCodeEnum || (PoKeyCodeEnum = {}));

    /**
     * @description
     *
     * O componente `po-checkbox` exibe uma caixa de opção com um texto ao lado, na qual é possível marcar e desmarcar através tanto
     * no *click* do *mouse* quanto por meio da tecla *space* quando estiver com foco.
     *
     * Cada opção poderá receber um estado de marcado, desmarcado, indeterminado e desabilitado, como também uma ação que será disparada quando
     * ocorrer mudanças do valor.
     *
     * > O *model* deste componente aceitará valores igual à `true`, `false` ou `null` para quando for indeterminado.
     */
    var PoCheckboxBaseComponent = /** @class */ (function () {
        function PoCheckboxBaseComponent() {
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado quando o valor do *checkbox* for alterado.
             */
            this.change = new i0.EventEmitter();
            this.id = uuid();
            this._disabled = false;
        }
        Object.defineProperty(PoCheckboxBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o estado do *checkbox* como desabilitado.
             *
             * @default `false`
             */
            set: function (value) {
                this._disabled = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        PoCheckboxBaseComponent.prototype.changeValue = function () {
            if (this.propagateChange) {
                this.propagateChange(this.checkboxValue);
            }
            this.change.emit(this.checkboxValue);
        };
        PoCheckboxBaseComponent.prototype.checkOption = function (value) {
            if (!this.disabled) {
                this.changeModelValue(!value);
                this.changeValue();
            }
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar os estados de habilitado via forms api
        PoCheckboxBaseComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        PoCheckboxBaseComponent.prototype.registerOnChange = function (fn) {
            this.propagateChange = fn;
        };
        PoCheckboxBaseComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        PoCheckboxBaseComponent.prototype.writeValue = function (value) {
            if (value !== this.checkboxValue) {
                this.changeModelValue(value);
            }
        };
        return PoCheckboxBaseComponent;
    }());
    PoCheckboxBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoCheckboxBaseComponent.propDecorators = {
        name: [{ type: i0.Input, args: ['name',] }],
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        change: [{ type: i0.Output, args: ['p-change',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }]
    };
    __decorate([
        InputBoolean()
    ], PoCheckboxBaseComponent.prototype, "autoFocus", void 0);

    /**
     * @docsExtends PoCheckboxBaseComponent
     *
     * @example
     *
     * <example name="po-checkbox-basic" title="PO Checkbox Basic">
     *   <file name="sample-po-checkbox-basic/sample-po-checkbox-basic.component.html"> </file>
     *   <file name="sample-po-checkbox-basic/sample-po-checkbox-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-checkbox-labs" title="PO Checkbox Labs">
     *   <file name="sample-po-checkbox-labs/sample-po-checkbox-labs.component.html"> </file>
     *   <file name="sample-po-checkbox-labs/sample-po-checkbox-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-checkbox-acceptance-term" title="PO Checkbox - Acceptance Term">
     *   <file name="sample-po-checkbox-acceptance-term/sample-po-checkbox-acceptance-term.component.html"> </file>
     *   <file name="sample-po-checkbox-acceptance-term/sample-po-checkbox-acceptance-term.component.ts"> </file>
     * </example>
     */
    var PoCheckboxComponent = /** @class */ (function (_super) {
        __extends(PoCheckboxComponent, _super);
        function PoCheckboxComponent(changeDetector) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            return _this;
        }
        /**
         * Função que atribui foco ao *checkbox*.
         *
         * Para utilizá-la é necessário capturar a referência do componente no DOM através do `ViewChild`, como por exemplo:
         *
         * ```
         * ...
         * import { ViewChild } from '@angular/core';
         * import { PoCheckboxComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoCheckboxComponent, { static: true }) checkbox: PoCheckboxComponent;
         *
         * focusCheckbox() {
         *   this.checkbox.focus();
         * }
         * ```
         */
        PoCheckboxComponent.prototype.focus = function () {
            if (this.checkboxLabel && !this.disabled) {
                this.checkboxLabel.nativeElement.focus();
            }
        };
        PoCheckboxComponent.prototype.onBlur = function () {
            var _a;
            (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
        };
        PoCheckboxComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoCheckboxComponent.prototype.onKeyDown = function (event, value) {
            if (event.which === PoKeyCodeEnum.space || event.keyCode === PoKeyCodeEnum.space) {
                this.checkOption(value);
                event.preventDefault();
            }
        };
        PoCheckboxComponent.prototype.changeModelValue = function (value) {
            this.checkboxValue = typeof value === 'boolean' || value === null ? value : false;
            this.changeDetector.detectChanges();
        };
        return PoCheckboxComponent;
    }(PoCheckboxBaseComponent));
    PoCheckboxComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-checkbox',
                    template: "<div class=\"po-checkbox\">\r\n  <input\r\n    class=\"po-input po-checkbox-input\"\r\n    type=\"checkbox\"\r\n    [class.po-checkbox-input-checked]=\"checkboxValue\"\r\n    [class.po-checkbox-input-indeterminate]=\"checkboxValue === null\"\r\n    [checked]=\"checkboxValue\"\r\n    [disabled]=\"disabled\"\r\n    [id]=\"id\"\r\n    [value]=\"checkboxValue\"\r\n  />\r\n\r\n  <label\r\n    #checkboxLabel\r\n    class=\"po-checkbox-label\"\r\n    [class.po-clickable]=\"!disabled\"\r\n    [for]=\"id\"\r\n    [tabindex]=\"disabled ? -1 : 0\"\r\n    (blur)=\"onBlur()\"\r\n    (click)=\"checkOption(checkboxValue)\"\r\n    (keydown)=\"onKeyDown($event, checkboxValue)\"\r\n  >\r\n    {{ label }}\r\n  </label>\r\n</div>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return PoCheckboxComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    PoCheckboxComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    PoCheckboxComponent.propDecorators = {
        checkboxLabel: [{ type: i0.ViewChild, args: ['checkboxLabel', { static: true },] }]
    };

    /**
     * @usedBy PoComboComponent
     *
     * @description
     *
     * Define o tipo de busca usado no po-combo.
     */
    exports.PoComboFilterMode = void 0;
    (function (PoComboFilterMode) {
        /** Verifica se o texto *inicia* com o valor pesquisado. Caso não seja especificado um tipo, será esse o utilizado. */
        PoComboFilterMode[PoComboFilterMode["startsWith"] = 0] = "startsWith";
        /** Verifica se o texto *contém* o valor pesquisado. */
        PoComboFilterMode[PoComboFilterMode["contains"] = 1] = "contains";
        /** Verifica se o texto *finaliza* com o valor pesquisado. */
        PoComboFilterMode[PoComboFilterMode["endsWith"] = 2] = "endsWith";
    })(exports.PoComboFilterMode || (exports.PoComboFilterMode = {}));

    var PO_COMBO_DEBOUNCE_TIME_DEFAULT = 400;
    var PO_COMBO_FIELD_LABEL_DEFAULT = 'label';
    var PO_COMBO_FIELD_VALUE_DEFAULT = 'value';
    var poComboLiteralsDefault = {
        en: {
            noData: 'No data found'
        },
        es: {
            noData: 'Datos no encontrados'
        },
        pt: {
            noData: 'Nenhum dado encontrado'
        },
        ru: {
            noData: 'Данные не найдены'
        }
    };
    /**
     * @description
     *
     * O `po-combo` exibe uma lista de opções com fácil seleção e filtragem.
     *
     * Além da exibição padrão, nele é possível listar as opões em agrupamentos.
     *
     * É possível selecionar e navegar entre as opções da lista tanto através do *mouse* quanto do teclado. No teclado navegue com
     * as setas e pressione *Enter* na opção que desejar.
     *
     * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.
     *
     * Em `p-filter-mode`, o filtro poderá ser configurado para buscar opões que correspondam ao início, fim ou que contenha o valor digitado.
     *
     * O `po-combo` guarda o último valor caso o usuário desista de uma busca, deixando o campo ou pressionando *Esc*. Caso seja digitado no
     * campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada ao deixar o campo ou pressionando *Enter*.
     */
    var PoComboBaseComponent = /** @class */ (function () {
        function PoComboBaseComponent(languageService) {
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /**
             * @optional
             *
             * @description
             *
             * Se verdadeiro, o evento `p-change` receberá como argumento o `PoComboOption` referente à opção selecionada.
             *
             * @default `false`
             */
            this.emitObjectValue = false;
            /**
             * @optional
             *
             * @description
             *
             * Se verdadeiro, desabilitará a busca de um item via TAB.
             *
             * @default `false`
             */
            this.disabledTabFilter = false;
            /**
             * @optional
             *
             * @description
             *
             * Deve ser informada uma função que será disparada quando houver alterações no ngModel. A função receberá como argumento o model modificado.
             *
             * > Pode-se optar pelo recebimento do objeto selecionado ao invés do model através da propriedade `p-emit-object-value`.
             */
            this.change = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
             *
             * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
             * two-way binding no componente deve se utilizar da seguinte forma:
             *
             * ```
             * <po-combo ... [ngModel]="comboModel" (ngModelChange)="comboModel = $event"> </po-combo>
             * ```
             *
             */
            this.ngModelChange = new i0.EventEmitter();
            this.cacheOptions = [];
            this.firstInWriteValue = true;
            this.isFirstFilter = true;
            this.isFiltering = false;
            this.previousSearchValue = '';
            this.visibleOptions = [];
            this.cacheStaticOptions = [];
            this.comboOptionsList = [];
            this.onModelTouched = null;
            this._changeOnEnter = false;
            this._debounceTime = 400;
            this._disabled = false;
            this._disabledInitFilter = false;
            this._fieldLabel = 'label';
            this._fieldValue = 'value';
            this._filterMinlength = 0;
            this._filterMode = exports.PoComboFilterMode.startsWith;
            this._options = [];
            this._placeholder = '';
            this._required = false;
            this._sort = false;
            // utilizado para fazer o controle de atualizar o model.
            // não deve forçar a atualização se o gatilho for o writeValue para não deixar o campo dirty.
            this.fromWriteValue = false;
            this.language = languageService.getShortLanguage();
        }
        Object.defineProperty(PoComboBaseComponent.prototype, "placeholder", {
            get: function () {
                return this._placeholder;
            },
            /** Mensagem apresentada enquanto o campo estiver vazio. */
            set: function (value) {
                this._placeholder = value || '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "debounceTime", {
            get: function () {
                return this._debounceTime;
            },
            /**
             * @optional
             *
             * @description
             * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
             * Será utilizada apenas quando houver serviço (`p-filter-service`).
             *
             * @default `400`
             */
            set: function (value) {
                var parsedValue = parseInt(value, 10);
                this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : PO_COMBO_DEBOUNCE_TIME_DEFAULT;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "disabledInitFilter", {
            get: function () {
                return this._disabledInitFilter;
            },
            /**
             * @optional
             *
             * @description
             * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
             *
             * @default `false`
             *
             */
            set: function (value) {
                this._disabledInitFilter = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "fieldValue", {
            get: function () {
                return this._fieldValue;
            },
            /**
             * @optional
             *
             * @description
             * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
             * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
             *
             * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
             * PoComboOption.
             *
             * @default `value`
             */
            set: function (value) {
                this._fieldValue = value || PO_COMBO_FIELD_VALUE_DEFAULT;
                if (isTypeof(this.filterService, 'string') && this.service) {
                    this.service.fieldValue = this._fieldValue;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "fieldLabel", {
            get: function () {
                return this._fieldLabel;
            },
            /**
             * @optional
             *
             * @description
             * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
             * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
             *
             * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
             * PoComboOption.
             *
             * @default `label`
             */
            set: function (value) {
                this._fieldLabel = value || PO_COMBO_FIELD_LABEL_DEFAULT;
                if (isTypeof(this.filterService, 'string') && this.service) {
                    this.service.fieldLabel = this._fieldLabel;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "filterMinlength", {
            get: function () {
                return this._filterMinlength;
            },
            /**
             * @optional
             *
             * @description
             * Valor mínimo de caracteres para realizar o filtro no serviço.
             *
             * @default `0`
             */
            set: function (value) {
                var parseValue = typeof value === 'string' ? parseInt(value, 10) : value;
                this._filterMinlength = Number.isInteger(parseValue) ? parseValue : 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: function (required) {
                this._required = convertToBoolean(required);
                this.validateModel(this.selectedValue);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "changeOnEnter", {
            get: function () {
                return this._changeOnEnter;
            },
            /**
             * @optional
             *
             * @description
             * Indica que o evento `p-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
             *
             * @default `false`
             */
            set: function (changeOnEnter) {
                this._changeOnEnter = convertToBoolean(changeOnEnter);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             * Indica que o campo será desabilitado.
             *
             * @default `false`
             */
            set: function (disabled) {
                this._disabled = convertToBoolean(disabled);
                this.validateModel(this.selectedValue);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "sort", {
            get: function () {
                return this._sort;
            },
            /** Indica que a lista definida na propriedade p-options será ordenada pela descrição. */
            set: function (sort) {
                this._sort = convertToBoolean(sort);
                this.comboListDefinitions();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "options", {
            get: function () {
                return this._options;
            },
            /**
             * Nesta propriedade define a lista de opções do `po-combo`.
             *
             * > A lista pode ser definida em dois formatos, simples ou com agrupamentos.
             * - Utilize `PoComboOption` para lista de opções simples.
             * - Utilize `PoComboOptionGroup` para lista de opções com agrupamento.
             *
             * **Importante:**
             * - A lista deve seguir as definições descritas nas respectivas interfaces, caso contrário não exibirá a(as) opção(ões) fora dos padrões.
             * - O componente interpretará o formato da lista de acordo com a interface utilizada e só exibirá as opções correspondentes à ela.
             * - Um agrupamento só será exibido se houver pelo menos uma opção válida.
             */
            set: function (options) {
                this._options = Array.isArray(options) ? options : [];
                this.comboListDefinitions();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "filterMode", {
            get: function () {
                return this._filterMode;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
             *
             * > Quando utilizar a propriedade `p-filter-service` esta propriedade será ignorada.
             *
             * @default `startsWith`
             */
            set: function (filterMode) {
                this._filterMode = filterMode in exports.PoComboFilterMode ? filterMode : exports.PoComboFilterMode.startsWith;
                switch (this._filterMode.toString()) {
                    case 'startsWith':
                        this._filterMode = exports.PoComboFilterMode.startsWith;
                        break;
                    case 'contains':
                        this._filterMode = exports.PoComboFilterMode.contains;
                        break;
                    case 'endsWith':
                        this._filterMode = exports.PoComboFilterMode.endsWith;
                        break;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "filterParams", {
            get: function () {
                return this._filterParams;
            },
            /**
             * @optional
             *
             * @description
             *
             * Valor que será repassado como parâmetro para a URL ou aos métodos do serviço que implementam a interface *PoComboFilter*.
             *
             * > Caso a lista contenha agrupamentos, os mesmos só serão exibidos se houver no mínimo uma opção que corresponda à pesquisa.
             */
            set: function (filterParams) {
                this._filterParams = filterParams || filterParams === 0 || filterParams === false ? filterParams : undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poComboLiteralsDefault[this.language];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-combo`.
             *
             * Para utilizar basta passar a literal que deseja customizar:
             *
             * ```
             *  const customLiterals: PoComboLiterals = {
             *    noData: 'Nenhum valor'
             *  };
             * ```
             *
             * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-combo
             *   [p-literals]="customLiterals">
             * </po-combo>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do
             * [`PoI18nService`](/documentation/po-i18n) ou do browser.
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = Object.assign(Object.assign(Object.assign({}, poComboLiteralsDefault[poLocaleDefault]), poComboLiteralsDefault[this.language]), value);
                }
                else {
                    this._literals = poComboLiteralsDefault[this.language];
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "isOptionGroupList", {
            get: function () {
                return this._options.length && this._options[0].hasOwnProperty('options');
            },
            enumerable: false,
            configurable: true
        });
        PoComboBaseComponent.prototype.ngOnInit = function () {
            this.updateComboList();
        };
        PoComboBaseComponent.prototype.onInitService = function () {
            if (this.filterService) {
                this.setService(this.filterService);
                this.initInputObservable();
            }
        };
        PoComboBaseComponent.prototype.setService = function (service) {
            if (service) {
                if (isTypeof(service, 'object')) {
                    this.service = service;
                }
                else {
                    this.service = this.defaultService;
                    this.service.configProperties(service, this.fieldLabel, this.fieldValue);
                }
            }
        };
        PoComboBaseComponent.prototype.compareMethod = function (search, option, filterMode) {
            switch (filterMode) {
                case exports.PoComboFilterMode.startsWith:
                    return this.startsWith(search, option);
                case exports.PoComboFilterMode.contains:
                    return this.contains(search, option);
                case exports.PoComboFilterMode.endsWith:
                    return this.endsWith(search, option);
            }
        };
        PoComboBaseComponent.prototype.startsWith = function (search, option) {
            return option.label.toLowerCase().startsWith(search.toLowerCase());
        };
        PoComboBaseComponent.prototype.contains = function (search, option) {
            return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
        };
        PoComboBaseComponent.prototype.endsWith = function (search, option) {
            return option.label.toLowerCase().endsWith(search.toLowerCase());
        };
        PoComboBaseComponent.prototype.getOptionFromValue = function (value, options) {
            var _this = this;
            return options ? options.find(function (option) { return _this.isEqual(option.value, value); }) : null;
        };
        PoComboBaseComponent.prototype.getOptionFromLabel = function (label, options) {
            if (options) {
                return options.find(function (option) { return option.label.toString().toLowerCase() === label.toString().toLowerCase(); });
            }
            else {
                return null;
            }
        };
        PoComboBaseComponent.prototype.updateSelectedValue = function (option, isUpdateModel) {
            if (isUpdateModel === void 0) { isUpdateModel = true; }
            var optionLabel = (option && option.label) || '';
            this.updateInternalVariables(option);
            // atualiza o valor do input quando for changeOnEnter apenas se for para atualizar o model.
            if (this.changeOnEnter && isUpdateModel) {
                this.setInputValue(optionLabel);
            }
            else if (!this.changeOnEnter) {
                this.setInputValue(optionLabel);
            }
            if (isUpdateModel) {
                var optionValue = (option && option.value) || undefined;
                this.updateModel(optionValue);
            }
        };
        PoComboBaseComponent.prototype.callModelChange = function (value) {
            // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
            return this.onModelChange ? this.onModelChange(value) : this.ngModelChange.emit(value);
        };
        PoComboBaseComponent.prototype.isEqual = function (value, inputValue) {
            if ((value || value === 0) && inputValue) {
                return value.toString() === inputValue.toString();
            }
            if ((value === null && inputValue !== null) || (value === undefined && inputValue !== undefined)) {
                value = "" + value; // Transformando em string
            }
            return value === inputValue;
        };
        PoComboBaseComponent.prototype.searchForLabel = function (search, options, filterMode) {
            var _this = this;
            if (search && options && options.length) {
                var newOptions_1 = [];
                var addedOptionsGroupTitle_1 = false;
                var optionsGroupTitle_1;
                options.forEach(function (option) {
                    if ('options' in option) {
                        addedOptionsGroupTitle_1 = false;
                        return (optionsGroupTitle_1 = option);
                    }
                    if (option.label && (_this.compareMethod(search, option, filterMode) || _this.service)) {
                        if (_this.isOptionGroupList && !addedOptionsGroupTitle_1) {
                            newOptions_1.push(optionsGroupTitle_1);
                            addedOptionsGroupTitle_1 = true;
                        }
                        newOptions_1.push(option);
                    }
                });
                this.selectedView = newOptions_1[this.isOptionGroupList ? 1 : 0];
                this.updateComboList(newOptions_1);
            }
            else {
                this.updateComboList();
            }
        };
        PoComboBaseComponent.prototype.updateComboList = function (options) {
            var copyOptions = options || __spreadArray([], __read(this.comboOptionsList));
            var newOptions = !options && this.selectedValue ? [Object.assign({}, this.selectedOption)] : copyOptions;
            this.visibleOptions = newOptions;
            if (!this.selectedView && this.visibleOptions.length) {
                this.selectedView = copyOptions.find(function (option) { return option.value !== undefined; });
            }
        };
        PoComboBaseComponent.prototype.getNextOption = function (value, options, reverse) {
            var e_1, _a;
            if (reverse === void 0) { reverse = false; }
            var optionsList = reverse ? options.slice(0).reverse() : options.slice(0);
            var optionFound = null;
            var found = false;
            try {
                for (var optionsList_1 = __values(optionsList), optionsList_1_1 = optionsList_1.next(); !optionsList_1_1.done; optionsList_1_1 = optionsList_1.next()) {
                    var option = optionsList_1_1.value;
                    if (option.value && !optionFound) {
                        optionFound = option;
                    }
                    if (option.value && found) {
                        return option;
                    }
                    if (this.isEqual(option.value, value)) {
                        found = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (optionsList_1_1 && !optionsList_1_1.done && (_a = optionsList_1.return)) _a.call(optionsList_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return optionFound;
        };
        PoComboBaseComponent.prototype.getIndexSelectedView = function () {
            for (var i = 0; i < this.visibleOptions.length; i++) {
                if (this.compareObjects(this.visibleOptions[i], this.selectedView)) {
                    return i;
                }
            }
            return null;
        };
        PoComboBaseComponent.prototype.compareObjects = function (obj1, obj2) {
            return JSON.stringify(obj1) === JSON.stringify(obj2);
        };
        PoComboBaseComponent.prototype.verifyValidOption = function () {
            var inputValue = this.getInputValue();
            var optionFound = this.getOptionFromLabel(inputValue, this.comboOptionsList);
            if (!this.service) {
                this.updateComboList(__spreadArray([], __read(this.cacheStaticOptions)));
            }
            if (optionFound && optionFound.value !== this.selectedValue) {
                this.updateSelectedValue(optionFound);
                this.previousSearchValue = optionFound.label;
            }
            else if (this.selectedValue && this.selectedOption && this.selectedOption.label !== inputValue) {
                this.updateSelectedValueWithOldOption();
                this.previousSearchValue = this.selectedOption.label;
                return;
            }
            else if (inputValue && !optionFound) {
                var isInputValueDiffSelectedLabel = !!(this.selectedOption && this.selectedOption.label !== inputValue);
                this.updateSelectedValue(null, isInputValueDiffSelectedLabel || this.changeOnEnter);
                this.previousSearchValue = '';
                return;
            }
        };
        // Recebe as alterações do model
        PoComboBaseComponent.prototype.writeValue = function (value) {
            this.fromWriteValue = true;
            if (validValue(value) && !this.service && this.comboOptionsList && this.comboOptionsList.length) {
                var option = this.getOptionFromValue(value, this.comboOptionsList);
                this.updateSelectedValue(option);
                this.updateComboList();
                return;
            }
            // Se houver serviço busca pelo model.
            if (value && this.service) {
                return this.getObjectByValue(value);
            }
            else {
                this.updateSelectedValue(null);
                this.updateComboList();
            }
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar os estados de habilitado via forms api
        PoComboBaseComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        PoComboBaseComponent.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        PoComboBaseComponent.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        PoComboBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoComboBaseComponent.prototype.validate = function (abstractControl) {
            if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
        };
        PoComboBaseComponent.prototype.clear = function (value) {
            this.callModelChange(value);
            this.updateSelectedValue(null);
            this.updateComboList();
        };
        PoComboBaseComponent.prototype.configAfterSetFilterService = function (service) {
            if (service) {
                this.comboOptionsList = [];
                this.unsubscribeKeyupObservable();
                this.onInitService();
            }
            else {
                this.service = undefined;
                this.comboOptionsList = this.cacheStaticOptions;
            }
            this.visibleOptions = [];
            this.isFirstFilter = true;
        };
        PoComboBaseComponent.prototype.unsubscribeKeyupObservable = function () {
            if (this.keyupSubscribe) {
                this.keyupSubscribe.unsubscribe();
            }
        };
        PoComboBaseComponent.prototype.validateModel = function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        PoComboBaseComponent.prototype.comboListDefinitions = function () {
            this.comboOptionsList = this.options.length > 0 ? this.listingComboOptions(this.options) : this.options;
            this.cacheStaticOptions = this.comboOptionsList;
            this.updateComboList();
        };
        PoComboBaseComponent.prototype.compareOptions = function (optionA, optionB) {
            var labelA = optionA.label.toString().toLowerCase();
            var labelB = optionB.label.toString().toLowerCase();
            return labelA < labelB ? -1 : labelA > labelB ? 1 : 0;
        };
        PoComboBaseComponent.prototype.hasDuplicatedOption = function (options, currentOption, accumulatedGroupOptions) {
            return (options.some(function (option) { return option.label === currentOption; }) ||
                (accumulatedGroupOptions && accumulatedGroupOptions.some(function (option) { return option.label === currentOption; })));
        };
        PoComboBaseComponent.prototype.listingComboOptions = function (comboOptions) {
            var comboOptionsList = comboOptions.concat();
            var verifiedComboOptionsList = this.verifyComboOptions(comboOptionsList);
            this.sortOptions(verifiedComboOptionsList);
            if (this.isOptionGroupList && verifiedComboOptionsList.length > 0) {
                return this.verifyComboOptionsGroup(verifiedComboOptionsList);
            }
            return verifiedComboOptionsList;
        };
        PoComboBaseComponent.prototype.sortOptions = function (comboOptionsList) {
            if (comboOptionsList.length > 0 && this.sort) {
                return comboOptionsList.sort(this.compareOptions);
            }
        };
        PoComboBaseComponent.prototype.validateValue = function (currentOption, verifyingOptionsGroup) {
            if (verifyingOptionsGroup === void 0) { verifyingOptionsGroup = false; }
            var label = currentOption.label, options = currentOption.options, value = currentOption.value;
            if (this.isOptionGroupList) {
                return ((validValue(label) && options && options.length > 0) || (verifyingOptionsGroup === true && validValue(value)));
            }
            return validValue(value) && !options;
        };
        PoComboBaseComponent.prototype.verifyComboOptions = function (comboOptions, verifyingOptionsGroup, accumulatedGroupOptions) {
            var _this = this;
            if (verifyingOptionsGroup === void 0) { verifyingOptionsGroup = false; }
            return comboOptions.reduce(function (accumulatedOptions, currentOption) {
                if (!_this.verifyIfHasLabel(currentOption) ||
                    _this.hasDuplicatedOption(accumulatedOptions, currentOption.label, accumulatedGroupOptions) ||
                    !_this.validateValue(currentOption, verifyingOptionsGroup)) {
                    return accumulatedOptions;
                }
                accumulatedOptions.push(currentOption);
                return accumulatedOptions;
            }, []);
        };
        PoComboBaseComponent.prototype.verifyComboOptionsGroup = function (comboOptionsList) {
            var _this = this;
            return comboOptionsList.reduce(function (accumulatedGroupOptions, currentOption) {
                var options = currentOption.options, label = currentOption.label;
                var verifiedComboOptionsGroupList = _this.verifyComboOptions(options, true, accumulatedGroupOptions);
                if (verifiedComboOptionsGroupList.length > 0) {
                    _this.sortOptions(verifiedComboOptionsGroupList);
                    accumulatedGroupOptions.push.apply(accumulatedGroupOptions, __spreadArray([{ label: label, options: true }], __read(verifiedComboOptionsGroupList)));
                }
                return accumulatedGroupOptions;
            }, []);
        };
        PoComboBaseComponent.prototype.verifyIfHasLabel = function (currentOption) {
            if (currentOption === void 0) { currentOption = {}; }
            var label = currentOption.label, options = currentOption.options, value = currentOption.value;
            if ((this.isOptionGroupList && options && !label) || (!label && !value) || (!this.isOptionGroupList && options)) {
                return false;
            }
            if (!currentOption.label) {
                currentOption.label = currentOption.value.toString();
                return true;
            }
            return true;
        };
        PoComboBaseComponent.prototype.updateInternalVariables = function (option) {
            if (option) {
                this.selectedView = option;
                this.selectedOption = option;
            }
            else {
                this.selectedView = undefined;
                this.selectedOption = undefined;
            }
        };
        PoComboBaseComponent.prototype.updateModel = function (value) {
            if (value !== this.selectedValue) {
                if (!this.fromWriteValue) {
                    this.callModelChange(value);
                }
                this.change.emit(this.emitObjectValue ? this.selectedOption : value);
            }
            this.selectedValue = value;
            this.fromWriteValue = false;
        };
        PoComboBaseComponent.prototype.updateSelectedValueWithOldOption = function () {
            var oldOption = this.getOptionFromValue(this.selectedValue, this.comboOptionsList);
            if (oldOption && oldOption.label) {
                return this.updateSelectedValue(oldOption);
            }
        };
        return PoComboBaseComponent;
    }());
    PoComboBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoComboBaseComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoComboBaseComponent.propDecorators = {
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        help: [{ type: i0.Input, args: ['p-help',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        filterService: [{ type: i0.Input, args: ['p-filter-service',] }],
        icon: [{ type: i0.Input, args: ['p-icon',] }],
        optional: [{ type: i0.Input, args: ['p-optional',] }],
        clean: [{ type: i0.Input, args: ['p-clean',] }],
        emitObjectValue: [{ type: i0.Input, args: ['p-emit-object-value',] }],
        disabledTabFilter: [{ type: i0.Input, args: ['p-disabled-tab-filter',] }],
        change: [{ type: i0.Output, args: ['p-change',] }],
        ngModelChange: [{ type: i0.Output, args: ['ngModelChange',] }],
        placeholder: [{ type: i0.Input, args: ['p-placeholder',] }],
        debounceTime: [{ type: i0.Input, args: ['p-debounce-time',] }],
        disabledInitFilter: [{ type: i0.Input, args: ['p-disabled-init-filter',] }],
        fieldValue: [{ type: i0.Input, args: ['p-field-value',] }],
        fieldLabel: [{ type: i0.Input, args: ['p-field-label',] }],
        filterMinlength: [{ type: i0.Input, args: ['p-filter-minlength',] }],
        required: [{ type: i0.Input, args: ['p-required',] }],
        changeOnEnter: [{ type: i0.Input, args: ['p-change-on-enter',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        sort: [{ type: i0.Input, args: ['p-sort',] }],
        options: [{ type: i0.Input, args: ['p-options',] }],
        filterMode: [{ type: i0.Input, args: ['p-filter-mode',] }],
        filterParams: [{ type: i0.Input, args: ['p-filter-params',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }]
    };
    __decorate([
        InputBoolean()
    ], PoComboBaseComponent.prototype, "autoFocus", void 0);
    __decorate([
        InputBoolean()
    ], PoComboBaseComponent.prototype, "clean", void 0);
    __decorate([
        InputBoolean()
    ], PoComboBaseComponent.prototype, "emitObjectValue", void 0);
    __decorate([
        InputBoolean()
    ], PoComboBaseComponent.prototype, "disabledTabFilter", void 0);

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço padrão utilizado para filtrar os dados do componente po-combo.
     */
    var PoComboFilterService = /** @class */ (function () {
        function PoComboFilterService(http) {
            this.http = http;
            this.fieldLabel = 'label';
            this.fieldValue = 'value';
            this.headers = new i1.HttpHeaders({
                'X-PO-No-Message': 'true'
            });
            this.messages = [];
        }
        Object.defineProperty(PoComboFilterService.prototype, "url", {
            get: function () {
                return this._url;
            },
            enumerable: false,
            configurable: true
        });
        PoComboFilterService.prototype.getFilteredData = function (param, filterParams) {
            var _this = this;
            var value = param.value;
            var filterParamsValidated = validateObjectType(filterParams);
            var params = Object.assign(Object.assign({}, filterParamsValidated), { filter: value });
            return this.http
                .get("" + this.url, { responseType: 'json', params: params, headers: this.headers })
                .pipe(operators.map(function (response) { return _this.parseToArrayComboOption(response.items); }));
        };
        PoComboFilterService.prototype.getObjectByValue = function (value, filterParams) {
            var _this = this;
            var filterParamsValidated = validateObjectType(filterParams);
            return this.http
                .get(this.url + "/" + value, { params: filterParamsValidated, headers: this.headers })
                .pipe(operators.map(function (item) { return _this.parseToComboOption(item); }));
        };
        PoComboFilterService.prototype.configProperties = function (url, fieldLabel, fieldValue) {
            this._url = url;
            this.fieldLabel = fieldLabel;
            this.fieldValue = fieldValue;
        };
        PoComboFilterService.prototype.parseToArrayComboOption = function (items) {
            var _this = this;
            if (items && items.length > 0) {
                var parsedOptions = items.map(function (item) { return _this.parseToComboOption(item); });
                this.displayMessages();
                return parsedOptions;
            }
            return [];
        };
        PoComboFilterService.prototype.parseToComboOption = function (item) {
            if (!(item === null || item === void 0 ? void 0 : item[this.fieldValue])) {
                this.addMessage(item, this.fieldValue);
                return { value: '' };
            }
            var label = item[this.fieldLabel];
            var value = item[this.fieldValue];
            return { label: label, value: value };
        };
        PoComboFilterService.prototype.addMessage = function (item, property) {
            this.messages.push("Cannot read property \"" + property + "\" of " + JSON.stringify(item) + ",\n      see [p-field-value] property at https://po-ui.io/documentation/po-combo");
        };
        PoComboFilterService.prototype.displayMessages = function () {
            if (this.messages.length) {
                this.messages.forEach(function (message) { return console.error(message); });
                this.messages = [];
            }
        };
        return PoComboFilterService;
    }());
    PoComboFilterService.decorators = [
        { type: i0.Injectable }
    ];
    PoComboFilterService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    /**
     * @usedBy PoComboComponent
     *
     * @description
     *
     * Esta diretiva permite personalizar o conteúdo dos itens exibidos na lista de opções do componente.
     *
     * > Quando utilizada em dispositivos *mobile* será exibido o componente nativo.
     *
     * Para personalizar o conteúdo de cada item da lista deve-se utilizar a diretiva `p-combo-option-template` com `ng-template`
     * dentro da *tag* `po-combo`.
     *
     * Para obter a referência do item atual utilize `let-option`, com isso você terá acesso aos valores e poderá personalizar sua exibição.
     *
     * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <po-combo
     *   name="combo"
     *   [(ngModel)]="combo"
     *   [p-options]="options">
     *     <ng-template p-combo-option-template let-option>
     *       <option-template [option]="option"></option-template>
     *     </ng-template>
     * </po-combo>
     * ...
     * ```
     *
     * ```
     * ...
     * <po-combo
     *   name="combo"
     *   [(ngModel)]="combo"
     *   [p-options]="options">
     *     <div *p-combo-option-template="let option">
     *       <option-template [option]="option"></option-template>
     *     </div>
     * </po-combo>
     * ...
     *
     * ```
     * Para o caso de personalização de opções com agrupamentos, deve-se seguir a mesma orientação acima. Porém, cabe ao desenvolvedor
     * a responsabilidade de estilização dos elementos da lista, tais como título e links dos grupos. Abaixo há um exemplo de aplicação:
     *
     * ```
     * ...
     * <ng-template p-combo-option-template let-option>
     *   <ng-container *ngIf="option.options; then optionsGroupTitle; else optionsGroupList"></ng-container>
     *   <ng-template #optionsGroupTitle>
     *     <p class="po-combo-item-title" [innerHtml]="option.label"></p>
     *   </ng-template>
     *   <ng-template #optionsGroupList>
     *     <div class="po-combo-item">
     *       <div class="po-row">
     *         <po-avatar class="po-md-1" p-size="sm"></po-avatar>
     *         <div class="po-md-11" [innerHtml]="option.label"></div>
     *       </div>
     *     </div>
     *   </ng-template>
     * </ng-template>
     * ...
     *
     * ```
     */
    var PoComboOptionTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function PoComboOptionTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return PoComboOptionTemplateDirective;
    }());
    PoComboOptionTemplateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[p-combo-option-template]'
                },] }
    ];
    PoComboOptionTemplateDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };

    var poComboContainerOffset = 8;
    var poComboContainerPositionDefault = 'bottom';
    /**
     * @docsExtends PoComboBaseComponent
     *
     * @description
     * Utilizando po-combo com serviço, é possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente
     * faça uma requisição à URL informada passando o valor digitado no campo. Se encontrado o valor, então o mesmo será selecionado, caso
     * não seja encontrado, então a lista de itens voltará para o estado inicial.
     *
     * @example
     *
     * <example name="po-combo-basic" title="PO Combo Basic">
     *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.html"> </file>
     *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-combo-labs" title="PO Combo Labs">
     *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.html"> </file>
     *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-combo-scheduling" title="PO Combo - Scheduling">
     *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.html"> </file>
     *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.ts"> </file>
     *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.service.ts"> </file>
     * </example>
     *
     * <example name="po-combo-transfer" title="PO Combo - Banking Transfer">
     *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.html"> </file>
     *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.ts"> </file>
     * </example>
     *
     * <example name="po-combo-heroes" title="PO Combo - Heroes">
     *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.html"> </file>
     *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.ts"> </file>
     * </example>
     *
     * <example name="po-combo-heroes-reactive-form" title="PO Combo - Heroes Reactive Form">
     *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.html"> </file>
     *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.ts"> </file>
     * </example>
     *
     * <example name="po-combo-hotels" title="PO Combo - Booking Hotel">
     *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.html"> </file>
     *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.ts"> </file>
     * </example>
     */
    var PoComboComponent = /** @class */ (function (_super) {
        __extends(PoComboComponent, _super);
        function PoComboComponent(element, differs, defaultService, renderer, changeDetector, controlPosition, sanitized, languageService) {
            var _this = _super.call(this, languageService) || this;
            _this.element = element;
            _this.differs = differs;
            _this.defaultService = defaultService;
            _this.renderer = renderer;
            _this.changeDetector = changeDetector;
            _this.controlPosition = controlPosition;
            _this.sanitized = sanitized;
            _this.comboIcon = 'po-icon-arrow-down';
            _this.comboOpen = false;
            _this.isProcessingValueByTab = false;
            _this.scrollTop = 0;
            _this.shouldMarkLetters = true;
            _this._isServerSearching = false;
            _this.onScroll = function () {
                _this.adjustContainerPosition();
            };
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        Object.defineProperty(PoComboComponent.prototype, "isServerSearching", {
            get: function () {
                return this._isServerSearching;
            },
            set: function (value) {
                if (value) {
                    this._isServerSearching = value;
                    this.changeDetector.detectChanges();
                    this.setContainerPosition();
                    this.initializeListeners();
                }
                else {
                    this._isServerSearching = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        PoComboComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoComboComponent.prototype.ngOnChanges = function (changes) {
            if (changes.debounceTime) {
                this.unsubscribeKeyupObservable();
                this.initInputObservable();
            }
            if (changes.filterService) {
                this.configAfterSetFilterService(this.filterService);
            }
        };
        PoComboComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
            if (this.filterSubscription) {
                this.filterSubscription.unsubscribe();
            }
            if (this.getSubscription) {
                this.getSubscription.unsubscribe();
            }
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoComboComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoComboComponent, { static: true }) combo: PoComboComponent;
         *
         * focusCombo() {
         *   this.combo.focus();
         * }
         * ```
         */
        PoComboComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.inputEl.nativeElement.focus();
            }
        };
        PoComboComponent.prototype.onBlur = function () {
            var _a;
            (_a = this.onModelTouched) === null || _a === void 0 ? void 0 : _a.call(this);
        };
        PoComboComponent.prototype.onKeyDown = function (event) {
            var key = event.keyCode;
            var inputValue = event.target.value;
            // busca um registro quando acionar o tab
            if (this.service && key === PoKeyCodeEnum.tab && inputValue && !this.disabledTabFilter) {
                this.controlComboVisibility(false);
                return this.getObjectByValue(inputValue);
            }
            // Teclas "up" e "down"
            if (key === PoKeyCodeEnum.arrowUp || key === PoKeyCodeEnum.arrowDown) {
                event.preventDefault();
                if (this.comboOpen) {
                    if (key === PoKeyCodeEnum.arrowUp) {
                        this.selectPreviousOption();
                    }
                    else {
                        this.selectNextOption();
                    }
                }
                this.controlComboVisibility(true);
                this.isFiltering = this.changeOnEnter ? this.isFiltering : false;
                this.shouldMarkLetters = this.changeOnEnter ? this.shouldMarkLetters : false;
                return;
            }
            // Teclas "tab" ou "esc"
            if (key === PoKeyCodeEnum.tab || key === PoKeyCodeEnum.esc) {
                if (key === PoKeyCodeEnum.esc && this.comboOpen) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                this.controlComboVisibility(false);
                this.verifyValidOption();
                this.isProcessingValueByTab = true;
                if (!this.service) {
                    // caso for changeOnEnter e nao ter selectedValue deve limpar o selectedView para reinicia-lo.
                    this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
                }
                return;
            }
            // Tecla "enter"
            if (key === PoKeyCodeEnum.enter && this.selectedView && this.comboOpen) {
                var isUpdateModel = this.selectedView.value !== this.selectedValue || inputValue !== this.selectedView.label;
                this.controlComboVisibility(false);
                this.updateSelectedValue(this.selectedView, isUpdateModel);
                this.isFiltering = false;
                if (!this.service) {
                    this.updateComboList(__spreadArray([], __read(this.cacheStaticOptions)));
                }
                return;
            }
            if (key === PoKeyCodeEnum.enter) {
                this.controlComboVisibility(true);
            }
        };
        PoComboComponent.prototype.onKeyUp = function (event) {
            var key = event.keyCode || event.which;
            var inputValue = event.target.value;
            var isValidKey = key !== PoKeyCodeEnum.arrowUp && key !== PoKeyCodeEnum.arrowDown && key !== PoKeyCodeEnum.enter;
            if (isValidKey) {
                if (inputValue) {
                    if (!this.service && this.previousSearchValue !== inputValue) {
                        this.shouldMarkLetters = true;
                        this.isFiltering = true;
                        this.searchForLabel(inputValue, this.comboOptionsList, this.filterMode);
                    }
                }
                else {
                    // quando apagar rapido o campo e conter serviço, valor, não disparava o keyup observable
                    // necessario este tratamento para retornar a lista 'default'.
                    var useDefaultOptionsService = this.service && this.selectedValue && this.selectedOption.label === this.previousSearchValue;
                    this.updateSelectedValue(null);
                    if (!this.service) {
                        this.updateComboList();
                    }
                    else if (useDefaultOptionsService) {
                        this.updateComboList(__spreadArray([], __read(this.cacheOptions)));
                    }
                    this.isFiltering = false;
                }
                // caso o valor pesquisado for diferente do anterior deve abrir o combo
                if (this.previousSearchValue !== inputValue) {
                    this.changeDetector.detectChanges();
                    this.controlComboVisibility(true);
                }
            }
            this.previousSearchValue = inputValue;
        };
        PoComboComponent.prototype.initInputObservable = function () {
            var _this = this;
            if (this.service) {
                var keyupObservable = rxjs.fromEvent(this.inputEl.nativeElement, 'keyup').pipe(operators.filter(function (e) { return _this.isValidCharacterToSearch(e.keyCode); }), operators.map(function (e) { return e.currentTarget.value; }), operators.distinctUntilChanged(), operators.tap(function () {
                    _this.shouldMarkLetters = false;
                }), operators.debounceTime(this.debounceTime));
                this.keyupSubscribe = keyupObservable.subscribe(function (value) {
                    if (value.length >= _this.filterMinlength || !value) {
                        _this.controlApplyFilter(value);
                    }
                });
            }
        };
        PoComboComponent.prototype.controlApplyFilter = function (value) {
            if (!this.isProcessingValueByTab && (!this.selectedOption || value !== this.selectedOption.label)) {
                this.applyFilter(value);
            }
            this.isProcessingValueByTab = false;
        };
        PoComboComponent.prototype.applyFilter = function (value) {
            var _this = this;
            this.controlComboVisibility(false);
            this.isServerSearching = true;
            var param = { property: this.fieldLabel, value: value };
            this.filterSubscription = this.service.getFilteredData(param, this.filterParams).subscribe(function (items) { return _this.setOptionsByApplyFilter(value, items); }, function (error) { return _this.onErrorFilteredData(); });
        };
        PoComboComponent.prototype.setOptionsByApplyFilter = function (value, items) {
            this.shouldMarkLetters = true;
            this.isServerSearching = false;
            this.options = items;
            this.searchForLabel(value, items, this.filterMode);
            this.changeDetector.detectChanges();
            this.controlComboVisibility(true);
            if (this.isFirstFilter) {
                this.isFirstFilter = !this.isFirstFilter;
                this.cacheOptions = this.comboOptionsList;
            }
        };
        PoComboComponent.prototype.getObjectByValue = function (value) {
            var _this = this;
            var _a;
            if (this.selectedValue !== value && ((_a = this.selectedOption) === null || _a === void 0 ? void 0 : _a.label) !== value) {
                this.isProcessingValueByTab = true;
                this.getSubscription = this.service.getObjectByValue(value, this.filterParams).subscribe(function (item) { return _this.updateOptionByFilteredValue(item); }, function (error) { return _this.onErrorGetObjectByValue(); });
            }
        };
        PoComboComponent.prototype.updateOptionByFilteredValue = function (item) {
            var _this = this;
            if (item) {
                this.options = [item];
                this.onOptionClick(item);
            }
            else {
                this.updateSelectedValue(null);
            }
            setTimeout(function () {
                _this.isProcessingValueByTab = false;
            }, this.debounceTime);
        };
        PoComboComponent.prototype.selectPreviousOption = function () {
            var currentViewValue = this.selectedView && this.selectedView.value;
            if (currentViewValue) {
                var nextOption = this.getNextOption(currentViewValue, this.visibleOptions, true);
                this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
            }
            else if (this.visibleOptions.length) {
                var visibleOption = this.visibleOptions[this.visibleOptions.length - 1];
                this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
            }
        };
        PoComboComponent.prototype.selectNextOption = function () {
            var currentViewValue = this.selectedView && this.selectedView.value;
            if (currentViewValue) {
                var nextOption = this.getNextOption(currentViewValue, this.visibleOptions);
                this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
            }
            else if (this.visibleOptions.length) {
                var index = this.changeOnEnter ? 1 : 0;
                var visibleOption = this.visibleOptions[index];
                this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
            }
        };
        PoComboComponent.prototype.toggleComboVisibility = function () {
            if (this.disabled) {
                return;
            }
            if (this.service && !this.disabledInitFilter) {
                this.applyFilterInFirstClick();
            }
            this.controlComboVisibility(!this.comboOpen);
        };
        PoComboComponent.prototype.applyFilterInFirstClick = function () {
            if (this.isFirstFilter && !this.selectedValue) {
                this.applyFilter('');
            }
        };
        PoComboComponent.prototype.controlComboVisibility = function (toOpen) {
            toOpen ? this.open() : this.close();
        };
        PoComboComponent.prototype.onOptionClick = function (option, event) {
            var inputValue = this.getInputValue();
            var isUpdateModel = option.value !== this.selectedValue || !!(this.selectedView && inputValue !== this.selectedView.label);
            if (event) {
                event.stopPropagation();
            }
            this.updateSelectedValue(option, isUpdateModel);
            this.controlComboVisibility(false);
            if (!this.service) {
                this.updateComboList(__spreadArray([], __read(this.cacheStaticOptions)));
            }
            this.previousSearchValue = this.selectedView.label;
        };
        PoComboComponent.prototype.scrollTo = function (index) {
            var selectedItem = this.element.nativeElement.querySelectorAll('.po-combo-item-selected');
            var scrollTop = !selectedItem.length || index <= 1 ? 0 : selectedItem[0].offsetTop - 88;
            this.setScrollTop(scrollTop);
        };
        PoComboComponent.prototype.getInputValue = function () {
            return this.inputEl.nativeElement.value;
        };
        PoComboComponent.prototype.setInputValue = function (value) {
            this.inputEl.nativeElement.value = value;
        };
        PoComboComponent.prototype.wasClickedOnToggle = function (event) {
            if (this.comboOpen &&
                !this.inputEl.nativeElement.contains(event.target) &&
                !this.iconElement.nativeElement.contains(event.target) &&
                (!this.contentElement || !this.contentElement.nativeElement.contains(event.target))) {
                // Esconde Content do Combo quando for clicado fora
                this.controlComboVisibility(false);
                this.verifyValidOption();
                // caso for changeOnEnter deve limpar o selectedView para reinicia-lo
                this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
            }
            else {
                if (this.service && !this.getInputValue() && !this.isFirstFilter) {
                    this.applyFilter('');
                }
            }
        };
        PoComboComponent.prototype.getLabelFormatted = function (label) {
            var sanitizedLabel = this.sanitizeTagHTML(label);
            var format = sanitizedLabel;
            if (this.isFiltering ||
                (this.service &&
                    this.getInputValue() &&
                    !this.compareObjects(this.cacheOptions, this.visibleOptions) &&
                    this.shouldMarkLetters)) {
                var labelInput = this.sanitizeTagHTML(this.getInputValue().toString().toLowerCase());
                var labelLowerCase = sanitizedLabel.toLowerCase();
                var openTagBold = '<span class="po-font-text-large-bold">';
                var closeTagBold = '</span>';
                var startString = void 0;
                var middleString = void 0;
                var endString = void 0;
                switch (this.filterMode) {
                    case exports.PoComboFilterMode.startsWith:
                    case exports.PoComboFilterMode.contains:
                        var indexOfLabelInput = labelLowerCase.indexOf(labelInput);
                        if (indexOfLabelInput > -1) {
                            startString = sanitizedLabel.substring(0, indexOfLabelInput);
                            middleString = sanitizedLabel.substring(indexOfLabelInput, indexOfLabelInput + labelInput.length);
                            endString = sanitizedLabel.substring(indexOfLabelInput + labelInput.length);
                            format = startString + openTagBold + middleString + closeTagBold + endString;
                        }
                        break;
                    case exports.PoComboFilterMode.endsWith:
                        var lastIndexOfLabelInput = labelLowerCase.lastIndexOf(labelInput);
                        if (lastIndexOfLabelInput > -1) {
                            startString = sanitizedLabel.substring(0, lastIndexOfLabelInput);
                            middleString = sanitizedLabel.substring(lastIndexOfLabelInput);
                            format = startString + openTagBold + middleString + closeTagBold;
                        }
                        break;
                }
            }
            return this.safeHtml(format);
        };
        PoComboComponent.prototype.safeHtml = function (value) {
            return this.sanitized.bypassSecurityTrustHtml(value);
        };
        PoComboComponent.prototype.isValidCharacterToSearch = function (keyCode) {
            return (keyCode !== 9 && // tab
                keyCode !== 13 && // entet
                keyCode !== 16 && // shift
                keyCode !== 17 && // ctrl
                keyCode !== 18 && // alt
                keyCode !== 20 && // capslock
                keyCode !== 27 && // esc
                keyCode !== 37 && // seta
                keyCode !== 38 && // seta
                keyCode !== 39 && // seta
                keyCode !== 40 && // seta
                keyCode !== 93); // windows menu
        };
        PoComboComponent.prototype.searchOnEnter = function (value) {
            if (this.service && !this.selectedView && value.length >= this.filterMinlength) {
                this.controlApplyFilter(value);
            }
        };
        PoComboComponent.prototype.adjustContainerPosition = function () {
            this.controlPosition.adjustPosition(poComboContainerPositionDefault);
        };
        PoComboComponent.prototype.close = function () {
            this.comboOpen = false;
            this.changeDetector.detectChanges();
            this.comboIcon = 'po-icon-arrow-down';
            this.removeListeners();
            this.isFiltering = false;
        };
        PoComboComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.removeListeners();
            this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
                _this.wasClickedOnToggle(event);
            });
            this.eventResizeListener = this.renderer.listen('window', 'resize', function () {
                // timeout necessario pois a animação do po-menu impacta no ajuste da posição do container.
                setTimeout(function () { return _this.adjustContainerPosition(); }, 250);
            });
            window.addEventListener('scroll', this.onScroll, true);
        };
        PoComboComponent.prototype.onErrorGetObjectByValue = function () {
            this.updateOptionByFilteredValue(null);
        };
        PoComboComponent.prototype.onErrorFilteredData = function () {
            this.isServerSearching = false;
            this.updateComboList([]);
            this.controlComboVisibility(true);
        };
        PoComboComponent.prototype.open = function () {
            this.comboOpen = true;
            this.changeDetector.detectChanges();
            this.comboIcon = 'po-icon-arrow-up';
            this.initializeListeners();
            this.inputEl.nativeElement.focus();
            this.scrollTo(this.getIndexSelectedView());
            this.setContainerPosition();
        };
        PoComboComponent.prototype.removeListeners = function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
            if (this.eventResizeListener) {
                this.eventResizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        PoComboComponent.prototype.sanitizeTagHTML = function (value) {
            if (value === void 0) { value = ''; }
            return value.replace(/\</gm, '&lt;').replace(/\>/g, '&gt;');
        };
        PoComboComponent.prototype.setContainerPosition = function () {
            this.controlPosition.setElements(this.containerElement.nativeElement, poComboContainerOffset, this.inputEl, ['top', 'bottom'], true);
            this.adjustContainerPosition();
        };
        PoComboComponent.prototype.setScrollTop = function (scrollTop) {
            if (this.contentElement) {
                this.contentElement.nativeElement.scrollTop = scrollTop;
            }
        };
        return PoComboComponent;
    }(PoComboBaseComponent));
    PoComboComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-combo',
                    template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content\">\r\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\r\n      <po-icon class=\"po-field-icon\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\r\n    </div>\r\n\r\n    <input\r\n      #inp\r\n      class=\"po-input po-combo-input\"\r\n      [ngClass]=\"clean && inp.value ? 'po-input-double-icon-right' : 'po-input-icon-right'\"\r\n      [class.po-input-icon-left]=\"icon\"\r\n      autocomplete=\"off\"\r\n      type=\"text\"\r\n      [attr.name]=\"name\"\r\n      [disabled]=\"disabled\"\r\n      [placeholder]=\"placeholder\"\r\n      [required]=\"required\"\r\n      (click)=\"toggleComboVisibility()\"\r\n      (keyup)=\"onKeyUp($event)\"\r\n      (blur)=\"onBlur()\"\r\n      (keyup.enter)=\"searchOnEnter($event.target.value)\"\r\n      (keydown)=\"onKeyDown($event)\"\r\n    />\r\n\r\n    <div class=\"po-field-icon-container-right\">\r\n      <po-clean *ngIf=\"clean && !disabled\" (p-change-event)=\"clear($event)\" [p-element-ref]=\"inputEl\"> </po-clean>\r\n      <span\r\n        #iconArrow\r\n        class=\"po-icon po-field-icon {{ comboIcon }}\"\r\n        [class.po-field-icon-disabled]=\"disabled\"\r\n        [class.po-field-icon]=\"!disabled\"\r\n        (click)=\"toggleComboVisibility()\"\r\n      >\r\n      </span>\r\n    </div>\r\n  </div>\r\n\r\n  <div #containerElement class=\"po-combo-container\" [hidden]=\"!comboOpen && !isServerSearching\">\r\n    <ng-container *ngIf=\"isServerSearching; then loadingTemplate; else optionsTemplate\"> </ng-container>\r\n  </div>\r\n\r\n  <po-field-container-bottom></po-field-container-bottom>\r\n</po-field-container>\r\n\r\n<ng-template #loadingTemplate>\r\n  <div class=\"po-combo-container-loading\">\r\n    <po-loading></po-loading>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #optionsTemplate>\r\n  <ng-container *ngIf=\"visibleOptions.length; then visibleOptionsTemplate; else noDataTemplate\"> </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #visibleOptionsTemplate>\r\n  <ul #contentElement class=\"po-combo-container-content\">\r\n    <li\r\n      *ngFor=\"let option of visibleOptions\"\r\n      [class.po-combo-item-selected]=\"compareObjects(selectedView, option)\"\r\n      (click)=\"option?.options ? undefined : onOptionClick(option, $event)\"\r\n    >\r\n      <ng-container *ngIf=\"comboOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\r\n\r\n      <ng-template #defaultOptionTemplate>\r\n        <label *ngIf=\"option?.options; else optionLink\" class=\"po-combo-item-title\">{{ option.label }}</label>\r\n        <ng-template #optionLink>\r\n          <a class=\"po-combo-item\">\r\n            <span [innerHTML]=\"getLabelFormatted(option?.label)\"></span>\r\n          </a>\r\n        </ng-template>\r\n      </ng-template>\r\n\r\n      <ng-template #optionTemplate>\r\n        <ng-container *ngIf=\"isOptionGroupList; then optionsGroupTemplate; else defaultOptionsTemplate\"></ng-container>\r\n\r\n        <ng-template #optionsGroupTemplate>\r\n          <ng-template\r\n            [ngTemplateOutlet]=\"comboOptionTemplate?.templateRef\"\r\n            [ngTemplateOutletContext]=\"{ $implicit: option, selected: compareObjects(selectedView, option) }\"\r\n          >\r\n          </ng-template>\r\n        </ng-template>\r\n\r\n        <ng-template #defaultOptionsTemplate>\r\n          <a class=\"po-combo-item\">\r\n            <ng-template\r\n              [ngTemplateOutlet]=\"comboOptionTemplate?.templateRef\"\r\n              [ngTemplateOutletContext]=\"{ $implicit: option }\"\r\n            >\r\n            </ng-template>\r\n          </a>\r\n        </ng-template>\r\n      </ng-template>\r\n    </li>\r\n  </ul>\r\n</ng-template>\r\n\r\n<ng-template #noDataTemplate>\r\n  <div class=\"po-combo-container-no-data\">\r\n    <div class=\"po-combo-no-data po-text-center\">\r\n      <span>\r\n        {{ literals.noData }}\r\n      </span>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n",
                    providers: [
                        PoComboFilterService,
                        PoControlPositionService,
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return PoComboComponent; }),
                            multi: true
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return PoComboComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    PoComboComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.IterableDiffers },
        { type: PoComboFilterService },
        { type: i0.Renderer2 },
        { type: i0.ChangeDetectorRef },
        { type: PoControlPositionService },
        { type: platformBrowser.DomSanitizer },
        { type: PoLanguageService }
    ]; };
    PoComboComponent.propDecorators = {
        comboOptionTemplate: [{ type: i0.ContentChild, args: [PoComboOptionTemplateDirective, { static: true },] }],
        containerElement: [{ type: i0.ViewChild, args: ['containerElement', { read: i0.ElementRef },] }],
        contentElement: [{ type: i0.ViewChild, args: ['contentElement', { read: i0.ElementRef },] }],
        iconElement: [{ type: i0.ViewChild, args: ['iconArrow', { read: i0.ElementRef, static: true },] }],
        inputEl: [{ type: i0.ViewChild, args: ['inp', { read: i0.ElementRef, static: true },] }]
    };

    var poDatepickerRangeLiteralsDefault = {
        en: {
            invalidFormat: 'Date in invalid format',
            startDateGreaterThanEndDate: 'Start date greater than end date',
            invalidDate: 'Invalid date',
            dateOutOfPeriod: 'Date out of period'
        },
        es: {
            invalidFormat: 'Fecha en formato no válido',
            startDateGreaterThanEndDate: 'Fecha de inicio mayor que fecha final',
            invalidDate: 'Fecha invalida',
            dateOutOfPeriod: 'Fecha fuera de período'
        },
        pt: {
            invalidFormat: 'Data no formato inválido',
            startDateGreaterThanEndDate: 'Data inicial maior que data final',
            invalidDate: 'Data inválida',
            dateOutOfPeriod: 'Data fora do período'
        },
        ru: {
            invalidFormat: 'Дата в неверном формате',
            startDateGreaterThanEndDate: 'Дата начала больше даты окончания',
            invalidDate: 'Недействительная дата',
            dateOutOfPeriod: 'дата вне периода'
        }
    };

    /**
     * @description
     *
     * O `po-datepicker-range` é um componente para seleção de um período entre duas datas, onde é possível informar apenas
     * a data inicial ou a data final.
     *
     * O componente `[(ngModel)]` do `po-datepicker-range` trabalha com um objeto que implementa a interface
     * `PoDatepickerRange`, contendo as seguintes propriedades:
     * ```
     * { "start": '2017-11-28', "end": '2017-11-30' }
     * ```
     *
     * <a id="accepted-formats"></a>
     * Este componente pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * new Date(2017, 10, 28);
     * ```
     *
     * > O componente respeitará o formato passado para o *model* via codificação. Porém, caso seja feita alteração em algum
     * dos valores de data em tela, o componente atribuirá o formato **Data (E8601DAw.): yyyy-mm-dd** ao model.
     *
     * Importante:
     *
     * - Quando preenchidas a data inicial e final, a data inicial deve ser sempre menor ou igual a data final;
     * - Ao passar uma data inválida via codificação, o valor será mantido no *model* e o `input` da tela aparecerá vazio;
     * - Permite trabalhar com as duas datas separadamente através das propriedades `p-start-date` e `p-end-date` no lugar do
     * `[(ngModel)]`, no entanto sem a validação do formulário;
     * - Para a validação do formulário, utilize o `[(ngModel)]`.
     */
    var PoDatepickerRangeBaseComponent = /** @class */ (function () {
        function PoDatepickerRangeBaseComponent(poDateService, languageService) {
            this.poDateService = poDateService;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao alterar valor do campo.
             */
            this.onChange = new i0.EventEmitter();
            this.errorMessage = '';
            this.dateRange = { start: '', end: '' };
            this.format = 'dd/mm/yyyy';
            this.isDateRangeInputFormatValid = true;
            this.isStartDateRangeInputValid = true;
            this._clean = false;
            this._noAutocomplete = false;
            this._readonly = false;
            this._required = false;
            this.language = languageService.getShortLanguage();
        }
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "isDateRangeInputValid", {
            get: function () {
                return this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "clean", {
            get: function () {
                return this._clean;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita ação para limpar o campo.
             *
             * @default `false`
             */
            set: function (clean) {
                this._clean = convertToBoolean(clean);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o campo.
             *
             * @default `false`
             */
            set: function (value) {
                this._disabled = convertToBoolean(value);
                this.validateModel(this.dateRange);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "endDate", {
            get: function () {
                return this._endDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Data final.
             */
            set: function (date) {
                this._endDate = this.convertPatternDateFormat(date);
                this.dateRange.end = this.endDate;
                this.updateScreenByModel(this.dateRange);
                this.updateModel(this.dateRange);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poDatepickerRangeLiteralsDefault[this.language];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-datepicker-range`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoDatepickerRangeLiterals = {
             *    invalidFormat: 'Date in inconsistent format',
             *    startDateGreaterThanEndDate: 'End date less than start date'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: PoDatepickerRangeLiterals = {
             *    invalidFormat: 'Date in inconsistent format'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-datepicker-range
             *   [p-literals]="customLiterals">
             * </po-datepicker-range>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do
             * [`PoI18nService`](/documentation/po-i18n) ou do browser.
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = Object.assign(Object.assign(Object.assign({}, poDatepickerRangeLiteralsDefault[poLocaleDefault]), poDatepickerRangeLiteralsDefault[this.language]), value);
                }
                else {
                    this._literals = poDatepickerRangeLiteralsDefault[this.language];
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "minDate", {
            get: function () {
                return this._minDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma data mínima para o `po-datepicker-range`.
             */
            set: function (value) {
                if (value instanceof Date) {
                    var year = value.getFullYear();
                    var date = new Date(year, value.getMonth(), value.getDate(), 0, 0, 0);
                    setYearFrom0To100(date, year);
                    this._minDate = date;
                }
                else {
                    this._minDate = convertIsoToDate(value, true, false);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "maxDate", {
            get: function () {
                return this._maxDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma data máxima para o `po-datepicker-range`.
             */
            set: function (value) {
                if (value instanceof Date) {
                    var year = value.getFullYear();
                    var date = new Date(year, value.getMonth(), value.getDate(), 23, 59, 59);
                    setYearFrom0To100(date, year);
                    this._maxDate = date;
                }
                else {
                    this._maxDate = convertIsoToDate(value, false, true);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "noAutocomplete", {
            get: function () {
                return this._noAutocomplete;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a propriedade nativa `autocomplete` do campo como `off`.
             *
             * @default `false`
             */
            set: function (value) {
                this._noAutocomplete = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "readonly", {
            get: function () {
                return this._readonly;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será somente leitura.
             *
             * @default `false`
             */
            set: function (value) {
                this._readonly = convertToBoolean(value);
                this.validateModel(this.dateRange);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: function (required) {
                this._required = convertToBoolean(required);
                this.validateModel(this.dateRange);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "startDate", {
            get: function () {
                return this._startDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Data inicial.
             */
            set: function (date) {
                this._startDate = this.convertPatternDateFormat(date);
                this.dateRange.start = this.startDate;
                this.updateScreenByModel(this.dateRange);
                this.updateModel(this.dateRange);
            },
            enumerable: false,
            configurable: true
        });
        // Função implementada do ControlValueAccessor
        // Usada para interceptar os estados de habilitado via forms api
        PoDatepickerRangeBaseComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoDatepickerRangeBaseComponent.prototype.registerOnChange = function (func) {
            this.onChangeModel = func;
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoDatepickerRangeBaseComponent.prototype.registerOnTouched = function (func) {
            this.onTouchedModel = func;
        };
        PoDatepickerRangeBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoDatepickerRangeBaseComponent.prototype.validate = function (control) {
            var value = control.value || {};
            var startDate = value.start ? this.convertPatternDateFormat(value.start) : '';
            var endDate = value.end ? this.convertPatternDateFormat(value.end) : '';
            if (this.requiredDateRangeFailed(startDate, endDate)) {
                this.errorMessage = '';
                return {
                    required: {
                        valid: false
                    }
                };
            }
            if (!this.verifyValidDate(startDate, endDate)) {
                this.errorMessage = this.literals.invalidDate;
                return {
                    date: {
                        valid: false
                    }
                };
            }
            if (this.dateRangeObjectFailed(control.value) || this.dateRangeFormatFailed(startDate, endDate)) {
                this.errorMessage = this.literals.invalidFormat;
                return {
                    date: {
                        valid: false
                    }
                };
            }
            if (this.dateRangeFailed(startDate, endDate)) {
                this.errorMessage = this.literals.startDateGreaterThanEndDate;
                return {
                    date: {
                        valid: false
                    }
                };
            }
            if ((startDate && !this.validateDateInRange(startDate)) || (endDate && !this.validateDateInRange(endDate))) {
                this.errorMessage = this.literals.dateOutOfPeriod;
                return {
                    date: {
                        valid: false
                    }
                };
            }
            return null;
        };
        PoDatepickerRangeBaseComponent.prototype.validateDateInRange = function (startDate) {
            return validateDateRange(convertIsoToDate(startDate, false, false), this._minDate, this._maxDate);
        };
        PoDatepickerRangeBaseComponent.prototype.writeValue = function (dateRange) {
            this.resetDateRangeInputValidation();
            if (!dateRange || this.dateRangeObjectFailed(dateRange)) {
                this.dateRange = { start: '', end: '' };
            }
            if (!dateRange) {
                this.validateModel(this.dateRange);
            }
            if (this.dateRangeObjectFailed(dateRange)) {
                this.updateModel(dateRange);
            }
            if (this.isDateRangeObject(dateRange)) {
                this.dateRange = {
                    start: this.convertPatternDateFormat(dateRange.start),
                    end: this.convertPatternDateFormat(dateRange.end)
                };
                this.updateModel(this.dateRange);
            }
            this.updateScreenByModel(this.dateRange);
        };
        PoDatepickerRangeBaseComponent.prototype.dateFormatFailed = function (value) {
            return value && !this.poDateService.isValidIso(value);
        };
        // Executa a função onChange
        PoDatepickerRangeBaseComponent.prototype.updateModel = function (value) {
            var model = typeof value === 'object' ? Object.assign({}, value) : value;
            // Quando o input não possui um formulário, então esta função não é registrada
            if (this.onChangeModel) {
                this.onChangeModel(model);
            }
        };
        PoDatepickerRangeBaseComponent.prototype.validateModel = function (value) {
            var model = Object.assign({}, value);
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        PoDatepickerRangeBaseComponent.prototype.verifyValidDate = function (startDate, endDate) {
            if (startDate !== '' && endDate !== '') {
                return this.dateIsValid(startDate) && this.dateIsValid(endDate);
            }
            else if (startDate !== '') {
                return this.dateIsValid(startDate);
            }
            else {
                return this.dateIsValid(endDate);
            }
        };
        PoDatepickerRangeBaseComponent.prototype.convertPatternDateFormat = function (value) {
            if (value instanceof Date) {
                return this.poDateService.convertDateToISO(value);
            }
            return value;
        };
        PoDatepickerRangeBaseComponent.prototype.dateRangeFailed = function (startDate, endDate) {
            return !this.poDateService.isDateRangeValid(endDate, startDate) || !this.isStartDateRangeInputValid;
        };
        PoDatepickerRangeBaseComponent.prototype.dateRangeFormatFailed = function (startDate, endDate) {
            return this.dateFormatFailed(endDate) || this.dateFormatFailed(startDate) || !this.isDateRangeInputFormatValid;
        };
        PoDatepickerRangeBaseComponent.prototype.dateRangeObjectFailed = function (value) {
            return value && !this.isDateRangeObject(value);
        };
        PoDatepickerRangeBaseComponent.prototype.isDateRangeObject = function (value) {
            return value && value.hasOwnProperty('start') && value.hasOwnProperty('end');
        };
        PoDatepickerRangeBaseComponent.prototype.requiredDateRangeFailed = function (startDate, endDate) {
            return (this.isDateRangeInputValid &&
                requiredFailed(this.required, this.disabled, startDate) &&
                requiredFailed(this.required, this.disabled, endDate));
        };
        PoDatepickerRangeBaseComponent.prototype.dateIsValid = function (date) {
            var _a = __read(date.split('-'), 3), strYear = _a[0], strMonth = _a[1], strDay = _a[2];
            var year = Number(strYear);
            var month = Number(strMonth);
            var day = Number(strDay);
            //verificação dos meses com 31 dias
            if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {
                return day < 1 || day > 31 ? false : true;
            }
            else if (month === 4 || month === 6 || month === 9 || month === 11) {
                //verificação dos meses com 30 dias
                return day < 1 || day > 30 ? false : true;
            }
            else {
                //verificacao de ano bissexto para verificar até qual dia irá o mês de fevereiro
                if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {
                    return day < 1 || day > 29 ? false : true;
                }
                else {
                    return day < 1 || day > 28 ? false : true;
                }
            }
        };
        return PoDatepickerRangeBaseComponent;
    }());
    PoDatepickerRangeBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoDatepickerRangeBaseComponent.ctorParameters = function () { return [
        { type: PoDateService },
        { type: PoLanguageService }
    ]; };
    PoDatepickerRangeBaseComponent.propDecorators = {
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        help: [{ type: i0.Input, args: ['p-help',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        optional: [{ type: i0.Input, args: ['p-optional',] }],
        onChange: [{ type: i0.Output, args: ['p-change',] }],
        clean: [{ type: i0.Input, args: ['p-clean',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        endDate: [{ type: i0.Input, args: ['p-end-date',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        minDate: [{ type: i0.Input, args: ['p-min-date',] }],
        maxDate: [{ type: i0.Input, args: ['p-max-date',] }],
        noAutocomplete: [{ type: i0.Input, args: ['p-no-autocomplete',] }],
        readonly: [{ type: i0.Input, args: ['p-readonly',] }],
        required: [{ type: i0.Input, args: ['p-required',] }],
        startDate: [{ type: i0.Input, args: ['p-start-date',] }]
    };
    __decorate([
        InputBoolean()
    ], PoDatepickerRangeBaseComponent.prototype, "autoFocus", void 0);

    var arrowLeftKey = 37;
    var arrowRightKey = 39;
    var backspaceKey = 8;
    var poDatepickerRangeDateLengthDefault = 10;
    var poCalendarContentOffset = 8;
    var poCalendarPositionDefault = 'bottom-left';
    /* istanbul ignore next */
    var providers$5 = [
        {
            provide: forms.NG_VALUE_ACCESSOR,
            // eslint-disable-next-line
            useExisting: i0.forwardRef(function () { return PoDatepickerRangeComponent; }),
            multi: true
        },
        {
            provide: forms.NG_VALIDATORS,
            // eslint-disable-next-line
            useExisting: i0.forwardRef(function () { return PoDatepickerRangeComponent; }),
            multi: true
        },
        PoControlPositionService
    ];
    /**
     * @docsExtends PoDatepickerRangeBaseComponent
     *
     * @example
     *
     * <example name="po-datepicker-range-basic" title="PO Datepicker Range Basic">
     *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.html"> </file>
     *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-datepicker-range-labs" title="PO Datepicker Range Labs">
     *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.html"> </file>
     *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-datepicker-range-vacations" title="PO Datepicker Range - Vacations Suggestion">
     *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.html"> </file>
     *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.ts"> </file>
     * </example>
     *
     * <example name="po-datepicker-range-vacations-reactive-form" title="PO Datepicker Range - Vacations Reactive Form">
     *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.html">
     *  </file>
     *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.ts">
     *  </file>
     * </example>
     */
    var PoDatepickerRangeComponent = /** @class */ (function (_super) {
        __extends(PoDatepickerRangeComponent, _super);
        function PoDatepickerRangeComponent(changeDetector, controlPosition, renderer, cd, poDateService, poDatepickerRangeElement, poLanguageService) {
            var _this = _super.call(this, poDateService, poLanguageService) || this;
            _this.changeDetector = changeDetector;
            _this.controlPosition = controlPosition;
            _this.renderer = renderer;
            _this.cd = cd;
            _this.isCalendarVisible = false;
            _this.onScroll = function () {
                if (_this.isCalendarVisible) {
                    _this.controlPosition.adjustPosition(poCalendarPositionDefault);
                }
            };
            _this.poDatepickerRangeElement = poDatepickerRangeElement;
            return _this;
        }
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "autocomplete", {
            get: function () {
                return this.noAutocomplete ? 'off' : 'on';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "enableCleaner", {
            get: function () {
                return this.clean && (this.startDateInputValue || this.endDateInputValue) && !this.disabled && !this.readonly;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "endDateInputName", {
            get: function () {
                return 'end-date';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "endDateInputValue", {
            get: function () {
                return this.endDateInput.nativeElement.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "getErrorMessage", {
            get: function () {
                return this.errorMessage !== '' && this.hasInvalidClass() ? this.errorMessage : '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "isDateRangeInputUncompleted", {
            get: function () {
                return (this.endDateInputValue.length < poDatepickerRangeDateLengthDefault &&
                    this.startDateInputValue.length < poDatepickerRangeDateLengthDefault);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "isDirtyDateRangeInput", {
            get: function () {
                return this.endDateInputValue.length > 0 || this.startDateInputValue.length > 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "startDateInputName", {
            get: function () {
                return 'start-date';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "startDateInputValue", {
            get: function () {
                return this.startDateInput.nativeElement.value;
            },
            enumerable: false,
            configurable: true
        });
        PoDatepickerRangeComponent.getKeyCode = function (event) {
            return event.keyCode || event.which;
        };
        PoDatepickerRangeComponent.getTargetElement = function (event) {
            return event.target || event.srcElement;
        };
        PoDatepickerRangeComponent.isValidKey = function (keyCode) {
            var isNumericKey = keyCode >= 48 && keyCode <= 57;
            var isNumericNumpadKey = keyCode >= 96 && keyCode <= 105;
            return isNumericKey || isNumericNumpadKey;
        };
        PoDatepickerRangeComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoDatepickerRangeComponent.prototype.ngOnInit = function () {
            // Classe de máscara
            this.poMaskObject = this.buildMask();
        };
        PoDatepickerRangeComponent.prototype.ngOnChanges = function (changes) {
            if (changes.minDate || changes.maxDate) {
                this.validateModel(this.dateRange);
            }
        };
        PoDatepickerRangeComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        PoDatepickerRangeComponent.prototype.clear = function () {
            this.resetDateRangeInputValidation();
            this.dateRange = { start: '', end: '' };
            this.updateScreenByModel(this.dateRange);
            this.updateModel(this.dateRange);
        };
        PoDatepickerRangeComponent.prototype.eventOnClick = function ($event) {
            this.poMaskObject.click($event);
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoDatepickerRangeComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoDatepickerRangeComponent, { static: true }) datepickerRange: PoDatepickerRangeComponent;
         *
         * focusDatepickerRange() {
         *   this.datepickerRange.focus();
         * }
         * ```
         */
        PoDatepickerRangeComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.startDateInput.nativeElement.focus();
            }
        };
        PoDatepickerRangeComponent.prototype.onBlur = function (event) {
            var _a;
            (_a = this.onTouchedModel) === null || _a === void 0 ? void 0 : _a.call(this);
            var isStartDateTargetEvent = event.target.name === this.startDateInputName;
            this.updateModelByScreen(isStartDateTargetEvent);
            this.removeFocusFromDatePickerRangeField();
        };
        PoDatepickerRangeComponent.prototype.onCalendarChange = function (_b) {
            var _this = this;
            var start = _b.start, end = _b.end;
            var isStartDateTargetEvent = start && !end;
            this.updateScreenByModel({ start: start || '', end: end || '' });
            this.updateModelByScreen(isStartDateTargetEvent, start || '', end || '');
            if (start && end) {
                setTimeout(function () {
                    _this.isCalendarVisible = false;
                    _this.cd.markForCheck();
                }, 300);
            }
        };
        PoDatepickerRangeComponent.prototype.onFocus = function (event) {
            this.applyFocusOnDatePickerRangeField();
            this.poMaskObject.resetPositions(event);
        };
        PoDatepickerRangeComponent.prototype.onKeydown = function (event) {
            if (this.readonly) {
                return;
            }
            if (this.isSetFocusOnBackspace(event)) {
                event.preventDefault();
                this.setFocusOnBackspace();
            }
            else {
                this.poMaskObject.keydown(event);
            }
        };
        PoDatepickerRangeComponent.prototype.onKeyup = function (event) {
            if (this.readonly) {
                return;
            }
            var isStartDateTargetEvent = event.target.name === this.startDateInputName;
            this.setFocus(event);
            this.poMaskObject.keyup(event);
            this.updateModelWhenComplete(isStartDateTargetEvent, this.startDateInputValue, this.endDateInputValue);
        };
        PoDatepickerRangeComponent.prototype.resetDateRangeInputValidation = function () {
            this.isStartDateRangeInputValid = true;
            this.isDateRangeInputFormatValid = true;
        };
        PoDatepickerRangeComponent.prototype.toggleCalendar = function () {
            if (this.disabled || this.readonly) {
                return;
            }
            this.isCalendarVisible = !this.isCalendarVisible;
            this.changeDetector.detectChanges();
            if (this.isCalendarVisible) {
                this.setCalendarPosition();
                this.initializeListeners();
            }
            else {
                this.removeListeners();
            }
        };
        PoDatepickerRangeComponent.prototype.updateScreenByModel = function (model) {
            var _this = this;
            var dateRange = { start: model.start, end: model.end };
            var isStartDateValid = this.poDateService.isDateRangeValid(dateRange.end, dateRange.start);
            var isDateValid = function (date) { return !_this.dateFormatFailed(date) && isStartDateValid; };
            var endDateFormated = isDateValid(dateRange.end) ? this.formatModelToScreen(dateRange.end) : '';
            var startDateFormated = isDateValid(dateRange.start) ? this.formatModelToScreen(dateRange.start) : '';
            this.endDateInput.nativeElement.value = endDateFormated;
            this.startDateInput.nativeElement.value = startDateFormated;
            this.changeDetector.detectChanges();
        };
        PoDatepickerRangeComponent.prototype.applyFocusOnDatePickerRangeField = function () {
            this.dateRangeField.nativeElement.classList.add('po-datepicker-range-field-focused');
        };
        // Retorna um objeto do tipo PoMask com a mascara configurada.
        PoDatepickerRangeComponent.prototype.buildMask = function () {
            var mask = this.format.toUpperCase();
            mask = mask.replace(/DD/g, '99');
            mask = mask.replace(/MM/g, '99');
            mask = mask.replace(/YYYY/g, '9999');
            return new PoMask(mask, true);
        };
        PoDatepickerRangeComponent.prototype.formatDate = function (format, day, month, year) {
            if (day === void 0) { day = ''; }
            if (month === void 0) { month = ''; }
            if (year === void 0) { year = ''; }
            var dateFormatted = format;
            day = day && day.includes('T') ? day.slice(0, 2) : day;
            dateFormatted = dateFormatted.replace('dd', ('0' + day).slice(-2));
            dateFormatted = dateFormatted.replace('mm', ('0' + month).slice(-2));
            dateFormatted = dateFormatted.replace('yyyy', String(year));
            return dateFormatted;
        };
        PoDatepickerRangeComponent.prototype.formatScreenToModel = function (value) {
            if (value === void 0) { value = ''; }
            var _b = __read(value.split('/'), 3), day = _b[0], month = _b[1], year = _b[2];
            return value ? this.formatDate('yyyy-mm-dd', day, month, year) : '';
        };
        PoDatepickerRangeComponent.prototype.formatModelToScreen = function (value) {
            if (value === void 0) { value = ''; }
            var _b = __read(value.split('-'), 3), year = _b[0], month = _b[1], day = _b[2];
            return value ? this.formatDate(this.format, day, month, year) : '';
        };
        PoDatepickerRangeComponent.prototype.getDateRangeFormatValidation = function (startDate, endDate, isStartDateTargetEvent) {
            this.setDateRangeInputValidation(startDate, endDate);
            return {
                isValid: this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid && this.verifyValidDate(startDate, endDate),
                dateRangeModel: this.getValidatedModel(startDate, endDate, isStartDateTargetEvent)
            };
        };
        PoDatepickerRangeComponent.prototype.getValidatedModel = function (startDate, endDate, isStartDateTargetEvent) {
            var dateRangeModel = { start: '', end: '' };
            dateRangeModel.end =
                (isStartDateTargetEvent || this.isStartDateRangeInputValid) && !this.dateFormatFailed(endDate) ? endDate : '';
            dateRangeModel.start =
                (!isStartDateTargetEvent || this.isStartDateRangeInputValid) && !this.dateFormatFailed(startDate)
                    ? startDate
                    : '';
            return dateRangeModel;
        };
        PoDatepickerRangeComponent.prototype.hasAttrCalendar = function (element) {
            var _a;
            var attrCalendar = 'attr-calendar';
            return (element === null || element === void 0 ? void 0 : element.hasAttribute(attrCalendar)) || ((_a = element === null || element === void 0 ? void 0 : element.parentElement) === null || _a === void 0 ? void 0 : _a.hasAttribute(attrCalendar));
        };
        PoDatepickerRangeComponent.prototype.hasInvalidClass = function () {
            return (this.poDatepickerRangeElement.nativeElement.classList.contains('ng-invalid') &&
                this.poDatepickerRangeElement.nativeElement.classList.contains('ng-dirty'));
        };
        PoDatepickerRangeComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.clickListener = this.renderer.listen('document', 'click', function (event) {
                _this.wasClickedOnPicker(event);
            });
            this.eventResizeListener = this.renderer.listen('window', 'resize', function () {
                _this.isCalendarVisible = false;
            });
            window.addEventListener('scroll', this.onScroll, true);
        };
        PoDatepickerRangeComponent.prototype.isEqualBeforeValue = function (startDate, endDate) {
            return this.isDateRangeInputFormatValid && endDate === this.dateRange.end && startDate === this.dateRange.start;
        };
        PoDatepickerRangeComponent.prototype.isSetFocusOnBackspace = function (event) {
            return (event.target.name === this.endDateInputName &&
                this.endDateInput.nativeElement.selectionStart === 0 &&
                this.endDateInput.nativeElement.selectionEnd === 0 &&
                event.keyCode === backspaceKey);
        };
        PoDatepickerRangeComponent.prototype.removeFocusFromDatePickerRangeField = function () {
            this.dateRangeField.nativeElement.classList.remove('po-datepicker-range-field-focused');
        };
        PoDatepickerRangeComponent.prototype.setDateRangeInputValidation = function (startDate, endDate) {
            this.isStartDateRangeInputValid = this.poDateService.isDateRangeValid(endDate, startDate);
            this.isDateRangeInputFormatValid = !this.dateFormatFailed(startDate) && !this.dateFormatFailed(endDate);
        };
        PoDatepickerRangeComponent.prototype.setFocus = function (event) {
            var inputElement = PoDatepickerRangeComponent.getTargetElement(event);
            var keyCode = PoDatepickerRangeComponent.getKeyCode(event);
            var inputName = inputElement['name'];
            this.setFocusOnArrowLeft(keyCode, inputName);
            this.setFocusOnArrowRight(keyCode, inputName, inputElement);
            this.setFocusOnStartDateCompleted(keyCode, inputName);
        };
        PoDatepickerRangeComponent.prototype.setFocusAndPosition = function (position, inputElement, selectionRange) {
            var _this = this;
            this.focusOnElement(inputElement);
            setTimeout(function () {
                inputElement.nativeElement.setSelectionRange(selectionRange, selectionRange);
                _this.poMaskObject.initialPosition = position;
                _this.poMaskObject.finalPosition = position;
            });
        };
        PoDatepickerRangeComponent.prototype.focusOnElement = function (inputElement) {
            inputElement.nativeElement.focus();
        };
        PoDatepickerRangeComponent.prototype.removeListeners = function () {
            if (this.clickListener) {
                this.clickListener();
            }
            if (this.eventResizeListener) {
                this.eventResizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        PoDatepickerRangeComponent.prototype.setCalendarPosition = function () {
            this.controlPosition.setElements(this.calendarPicker.nativeElement, poCalendarContentOffset, this.dateRangeField, ['bottom-left', 'bottom-right', 'top-left', 'top-right'], false, true);
            this.controlPosition.adjustPosition(poCalendarPositionDefault);
        };
        PoDatepickerRangeComponent.prototype.setFocusOnArrowLeft = function (keyCode, inputName) {
            var isCursorAtStartOfInput = this.endDateInput.nativeElement.selectionStart === 0;
            if (inputName === this.endDateInputName && isCursorAtStartOfInput && keyCode === arrowLeftKey) {
                var inputLength = this.startDateInput.nativeElement.value.length;
                this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
            }
        };
        PoDatepickerRangeComponent.prototype.setFocusOnArrowRight = function (keyCode, inputName, inputElement) {
            var isCursorAtEndOfInput = this.startDateInput.nativeElement.selectionStart === inputElement.value.length;
            if (inputName === this.startDateInputName && isCursorAtEndOfInput && keyCode === arrowRightKey) {
                this.setFocusAndPosition(0, this.endDateInput, 0);
            }
        };
        PoDatepickerRangeComponent.prototype.setFocusOnBackspace = function () {
            var inputLength = this.startDateInput.nativeElement.value.length;
            this.startDateInput.nativeElement.value = this.startDateInputValue.slice(0, -1);
            this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
        };
        PoDatepickerRangeComponent.prototype.setFocusOnStartDateCompleted = function (keyCode, inputName) {
            var isLastKeyPressed = this.startDateInput.nativeElement.selectionStart === poDatepickerRangeDateLengthDefault;
            var isNewDateCompleted = this.startDateInputValue.length === poDatepickerRangeDateLengthDefault && isLastKeyPressed;
            var isValidKey = PoDatepickerRangeComponent.isValidKey(keyCode);
            if (inputName === this.startDateInputName && isNewDateCompleted && isValidKey) {
                this.setFocusAndPosition(0, this.endDateInput, 0);
            }
        };
        PoDatepickerRangeComponent.prototype.updateModelWhenComplete = function (isStartDateTargetEvent, startDate, endDate) {
            var endDateFormatted = this.formatScreenToModel(endDate);
            var startDateFormatted = this.formatScreenToModel(startDate);
            var dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
            if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
                this.resetDateRangeInputValidation();
                this.validateModel(this.dateRange);
                return;
            }
            if (dateFormatValidation.isValid) {
                this.dateRange = { start: startDateFormatted, end: endDateFormatted };
                this.updateModel(this.dateRange);
                this.onChange.emit(Object.assign({}, this.dateRange));
            }
        };
        PoDatepickerRangeComponent.prototype.updateModelByScreen = function (isStartDateTargetEvent, startDate, endDate) {
            var endDateFormatted = endDate || this.formatScreenToModel(this.endDateInputValue);
            var startDateFormatted = startDate || this.formatScreenToModel(this.startDateInputValue);
            if (this.isDateRangeInputUncompleted && this.isDirtyDateRangeInput) {
                this.updateModel(this.dateRange);
                return;
            }
            if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
                this.resetDateRangeInputValidation();
                this.validateModel(this.dateRange);
                return;
            }
            var dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
            if (dateFormatValidation.isValid) {
                this.dateRange = { start: startDateFormatted, end: endDateFormatted };
                this.updateModel(this.dateRange);
                this.onChange.emit(Object.assign({}, this.dateRange));
            }
            if (!dateFormatValidation.isValid && this.verifyFormattedDates(startDateFormatted, endDateFormatted)) {
                this.dateRange = Object.assign({}, dateFormatValidation.dateRangeModel);
                this.updateModel(dateFormatValidation.dateRangeModel);
            }
        };
        PoDatepickerRangeComponent.prototype.verifyFormattedDates = function (start, end) {
            return !!start || !!end;
        };
        PoDatepickerRangeComponent.prototype.wasClickedOnPicker = function (event) {
            if (!this.isCalendarVisible) {
                return;
            }
            if (!this.calendarPicker.nativeElement.contains(event.target) &&
                !this.iconCalendar.nativeElement.contains(event.target) &&
                !this.hasAttrCalendar(event.target)) {
                this.isCalendarVisible = false;
            }
            this.cd.markForCheck();
        };
        return PoDatepickerRangeComponent;
    }(PoDatepickerRangeBaseComponent));
    PoDatepickerRangeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-datepicker-range',
                    template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\r\n  <div #dateRangeField class=\"po-datepicker-range-field po-input\" [class.po-datepicker-range-field-disabled]=\"disabled\">\r\n    <div class=\"po-datepicker-range-start-date\">\r\n      <input\r\n        #startDateInput\r\n        class=\"po-datepicker-range-input\"\r\n        maxlength=\"10\"\r\n        type=\"text\"\r\n        [autocomplete]=\"autocomplete\"\r\n        [disabled]=\"disabled\"\r\n        [name]=\"startDateInputName\"\r\n        [readonly]=\"readonly\"\r\n        (blur)=\"onBlur($event)\"\r\n        (focus)=\"onFocus($event)\"\r\n        (keydown)=\"onKeydown($event)\"\r\n        (keyup)=\"onKeyup($event)\"\r\n        (click)=\"eventOnClick($event)\"\r\n      />\r\n    </div>\r\n\r\n    <div class=\"po-datepicker-range-separator\">-</div>\r\n\r\n    <div class=\"po-datepicker-range-end-date\">\r\n      <input\r\n        #endDateInput\r\n        class=\"po-datepicker-range-input\"\r\n        maxlength=\"10\"\r\n        type=\"text\"\r\n        [autocomplete]=\"autocomplete\"\r\n        [disabled]=\"disabled\"\r\n        [name]=\"endDateInputName\"\r\n        [readonly]=\"readonly\"\r\n        (blur)=\"onBlur($event)\"\r\n        (focus)=\"onFocus($event)\"\r\n        (keydown)=\"onKeydown($event)\"\r\n        (keyup)=\"onKeyup($event)\"\r\n        (click)=\"eventOnClick($event)\"\r\n      />\r\n    </div>\r\n\r\n    <div class=\"po-datepicker-range-icon\">\r\n      <po-clean *ngIf=\"enableCleaner\" (p-change-event)=\"clear()\"></po-clean>\r\n    </div>\r\n\r\n    <div class=\"po-datepicker-range-icon\">\r\n      <span\r\n        #iconCalendar\r\n        class=\"po-icon po-field-icon po-icon-calendar\"\r\n        [class.po-clickable]=\"!disabled && !readonly\"\r\n        [class.po-field-icon-disabled]=\"disabled || readonly\"\r\n        (click)=\"toggleCalendar()\"\r\n      >\r\n      </span>\r\n    </div>\r\n  </div>\r\n\r\n  <po-field-container-bottom [p-error-pattern]=\"getErrorMessage\"></po-field-container-bottom>\r\n</po-field-container>\r\n\r\n<ng-container *ngIf=\"isCalendarVisible\">\r\n  <div #calendarPicker class=\"po-calendar-range-picker\">\r\n    <po-calendar\r\n      p-mode=\"range\"\r\n      [ngModel]=\"dateRange\"\r\n      [p-max-date]=\"maxDate\"\r\n      [p-min-date]=\"minDate\"\r\n      (ngModelChange)=\"onCalendarChange($event)\"\r\n    ></po-calendar>\r\n  </div>\r\n</ng-container>\r\n",
                    providers: providers$5,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoDatepickerRangeComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: PoControlPositionService },
        { type: i0.Renderer2 },
        { type: i0.ChangeDetectorRef },
        { type: PoDateService },
        { type: i0.ElementRef },
        { type: PoLanguageService }
    ]; };
    PoDatepickerRangeComponent.propDecorators = {
        dateRangeField: [{ type: i0.ViewChild, args: ['dateRangeField', { read: i0.ElementRef, static: true },] }],
        endDateInput: [{ type: i0.ViewChild, args: ['endDateInput', { read: i0.ElementRef, static: true },] }],
        startDateInput: [{ type: i0.ViewChild, args: ['startDateInput', { read: i0.ElementRef, static: true },] }],
        iconCalendar: [{ type: i0.ViewChild, args: ['iconCalendar', { read: i0.ElementRef, static: true },] }],
        calendarPicker: [{ type: i0.ViewChild, args: ['calendarPicker', { read: i0.ElementRef },] }]
    };

    /**
     * @description
     *
     * Este é um componente baseado em input, com várias propriedades do input nativo e outras
     * propriedades extras como: máscara, pattern, mensagem de erro e etc.
     * Você deve informar a variável que contém o valor como [(ngModel)]="variavel", para que o
     * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).
     * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.
     *
     * Importante:
     *
     * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
     * Então você precisa informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
     * Exemplo: [(ngModel)]="pessoa.nome" [ngModelOptions]="{standalone: true}".
     *
     */
    var PoInputBaseComponent = /** @class */ (function () {
        function PoInputBaseComponent(cd) {
            this.cd = cd;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /**
             * @description
             *
             * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
             *
             * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
             */
            this.errorPattern = '';
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao sair do campo.
             */
            this.blur = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao entrar do campo.
             */
            this.enter = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao alterar valor e deixar o campo.
             */
            this.change = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao alterar valor do model.
             */
            this.changeModel = new i0.EventEmitter();
            this.onChangePropagate = null;
            this.onTouched = null;
            this.passedWriteValue = false;
            this._noAutocomplete = false;
            this._placeholder = '';
            /**
             * @description
             *
             * Se verdadeiro, desabilita o campo.
             *
             * @default `false`
             */
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.disabled = false;
            /** Indica que o campo será somente leitura. */
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.readonly = false;
            /**
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
             *
             * @default `false`
             */
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.required = false;
            /** Se verdadeiro, o campo receberá um botão para ser limpo. */
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.clean = false;
            /**
             * @description
             *
             * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
             * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
             * através da propriedade p-pattern.
             * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
             * mesmo quando desabilitado.
             */
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.mask = '';
            /**
             * @description
             *
             * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
             *
             * @default `false`
             */
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.maskFormatModel = false;
        }
        Object.defineProperty(PoInputBaseComponent.prototype, "noAutocomplete", {
            get: function () {
                return this._noAutocomplete;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a propriedade nativa `autocomplete` do campo como `off`.
             *
             * > No componente `po-password` será definido como `new-password`.
             *
             * @default `false`
             */
            set: function (value) {
                this._noAutocomplete = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "placeholder", {
            get: function () {
                return this._placeholder;
            },
            /**
             * @optional
             *
             * @description
             *
             * Mensagem que aparecerá enquanto o campo não estiver preenchido.
             *
             * @default ''
             */
            set: function (value) {
                this._placeholder = value || '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "setDisabled", {
            set: function (disabled) {
                this.disabled = disabled === '' ? true : convertToBoolean(disabled);
                this.validateModel();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "setReadonly", {
            set: function (readonly) {
                this.readonly = readonly === '' ? true : convertToBoolean(readonly);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "setRequired", {
            set: function (required) {
                this.required = required === '' ? true : convertToBoolean(required);
                this.validateModel();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "setClean", {
            set: function (clean) {
                this.clean = clean === '' ? true : convertToBoolean(clean);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "setPattern", {
            set: function (pattern) {
                this.pattern = pattern;
                this.validateModel();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "maxlength", {
            get: function () {
                return this._maxlength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica a quantidade máxima de caracteres que o campo aceita.
             */
            set: function (value) {
                if (!isNaN(parseInt(value, 10))) {
                    this._maxlength = parseInt(value, 10);
                    this.validateModel();
                }
                else if (!value) {
                    this._maxlength = undefined;
                    this.validateModel();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "minlength", {
            get: function () {
                return this._minlength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica a quantidade mínima de caracteres que o campo aceita.
             */
            set: function (value) {
                if (!isNaN(parseInt(value, 10))) {
                    this._minlength = parseInt(value, 10);
                    this.validateModel();
                }
                else if (!value) {
                    this._minlength = undefined;
                    this.validateModel();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "setMask", {
            set: function (mask) {
                this.mask = mask;
                // Atualiza Máscara do Campo
                this.objMask = new PoMask(this.mask, this.maskFormatModel);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "setMaskFormatModel", {
            set: function (maskFormatModel) {
                this.maskFormatModel = maskFormatModel === '' ? true : convertToBoolean(maskFormatModel);
                if (this.objMask instanceof PoMask) {
                    this.objMask.formatModel = this.maskFormatModel;
                    this.validateModel();
                }
            },
            enumerable: false,
            configurable: true
        });
        PoInputBaseComponent.prototype.callOnChange = function (value) {
            this.updateModel(value);
            this.controlChangeModelEmitter(value);
        };
        PoInputBaseComponent.prototype.callUpdateModelWithTimeout = function (value) {
            var _this = this;
            setTimeout(function () { return _this.updateModel(value); });
        };
        PoInputBaseComponent.prototype.controlChangeModelEmitter = function (value) {
            if (this.modelLastUpdate !== value) {
                this.changeModel.emit(value);
                this.modelLastUpdate = value;
            }
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar os estados de habilitado via forms api
        PoInputBaseComponent.prototype.setDisabledState = function (isDisabled) {
            var _a;
            this.disabled = isDisabled;
            (_a = this.cd) === null || _a === void 0 ? void 0 : _a.markForCheck();
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoInputBaseComponent.prototype.registerOnChange = function (func) {
            this.onChangePropagate = func;
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoInputBaseComponent.prototype.registerOnTouched = function (func) {
            this.onTouched = func;
        };
        PoInputBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoInputBaseComponent.prototype.updateModel = function (value) {
            // Quando o input não possui um formulário, então esta função não é registrada
            if (this.onChangePropagate) {
                this.onChangePropagate(value);
            }
        };
        PoInputBaseComponent.prototype.validate = function (c) {
            if (requiredFailed(this.required, this.disabled, this.getScreenValue())) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
            if (maxlengpoailed(this.maxlength, this.getScreenValue())) {
                return {
                    maxlength: {
                        valid: false
                    }
                };
            }
            if (minlengpoailed(this.minlength, this.getScreenValue())) {
                return {
                    minlength: {
                        valid: false
                    }
                };
            }
            if (patternFailed(this.pattern, c.value)) {
                this.validatePatternOnWriteValue(c.value);
                return {
                    pattern: {
                        valid: false
                    }
                };
            }
            return this.extraValidation(c);
        };
        // Função implementada do ControlValueAccessor
        PoInputBaseComponent.prototype.writeValue = function (value) {
            var _a;
            this.writeValueModel(value);
            (_a = this.cd) === null || _a === void 0 ? void 0 : _a.markForCheck();
        };
        PoInputBaseComponent.prototype.validateModel = function () {
            if (this.validatorChange) {
                this.validatorChange();
            }
        };
        // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
        PoInputBaseComponent.prototype.validatePatternOnWriteValue = function (value) {
            var _this = this;
            if (value && this.passedWriteValue) {
                setTimeout(function () {
                    _this.updateModel(value);
                });
                this.passedWriteValue = false;
            }
        };
        return PoInputBaseComponent;
    }());
    PoInputBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoInputBaseComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    PoInputBaseComponent.propDecorators = {
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        icon: [{ type: i0.Input, args: ['p-icon',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        help: [{ type: i0.Input, args: ['p-help',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        errorPattern: [{ type: i0.Input, args: ['p-error-pattern',] }],
        optional: [{ type: i0.Input, args: ['p-optional',] }],
        blur: [{ type: i0.Output, args: ['p-blur',] }],
        enter: [{ type: i0.Output, args: ['p-enter',] }],
        change: [{ type: i0.Output, args: ['p-change',] }],
        changeModel: [{ type: i0.Output, args: ['p-change-model',] }],
        noAutocomplete: [{ type: i0.Input, args: ['p-no-autocomplete',] }],
        placeholder: [{ type: i0.Input, args: ['p-placeholder',] }],
        setDisabled: [{ type: i0.Input, args: ['p-disabled',] }],
        setReadonly: [{ type: i0.Input, args: ['p-readonly',] }],
        setRequired: [{ type: i0.Input, args: ['p-required',] }],
        setClean: [{ type: i0.Input, args: ['p-clean',] }],
        setPattern: [{ type: i0.Input, args: ['p-pattern',] }],
        maxlength: [{ type: i0.Input, args: ['p-maxlength',] }],
        minlength: [{ type: i0.Input, args: ['p-minlength',] }],
        setMask: [{ type: i0.Input, args: ['p-mask',] }],
        setMaskFormatModel: [{ type: i0.Input, args: ['p-mask-format-model',] }]
    };
    __decorate([
        InputBoolean()
    ], PoInputBaseComponent.prototype, "autoFocus", void 0);

    var poDecimalDefaultDecimalsLength = 2;
    var poDecimalDefaultThousandMaxlength = 13;
    var poDecimalMaxDecimalsLength = 15;
    var poDecimalTotalLengthLimit = 16;
    /**
     *
     * @docsExtends PoInputBaseComponent
     *
     * @description
     *
     * <br>
     * - O `po-decimal` é um *input* específico para receber apenas números decimais, por isso recebe as seguintes características:
     *  + Aceita apenas números;
     *  + Utiliza ',' como separador de decimal;
     *  + Utiliza '.' para separação de milhar;
     *  + É possível configurar a quantidade de casas decimais e a quantidade de digitos do campo.
     *
     * > **Importante:**
     * Atualmente o JavaScript limita-se a um conjunto de dados de `32 bits`, e para que os valores comportem-se devidamente,
     * o `po-decimal` contém um tratamento que limita em 16 o número total de casas antes e após a vírgula.
     * Veja abaixo as demais regras nas documentações de `p-decimals-length` e `p-thousand-maxlength`.
     *
     * @example
     *
     * <example name="po-decimal-basic" title="PO Decimal Basic">
     *  <file name="sample-po-decimal-basic/sample-po-decimal-basic.component.html"> </file>
     *  <file name="sample-po-decimal-basic/sample-po-decimal-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-decimal-labs" title="PO Decimal Labs">
     *  <file name="sample-po-decimal-labs/sample-po-decimal-labs.component.html"> </file>
     *  <file name="sample-po-decimal-labs/sample-po-decimal-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-decimal-hourly-wage" title="PO Decimal - Hourly Wage">
     *  <file name="sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.html"> </file>
     *  <file name="sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.ts"> </file>
     * </example>
     *
     * <example name="po-decimal-hourly-wage-reactive-form" title="PO Decimal - Hourly Wage Reactive Form">
     *  <file name="sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.html"> </file>
     *  <file name="sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.ts"> </file>
     * </example>
     */
    var PoDecimalComponent = /** @class */ (function (_super) {
        __extends(PoDecimalComponent, _super);
        function PoDecimalComponent(el, poLanguageService, cd) {
            var _this = _super.call(this, cd) || this;
            _this.el = el;
            _this.poLanguageService = poLanguageService;
            _this._decimalsLength = poDecimalDefaultDecimalsLength;
            _this._thousandMaxlength = poDecimalDefaultThousandMaxlength;
            _this.fireChange = false;
            _this.isKeyboardAndroid = false;
            _this.minusSign = '-';
            _this.oldDotsLength = null;
            _this.regex = {
                thousand: new RegExp('\\' + ',', 'g'),
                decimal: new RegExp('\\' + '.', 'g')
            };
            _this.isKeyboardAndroid = !!navigator.userAgent.match(/Android/i);
            return _this;
        }
        Object.defineProperty(PoDecimalComponent.prototype, "autocomplete", {
            get: function () {
                return this.noAutocomplete ? 'off' : 'on';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDecimalComponent.prototype, "decimalsLength", {
            get: function () {
                return this._decimalsLength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Quantidade máxima de casas decimais.
             *
             * > **Importante:**
             * - O valor máximo permitido é 15;
             * - A soma total de `p-decimals-length` com `p-thousand-maxlength` limita-se à 16;
             * - Esta propriedade sobrepõe apenas o valor **padrão** de `p-thousand-maxlength`;
             * - Caso `p-thousand-maxlength` tenha um valor definido, esta propriedade poderá receber apenas o valor restante do limite total (16).
             *
             * @default `2`
             */
            set: function (value) {
                var decimalsLength = convertToInt(value);
                decimalsLength = this.isValueBetweenAllowed(decimalsLength, poDecimalMaxDecimalsLength)
                    ? decimalsLength
                    : poDecimalDefaultDecimalsLength;
                if (this.isGreaterThanTotalLengthLimit(decimalsLength, this.thousandMaxlength)) {
                    this.thousandMaxlength = poDecimalTotalLengthLimit - decimalsLength;
                }
                this._decimalsLength = decimalsLength;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDecimalComponent.prototype, "thousandMaxlength", {
            get: function () {
                return this._thousandMaxlength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Quantidade máxima de dígitos antes do separador decimal.
             *
             * > **Importante:**
             * - O valor máximo permitido é 13;
             * - A soma total de `p-decimals-length` com `p-thousand-maxlength` limita-se à 16;
             * - Esta propriedade sobrepõe o valor definido em `p-decimals-length`.
             *
             * @default `13`
             */
            set: function (value) {
                var thousandMaxlength = convertToInt(value);
                if (this.decimalsLength > poDecimalDefaultDecimalsLength && !thousandMaxlength) {
                    thousandMaxlength = poDecimalTotalLengthLimit - this.decimalsLength;
                }
                thousandMaxlength = this.isValueBetweenAllowed(thousandMaxlength, poDecimalDefaultThousandMaxlength)
                    ? thousandMaxlength
                    : poDecimalDefaultThousandMaxlength;
                if (this.isGreaterThanTotalLengthLimit(this.decimalsLength, thousandMaxlength)) {
                    this.decimalsLength = poDecimalTotalLengthLimit - thousandMaxlength;
                }
                this._thousandMaxlength = thousandMaxlength;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDecimalComponent.prototype, "locale", {
            /**
             * @optional
             *
             * @description
             *
             * Informa o locale(país) para a formatação do valor.
             * Por padrão o valor será configurado segundo a o módulo [`I18n`](documentation/po-i18n)
             *
             * > Para ver quais linguagens suportadas acesse [`I18n`](documentation/po-i18n)
             *
             */
            set: function (locale) {
                this._locale = locale;
                this.setNumbersSeparators();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDecimalComponent.prototype, "min", {
            get: function () {
                return this._min;
            },
            /**
             * @optional
             *
             * @description
             *
             * Valor mínimo.
             */
            set: function (value) {
                if (!isNaN(value)) {
                    this._min = value;
                    this.validateModel();
                }
                else if (!value) {
                    this._min = undefined;
                    this.validateModel();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDecimalComponent.prototype, "max", {
            get: function () {
                return this._max;
            },
            /**
             * @optional
             *
             * @description
             *
             * Valor máximo.
             */
            set: function (value) {
                if (!isNaN(value)) {
                    this._max = value;
                    this.validateModel();
                }
                else if (!value) {
                    this._max = undefined;
                    this.validateModel();
                }
            },
            enumerable: false,
            configurable: true
        });
        PoDecimalComponent.prototype.ngOnInit = function () {
            this.setNumbersSeparators();
        };
        PoDecimalComponent.prototype.setNumbersSeparators = function () {
            var _b = this.poLanguageService.getNumberSeparators(this._locale), decimalSeparator = _b.decimalSeparator, thousandSeparator = _b.thousandSeparator;
            this.decimalSeparator = decimalSeparator;
            this.thousandSeparator = thousandSeparator;
            this.regex = {
                thousand: new RegExp('\\' + thousandSeparator, 'g'),
                decimal: new RegExp('\\' + decimalSeparator, 'g')
            };
        };
        PoDecimalComponent.prototype.ngAfterViewInit = function () {
            this.verifyAutoFocus();
            this.setPaddingInput();
        };
        PoDecimalComponent.prototype.clear = function (value) {
            this.callOnChange(value);
            this.controlChangeEmitter();
        };
        PoDecimalComponent.prototype.extraValidation = function (abstractControl) {
            // Verifica se já possui algum error pattern padrão.
            this.errorPattern = this.errorPattern !== 'Valor Inválido' ? this.errorPattern : '';
            if (minFailed(this.min, abstractControl.value)) {
                return {
                    min: {
                        valid: false
                    }
                };
            }
            if (maxFailed(this.max, abstractControl.value)) {
                return {
                    max: {
                        valid: false
                    }
                };
            }
            return null;
        };
        PoDecimalComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.inputEl.nativeElement.focus();
            }
        };
        PoDecimalComponent.prototype.getScreenValue = function () {
            return this.inputEl ? this.inputEl.nativeElement.value : '';
        };
        PoDecimalComponent.prototype.hasInvalidClass = function () {
            return (this.el.nativeElement.classList.contains('ng-invalid') &&
                this.el.nativeElement.classList.contains('ng-dirty') &&
                this.getScreenValue() !== '');
        };
        PoDecimalComponent.prototype.hasLetters = function (value) {
            if (value === void 0) { value = ''; }
            return value.match(/[a-zA-Z:;+=_´`^~"'?!@#$%¨&*()><{}çÇ\[\]/\\|]+/);
        };
        PoDecimalComponent.prototype.isValidNumber = function (event) {
            // - event.key não existia em alguns browsers, como Samsung browser e Firefox.
            var keyValue = String.fromCharCode(event.which);
            var validKey = event.which !== 8 && event.which !== 0;
            return !this.hasLetters(keyValue) && validKey;
        };
        // função responsável por adicionar os zeroes com as casa decimais ao sair do campo.
        PoDecimalComponent.prototype.onBlur = function (event) {
            var _a;
            (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
            var value = event.target.value;
            if (value) {
                if (this.hasLetters(value) || this.containsMoreThanOneDecimalSeparator(value)) {
                    this.setViewValue('');
                    this.callOnChange(undefined);
                    return;
                }
                var valueWithoutThousandSeparator = this.formatValueWithoutThousandSeparator(value);
                this.setViewValue(this.formatToViewValue(valueWithoutThousandSeparator));
            }
            this.blur.emit();
            this.controlChangeEmitter();
        };
        PoDecimalComponent.prototype.onFocus = function (event) {
            // Atualiza valor da variável que será usada para verificar se o campo teve alteração
            this.valueBeforeChange = this.getScreenValue();
            // Dispara evento quando o usuário entrar no campo
            // Este evento também é disparado quando o campo inicia com foco.
            this.enter.emit();
        };
        PoDecimalComponent.prototype.onInput = function (event) {
            var selectionStart = event.target.selectionStart;
            var selectionEnd = event.target.selectionEnd;
            var modelValue;
            // - Browsers nativos do Android ex: Samsung Browser.
            if (this.isKeyboardAndroid) {
                this.onInputKeyboardAndroid(event);
            }
            modelValue = this.formatValueWithoutThousandSeparator(event.target.value);
            modelValue = this.addZeroBefore(modelValue);
            var viewValue = this.formatMask(modelValue);
            // validação para não quebrar IE com placeholder definido e Input vazio
            if (viewValue) {
                this.setViewValue(viewValue);
                this.setCursorInput(event, selectionStart, selectionEnd);
            }
            this.callOnChange(this.formatToModelValue(modelValue));
        };
        PoDecimalComponent.prototype.onInputKeyboardAndroid = function (event) {
            var inputValue = event.target.value;
            var selectionStart = event.target.selectionStart;
            var hasLetters = this.hasLetters(inputValue);
            if (hasLetters) {
                this.setViewValue(inputValue.replace(hasLetters[0], ''));
                return event.preventDefault();
            }
            else {
                var position = selectionStart - 1;
                var key = inputValue.charAt(position);
                this.setPositionValue(event);
                if (this.isValidKey(event, key)) {
                    this.setViewValue(inputValue);
                }
            }
        };
        PoDecimalComponent.prototype.onKeyPress = function (event) {
            this.isValidKey(event);
        };
        PoDecimalComponent.prototype.setPaddingInput = function () {
            var _this = this;
            setTimeout(function () {
                var selectorIcons = '.po-field-icon-container:not(.po-field-icon-container-left) > .po-icon';
                var icons = _this.el.nativeElement.querySelectorAll(selectorIcons).length;
                if (_this.clean) {
                    icons++;
                }
                if (icons) {
                    _this.inputEl.nativeElement.style.paddingRight = icons * 36 + "px";
                }
            });
        };
        PoDecimalComponent.prototype.writeValueModel = function (value) {
            if (this.inputEl) {
                if (value || value === 0) {
                    var formatedViewValue = this.formatToViewValue(value);
                    this.setViewValue(formatedViewValue);
                }
                else {
                    this.setViewValue('');
                }
            }
            if (value) {
                this.change.emit(value);
            }
        };
        PoDecimalComponent.prototype.getErrorPatternMessage = function () {
            return this.errorPattern !== '' && this.hasInvalidClass() ? this.errorPattern : '';
        };
        // responsável por adicionar 0 antes da virgula (decimalSeparator).
        PoDecimalComponent.prototype.addZeroBefore = function (value) {
            var isDecimalSeparator = value === this.decimalSeparator;
            return isDecimalSeparator ? "0" + value : value;
        };
        PoDecimalComponent.prototype.containsComma = function (value) {
            return value.includes(this.decimalSeparator);
        };
        PoDecimalComponent.prototype.containsMoreThanOneDecimalSeparator = function (value) {
            if (value === void 0) { value = ''; }
            var foundComma = value.match(this.regex.decimal);
            return !!(foundComma && foundComma.length > 1);
        };
        PoDecimalComponent.prototype.controlChangeEmitter = function () {
            var _this = this;
            var elementValue = this.getScreenValue();
            // Emite o evento change manualmente quando o campo é alterado
            // Este evento é controlado manualmente devido ao preventDefault existente na máscara
            // e devido ao controle do p-clean, que também precisa emitir change
            if (elementValue !== this.valueBeforeChange) {
                this.fireChange = true;
                setTimeout(function () {
                    _this.change.emit(elementValue);
                }, 200);
            }
        };
        PoDecimalComponent.prototype.formatMask = function (value) {
            // necessário para não adicionar . nas casa decimais.
            // por exemplo: 12.345,123.45 (errado)
            // 12.345,12345 (correto)
            if (value.match(this.regex.decimal)) {
                var regex = new RegExp("(\\d)(?=(\\d{3})+(?!\\d)" + this.decimalSeparator + ")", 'g');
                return value.toString().replace(regex, "$1" + this.thousandSeparator);
            }
            return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1" + this.thousandSeparator);
        };
        PoDecimalComponent.prototype.formatToModelValue = function (value) {
            var formattedValue = this.replaceCommaToDot(value);
            var parsedValue = formattedValue ? parseFloat(Number(formattedValue).toFixed(this.decimalsLength)) : undefined;
            return parsedValue === 0 || parsedValue ? parsedValue : undefined;
        };
        PoDecimalComponent.prototype.formatToViewValue = function (value) {
            // - Necessário para tratar valores que contenham decimalSeparator
            value = this.replaceCommaToDot(value);
            var numberValue = Number(value).toFixed(this.decimalsLength);
            var valueBeforeDot = this.getValueBeforeSeparator(numberValue, '.');
            var valueAfterDot = this.getValueAfterSeparator(numberValue, '.');
            var formatedNumber = this.formatMask(valueBeforeDot);
            if (this.decimalsLength === 0) {
                return formatedNumber;
            }
            else {
                return "" + formatedNumber + this.decimalSeparator + valueAfterDot;
            }
        };
        PoDecimalComponent.prototype.formatValueWithoutThousandSeparator = function (value) {
            if (value === void 0) { value = ''; }
            return value.toString().replace(this.regex.thousand, '');
        };
        PoDecimalComponent.prototype.getValueAfterSeparator = function (value, separator) {
            if (value === void 0) { value = ''; }
            return value.split(separator)[1] || '';
        };
        PoDecimalComponent.prototype.getValueBeforeSeparator = function (value, separator) {
            if (value === void 0) { value = ''; }
            return value.split(separator)[0] || '';
        };
        PoDecimalComponent.prototype.hasLessDot = function (value) {
            if (value) {
                var dots = value.match(this.regex.thousand);
                var dotsLength = dots && dots.length;
                if (dotsLength < this.oldDotsLength) {
                    this.oldDotsLength = dotsLength;
                    return true;
                }
            }
            if (!value) {
                this.oldDotsLength = null;
            }
            return false;
        };
        PoDecimalComponent.prototype.hasMoreDot = function (value) {
            if (value) {
                var dots = value.match(this.regex.thousand);
                var dotsLength = dots && dots.length;
                if (dotsLength > this.oldDotsLength) {
                    this.oldDotsLength = dotsLength;
                    return true;
                }
            }
            if (!value) {
                this.oldDotsLength = null;
            }
            return false;
        };
        PoDecimalComponent.prototype.hasMinusSignInvalidPosition = function (event) {
            var keyIsMinusSign = event.key === this.minusSign;
            var selectionStart = event.target.selectionStart;
            return keyIsMinusSign && selectionStart !== 0;
        };
        PoDecimalComponent.prototype.isInvalidKey = function (event, charCode) {
            var isInvalidNumber = !this.isValidNumber(event);
            return (this.verifyInsertComma(event) ||
                this.verifyThousandLength(event) ||
                this.verifyValueAfterComma(event) ||
                this.verifyInsertMinusSign(event) ||
                this.hasMinusSignInvalidPosition(event) ||
                isInvalidNumber ||
                this.validateCursorPositionBeforeSeparator(event) ||
                this.verifyDecimalLengthIsZeroAndKeyPressedIsComma(charCode));
        };
        PoDecimalComponent.prototype.isGreaterThanTotalLengthLimit = function (decimalsMaxLength, thousandMaxlength) {
            return decimalsMaxLength + thousandMaxlength > poDecimalTotalLengthLimit;
        };
        PoDecimalComponent.prototype.isKeyDecimalSeparator = function (event) {
            return event.key === this.decimalSeparator || event.char === this.decimalSeparator;
        };
        PoDecimalComponent.prototype.isPositionAfterDecimalSeparator = function (positionCursor, value) {
            var indexComma = value && value.indexOf(this.decimalSeparator);
            if (indexComma && this.decimalsLength > 0) {
                return positionCursor > indexComma;
            }
        };
        PoDecimalComponent.prototype.isSelectionStartDifferentSelectionEnd = function (target) {
            return target.selectionStart !== target.selectionEnd;
        };
        PoDecimalComponent.prototype.isValidKey = function (event, key) {
            var charCode = event.which || event.keyCode;
            var validKey = event.which === 8 || event.which === 0;
            if (validKey && !this.isKeyboardAndroid) {
                return;
            }
            if (key) {
                event.key = key;
            }
            if (this.isInvalidKey(event, charCode)) {
                event.preventDefault();
                return false;
            }
            return true;
        };
        PoDecimalComponent.prototype.isValueBetweenAllowed = function (value, maxAllowed) {
            return value >= 0 && value <= maxAllowed;
        };
        // Quando decimalsLength for 0 não deve permitir informar vírgula (decimalSeparator)
        PoDecimalComponent.prototype.verifyDecimalLengthIsZeroAndKeyPressedIsComma = function (charCode) {
            return charCode === 44 && this.decimalsLength === 0;
        };
        PoDecimalComponent.prototype.verifyAutoFocus = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoDecimalComponent.prototype.setInitialSelectionRange = function (target, selectionStart, selectionEnd) {
            if (selectionStart === 1 && selectionEnd === 1) {
                return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
            }
            return target.setSelectionRange(selectionStart - 1, selectionEnd - 1);
        };
        PoDecimalComponent.prototype.replaceAt = function (value, index, replace) {
            return value.substring(0, index) + replace + value.substring(index + 1);
        };
        PoDecimalComponent.prototype.replaceCommaToDot = function (value) {
            if (value === void 0) { value = ''; }
            if (this.decimalSeparator === ',') {
                value = value.toString().replace(this.regex.decimal, '.');
            }
            return value;
        };
        PoDecimalComponent.prototype.setCursorInput = function (event, selectionStart, selectionEnd) {
            var target = event.target;
            var viewValue = target.value;
            // Caso houver mais . do que anteriormente soma o valor com 1.
            if (this.hasMoreDot(viewValue) || viewValue === '0' + this.decimalSeparator) {
                return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
            }
            // Caso houver menos . do que anteriormente subtrai o valor por 1.
            if (this.hasLessDot(viewValue)) {
                this.setInitialSelectionRange(target, selectionStart, selectionEnd);
            }
            return target.setSelectionRange(selectionStart, selectionEnd);
        };
        PoDecimalComponent.prototype.setPositionValue = function (event) {
            var value = event.target.value;
            var position = event.target.selectionStart - 1;
            if (position > 0 && event.key === this.minusSign) {
                event.target.value = value.substring(0, position) + value.substr(position + 1);
            }
        };
        PoDecimalComponent.prototype.setViewValue = function (value) {
            this.inputEl.nativeElement.value = value;
        };
        PoDecimalComponent.prototype.validateCursorPositionBeforeSeparator = function (event) {
            var target = event.target;
            var originalValue = this.formatValueWithoutThousandSeparator(target.value);
            var valueBeforeSeparator = this.getValueBeforeSeparator(target.value, this.decimalSeparator);
            var valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
            if (this.isSelectionStartDifferentSelectionEnd(target)) {
                return false;
            }
            return (target.selectionStart <= valueBeforeSeparator.length &&
                valueBeforeSeparatorOriginal.length === this.thousandMaxlength &&
                !this.isKeyDecimalSeparator(event));
        };
        PoDecimalComponent.prototype.verifyThousandLength = function (event) {
            var target = event.target;
            var originalValue = this.formatValueWithoutThousandSeparator(target.value);
            var valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
            if (this.isSelectionStartDifferentSelectionEnd(target)) {
                return false;
            }
            return (valueBeforeSeparatorOriginal.length >= this.thousandMaxlength &&
                !this.isKeyDecimalSeparator(event) &&
                this.isPositionAfterDecimalSeparator(target.selectionStart - this.decimalsLength, target.value));
        };
        PoDecimalComponent.prototype.verifyInsertComma = function (e) {
            var hasComma = this.containsComma(e.target.value);
            return hasComma && e.key === this.decimalSeparator;
        };
        PoDecimalComponent.prototype.verifyInsertMinusSign = function (event) {
            var value = event.target.value;
            var indexMinusSign = value.lastIndexOf(this.minusSign) !== -1;
            var positionMinusSign = value.lastIndexOf('-');
            var occurancesMinusSign = value.match(new RegExp('-', 'g'));
            if (this.isKeyboardAndroid && indexMinusSign && occurancesMinusSign.length > 1) {
                event.target.value = this.replaceAt(value, positionMinusSign, '');
            }
            return indexMinusSign && event.key === this.minusSign;
        };
        PoDecimalComponent.prototype.verifyValueAfterComma = function (event) {
            var value = event.target.value;
            var selectionStart = event.target.selectionStart;
            var valueAfterSeparator = this.getValueAfterSeparator(value, this.decimalSeparator);
            return (this.isPositionAfterDecimalSeparator(selectionStart, value) && valueAfterSeparator.length >= this.decimalsLength);
        };
        return PoDecimalComponent;
    }(PoInputBaseComponent));
    PoDecimalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-decimal',
                    template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content\">\r\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\r\n      <po-icon class=\"po-field-icon\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\r\n    </div>\r\n\r\n    <input\r\n      #inp\r\n      class=\"po-input\"\r\n      [attr.max]=\"max\"\r\n      [attr.min]=\"min\"\r\n      [attr.name]=\"name\"\r\n      [autocomplete]=\"autocomplete\"\r\n      [class.po-input-icon-left]=\"icon\"\r\n      [class.po-input-icon-right]=\"clean\"\r\n      [disabled]=\"disabled\"\r\n      [placeholder]=\"placeholder\"\r\n      [readonly]=\"readonly\"\r\n      [required]=\"required\"\r\n      inputmode=\"decimal\"\r\n      type=\"text\"\r\n      (blur)=\"onBlur($event)\"\r\n      (focus)=\"onFocus($event)\"\r\n      (input)=\"onInput($event)\"\r\n      (keypress)=\"onKeyPress($event)\"\r\n    />\r\n\r\n    <div class=\"po-field-icon-container-right\">\r\n      <po-clean *ngIf=\"clean && !disabled && !readonly\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\">\r\n      </po-clean>\r\n    </div>\r\n  </div>\r\n\r\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPatternMessage()\"> </po-field-container-bottom>\r\n</po-field-container>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return PoDecimalComponent; }),
                            multi: true
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return PoDecimalComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    PoDecimalComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PoLanguageService },
        { type: i0.ChangeDetectorRef }
    ]; };
    PoDecimalComponent.propDecorators = {
        inputEl: [{ type: i0.ViewChild, args: ['inp', { read: i0.ElementRef, static: true },] }],
        decimalsLength: [{ type: i0.Input, args: ['p-decimals-length',] }],
        thousandMaxlength: [{ type: i0.Input, args: ['p-thousand-maxlength',] }],
        locale: [{ type: i0.Input, args: ['p-locale',] }],
        min: [{ type: i0.Input, args: ['p-min',] }],
        max: [{ type: i0.Input, args: ['p-max',] }]
    };

    /* eslint-disable @angular-eslint/directive-class-suffix */
    var PoInputGeneric = /** @class */ (function (_super) {
        __extends(PoInputGeneric, _super);
        function PoInputGeneric(el, cd) {
            var _this = _super.call(this, cd) || this;
            _this.type = 'text';
            _this.el = el;
            return _this;
        }
        Object.defineProperty(PoInputGeneric.prototype, "autocomplete", {
            get: function () {
                return this.noAutocomplete ? 'off' : 'on';
            },
            enumerable: false,
            configurable: true
        });
        PoInputGeneric.prototype.onKeydown = function (e) {
            if (this.mask && !this.readonly && e.target.keyCode !== 229) {
                this.eventOnBlur(e);
                this.objMask.keydown(e);
            }
        };
        PoInputGeneric.prototype.onKeyup = function (e) {
            if (this.mask && !this.readonly) {
                if (e.target.keyCode !== 229) {
                    this.eventOnBlur(e);
                    this.objMask.keyup(e);
                }
                this.callOnChange(this.objMask.valueToModel);
            }
        };
        PoInputGeneric.prototype.ngAfterViewInit = function () {
            this.afterViewInit();
        };
        PoInputGeneric.prototype.afterViewInit = function () {
            this.verifyAutoFocus();
            if (this.type !== 'password') {
                this.setPaddingInput();
            }
        };
        PoInputGeneric.prototype.focus = function () {
            if (!this.disabled) {
                this.inputEl.nativeElement.focus();
            }
        };
        PoInputGeneric.prototype.setPaddingInput = function () {
            var _this = this;
            setTimeout(function () {
                var selectorIcons = '.po-field-icon-container:not(.po-field-icon-container-left) > .po-icon';
                var icons = _this.el.nativeElement.querySelectorAll(selectorIcons).length;
                if (_this.clean) {
                    icons++;
                }
                if (icons) {
                    _this.inputEl.nativeElement.style.paddingRight = icons * 36 + "px";
                }
            });
        };
        PoInputGeneric.prototype.verifyAutoFocus = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoInputGeneric.prototype.eventOnInput = function (e) {
            var value = '';
            if (!this.mask) {
                value = this.validMaxLength(this.maxlength, e.target.value);
                this.inputEl.nativeElement.value = value;
            }
            else {
                this.objMask.blur(e);
                this.inputEl.nativeElement.value = this.objMask.valueToInput;
                value = this.objMask.valueToModel;
            }
            this.callOnChange(value);
        };
        PoInputGeneric.prototype.validMaxLength = function (maxlength, value) {
            return (maxlength || maxlength === 0) && value.length > maxlength
                ? value.toString().substring(0, maxlength)
                : value;
        };
        PoInputGeneric.prototype.eventOnFocus = function (e) {
            // Atualiza valor da variável que será usada para verificar se o campo teve alteração
            this.valueBeforeChange = this.inputEl.nativeElement.value;
            // Dispara evento quando o usuário entrar no campo
            // Este evento também é disparado quando o campo inicia com foco.
            this.enter.emit();
        };
        PoInputGeneric.prototype.eventOnBlur = function (e) {
            var _a;
            (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
            if (this.mask) {
                this.objMask.blur(e);
            }
            if (e.type === 'blur') {
                this.blur.emit();
                this.controlChangeEmitter();
            }
        };
        PoInputGeneric.prototype.controlChangeEmitter = function () {
            var _this = this;
            var elementValue = this.inputEl.nativeElement.value;
            // Emite o evento change manualmente quando o campo é alterado
            // Este evento é controlado manualmente devido ao preventDefault existente na máscara
            // e devido ao controle do p-clean, que também precisa emitir change
            if (elementValue !== this.valueBeforeChange) {
                clearTimeout(this.timeoutChange);
                this.timeoutChange = setTimeout(function () {
                    _this.change.emit(elementValue);
                }, 200);
            }
        };
        PoInputGeneric.prototype.eventOnClick = function (e) {
            // Atualiza a posição do cursor ao clicar
            if (this.mask) {
                this.objMask.click(e);
            }
        };
        PoInputGeneric.prototype.hasInvalidClass = function () {
            return (this.el.nativeElement.classList.contains('ng-invalid') &&
                this.el.nativeElement.classList.contains('ng-dirty') &&
                this.inputEl.nativeElement.value !== '');
        };
        PoInputGeneric.prototype.getErrorPattern = function () {
            return this.errorPattern !== '' && this.hasInvalidClass() ? this.errorPattern : '';
        };
        PoInputGeneric.prototype.validateClassesForPattern = function () {
            var value = this.getScreenValue();
            var element = this.el.nativeElement;
            if (value && !this.verifyPattern(this.pattern, value)) {
                element.classList.add('ng-invalid');
                element.classList.add('ng-dirty');
            }
            else {
                element.classList.remove('ng-invalid');
            }
        };
        PoInputGeneric.prototype.verifyPattern = function (pattern, value) {
            return new RegExp(pattern).test(value);
        };
        PoInputGeneric.prototype.clear = function (value) {
            this.callOnChange(value);
            this.controlChangeEmitter();
        };
        PoInputGeneric.prototype.writeValueModel = function (value) {
            this.passedWriteValue = true;
            if (this.inputEl) {
                if (value) {
                    if (this.mask) {
                        this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                        // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                        if (this.objMask.formatModel) {
                            this.callUpdateModelWithTimeout(this.objMask.valueToModel);
                        }
                    }
                    else {
                        this.inputEl.nativeElement.value = value;
                    }
                }
                else {
                    // Se o valor for indefinido, deve limpar o campo.
                    this.inputEl.nativeElement.value = '';
                }
            }
            // Emite evento quando o model é atualizado, inclusive a primeira vez
            if (value) {
                this.changeModel.emit(value);
            }
        };
        PoInputGeneric.prototype.getScreenValue = function () {
            var screenValue = (this.inputEl && this.inputEl.nativeElement.value) || undefined;
            if (this.type === 'number') {
                var parsedValue = parseFloat(screenValue);
                return parsedValue || parsedValue === 0 ? parsedValue : null;
            }
            else {
                return screenValue;
            }
        };
        return PoInputGeneric;
    }(PoInputBaseComponent));
    PoInputGeneric.decorators = [
        { type: i0.Directive }
    ];
    PoInputGeneric.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    PoInputGeneric.propDecorators = {
        inputEl: [{ type: i0.ViewChild, args: ['inp', { read: i0.ElementRef, static: true },] }],
        onKeydown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }],
        onKeyup: [{ type: i0.HostListener, args: ['keyup', ['$event'],] }]
    };

    /* istanbul ignore next */
    var providers$4 = [
        {
            provide: forms.NG_VALUE_ACCESSOR,
            // eslint-disable-next-line
            useExisting: i0.forwardRef(function () { return PoEmailComponent; }),
            multi: true
        },
        {
            provide: forms.NG_VALIDATORS,
            // eslint-disable-next-line
            useExisting: i0.forwardRef(function () { return PoEmailComponent; }),
            multi: true
        }
    ];
    /**
     * @docsExtends PoInputBaseComponent
     *
     * @description
     *
     * po-email é um input específico para receber E-mail, com o pattern já configurado.
     *
     * @example
     *
     * <example name="po-email-basic" title="PO Email Basic">
     *  <file name="sample-po-email-basic/sample-po-email-basic.component.html"> </file>
     *  <file name="sample-po-email-basic/sample-po-email-basic.component.ts"> </file>
     *  <file name="sample-po-email-basic/sample-po-email-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-email-basic/sample-po-email-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="po-email-labs" title="PO Email Labs">
     *  <file name="sample-po-email-labs/sample-po-email-labs.component.html"> </file>
     *  <file name="sample-po-email-labs/sample-po-email-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-email-newsletter" title="PO Email - Newsletter">
     *  <file name="sample-po-email-newsletter/sample-po-email-newsletter.component.html"> </file>
     *  <file name="sample-po-email-newsletter/sample-po-email-newsletter.component.ts"> </file>
     * </example>
     */
    var PoEmailComponent = /** @class */ (function (_super) {
        __extends(PoEmailComponent, _super);
        /* istanbul ignore next */
        function PoEmailComponent(el, cd) {
            var _this = _super.call(this, el, cd) || this;
            _this.icon = 'po-icon-mail';
            _this.type = 'email';
            // Consideramos o uso do nosso pattern com a seguinte expressão.
            // Antes do símbolo @:
            // - não há limite de caracteres.
            // - não pode haver espaços em branco, caracteres acentuados, caracteres especiais ou símbolos.
            // - pode começar com letras, números, hífen ou undescore (underline).
            //
            // Depois do símbolo @:
            // - o domínio tem um limite de até 66 caracteres após um separador.
            // - separador deve ser um 'ponto' (.).
            // - o primeiro bloco pode conter letras, números, hífen ou underscore (underline).
            // - após o primeiro separador é permitido apenas letras.
            // - não pode haver espaços em branco, caracteres acentuados, caracteres especiais ou símbolos.
            //
            // Limite total de 254 caracteres para o e-mail.
            //
            // As recomendações foram consultadas nas RFC 1034, RFC 5321 e RFC 5322.
            //
            // RFC 1034 - https://datatracker.ietf.org/doc/html/rfc1034#section-3
            // RFC 5321 - https://datatracker.ietf.org/doc/html/rfc5321#section-4.5.3.1
            // RFC 5322 - https://datatracker.ietf.org/doc/html/rfc5322#section-3.4
            _this.pattern = '^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([A-Za-z]{2,66}(?:\\.[A-Za-z]{2})?)$';
            _this.mask = '';
            _this.listener = _this.validateClassesForPattern.bind(_this);
            _this.maxlength = 254;
            return _this;
        }
        PoEmailComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            setTimeout(function () {
                // Se não tem ngModel ou reactive form adiciona validação com classes css
                if (!_this.onChangePropagate) {
                    _this.inputEl.nativeElement.addEventListener('keyup', _this.listener);
                }
            });
            _super.prototype.ngAfterViewInit.call(this);
        };
        PoEmailComponent.prototype.ngOnDestroy = function () {
            if (!this.onChangePropagate) {
                this.inputEl.nativeElement.removeEventListener('keyup', this.listener);
            }
        };
        PoEmailComponent.prototype.extraValidation = function (c) {
            return null;
        };
        return PoEmailComponent;
    }(PoInputGeneric));
    PoEmailComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-email',
                    template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content\">\r\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\r\n      <po-icon class=\"po-field-icon\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\r\n    </div>\r\n\r\n    <input\r\n      #inp\r\n      class=\"po-input\"\r\n      [attr.name]=\"name\"\r\n      [autocomplete]=\"autocomplete\"\r\n      [class.po-input-icon-left]=\"icon\"\r\n      [class.po-input-icon-right]=\"clean\"\r\n      [disabled]=\"disabled\"\r\n      [placeholder]=\"placeholder\"\r\n      [readonly]=\"readonly\"\r\n      [required]=\"required\"\r\n      [type]=\"type\"\r\n      (blur)=\"eventOnBlur($event)\"\r\n      (click)=\"eventOnClick($event)\"\r\n      (focus)=\"eventOnFocus($event)\"\r\n      (input)=\"eventOnInput($event)\"\r\n    />\r\n\r\n    <div class=\"po-field-icon-container-right\">\r\n      <po-clean *ngIf=\"clean && !disabled && !readonly\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\">\r\n      </po-clean>\r\n    </div>\r\n  </div>\r\n\r\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\r\n</po-field-container>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: providers$4
                },] }
    ];
    PoEmailComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };

    /* istanbul ignore next */
    var providers$3 = [
        {
            provide: forms.NG_VALUE_ACCESSOR,
            // eslint-disable-next-line
            useExisting: i0.forwardRef(function () { return PoLoginComponent; }),
            multi: true
        },
        {
            provide: forms.NG_VALIDATORS,
            // eslint-disable-next-line
            useExisting: i0.forwardRef(function () { return PoLoginComponent; }),
            multi: true
        }
    ];
    /**
     * @docsExtends PoInputBaseComponent
     *
     * @description
     * O po-login é um input específico para login. Já possui tipo, estilo e ícone predefinidos.
     *
     * @example
     *
     * <example name="po-login-basic" title="PO Login Basic">
     *  <file name="sample-po-login-basic/sample-po-login-basic.component.html"> </file>
     *  <file name="sample-po-login-basic/sample-po-login-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-login-labs" title="PO Login Labs">
     *  <file name="sample-po-login-labs/sample-po-login-labs.component.html"> </file>
     *  <file name="sample-po-login-labs/sample-po-login-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-login-confirm" title="PO Login - Confirm Identity">
     *  <file name="sample-po-login-confirm/sample-po-login-confirm.component.html"> </file>
     *  <file name="sample-po-login-confirm/sample-po-login-confirm.component.ts"> </file>
     * </example>
     *
     */
    var PoLoginComponent = /** @class */ (function (_super) {
        __extends(PoLoginComponent, _super);
        /* istanbul ignore next */
        function PoLoginComponent(el, cd) {
            var _this = _super.call(this, el, cd) || this;
            _this.type = 'text';
            return _this;
        }
        PoLoginComponent.prototype.extraValidation = function (c) {
            return null;
        };
        return PoLoginComponent;
    }(PoInputGeneric));
    PoLoginComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-login',
                    template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content\">\r\n    <div class=\"po-field-icon-container-left\">\r\n      <span class=\"po-icon po-field-icon po-icon-user\" [class.po-field-icon-disabled]=\"disabled\"></span>\r\n    </div>\r\n\r\n    <input\r\n      #inp\r\n      class=\"po-input po-input-icon-left\"\r\n      [attr.name]=\"name\"\r\n      [autocomplete]=\"autocomplete\"\r\n      [class.po-input-icon-right]=\"clean\"\r\n      [disabled]=\"disabled\"\r\n      [placeholder]=\"placeholder\"\r\n      [readonly]=\"readonly\"\r\n      [required]=\"required\"\r\n      [type]=\"type\"\r\n      (blur)=\"eventOnBlur($event)\"\r\n      (click)=\"eventOnClick($event)\"\r\n      (focus)=\"eventOnFocus($event)\"\r\n      (input)=\"eventOnInput($event)\"\r\n    />\r\n\r\n    <div class=\"po-field-icon-container-right\">\r\n      <po-clean *ngIf=\"clean && !disabled && !readonly\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\">\r\n      </po-clean>\r\n    </div>\r\n  </div>\r\n\r\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\r\n</po-field-container>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: providers$3
                },] }
    ];
    PoLoginComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço padrão utilizado para filtrar os dados do componente po-lookup.
     */
    var PoLookupFilterService = /** @class */ (function () {
        function PoLookupFilterService(httpClient) {
            this.httpClient = httpClient;
            this.headers = new i1.HttpHeaders({
                'X-PO-No-Message': 'true'
            });
            this.multiple = false;
        }
        PoLookupFilterService.prototype.getFilteredItems = function (filteredItemsParams) {
            var filterParams = filteredItemsParams.filterParams, advancedFilters = filteredItemsParams.advancedFilters, restFilteredItemsParams = __rest(filteredItemsParams, ["filterParams", "advancedFilters"]);
            var validatedFilterParams = this.validateParams(filterParams);
            var validatedAdvancedFilters = this.validateParams(advancedFilters);
            var params = Object.assign(Object.assign(Object.assign({}, restFilteredItemsParams), validatedFilterParams), validatedAdvancedFilters);
            return this.httpClient.get(this.url, { headers: this.headers, params: params });
        };
        PoLookupFilterService.prototype.getObjectByValue = function (value, filterParams) {
            var validatedFilterParams = this.validateParams(filterParams);
            var newURL;
            var encodedValue;
            if (this.multiple) {
                encodedValue = encodeURIComponent(Array.isArray(value) ? value.join(',') : value);
                newURL = this.url + "?" + this.fieldValue + "=" + encodedValue;
            }
            else {
                encodedValue = encodeURIComponent(value);
                newURL = this.url + "/" + encodedValue;
            }
            return this.httpClient
                .get(newURL, { headers: this.headers, params: validatedFilterParams })
                .pipe(operators.map(function (response) { return ('items' in response ? response.items : response); }));
        };
        PoLookupFilterService.prototype.setConfig = function (url, fieldValue, multiple) {
            this.url = url;
            this.fieldValue = fieldValue;
            this.multiple = multiple;
        };
        PoLookupFilterService.prototype.validateParams = function (params) {
            return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
        };
        return PoLookupFilterService;
    }());
    PoLookupFilterService.decorators = [
        { type: i0.Injectable }
    ];
    PoLookupFilterService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    /**
     * @description
     *
     * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviço. Nesta janela é possível buscar e
     * selecionar um ou mais registros que serão enviados para o campo. O `po-lookup` permite que o usuário digite um valor e pressione a tecla *TAB* para
     * buscar um registro.
     *
     * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo será limpado.
     * No segundo caso ocorrerá após este perder o foco; ambos os casos o campo ficará inválido quando requerido.
     *
     * > Enquanto o componente realiza a requisição ao servidor, o componente ficará desabilitado e com o status interno do
     * [modelo](https://angular.io/guide/form-validation#creating-asynchronous-validators) como `pending`.
     *
     * Este componente não é recomendado quando a busca dos dados possuir poucas informações, para isso utilize outros componentes como o
     * `po-select` ou o `po-combo`.
     */
    var PoLookupBaseComponent = /** @class */ (function () {
        function PoLookupBaseComponent(defaultService, injector) {
            this.defaultService = defaultService;
            this.injector = injector;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /**
             * @optional
             *
             * @description
             *
             * Ativa a funcionalidade de scroll infinito para a tabela exibida no retorno da consulta.
             *
             * @default `false`
             */
            this.infiniteScroll = false;
            /** Exibe um ícone que permite limpar o campo. */
            this.clean = false;
            /**
             * @optional
             *
             * @description
             *
             * Permite a seleção de múltiplos itens.
             *
             * > Quando habilitado o valor do campo passará a ser uma lista de valores, por exemplo: `[ 12345, 67890 ]`
             *
             * @default `false`
             */
            this.multiple = false;
            /**
             * @optional
             *
             * @description
             *
             * Define que a altura do componente será auto ajustável, possuindo uma altura minima porém a altura máxima será de acordo
             * com o número de itens selecionados e a extensão dos mesmos, mantendo-os sempre visíveis.
             *
             * @default `false`
             */
            this.autoHeight = false;
            /**
             * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
             * Será passado por parâmetro o objeto de erro retornado.
             */
            this.onError = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento será disparado quando ocorrer alguma seleção.
             * Será passado por parâmetro o objeto com o valor selecionado.
             */
            this.selected = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             *  Evento que será disparado ao alterar o model.
             *  Por parâmetro será passado o novo valor.
             */
            this.change = new i0.EventEmitter();
            this.selectedOptions = [];
            this.oldValue = '';
            this.oldValueToModel = null;
            // eslint-disable-next-line
            this.onTouched = null;
            this._disabled = false;
            this._placeholder = '';
            this._required = false;
            this._autoHeight = false;
            this.onChangePropagate = null;
        }
        Object.defineProperty(PoLookupBaseComponent.prototype, "placeholder", {
            get: function () {
                return this._placeholder;
            },
            /** Mensagem que aparecerá enquanto o campo não estiver preenchido. */
            set: function (value) {
                this._placeholder = value || '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoLookupBaseComponent.prototype, "fieldLabel", {
            get: function () {
                return this._fieldLabel;
            },
            /** Indica a coluna que será utilizada como descrição do campo e como filtro dentro da janela. */
            set: function (value) {
                this._fieldLabel = value;
                this.keysDescription = [this.fieldLabel];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoLookupBaseComponent.prototype, "filterService", {
            get: function () {
                return this._filterService;
            },
            /**
             * Serviço responsável por buscar os dados da tabela na janela. Pode ser informado um serviço que implemente a interface
             * `PoLookupFilter` ou uma URL.
             *
             * Quando utilizada uma URL de um serviço, será concatenada nesta URL o valor que deseja-se filtrar, por exemplo:
             *
             * ```
             * url + ?page=1&pageSize=20&filter=Peter
             * ```
             *
             * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:
             * - Coluna decrescente:
             * ```
             *  url + ?page=1&pageSize=20&filter=Peter&order=-name
             * ```
             *
             * - Coluna ascendente:
             * ```
             *  url + ?page=1&pageSize=20&filter=Peter&order=name
             * ```
             *
             * Se for definido a propriedade `p-filter-params`, o mesmo também será concatenado. Por exemplo, para o
             * parâmetro `{ age: 23 }` a URL ficaria:
             *
             * ```
             * url + ?page=1&pageSize=20&age=23&filter=Peter
             * ```
             *
             * Ao iniciar o campo com valor, os registros serão buscados da seguinte forma:
             * ```
             * model = 1234;
             *
             * GET url/1234
             * ```
             *
             * Caso estiver com múltipla seleção habilitada:
             * ```
             * model = [1234, 5678]
             *
             * GET url?${fieldValue}=1234,5678
             * ```
             *
             * > Esta URL deve retornar e receber os dados no padrão de [API do PO UI](https://po-ui.io/guides/api) e utiliza os valores
             * definidos nas propriedades `p-field-label` e `p-field-value` para a construção do `po-lookup`.
             *
             * Caso o usuário digite um valor e pressione a tecla *TAB* para realizar a busca de um registro específico, o valor que se
             * deseja filtrar será codificado utilizando a função [encodeURIComponent](https://tc39.es/ecma262/#sec-encodeuricomponent-uricomponent)
             * e concatenado na URL da seguinte forma:
             *
             * ```
             * url/valor%20que%20se%20deseja%20filtrar
             * ```
             *
             * > Quando informado um serviço que implemente a interface `PoLookupFilter` o tratamento de encoding do valor a ser filtrado ficará a cargo do desenvolvedor.
             *
             */
            set: function (filterService) {
                this._filterService = filterService;
                this.setService(this.filterService);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoLookupBaseComponent.prototype, "noAutocomplete", {
            get: function () {
                return this._noAutocomplete;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a propriedade nativa `autocomplete` do campo como `off`.
             *
             * @default `false`
             */
            set: function (value) {
                this._noAutocomplete = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoLookupBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             * @description
             *
             * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
             *
             * @default `false`
             */
            set: function (required) {
                this._required = convertToBoolean(required);
                this.validateModel(this.valueToModel);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoLookupBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @description
             *
             * Indica que o campo será desabilitado.
             *
             * @default false
             * @optional
             */
            set: function (disabled) {
                this._disabled = disabled === '' ? true : convertToBoolean(disabled);
            },
            enumerable: false,
            configurable: true
        });
        PoLookupBaseComponent.prototype.ngOnDestroy = function () {
            if (this.getSubscription) {
                this.getSubscription.unsubscribe();
            }
        };
        PoLookupBaseComponent.prototype.ngOnInit = function () {
            this.initializeColumn();
        };
        PoLookupBaseComponent.prototype.ngAfterViewInit = function () {
            this.setControl();
        };
        PoLookupBaseComponent.prototype.cleanModel = function () {
            this.cleanViewValue();
            this.callOnChange(undefined);
        };
        PoLookupBaseComponent.prototype.ngOnChanges = function (changes) {
            if (changes.multiple && isTypeof(this.filterService, 'string')) {
                this.service.setConfig(this.filterService, this.fieldValue, this.multiple);
            }
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar os estados de habilitado via forms api
        PoLookupBaseComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        PoLookupBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        // Função implementada do ControlValueAccessor.
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
        PoLookupBaseComponent.prototype.registerOnChange = function (func) {
            this.onChangePropagate = func;
        };
        // Função implementada do ControlValueAccessor.
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
        PoLookupBaseComponent.prototype.registerOnTouched = function (func) {
            this.onTouched = func;
        };
        // Seleciona o valor do model.
        PoLookupBaseComponent.prototype.selectValue = function (valueSelected) {
            this.valueToModel = valueSelected;
            this.callOnChange(this.valueToModel);
            this.selected.emit(valueSelected);
        };
        PoLookupBaseComponent.prototype.callOnChange = function (value) {
            // Quando o input não possui um formulário, então esta função não é registrada.
            if (this.onChangePropagate) {
                this.onChangePropagate(value);
            }
            if (this.oldValueToModel !== this.valueToModel) {
                this.change.emit(this.valueToModel);
            }
            // Armazenar o valor antigo do model
            this.oldValueToModel = this.valueToModel;
        };
        PoLookupBaseComponent.prototype.searchById = function (value) {
            var _this = this;
            var checkedValue = value;
            if (typeof checkedValue === 'string') {
                checkedValue = checkedValue.trim();
            }
            if (checkedValue !== '') {
                var oldDisable_1 = this.disabled;
                this.disabled = true;
                if (this.control) {
                    // :TODO: Retirar no futuro pois esse setTimeout foi feito
                    // pois quando o campo é acionado pelos métodos setValue ou patchValue
                    // a mudança não é detectada
                    setTimeout(function () { return _this.control.markAsPending(); });
                }
                this.getSubscription = this.service
                    .getObjectByValue(value, this.filterParams)
                    .pipe(operators.finalize(function () {
                    _this.disabled = oldDisable_1;
                    if (_this.control) {
                        _this.control.updateValueAndValidity();
                    }
                }))
                    .subscribe(function (element) {
                    if ((element === null || element === void 0 ? void 0 : element.length) || (!Array.isArray(element) && element)) {
                        if (Array.isArray(element) && element.length > 1) {
                            _this.setDisclaimers(element);
                            _this.updateVisibleItems();
                        }
                        _this.selectModel(_this.multiple ? element : [element]);
                    }
                    else {
                        _this.cleanModel();
                    }
                }, function (error) {
                    _this.cleanModel();
                    _this.onError.emit(error);
                });
            }
            else {
                this.cleanModel();
            }
        };
        PoLookupBaseComponent.prototype.validate = function (abstractControl) {
            if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
        };
        PoLookupBaseComponent.prototype.writeValue = function (value) {
            if ((value === null || value === void 0 ? void 0 : value.length) || (!Array.isArray(value) && value)) {
                // Esta condição é executada somente quando é passado o ID para realizar a busca pelo ID.
                this.searchById(value);
            }
            else {
                this.cleanViewValue();
            }
        };
        PoLookupBaseComponent.prototype.cleanViewValue = function () {
            this.setDisclaimers([]);
            this.setViewValue('', {});
            this.oldValue = '';
            this.valueToModel = null;
        };
        // Formata a label do campo.
        PoLookupBaseComponent.prototype.getFormattedLabel = function (value) {
            return value ? this.keysDescription.map(function (column) { return value[column]; }).join(' - ') : '';
        };
        // Chama o método writeValue e preenche o model.
        PoLookupBaseComponent.prototype.selectModel = function (options) {
            var _this = this;
            if (options.length) {
                this.selectedOptions = __spreadArray([], __read(options));
                var newModel = this.multiple ? options.map(function (option) { return option[_this.fieldValue]; }) : options[0][this.fieldValue];
                this.selectValue(newModel);
                if (options.length === 1) {
                    this.oldValue = options[0][this.fieldLabel];
                    this.setViewValue(this.getFormattedLabel(options[0]), options[0]);
                }
            }
            else {
                this.selectValue(undefined);
                this.cleanViewValue();
            }
        };
        PoLookupBaseComponent.prototype.validateModel = function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        PoLookupBaseComponent.prototype.setService = function (service) {
            if (isTypeof(service, 'object')) {
                this.service = service;
            }
            if (service && isTypeof(service, 'string')) {
                this.service = this.defaultService;
                this.service.setConfig(service, this.fieldValue, this.multiple);
            }
        };
        PoLookupBaseComponent.prototype.setControl = function () {
            var ngControl = this.injector.get(forms.NgControl, null, i0.InjectFlags.Self);
            if (ngControl) {
                this.control = ngControl.control;
            }
        };
        PoLookupBaseComponent.prototype.initializeColumn = function () {
            if (this.fieldLabel) {
                this.keysDescription = [this.fieldLabel];
            }
            else {
                this.keysDescription = [];
                this.keysDescription = this.columns.filter(function (element) { return element.fieldLabel; }).map(function (element) { return element.property; });
            }
        };
        return PoLookupBaseComponent;
    }());
    PoLookupBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoLookupBaseComponent.ctorParameters = function () { return [
        { type: PoLookupFilterService },
        { type: i0.Injector, decorators: [{ type: i0.Inject, args: [i0.Injector,] }] }
    ]; };
    PoLookupBaseComponent.propDecorators = {
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        help: [{ type: i0.Input, args: ['p-help',] }],
        placeholder: [{ type: i0.Input, args: ['p-placeholder',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        fieldValue: [{ type: i0.Input, args: ['p-field-value',] }],
        fieldLabel: [{ type: i0.Input, args: ['p-field-label',] }],
        filterParams: [{ type: i0.Input, args: ['p-filter-params',] }],
        fieldFormat: [{ type: i0.Input, args: ['p-field-format',] }],
        columns: [{ type: i0.Input, args: ['p-columns',] }],
        optional: [{ type: i0.Input, args: ['p-optional',] }],
        advancedFilters: [{ type: i0.Input, args: ['p-advanced-filters',] }],
        infiniteScroll: [{ type: i0.Input, args: ['p-infinite-scroll',] }],
        clean: [{ type: i0.Input, args: ['p-clean',] }],
        multiple: [{ type: i0.Input, args: ['p-multiple',] }],
        autoHeight: [{ type: i0.Input, args: ['p-auto-height',] }],
        onError: [{ type: i0.Output, args: ['p-error',] }],
        selected: [{ type: i0.Output, args: ['p-selected',] }],
        change: [{ type: i0.Output, args: ['p-change',] }],
        filterService: [{ type: i0.Input, args: ['p-filter-service',] }],
        noAutocomplete: [{ type: i0.Input, args: ['p-no-autocomplete',] }],
        required: [{ type: i0.Input, args: ['p-required',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }]
    };
    __decorate([
        InputBoolean()
    ], PoLookupBaseComponent.prototype, "autoFocus", void 0);
    __decorate([
        InputBoolean()
    ], PoLookupBaseComponent.prototype, "infiniteScroll", void 0);
    __decorate([
        InputBoolean()
    ], PoLookupBaseComponent.prototype, "clean", void 0);
    __decorate([
        InputBoolean()
    ], PoLookupBaseComponent.prototype, "multiple", void 0);
    __decorate([
        InputBoolean()
    ], PoLookupBaseComponent.prototype, "autoHeight", void 0);

    var poLookupLiteralsDefault = {
        en: {
            modalPrimaryActionLabel: 'Select',
            modalSecondaryActionLabel: 'Cancel',
            modalPlaceholder: 'Search',
            modalTitle: 'Select a record',
            modalTableNoColumns: poTableLiteralsDefault.en.noColumns,
            modalTableNoData: poTableLiteralsDefault.en.noData,
            modalTableLoadingData: poTableLiteralsDefault.en.loadingData,
            modalTableLoadMoreData: poTableLiteralsDefault.en.loadMoreData,
            modalAdvancedSearch: 'Advanced search',
            modalAdvancedSearchTitle: 'Advanced search',
            modalAdvancedSearchPrimaryActionLabel: 'Filter',
            modalAdvancedSearchSecondaryActionLabel: 'Return',
            modalDisclaimerGroupTitle: 'Presenting results filtered by:'
        },
        es: {
            modalPrimaryActionLabel: 'Seleccionar',
            modalSecondaryActionLabel: 'Cancelar',
            modalPlaceholder: 'Buscar',
            modalTitle: 'Seleccione un registro',
            modalTableNoColumns: poTableLiteralsDefault.es.noColumns,
            modalTableNoData: poTableLiteralsDefault.es.noData,
            modalTableLoadingData: poTableLiteralsDefault.es.loadingData,
            modalTableLoadMoreData: poTableLiteralsDefault.es.loadMoreData,
            modalAdvancedSearch: 'Búsqueda Avanzada',
            modalAdvancedSearchTitle: 'Búsqueda Avanzada',
            modalAdvancedSearchPrimaryActionLabel: 'Filtrar',
            modalAdvancedSearchSecondaryActionLabel: 'Vuelve',
            modalDisclaimerGroupTitle: 'Presentar resultados filtrados por:'
        },
        pt: {
            modalPrimaryActionLabel: 'Selecionar',
            modalSecondaryActionLabel: 'Cancelar',
            modalPlaceholder: 'Pesquisar',
            modalTitle: 'Selecione um registro',
            modalTableNoColumns: poTableLiteralsDefault.pt.noColumns,
            modalTableNoData: poTableLiteralsDefault.pt.noData,
            modalTableLoadingData: poTableLiteralsDefault.pt.loadingData,
            modalTableLoadMoreData: poTableLiteralsDefault.pt.loadMoreData,
            modalAdvancedSearch: 'Busca avançada',
            modalAdvancedSearchTitle: 'Busca Avançada',
            modalAdvancedSearchPrimaryActionLabel: 'Filtrar',
            modalAdvancedSearchSecondaryActionLabel: 'Voltar',
            modalDisclaimerGroupTitle: 'Apresentando resultados filtrados por:'
        },
        ru: {
            modalPrimaryActionLabel: 'выбирать',
            modalSecondaryActionLabel: 'отменить',
            modalPlaceholder: 'поиск',
            modalTitle: 'Выберите запись',
            modalTableNoColumns: poTableLiteralsDefault.ru.noColumns,
            modalTableNoData: poTableLiteralsDefault.ru.noData,
            modalTableLoadingData: poTableLiteralsDefault.ru.loadingData,
            modalTableLoadMoreData: poTableLiteralsDefault.ru.loadMoreData,
            modalAdvancedSearch: 'Расширенный поиск',
            modalAdvancedSearchTitle: 'Расширенный поиск',
            modalAdvancedSearchPrimaryActionLabel: 'Фильтр',
            modalAdvancedSearchSecondaryActionLabel: 'Вернись',
            modalDisclaimerGroupTitle: 'Представление результатов отфильтровано по:'
        }
    };
    /**
     * @docsPrivate
     *
     * Classe base do componente Po Lookup Modal.
     */
    var PoLookupModalBaseComponent = /** @class */ (function () {
        function PoLookupModalBaseComponent(languageService, changeDetector) {
            var _this = this;
            this.changeDetector = changeDetector;
            /** Se verdadeiro, ativa a funcionalidade de scroll infinito para a tabela exibida no retorno da consulta. */
            this.infiniteScroll = false;
            /** Se verdadeiro, ativa a funcionalidade de multipla seleção. */
            this.multiple = false;
            /** Evento utilizado ao selecionar um registro da tabela. */
            this.model = new i0.EventEmitter();
            this.hasNext = true;
            this.isLoading = false;
            this.page = 1;
            this.pageSize = 10;
            this.searchValue = '';
            // Propriedade da modal de busca avançada:
            this.advancedFilterModalTitle = '';
            this.dynamicFormValue = {};
            this.isAdvancedFilter = false;
            this.selecteds = [];
            this.language = poLocaleDefault;
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.primaryAction = {
                action: function () {
                    var selectedsItems = [];
                    if (!_this.multiple) {
                        _this.items.forEach(function (element) {
                            if (element['$selected']) {
                                selectedsItems.push(element);
                            }
                        });
                    }
                    else {
                        selectedsItems = _this.selecteds;
                    }
                    _this.model.emit(selectedsItems);
                    _this.poModal.close();
                },
                label: this.literals.modalPrimaryActionLabel
            };
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.secondaryAction = {
                action: function () {
                    _this.model.emit(null);
                    _this.poModal.close();
                },
                label: this.literals.modalSecondaryActionLabel
            };
            this.language = languageService.getShortLanguage();
        }
        Object.defineProperty(PoLookupModalBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poLookupLiteralsDefault[this.language];
            },
            /** Objeto com as literais usadas no `po-lookup-modal`. */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = Object.assign(Object.assign(Object.assign({}, poLookupLiteralsDefault[poLocaleDefault]), poLookupLiteralsDefault[this.language]), value);
                    if (value.modalTitle) {
                        this.title = this.literals.modalTitle;
                    }
                }
                else {
                    this._literals = poLookupLiteralsDefault[this.language];
                }
                this.primaryAction.label = this.literals.modalPrimaryActionLabel;
                this.secondaryAction.label = this.literals.modalSecondaryActionLabel;
                this.setTableLiterals();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoLookupModalBaseComponent.prototype, "title", {
            get: function () {
                return this._title;
            },
            /** Título da modal. */
            set: function (value) {
                this._title = isTypeof(value, 'string') ? value : this.literals.modalTitle;
            },
            enumerable: false,
            configurable: true
        });
        PoLookupModalBaseComponent.prototype.ngOnDestroy = function () {
            if (this.filterSubscription) {
                this.filterSubscription.unsubscribe();
            }
            if (this.searchSubscription) {
                this.searchSubscription.unsubscribe();
            }
            if (this.showMoreSubscription) {
                this.showMoreSubscription.unsubscribe();
            }
        };
        PoLookupModalBaseComponent.prototype.ngOnInit = function () {
            this.setAdvancedFilterModalProperties();
            this.initializeData();
            this.setTableLiterals();
        };
        PoLookupModalBaseComponent.prototype.createDisclaimer = function () {
            var e_1, _c;
            this.disclaimerGroup.disclaimers = [];
            this.searchValue = '';
            try {
                for (var _d = __values(Object.entries(this.dynamicFormValue)), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var _f = __read(_e.value, 2), key = _f[0], value = _f[1];
                    this.addDisclaimer(value, key);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (!Object.values(this.dynamicFormValue).some(function (v) { return v !== null && typeof v !== 'undefined'; })) {
                this.initializeData();
            }
        };
        PoLookupModalBaseComponent.prototype.addDisclaimer = function (value, property) {
            this.disclaimer = { property: property };
            this.disclaimer.value = value;
            this.disclaimerGroup.disclaimers = __spreadArray(__spreadArray([], __read(this.disclaimerGroup.disclaimers)), [this.disclaimer]);
        };
        PoLookupModalBaseComponent.prototype.onChangeDisclaimerGroup = function () {
            if (!this.searchValue) {
                this.isLoading = true;
                this.searchValue = '';
                this.searchFilteredItems();
            }
        };
        PoLookupModalBaseComponent.prototype.search = function () {
            this.page = 1;
            if (this.searchValue) {
                this.isLoading = true;
                this.disclaimerGroup.disclaimers = [];
                this.searchFilteredItems();
            }
            else {
                this.initializeData();
            }
        };
        PoLookupModalBaseComponent.prototype.searchFilteredItems = function () {
            var _this = this;
            this.searchSubscription = this.getFilteredItems(this.searchValue)
                .pipe(operators.catchError(function (error) {
                _this.setLookupResponseProperties();
                return rxjs.throwError(error);
            }))
                .subscribe(function (data) { return _this.setLookupResponseProperties(data); }, function () { });
        };
        PoLookupModalBaseComponent.prototype.showMoreEvent = function () {
            var _this = this;
            this.page++;
            this.isLoading = true;
            this.showMoreSubscription = this.getFilteredItems(this.searchValue)
                .pipe(operators.catchError(function (error) {
                _this.hasNext = false;
                _this.isLoading = false;
                return rxjs.throwError(error);
            }))
                .subscribe(function (data) {
                _this.items = __spreadArray(__spreadArray([], __read(_this.items)), __read(data.items));
                _this.hasNext = data.hasNext;
                _this.isLoading = false;
                _this.changeDetector.detectChanges();
                _this.setSelectedItems();
            }, function () { });
        };
        //Método responsável por selecionar as linhas quando abre o modal.
        PoLookupModalBaseComponent.prototype.setSelectedItems = function () {
            var _this = this;
            this.selecteds.forEach(function (selectedItem) { return _this.poTable.selectRowItem(function (item) { return item[_this.fieldValue] === selectedItem.value; }); });
        };
        //Método responsável por criar os disclaimers quando abre o modal.
        PoLookupModalBaseComponent.prototype.setDisclaimersItems = function () {
            if (this.selectedItems && !Array.isArray(this.selectedItems)) {
                this.selecteds = [{ value: this.selectedItems }];
                return;
            }
            if (this.selectedItems && this.selectedItems.length) {
                this.selecteds = __spreadArray([], __read(this.selectedItems));
            }
        };
        PoLookupModalBaseComponent.prototype.setAdvancedFilterModalProperties = function () {
            var _this = this;
            this.advancedFilterModalTitle = this.literals.modalAdvancedSearchTitle;
            this.disclaimerGroup = {
                title: this.literals.modalDisclaimerGroupTitle,
                disclaimers: []
            };
            this.primaryActionAdvancedFilter = {
                action: function () {
                    _this.destroyDynamicForm();
                    _this.isAdvancedFilter = false;
                    _this.createDisclaimer();
                },
                label: this.literals.modalAdvancedSearchPrimaryActionLabel
            };
            this.secondaryActionAdvancedFilter = {
                action: function () {
                    _this.destroyDynamicForm();
                    _this.isAdvancedFilter = false;
                },
                label: this.literals.modalAdvancedSearchSecondaryActionLabel
            };
        };
        PoLookupModalBaseComponent.prototype.getAdvancedFilters = function (advancedParams) {
            if (advancedParams && advancedParams.length > 0) {
                var filters_1 = {};
                var validatedAdvacendFilters_1;
                advancedParams.forEach(function (filter) {
                    filters_1[filter.property] = filter.value instanceof Array ? filter.value.join() : filter.value;
                    validatedAdvacendFilters_1 = Object.assign(Object.assign({}, validatedAdvacendFilters_1), filters_1);
                });
                return validatedAdvacendFilters_1;
            }
            return undefined;
        };
        PoLookupModalBaseComponent.prototype.getFilteredItems = function (filter) {
            var filteredParams = this.getFilteredParams(filter);
            return this.filterService.getFilteredItems(filteredParams);
        };
        PoLookupModalBaseComponent.prototype.getFilteredParams = function (filter) {
            var _c = this, page = _c.page, pageSize = _c.pageSize, filterParams = _c.filterParams, sort = _c.sort;
            var filteredParams = {};
            var order = this.getOrderParam(sort);
            var advancedFilters = this.getAdvancedFilters(this.disclaimerGroup.disclaimers);
            var params = { filter: filter, page: page, pageSize: pageSize, order: order, filterParams: filterParams, advancedFilters: advancedFilters };
            for (var key in params) {
                if (params.hasOwnProperty(key) && params[key] !== undefined) {
                    filteredParams[key] = params[key];
                }
            }
            return filteredParams;
        };
        PoLookupModalBaseComponent.prototype.getOrderParam = function (sort) {
            if (sort === void 0) { sort = { type: undefined }; }
            var column = sort.column, type = sort.type;
            if (!column) {
                return;
            }
            if (type === exports.PoTableColumnSortType.Descending) {
                return "-" + column.property;
            }
            return "" + column.property;
        };
        PoLookupModalBaseComponent.prototype.initializeData = function () {
            var _this = this;
            this.isLoading = true;
            this.filterSubscription = this.getFilteredItems('').subscribe(function (data) {
                _this.setLookupResponseProperties(data);
            });
        };
        PoLookupModalBaseComponent.prototype.setLookupResponseProperties = function (data) {
            var _a, _b;
            this.items = (_a = data === null || data === void 0 ? void 0 : data.items) !== null && _a !== void 0 ? _a : [];
            this.hasNext = (_b = data === null || data === void 0 ? void 0 : data.hasNext) !== null && _b !== void 0 ? _b : false;
            this.isLoading = false;
            this.changeDetector.detectChanges();
            this.setDisclaimersItems();
            this.setSelectedItems();
        };
        PoLookupModalBaseComponent.prototype.setTableLiterals = function () {
            this.tableLiterals = {
                'noColumns': this.literals.modalTableNoColumns,
                'noData': this.literals.modalTableNoData,
                'loadingData': this.literals.modalTableLoadingData,
                'loadMoreData': this.literals.modalTableLoadMoreData
            };
        };
        return PoLookupModalBaseComponent;
    }());
    PoLookupModalBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoLookupModalBaseComponent.ctorParameters = function () { return [
        { type: PoLanguageService },
        { type: i0.ChangeDetectorRef }
    ]; };
    PoLookupModalBaseComponent.propDecorators = {
        poModal: [{ type: i0.ViewChild, args: [PoModalComponent, { static: true },] }],
        poTable: [{ type: i0.ViewChild, args: [PoTableComponent, { static: true },] }],
        advancedFilters: [{ type: i0.Input, args: ['p-advanced-filters',] }],
        columns: [{ type: i0.Input, args: ['p-columns',] }],
        items: [{ type: i0.Input, args: ['p-items',] }],
        filterService: [{ type: i0.Input, args: ['p-filter-service',] }],
        filterParams: [{ type: i0.Input, args: ['p-filter-params',] }],
        infiniteScroll: [{ type: i0.Input, args: ['p-infinite-scroll',] }],
        multiple: [{ type: i0.Input, args: ['p-multiple',] }],
        model: [{ type: i0.Output, args: ['p-change-model',] }],
        selectedItems: [{ type: i0.Input, args: ['p-selected-items',] }],
        fieldLabel: [{ type: i0.Input, args: ['p-field-label',] }],
        fieldValue: [{ type: i0.Input, args: ['p-field-value',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        title: [{ type: i0.Input, args: ['p-title',] }]
    };
    __decorate([
        InputBoolean()
    ], PoLookupModalBaseComponent.prototype, "infiniteScroll", void 0);
    __decorate([
        InputBoolean()
    ], PoLookupModalBaseComponent.prototype, "multiple", void 0);

    /**
     *
     * @description
     *
     * Componente para criação de formulários dinâmicos a partir de uma lista de objetos.
     *
     * Também é possível verificar se o formulário está válido e informar valores para a exibição de informações.
     */
    var PoDynamicFormBaseComponent = /** @class */ (function () {
        function PoDynamicFormBaseComponent() {
            /**
             * @optional
             *
             * @description
             *
             * Na inicialização do componente será repassado o objeto de formulário utilizado no componente,
             * podendo ser utilizado para validações e/ou detecção de mudança dos valores.
             *
             * Portanto existem duas maneiras de recuperar o formulário,
             * através de *template reference* e através do *output*, veja os exemplos abaixo:
             *
             * > *template reference*
             *
             * ```html
             *  <po-dynamic-form #dynamicForm>
             *  </po-dynamic-form>
             *
             *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.form.invalid">
             *  </po-button>
             *
             * ```
             *
             * > *Output*
             *
             * ```html
             *  ...
             *  <po-dynamic-form (p-form)="getForm($event)">
             *  </po-dynamic-form>
             *
             *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.invalid">
             *  </po-button>
             *  ...
             *
             * ```
             *
             * ```ts
             *  ...
             *
             *  export class AppComponent {
             *
             *    dynamicForm: NgForm;
             *
             *    getForm(form: NgForm) {
             *      this.dynamicForm = form;
             *    }
             *
             *  }
             * ```
             *
             * > Caso a propriedade `p-group-form` for verdadeira não será repassado o formulário, pois o mesmo utilizará
             * o formulário pai.
             */
            this.formOutput = new i0.EventEmitter();
            this._groupForm = false;
        }
        Object.defineProperty(PoDynamicFormBaseComponent.prototype, "groupForm", {
            get: function () {
                return this._groupForm;
            },
            /**
             * @optional
             *
             * @description
             * Ao informar esta propriedade, o componente passará a utilizar o formulário pai para criar os `FormControl`
             * e com isso é possível recuperar o valor do formulário e suas validações a partir do formulário pai.
             *
             * ```html
             * <form #parentForm="ngForm">
             *
             *   <po-dynamic-form p-group-form [p-fields]="fields"></po-dynamic-form>
             *
             *  <po-button p-label="Adicionar" [p-disabled]="parentForm.invalid"></po-button>
             * </form>
             * ```
             */
            set: function (value) {
                this._groupForm = value === '' ? true : convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        return PoDynamicFormBaseComponent;
    }());
    PoDynamicFormBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoDynamicFormBaseComponent.propDecorators = {
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        fields: [{ type: i0.Input, args: ['p-fields',] }],
        value: [{ type: i0.Input, args: ['p-value',] }],
        formOutput: [{ type: i0.Output, args: ['p-form',] }],
        load: [{ type: i0.Input, args: ['p-load',] }],
        validate: [{ type: i0.Input, args: ['p-validate',] }],
        validateFields: [{ type: i0.Input, args: ['p-validate-fields',] }],
        groupForm: [{ type: i0.Input, args: ['p-group-form',] }]
    };

    var PoDynamicFormOperation = /** @class */ (function () {
        function PoDynamicFormOperation(http) {
            this.http = http;
        }
        PoDynamicFormOperation.prototype.execute = function (action, param) {
            return typeof action === 'string' ? this.post(action, param) : rxjs.of(action(param));
        };
        PoDynamicFormOperation.prototype.post = function (url, body) {
            return this.http.post(url, body);
        };
        PoDynamicFormOperation.prototype.setFormDefaultIfEmpty = function (validateFields) {
            return (validateFields || {
                value: {},
                fields: [],
                focus: undefined
            });
        };
        return PoDynamicFormOperation;
    }());

    var PoDynamicFormLoadService = /** @class */ (function (_super) {
        __extends(PoDynamicFormLoadService, _super);
        function PoDynamicFormLoadService(http) {
            return _super.call(this, http) || this;
        }
        PoDynamicFormLoadService.prototype.createAndUpdateFieldsForm = function (loadedFields, fields) {
            if (loadedFields === void 0) { loadedFields = []; }
            if (fields === void 0) { fields = []; }
            return __spreadArray([], __read(loadedFields)).reduce(function (updatedFields, field) {
                var index = updatedFields.findIndex(function (updatedField) { return updatedField.property === field.property; });
                var hasProperty = index >= 0;
                if (hasProperty) {
                    updatedFields[index] = Object.assign(Object.assign({}, fields[index]), field);
                }
                else {
                    updatedFields.push(field);
                }
                return updatedFields;
            }, __spreadArray([], __read(fields)));
        };
        PoDynamicFormLoadService.prototype.executeLoad = function (load, value) {
            var _this = this;
            return this.execute(load, value).pipe(operators.map(function (loadedFormdData) { return _this.setFormDefaultIfEmpty(loadedFormdData); }));
        };
        return PoDynamicFormLoadService;
    }(PoDynamicFormOperation));
    PoDynamicFormLoadService.decorators = [
        { type: i0.Injectable }
    ];
    PoDynamicFormLoadService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    var PoDynamicFormValidationService = /** @class */ (function (_super) {
        __extends(PoDynamicFormValidationService, _super);
        function PoDynamicFormValidationService(http) {
            return _super.call(this, http) || this;
        }
        PoDynamicFormValidationService.prototype.sendFieldChange = function (field, value) {
            var _this = this;
            var changedValue = { property: field.property, value: value };
            return this.execute(field.validate, changedValue).pipe(operators.map(function (validateFields) { return _this.setFieldDefaultIfEmpty(validateFields); }));
        };
        PoDynamicFormValidationService.prototype.sendFormChange = function (validate, field, value) {
            var _this = this;
            var changedValue = { property: field.property, value: value };
            return this.execute(validate, changedValue).pipe(operators.map(function (validateFields) { return _this.setFormDefaultIfEmpty(validateFields); }));
        };
        PoDynamicFormValidationService.prototype.updateFieldsForm = function (validatedFields, fields) {
            if (validatedFields === void 0) { validatedFields = []; }
            if (fields === void 0) { fields = []; }
            return __spreadArray([], __read(validatedFields)).reduce(function (updatedFields, validatedField) {
                var index = updatedFields.findIndex(function (field) { return field.property === validatedField.property; });
                var hasProperty = index >= 0;
                if (hasProperty) {
                    updatedFields[index] = Object.assign(Object.assign({}, fields[index]), validatedField);
                }
                return updatedFields;
            }, __spreadArray([], __read(fields)));
        };
        PoDynamicFormValidationService.prototype.setFieldDefaultIfEmpty = function (validateFields) {
            return (validateFields || {
                field: {}
            });
        };
        return PoDynamicFormValidationService;
    }(PoDynamicFormOperation));
    PoDynamicFormValidationService.decorators = [
        { type: i0.Injectable }
    ];
    PoDynamicFormValidationService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    /**
     * @docsExtends PoDynamicFormBaseComponent
     *
     * @example
     *
     * <example name="po-dynamic-form-basic" title="PO Dynamic Form Basic">
     *  <file name="sample-po-dynamic-form-basic/sample-po-dynamic-form-basic.component.html"> </file>
     *  <file name="sample-po-dynamic-form-basic/sample-po-dynamic-form-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-dynamic-form-register" title="PO Dynamic Form - Register">
     *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.component.html"> </file>
     *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.component.ts"> </file>
     *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.service.ts"> </file>
     * </example>
     */
    var PoDynamicFormComponent = /** @class */ (function (_super) {
        __extends(PoDynamicFormComponent, _super);
        function PoDynamicFormComponent(changes, loadService, validationService) {
            var _this = _super.call(this) || this;
            _this.changes = changes;
            _this.loadService = loadService;
            _this.validationService = validationService;
            _this.comboOptionSubject = new rxjs.Subject();
            return _this;
        }
        Object.defineProperty(PoDynamicFormComponent.prototype, "form", {
            get: function () {
                return this._form || {};
            },
            set: function (value) {
                var _this = this;
                // necessario para nao ocorrer o ExpressionChangedAfterItHasBeenCheckedError
                setTimeout(function () {
                    _this._form = value;
                    _this.emitForm();
                });
            },
            enumerable: false,
            configurable: true
        });
        PoDynamicFormComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        PoDynamicFormComponent.prototype.ngOnInit = function () {
            if (this.load) {
                this.loadDataOnInitialize();
            }
        };
        /**
         * Função que atribui foco ao campo desejado.
         *
         * Para utilizá-la é necessário capturar a instância do `dynamic form`, como por exemplo:
         *
         * ``` html
         * <po-dynamic-form #dynamicForm [p-fields]="fields"></po-dynamic-form>
         * ```
         *
         * ``` javascript
         * import { PoDynamicFormComponent, PoDynamicFormField } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild('dynamicForm', { static: true }) dynamicForm: PoDynamicFormComponent;
         *
         * fields: Array<PoDynamicFormField> = [
         *   { property: 'fieldOne' },
         *   { property: 'fieldTwo' }
         * ];
         *
         * fieldFocus() {
         *   this.dynamicForm.focus('fieldTwo');
         * }
         * ```
         *
         * @param {string} property Nome da propriedade atribuída ao `PoDynamicFormField.property`.
         */
        PoDynamicFormComponent.prototype.focus = function (property) {
            this.fieldsComponent.focus(property);
        };
        PoDynamicFormComponent.prototype.getObjectValue = function () {
            return this.comboOptionSubject.asObservable();
        };
        PoDynamicFormComponent.prototype.sendObjectValue = function (objectValue) {
            this.comboOptionSubject.next(objectValue);
        };
        PoDynamicFormComponent.prototype.validateForm = function (field) {
            var _this = this;
            var previousFocusElement = document.activeElement;
            this.disableForm(true);
            var errorOnValidation = function () { return _this.disableForm(false); };
            this.sendFormSubscription = this.validationService
                .sendFormChange(this.validate, field, this.value)
                .subscribe(this.applyFormValidation(previousFocusElement), errorOnValidation);
        };
        PoDynamicFormComponent.prototype.applyFormUpdatesOnLoad = function (previousFocusElement) {
            var _this = this;
            return function (dynamicFormData) {
                _this.updateModelOnLoad(dynamicFormData);
                _this.disableForm(false);
                _this.setFocusOnFieldByProperty(dynamicFormData.focus, previousFocusElement);
            };
        };
        PoDynamicFormComponent.prototype.applyFormValidation = function (previousFocusElement) {
            var _this = this;
            return function (dynamicFormData) {
                _this.updateModelWithValidation(dynamicFormData);
                _this.disableForm(false);
                _this.setFocusOnFieldByProperty(dynamicFormData.focus, previousFocusElement);
            };
        };
        PoDynamicFormComponent.prototype.disableForm = function (value) {
            this.disabledForm = value;
            this.changes.detectChanges();
        };
        PoDynamicFormComponent.prototype.emitForm = function () {
            if (!this.groupForm && this.formOutput.observers.length) {
                this.formOutput.emit(this.form);
            }
        };
        PoDynamicFormComponent.prototype.loadDataOnInitialize = function () {
            var _this = this;
            var previousFocusElement = document.activeElement;
            this.disabledForm = true;
            var errorOnLoad = function () { return (_this.disabledForm = false); };
            this.onLoadSubscription = this.loadService
                .executeLoad(this.load, this.value)
                .subscribe(this.applyFormUpdatesOnLoad(previousFocusElement), errorOnLoad);
        };
        PoDynamicFormComponent.prototype.removeListeners = function () {
            if (this.onLoadSubscription) {
                this.onLoadSubscription.unsubscribe();
            }
            if (this.sendFormSubscription) {
                this.sendFormSubscription.unsubscribe();
            }
        };
        PoDynamicFormComponent.prototype.setFocusOnFieldByProperty = function (property, previousFocusElement) {
            var _this = this;
            if (property) {
                // precisa do timeout para que o valor seja atribuido no campo antes de setar o focus,
                // para nao disparar a mudança posteriormente. Situação ocorre quando retornar campo com valor e focus atribuido a ele.
                setTimeout(function () { return _this.focus(property); });
            }
            else {
                previousFocusElement['focus']();
            }
        };
        PoDynamicFormComponent.prototype.updateModelOnLoad = function (loadedFormData) {
            Object.assign(this.value, loadedFormData.value);
            this.fields = this.loadService.createAndUpdateFieldsForm(loadedFormData.fields, this.fields);
        };
        PoDynamicFormComponent.prototype.updateModelWithValidation = function (formData) {
            Object.assign(this.value, formData.value);
            this.fieldsComponent.updatePreviousValue();
            this.fields = this.validationService.updateFieldsForm(formData.fields, this.fields);
        };
        return PoDynamicFormComponent;
    }(PoDynamicFormBaseComponent));
    PoDynamicFormComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-dynamic-form',
                    template: "<ng-container *ngIf=\"groupForm; then reuseFormTemplate; else uniqueFormTemplate\"></ng-container>\r\n\r\n<ng-template #reuseFormTemplate>\r\n  <po-dynamic-form-fields #fieldsComponent [p-auto-focus]=\"autoFocus\" [p-fields]=\"fields\" [p-value]=\"value\">\r\n  </po-dynamic-form-fields>\r\n</ng-template>\r\n\r\n<ng-template #uniqueFormTemplate>\r\n  <form #dynamicForm=\"ngForm\">\r\n    <po-dynamic-form-fields\r\n      #fieldsComponent\r\n      [(p-fields)]=\"fields\"\r\n      [p-auto-focus]=\"autoFocus\"\r\n      [p-disabled-form]=\"disabledForm\"\r\n      [p-validate]=\"validate\"\r\n      [p-validate-fields]=\"validateFields\"\r\n      [p-value]=\"value\"\r\n      (p-object-value)=\"sendObjectValue($event)\"\r\n      (p-form-validate)=\"validateForm($event)\"\r\n    >\r\n    </po-dynamic-form-fields>\r\n  </form>\r\n</ng-template>\r\n"
                },] }
    ];
    PoDynamicFormComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: PoDynamicFormLoadService },
        { type: PoDynamicFormValidationService }
    ]; };
    PoDynamicFormComponent.propDecorators = {
        fieldsComponent: [{ type: i0.ViewChild, args: ['fieldsComponent',] }],
        form: [{ type: i0.ViewChild, args: ['dynamicForm',] }]
    };

    /**
     * @docsPrivate
     *
     * @docsExtends PoLookupModalBaseComponent
     */
    var PoLookupModalComponent = /** @class */ (function (_super) {
        __extends(PoLookupModalComponent, _super);
        function PoLookupModalComponent(componentFactory, poLanguage, changeDetector) {
            var _this = _super.call(this, poLanguage, changeDetector) || this;
            _this.componentFactory = componentFactory;
            _this.keyUpObservable = null;
            _this.containerHeight = 375;
            return _this;
        }
        PoLookupModalComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.setTableHeight();
        };
        PoLookupModalComponent.prototype.ngAfterViewInit = function () {
            this.initializeEventInput();
        };
        // Seleciona um item na tabela
        PoLookupModalComponent.prototype.onSelect = function (item) {
            if (this.multiple) {
                this.selecteds = __spreadArray(__spreadArray([], __read(this.selecteds)), [Object.assign({ value: item[this.fieldValue], label: item[this.fieldLabel] }, item)]);
            }
            else {
                this.selecteds = [Object.assign({ value: item[this.fieldValue], label: item[this.fieldLabel] }, item)];
            }
        };
        // Remove a seleção de um item na tabela
        PoLookupModalComponent.prototype.onUnselect = function (unselectedItem) {
            var _this = this;
            this.selecteds = this.selecteds.filter(function (itemSelected) { return itemSelected.value !== unselectedItem[_this.fieldValue]; });
        };
        PoLookupModalComponent.prototype.onUnselectFromDisclaimer = function (removedDisclaimer) {
            var _this = this;
            this.poTable.unselectRowItem(function (item) { return item[_this.fieldValue] === removedDisclaimer.value; });
        };
        // Seleciona todos os itens visíveis na tabela
        PoLookupModalComponent.prototype.onAllSelected = function (items) {
            var _this = this;
            this.selecteds = items.map(function (item) { return (Object.assign({ value: item[_this.fieldValue], label: item[_this.fieldLabel] }, item)); });
        };
        // Remove a seleção de todos os itens visíveis na tabela
        PoLookupModalComponent.prototype.onAllUnselected = function (items) {
            this.poTable.unselectRows();
            this.selecteds = [];
        };
        PoLookupModalComponent.prototype.initializeEventInput = function () {
            var _this = this;
            this.keyUpObservable = rxjs.fromEvent(this.inputSearchEl.nativeElement, 'keyup').pipe(operators.filter(function (e) { return _this.validateEnterPressed(e); }), operators.debounceTime(400));
            this.keyUpObservable.subscribe(function () {
                _this.search();
            });
        };
        PoLookupModalComponent.prototype.openModal = function () {
            this.poModal.open();
        };
        PoLookupModalComponent.prototype.sortBy = function (sort) {
            this.sort = sort;
        };
        PoLookupModalComponent.prototype.destroyDynamicForm = function () {
            if (this.componentRef) {
                this.componentRef.destroy();
            }
        };
        PoLookupModalComponent.prototype.onAdvancedFilter = function () {
            this.setupModalAdvancedFilter();
            this.createDynamicForm();
        };
        PoLookupModalComponent.prototype.setTableHeight = function () {
            var _a;
            if (this.multiple) {
                if (((_a = this.selecteds) === null || _a === void 0 ? void 0 : _a.length) !== 0) {
                    this.tableHeight = 300;
                }
                else {
                    this.tableHeight = 370;
                    this.containerHeight = 375;
                }
            }
            // precisa ser 315 por as linhas terem altura de 32px (quando tela menor que 1366px).
            // O retorno padrão é 10 itens fazendo com que gere scroll caso houver paginação, 370 não gerava.
            this.tableHeight = this.infiniteScroll ? 315 : 370;
            if (window.innerHeight < 615) {
                this.tableHeight -= 50;
                this.containerHeight -= 50;
            }
        };
        PoLookupModalComponent.prototype.validateEnterPressed = function (e) {
            return e.keyCode === 13;
        };
        PoLookupModalComponent.prototype.setupModalAdvancedFilter = function () {
            this.dynamicFormValue = {};
            this.isAdvancedFilter = true;
        };
        PoLookupModalComponent.prototype.createDynamicForm = function () {
            var _this = this;
            var component = this.componentFactory.resolveComponentFactory(PoDynamicFormComponent);
            this.componentRef = this.container.createComponent(component);
            this.componentRef.instance.fields = this.advancedFilters;
            this.componentRef.instance.value = this.dynamicFormValue;
            this.componentRef.instance.formOutput
                .pipe(operators.tap(function (form) {
                _this.dynamicForm = form;
                _this.primaryActionAdvancedFilter.disabled = _this.dynamicForm.invalid;
            }), operators.switchMap(function (form) { return form.valueChanges; }))
                .subscribe(function () {
                _this.primaryActionAdvancedFilter.disabled = _this.dynamicForm.invalid;
            });
        };
        return PoLookupModalComponent;
    }(PoLookupModalBaseComponent));
    PoLookupModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-lookup-modal',
                    template: "<po-modal\r\n  p-click-out=\"false\"\r\n  p-hide-close=\"false\"\r\n  p-size=\"lg\"\r\n  [p-primary-action]=\"isAdvancedFilter ? primaryActionAdvancedFilter : primaryAction\"\r\n  [p-secondary-action]=\"isAdvancedFilter ? secondaryActionAdvancedFilter : secondaryAction\"\r\n  [p-title]=\"isAdvancedFilter ? advancedFilterModalTitle : title\"\r\n>\r\n  <div [hidden]=\"isAdvancedFilter\">\r\n    <po-field-container class=\"po-lookup-header po-pull-right\" [p-optional]=\"false\">\r\n      <div class=\"po-lookup-filter-content\">\r\n        <div class=\"po-field-icon-container-right\">\r\n          <span #iconLookup class=\"po-icon po-field-icon po-icon-search\" (click)=\"search()\"> </span>\r\n        </div>\r\n\r\n        <input\r\n          #inpsearch\r\n          class=\"po-input po-input-icon-right\"\r\n          name=\"contentSearch\"\r\n          [(ngModel)]=\"searchValue\"\r\n          [placeholder]=\"literals.modalPlaceholder\"\r\n          type=\"text\"\r\n        />\r\n      </div>\r\n\r\n      <div *ngIf=\"advancedFilters && advancedFilters.length > 0\" class=\"po-lookup-advanced-search\">\r\n        <span\r\n          class=\"po-lookup-advanced-search-link\"\r\n          tabindex=\"0\"\r\n          (click)=\"onAdvancedFilter()\"\r\n          (keydown.enter)=\"onAdvancedFilter()\"\r\n          tabindex=\"0\"\r\n        >\r\n          {{ literals.modalAdvancedSearch }}\r\n        </span>\r\n      </div>\r\n    </po-field-container>\r\n\r\n    <!-- DISCLAIMER -->\r\n    <po-disclaimer-group\r\n      *ngIf=\"!!disclaimerGroup\"\r\n      class=\"po-md-12\"\r\n      [p-disclaimers]=\"disclaimerGroup?.disclaimers\"\r\n      [p-title]=\"disclaimerGroup?.title\"\r\n      (p-change)=\"onChangeDisclaimerGroup()\"\r\n    >\r\n    </po-disclaimer-group>\r\n\r\n    <div class=\"po-row po-lookup-container-table\" [style.height.px]=\"containerHeight\">\r\n      <po-table\r\n        #poTable\r\n        class=\"po-md-12\"\r\n        [p-selectable]=\"true\"\r\n        [p-hide-detail]=\"true\"\r\n        [p-single-select]=\"!multiple\"\r\n        [p-sort]=\"true\"\r\n        [p-columns]=\"columns\"\r\n        [p-height]=\"tableHeight\"\r\n        [p-items]=\"items\"\r\n        [p-literals]=\"tableLiterals\"\r\n        [p-loading]=\"isLoading\"\r\n        [p-show-more-disabled]=\"!hasNext\"\r\n        [p-infinite-scroll]=\"infiniteScroll\"\r\n        (p-selected)=\"onSelect($event)\"\r\n        (p-unselected)=\"onUnselect($event)\"\r\n        (p-all-selected)=\"onAllSelected($event)\"\r\n        (p-all-unselected)=\"onAllUnselected($event)\"\r\n        (p-show-more)=\"showMoreEvent()\"\r\n        (p-sort-by)=\"sortBy($event)\"\r\n      >\r\n      </po-table>\r\n    </div>\r\n\r\n    <!-- DISCLAIMER -->\r\n    <po-disclaimer-group\r\n      *ngIf=\"multiple\"\r\n      class=\"po-md-12\"\r\n      [p-disclaimers]=\"selecteds\"\r\n      (p-remove)=\"onUnselectFromDisclaimer($event.removedDisclaimer)\"\r\n      (p-remove-all)=\"onAllUnselected($event)\"\r\n    >\r\n    </po-disclaimer-group>\r\n  </div>\r\n  <div [hidden]=\"!isAdvancedFilter\">\r\n    <ng-container #container> </ng-container>\r\n  </div>\r\n</po-modal>\r\n"
                },] }
    ];
    PoLookupModalComponent.ctorParameters = function () { return [
        { type: i0.ComponentFactoryResolver },
        { type: PoLanguageService },
        { type: i0.ChangeDetectorRef }
    ]; };
    PoLookupModalComponent.propDecorators = {
        poTable: [{ type: i0.ViewChild, args: [PoTableComponent, { static: true },] }],
        inputSearchEl: [{ type: i0.ViewChild, args: ['inpsearch',] }],
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef },] }]
    };

    /**
     * @docsPrivate
     *
     * Serviço responsável por controlar a abertura do componente Po Lookup Modal.
     */
    var PoLookupModalService = /** @class */ (function () {
        function PoLookupModalService(poComponentInjector) {
            this.poComponentInjector = poComponentInjector;
            this.selectValueEvent = new i0.EventEmitter();
            this.componentRef = null;
        }
        /**
         * Método responsável por abrir a modal de busca das informações.
         *
         * @param advancedFilters {Array<PoDynamicFormField>} Objeto utilizado para criar o busca avançada.
         * @param service {PoLookupFilter} Serviço responsável por realizar a busca no serviço dos dados.
         * @param columns {Array<PoLookupColumn>} Definição das colunas na modal de busca.
         * @param filterParams {any} Valor que será repassado aos métodos do serviço para auxiliar no filtro dos dados.
         * @param title {string} Definição do título da modal.
         * @param literals {PoLookupLiterals} Literais utilizadas no componente.
         * @param selectedItems {any} Valor que está selecionado que será repassado para o modal para apresentar na tabela.
         * @param fieldLabel {string} Valor que será utilizado como descrição do campo.
         * @param fieldValue {string} Valor que será utilizado como valor do campo.
         */
        PoLookupModalService.prototype.openModal = function (params) {
            var _this = this;
            var advancedFilters = params.advancedFilters, service = params.service, columns = params.columns, filterParams = params.filterParams, title = params.title, literals = params.literals, infiniteScroll = params.infiniteScroll, multiple = params.multiple, selectedItems = params.selectedItems, fieldLabel = params.fieldLabel, fieldValue = params.fieldValue;
            this.componentRef = this.poComponentInjector.createComponentInApplication(PoLookupModalComponent);
            this.componentRef.instance.advancedFilters = advancedFilters;
            this.componentRef.instance.title = title;
            this.componentRef.instance.columns = columns;
            this.componentRef.instance.filterService = service;
            this.componentRef.instance.filterParams = filterParams;
            this.componentRef.instance.literals = literals;
            this.componentRef.instance.model.subscribe(function ($event) {
                _this.selectValue($event);
            });
            this.componentRef.instance.infiniteScroll = infiniteScroll;
            this.componentRef.instance.multiple = multiple;
            this.componentRef.instance.selectedItems = selectedItems;
            this.componentRef.instance.fieldLabel = fieldLabel;
            this.componentRef.instance.fieldValue = fieldValue;
            this.componentRef.changeDetectorRef.detectChanges();
            this.componentRef.instance.openModal();
        };
        // Este metodo é chamado quando é selecionado um item na lookup modal.
        PoLookupModalService.prototype.selectValue = function (value) {
            if (value) {
                this.selectValueEvent.emit(value);
            }
            this.componentRef.destroy();
        };
        return PoLookupModalService;
    }());
    PoLookupModalService.decorators = [
        { type: i0.Injectable }
    ];
    PoLookupModalService.ctorParameters = function () { return [
        { type: PoComponentInjectorService }
    ]; };

    /* istanbul ignore next */
    var providers$2 = [
        PoLookupFilterService,
        PoLookupModalService,
        {
            provide: forms.NG_VALUE_ACCESSOR,
            // eslint-disable-next-line
            useExisting: i0.forwardRef(function () { return PoLookupComponent; }),
            multi: true
        },
        {
            provide: forms.NG_VALIDATORS,
            // eslint-disable-next-line
            useExisting: i0.forwardRef(function () { return PoLookupComponent; }),
            multi: true
        },
        {
            provide: forms.NgControl,
            useExisting: i0.forwardRef(function () { return PoLookupComponent; }),
            multi: false
        }
    ];
    /**
     * @docsExtends PoLookupBaseComponent
     *
     * @description
     *
     * Quando existe muitos dados o po-lookup por padrão traz apenas 10 itens na tabela e os demais são carregados por demanda através do
     * botão 'Carregar mais resultados'. Para que funcione corretamente, é importante que o serviço siga o
     * [Guia de implementação das APIs TOTVS](https://po-ui.io/guides/api).
     *
     * Importante:
     *
     * - Caso o po-lookup contenha o [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
     * Então será necessário informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
     * ```
     * <po-lookup
     *   [(ngModel)]="pessoa.nome"
     *   [ngModelOptions]="{standalone: true}">
     * </po-lookup>
     * ```
     *
     * @example
     *
     * <example name="po-lookup-basic" title="PO Lookup Basic">
     *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.html"> </file>
     *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-lookup-labs" title="PO Lookup Labs">
     *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.html"> </file>
     *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.ts"> </file>
     *  <file name="sample-po-lookup.service.ts"> </file>
     * </example>
     *
     * <example name="po-lookup-hero" title="PO Lookup - Hero">
     *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.html"> </file>
     *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.ts"> </file>
     *  <file name="sample-po-lookup.service.ts"> </file>
     * </example>
     *
     * <example name="po-lookup-hero-reactive-form" title="PO Lookup - Hero Reactive Form">
     *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.html"> </file>
     *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.ts"> </file>
     *  <file name="sample-po-lookup.service.ts"> </file>
     * </example>
     *
     * <example name="po-lookup-sw-films" title="PO Lookup - Star Wars films">
     *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.html"> </file>
     *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.ts"> </file>
     *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.service.ts"> </file>
     * </example>
     *
     * <example name="po-lookup-multiple" title="PO Lookup - Multiple">
     *  <file name="sample-po-lookup-multiple/sample-po-lookup-multiple.component.html"> </file>
     *  <file name="sample-po-lookup-multiple/sample-po-lookup-multiple.component.ts"> </file>
     *  <file name="sample-po-lookup-multiple/sample-po-lookup-multiple.service.ts"> </file>
     * </example>
     */
    var PoLookupComponent = /** @class */ (function (_super) {
        __extends(PoLookupComponent, _super);
        function PoLookupComponent(renderer, poLookupFilterService, poLookupModalService, injector) {
            var _this = _super.call(this, poLookupFilterService, injector) || this;
            _this.renderer = renderer;
            _this.poLookupModalService = poLookupModalService;
            _this.initialized = false;
            _this.visibleElement = false;
            _this.disclaimers = [];
            _this.visibleDisclaimers = [];
            _this.isCalculateVisibleItems = true;
            return _this;
        }
        Object.defineProperty(PoLookupComponent.prototype, "autocomplete", {
            get: function () {
                return this.noAutocomplete ? 'off' : 'on';
            },
            enumerable: false,
            configurable: true
        });
        PoLookupComponent.prototype.ngAfterViewInit = function () {
            _super.prototype.ngAfterViewInit.call(this);
            if (this.autoFocus) {
                this.focus();
            }
            this.initialized = true;
        };
        PoLookupComponent.prototype.ngDoCheck = function () {
            var _a;
            var inputWidth = (_a = this.inputEl) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth;
            // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
            // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
            if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
                this.debounceResize();
                this.visibleElement = true;
            }
        };
        PoLookupComponent.prototype.ngOnDestroy = function () {
            if (this.modalSubscription) {
                this.modalSubscription.unsubscribe();
            }
        };
        PoLookupComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.initializeListeners();
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoLookupComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoLookupComponent, { static: true }) lookup: PoLookupComponent;
         *
         * focusLookup() {
         *   this.lookup.focus();
         * }
         * ```
         */
        PoLookupComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.inputEl.nativeElement.focus();
            }
        };
        PoLookupComponent.prototype.openLookup = function () {
            var _this = this;
            if (this.isAllowedOpenModal()) {
                var _c = this, advancedFilters = _c.advancedFilters, service = _c.service, columns = _c.columns, filterParams = _c.filterParams, literals = _c.literals, infiniteScroll = _c.infiniteScroll, multiple = _c.multiple, fieldLabel = _c.fieldLabel, fieldValue = _c.fieldValue;
                var selectedItems = this.checkSelectedItems();
                this.poLookupModalService.openModal({
                    advancedFilters: advancedFilters,
                    service: service,
                    columns: columns,
                    filterParams: filterParams,
                    title: this.label,
                    literals: literals,
                    infiniteScroll: infiniteScroll,
                    multiple: multiple,
                    selectedItems: selectedItems,
                    fieldLabel: fieldLabel,
                    fieldValue: fieldValue
                });
                if (!this.modalSubscription) {
                    this.modalSubscription = this.poLookupModalService.selectValueEvent.subscribe(function (selectedOptions) {
                        if (selectedOptions.length > 1 || _this.disclaimers.length) {
                            _this.setDisclaimers(selectedOptions);
                            _this.updateVisibleItems();
                        }
                        _this.selectModel(selectedOptions);
                    });
                }
            }
        };
        PoLookupComponent.prototype.checkSelectedItems = function () {
            var _a;
            if (this.multiple) {
                if (!this.disclaimers.length && ((_a = this.valueToModel) === null || _a === void 0 ? void 0 : _a.length)) {
                    return [Object.assign({ value: this.valueToModel[0], label: this.oldValue }, this.selectedOptions[0])];
                }
                return this.disclaimers;
            }
            else {
                return this.valueToModel;
            }
        };
        PoLookupComponent.prototype.setDisclaimers = function (selectedOptions) {
            var _this = this;
            this.disclaimers = selectedOptions.map(function (selectedOption) { return (Object.assign({ value: selectedOption[_this.fieldValue], label: selectedOption[_this.fieldLabel] }, selectedOption)); });
            this.visibleDisclaimers = __spreadArray([], __read(this.disclaimers));
        };
        PoLookupComponent.prototype.setViewValue = function (value, object) {
            if (this.inputEl && this.fieldFormat) {
                this.setInputValueWipoieldFormat(object);
            }
            else if (this.inputEl) {
                this.inputEl.nativeElement.value = this.valueToModel || this.valueToModel === 0 ? value : '';
            }
        };
        PoLookupComponent.prototype.getViewValue = function () {
            return this.inputEl.nativeElement.value;
        };
        PoLookupComponent.prototype.searchEvent = function () {
            var _a, _b;
            (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
            var value = this.getViewValue();
            if (((_b = this.oldValue) === null || _b === void 0 ? void 0 : _b.toString()) !== value) {
                this.searchById(value);
            }
        };
        PoLookupComponent.prototype.closeDisclaimer = function (value) {
            this.disclaimers = this.disclaimers.filter(function (disclaimer) { return disclaimer.value !== value; });
            this.valueToModel = this.valueToModel.filter(function (model) { return model !== value; });
            this.updateVisibleItems();
            this.callOnChange(this.valueToModel.length ? this.valueToModel : undefined);
        };
        PoLookupComponent.prototype.updateVisibleItems = function () {
            if (this.disclaimers && this.disclaimers.length > 0) {
                this.visibleDisclaimers = [].concat(this.disclaimers);
            }
            this.debounceResize();
            if (!this.inputEl.nativeElement.offsetWidth) {
                this.isCalculateVisibleItems = true;
            }
        };
        PoLookupComponent.prototype.debounceResize = function () {
            var _this = this;
            if (!this.autoHeight) {
                clearTimeout(this.timeoutResize);
                this.timeoutResize = setTimeout(function () {
                    _this.calculateVisibleItems();
                }, 200);
            }
        };
        PoLookupComponent.prototype.getInputWidth = function () {
            return this.inputEl.nativeElement.offsetWidth - 40;
        };
        PoLookupComponent.prototype.getDisclaimersWidth = function () {
            var disclaimers = this.inputEl.nativeElement.querySelectorAll('po-disclaimer');
            return Array.from(disclaimers).map(function (disclaimer) { return disclaimer['offsetWidth']; });
        };
        PoLookupComponent.prototype.calculateVisibleItems = function () {
            var disclaimersWidth = this.getDisclaimersWidth();
            var inputWidth = this.getInputWidth();
            var extraDisclaimerSize = 38;
            var disclaimersVisible = disclaimersWidth[0];
            var newDisclaimers = [];
            var disclaimers = this.disclaimers;
            if (inputWidth > 0) {
                var sum = 0;
                var i = 0;
                for (i = 0; i < disclaimers.length; i++) {
                    sum += disclaimersWidth[i];
                    newDisclaimers.push(disclaimers[i]);
                    if (sum > inputWidth) {
                        sum -= disclaimersWidth[i];
                        this.isCalculateVisibleItems = false;
                        break;
                    }
                }
                if (disclaimersVisible || !disclaimers.length) {
                    if (i === disclaimers.length) {
                        this.isCalculateVisibleItems = false;
                        return;
                    }
                    if (sum + extraDisclaimerSize > inputWidth) {
                        newDisclaimers.splice(-2, 2);
                        var label = '+' + (disclaimers.length + 1 - i).toString();
                        newDisclaimers.push({ value: '', label: label });
                    }
                    else {
                        newDisclaimers.splice(-1, 1);
                        var label = '+' + (disclaimers.length - i).toString();
                        newDisclaimers.push({ value: '', label: label });
                    }
                }
            }
            this.visibleDisclaimers = __spreadArray([], __read(newDisclaimers));
        };
        PoLookupComponent.prototype.isAllowedOpenModal = function () {
            if (!this.service) {
                console.warn('No service informed');
            }
            return !!(this.service && !this.disabled);
        };
        PoLookupComponent.prototype.formatFields = function (objectSelected, properties) {
            var e_1, _c;
            var formatedField;
            if (Array.isArray(properties)) {
                try {
                    for (var properties_1 = __values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {
                        var property = properties_1_1.value;
                        if (objectSelected && objectSelected[property]) {
                            if (!formatedField) {
                                formatedField = objectSelected[property];
                            }
                            else {
                                formatedField = formatedField + ' - ' + objectSelected[property];
                            }
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (properties_1_1 && !properties_1_1.done && (_c = properties_1.return)) _c.call(properties_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            if (!formatedField) {
                formatedField = objectSelected[this.fieldValue];
            }
            return formatedField;
        };
        PoLookupComponent.prototype.setInputValueWipoieldFormat = function (objectSelected) {
            var isEmpty = Object.keys(objectSelected).length === 0;
            var fieldFormated;
            if (Array.isArray(this.fieldFormat)) {
                fieldFormated = this.formatFields(objectSelected, this.fieldFormat);
            }
            else {
                fieldFormated = this.fieldFormat(objectSelected);
            }
            this.oldValue = isEmpty ? '' : fieldFormated;
            this.inputEl.nativeElement.value = isEmpty ? '' : fieldFormated;
        };
        PoLookupComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function () {
                _this.updateVisibleItems();
            });
        };
        return PoLookupComponent;
    }(PoLookupBaseComponent));
    PoLookupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-lookup',
                    template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content\" *ngIf=\"!disclaimers.length; else disclaimersTemplate\">\r\n    <input\r\n      #inp\r\n      class=\"po-input\"\r\n      type=\"text\"\r\n      [ngClass]=\"clean && inp.value ? 'po-input-double-icon-right' : 'po-input-icon-right'\"\r\n      [autocomplete]=\"autocomplete\"\r\n      [disabled]=\"disabled\"\r\n      [placeholder]=\"placeholder\"\r\n      [required]=\"required\"\r\n      (blur)=\"searchEvent()\"\r\n    />\r\n\r\n    <div class=\"po-field-icon-container-right\">\r\n      <po-clean *ngIf=\"clean && !disabled\" [p-element-ref]=\"inputEl\" (p-change-event)=\"cleanModel()\"> </po-clean>\r\n\r\n      <span\r\n        #iconLookup\r\n        class=\"po-icon po-field-icon po-icon-search\"\r\n        tabindex=\"-1\"\r\n        [class.po-field-icon]=\"!disabled\"\r\n        [class.po-field-icon-disabled]=\"disabled\"\r\n        (click)=\"openLookup()\"\r\n        (focus)=\"inp.focus()\"\r\n      >\r\n      </span>\r\n    </div>\r\n  </div>\r\n  <po-field-container-bottom></po-field-container-bottom>\r\n</po-field-container>\r\n\r\n<ng-template #disclaimersTemplate>\r\n  <div class=\"po-field-container-content\">\r\n    <div\r\n      #inp\r\n      [tabindex]=\"disabled ? -1 : 0\"\r\n      class=\"po-input po-input-icon-right po-lookup-input\"\r\n      [class.po-lookup-input-auto]=\"autoHeight\"\r\n      [class.po-lookup-input-static]=\"!autoHeight\"\r\n      [class.po-lookup-input-disabled]=\"disabled\"\r\n    >\r\n      <span *ngIf=\"placeholder && !disclaimers?.length\" class=\"po-lookup-input-placeholder\">\r\n        {{ placeholder }}\r\n      </span>\r\n\r\n      <po-disclaimer\r\n        *ngFor=\"let disclaimer of visibleDisclaimers\"\r\n        class=\"po-lookup-input-disclaimer\"\r\n        [p-label]=\"disclaimer.label\"\r\n        [p-value]=\"disclaimer.value\"\r\n        [p-hide-close]=\"disclaimer.value === '' || disabled\"\r\n        [class.po-clickable]=\"disclaimer.value === '' && !disabled\"\r\n        (p-close-action)=\"closeDisclaimer(disclaimer.value)\"\r\n      >\r\n      </po-disclaimer>\r\n    </div>\r\n\r\n    <div class=\"po-field-icon-container-right\">\r\n      <span\r\n        #iconLookup\r\n        class=\"po-icon po-field-icon po-icon-search\"\r\n        tabindex=\"-1\"\r\n        [class.po-field-icon]=\"!disabled\"\r\n        [class.po-field-icon-disabled]=\"disabled\"\r\n        (click)=\"openLookup()\"\r\n        (focus)=\"inp.focus()\"\r\n      >\r\n      </span>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n",
                    providers: providers$2
                },] }
    ];
    PoLookupComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: PoLookupFilterService },
        { type: PoLookupModalService },
        { type: i0.Injector }
    ]; };
    PoLookupComponent.propDecorators = {
        inputEl: [{ type: i0.ViewChild, args: ['inp', { read: i0.ElementRef, static: false },] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
     */
    var PoMultiselectDropdownComponent = /** @class */ (function () {
        function PoMultiselectDropdownComponent() {
            /** Propriedade que indica se deve exibir o loading. */
            this.isServerSearching = false;
            /** Propriedade que indica se o campo de pesquisa deverá ser escondido. */
            this.hideSearch = false;
            /** Propriedade que recebe a lista de opções selecionadas. */
            this.selectedOptions = [];
            /** Propriedade que recebe a lista com todas as opções. */
            this.options = [];
            /** Propriedade que recebe a lista de opções que deverão ser criadas no dropdown. */
            this.visibleOptions = [];
            /** Propriedade que indica se o campo "Selecionar todos" deverá ser escondido. */
            this.hideSelectAll = false;
            /** Evento disparado a cada tecla digitada na pesquisa. */
            this.changeSearch = new i0.EventEmitter();
            /** Evento disparado a cada alteração na lista das opções selecionadas. */
            this.change = new i0.EventEmitter();
            /**
             * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
             * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
             * para notificar o componente principal que deve fechar o dropdown.
             */
            this.closeDropdown = new i0.EventEmitter();
            this.scrollTop = 0;
            this.show = false;
        }
        Object.defineProperty(PoMultiselectDropdownComponent.prototype, "hasOptions", {
            get: function () {
                var _a;
                return !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.length);
            },
            enumerable: false,
            configurable: true
        });
        PoMultiselectDropdownComponent.prototype.onKeydown = function (event) {
            if (event.keyCode === 9) {
                this.closeDropdown.emit();
            }
        };
        PoMultiselectDropdownComponent.prototype.scrollTo = function (index) {
            this.scrollTop = index <= 2 ? 0 : index * 44 - 88;
        };
        PoMultiselectDropdownComponent.prototype.isSelectedItem = function (option) {
            return this.selectedOptions.some(function (selectedItem) { return selectedItem.value === option.value; });
        };
        PoMultiselectDropdownComponent.prototype.clickItem = function (check, option) {
            this.updateSelectedValues(check, option);
            if (!this.hideSearch) {
                this.searchElement.setFocus();
            }
        };
        PoMultiselectDropdownComponent.prototype.onClickSelectAll = function () {
            var selectedValues = this.selectedOptions.map(function (_b) {
                var value = _b.value;
                return value;
            });
            if (this.everyVisibleOptionsSelected(selectedValues)) {
                this.selectedOptions = [];
            }
            else {
                this.selectedOptions = this.uniqueSelectedOptions(selectedValues);
            }
            this.change.emit(this.selectedOptions);
        };
        PoMultiselectDropdownComponent.prototype.updateSelectedValues = function (checked, option) {
            if (checked) {
                this.selectedOptions.push(option);
            }
            else {
                this.selectedOptions = this.selectedOptions.filter(function (selectedOption) { return selectedOption.value !== option.value; });
            }
            this.change.emit(this.selectedOptions);
        };
        PoMultiselectDropdownComponent.prototype.everyVisibleOptionsSelected = function (selectedValues) {
            return this.visibleOptions.every(function (visibleOption) { return selectedValues.includes(visibleOption.value); });
        };
        PoMultiselectDropdownComponent.prototype.someVisibleOptionsSelected = function (selectedValues) {
            return this.visibleOptions.some(function (visibleOption) { return selectedValues.includes(visibleOption.value); });
        };
        PoMultiselectDropdownComponent.prototype.getStateSelectAll = function () {
            var selectedValues = this.selectedOptions.map(function (_b) {
                var value = _b.value;
                return value;
            });
            if (this.everyVisibleOptionsSelected(selectedValues)) {
                return true;
            }
            else if (this.someVisibleOptionsSelected(selectedValues)) {
                return null;
            }
            else {
                return false;
            }
        };
        PoMultiselectDropdownComponent.prototype.callChangeSearch = function (event) {
            this.changeSearch.emit(event);
        };
        PoMultiselectDropdownComponent.prototype.controlVisibility = function (toOpen) {
            var _this = this;
            this.show = toOpen;
            setTimeout(function () {
                if (toOpen && _this.searchElement && !_this.hideSearch) {
                    _this.searchElement.setFocus();
                    _this.searchElement.clean();
                }
            });
        };
        PoMultiselectDropdownComponent.prototype.uniqueSelectedOptions = function (selectedValues) {
            var e_1, _b;
            var newSelectedOptions = __spreadArray([], __read(this.selectedOptions));
            try {
                for (var _c = __values(this.visibleOptions), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var visibleOption = _d.value;
                    if (!selectedValues.includes(visibleOption.value)) {
                        newSelectedOptions.push(visibleOption);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return newSelectedOptions;
        };
        return PoMultiselectDropdownComponent;
    }());
    PoMultiselectDropdownComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-multiselect-dropdown',
                    template: "<div #container class=\"po-multiselect-container\" [hidden]=\"!show\">\r\n  <po-multiselect-search\r\n    #searchElement\r\n    *ngIf=\"!hideSearch\"\r\n    [p-literals]=\"literals\"\r\n    [p-placeholder]=\"placeholderSearch\"\r\n    (p-change)=\"callChangeSearch($event)\"\r\n  >\r\n  </po-multiselect-search>\r\n\r\n  <ul class=\"po-multiselect-items-container\" [scrollTop]=\"scrollTop\" #ulElement>\r\n    <div *ngIf=\"!visibleOptions.length && !isServerSearching\" class=\"po-multiselect-container-no-data po-text-center\">\r\n      <span> {{ literals.noData }}</span>\r\n    </div>\r\n\r\n    <div *ngIf=\"isServerSearching\" class=\"po-multiselect-container-loading po-text-center\">\r\n      <po-loading></po-loading>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"!isServerSearching\">\r\n      <po-multiselect-item\r\n        *ngIf=\"!searchElement?.inputValue && visibleOptions.length && !hideSelectAll\"\r\n        [p-label]=\"literals?.selectAll\"\r\n        [p-selected]=\"getStateSelectAll()\"\r\n        (p-change)=\"onClickSelectAll()\"\r\n      >\r\n      </po-multiselect-item>\r\n\r\n      <po-multiselect-item\r\n        *ngFor=\"let option of visibleOptions\"\r\n        [p-label]=\"option.label\"\r\n        [p-selected]=\"isSelectedItem(option)\"\r\n        (p-change)=\"clickItem($event, option)\"\r\n      >\r\n      </po-multiselect-item>\r\n    </ng-container>\r\n  </ul>\r\n</div>\r\n"
                },] }
    ];
    PoMultiselectDropdownComponent.propDecorators = {
        isServerSearching: [{ type: i0.Input, args: ['p-searching',] }],
        hideSearch: [{ type: i0.Input, args: ['p-hide-search',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        placeholderSearch: [{ type: i0.Input, args: ['p-placeholder-search',] }],
        selectedOptions: [{ type: i0.Input, args: ['p-selected-options',] }],
        options: [{ type: i0.Input, args: ['p-options',] }],
        visibleOptions: [{ type: i0.Input, args: ['p-visible-options',] }],
        hideSelectAll: [{ type: i0.Input, args: ['p-hide-select-all',] }],
        changeSearch: [{ type: i0.Output, args: ['p-change-search',] }],
        change: [{ type: i0.Output, args: ['p-change',] }],
        closeDropdown: [{ type: i0.Output, args: ['p-close-dropdown',] }],
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ElementRef, static: true },] }],
        ulElement: [{ type: i0.ViewChild, args: ['ulElement', { read: i0.ElementRef, static: true },] }],
        searchElement: [{ type: i0.ViewChild, args: ['searchElement',] }],
        onKeydown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }]
    };

    /**
     * @usedBy PoMultiselectComponent
     *
     * @description
     *
     * Define o tipo de busca usado no po-multiselect.
     */
    exports.PoMultiselectFilterMode = void 0;
    (function (PoMultiselectFilterMode) {
        /** Verifica se o texto *inicia* com o valor pesquisado. */
        PoMultiselectFilterMode[PoMultiselectFilterMode["startsWith"] = 0] = "startsWith";
        /** Verifica se o texto *contém* o valor pesquisado. */
        PoMultiselectFilterMode[PoMultiselectFilterMode["contains"] = 1] = "contains";
        /** Verifica se o texto *finaliza* com o valor pesquisado. */
        PoMultiselectFilterMode[PoMultiselectFilterMode["endsWith"] = 2] = "endsWith";
    })(exports.PoMultiselectFilterMode || (exports.PoMultiselectFilterMode = {}));

    var PO_MULTISELECT_DEBOUNCE_TIME_DEFAULT = 400;
    var PO_MULTISELECT_FIELD_LABEL_DEFAULT = 'label';
    var PO_MULTISELECT_FIELD_VALUE_DEFAULT = 'value';
    var poMultiselectLiteralsDefault = {
        en: {
            noData: 'No data found',
            placeholderSearch: 'Search',
            selectAll: 'Select all'
        },
        es: {
            noData: 'Datos no encontrados',
            placeholderSearch: 'Busca',
            selectAll: 'Seleccionar todo'
        },
        pt: {
            noData: 'Nenhum dado encontrado',
            placeholderSearch: 'Buscar',
            selectAll: 'Selecionar todos'
        },
        ru: {
            noData: 'Данные не найдены',
            placeholderSearch: 'искать',
            selectAll: 'Выбрать все'
        }
    };
    /**
     * @description
     *
     * O po-multiselect é um componente de múltipla seleção.
     * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.
     *
     * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do po-checkbox-group, por ser mais simples
     * e mais rápido para a seleção do usuário.
     *
     * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o
     * po-select, po-combo ou po-radio-group.
     *
     * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.
     */
    var PoMultiselectBaseComponent = /** @class */ (function () {
        function PoMultiselectBaseComponent(languageService) {
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /** Mensagem apresentada enquanto o campo estiver vazio. */
            this.placeholder = '';
            /**
             * @description
             *
             * Placeholder do campo de pesquisa.
             *
             * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
             *
             * @default `Buscar`
             */
            this.placeholderSearch = '';
            /**
             * @optional
             *
             * @description
             *
             * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
             */
            this.change = new i0.EventEmitter();
            this.selectedOptions = [];
            this.visibleOptionsDropdown = [];
            this.visibleDisclaimers = [];
            this.isServerSearching = false;
            this.isFirstFilter = true;
            this.filterSubject = new rxjs.Subject();
            // eslint-disable-next-line
            this.onModelTouched = null;
            this._debounceTime = 400;
            this._disabled = false;
            this._filterMode = exports.PoMultiselectFilterMode.startsWith;
            this._hideSearch = false;
            this._required = false;
            this._sort = false;
            this._autoHeight = false;
            this._fieldLabel = PO_MULTISELECT_FIELD_LABEL_DEFAULT;
            this._fieldValue = PO_MULTISELECT_FIELD_VALUE_DEFAULT;
            this.language = languageService.getShortLanguage();
        }
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "filterService", {
            get: function () {
                return this._filterService;
            },
            /**
             * @optional
             *
             * @description
             * Nesta propriedade pode ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de itens no componente.
             *
             *Também existe a possibilidade de informar um serviço implementando a interface `PoMultiselectFilter`.
             *
             *Caso utilizado uma URL, o serviço deve ser retornado no padrão [API PO UI](https://po-ui.io/guides/api) e utilizar as propriedades `p-field-label` e `p-field-value` para a construção da lista de itens.
             *
             *Quando utilizada uma URL de serviço, então será concatenada nesta URL o valor que deseja-se filtrar da seguinte forma:
             *
             *```
             * // caso filtrar por "Peter"
             *  https://localhost:8080/api/heroes?filter=Peter
             *```
             *
             *E caso iniciar o campo com valor, os itens serão buscados da seguinte forma:
             *
             *```
             * // caso o valor do campo for [1234, 5678];
             *  https://localhost:8080/api/heroes?value=1234,5678
             *
             * //O *value* é referente ao `fieldValue`.
             *```
             *
             */
            set: function (value) {
                if (value) {
                    this._filterService = value;
                    this.autoHeight = this.autoHeightInitialValue !== undefined ? this.autoHeightInitialValue : true;
                    this.options = [];
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "autoHeight", {
            get: function () {
                return this._autoHeight;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define que a altura do componente será auto ajustável, possuindo uma altura minima porém a altura máxima será de acordo
             * com o número de itens selecionados e a extensão dos mesmos, mantendo-os sempre visíveis.
             *
             * > O valor padrão será `true` quando houver serviço (`p-filter-service`).
             *
             * @default `false`
             */
            set: function (value) {
                this._autoHeight = value;
                this.autoHeightInitialValue = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "debounceTime", {
            get: function () {
                return this._debounceTime;
            },
            /**
             * @optional
             *
             * @description
             * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
             *
             * > Será utilizada apenas quando houver serviço (`p-filter-service`) e somente será aceito valor maior do que *zero*.
             *
             * @default `400`
             */
            set: function (value) {
                var parsedValue = parseInt(value, 10);
                this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : PO_MULTISELECT_DEBOUNCE_TIME_DEFAULT;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poMultiselectLiteralsDefault[this.language];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-multiselect`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoMultiselectLiterals = {
             *    noData: 'Nenhum dado encontrado',
             *    placeholderSearch: 'Buscar'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: PoMultiselectLiterals = {
             *    noData: 'Sem dados'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
             *
             * ```
             * <po-multiselect
             *   [p-literals]="customLiterals">
             * </po-po-multiselect>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do
             * [`PoI18nService`](/documentation/po-i18n) ou do browser.
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = Object.assign(Object.assign(Object.assign({}, poMultiselectLiteralsDefault[poLocaleDefault]), poMultiselectLiteralsDefault[this.language]), value);
                }
                else {
                    this._literals = poMultiselectLiteralsDefault[this.language];
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
             *
             * @default `false`
             */
            set: function (required) {
                this._required = required === '' ? true : convertToBoolean(required);
                this.validateModel();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será desabilitado.
             *
             * @default `false`
             */
            set: function (disabled) {
                this._disabled = disabled === '' ? true : convertToBoolean(disabled);
                this.validateModel();
                this.updateVisibleItems();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "hideSearch", {
            get: function () {
                return this._hideSearch;
            },
            /**
             * @optional
             *
             * @description
             *
             * Esconde o campo de pesquisa existente dentro do dropdown do po-multiselect.
             *
             * @default `false`
             */
            set: function (hideSearch) {
                this._hideSearch = hideSearch === '' ? true : convertToBoolean(hideSearch);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "options", {
            get: function () {
                return this._options;
            },
            /**
             * @description
             *
             * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoMultiselectOption.
             * Esta lista deve conter os valores e os labels que serão apresentados na tela.
             *
             * > Essa propriedade é imutável, ou seja, sempre que quiser atualizar a lista de opções disponíveis
             * atualize a referência do objeto:
             *
             * ```
             * // atualiza a referência do objeto garantindo a atualização do template
             * this.options = [...this.options, { value: 'x', label: 'Nova opção' }];
             *
             * // evite, pois não atualiza a referência do objeto podendo gerar atrasos na atualização do template
             * this.options.push({ value: 'x', label: 'Nova opção' });
             * ```
             */
            set: function (options) {
                this._options = options;
                this.validAndSortOptions();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "sort", {
            get: function () {
                return this._sort;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que a lista definida na propriedade p-options será ordenada pelo label antes de ser apresentada no
             * dropdown.
             *
             * @default `false`
             */
            set: function (sort) {
                this._sort = sort === '' ? true : convertToBoolean(sort);
                this.validAndSortOptions();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "filterMode", {
            get: function () {
                return this._filterMode;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
             * Valores definidos no enum: PoMultiselectFilterMode
             *
             * @default `startsWith`
             */
            set: function (filterMode) {
                this._filterMode = filterMode in exports.PoMultiselectFilterMode ? filterMode : exports.PoMultiselectFilterMode.startsWith;
                switch (this._filterMode.toString()) {
                    case 'startsWith':
                        this._filterMode = exports.PoMultiselectFilterMode.startsWith;
                        break;
                    case 'contains':
                        this._filterMode = exports.PoMultiselectFilterMode.contains;
                        break;
                    case 'endsWith':
                        this._filterMode = exports.PoMultiselectFilterMode.endsWith;
                        break;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "fieldLabel", {
            get: function () {
                return this._fieldLabel;
            },
            /**
             * @optional
             *
             * @description
             * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
             * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
             *
             * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
             * `PoMultiSelectOption`.
             *
             * @default `label`
             */
            set: function (value) {
                this._fieldLabel = value || PO_MULTISELECT_FIELD_LABEL_DEFAULT;
                if (isTypeof(this.filterService, 'string') && this.service) {
                    this.service.fieldLabel = this._fieldLabel;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "fieldValue", {
            get: function () {
                return this._fieldValue;
            },
            /**
             * @optional
             *
             * @description
             * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
             * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
             *
             * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
             * `PoMultiSelectOption`.
             *
             * @default `value`
             */
            set: function (value) {
                this._fieldValue = value || PO_MULTISELECT_FIELD_VALUE_DEFAULT;
                if (isTypeof(this.filterService, 'string') && this.service) {
                    this.service.fieldValue = this._fieldValue;
                }
            },
            enumerable: false,
            configurable: true
        });
        PoMultiselectBaseComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.filterService) {
                this.setService(this.filterService);
            }
            this.filterSubject
                .pipe(operators.debounceTime(this.debounceTime), operators.distinctUntilChanged(), operators.tap(function () { return (_this.isServerSearching = true); }), operators.switchMap(function (search) { return _this.applyFilter(search); }), operators.tap(function () { return (_this.isServerSearching = false); }))
                .subscribe();
            this.updateList(this.options);
        };
        PoMultiselectBaseComponent.prototype.setService = function (service) {
            if (isTypeof(service, 'object')) {
                this.service = service;
            }
            else {
                this.service = this.defaultService;
                this.service.configProperties(service, this.fieldLabel, this.fieldValue);
            }
            this.isFirstFilter = true;
        };
        PoMultiselectBaseComponent.prototype.validAndSortOptions = function () {
            if (this.options && this.options.length) {
                removeUndefinedAndNullOptions(this.options);
                removeDuplicatedOptions(this.options);
                this.setUndefinedLabels(this.options);
                if (this.sort) {
                    sortOptionsByProperty(this.options, 'label');
                }
            }
        };
        PoMultiselectBaseComponent.prototype.setUndefinedLabels = function (options) {
            options.forEach(function (option) {
                if (!option['label']) {
                    option.label = option.value;
                }
            });
        };
        PoMultiselectBaseComponent.prototype.updateList = function (options) {
            if (options) {
                this.visibleOptionsDropdown = options;
            }
        };
        PoMultiselectBaseComponent.prototype.callOnChange = function (selectedOptions) {
            if (this.onModelChange) {
                this.onModelChange(this.getValuesFromOptions(selectedOptions));
                this.eventChange(selectedOptions);
            }
        };
        PoMultiselectBaseComponent.prototype.eventChange = function (selectedOptions) {
            if (selectedOptions && this.lastLengthModel !== selectedOptions.length) {
                this.change.emit(selectedOptions);
            }
            this.lastLengthModel = selectedOptions ? selectedOptions.length : null;
        };
        PoMultiselectBaseComponent.prototype.getValuesFromOptions = function (selectedOptions) {
            return selectedOptions && selectedOptions.length ? selectedOptions.map(function (option) { return option.value; }) : [];
        };
        PoMultiselectBaseComponent.prototype.getLabelByValue = function (value) {
            var index = this.options.findIndex(function (option) { return option.value === value; });
            return this.options[index].label;
        };
        PoMultiselectBaseComponent.prototype.searchByLabel = function (search, options, filterMode) {
            var _this = this;
            if (search && options && options.length) {
                var newOptions_1 = [];
                options.forEach(function (option) {
                    if (option.label && _this.compareMethod(search, option, filterMode)) {
                        newOptions_1.push(option);
                    }
                });
                this.visibleOptionsDropdown = newOptions_1;
            }
            else {
                this.visibleOptionsDropdown = __spreadArray([], __read(options));
            }
        };
        PoMultiselectBaseComponent.prototype.compareMethod = function (search, option, filterMode) {
            switch (filterMode) {
                case exports.PoMultiselectFilterMode.startsWith:
                    return this.startsWith(search, option);
                case exports.PoMultiselectFilterMode.contains:
                    return this.contains(search, option);
                case exports.PoMultiselectFilterMode.endsWith:
                    return this.endsWith(search, option);
            }
        };
        PoMultiselectBaseComponent.prototype.startsWith = function (search, option) {
            return option.label.toLowerCase().startsWith(search.toLowerCase());
        };
        PoMultiselectBaseComponent.prototype.contains = function (search, option) {
            return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
        };
        PoMultiselectBaseComponent.prototype.endsWith = function (search, option) {
            return option.label.toLowerCase().endsWith(search.toLowerCase());
        };
        PoMultiselectBaseComponent.prototype.validate = function (c) {
            if (requiredFailed(this.required, this.disabled, c.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
            return null;
        };
        PoMultiselectBaseComponent.prototype.updateSelectedOptions = function (newOptions, options) {
            var _this = this;
            if (options === void 0) { options = this.options; }
            this.selectedOptions = [];
            if (newOptions.length === 0) {
                this.lastLengthModel = 0;
            }
            if (this.filterService) {
                this.selectedOptions = newOptions;
            }
            else {
                newOptions.forEach(function (newOption) {
                    options.forEach(function (option) {
                        if (option.value === newOption.value) {
                            _this.selectedOptions.push(option);
                        }
                    });
                });
            }
            this.updateVisibleItems();
        };
        PoMultiselectBaseComponent.prototype.writeValue = function (values) {
            var _this = this;
            values = values || [];
            if (this.service && values.length) {
                this.getObjectsByValuesSubscription = this.service.getObjectsByValues(values).subscribe(function (options) {
                    _this.updateSelectedOptions(options);
                    _this.callOnChange(_this.selectedOptions);
                });
            }
            else {
                // Validar se todos os items existem entre os options, senão atualizar o model
                this.updateSelectedOptions(values.map(function (value) { return ({ value: value }); }));
                if (this.selectedOptions && this.selectedOptions.length < values.length) {
                    this.callOnChange(this.selectedOptions);
                }
            }
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar os estados de habilitado via forms api
        PoMultiselectBaseComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        PoMultiselectBaseComponent.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        PoMultiselectBaseComponent.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        PoMultiselectBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoMultiselectBaseComponent.prototype.validateModel = function () {
            if (this.validatorChange) {
                this.validatorChange();
            }
        };
        return PoMultiselectBaseComponent;
    }());
    PoMultiselectBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoMultiselectBaseComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoMultiselectBaseComponent.propDecorators = {
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        help: [{ type: i0.Input, args: ['p-help',] }],
        optional: [{ type: i0.Input, args: ['p-optional',] }],
        placeholder: [{ type: i0.Input, args: ['p-placeholder',] }],
        placeholderSearch: [{ type: i0.Input, args: ['p-placeholder-search',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        hideSelectAll: [{ type: i0.Input, args: ['p-hide-select-all',] }],
        change: [{ type: i0.Output, args: ['p-change',] }],
        filterService: [{ type: i0.Input, args: ['p-filter-service',] }],
        autoHeight: [{ type: i0.Input, args: ['p-auto-height',] }],
        debounceTime: [{ type: i0.Input, args: ['p-debounce-time',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        required: [{ type: i0.Input, args: ['p-required',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        hideSearch: [{ type: i0.Input, args: ['p-hide-search',] }],
        options: [{ type: i0.Input, args: ['p-options',] }],
        sort: [{ type: i0.Input, args: ['p-sort',] }],
        filterMode: [{ type: i0.Input, args: ['p-filter-mode',] }],
        fieldLabel: [{ type: i0.Input, args: ['p-field-label',] }],
        fieldValue: [{ type: i0.Input, args: ['p-field-value',] }]
    };
    __decorate([
        InputBoolean()
    ], PoMultiselectBaseComponent.prototype, "autoFocus", void 0);
    __decorate([
        InputBoolean()
    ], PoMultiselectBaseComponent.prototype, "hideSelectAll", void 0);
    __decorate([
        InputBoolean()
    ], PoMultiselectBaseComponent.prototype, "autoHeight", null);

    var PoMultiselectFilterService = /** @class */ (function () {
        function PoMultiselectFilterService(http) {
            this.http = http;
            this.fieldLabel = 'label';
            this.fieldValue = 'value';
            this.messages = [];
        }
        Object.defineProperty(PoMultiselectFilterService.prototype, "url", {
            get: function () {
                return this._url;
            },
            enumerable: false,
            configurable: true
        });
        PoMultiselectFilterService.prototype.getFilteredData = function (_a) {
            var _this = this;
            var value = _a.value;
            var params = value ? { filter: value } : {};
            return this.http
                .get(this.url, {
                params: params
            })
                .pipe(operators.map(function (response) { return _this.parseToArrayMultiselectOptions(response['items']); }));
        };
        PoMultiselectFilterService.prototype.getObjectsByValues = function (value) {
            var _this = this;
            return this.http
                .get(this.url + "?" + this.fieldValue + "=" + value.toString())
                .pipe(operators.map(function (response) { return _this.parseToArrayMultiselectOptions(response['items']); }));
        };
        PoMultiselectFilterService.prototype.configProperties = function (url, fieldLabel, fieldValue) {
            this._url = url;
            this.fieldLabel = fieldLabel;
            this.fieldValue = fieldValue;
        };
        PoMultiselectFilterService.prototype.parseToArrayMultiselectOptions = function (items) {
            var _this = this;
            if (items && items.length > 0) {
                return items.map(function (item) { return _this.parseToMultiselectOption(item); });
            }
            return [];
        };
        PoMultiselectFilterService.prototype.parseToMultiselectOption = function (item) {
            var label = item[this.fieldLabel];
            var value = item[this.fieldValue];
            return { label: label, value: value };
        };
        return PoMultiselectFilterService;
    }());
    PoMultiselectFilterService.decorators = [
        { type: i0.Injectable }
    ];
    PoMultiselectFilterService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    var poMultiselectContainerOffset = 8;
    var poMultiselectContainerPositionDefault = 'bottom';
    /* istanbul ignore next */
    var providers$1 = [
        PoMultiselectFilterService,
        PoControlPositionService,
        {
            provide: forms.NG_VALUE_ACCESSOR,
            // eslint-disable-next-line
            useExisting: i0.forwardRef(function () { return PoMultiselectComponent; }),
            multi: true
        },
        {
            provide: forms.NG_VALIDATORS,
            // eslint-disable-next-line
            useExisting: i0.forwardRef(function () { return PoMultiselectComponent; }),
            multi: true
        }
    ];
    /**
     * @docsExtends PoMultiselectBaseComponent
     *
     * @example
     *
     * <example name="po-multiselect-basic" title="PO Multiselect Basic">
     *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.html"> </file>
     *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-multiselect-labs" title="PO Multiselect Labs">
     *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.html"> </file>
     *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-multiselect-vacation" title="PO Multiselect - Vacation">
     *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.html"> </file>
     *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.ts"> </file>
     * </example>
     *
     * <example name="po-multiselect-vacation-reactive-form" title="PO Multiselect - Vacation Reactive Form">
     *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.html"> </file>
     *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.ts"> </file>
     * </example>
     *
     * <example name="po-multiselect-heroes" title="PO Multiselect - Heroes - using API">
     *   <file name="sample-po-multiselect-heroes/sample-po-multiselect-heroes.component.html"> </file>
     *   <file name="sample-po-multiselect-heroes/sample-po-multiselect-heroes.component.ts"> </file>
     *   <file name="sample-po-multiselect-heroes/sample-po-multiselect-heroes.service.ts"> </file>
     * </example>
     */
    var PoMultiselectComponent = /** @class */ (function (_super) {
        __extends(PoMultiselectComponent, _super);
        function PoMultiselectComponent(renderer, changeDetector, el, controlPosition, defaultService, languageService) {
            var _this = _super.call(this, languageService) || this;
            _this.renderer = renderer;
            _this.changeDetector = changeDetector;
            _this.el = el;
            _this.controlPosition = controlPosition;
            _this.defaultService = defaultService;
            _this.disclaimerOffset = 0;
            _this.dropdownIcon = 'po-icon-arrow-down';
            _this.dropdownOpen = false;
            _this.initialized = false;
            _this.visibleElement = false;
            _this.isCalculateVisibleItems = true;
            _this.onScroll = function () {
                _this.adjustContainerPosition();
            };
            return _this;
        }
        PoMultiselectComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
            this.initialized = true;
        };
        PoMultiselectComponent.prototype.ngOnChanges = function (changes) {
            if (changes.filterService || changes.fieldValue || changes.fieldLabel) {
                this.setService(this.filterService);
            }
        };
        PoMultiselectComponent.prototype.ngDoCheck = function () {
            var inputWidth = this.inputElement.nativeElement.offsetWidth;
            // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
            // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
            if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
                this.debounceResize();
                this.visibleElement = true;
            }
        };
        PoMultiselectComponent.prototype.ngOnDestroy = function () {
            var _a, _b;
            this.removeListeners();
            (_a = this.getObjectsByValuesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
            (_b = this.filterSubject) === null || _b === void 0 ? void 0 : _b.unsubscribe();
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoMultiselectComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoMultiselectComponent, { static: true }) multiselect: PoMultiselectComponent;
         *
         * focusMultiselect() {
         *   this.multiselect.focus();
         * }
         * ```
         */
        PoMultiselectComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.inputElement.nativeElement.focus();
            }
        };
        PoMultiselectComponent.prototype.getInputWidth = function () {
            return this.el.nativeElement.querySelector('.po-input').offsetWidth - 40;
        };
        PoMultiselectComponent.prototype.getDisclaimersWidth = function () {
            var disclaimers = this.el.nativeElement.querySelectorAll('po-disclaimer');
            return Array.from(disclaimers).map(function (disclaimer) { return disclaimer['offsetWidth']; });
        };
        PoMultiselectComponent.prototype.calculateVisibleItems = function () {
            var disclaimersWidth = this.getDisclaimersWidth();
            var inputWidth = this.getInputWidth();
            var extraDisclaimerSize = 38;
            var disclaimersVisible = disclaimersWidth[0];
            this.visibleDisclaimers = [];
            if (inputWidth > 0) {
                var sum = 0;
                var i = 0;
                for (i = 0; i < this.selectedOptions.length; i++) {
                    sum += disclaimersWidth[i];
                    this.visibleDisclaimers.push(this.selectedOptions[i]);
                    if (sum > inputWidth) {
                        sum -= disclaimersWidth[i];
                        this.isCalculateVisibleItems = false;
                        break;
                    }
                }
                if (disclaimersVisible || !this.selectedOptions.length) {
                    if (i === this.selectedOptions.length) {
                        this.isCalculateVisibleItems = false;
                        return;
                    }
                    if (sum + extraDisclaimerSize > inputWidth) {
                        this.visibleDisclaimers.splice(-2, 2);
                        var label = '+' + (this.selectedOptions.length + 1 - i).toString();
                        this.visibleDisclaimers.push({ value: '', label: label });
                    }
                    else {
                        this.visibleDisclaimers.splice(-1, 1);
                        var label = '+' + (this.selectedOptions.length - i).toString();
                        this.visibleDisclaimers.push({ value: '', label: label });
                    }
                }
            }
        };
        PoMultiselectComponent.prototype.changeItems = function (changedItems) {
            this.updateSelectedOptions(changedItems);
            this.callOnChange(this.selectedOptions);
            if (this.autoHeight && this.dropdownOpen) {
                this.changeDetector.detectChanges();
                this.adjustContainerPosition();
            }
        };
        PoMultiselectComponent.prototype.updateVisibleItems = function () {
            if (this.selectedOptions) {
                this.visibleDisclaimers = [].concat(this.selectedOptions);
            }
            this.debounceResize();
            // quando estiver dentro de modal
            if (!this.inputElement.nativeElement.offsetWidth) {
                this.isCalculateVisibleItems = true;
            }
        };
        PoMultiselectComponent.prototype.debounceResize = function () {
            var _this = this;
            if (!this.autoHeight) {
                clearTimeout(this.timeoutResize);
                this.timeoutResize = setTimeout(function () {
                    _this.calculateVisibleItems();
                }, 200);
            }
        };
        PoMultiselectComponent.prototype.onBlur = function () {
            var _a;
            (_a = this.onModelTouched) === null || _a === void 0 ? void 0 : _a.call(this);
        };
        PoMultiselectComponent.prototype.onKeyDown = function (event) {
            if (event.keyCode === PoKeyCodeEnum.arrowUp || event.keyCode === PoKeyCodeEnum.arrowDown) {
                event.preventDefault();
                this.controlDropdownVisibility(true);
                return;
            }
            if (event.keyCode === PoKeyCodeEnum.tab) {
                this.controlDropdownVisibility(false);
            }
        };
        PoMultiselectComponent.prototype.toggleDropdownVisibility = function () {
            if (this.disabled) {
                return;
            }
            if (this.filterService) {
                this.applyFilterInFirstClick();
            }
            this.controlDropdownVisibility(!this.dropdownOpen);
        };
        PoMultiselectComponent.prototype.openDropdown = function (toOpen) {
            if (toOpen && !this.disabled) {
                this.controlDropdownVisibility(true);
            }
        };
        PoMultiselectComponent.prototype.controlDropdownVisibility = function (toOpen) {
            toOpen ? this.open() : this.close();
        };
        PoMultiselectComponent.prototype.scrollToSelectedOptions = function () {
            var _this = this;
            if (this.selectedOptions && this.selectedOptions.length) {
                var index = this.options.findIndex(function (option) { return option.value === _this.selectedOptions[0].value; });
                this.dropdown.scrollTo(index);
            }
        };
        PoMultiselectComponent.prototype.setVisibleOptionsDropdown = function (options) {
            this.visibleOptionsDropdown = options;
        };
        PoMultiselectComponent.prototype.changeSearch = function (event) {
            var _this = this;
            if (event && event.value !== undefined) {
                if (this.filterService) {
                    this.filterSubject.next(event.value);
                }
                else {
                    this.searchByLabel(event.value, this.options, this.filterMode);
                }
            }
            else {
                this.setVisibleOptionsDropdown(this.options);
            }
            // timeout necessário para reposicionar corretamente quando dropdown estiver pra cima do input e realizar busca no input
            setTimeout(function () { return _this.adjustContainerPosition(); });
        };
        PoMultiselectComponent.prototype.closeDisclaimer = function (value) {
            var index = this.selectedOptions.findIndex(function (option) { return option.value === value; });
            this.selectedOptions.splice(index, 1);
            this.updateVisibleItems();
            this.callOnChange(this.selectedOptions);
        };
        PoMultiselectComponent.prototype.wasClickedOnToggle = function (event) {
            if (this.dropdownOpen &&
                !this.inputElement.nativeElement.contains(event.target) &&
                !this.iconElement.nativeElement.contains(event.target) &&
                !this.dropdownElement.nativeElement.contains(event.target)) {
                this.controlDropdownVisibility(false);
            }
        };
        PoMultiselectComponent.prototype.applyFilter = function (value) {
            var _this = this;
            if (value === void 0) { value = ''; }
            var param = { property: 'label', value: value };
            return this.service.getFilteredData(param).pipe(operators.catchError(function (err) {
                _this.isServerSearching = false;
                return rxjs.of([]);
            }), operators.tap(function (options) {
                _this.setOptionsByApplyFilter(options);
            }));
        };
        PoMultiselectComponent.prototype.applyFilterInFirstClick = function () {
            if (this.isFirstFilter) {
                this.isServerSearching = true;
                // necessario enviar um objeto string vazia para refazer a busca, quando alterar filterService, fieldValue e fieldLabel
                // pois temos o distinctUntilChange no pipe do filterSubject
                /* eslint-disable no-new-wrappers */
                this.filterSubject.next(new String());
            }
            else {
                this.options = __spreadArray([], __read(this.cacheOptions));
            }
        };
        PoMultiselectComponent.prototype.setOptionsByApplyFilter = function (items) {
            if (this.isFirstFilter) {
                this.cacheOptions = __spreadArray([], __read(items));
                this.isFirstFilter = false;
            }
            this.options = __spreadArray([], __read(items));
            this.setVisibleOptionsDropdown(this.options);
        };
        PoMultiselectComponent.prototype.adjustContainerPosition = function () {
            this.controlPosition.adjustPosition(poMultiselectContainerPositionDefault);
        };
        PoMultiselectComponent.prototype.close = function () {
            this.dropdownIcon = 'po-icon-arrow-down';
            this.dropdownOpen = false;
            this.dropdown.controlVisibility(false);
            this.setVisibleOptionsDropdown(this.options);
            this.removeListeners();
        };
        PoMultiselectComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.clickOutListener = this.renderer.listen('document', 'click', function (event) {
                _this.wasClickedOnToggle(event);
            });
            this.resizeListener = this.renderer.listen('window', 'resize', function () {
                _this.updateVisibleItems();
                isMobile() ? _this.adjustContainerPosition() : _this.close();
            });
            window.addEventListener('scroll', this.onScroll, true);
        };
        PoMultiselectComponent.prototype.open = function () {
            this.dropdownIcon = 'po-icon-arrow-up';
            this.dropdownOpen = true;
            this.dropdown.controlVisibility(true);
            this.setVisibleOptionsDropdown(this.options);
            this.initializeListeners();
            this.scrollToSelectedOptions();
            this.changeDetector.detectChanges();
            this.setPositionDropdown();
        };
        PoMultiselectComponent.prototype.removeListeners = function () {
            if (this.clickOutListener) {
                this.clickOutListener();
            }
            if (this.resizeListener) {
                this.resizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        PoMultiselectComponent.prototype.setPositionDropdown = function () {
            this.controlPosition.setElements(this.dropdown.container.nativeElement, poMultiselectContainerOffset, this.inputElement, ['top', 'bottom'], true);
            this.adjustContainerPosition();
        };
        return PoMultiselectComponent;
    }(PoMultiselectBaseComponent));
    PoMultiselectComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-multiselect',
                    template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content\" [class.po-multiselect-show]=\"dropdownOpen\">\r\n    <div\r\n      #inputElement\r\n      [tabindex]=\"disabled ? -1 : 0\"\r\n      class=\"po-input po-input-icon-right po-multiselect-input po-clickable\"\r\n      [class.po-multiselect-input-auto]=\"autoHeight\"\r\n      [class.po-multiselect-input-static]=\"!autoHeight\"\r\n      [class.po-multiselect-input-disabled]=\"disabled\"\r\n      (keyup.enter)=\"toggleDropdownVisibility()\"\r\n      (keydown)=\"onKeyDown($event)\"\r\n      (click)=\"toggleDropdownVisibility()\"\r\n      (blur)=\"onBlur()\"\r\n    >\r\n      <span *ngIf=\"placeholder && !visibleDisclaimers?.length\" class=\"po-multiselect-input-placeholder\">\r\n        {{ placeholder }}\r\n      </span>\r\n\r\n      <po-disclaimer\r\n        *ngFor=\"let disclaimer of visibleDisclaimers\"\r\n        class=\"po-multiselect-input-disclaimer\"\r\n        [p-label]=\"disclaimer.label\"\r\n        [p-value]=\"disclaimer.value\"\r\n        [p-hide-close]=\"disclaimer.value === '' || disabled\"\r\n        [class.po-clickable]=\"disclaimer.value === '' && !disabled\"\r\n        (click)=\"openDropdown(disclaimer.value === '')\"\r\n        (p-close-action)=\"closeDisclaimer(disclaimer.value)\"\r\n      >\r\n      </po-disclaimer>\r\n\r\n      <div class=\"po-field-icon-container-right\">\r\n        <span\r\n          #iconElement\r\n          class=\"po-icon po-field-icon {{ dropdownIcon }}\"\r\n          [ngClass]=\"disabled ? 'po-field-icon-disabled' : ''\"\r\n        >\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <po-multiselect-dropdown\r\n    #dropdownElement\r\n    [p-searching]=\"isServerSearching\"\r\n    [p-hide-search]=\"hideSearch\"\r\n    [p-hide-select-all]=\"hideSelectAll\"\r\n    [p-literals]=\"literals\"\r\n    [p-options]=\"options\"\r\n    [p-visible-options]=\"visibleOptionsDropdown\"\r\n    [p-selected-options]=\"selectedOptions\"\r\n    [p-placeholder-search]=\"placeholderSearch\"\r\n    (p-change)=\"changeItems($event)\"\r\n    (p-change-search)=\"changeSearch($event)\"\r\n    (p-close-dropdown)=\"controlDropdownVisibility(false)\"\r\n  >\r\n  </po-multiselect-dropdown>\r\n\r\n  <po-field-container-bottom></po-field-container-bottom>\r\n</po-field-container>\r\n",
                    providers: providers$1
                },] }
    ];
    PoMultiselectComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ChangeDetectorRef },
        { type: i0.ElementRef },
        { type: PoControlPositionService },
        { type: PoMultiselectFilterService },
        { type: PoLanguageService }
    ]; };
    PoMultiselectComponent.propDecorators = {
        dropdownElement: [{ type: i0.ViewChild, args: ['dropdownElement', { read: i0.ElementRef, static: true },] }],
        dropdown: [{ type: i0.ViewChild, args: ['dropdownElement', { static: true },] }],
        iconElement: [{ type: i0.ViewChild, args: ['iconElement', { read: i0.ElementRef, static: true },] }],
        inputElement: [{ type: i0.ViewChild, args: ['inputElement', { read: i0.ElementRef, static: true },] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que constrói cada item no dropdown, contendo o checkbox e o label.
     */
    var PoMultiselectItemComponent = /** @class */ (function () {
        function PoMultiselectItemComponent() {
            /** Esta propriedade indica se o campo está selecionado, indenterminate ou não. */
            this.selected = false;
            /** Evento que será disparado toda vez que o usuário marcar ou desmarcar um item. */
            this.change = new i0.EventEmitter();
        }
        PoMultiselectItemComponent.prototype.itemClicked = function () {
            this.selected = !this.selected;
            this.change.emit(this.selected);
        };
        return PoMultiselectItemComponent;
    }());
    PoMultiselectItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-multiselect-item',
                    template: "<li [class.po-multiselect-item-selected]=\"selected\" (click)=\"itemClicked()\">\r\n  <a class=\"po-multiselect-item\">\r\n    <input\r\n      [checked]=\"selected\"\r\n      class=\"po-multiselect-checkbox-input\"\r\n      [class.po-multiselect-checkbox-input-indeterminate]=\"selected === null\"\r\n      [class.po-multiselect-checkbox-input-checked]=\"selected\"\r\n      type=\"checkbox\"\r\n    />\r\n\r\n    <label class=\"po-multiselect-checkbox-label po-clickable\">\r\n      {{ label }}\r\n    </label>\r\n  </a>\r\n</li>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoMultiselectItemComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['p-label',] }],
        selected: [{ type: i0.Input, args: ['p-selected',] }],
        change: [{ type: i0.Output, args: ['p-change',] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente de pesquisa que será criado dentro do dropdown do `po-multiselect`.
     */
    var PoMultiselectSearchComponent = /** @class */ (function () {
        function PoMultiselectSearchComponent() {
            /** Evento que será disparado a cada tecla digitada no campo de busca. */
            this.change = new i0.EventEmitter();
        }
        Object.defineProperty(PoMultiselectSearchComponent.prototype, "placeholder", {
            get: function () {
                return this._placeholder || this.literals.placeholderSearch;
            },
            /**
             * @optional
             *
             * @description
             *
             * Placeholder do campo de pesquisa.
             *
             * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
             *
             * @default `Buscar`
             */
            set: function (placeholder) {
                this._placeholder = placeholder && isTypeof(placeholder, 'string') ? placeholder : this.literals.placeholderSearch;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMultiselectSearchComponent.prototype, "inputValue", {
            get: function () {
                return this.inputElement.nativeElement.value;
            },
            enumerable: false,
            configurable: true
        });
        PoMultiselectSearchComponent.prototype.onChange = function (event) {
            this.change.emit({ event: event, value: this.inputElement.nativeElement.value });
        };
        PoMultiselectSearchComponent.prototype.setFocus = function () {
            this.inputElement.nativeElement.focus();
        };
        PoMultiselectSearchComponent.prototype.clean = function () {
            this.inputElement.nativeElement.value = '';
        };
        return PoMultiselectSearchComponent;
    }());
    PoMultiselectSearchComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-multiselect-search',
                    template: "<div class=\"po-field-container-content po-multiselect-container-search\">\r\n  <div class=\"po-field-icon-container-left\">\r\n    <span class=\"po-icon po-icon-search po-field-icon\"></span>\r\n  </div>\r\n\r\n  <input\r\n    #inputElement\r\n    class=\"po-input po-input-icon-left po-multiselect-search-input\"\r\n    type=\"text\"\r\n    [placeholder]=\"placeholder\"\r\n    (keyup)=\"onChange($event)\"\r\n  />\r\n</div>\r\n"
                },] }
    ];
    PoMultiselectSearchComponent.propDecorators = {
        inputElement: [{ type: i0.ViewChild, args: ['inputElement', { read: i0.ElementRef, static: true },] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        change: [{ type: i0.Output, args: ['p-change',] }],
        placeholder: [{ type: i0.Input, args: ['p-placeholder',] }]
    };

    var PoRichTextService = /** @class */ (function () {
        function PoRichTextService() {
            this.model = new rxjs.Subject();
        }
        PoRichTextService.prototype.emitModel = function (value) {
            this.model.next(value);
        };
        PoRichTextService.prototype.getModel = function () {
            return this.model.asObservable();
        };
        return PoRichTextService;
    }());
    PoRichTextService.decorators = [
        { type: i0.Injectable }
    ];

    var poRichTextBodyCommands = [
        'bold',
        'italic',
        'underline',
        'justifyleft',
        'justifycenter',
        'justifyright',
        'justifyfull',
        'insertUnorderedList',
        'Createlink'
    ];
    var PoRichTextBodyComponent = /** @class */ (function () {
        function PoRichTextBodyComponent(richTextService) {
            this.richTextService = richTextService;
            this.change = new i0.EventEmitter();
            this.commands = new i0.EventEmitter();
            this.selectedLink = new i0.EventEmitter();
            this.shortcutCommand = new i0.EventEmitter();
            this.value = new i0.EventEmitter();
            this.blur = new i0.EventEmitter();
            this.onAnchorClick = function (event) {
                var target = event.target, ctrlKey = event.ctrlKey, metaKey = event.metaKey;
                var url;
                var elementLink;
                if (ctrlKey || metaKey) {
                    if (event.path) {
                        event.path.forEach(function (element) {
                            if (element.nodeName === 'A') {
                                url = element.href;
                                elementLink = element;
                            }
                        });
                    }
                    else {
                        url = target.attributes.href.value;
                        elementLink = target;
                    }
                    openExternalLink(url);
                    elementLink.classList.remove('po-clickable');
                }
            };
        }
        PoRichTextBodyComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.bodyElement.nativeElement.designMode = 'on';
            this.modelSubscription = this.richTextService.getModel().subscribe(function (modelValue) {
                _this.modelValue = modelValue;
                _this.bodyElement.nativeElement.innerHTML = '';
                _this.updateValueWithModelValue();
                _this.addClickListenerOnAnchorElements();
            });
        };
        PoRichTextBodyComponent.prototype.ngOnDestroy = function () {
            var _a;
            (_a = this.modelSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        };
        PoRichTextBodyComponent.prototype.executeCommand = function (command) {
            this.bodyElement.nativeElement.focus();
            if (typeof command === 'object') {
                if (command.command === 'InsertHTML') {
                    var linkCommand = command.command, urlLink = command.value.urlLink, urlLinkText = command.value.urlLinkText;
                    this.handleCommandLink(linkCommand, urlLink, urlLinkText);
                }
                else {
                    document.execCommand(command.command, false, command.value);
                }
            }
            else {
                document.execCommand(command, false, null);
            }
            this.updateModel();
            this.value.emit(this.modelValue);
        };
        PoRichTextBodyComponent.prototype.linkEditing = function (event) {
            this.isLinkEditing = !!event;
        };
        PoRichTextBodyComponent.prototype.onBlur = function () {
            var _this = this;
            this.blur.emit();
            if (this.modelValue !== this.valueBeforeChange) {
                clearTimeout(this.timeoutChange);
                this.timeoutChange = setTimeout(function () {
                    _this.change.emit(_this.modelValue);
                }, 200);
            }
        };
        PoRichTextBodyComponent.prototype.focus = function () {
            this.bodyElement.nativeElement.focus();
        };
        PoRichTextBodyComponent.prototype.onClick = function () {
            this.emitSelectionCommands();
        };
        PoRichTextBodyComponent.prototype.onFocus = function () {
            this.valueBeforeChange = this.modelValue;
        };
        PoRichTextBodyComponent.prototype.onKeyDown = function (event) {
            var keyK = event.keyCode === PoKeyCodeEnum.keyK;
            var isLinkShortcut = (keyK && event.ctrlKey) || (keyK && event.metaKey);
            if (isLinkShortcut) {
                event.preventDefault();
                this.shortcutCommand.emit();
            }
            this.toggleCursorOnLink(event, 'add');
        };
        PoRichTextBodyComponent.prototype.onKeyUp = function (event) {
            this.toggleCursorOnLink(event, 'remove');
            this.removeBrElement();
            this.updateModel();
            this.emitSelectionCommands();
        };
        PoRichTextBodyComponent.prototype.onPaste = function () {
            var _this = this;
            this.update();
            setTimeout(function () { return _this.addClickListenerOnAnchorElements(); });
        };
        PoRichTextBodyComponent.prototype.update = function () {
            var _this = this;
            setTimeout(function () { return _this.updateModel(); });
            setTimeout(function () {
                _this.removeBrElement();
                _this.updateModel();
                _this.emitSelectionCommands();
            });
        };
        PoRichTextBodyComponent.prototype.addClickListenerOnAnchorElements = function () {
            var _this = this;
            this.bodyElement.nativeElement.querySelectorAll('a').forEach(function (element) {
                element.addEventListener('click', _this.onAnchorClick);
            });
        };
        PoRichTextBodyComponent.prototype.emitSelectionCommands = function () {
            var commands = poRichTextBodyCommands.filter(function (command) { return document.queryCommandState(command); });
            var rgbColor = document.queryCommandValue('ForeColor');
            var hexColor;
            if (!isIE()) {
                hexColor = this.rgbToHex(rgbColor);
            }
            if (this.isCursorPositionedInALink()) {
                commands.push('Createlink');
            }
            this.selectedLink.emit(this.linkElement); // importante ficar fora do if para emitir mesmo undefined.
            this.commands.emit({ commands: commands, hexColor: hexColor });
        };
        PoRichTextBodyComponent.prototype.getTextSelection = function () {
            var textSelection = document.getSelection();
            if (!textSelection) {
                return;
            }
            var focusNode = textSelection.focusNode ? textSelection.focusNode.parentElement : undefined;
            var anchorNode = textSelection.anchorNode ? textSelection.anchorNode.parentNode : undefined;
            var node = focusNode || anchorNode;
            var tagName;
            if (node) {
                tagName = node['tagName'] || node['nodeName'];
                return {
                    node: node,
                    tagName: tagName
                };
            }
        };
        PoRichTextBodyComponent.prototype.handleCommandLink = function (linkCommand, urlLink, urlLinkText) {
            if (isIE()) {
                this.insertHtmlLinkElement(urlLink, urlLinkText);
            }
            else {
                // '&nbsp;' necessário para o cursor não ficar preso dentro do link no Firefox.
                var linkValue = isFirefox() && !this.isLinkEditing
                    ? "&nbsp;" + this.makeLinkTag(urlLink, urlLinkText) + "&nbsp;"
                    : this.makeLinkTag(urlLink, urlLinkText);
                document.execCommand(linkCommand, false, linkValue);
            }
            this.addClickListenerOnAnchorElements();
        };
        // tratamento específico para IE pois não suporta o comando 'insertHTML'.
        PoRichTextBodyComponent.prototype.insertHtmlLinkElement = function (urlLink, urlLinkText) {
            var selection = document.getSelection();
            var selectionRange = selection.getRangeAt(0);
            var elementLink = document.createElement('a');
            var elementlinkText = document.createTextNode(urlLinkText);
            elementLink.appendChild(elementlinkText);
            elementLink.href = urlLink;
            elementLink.setAttribute('target', '_blank');
            elementLink.classList.add('po-rich-text-link');
            selectionRange.deleteContents();
            selectionRange.insertNode(elementLink);
        };
        PoRichTextBodyComponent.prototype.isCursorPositionedInALink = function () {
            var textSelection = this.getTextSelection();
            this.linkElement = undefined;
            var isLink = false;
            if (textSelection && textSelection.node && textSelection.tagName === 'A') {
                this.linkElement = textSelection.node;
                isLink = true;
            }
            else if ((isFirefox() || isIEOrEdge()) && this.verifyCursorPositionInFirefoxIEEdge()) {
                isLink = true;
            }
            else {
                isLink = textSelection ? this.isParentNodeAnchor(textSelection) : false;
            }
            return isLink;
        };
        PoRichTextBodyComponent.prototype.isParentNodeAnchor = function (textSelection) {
            var element = textSelection.node;
            var isLink = false;
            while (element && (element.tagName !== null || element.nodeName !== null)) {
                if (element.tagName === 'A' || element.nodeName === 'A') {
                    this.linkElement = element;
                    isLink = true;
                    return isLink;
                }
                element = element.parentElement || element.parentNode;
            }
            this.linkElement = undefined;
            return isLink;
        };
        PoRichTextBodyComponent.prototype.makeLinkTag = function (urlLink, urlLinkText) {
            return "<a class=\"po-rich-text-link\" href=\"" + urlLink + "\" target=\"_blank\">" + (urlLinkText || urlLink) + "</a>";
        };
        // Tratamento necessário para eliminar a tag <br> criada no firefox quando o body for limpo.
        PoRichTextBodyComponent.prototype.removeBrElement = function () {
            var bodyElement = this.bodyElement.nativeElement;
            if (!bodyElement.innerText.trim() && bodyElement.childNodes.length === 1 && bodyElement.querySelector('br')) {
                bodyElement.querySelector('br').remove();
            }
        };
        PoRichTextBodyComponent.prototype.rgbToHex = function (rgb) {
            // Tratamento necessário para converter o código rgb para hexadecimal.
            var sep = rgb.indexOf(',') > -1 ? ',' : ' ';
            rgb = rgb.substr(4).split(')')[0].split(sep);
            var r = (+rgb[0]).toString(16);
            var g = (+rgb[1]).toString(16);
            var b = (+rgb[2]).toString(16);
            if (r.length === 1) {
                r = '0' + r;
            }
            if (g.length === 1) {
                g = '0' + g;
            }
            if (b.length === 1) {
                b = '0' + b;
            }
            return '#' + r + g + b;
        };
        PoRichTextBodyComponent.prototype.toggleCursorOnLink = function (event, action) {
            var selection = document.getSelection();
            var element = selection.focusNode ? selection.focusNode.parentNode : undefined;
            var isCtrl = event.key === 'Control';
            var isCommand = event.key === 'Meta';
            var isOnCtrlLink = this.isCursorPositionedInALink() && (isCtrl || isCommand);
            if (element) {
                if (isOnCtrlLink) {
                    element['classList'][action]('po-clickable');
                }
                else {
                    var isClickable = element['classList'] && element['classList'].contains('po-clickable');
                    if (isClickable) {
                        element['classList'].remove('po-clickable');
                    }
                }
                this.updateModel();
            }
        };
        PoRichTextBodyComponent.prototype.updateModel = function () {
            this.modelValue = this.bodyElement.nativeElement.innerHTML;
            this.value.emit(this.modelValue);
        };
        PoRichTextBodyComponent.prototype.updateValueWithModelValue = function () {
            if (this.modelValue) {
                this.bodyElement.nativeElement.insertAdjacentHTML('afterbegin', this.modelValue);
            }
        };
        PoRichTextBodyComponent.prototype.verifyCursorPositionInFirefoxIEEdge = function () {
            var textSelection = document.getSelection();
            var nodeLink = textSelection.focusNode;
            var isLink = false;
            if (nodeLink && nodeLink.nodeName === 'A') {
                this.linkElement = nodeLink;
                isLink = true;
            }
            else {
                var range = textSelection.getRangeAt(0);
                var fragmentDocument = range.cloneContents();
                var element = fragmentDocument.childNodes[0] || fragmentDocument.firstElementChild;
                this.linkElement = element && element.nodeName === 'A' ? element : undefined;
                isLink = !!this.linkElement;
            }
            return isLink;
        };
        return PoRichTextBodyComponent;
    }());
    PoRichTextBodyComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-rich-text-body',
                    template: "<div\r\n  #bodyElement\r\n  class=\"po-rich-text-body\"\r\n  tabindex=\"0\"\r\n  [attr.contenteditable]=\"!readonly\"\r\n  [attr.data-placeholder]=\"placeholder\"\r\n  [style.height.px]=\"height\"\r\n  (blur)=\"onBlur()\"\r\n  (click)=\"onClick()\"\r\n  (cut)=\"update()\"\r\n  (focus)=\"onFocus()\"\r\n  (keydown)=\"onKeyDown($event)\"\r\n  (keyup)=\"onKeyUp($event)\"\r\n  (paste)=\"onPaste()\"\r\n></div>\r\n"
                },] }
    ];
    PoRichTextBodyComponent.ctorParameters = function () { return [
        { type: PoRichTextService }
    ]; };
    PoRichTextBodyComponent.propDecorators = {
        bodyElement: [{ type: i0.ViewChild, args: ['bodyElement', { static: true },] }],
        height: [{ type: i0.Input, args: ['p-height',] }],
        modelValue: [{ type: i0.Input, args: ['p-model-value',] }],
        placeholder: [{ type: i0.Input, args: ['p-placeholder',] }],
        readonly: [{ type: i0.Input, args: ['p-readonly',] }],
        change: [{ type: i0.Output, args: ['p-change',] }],
        commands: [{ type: i0.Output, args: ['p-commands',] }],
        selectedLink: [{ type: i0.Output, args: ['p-selected-link',] }],
        shortcutCommand: [{ type: i0.Output, args: ['p-shortcut-command',] }],
        value: [{ type: i0.Output, args: ['p-value',] }],
        blur: [{ type: i0.Output, args: ['p-blur',] }]
    };

    /**
     * @description
     *
     * O componente `po-rich-text` é um editor de textos enriquecidos.
     *
     * Para edição de texto simples sem formatação recomenda-se o uso do componente [**po-textarea**](/documentation/po-textarea).
     *
     * > No navegador Internet Explorer não é possível alterar a cor do texto.
     */
    var PoRichTextBaseComponent = /** @class */ (function () {
        function PoRichTextBaseComponent(richTextService) {
            this.richTextService = richTextService;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /**
             * @description
             *
             * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.
             */
            this.errorMessage = '';
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao deixar o campo e que recebe como parâmetro o valor alterado.
             */
            this.change = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao modificar valor do model e que recebe como parâmetro o valor alterado.
             */
            this.changeModel = new i0.EventEmitter();
            this.invalid = false;
            this.onChangeModel = null;
            // eslint-disable-next-line
            this.onTouched = null;
        }
        Object.defineProperty(PoRichTextBaseComponent.prototype, "height", {
            get: function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura da área de edição de texto.
             *
             * > Altura mínima do componente é `94` e a altura máxima é `262`.
             */
            set: function (height) {
                this._height = height;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoRichTextBaseComponent.prototype, "placeholder", {
            get: function () {
                return this._placeholder;
            },
            /**
             * @optional
             *
             * @description
             *
             * Mensagem que aparecerá enquanto o campo não estiver preenchido.
             *
             * @default ''
             */
            set: function (value) {
                this._placeholder = value || '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoRichTextBaseComponent.prototype, "readonly", {
            get: function () {
                return this._readonly;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será somente leitura.
             *
             * @default `false`
             */
            set: function (value) {
                this._readonly = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoRichTextBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: function (value) {
                this._required = convertToBoolean(value);
                this.validateModel(this.value);
            },
            enumerable: false,
            configurable: true
        });
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoRichTextBaseComponent.prototype.registerOnChange = function (func) {
            this.onChangeModel = func;
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoRichTextBaseComponent.prototype.registerOnTouched = function (func) {
            this.onTouched = func;
        };
        PoRichTextBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoRichTextBaseComponent.prototype.validate = function (abstractControl) {
            if (requiredFailed(this.required, false, abstractControl.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
        };
        PoRichTextBaseComponent.prototype.writeValue = function (value) {
            this.value = value;
            this.richTextService.emitModel(value);
        };
        // Executa a função onChange
        PoRichTextBaseComponent.prototype.updateModel = function (value) {
            // Quando o rich-text não possui um formulário, então esta função não é registrada
            if (this.onChangeModel) {
                this.onChangeModel(value);
            }
        };
        PoRichTextBaseComponent.prototype.validateModel = function (value) {
            if (this.validatorChange) {
                this.validatorChange(value);
            }
        };
        return PoRichTextBaseComponent;
    }());
    PoRichTextBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoRichTextBaseComponent.ctorParameters = function () { return [
        { type: PoRichTextService }
    ]; };
    PoRichTextBaseComponent.propDecorators = {
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        errorMessage: [{ type: i0.Input, args: ['p-error-message',] }],
        help: [{ type: i0.Input, args: ['p-help',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        optional: [{ type: i0.Input, args: ['p-optional',] }],
        change: [{ type: i0.Output, args: ['p-change',] }],
        changeModel: [{ type: i0.Output, args: ['p-change-model',] }],
        height: [{ type: i0.Input, args: ['p-height',] }],
        placeholder: [{ type: i0.Input, args: ['p-placeholder',] }],
        readonly: [{ type: i0.Input, args: ['p-readonly',] }],
        required: [{ type: i0.Input, args: ['p-required',] }]
    };
    __decorate([
        InputBoolean()
    ], PoRichTextBaseComponent.prototype, "autoFocus", void 0);

    /* istanbul ignore next */
    var providers = [
        {
            provide: forms.NG_VALUE_ACCESSOR,
            // eslint-disable-next-line
            useExisting: i0.forwardRef(function () { return PoRichTextComponent; }),
            multi: true
        },
        {
            provide: forms.NG_VALIDATORS,
            // eslint-disable-next-line
            useExisting: i0.forwardRef(function () { return PoRichTextComponent; }),
            multi: true
        },
        {
            provide: PoRichTextService
        }
    ];
    /**
     * @docsExtends PoRichTextBaseComponent
     *
     * @example
     *
     * <example name="po-rich-text-basic" title="PO Rich Text Basic">
     *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.html"> </file>
     *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-rich-text-labs" title="PO Rich Text Labs">
     *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.html"> </file>
     *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-rich-text-recipe" title="PO Rich Text Recipe">
     *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe-image-base-64.ts"> </file>
     *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.html"> </file>
     *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.ts"> </file>
     * </example>
     */
    var PoRichTextComponent = /** @class */ (function (_super) {
        __extends(PoRichTextComponent, _super);
        function PoRichTextComponent(element, richTextService) {
            var _this = _super.call(this, richTextService) || this;
            _this.element = element;
            _this.listener = _this.validateClassesForRequired.bind(_this);
            return _this;
        }
        Object.defineProperty(PoRichTextComponent.prototype, "errorMsg", {
            get: function () {
                return this.errorMessage !== '' && !this.value && this.required && this.invalid ? this.errorMessage : '';
            },
            enumerable: false,
            configurable: true
        });
        PoRichTextComponent.prototype.ngAfterViewInit = function () {
            // Se não tem ngModel ou reactive form adiciona validação com classes css
            this.addKeyListeners();
            this.verifyAutoFocus();
        };
        PoRichTextComponent.prototype.ngOnDestroy = function () {
            if (!this.onChangeModel) {
                this.element.nativeElement.removeEventListener('keyup', this.listener);
                this.element.nativeElement.removeEventListener('keydown', this.listener);
                this.element.nativeElement.removeEventListener('cut', this.listener);
                this.element.nativeElement.removeEventListener('paste', this.listener);
            }
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoRichTextComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoRichTextComponent, { static: true }) richText: PoRichTextComponent;
         *
         * focusRichText() {
         *   this.richText.focus();
         * }
         * ```
         */
        PoRichTextComponent.prototype.focus = function () {
            this.bodyElement.focus();
        };
        PoRichTextComponent.prototype.onBlur = function () {
            var _a;
            (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
        };
        PoRichTextComponent.prototype.onChangeValue = function (value) {
            this.change.emit(value);
        };
        PoRichTextComponent.prototype.updateValue = function (value) {
            this.value = value;
            this.invalid = !value;
            this.controlChangeModelEmitter(this.value);
            this.updateModel(this.value);
        };
        PoRichTextComponent.prototype.addKeyListeners = function () {
            if (!this.onChangeModel) {
                this.element.nativeElement.addEventListener('keyup', this.listener);
                this.element.nativeElement.addEventListener('keydown', this.listener);
                this.element.nativeElement.addEventListener('cut', this.listener);
                this.element.nativeElement.addEventListener('paste', this.listener);
            }
        };
        PoRichTextComponent.prototype.controlChangeModelEmitter = function (value) {
            if (this.modelLastUpdate !== value) {
                this.changeModel.emit(value);
                this.modelLastUpdate = value;
            }
        };
        PoRichTextComponent.prototype.verifyAutoFocus = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoRichTextComponent.prototype.validateClassesForRequired = function () {
            var _this = this;
            setTimeout(function () {
                var value = _this.value;
                var element = _this.element.nativeElement;
                if (!value && _this.required) {
                    element.classList.add('ng-invalid');
                    element.classList.add('ng-dirty');
                }
                else {
                    element.classList.remove('ng-invalid');
                }
            });
        };
        return PoRichTextComponent;
    }(PoRichTextBaseComponent));
    PoRichTextComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-rich-text',
                    template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content\">\r\n    <po-rich-text-body\r\n      #richTextBody\r\n      [p-height]=\"height\"\r\n      [p-model-value]=\"value\"\r\n      [p-placeholder]=\"placeholder\"\r\n      [p-readonly]=\"readonly\"\r\n      (p-change)=\"onChangeValue($event)\"\r\n      (p-commands)=\"richTextToolbar.setButtonsStates($event)\"\r\n      (p-selected-link)=\"richTextToolbar.selectedLink($event)\"\r\n      (p-shortcut-command)=\"richTextToolbar.shortcutTrigger()\"\r\n      (p-value)=\"updateValue($event)\"\r\n      (p-blur)=\"onBlur()\"\r\n    >\r\n    </po-rich-text-body>\r\n\r\n    <po-rich-text-toolbar\r\n      #richTextToolbar\r\n      [p-readonly]=\"readonly\"\r\n      (p-link-editing)=\"richTextBody.linkEditing($event)\"\r\n      (p-command)=\"richTextBody.executeCommand($event)\"\r\n    >\r\n    </po-rich-text-toolbar>\r\n  </div>\r\n\r\n  <po-field-container-bottom [p-error-pattern]=\"errorMsg\"></po-field-container-bottom>\r\n</po-field-container>\r\n",
                    providers: providers
                },] }
    ];
    PoRichTextComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PoRichTextService }
    ]; };
    PoRichTextComponent.propDecorators = {
        bodyElement: [{ type: i0.ViewChild, args: [PoRichTextBodyComponent, { static: true },] }]
    };

    var poRichTextLiteralsDefault = {
        en: {
            bold: 'Bold',
            italic: 'Italic',
            underline: 'Underline',
            left: 'Left',
            center: 'Center',
            right: 'Right',
            justify: 'Justify',
            textColor: 'Text color',
            unorderedList: 'Bulleted list',
            insertLink: 'Insert link',
            linkTextLabel: 'Text with link',
            linkUrlTextHelper: 'Paste in the text box below the copied browser link',
            linkUrlTextPlaceholder: 'Enter the link address that will be attached to the text.',
            cancel: 'Cancel',
            editLink: 'Edit link',
            insert: 'Insert',
            insertImage: 'Insert image',
            urlImage: 'URL image'
        },
        es: {
            bold: 'Negrita',
            italic: 'Cursiva',
            underline: 'Subrayado',
            left: 'Izquierda',
            center: 'Centro',
            right: 'Derecha',
            justify: 'Justificado',
            textColor: 'Color del texto',
            unorderedList: 'Lista con viñetas',
            insertLink: 'Insertar el link',
            linkTextLabel: 'Texto con enlace',
            linkUrlTextHelper: 'Pegue en el cuadro de texto debajo del enlace del navegador copiado',
            linkUrlTextPlaceholder: 'Ingrese la dirección del enlace que se adjuntará al texto.',
            cancel: 'Cancelar',
            editLink: 'Editar enlace',
            insert: 'Insertar',
            insertImage: 'Insertar imagen',
            urlImage: 'Imagen URL'
        },
        pt: {
            bold: 'Negrito',
            italic: 'Itálico',
            underline: 'Sublinhado',
            left: 'Esquerda',
            center: 'Centro',
            right: 'Direita',
            justify: 'Justificado',
            textColor: 'Cor do texto',
            unorderedList: 'Lista com marcadores',
            insertLink: 'Inserir link',
            linkTextLabel: 'Texto com link',
            linkUrlTextHelper: 'Cole na caixa de texto abaixo o link copiado do navegador',
            linkUrlTextPlaceholder: 'Insira o endereço do link que será anexado ao texto',
            cancel: 'Cancelar',
            editLink: 'Editar link',
            insert: 'Inserir',
            insertImage: 'Inserir imagem',
            urlImage: 'Imagem em URL'
        },
        ru: {
            bold: 'Жирный',
            italic: 'Италик',
            underline: 'Подчеркивание',
            left: 'Влево',
            center: 'Центр',
            right: 'Вправо',
            justify: 'Растянуть',
            textColor: 'Цвет текста',
            unorderedList: 'Список',
            insertLink: 'Вставьте ссылку',
            linkTextLabel: 'Текст со ссылкой',
            linkUrlTextHelper: 'Вставьте в текстовое поле ниже скопированную ссылку',
            linkUrlTextPlaceholder: 'Вставьте ссылку для привязки к тексту',
            cancel: 'Отмена',
            editLink: 'Редактировать ссылку',
            insert: 'Вставить',
            insertImage: 'Вставить изображение',
            urlImage: 'Ссылка на изображение'
        }
    };

    var uploadRestrictions = ['.apng', '.bmp', '.gif', '.ico', '.jpeg', '.jpg', '.png', '.svg'];
    var PoRichTextImageModalComponent = /** @class */ (function () {
        function PoRichTextImageModalComponent(languageService) {
            var _this = this;
            this.languageService = languageService;
            this.command = new i0.EventEmitter();
            this.selection = document.getSelection();
            this.uploadRestrictions = {
                allowedExtensions: uploadRestrictions
            };
            this.literals = Object.assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
            this.modalCancelAction = {
                label: this.literals.cancel,
                action: function () {
                    _this.modal.close();
                    _this.command.emit();
                    _this.retrieveCursorPosition();
                    _this.cleanUpFields();
                }
            };
            this.modalConfirmAction = {
                label: this.literals.insert,
                disabled: false,
                action: function () { return _this.insertElementRef(); }
            };
        }
        Object.defineProperty(PoRichTextImageModalComponent.prototype, "isUploadValid", {
            get: function () {
                return !!(this.uploadModel && this.uploadModel.length);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoRichTextImageModalComponent.prototype, "isUrlValid", {
            get: function () {
                return !!this.urlImage && this.modalImageForm && this.modalImageForm.valid;
            },
            enumerable: false,
            configurable: true
        });
        PoRichTextImageModalComponent.prototype.openModal = function () {
            this.saveCursorPosition();
            this.modal.open();
        };
        PoRichTextImageModalComponent.prototype.cleanUpFields = function () {
            this.urlImage = undefined;
            this.uploadModel = undefined;
        };
        PoRichTextImageModalComponent.prototype.convertToBase64 = function () {
            return __awaiter(this, void 0, void 0, function () {
                var uploadImage;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.isUploadValid) return [3 /*break*/, 2];
                            uploadImage = this.uploadModel[0].rawFile;
                            return [4 /*yield*/, convertImageToBase64(uploadImage)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        PoRichTextImageModalComponent.prototype.emitCommand = function (value) {
            var command;
            if (value) {
                command = 'insertImage';
                this.command.emit({ command: command, value: value });
            }
        };
        PoRichTextImageModalComponent.prototype.insertElementRef = function () {
            return __awaiter(this, void 0, void 0, function () {
                var uploadImage;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.urlImage) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.convertToBase64()];
                        case 1:
                            uploadImage = _a.sent();
                            _a.label = 2;
                        case 2:
                            this.retrieveCursorPosition();
                            this.modal.close();
                            if (this.isUrlValid || this.isUploadValid) {
                                this.emitCommand(this.urlImage || uploadImage);
                            }
                            this.cleanUpFields();
                            return [2 /*return*/];
                    }
                });
            });
        };
        PoRichTextImageModalComponent.prototype.retrieveCursorPosition = function () {
            this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
        };
        PoRichTextImageModalComponent.prototype.saveCursorPosition = function () {
            this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
        };
        return PoRichTextImageModalComponent;
    }());
    PoRichTextImageModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-rich-text-image-modal',
                    template: "<po-modal\r\n  #modal\r\n  p-hide-close\r\n  [p-primary-action]=\"modalConfirmAction\"\r\n  [p-secondary-action]=\"modalCancelAction\"\r\n  [p-title]=\"literals.insertImage\"\r\n>\r\n  <form #modalImageForm=\"ngForm\">\r\n    <div class=\"po-row\">\r\n      <!-- po-upload desabilita o drag drop caso n\u00E3o tenha valor atribuido para a propriedade p-url -->\r\n      <po-upload\r\n        #upload\r\n        class=\"po-md-12\"\r\n        name=\"upload\"\r\n        [(ngModel)]=\"uploadModel\"\r\n        p-drag-drop-height=\"160\"\r\n        p-hide-restrictions-info\r\n        p-hide-send-button\r\n        p-url=\"x\"\r\n        [p-drag-drop]=\"!modal.isHidden\"\r\n        [p-disabled]=\"isUrlValid\"\r\n        [p-restrictions]=\"uploadRestrictions\"\r\n      >\r\n      </po-upload>\r\n    </div>\r\n\r\n    <div class=\"po-row\">\r\n      <po-url\r\n        class=\"po-md-12 po-mt-3\"\r\n        name=\"url\"\r\n        [(ngModel)]=\"urlImage\"\r\n        [p-label]=\"literals.urlImage\"\r\n        [p-disabled]=\"isUploadValid\"\r\n      >\r\n      </po-url>\r\n    </div>\r\n  </form>\r\n</po-modal>\r\n"
                },] }
    ];
    PoRichTextImageModalComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoRichTextImageModalComponent.propDecorators = {
        modal: [{ type: i0.ViewChild, args: ['modal', { static: true },] }],
        modalImageForm: [{ type: i0.ViewChild, args: ['modalImageForm',] }],
        upload: [{ type: i0.ViewChild, args: ['upload', { static: true },] }],
        command: [{ type: i0.Output, args: ['p-command',] }]
    };

    var PoRichTextLinkModalComponent = /** @class */ (function () {
        function PoRichTextLinkModalComponent(languageService) {
            var _this = this;
            this.languageService = languageService;
            this.command = new i0.EventEmitter();
            this.linkEditing = new i0.EventEmitter();
            this.selection = document.getSelection();
            this.literals = Object.assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
            this.modalCancelAction = {
                label: this.literals.cancel,
                action: function () {
                    _this.modal.close();
                    _this.command.emit();
                    _this.retrieveCursorPosition();
                    _this.cleanUpFields();
                }
            };
            this.modalConfirmAction = {
                label: this.linkConfirmAction(),
                disabled: true,
                action: function () { return (_this.isLinkEditing ? _this.toEditLink() : _this.toInsertLink(_this.urlLink, _this.urlLinkText)); }
            };
        }
        PoRichTextLinkModalComponent.prototype.linkConfirmAction = function () {
            return this.isLinkEditing ? this.literals.editLink : this.literals.insertLink;
        };
        PoRichTextLinkModalComponent.prototype.formModelValidate = function () {
            var _a;
            return (this.modalConfirmAction.disabled = (_a = this.modalLinkForm) === null || _a === void 0 ? void 0 : _a.invalid);
        };
        PoRichTextLinkModalComponent.prototype.openModal = function (selectedLinkElement) {
            this.saveCursorPosition();
            this.prepareModalForLink(selectedLinkElement);
            this.modalConfirmAction.label = this.linkConfirmAction();
            this.modal.open();
        };
        PoRichTextLinkModalComponent.prototype.selectedLink = function (linkElement) {
            this.isSelectedLink = !!linkElement;
            this.linkElement = linkElement;
        };
        PoRichTextLinkModalComponent.prototype.checkIfIsEmpty = function (urlLink, urlLinkText) {
            return urlLinkText === undefined || urlLinkText.trim() === '' ? urlLink : urlLinkText;
        };
        PoRichTextLinkModalComponent.prototype.cleanUpFields = function () {
            this.urlLink = undefined;
            this.urlLinkText = undefined;
            this.isLinkEditing = false;
            this.isSelectedLink = false;
            this.linkElement = undefined;
        };
        PoRichTextLinkModalComponent.prototype.formReset = function (control) {
            control.markAsPristine();
            control.markAsUntouched();
            control.updateValueAndValidity();
        };
        PoRichTextLinkModalComponent.prototype.prepareModalForLink = function (selectedLinkElement) {
            var _this = this;
            this.saveSelectionText();
            if (this.modalLinkForm) {
                this.formReset(this.modalLinkForm.control);
            }
            setTimeout(function () {
                _this.formModelValidate();
            });
            this.selectedLink(selectedLinkElement);
            if (this.isSelectedLink) {
                this.isLinkEditing = true;
                this.setLinkEditableForModal();
            }
            this.linkEditing.emit(this.isLinkEditing);
        };
        PoRichTextLinkModalComponent.prototype.restoreSelection = function () {
            if (this.savedSelection) {
                if (this.selection) {
                    this.selection.removeAllRanges();
                    this.selection.addRange(this.savedSelection);
                }
                return true;
            }
            else {
                return false;
            }
        };
        PoRichTextLinkModalComponent.prototype.retrieveCursorPosition = function () {
            this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
        };
        PoRichTextLinkModalComponent.prototype.saveCursorPosition = function () {
            this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
        };
        PoRichTextLinkModalComponent.prototype.saveSelectionText = function () {
            if (this.selection.anchorNode !== null) {
                this.savedSelection = this.selection.getRangeAt(0);
                this.urlLinkText = this.selection.toString();
            }
            else {
                return null;
            }
        };
        PoRichTextLinkModalComponent.prototype.setLinkEditableForModal = function () {
            this.urlLinkText = this.linkElement.innerText;
            this.urlLink = this.linkElement.getAttribute('href');
        };
        PoRichTextLinkModalComponent.prototype.toEditLink = function () {
            if (isIE()) {
                this.linkElement.parentNode.removeChild(this.linkElement);
            }
            else {
                this.linkElement.remove();
            }
            this.toInsertLink(this.urlLink, this.urlLinkText);
        };
        PoRichTextLinkModalComponent.prototype.toInsertLink = function (urlLink, urlLinkText) {
            this.modal.close();
            this.restoreSelection();
            var urlLinkTextValue = this.checkIfIsEmpty(urlLink, urlLinkText);
            var urlAsExternalLink = isExternalLink(urlLink) ? urlLink : "http://" + urlLink;
            var command = 'InsertHTML';
            var value = { urlLink: urlAsExternalLink, urlLinkText: urlLinkTextValue };
            this.command.emit({ command: command, value: value });
            this.cleanUpFields();
        };
        return PoRichTextLinkModalComponent;
    }());
    PoRichTextLinkModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-rich-text-link-modal',
                    template: "<po-modal\r\n  #modal\r\n  p-hide-close\r\n  [p-primary-action]=\"modalConfirmAction\"\r\n  [p-secondary-action]=\"modalCancelAction\"\r\n  [p-title]=\"linkConfirmAction()\"\r\n>\r\n  <form #modalLinkForm=\"ngForm\">\r\n    <div class=\"po-row\">\r\n      <po-input\r\n        class=\"po-md-12 po-mb-2\"\r\n        name=\"urlLinkText\"\r\n        [(ngModel)]=\"urlLinkText\"\r\n        p-optional\r\n        [p-label]=\"literals.linkTextLabel\"\r\n        [p-placeholder]=\"literals.linkTextLabel\"\r\n      >\r\n      </po-input>\r\n\r\n      <po-url\r\n        class=\"po-md-12\"\r\n        name=\"urlLink\"\r\n        [(ngModel)]=\"urlLink\"\r\n        p-label=\"Link\"\r\n        p-required\r\n        [p-help]=\"literals.linkUrlTextHelper\"\r\n        [p-placeholder]=\"literals.linkUrlTextPlaceholder\"\r\n        (p-change-model)=\"formModelValidate()\"\r\n      >\r\n      </po-url>\r\n    </div>\r\n  </form>\r\n</po-modal>\r\n"
                },] }
    ];
    PoRichTextLinkModalComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoRichTextLinkModalComponent.propDecorators = {
        modal: [{ type: i0.ViewChild, args: ['modal', { static: true },] }],
        modalLinkForm: [{ type: i0.ViewChild, args: ['modalLinkForm',] }],
        command: [{ type: i0.Output, args: ['p-command',] }],
        linkEditing: [{ type: i0.Output, args: ['p-link-editing',] }]
    };

    var poRichTextDefaultColor = '#000000';
    var PoRichTextToolbarComponent = /** @class */ (function () {
        function PoRichTextToolbarComponent(languageService) {
            var _this = this;
            this.languageService = languageService;
            this.command = new i0.EventEmitter();
            this.modal = new i0.EventEmitter();
            this.linkEditing = new i0.EventEmitter();
            this.literals = Object.assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
            this.alignButtons = [
                {
                    command: 'justifyleft',
                    icon: 'po-icon-align-left',
                    tooltip: this.literals.left,
                    action: this.emitAlignCommand.bind(this, 'justifyleft'),
                    selected: true
                },
                {
                    command: 'justifycenter',
                    icon: 'po-icon-align-center',
                    tooltip: this.literals.center,
                    action: this.emitAlignCommand.bind(this, 'justifycenter')
                },
                {
                    command: 'justifyright',
                    icon: 'po-icon-align-right',
                    tooltip: this.literals.right,
                    action: this.emitAlignCommand.bind(this, 'justifyright')
                },
                {
                    command: 'justifyfull',
                    icon: 'po-icon-align-justify',
                    tooltip: this.literals.justify,
                    action: this.emitAlignCommand.bind(this, 'justifyfull')
                }
            ];
            this.formatButtons = [
                {
                    command: 'bold',
                    icon: 'po-icon-text-bold',
                    tooltip: this.literals.bold,
                    action: this.emitCommand.bind(this, 'bold')
                },
                {
                    command: 'italic',
                    icon: 'po-icon-text-italic',
                    tooltip: this.literals.italic,
                    action: this.emitCommand.bind(this, 'italic')
                },
                {
                    command: 'underline',
                    icon: 'po-icon-text-underline',
                    tooltip: this.literals.underline,
                    action: this.emitCommand.bind(this, 'underline')
                }
            ];
            this.listButtons = [
                {
                    command: 'insertUnorderedList',
                    icon: 'po-icon-list',
                    tooltip: this.literals.unorderedList,
                    action: this.emitCommand.bind(this, 'insertUnorderedList')
                }
            ];
            this.linkButtons = [
                {
                    command: 'Createlink',
                    icon: 'po-icon-link',
                    tooltip: this.literals.insertLink + " (Ctrl + K)",
                    action: function () { return _this.richTextLinkModal.openModal(_this.selectedLinkElement); }
                }
            ];
            this.mediaButtons = [
                {
                    tooltip: this.literals.insertImage,
                    icon: 'po-icon-picture',
                    action: function () { return _this.richTextImageModal.openModal(); }
                }
            ];
        }
        Object.defineProperty(PoRichTextToolbarComponent.prototype, "readonly", {
            get: function () {
                return this._readonly;
            },
            set: function (value) {
                this._readonly = value;
                this.toggleDisableButtons(this._readonly);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoRichTextToolbarComponent.prototype, "isInternetExplorer", {
            get: function () {
                return isIE();
            },
            enumerable: false,
            configurable: true
        });
        PoRichTextToolbarComponent.prototype.ngAfterViewInit = function () {
            this.removeButtonFocus();
            this.setColorInColorPicker(poRichTextDefaultColor);
        };
        PoRichTextToolbarComponent.prototype.changeTextColor = function (value) {
            var command = 'foreColor';
            this.command.emit({ command: command, value: value });
        };
        PoRichTextToolbarComponent.prototype.emitLinkEditing = function (isLinkEdit) {
            this.linkEditing.emit(isLinkEdit);
        };
        PoRichTextToolbarComponent.prototype.selectedLink = function (selectedLinkElement) {
            this.selectedLinkElement = selectedLinkElement;
        };
        PoRichTextToolbarComponent.prototype.setButtonsStates = function (obj) {
            if (!this.readonly) {
                this.alignButtons.forEach(function (button) { return (button.selected = obj.commands.includes(button.command)); });
                this.formatButtons.forEach(function (button) { return (button.selected = obj.commands.includes(button.command)); });
                this.listButtons[0].selected = obj.commands.includes(this.listButtons[0].command);
                this.linkButtons[0].selected = obj.commands.includes(this.linkButtons[0].command);
                this.setColorInColorPicker(obj.hexColor);
            }
        };
        PoRichTextToolbarComponent.prototype.shortcutTrigger = function () {
            this.richTextLinkModal.openModal(this.selectedLinkElement);
        };
        PoRichTextToolbarComponent.prototype.emitCommand = function (command) {
            this.command.emit(command);
        };
        PoRichTextToolbarComponent.prototype.emitAlignCommand = function (command) {
            var index = this.alignButtons.findIndex(function (btn) { return btn.command === command; });
            if (this.alignButtons[index].selected) {
                this.alignButtons[index].selected = false;
            }
            this.command.emit(command);
        };
        PoRichTextToolbarComponent.prototype.removeButtonFocus = function () {
            var buttons = this.toolbarElement.nativeElement.querySelectorAll('button');
            buttons.forEach(function (button) { return button.setAttribute('tabindex', '-1'); });
        };
        PoRichTextToolbarComponent.prototype.setColorInColorPicker = function (color) {
            this.colorPickerInput.nativeElement.value = color;
        };
        PoRichTextToolbarComponent.prototype.toggleDisableButtons = function (state) {
            this.alignButtons.forEach(function (button) { return (button.disabled = state); });
            this.formatButtons.forEach(function (button) { return (button.disabled = state); });
            this.listButtons[0].disabled = state;
            this.linkButtons[0].disabled = state;
            this.mediaButtons[0].disabled = state;
        };
        return PoRichTextToolbarComponent;
    }());
    PoRichTextToolbarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-rich-text-toolbar',
                    template: "<div class=\"po-rich-text-toolbar\" #toolbarElement>\r\n  <div class=\"po-rich-text-toolbar-button-align\">\r\n    <po-button-group p-toggle=\"multiple\" [p-buttons]=\"formatButtons\"> </po-button-group>\r\n  </div>\r\n\r\n  <div *ngIf=\"!isInternetExplorer\" class=\"po-rich-text-toolbar-button-align\">\r\n    <div class=\"po-rich-text-toolbar-color-picker-container\">\r\n      <button\r\n        class=\"po-button po-text-ellipsis po-rich-text-toolbar-color-picker-button\"\r\n        [disabled]=\"readonly\"\r\n        [p-tooltip]=\"literals.textColor\"\r\n      >\r\n        <input\r\n          #colorPickerInput\r\n          class=\"po-rich-text-toolbar-color-picker-input\"\r\n          type=\"color\"\r\n          [disabled]=\"readonly\"\r\n          (change)=\"changeTextColor($event.target.value)\"\r\n        />\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"po-rich-text-toolbar-button-align\">\r\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"alignButtons\"> </po-button-group>\r\n  </div>\r\n\r\n  <div class=\"po-rich-text-toolbar-button-align\">\r\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"listButtons\"> </po-button-group>\r\n  </div>\r\n\r\n  <div class=\"po-rich-text-toolbar-button-align\">\r\n    <po-button-group [p-buttons]=\"linkButtons\"> </po-button-group>\r\n  </div>\r\n\r\n  <div class=\"po-rich-text-toolbar-button-align\">\r\n    <po-button-group [p-buttons]=\"mediaButtons\"> </po-button-group>\r\n  </div>\r\n</div>\r\n\r\n<po-rich-text-image-modal #richTextImageModal (p-command)=\"emitCommand($event)\"> </po-rich-text-image-modal>\r\n\r\n<po-rich-text-link-modal\r\n  #richTextLinkModal\r\n  (p-command)=\"emitCommand($event)\"\r\n  (p-link-editing)=\"emitLinkEditing($event)\"\r\n>\r\n</po-rich-text-link-modal>\r\n"
                },] }
    ];
    PoRichTextToolbarComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoRichTextToolbarComponent.propDecorators = {
        colorPickerInput: [{ type: i0.ViewChild, args: ['colorPickerInput', { read: i0.ElementRef },] }],
        toolbarElement: [{ type: i0.ViewChild, args: ['toolbarElement', { static: true },] }],
        richTextImageModal: [{ type: i0.ViewChild, args: [PoRichTextImageModalComponent, { static: true },] }],
        richTextLinkModal: [{ type: i0.ViewChild, args: [PoRichTextLinkModalComponent, { static: true },] }],
        command: [{ type: i0.Output, args: ['p-command',] }],
        modal: [{ type: i0.Output, args: ['p-modal',] }],
        linkEditing: [{ type: i0.Output, args: ['p-link-editing',] }],
        readonly: [{ type: i0.Input, args: ['p-readonly',] }]
    };

    /**
     * @docsExtends PoInputBaseComponent
     *
     * @example
     *
     * <example name="po-input-basic" title="PO Input Basic">
     *  <file name="sample-po-input-basic/sample-po-input-basic.component.html"> </file>
     *  <file name="sample-po-input-basic/sample-po-input-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-input-labs" title="PO Input Labs">
     *  <file name="sample-po-input-labs/sample-po-input-labs.component.html"> </file>
     *  <file name="sample-po-input-labs/sample-po-input-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-input-reactive-form" title="PO Input - Reactive Form">
     *  <file name="sample-po-input-reactive-form/sample-po-input-reactive-form.component.html"> </file>
     *  <file name="sample-po-input-reactive-form/sample-po-input-reactive-form.component.ts"> </file>
     * </example>
     */
    var PoInputComponent = /** @class */ (function (_super) {
        __extends(PoInputComponent, _super);
        /* istanbul ignore next */
        function PoInputComponent(el, cd) {
            return _super.call(this, el, cd) || this;
        }
        PoInputComponent.prototype.extraValidation = function (c) {
            return null;
        };
        return PoInputComponent;
    }(PoInputGeneric));
    PoInputComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-input',
                    template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content\">\r\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\r\n      <po-icon class=\"po-field-icon\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\r\n    </div>\r\n\r\n    <input\r\n      #inp\r\n      class=\"po-input\"\r\n      [attr.name]=\"name\"\r\n      [autocomplete]=\"autocomplete\"\r\n      [class.po-input-icon-left]=\"icon\"\r\n      [class.po-input-icon-right]=\"clean\"\r\n      [disabled]=\"disabled\"\r\n      [placeholder]=\"placeholder\"\r\n      [readonly]=\"readonly\"\r\n      [required]=\"required\"\r\n      [type]=\"type\"\r\n      (blur)=\"eventOnBlur($event)\"\r\n      (click)=\"eventOnClick($event)\"\r\n      (focus)=\"eventOnFocus($event)\"\r\n      (input)=\"eventOnInput($event)\"\r\n    />\r\n\r\n    <div class=\"po-field-icon-container-right\">\r\n      <po-clean *ngIf=\"clean && !disabled && !readonly\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\">\r\n      </po-clean>\r\n    </div>\r\n  </div>\r\n\r\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\r\n</po-field-container>\r\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return PoInputComponent; }),
                            multi: true
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return PoInputComponent; }),
                            multi: true
                        }
                    ],
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoInputComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };

    var PoNumberBaseComponent = /** @class */ (function (_super) {
        __extends(PoNumberBaseComponent, _super);
        /* istanbul ignore next */
        function PoNumberBaseComponent(elementRef, cd) {
            var _this = _super.call(this, elementRef, cd) || this;
            _this.type = 'number';
            _this.invalidInputValueOnBlur = false;
            return _this;
        }
        PoNumberBaseComponent.prototype.eventOnInput = function (e) {
            if (!this.mask) {
                var value = e.target.value;
                var valueMaxlength = this.validMaxLength(this.maxlength, value);
                this.invalidInputValueOnBlur = false;
                if (value !== valueMaxlength) {
                    value = valueMaxlength;
                    this.inputEl.nativeElement.value = value;
                }
                this.callOnChange(this.formatNumber(value));
            }
        };
        PoNumberBaseComponent.prototype.onBlur = function (event) {
            var target = event.target;
            this.invalidInputValueOnBlur = target.value === '' && !target.validity.valid;
            if (this.invalidInputValueOnBlur) {
                this.callOnChange('Valor Inválido');
            }
            this.eventOnBlur(event);
        };
        PoNumberBaseComponent.prototype.onKeyDown = function (event) {
            if (!this.isKeyAllowed(event)) {
                event.stopPropagation();
                event.preventDefault();
            }
        };
        PoNumberBaseComponent.prototype.validMaxLength = function (maxlength, value) {
            if (maxlength && value.length > maxlength) {
                var substringValue = value.toString().substring(0, maxlength);
                if (substringValue && this.isEndWithDot(substringValue)) {
                    return substringValue.toString().substring(0, maxlength - 1);
                }
                return substringValue;
            }
            return value;
        };
        PoNumberBaseComponent.prototype.writeValueModel = function (value) {
            if (this.inputEl) {
                if (value || value === 0) {
                    if (this.mask) {
                        this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                        // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                        if (this.objMask.formatModel) {
                            this.onChangePropagate(this.objMask.valueToModel);
                        }
                    }
                    else {
                        this.inputEl.nativeElement.value = value;
                    }
                }
                else {
                    // Se for o valor for undefined, deve limpar o campo
                    this.inputEl.nativeElement.value = '';
                }
            }
            // Emite evento quando o model é atualizado, inclusive a primeira vez
            this.changeModel.emit(value);
        };
        PoNumberBaseComponent.prototype.isEndWithDot = function (value) {
            return value && value.lastIndexOf('.') === value.length - 1;
        };
        PoNumberBaseComponent.prototype.formatNumber = function (value) {
            return value ? Number(value) : null;
        };
        PoNumberBaseComponent.prototype.isKeyAllowed = function (event) {
            return this.isShortcut(event) || this.isControlKeys(event) || !this.isInvalidKey(event.key);
        };
        PoNumberBaseComponent.prototype.isInvalidKey = function (key) {
            var validatesKey = new RegExp(/[a-zA-Z:;=_´`^~"'?!@#$%¨&*()><{}çÇ\[\]/\\|]+/);
            return validatesKey.test(key);
        };
        PoNumberBaseComponent.prototype.isShortcut = function (event) {
            var key = event.keyCode;
            var ctrl = event.ctrlKey || event.metaKey;
            var keyA = key === 65;
            var keyC = key === 67;
            var keyX = key === 88;
            var keyV = key === 86;
            return (ctrl && keyC) || (ctrl && keyV) || (ctrl && keyA) || (ctrl && keyX);
        };
        PoNumberBaseComponent.prototype.isControlKeys = function (event) {
            var controlKeys = [
                'Backspace',
                'ArrowLeft',
                'ArrowRight',
                'ArrowUp',
                'ArrowDown',
                'Left',
                'Right',
                'Up',
                'Down',
                'Tab',
                'Delete'
            ];
            return controlKeys.indexOf(event.key) !== -1;
        };
        return PoNumberBaseComponent;
    }(PoInputGeneric));
    PoNumberBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoNumberBaseComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };

    /**
     * @docsExtends PoInputBaseComponent
     *
     * @description
     *
     * O `po-number` é um input específico para receber apenas números.
     * É possível configurar um valor mínimo, máximo e um step com p-min, p-max e p-step,
     * respectivamente.
     *
     * @example
     *
     * <example name="po-number-basic" title="PO Number Basic">
     *  <file name="sample-po-number-basic/sample-po-number-basic.component.html"> </file>
     *  <file name="sample-po-number-basic/sample-po-number-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-number-labs" title="PO Number Labs">
     *  <file name="sample-po-number-labs/sample-po-number-labs.component.html"> </file>
     *  <file name="sample-po-number-labs/sample-po-number-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-number-calculate" title="PO Number - Calculate">
     *  <file name="sample-po-number-calculate/sample-po-number-calculate.component.html"> </file>
     *  <file name="sample-po-number-calculate/sample-po-number-calculate.component.ts"> </file>
     * </example>
     */
    var PoNumberComponent = /** @class */ (function (_super) {
        __extends(PoNumberComponent, _super);
        /* istanbul ignore next */
        function PoNumberComponent(el, cd) {
            var _this = _super.call(this, el, cd) || this;
            /**
             * @optional
             *
             * @description
             *
             * Intervalo.
             *
             * @default 1
             */
            _this.step = '1';
            return _this;
        }
        Object.defineProperty(PoNumberComponent.prototype, "setMin", {
            set: function (min) {
                this.min = !isNaN(min) ? min : undefined;
                this.validateModel();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoNumberComponent.prototype, "setMax", {
            set: function (max) {
                this.max = !isNaN(max) ? max : undefined;
                this.validateModel();
            },
            enumerable: false,
            configurable: true
        });
        PoNumberComponent.prototype.extraValidation = function (abstractControl) {
            // Verifica se já possui algum error pattern padrão.
            this.errorPattern = this.errorPattern !== 'Valor Inválido' ? this.errorPattern : '';
            if (minFailed(this.min, abstractControl.value)) {
                return {
                    min: {
                        valid: false
                    }
                };
            }
            if (maxFailed(this.max, abstractControl.value)) {
                return {
                    max: {
                        valid: false
                    }
                };
            }
            if (this.invalidInputValueOnBlur) {
                this.errorPattern = this.errorPattern || 'Valor Inválido';
                return {
                    number: {
                        valid: false
                    }
                };
            }
            return null;
        };
        PoNumberComponent.prototype.getErrorPatternMessage = function () {
            return this.errorPattern !== '' && this.containsInvalidClass() ? this.errorPattern : '';
        };
        PoNumberComponent.prototype.containsInvalidClass = function () {
            return ((this.el.nativeElement.classList.contains('ng-invalid') &&
                this.el.nativeElement.classList.contains('ng-dirty') &&
                this.inputEl.nativeElement.value !== '') ||
                this.invalidInputValueOnBlur);
        };
        return PoNumberComponent;
    }(PoNumberBaseComponent));
    PoNumberComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-number',
                    template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content\">\r\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\r\n      <po-icon class=\"po-field-icon\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\r\n    </div>\r\n    <input\r\n      #inp\r\n      class=\"po-input\"\r\n      type=\"number\"\r\n      [attr.max]=\"max\"\r\n      [attr.min]=\"min\"\r\n      [attr.name]=\"name\"\r\n      [attr.step]=\"step\"\r\n      [autocomplete]=\"autocomplete\"\r\n      [class.po-input-icon-left]=\"icon\"\r\n      [class.po-input-icon-right]=\"clean\"\r\n      [disabled]=\"disabled\"\r\n      [placeholder]=\"placeholder\"\r\n      [readonly]=\"readonly\"\r\n      [required]=\"required\"\r\n      [tabindex]=\"disabled ? -1 : 0\"\r\n      (blur)=\"onBlur($event)\"\r\n      (focus)=\"eventOnFocus($event)\"\r\n      (input)=\"eventOnInput($event)\"\r\n      (keydown)=\"onKeyDown($event)\"\r\n    />\r\n\r\n    <div class=\"po-field-icon-container-right\">\r\n      <po-clean\r\n        *ngIf=\"clean && !disabled && !readonly\"\r\n        [p-default-value]=\"null\"\r\n        [p-element-ref]=\"inputEl\"\r\n        (p-change-event)=\"clear($event)\"\r\n      >\r\n      </po-clean>\r\n    </div>\r\n  </div>\r\n\r\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPatternMessage()\"> </po-field-container-bottom>\r\n</po-field-container>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return PoNumberComponent; }),
                            multi: true
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return PoNumberComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    PoNumberComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    PoNumberComponent.propDecorators = {
        step: [{ type: i0.Input, args: ['p-step',] }],
        setMin: [{ type: i0.Input, args: ['p-min',] }],
        setMax: [{ type: i0.Input, args: ['p-max',] }]
    };

    /**
     * @docsExtends PoInputBaseComponent
     *
     * @description
     * O po-password é um input específico para senhas. Já possui tipo, estilo e ícone predefinidos.
     *
     * @example
     *
     * <example name="po-password-basic" title="PO Password Basic">
     *   <file name="sample-po-password-basic/sample-po-password-basic.component.html"> </file>
     *   <file name="sample-po-password-basic/sample-po-password-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-password-labs" title="PO Password Labs">
     *   <file name="sample-po-password-labs/sample-po-password-labs.component.html"> </file>
     *   <file name="sample-po-password-labs/sample-po-password-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-password-reset" title="PO Password - Reset">
     *   <file name="sample-po-password-reset/sample-po-password-reset.component.html"> </file>
     *   <file name="sample-po-password-reset/sample-po-password-reset.component.ts"> </file>
     * </example>
     */
    var PoPasswordComponent = /** @class */ (function (_super) {
        __extends(PoPasswordComponent, _super);
        /* istanbul ignore next */
        function PoPasswordComponent(el, cd) {
            var _this = _super.call(this, el, cd) || this;
            _this.type = 'password';
            _this.visiblePassword = false;
            _this._hidePasswordPeek = false;
            return _this;
        }
        Object.defineProperty(PoPasswordComponent.prototype, "hidePasswordPeek", {
            get: function () {
                return this._hidePasswordPeek;
            },
            /**
             * @optional
             *
             * @description
             *
             * Permite esconder a função de espiar a senha digitada.
             *
             * @default `false`
             */
            set: function (value) {
                this._hidePasswordPeek = convertToBoolean(value);
                if (value) {
                    this.visiblePassword = false;
                    this.type = 'password';
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoPasswordComponent.prototype, "autocomplete", {
            get: function () {
                return this.noAutocomplete ? 'new-password' : 'on';
            },
            enumerable: false,
            configurable: true
        });
        PoPasswordComponent.prototype.extraValidation = function (c) {
            return null;
        };
        PoPasswordComponent.prototype.showPassword = function () {
            this.visiblePassword = !this.visiblePassword;
            this.type = this.type === 'password' ? 'text' : 'password';
        };
        return PoPasswordComponent;
    }(PoInputGeneric));
    PoPasswordComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-password',
                    template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content\">\r\n    <div class=\"po-field-icon-container-left\">\r\n      <span class=\"po-icon po-field-icon po-icon-lock\" [class.po-field-icon-disabled]=\"disabled\"> </span>\r\n    </div>\r\n\r\n    <input\r\n      #inp\r\n      class=\"po-input po-input-icon-left\"\r\n      [attr.name]=\"name\"\r\n      [autocomplete]=\"autocomplete\"\r\n      [class.po-input-double-icon-right]=\"clean && inp.value && !hidePasswordPeek\"\r\n      [class.po-input-icon-right]=\"clean || !hidePasswordPeek\"\r\n      [disabled]=\"disabled\"\r\n      [placeholder]=\"placeholder\"\r\n      [readonly]=\"readonly\"\r\n      [required]=\"required\"\r\n      [type]=\"disabled ? 'password' : type\"\r\n      (blur)=\"eventOnBlur($event)\"\r\n      (click)=\"eventOnClick($event)\"\r\n      (focus)=\"eventOnFocus($event)\"\r\n      (input)=\"eventOnInput($event)\"\r\n    />\r\n\r\n    <div class=\"po-field-icon-container-right\">\r\n      <po-clean *ngIf=\"clean && !disabled && !readonly\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\">\r\n      </po-clean>\r\n\r\n      <span\r\n        *ngIf=\"!hidePasswordPeek && !disabled\"\r\n        class=\"po-icon po-field-icon\"\r\n        [ngClass]=\"visiblePassword ? 'po-icon-eye' : 'po-icon-eye-off po-field-icon-disabled'\"\r\n        (click)=\"showPassword()\"\r\n      >\r\n      </span>\r\n    </div>\r\n  </div>\r\n\r\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\r\n</po-field-container>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return PoPasswordComponent; }),
                            multi: true
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return PoPasswordComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    PoPasswordComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    PoPasswordComponent.propDecorators = {
        hidePasswordPeek: [{ type: i0.Input, args: ['p-hide-password-peek',] }]
    };

    var poRadioGroupColumnsDefaultLength = 6;
    var poRadioGroupColumnsTotalLength = 12;
    /**
     * @description
     *
     * O componente `po-radio-group` deve ser utilizado para disponibilizar múltiplas opções ao usuário, permitindo a ele que
     * selecione apenas uma delas. Seu uso é recomendado para um número pequeno de opções, caso contrário, recomenda-se o uso
     * do [**po-combo**](/documentation/po-combo) ou [**po-select**](/documentation/po-select).
     *
     * Este não é um componente de multiseleção, se for este o caso, deve-se utilizar o
     * [**po-checkbox-group**](/documentation/po-checkbox-group).
     *
     * > Ao passar um valor para o *model* que não esteja na lista de opções, o mesmo será definido como `undefined`.
     */
    var PoRadioGroupBaseComponent = /** @class */ (function () {
        function PoRadioGroupBaseComponent() {
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /**
             * @optional
             *
             * @description
             *
             * Evento ao alterar valor do campo.
             */
            this.change = new i0.EventEmitter();
            this.mdColumns = poRadioGroupColumnsDefaultLength;
            this._columns = poRadioGroupColumnsDefaultLength;
            this._disabled = false;
            this._required = false;
            this.onChangePropagate = null;
        }
        Object.defineProperty(PoRadioGroupBaseComponent.prototype, "columns", {
            get: function () {
                return this._columns;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a quantidade de colunas para exibição das opções.
             *
             * **Considerações:**
             *  - É possível exibir as opções entre `1` e `4` colunas.
             *  - O número máximo de colunas é invariável nas seguintes resoluções:
             *    + `sm`: `1`
             *    + `md`: `2`
             *
             * @default `2`
             */
            set: function (value) {
                var columns = convertToInt(value, poRadioGroupColumnsDefaultLength);
                this._columns = this.getGridSystemColumns(columns, 4);
                this.mdColumns = this.getGridSystemColumns(columns, 2);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoRadioGroupBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será desabilitado.
             *
             * @default `false`
             */
            set: function (disabled) {
                this._disabled = convertToBoolean(disabled);
                this.validateModel();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoRadioGroupBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: function (required) {
                this._required = convertToBoolean(required);
                this.validateModel();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoRadioGroupBaseComponent.prototype, "options", {
            get: function () {
                return this._options;
            },
            /**
             * Lista de opções que serão exibidas.
             * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoRadioGroupOption.
             */
            set: function (value) {
                this._options = value;
                removeDuplicatedOptions(this.options);
            },
            enumerable: false,
            configurable: true
        });
        // Função que controla quando deve ser emitido onChange e atualiza o Model
        PoRadioGroupBaseComponent.prototype.changeValue = function (changedValue) {
            if (this.onChangePropagate) {
                this.onChangePropagate(changedValue);
            }
            if (this.value !== changedValue) {
                this.change.emit(changedValue);
            }
            this.value = changedValue;
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar os estados de habilitado via forms api
        PoRadioGroupBaseComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        PoRadioGroupBaseComponent.prototype.registerOnChange = function (fn) {
            this.onChangePropagate = fn;
        };
        PoRadioGroupBaseComponent.prototype.registerOnTouched = function (fn) { };
        PoRadioGroupBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoRadioGroupBaseComponent.prototype.validate = function (abstractControl) {
            if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
        };
        PoRadioGroupBaseComponent.prototype.writeValue = function (modelValue) {
            this.value = modelValue;
            // Busca radio com o valor especificado
            var element = this.getElementByValue(modelValue);
            if (!element && this.onChangePropagate) {
                this.value = undefined;
                this.onChangePropagate(this.value);
            }
        };
        PoRadioGroupBaseComponent.prototype.checkColumnsRange = function (columns, maxColumns) {
            var minColumns = 1;
            return columns >= minColumns && columns <= maxColumns;
        };
        PoRadioGroupBaseComponent.prototype.getGridSystemColumns = function (columns, maxColumns) {
            var gridSystemColumns = poRadioGroupColumnsTotalLength / columns;
            return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poRadioGroupColumnsDefaultLength;
        };
        PoRadioGroupBaseComponent.prototype.validateModel = function () {
            if (this.validatorChange) {
                this.validatorChange();
            }
        };
        return PoRadioGroupBaseComponent;
    }());
    PoRadioGroupBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoRadioGroupBaseComponent.propDecorators = {
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        optional: [{ type: i0.Input, args: ['p-optional',] }],
        change: [{ type: i0.Output, args: ['p-change',] }],
        columns: [{ type: i0.Input, args: ['p-columns',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        required: [{ type: i0.Input, args: ['p-required',] }],
        options: [{ type: i0.Input, args: ['p-options',] }]
    };
    __decorate([
        InputBoolean()
    ], PoRadioGroupBaseComponent.prototype, "autoFocus", void 0);

    /**
     * @docsExtends PoRadioGroupBaseComponent
     *
     * @example
     *
     * <example name="po-radio-group-basic" title="PO Radio Group Basic">
     *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.html"> </file>
     *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.ts"> </file>
     *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="po-radio-group-labs" title="PO Radio Group Labs">
     *  <file name="sample-po-radio-group-labs/sample-po-radio-group-labs.component.html"> </file>
     *  <file name="sample-po-radio-group-labs/sample-po-radio-group-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-radio-group-translator" title="PO Radio Group - Translator">
     *  <file name="sample-po-radio-group-translator/sample-po-radio-group-translator.component.html"> </file>
     *  <file name="sample-po-radio-group-translator/sample-po-radio-group-translator.component.ts"> </file>
     * </example>
     *
     * <example name="po-radio-group-translator-reactive-form" title="PO Radio Group - Translator Reactive Form">
     *  <file name="sample-po-radio-group-translator-reactive-form/sample-po-radio-group-translator-reactive-form.component.html"> </file>
     *  <file name="sample-po-radio-group-translator-reactive-form/sample-po-radio-group-translator-reactive-form.component.ts"> </file>
     * </example>
     *
     */
    var PoRadioGroupComponent = /** @class */ (function (_super) {
        __extends(PoRadioGroupComponent, _super);
        function PoRadioGroupComponent(differs) {
            var _this = _super.call(this) || this;
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        PoRadioGroupComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoRadioGroupComponent.prototype.ngDoCheck = function () {
            var change = this.differ.diff(this.options);
            if (change) {
                removeDuplicatedOptions(this.options);
            }
        };
        PoRadioGroupComponent.prototype.eventClick = function (value, disabled) {
            if (!disabled) {
                this.changeValue(value);
            }
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoRadioGroupComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoRadioGroupComponent, { static: true }) radio: PoRadioGroupComponent;
         *
         * focusRadio() {
         *   this.radio.focus();
         * }
         * ```
         */
        PoRadioGroupComponent.prototype.focus = function () {
            var _this = this;
            if (this.radioLabels && !this.disabled) {
                var radioLabel = this.radioLabels.find(function (_, index) { return !_this.options[index].disabled; });
                if (radioLabel) {
                    radioLabel.nativeElement.focus();
                }
            }
        };
        PoRadioGroupComponent.prototype.getElementByValue = function (value) {
            return this.inputEl.nativeElement.querySelector("input[value='" + value + "']");
        };
        PoRadioGroupComponent.prototype.onKeyUp = function (event, value) {
            var key = event.keyCode || event.which;
            if (this.isArrowKey(key)) {
                this.changeValue(value);
            }
        };
        PoRadioGroupComponent.prototype.isArrowKey = function (key) {
            return key >= 37 && key <= 40;
        };
        return PoRadioGroupComponent;
    }(PoRadioGroupBaseComponent));
    PoRadioGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-radio-group',
                    template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-row po-pt-1 po-pb-1\" #inp>\r\n    <div *ngFor=\"let option of options\" class=\"po-radio-group-item po-md-{{ mdColumns }} po-lg-{{ columns }}\">\r\n      <input\r\n        #inputRadio\r\n        class=\"po-radio-group-input\"\r\n        type=\"radio\"\r\n        [attr.name]=\"name\"\r\n        [checked]=\"value === option.value\"\r\n        [class.po-radio-group-input-checked]=\"value === option.value\"\r\n        [disabled]=\"option.disabled === true || disabled\"\r\n        [required]=\"required\"\r\n        [value]=\"option.value\"\r\n        (keyup)=\"onKeyUp($event, option.value)\"\r\n      />\r\n      <label\r\n        class=\"po-radio-group-label\"\r\n        [class.po-clickable]=\"!inputRadio.disabled\"\r\n        [for]=\"name\"\r\n        (click)=\"eventClick(option.value, option.disabled === true || disabled)\"\r\n      >\r\n        {{ option.label }}\r\n      </label>\r\n    </div>\r\n  </div>\r\n  <po-field-container-bottom></po-field-container-bottom>\r\n</po-field-container>\r\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return PoRadioGroupComponent; }),
                            multi: true
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return PoRadioGroupComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    PoRadioGroupComponent.ctorParameters = function () { return [
        { type: i0.IterableDiffers }
    ]; };
    PoRadioGroupComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['p-label',] }],
        help: [{ type: i0.Input, args: ['p-help',] }],
        inputEl: [{ type: i0.ViewChild, args: ['inp', { read: i0.ElementRef, static: true },] }],
        radioLabels: [{ type: i0.ViewChildren, args: ['inputRadio',] }]
    };

    /**
     * @usedBy PoSelectComponent
     *
     * @description
     *
     * Esta diretiva permite personalizar o conteúdo dos itens exibidos na lista suspensa do componente.
     *
     * > Quando utilizada em _mobile_ será exibido o componente nativo.
     *
     * Para personalizar o conteúdo de cada item da lista deve-se utilizar a diretiva `p-select-option-template` com `ng-template`
     * dentro da tag `po-select`.
     *
     * Para obter a referência do item atual, use `let-option`, com isso você terá acesso aos valores e poderá personalizar sua exibição.
     *
     * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <po-select
     *   name="select"
     *   [(ngModel)]="select"
     *   [p-options]="options">
     *     <ng-template p-select-option-template let-option>
     *       <option-template [option]="option"></option-template>
     *     </ng-template>
     * </po-select>
     * ...
     * ```
     *
     * ```
     * ...
     * <po-select
     *   name="select"
     *   [(ngModel)]="select"
     *   [p-options]="options">
     *     <div *p-select-option-template="let option">
     *       <option-template [option]="option"></option-template>
     *     </div>
     * </po-select>
     * ...
     *
     * ```
     */
    var PoSelectOptionTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function PoSelectOptionTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return PoSelectOptionTemplateDirective;
    }());
    PoSelectOptionTemplateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[p-select-option-template]'
                },] }
    ];
    PoSelectOptionTemplateDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };

    var PoFieldModel = /** @class */ (function () {
        function PoFieldModel() {
            /**
             * @optional
             *
             * @description
             *
             * Aplica o foco no elemento ao ser iniciado.
             *  > Caso mais de um elemento seja configurado com essa propriedade,
             * o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /**
             * @optional
             *
             * @description
             *
             * Indica se o campo será desabilitado.
             *
             * @default `false`
             */
            this.disabled = false;
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao alterar valor do campo.
             */
            this.change = new i0.EventEmitter();
        }
        // Função implementada do ControlValueAccessor
        // Usada para interceptar os estados de habilitado via forms api
        PoFieldModel.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        PoFieldModel.prototype.registerOnChange = function (fn) {
            this.propagateChange = fn;
        };
        PoFieldModel.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        PoFieldModel.prototype.writeValue = function (value) {
            this.onWriteValue(value);
        };
        PoFieldModel.prototype.emitChange = function (value) {
            this.change.emit(value);
        };
        PoFieldModel.prototype.updateModel = function (value) {
            if (this.propagateChange) {
                this.propagateChange(value);
            }
        };
        return PoFieldModel;
    }());
    PoFieldModel.decorators = [
        { type: i0.Directive }
    ];
    PoFieldModel.ctorParameters = function () { return []; };
    PoFieldModel.propDecorators = {
        label: [{ type: i0.Input, args: ['p-label',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        help: [{ type: i0.Input, args: ['p-help',] }],
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        change: [{ type: i0.Output, args: ['p-change',] }]
    };
    __decorate([
        InputBoolean()
    ], PoFieldModel.prototype, "autoFocus", void 0);
    __decorate([
        InputBoolean()
    ], PoFieldModel.prototype, "disabled", void 0);

    /**
     * @docsExtends PoFieldModel
     */
    var PoFieldValidateModel = /** @class */ (function (_super) {
        __extends(PoFieldValidateModel, _super);
        function PoFieldValidateModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            /**
             * @optional
             *
             * @description
             *
             * Define se a indicação de campo opcional será exibida.
             *
             * > Não será exibida a indicação se:
             * - O campo conter `p-required`;
             * - Não possuir `p-help` e/ou `p-label`.
             *
             * @default `false`
             */
            _this.optional = false;
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            _this.required = false;
            return _this;
        }
        PoFieldValidateModel.prototype.validate = function (abstractControl) {
            if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
            return this.extraValidation(abstractControl);
        };
        PoFieldValidateModel.prototype.registerOnValidatorChange = function (fn) {
            this.onValidatorChange = fn;
        };
        PoFieldValidateModel.prototype.validateModel = function () {
            if (this.onValidatorChange) {
                this.onValidatorChange();
            }
        };
        return PoFieldValidateModel;
    }(PoFieldModel));
    PoFieldValidateModel.decorators = [
        { type: i0.Directive }
    ];
    PoFieldValidateModel.propDecorators = {
        optional: [{ type: i0.Input, args: ['p-optional',] }],
        required: [{ type: i0.Input, args: ['p-required',] }]
    };
    __decorate([
        InputBoolean()
    ], PoFieldValidateModel.prototype, "optional", void 0);
    __decorate([
        InputBoolean()
    ], PoFieldValidateModel.prototype, "required", void 0);

    var poSelectContentOffset = 8;
    var poSelectContentPositionDefault = 'bottom';
    /**
     * @docsExtends PoFieldValidateModel
     *
     * @example
     *
     * <example name="po-select-basic" title="PO Select Basic">
     *   <file name="sample-po-select-basic/sample-po-select-basic.component.html"> </file>
     *   <file name="sample-po-select-basic/sample-po-select-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-select-labs" title="PO Select Labs">
     *   <file name="sample-po-select-labs/sample-po-select-labs.component.html"> </file>
     *   <file name="sample-po-select-labs/sample-po-select-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-select-customer-registration" title="PO Select - Customer registration">
     *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.html"> </file>
     *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.ts"> </file>
     *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.service.ts"> </file>
     *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.e2e-spec.ts'> </file>
     *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.po.ts'> </file>
     * </example>
     *
     * @description
     *
     * O componente po-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
     * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
     * O po-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
     * O po-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
     *
     * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
     *
     * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
     * veja mais em **[p-select-option-template](/documentation/po-select-option-template)**.
     */
    var PoSelectComponent = /** @class */ (function (_super) {
        __extends(PoSelectComponent, _super);
        /* istanbul ignore next */
        function PoSelectComponent(element, changeDetector, differs, renderer, controlPosition) {
            var _this = _super.call(this) || this;
            _this.element = element;
            _this.changeDetector = changeDetector;
            _this.renderer = renderer;
            _this.controlPosition = controlPosition;
            /**
             * @optional
             *
             * @description
             *
             * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
             *
             * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
             * two-way binding no componente deve se utilizar da seguinte forma:
             *
             * ```
             * <po-select ... [ngModel]="selectModel" (ngModelChange)="selectModel = $event"> </po-select>
             * ```
             */
            _this.ngModelChange = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será somente para leitura.
             *
             * @default `false`
             */
            _this.readonly = false;
            _this.isMobile = isMobile();
            _this.open = false;
            _this.selectIcon = 'po-icon-arrow-down';
            _this.onScroll = function () {
                _this.controlPosition.adjustPosition(poSelectContentPositionDefault);
            };
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        Object.defineProperty(PoSelectComponent.prototype, "options", {
            get: function () {
                return this._options;
            },
            /**
             * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface `PoSelectOption`.
             *
             * Caso esta lista estiver vazia, o model será `undefined`.
             *
             * > Essa propriedade é imutável, ou seja, sempre que quiser atualizar a lista de opções disponíveis
             * atualize a referência do objeto:
             *
             * ```
             * // atualiza a referência do objeto garantindo a atualização do template
             * this.options = [...this.options, { value: 'x', label: 'Nova opção' }];
             *
             * // evite, pois não atualiza a referência do objeto podendo gerar atrasos na atualização do template
             * this.options.push({ value: 'x', label: 'Nova opção' });
             * ```
             */
            set: function (options) {
                this._options = options;
                removeDuplicatedOptions(this._options);
                removeUndefinedAndNullOptions(this._options);
                this.onUpdateOptions();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoSelectComponent.prototype, "isInvisibleSelectNative", {
            get: function () {
                return this.readonly && this.isMobile;
            },
            enumerable: false,
            configurable: true
        });
        PoSelectComponent.prototype.onKeydown = function ($event) {
            var charCode = $event.which || $event.keyCode;
            // Tratamentos para quando o readonly for ativado.
            if (this.readonly) {
                // deve matar o evento do teclado devido a alterar o valor do model mesmo com os options fechados
                if (charCode !== PoKeyCodeEnum.tab) {
                    this.disableDefaultEventAndToggleButton();
                    $event.preventDefault();
                }
                return;
            }
            // Seleciona os itens com as teclas "up" e "down"
            if ((!this.open || $event.altKey) && (charCode === PoKeyCodeEnum.arrowDown || charCode === PoKeyCodeEnum.arrowUp)) {
                this.disableDefaultEventAndToggleButton();
            }
            // Abre o po-select com as teclas "enter" e "espaço"
            if (charCode === PoKeyCodeEnum.enter || charCode === PoKeyCodeEnum.space) {
                this.disableDefaultEventAndToggleButton();
            }
            // Fecha o po-select com a tecla "tab"
            if (this.open && charCode === PoKeyCodeEnum.tab) {
                $event.preventDefault();
                this.toggleButton();
            }
        };
        PoSelectComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoSelectComponent.prototype.ngDoCheck = function () {
            var change = this.differ.diff(this.options);
            if (change) {
                removeDuplicatedOptions(this.options);
                removeUndefinedAndNullOptions(this.options);
            }
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoSelectComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoSelectComponent, { static: true }) select: PoSelectComponent;
         *
         * focusSelect() {
         *   this.select.focus();
         * }
         * ```
         */
        PoSelectComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.selectElement.nativeElement.focus();
            }
        };
        PoSelectComponent.prototype.hideDropDown = function () {
            this.selectIcon = 'po-icon-arrow-down';
            this.selector('.po-select-container').classList.remove('po-select-show');
            this.open = false;
            this.changeDetector.markForCheck();
            this.selectElement.nativeElement.focus();
            this.removeListeners();
        };
        PoSelectComponent.prototype.onBlur = function () {
            var _a;
            (_a = this.onModelTouched) === null || _a === void 0 ? void 0 : _a.call(this);
        };
        PoSelectComponent.prototype.onOptionClick = function (option) {
            this.updateValues(option);
            this.toggleButton();
        };
        // Altera o valor ao selecionar um item.
        PoSelectComponent.prototype.onSelectChange = function (value) {
            if (value && this.options && this.options.length) {
                var optionFound = this.findOptionValue(value);
                if (optionFound) {
                    this.updateValues(optionFound);
                    this.setScrollPosition(optionFound.value);
                }
            }
        };
        PoSelectComponent.prototype.onUpdateOptions = function () {
            if (this.modelValue) {
                this.onSelectChange(this.modelValue);
            }
        };
        PoSelectComponent.prototype.scrollValue = function (index, clientHeight) {
            var heightScrollValue = index * this.getSelectItemHeight();
            return (this.scrollPosition = heightScrollValue > clientHeight ? heightScrollValue : 0);
        };
        PoSelectComponent.prototype.selector = function (query) {
            return this.element.nativeElement.querySelector(query);
        };
        PoSelectComponent.prototype.toggleButton = function () {
            this.open ? this.hideDropDown() : this.showDropdown();
        };
        // Atualiza valores
        PoSelectComponent.prototype.updateValues = function (option) {
            if (this.selectedValue !== option.value) {
                this.selectedValue = option.value;
                this.selectElement.nativeElement.value = option.value;
                this.updateModel(option.value);
                this.displayValue = option.label;
                this.emitChange(option.value);
            }
        };
        // Esconde Content do Select quando for clicado fora
        PoSelectComponent.prototype.wasClickedOnToggle = function (event) {
            if (!this.selectButtonElement.nativeElement.contains(event.target) &&
                !this.iconElement.nativeElement.contains(event.target)) {
                this.hideDropDown();
            }
        };
        // Recebe as alterações do model
        PoSelectComponent.prototype.onWriteValue = function (value) {
            var optionFound = this.findOptionValue(value);
            if (optionFound) {
                this.selectElement.nativeElement.value = optionFound.value;
                this.selectedValue = optionFound.value;
                this.displayValue = optionFound.label;
                this.setScrollPosition(optionFound.value);
            }
            else if (validValue(this.selectedValue)) {
                this.selectElement.nativeElement.value = undefined;
                this.updateModel(undefined);
                this.selectedValue = undefined;
                this.displayValue = undefined;
            }
            this.modelValue = value;
            this.changeDetector.detectChanges();
        };
        PoSelectComponent.prototype.extraValidation = function (c) {
            return null;
        };
        PoSelectComponent.prototype.isEqual = function (value, inputValue) {
            if ((value || value === 0) && inputValue) {
                return value.toString() === inputValue.toString();
            }
            if ((value === null && inputValue !== null) || (value === undefined && inputValue !== undefined)) {
                value = "" + value; // Transformando em string
            }
            return value === inputValue;
        };
        // Método necessário para bloquear o evento default do select nativo.
        // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
        PoSelectComponent.prototype.disableDefaultEventAndToggleButton = function () {
            var _this = this;
            this.selectElement.nativeElement.style.display = 'none';
            setTimeout(function () {
                _this.selectElement.nativeElement.style.display = 'block';
                _this.toggleButton();
            });
        };
        PoSelectComponent.prototype.findOptionValue = function (value) {
            var _this = this;
            return this.options.find(function (option) { return _this.isEqual(option.value, value); });
        };
        PoSelectComponent.prototype.getSelectItemHeight = function () {
            var selectItem = this.selector('div.po-select-item');
            return selectItem && selectItem.clientHeight;
        };
        PoSelectComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
                _this.wasClickedOnToggle(event);
            });
            this.eventResizeListener = this.renderer.listen('window', 'resize', function () {
                _this.hideDropDown();
            });
            window.addEventListener('scroll', this.onScroll, true);
        };
        PoSelectComponent.prototype.removeListeners = function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
            this.eventResizeListener();
            window.removeEventListener('scroll', this.onScroll, true);
        };
        PoSelectComponent.prototype.setPositionDropdown = function () {
            this.controlPosition.setElements(this.contentList.nativeElement, poSelectContentOffset, this.selectButtonElement, ['top', 'bottom'], true);
            this.controlPosition.adjustPosition(poSelectContentPositionDefault);
        };
        PoSelectComponent.prototype.setScrollPosition = function (value) {
            var ulDropdpwn = this.element.nativeElement.querySelector('ul.po-select-content');
            if (value && this.options && this.options.length) {
                var optionFound = this.findOptionValue(value);
                if (optionFound) {
                    var index = this.options.indexOf(optionFound);
                    ulDropdpwn.scrollTop = this.scrollValue(index, ulDropdpwn.clientHeight);
                }
            }
        };
        PoSelectComponent.prototype.showDropdown = function () {
            if (!this.readonly) {
                this.selectElement.nativeElement.focus();
                this.selectIcon = 'po-icon-arrow-up';
                this.selector('.po-select-container').classList.add('po-select-show');
                this.open = true;
                this.changeDetector.markForCheck();
                this.setPositionDropdown();
                this.initializeListeners();
                if (this.options && this.options.length) {
                    this.setScrollPosition(this.selectedValue);
                }
            }
        };
        return PoSelectComponent;
    }(PoFieldValidateModel));
    PoSelectComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-select',
                    template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\r\n  <select\r\n    #select\r\n    class=\"po-select\"\r\n    [attr.name]=\"name\"\r\n    [disabled]=\"disabled\"\r\n    [ngClass]=\"{ 'po-select-mobile': isMobile, 'po-invisible': isInvisibleSelectNative }\"\r\n    [required]=\"required\"\r\n    (change)=\"onSelectChange($event.target.value)\"\r\n    (blur)=\"onBlur()\"\r\n  >\r\n    <option *ngIf=\"isMobile\" disabled hidden selected></option>\r\n    <option *ngFor=\"let option of options\" [disabled]=\"readonly\" [value]=\"option.value\" (click)=\"onOptionClick(option)\">\r\n      {{ option?.label }}\r\n    </option>\r\n  </select>\r\n\r\n  <div class=\"po-select-container\">\r\n    <div\r\n      #selectButton\r\n      class=\"po-select-button\"\r\n      [ngClass]=\"{ 'po-select-button-disabled': disabled, 'po-select-button-readonly': readonly }\"\r\n      (click)=\"toggleButton()\"\r\n    >\r\n      <span>{{ displayValue || placeholder }}</span>\r\n\r\n      <div class=\"po-field-icon-container-right\">\r\n        <span\r\n          #icon\r\n          class=\"po-icon {{ selectIcon }} po-field-icon\"\r\n          [ngClass]=\"{ 'po-field-icon-disabled': disabled, 'po-field-icon-readonly': readonly }\"\r\n        ></span>\r\n      </div>\r\n    </div>\r\n\r\n    <ul #contentList class=\"po-select-content\" [ngClass]=\"{ 'po-invisible': isMobile }\">\r\n      <li\r\n        *ngFor=\"let option of options\"\r\n        [class.po-select-item-selected]=\"selectedValue === option.value\"\r\n        [value]=\"option.value\"\r\n        (click)=\"onOptionClick(option)\"\r\n      >\r\n        <div class=\"po-select-item\">\r\n          <ng-container *ngIf=\"selectOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\r\n\r\n          <ng-template #defaultOptionTemplate>\r\n            <span>{{ option?.label }}</span>\r\n          </ng-template>\r\n\r\n          <ng-template\r\n            #optionTemplate\r\n            [ngTemplateOutlet]=\"selectOptionTemplate?.templateRef\"\r\n            [ngTemplateOutletContext]=\"{ $implicit: option }\"\r\n          >\r\n          </ng-template>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n\r\n  <po-field-container-bottom></po-field-container-bottom>\r\n</po-field-container>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return PoSelectComponent; }),
                            multi: true
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return PoSelectComponent; }),
                            multi: true
                        },
                        PoControlPositionService
                    ]
                },] }
    ];
    PoSelectComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: i0.IterableDiffers },
        { type: i0.Renderer2 },
        { type: PoControlPositionService }
    ]; };
    PoSelectComponent.propDecorators = {
        selectOptionTemplate: [{ type: i0.ContentChild, args: [PoSelectOptionTemplateDirective, { static: true },] }],
        contentList: [{ type: i0.ViewChild, args: ['contentList', { read: i0.ElementRef, static: true },] }],
        iconElement: [{ type: i0.ViewChild, args: ['icon', { read: i0.ElementRef, static: true },] }],
        selectElement: [{ type: i0.ViewChild, args: ['select', { read: i0.ElementRef, static: true },] }],
        selectButtonElement: [{ type: i0.ViewChild, args: ['selectButton', { read: i0.ElementRef, static: true },] }],
        ngModelChange: [{ type: i0.Output, args: ['ngModelChange',] }],
        readonly: [{ type: i0.Input, args: ['p-readonly',] }],
        placeholder: [{ type: i0.Input, args: ['p-placeholder',] }],
        options: [{ type: i0.Input, args: ['p-options',] }],
        onKeydown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }]
    };
    __decorate([
        InputBoolean()
    ], PoSelectComponent.prototype, "readonly", void 0);

    /**
     * @usedBy PoSwitchComponent
     *
     * @description
     *
     * Enum para posicionar o label do valor do po-switch.
     */
    exports.PoSwitchLabelPosition = void 0;
    (function (PoSwitchLabelPosition) {
        /** Posiciona o label do lado esquerdo do switch. */
        PoSwitchLabelPosition[PoSwitchLabelPosition["Right"] = 0] = "Right";
        /** Posiciona o label do lado direito do switch. */
        PoSwitchLabelPosition[PoSwitchLabelPosition["Left"] = 1] = "Left";
    })(exports.PoSwitchLabelPosition || (exports.PoSwitchLabelPosition = {}));

    /**
     * @docsExtends PoFieldModel
     *
     * @description
     *
     * O componente `po-switch` é um [checkbox](/documentation/po-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
     * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
     *
     * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.
     *
     * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
     * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
     *
     * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
     *
     * @example
     *
     * <example name="po-switch-basic" title="PO Switch Basic">
     *   <file name="sample-po-switch-basic/sample-po-switch-basic.component.html"> </file>
     *   <file name="sample-po-switch-basic/sample-po-switch-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-switch-labs" title="PO Switch Labs">
     *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.html"> </file>
     *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.ts"> </file>
     *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.e2e-spec.ts"> </file>
     *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.po.ts"> </file>
     * </example>
     *
     * <example name="po-switch-order" title="PO Switch - Order Summary">
     *   <file name="sample-po-switch-order/sample-po-switch-order.component.html"> </file>
     *   <file name="sample-po-switch-order/sample-po-switch-order.component.ts"> </file>
     * </example>
     *
     * <example name="po-switch-order-reactive-form" title="PO Switch - Order Summary Reactive Form">
     *   <file name="sample-po-switch-order-reactive-form/sample-po-switch-order-reactive-form.component.html"> </file>
     *   <file name="sample-po-switch-order-reactive-form/sample-po-switch-order-reactive-form.component.ts"> </file>
     * </example>
     */
    var PoSwitchComponent = /** @class */ (function (_super) {
        __extends(PoSwitchComponent, _super);
        function PoSwitchComponent(changeDetector) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            _this.value = false;
            _this._labelOff = 'false';
            _this._labelOn = 'true';
            _this._labelPosition = exports.PoSwitchLabelPosition.Right;
            return _this;
        }
        Object.defineProperty(PoSwitchComponent.prototype, "labelPosition", {
            get: function () {
                return this._labelPosition;
            },
            /**
             * @optional
             *
             * @description
             *
             * Posição de exibição do rótulo.
             *
             * > Por padrão exibe à direita.
             */
            set: function (position) {
                this._labelPosition = position in exports.PoSwitchLabelPosition ? parseInt(position, 10) : exports.PoSwitchLabelPosition.Right;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoSwitchComponent.prototype, "labelOff", {
            get: function () {
                return this._labelOff;
            },
            /**
             * Texto exibido quando o valor do componente for `false`.
             *
             * @default `false`
             */
            set: function (label) {
                this._labelOff = label || 'false';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoSwitchComponent.prototype, "labelOn", {
            get: function () {
                return this._labelOn;
            },
            /**
             * Texto exibido quando o valor do componente for `true`.
             *
             * @default `true`
             */
            set: function (label) {
                this._labelOn = label || 'true';
            },
            enumerable: false,
            configurable: true
        });
        PoSwitchComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoSwitchComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoSwitchComponent, { static: true }) switch: PoSwitchComponent;
         *
         * focusSwitch() {
         *   this.switch.focus();
         * }
         * ```
         */
        PoSwitchComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.switchContainer.nativeElement.focus();
            }
        };
        PoSwitchComponent.prototype.onBlur = function () {
            var _a;
            (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
        };
        PoSwitchComponent.prototype.getLabelPosition = function () {
            switch (this.labelPosition) {
                case exports.PoSwitchLabelPosition.Left:
                    return 'left';
                case exports.PoSwitchLabelPosition.Right:
                    return 'right';
                default:
                    return 'right';
            }
        };
        PoSwitchComponent.prototype.getSwitchPosition = function () {
            switch (this.labelPosition) {
                case exports.PoSwitchLabelPosition.Left:
                    return 'right';
                case exports.PoSwitchLabelPosition.Right:
                    return 'left';
                default:
                    return 'left';
            }
        };
        PoSwitchComponent.prototype.onKeyDown = function (event) {
            if (event.which === PoKeyCodeEnum.space || event.keyCode === PoKeyCodeEnum.space) {
                event.preventDefault();
                this.eventClick();
            }
        };
        PoSwitchComponent.prototype.changeValue = function (value) {
            if (this.value !== value) {
                this.value = value;
                this.updateModel(value);
                this.emitChange(this.value);
            }
        };
        PoSwitchComponent.prototype.eventClick = function () {
            if (!this.disabled) {
                this.changeValue(!this.value);
            }
        };
        PoSwitchComponent.prototype.onWriteValue = function (value) {
            if (value !== this.value) {
                this.value = !!value;
                this.changeDetector.markForCheck();
            }
        };
        return PoSwitchComponent;
    }(PoFieldModel));
    PoSwitchComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-switch',
                    template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\">\r\n  <div class=\"po-field-container-content po-switch-content\" [attr.name]=\"name\">\r\n    <div\r\n      class=\"po-switch-container po-clickable\"\r\n      #switchContainer\r\n      [class.po-switch-container-disabled]=\"disabled\"\r\n      [class.po-switch-container-off]=\"value === false && !disabled\"\r\n      [class.po-switch-container-on]=\"value === true && !disabled\"\r\n      [class.po-switch-container-right]=\"getSwitchPosition() === 'right'\"\r\n      [tabindex]=\"disabled ? -1 : 0\"\r\n      (click)=\"eventClick()\"\r\n      (keydown)=\"onKeyDown($event)\"\r\n      (blur)=\"onBlur()\"\r\n    >\r\n      <div\r\n        class=\"po-switch-button\"\r\n        [class.po-switch-button-on]=\"value === true\"\r\n        [class.po-switch-button-off]=\"value === false\"\r\n        [class.po-switch-button-disabled]=\"disabled\"\r\n      >\r\n        <span class=\"po-icon po-icon-{{ value === true ? 'ok' : 'close' }}\"></span>\r\n      </div>\r\n    </div>\r\n\r\n    <span class=\"po-switch-label po-clickable po-switch-label-{{ getLabelPosition() }}\" (click)=\"eventClick()\">\r\n      {{ value === true ? labelOn : labelOff }}\r\n    </span>\r\n  </div>\r\n\r\n  <po-field-container-bottom></po-field-container-bottom>\r\n</po-field-container>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return PoSwitchComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    PoSwitchComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    PoSwitchComponent.propDecorators = {
        switchContainer: [{ type: i0.ViewChild, args: ['switchContainer', { static: true },] }],
        labelPosition: [{ type: i0.Input, args: ['p-label-position',] }],
        labelOff: [{ type: i0.Input, args: ['p-label-off',] }],
        labelOn: [{ type: i0.Input, args: ['p-label-on',] }]
    };

    /**
     * @description
     *
     * Este é um componente de entrada de dados que possibilita o preechimento com múltiplas linhas.
     * É recomendado para observações, detalhamentos e outras situações onde o usuário deva preencher com um texto.
     *
     * Importante:
     *
     * - A propriedade `name` é obrigatória para que o formulário e o `model` funcionem corretamente. Do contrário, ocorrerá um erro de
     * _Angular_, onde será necessário informar o atributo `name` ou o atributo `[ngModelOptions]="{standalone: true}"`, por exemplo:
     *
     * ```
     * <po-textarea
     *   [(ngModel)]="pessoa.nome"
     *   [ngModelOptions]="{standalone: true}">
     * </po-textarea>
     * ```
     */
    var PoTextareaBaseComponent = /** @class */ (function () {
        function PoTextareaBaseComponent(cd) {
            this.cd = cd;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao sair do campo.
             */
            this.blur = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao entrar do campo.
             */
            this.enter = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao alterar valor e deixar o campo.
             */
            this.change = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao alterar valor do model.
             */
            this.changeModel = new i0.EventEmitter();
            this._disabled = false;
            this._placeholder = '';
            this._readonly = false;
            this._required = false;
            this._rows = 3;
            this.onChangePropagate = null;
            // eslint-disable-next-line
            this.onTouched = null;
        }
        Object.defineProperty(PoTextareaBaseComponent.prototype, "placeholder", {
            get: function () {
                return this._placeholder;
            },
            /** Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido. */
            set: function (value) {
                this._placeholder = value || '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTextareaBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será desabilitado.
             *
             * @default `false`
             */
            set: function (disabled) {
                this._disabled = convertToBoolean(disabled);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTextareaBaseComponent.prototype, "readonly", {
            get: function () {
                return this._readonly;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será somente leitura.
             *
             * @default `false`
             */
            set: function (readonly) {
                this._readonly = convertToBoolean(readonly);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTextareaBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * > Esta propriedade é desconsiderada quando o _input_ está desabilitado `(p-disabled)`.
             *
             * @default `false`
             */
            set: function (required) {
                this._required = convertToBoolean(required);
                this.validateModel();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTextareaBaseComponent.prototype, "minlength", {
            get: function () {
                return this._minlength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica a quantidade mínima de caracteres que o campo aceita.
             */
            set: function (minlength) {
                this._minlength = convertToInt(minlength);
                this.validateModel();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTextareaBaseComponent.prototype, "maxlength", {
            get: function () {
                return this._maxlength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica a quantidade máxima de caracteres que o campo aceita.
             */
            set: function (maxlength) {
                this._maxlength = convertToInt(maxlength);
                this.validateModel();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTextareaBaseComponent.prototype, "rows", {
            get: function () {
                return this._rows;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica a quantidade de linhas que serão exibidas.
             *
             * @default `3`
             */
            set: function (value) {
                this._rows = isNaN(parseInt(value, 10)) || value < 3 ? 3 : parseInt(value, 10);
            },
            enumerable: false,
            configurable: true
        });
        PoTextareaBaseComponent.prototype.callOnChange = function (value) {
            // Quando o input não possui um formulário, então esta função não é registrada
            if (this.onChangePropagate) {
                this.onChangePropagate(value);
            }
            this.controlChangeModelEmitter(value);
        };
        PoTextareaBaseComponent.prototype.controlChangeModelEmitter = function (value) {
            if (this.modelLastUpdate !== value) {
                this.changeModel.emit(value);
                this.modelLastUpdate = value;
            }
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar os estados de habilitado via forms api
        PoTextareaBaseComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
            this.cd.markForCheck();
        };
        // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
        // usadas para interceptar as mudanças e não atualizar automaticamente o Model
        PoTextareaBaseComponent.prototype.registerOnChange = function (func) {
            this.onChangePropagate = func;
        };
        PoTextareaBaseComponent.prototype.registerOnTouched = function (func) {
            this.onTouched = func;
        };
        PoTextareaBaseComponent.prototype.registerOnValidatorChange = function (func) {
            this.validatorChange = func;
        };
        PoTextareaBaseComponent.prototype.validate = function (abstractControl) {
            if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
            if (minlengpoailed(this.minlength, abstractControl.value)) {
                return {
                    minlength: {
                        valid: false
                    }
                };
            }
            if (maxlengpoailed(this.maxlength, abstractControl.value)) {
                return {
                    maxlength: {
                        valid: false
                    }
                };
            }
        };
        // Função implementada do ControlValueAccessor
        PoTextareaBaseComponent.prototype.writeValue = function (value) {
            this.writeValueModel(value);
            this.cd.markForCheck();
        };
        PoTextareaBaseComponent.prototype.validateModel = function () {
            if (this.validatorChange) {
                this.validatorChange();
            }
        };
        return PoTextareaBaseComponent;
    }());
    PoTextareaBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoTextareaBaseComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    PoTextareaBaseComponent.propDecorators = {
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        help: [{ type: i0.Input, args: ['p-help',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        optional: [{ type: i0.Input, args: ['p-optional',] }],
        blur: [{ type: i0.Output, args: ['p-blur',] }],
        enter: [{ type: i0.Output, args: ['p-enter',] }],
        change: [{ type: i0.Output, args: ['p-change',] }],
        changeModel: [{ type: i0.Output, args: ['p-change-model',] }],
        placeholder: [{ type: i0.Input, args: ['p-placeholder',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        readonly: [{ type: i0.Input, args: ['p-readonly',] }],
        required: [{ type: i0.Input, args: ['p-required',] }],
        minlength: [{ type: i0.Input, args: ['p-minlength',] }],
        maxlength: [{ type: i0.Input, args: ['p-maxlength',] }],
        rows: [{ type: i0.Input, args: ['p-rows',] }]
    };
    __decorate([
        InputBoolean()
    ], PoTextareaBaseComponent.prototype, "autoFocus", void 0);

    /**
     * @docsExtends PoTextareaBaseComponent
     *
     * @example
     *
     * <example name="po-textarea-basic" title="PO Textarea Basic" >
     *  <file name="sample-po-textarea-basic/sample-po-textarea-basic.component.html"> </file>
     *  <file name="sample-po-textarea-basic/sample-po-textarea-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-textarea-labs" title="PO Textarea Labs" >
     *  <file name="sample-po-textarea-labs/sample-po-textarea-labs.component.html"> </file>
     *  <file name="sample-po-textarea-labs/sample-po-textarea-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-textarea-email" title="PO Textarea - Email" >
     *  <file name="sample-po-textarea-email/sample-po-textarea-email.component.html"> </file>
     *  <file name="sample-po-textarea-email/sample-po-textarea-email.component.ts"> </file>
     * </example>
     *
     * <example name="po-textarea-email-reactive-form" title="PO Textarea - Email Reactive Form" >
     *  <file name="sample-po-textarea-email-reactive-form/sample-po-textarea-email-reactive-form.component.html"> </file>
     *  <file name="sample-po-textarea-email-reactive-form/sample-po-textarea-email-reactive-form.component.ts"> </file>
     * </example>
     *
     */
    var PoTextareaComponent = /** @class */ (function (_super) {
        __extends(PoTextareaComponent, _super);
        function PoTextareaComponent(cd) {
            var _this = _super.call(this, cd) || this;
            _this.fireChange = false;
            return _this;
        }
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoTextareaComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoTextareaComponent, { static: true }) textarea: PoTextareaComponent;
         *
         * focusTextarea() {
         *   this.textarea.focus();
         * }
         * ```
         */
        PoTextareaComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.inputEl.nativeElement.focus();
            }
        };
        PoTextareaComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoTextareaComponent.prototype.writeValueModel = function (value) {
            if (this.inputEl) {
                if (!value) {
                    // Se for o valor for undefined, deve limpar o campo
                    this.inputEl.nativeElement.value = '';
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            // Emite evento quando o model é atualizado, inclusive a primeira vez
            if (value) {
                this.change.emit(value);
            }
        };
        PoTextareaComponent.prototype.validMaxLength = function (maxlength, value) {
            return maxlength && value.length > maxlength ? value.toString().substring(0, maxlength) : value;
        };
        PoTextareaComponent.prototype.eventOnInput = function (event) {
            var value = this.validMaxLength(this.maxlength, event.target.value);
            this.callOnChange(value);
            this.inputEl.nativeElement.value = value;
        };
        PoTextareaComponent.prototype.eventOnFocus = function () {
            // Atualiza valor da variável que será usada para verificar se o campo teve alteração
            this.valueBeforeChange = this.inputEl.nativeElement.value;
            // Dispara evento quando o usuário entrar no campo
            // Este evento também é disparado quando o campo inicia com foco.
            this.enter.emit();
        };
        PoTextareaComponent.prototype.eventOnBlur = function () {
            var _a;
            (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
            this.blur.emit();
            this.controlChangeEmitter();
        };
        PoTextareaComponent.prototype.controlChangeEmitter = function () {
            var elementValue = this.inputEl.nativeElement.value;
            if (elementValue !== this.valueBeforeChange) {
                this.change.emit(elementValue);
            }
        };
        return PoTextareaComponent;
    }(PoTextareaBaseComponent));
    PoTextareaComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-textarea',
                    template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content\">\r\n    <textarea\r\n      #inp\r\n      class=\"po-textarea\"\r\n      (blur)=\"eventOnBlur()\"\r\n      (focus)=\"eventOnFocus()\"\r\n      (input)=\"eventOnInput($event)\"\r\n      [attr.name]=\"name\"\r\n      [disabled]=\"disabled\"\r\n      [placeholder]=\"placeholder\"\r\n      [readonly]=\"readonly\"\r\n      [required]=\"required\"\r\n      [rows]=\"rows\"\r\n    >\r\n    </textarea>\r\n  </div>\r\n\r\n  <po-field-container-bottom></po-field-container-bottom>\r\n</po-field-container>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return PoTextareaComponent; }),
                            multi: true
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return PoTextareaComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    PoTextareaComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    PoTextareaComponent.propDecorators = {
        inputEl: [{ type: i0.ViewChild, args: ['inp', { read: i0.ElementRef, static: true },] }]
    };

    /**
     * @description
     *
     * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
     *
     * - success,
     * - warning,
     * - error,
     * - information.
     *
     * Cada um destes métodos recebe como parâmetro o objeto `PoNotification` que contém os dados da mensagem e o
     * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
     *
     * Estas notificações serão exibidas durante 10 segundos por padrão, podendo ser alterada conforme necessidade.
     * Após este tempo a mesma é removida automaticamente.
     *
     * O serviço possui um limite de até 5 notificações por vez, a partir do sexto a primeira notificação será removida dando lugar a nova.
     *
     */
    var PoNotificationBaseService = /** @class */ (function () {
        function PoNotificationBaseService() {
            // Array responsável por guardar a instância de po-toaster's superiores.
            this.stackTop = [];
            // Array responsável por guardar a instância de po-toaster's inferiores.
            this.stackBottom = [];
            // Duração da notificação ativa.
            this.defaultDuration = 10000;
        }
        /**
         * Emite uma notificação de sucesso.
         *
         * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
         */
        PoNotificationBaseService.prototype.success = function (notification) {
            this.createToaster(this.buildToaster(notification, exports.PoToasterType.Success));
        };
        /**
         * Emite uma notificação de atenção.
         *
         * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
         */
        PoNotificationBaseService.prototype.warning = function (notification) {
            this.createToaster(this.buildToaster(notification, exports.PoToasterType.Warning));
        };
        /**
         * Emite uma notificação de erro.
         *
         * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
         */
        PoNotificationBaseService.prototype.error = function (notification) {
            this.createToaster(this.buildToaster(notification, exports.PoToasterType.Error));
        };
        /**
         * Emite uma notificação de informação.
         *
         * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
         */
        PoNotificationBaseService.prototype.information = function (notification) {
            this.createToaster(this.buildToaster(notification, exports.PoToasterType.Information));
        };
        /**
         * Define em milissegundos a duração padrão para as notificações.
         *
         * > Padrão 10 segundos.
         *
         * @param {number} defaultDuration Duração em milisegundos
         */
        PoNotificationBaseService.prototype.setDefaultDuration = function (defaultDuration) {
            this.defaultDuration = defaultDuration;
        };
        /**
         * @docsPrivate
         *
         * Cria um objeto do tipo PoToaster de acordo o tipo.
         *
         * @param {PoNotification | string} notification Objeto PoNotification com os dados da notificação
         */
        PoNotificationBaseService.prototype.buildToaster = function (notification, type) {
            var _this = this;
            var index = 0;
            var orientation;
            if (notification.orientation === undefined ||
                notification.orientation === exports.PoToasterOrientation.Bottom) {
                index = this.stackBottom.length;
                orientation = exports.PoToasterOrientation.Bottom;
            }
            else {
                index = this.stackTop.length;
                orientation = exports.PoToasterOrientation.Top;
            }
            var toaster = {
                componentRef: undefined,
                message: notification.message || notification,
                type: type,
                orientation: orientation,
                action: notification.action,
                actionLabel: notification.actionLabel,
                position: index,
                duration: notification.duration || this.defaultDuration
            };
            if (notification.action) {
                toaster.action = function (param) {
                    notification.action();
                    _this.destroyToaster(param.componentRef);
                };
            }
            return toaster;
        };
        return PoNotificationBaseService;
    }());

    var PoNotificationMaxLength = 5;
    var PoNotificationFadeTime = 200;
    /**
     * @docsExtends PoNotificationBaseService
     *
     * @example
     *
     * <example name="po-notification-basic" title="PO Notification Basic">
     *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.html"> </file>
     *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-notification-labs" title="PO Notification Labs">
     *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.html"> </file>
     *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-notification-sales" title="PO Notification - Sales">
     *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.html"> </file>
     *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.ts"> </file>
     * </example>
     */
    var PoNotificationService = /** @class */ (function (_super) {
        __extends(PoNotificationService, _super);
        function PoNotificationService(poComponentInjector) {
            var _this = _super.call(this) || this;
            _this.poComponentInjector = poComponentInjector;
            return _this;
        }
        PoNotificationService.prototype.createToaster = function (toaster) {
            var _this = this;
            var componentRef = this.poComponentInjector.createComponentInApplication(PoToasterComponent);
            toaster.componentRef = componentRef;
            componentRef.changeDetectorRef.detectChanges();
            componentRef.instance.configToaster(toaster);
            var stack = toaster.orientation === exports.PoToasterOrientation.Top ? this.stackTop : this.stackBottom;
            stack.push(componentRef);
            this.verifyLimitToaster(stack);
            this.observableOnClose(componentRef);
            if (!(toaster.action && toaster.actionLabel)) {
                rxjs.timer(toaster.duration)
                    .pipe(operators.takeWhile(function () { return componentRef.instance.alive; }))
                    .subscribe(function () {
                    _this.destroyToaster(componentRef);
                });
            }
        };
        PoNotificationService.prototype.destroyToaster = function (toaster) {
            var _this = this;
            var stack;
            if (toaster.instance.orientation === exports.PoToasterOrientation.Top) {
                stack = this.stackTop;
            }
            else {
                stack = this.stackBottom;
            }
            toaster.instance.setFadeOut();
            var index = stack.indexOf(toaster);
            stack.splice(index, 1);
            setTimeout(function () {
                _this.poComponentInjector.destroyComponentInApplication(toaster);
                for (var count = 0; count < stack.length; count++) {
                    stack[count].instance.changePosition(count);
                }
            }, PoNotificationFadeTime);
        };
        PoNotificationService.prototype.observableOnClose = function (componentRef) {
            var _this = this;
            componentRef.instance.observableOnClose.subscribe(function () {
                _this.destroyToaster(componentRef);
            });
        };
        PoNotificationService.prototype.verifyLimitToaster = function (stack) {
            if (stack.length > PoNotificationMaxLength) {
                this.destroyToaster(stack[0]);
            }
        };
        return PoNotificationService;
    }(PoNotificationBaseService));
    PoNotificationService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PoNotificationService_Factory() { return new PoNotificationService(i0__namespace.ɵɵinject(PoComponentInjectorService)); }, token: PoNotificationService, providedIn: "root" });
    PoNotificationService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PoNotificationService.ctorParameters = function () { return [
        { type: PoComponentInjectorService }
    ]; };

    // Enum de status de envio dos arquivos.
    var PoUploadStatus;
    (function (PoUploadStatus) {
        // Enviou com sucesso.
        PoUploadStatus[PoUploadStatus["Uploaded"] = 0] = "Uploaded";
        // Está enviando.
        PoUploadStatus[PoUploadStatus["Uploading"] = 1] = "Uploading";
        // Ocorreu algum erro no envio.
        PoUploadStatus[PoUploadStatus["Error"] = 2] = "Error";
        // Não enviou ou aconteceu algum erro.
        PoUploadStatus[PoUploadStatus["None"] = 3] = "None";
    })(PoUploadStatus || (PoUploadStatus = {}));

    // Classe responsável pelo arquivo do PO Upload
    var PoUploadFile = /** @class */ (function () {
        function PoUploadFile(file) {
            if (file) {
                this.name = file.name;
                this.displayName = file.name + " - " + this.getFileSize(file.size);
                this.extension = this.getExtension(file.name);
                this.size = file.size;
                this.rawFile = file;
                this.uid = this.generateUUID();
                this.status = PoUploadStatus.None;
            }
        }
        PoUploadFile.prototype.getExtension = function (value) {
            if (value) {
                var extension = value.substr(value.lastIndexOf('.'));
                return extension.toLowerCase();
            }
            return '';
        };
        PoUploadFile.prototype.generateUUID = function () {
            function s4() {
                return Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1);
            }
            return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
        };
        // Retorna o tamanho do arquivo em KBytes.
        PoUploadFile.prototype.getFileSize = function (size) {
            var kbSize = 0;
            if (size) {
                kbSize = Math.ceil(size / 1024);
            }
            return kbSize + " KB";
        };
        return PoUploadFile;
    }());

    var PoUploadBaseService = /** @class */ (function () {
        function PoUploadBaseService(http) {
            this.http = http;
            this.formField = 'files';
            this.requests = [];
        }
        /**
         * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
         *
         * @param url URL da requisição a ser efetuada.
         * @param files Arquivos a serem enviados.
         * @param tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
         * @param uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
         * @param successCallback Função a ser executada quando a requisição for efetuada com sucesso.
         * @param errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
         */
        PoUploadBaseService.prototype.upload = function (url, files, headers, tOnUpload, uploadCallback, successCallback, errorCallback) {
            var filesLength = files.length;
            var uploadEvent = {
                data: {},
                file: null
            };
            for (var i = 0; i < filesLength; i++) {
                var formData = new FormData();
                var file = files[i];
                var fileName = file.rawFile.name;
                formData.append(this.formField, file.rawFile, fileName);
                // Função upload, onde o desenvolvedor pode enviar dados para a requisição.
                if (tOnUpload) {
                    uploadEvent['file'] = file;
                    tOnUpload.emit(uploadEvent);
                    formData.append('data', JSON.stringify(uploadEvent.data));
                }
                this.sendFile(url, file, headers, formData, uploadCallback, successCallback, errorCallback);
            }
        };
        PoUploadBaseService.prototype.sendFile = function (url, file, headers, formData, uploadCallback, successCallback, errorCallback) {
            var _this = this;
            var request = this.getRequest(url, headers, formData).subscribe(function (event) {
                if (event.type === i1.HttpEventType.UploadProgress) {
                    _this.addRequest(file, request);
                    var percentDone = Math.round((100 * event.loaded) / event.total);
                    uploadCallback(file, percentDone);
                }
                else if (event instanceof i1.HttpResponse) {
                    // Sucesso, arquivos enviados.
                    successCallback(file, event);
                }
            }, function (err) {
                errorCallback(file, err);
            });
        };
        PoUploadBaseService.prototype.getRequest = function (url, headers, formData) {
            var httpHeaders = new i1.HttpHeaders(headers);
            var req = new i1.HttpRequest('POST', url, formData, {
                reportProgress: true,
                headers: httpHeaders
            });
            return this.http.request(req);
        };
        PoUploadBaseService.prototype.stopRequestByFile = function (file, callback) {
            var requestObj = this.requests.find(function (req) { return req.file.uid === file.uid; });
            if (requestObj) {
                var request = requestObj.request;
                request.unsubscribe();
                this.removeRequest(requestObj);
                callback();
            }
        };
        PoUploadBaseService.prototype.removeRequest = function (requestObj) {
            var index = this.requests.indexOf(requestObj);
            this.requests.splice(index, 1);
        };
        PoUploadBaseService.prototype.addRequest = function (file, request) {
            var hasRequest = this.requests.some(function (req) { return req.file.uid === file.uid; });
            if (!hasRequest) {
                this.requests.push({ file: file, request: request });
            }
        };
        return PoUploadBaseService;
    }());
    PoUploadBaseService.decorators = [
        { type: i0.Injectable }
    ];
    PoUploadBaseService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    var PoUploadService = /** @class */ (function (_super) {
        __extends(PoUploadService, _super);
        function PoUploadService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PoUploadService;
    }(PoUploadBaseService));
    PoUploadService.decorators = [
        { type: i0.Injectable }
    ];

    var poUploadLiteralsDefault = {
        en: {
            files: 'files',
            folders: 'folders',
            selectFile: 'Select file',
            selectFiles: 'Select files',
            selectFolder: 'Select folder',
            startSending: 'Start sending',
            dragFilesHere: 'Drag files here',
            dragFoldersHere: 'Drag folders here',
            selectFilesOnComputer: 'or select files on your computer',
            selectFolderOnComputer: 'or select folder on your computer',
            dropFilesHere: 'Drop files here',
            dropFoldersHere: 'Drop folders here',
            invalidDropArea: '{0} were not dropped in the correct area',
            invalidFileType: 'Failed to load {0} file(s) as it is not the allowed file type.',
            invalidAmount: 'Failed to load {0} file(s), as it exceeds the limit amount of files.',
            invalidFormat: 'Failed to load {0} file(s), as it does not match the format(s): {1}.',
            invalidSize: 'Failed to load {0} files(s), as it is not the allowed size: from {1} to {2}.',
            numberOfFilesAllowed: '{0} file(s) allowed',
            allowedFormats: 'Accepted file formats: {0}.',
            allowedFileSizeRange: 'Size limit per file: from {0} to {1}',
            maxFileSizeAllowed: 'Size limit per file: {0} maximum',
            minFileSizeAllowed: 'Size limit per file: {0} minimum',
            errorOccurred: 'An error has occurred',
            sentWithSuccess: 'Sent with success'
        },
        es: {
            files: 'archivos',
            folders: 'carpetas',
            selectFile: 'Seleccionar archivo',
            selectFiles: 'Seleccionar archivos',
            selectFolder: 'Seleccionar carpeta',
            startSending: 'Iniciar carga',
            dragFilesHere: 'Arrastra los archivos aquí',
            dragFoldersHere: 'Arrastra las carpetas aquí',
            selectFilesOnComputer: 'o selecciona los archivos en tu computadora',
            selectFolderOnComputer: 'o selecciona la carpeta en tu computadora',
            dropFilesHere: 'Deja los archivos aquí',
            dropFoldersHere: 'Deja las carpetas aquí',
            invalidDropArea: 'Los {0} no se insertaron en la ubicación correcta',
            invalidFileType: 'Error al cargar {0} archivo (s) ya que no es el tipo de archivo permitido',
            invalidAmount: 'Error al cargar {0} archivo (s) ya que excede la cantidad limite de archivos.',
            invalidFormat: 'Error al cargar {0} archivo (s) ya que no coincide con el formato (s): {1}.',
            invalidSize: 'Error al cargar {0} archivo (s) ya que no cumple con el tamaño permitido: desde {1} hasta {2}.',
            numberOfFilesAllowed: '{0} archivo(s) permitido(s)',
            allowedFormats: 'Formatos aceptados: {0}.',
            allowedFileSizeRange: 'Limite de tamaño de archivo: desde {0} hasta {1}',
            maxFileSizeAllowed: 'Limite de tamaño de archivo: hasta {0}',
            minFileSizeAllowed: 'Limite de tamaño de archivo: minimo {0}',
            errorOccurred: 'Ocurrio un error',
            sentWithSuccess: 'Enviado con éxito'
        },
        pt: {
            files: 'arquivos',
            folders: 'diretórios',
            selectFile: 'Selecionar arquivo',
            selectFiles: 'Selecionar arquivos',
            selectFolder: 'Selecionar pasta',
            startSending: 'Iniciar envio',
            dragFilesHere: 'Arraste os arquivos aqui',
            dragFoldersHere: 'Arraste as pastas aqui',
            selectFilesOnComputer: 'ou selecione os arquivos no computador',
            selectFolderOnComputer: 'ou selecione a pasta no computador',
            dropFilesHere: 'Solte os arquivos aqui',
            dropFoldersHere: 'Solte as pastas aqui',
            invalidDropArea: 'Os {0} não foram inseridos no local correto',
            invalidFileType: 'Falha ao carregar {0} arquivo (s), pois não é o tipo de arquivo permitido',
            invalidAmount: 'Falha ao carregar {0} arquivo(s), pois excede(m) a quantidade limite de arquivos.',
            invalidFormat: 'Falha ao carregar {0} arquivo(s), pois não corresponde(m) ao(s) formato(s): {1}.',
            invalidSize: 'Falha ao carregar {0} arquivo(s), pois não atende ao tamanho permitido: {1} até {2}.',
            numberOfFilesAllowed: 'Quantidade máxima: {0} arquivo(s)',
            allowedFormats: 'Formatos adotados: {0}.',
            allowedFileSizeRange: 'Limite de tamanho por arquivo: de {0} até {1}',
            maxFileSizeAllowed: 'Limite de tamanho por arquivo: até {0}',
            minFileSizeAllowed: 'Limite de tamanho por arquivo: no mínimo {0}',
            errorOccurred: 'Ocorreu um erro',
            sentWithSuccess: 'Enviado com sucesso'
        },
        ru: {
            files: 'файлы',
            folders: 'папки с файлами',
            selectFile: 'Выберите файл',
            selectFiles: 'Выберите файлы',
            selectFolder: 'Выберите папку с файлами',
            startSending: 'Начать загрузку',
            dragFilesHere: 'Перетащите файлы сюда',
            dragFoldersHere: 'Перетащите сюда папки',
            selectFilesOnComputer: 'или выберите файлы на компьютере',
            selectFolderOnComputer: 'или выберите папку на вашем компьютере',
            dropFilesHere: 'Оставьте файлы здесь',
            dropFoldersHere: 'Перетащите сюда папки',
            invalidDropArea: '{0} не были вставлены в правильном месте.',
            invalidFileType: 'Не удалось загрузить файлы {0}, так как это неверный тип файла',
            invalidAmount: 'Não foi possível carregar os arquivos {0} porque eles excederam o limite de arquivos.',
            invalidFormat: 'Не удалось загрузить файлы {0}, так как они не соответствуют формату (ам): {1}.',
            invalidSize: 'Не удалось загрузить файлы {0}, поскольку они не соответствуют разрешенному размеру: от {1} до {2}.',
            numberOfFilesAllowed: 'Максимальное количество: {0} файлов',
            allowedFormats: 'Форматы приняты: {0}.',
            allowedFileSizeRange: 'Ограничение размера файла: от {0} до {1}',
            maxFileSizeAllowed: 'Ограничение размера файла: до {0}',
            minFileSizeAllowed: 'Ограничение размера файла: не менее {0}',
            errorOccurred: 'Произошла ошибка.',
            sentWithSuccess: 'Успешно отправлено'
        }
    };
    var poUploadFormFieldDefault = 'files';
    var poUploadMaxFileSize = 31457280; // 30MB
    var poUploadMinFileSize = 0;
    /**
     * @description
     *
     * O componente `po-upload` permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
     * Este componente também possibilita algumas configurações como:
     *  – Envio de diretórios, onde ele acessa o diretório selecionado assim como seus sub-diretórios;
     *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
     *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
     * clique em enviar.
     *  - Restrições de formatos de arquivo e tamanho.
     *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
     *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
     *  - Permite habilitar uma área onde os arquivos podem ser arrastados.
     */
    var PoUploadBaseComponent = /** @class */ (function () {
        function PoUploadBaseComponent(uploadService, languageService) {
            this.uploadService = uploadService;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /** Define o valor do atributo `name` do componente. */
            this.name = 'file';
            /**
             * @optional
             *
             * @description
             *
             * Define se o envio do arquivo será automático ao selecionar o mesmo.
             *
             * @default `false`
             */
            this.autoUpload = false;
            /**
             * @optional
             *
             * @description
             *
             * Função que será executada no momento de realizar o envio do arquivo,
             * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
             * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
             * que será enviado em conjunto com o arquivo na requisição, por exemplo:
             *
             * ```
             *   event.data = {id: 'id do usuario'};
             * ```
             */
            this.onUpload = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento será disparado quando ocorrer algum erro no envio do arquivo.
             * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
             */
            this.onError = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento será disparado quando o envio do arquivo for realizado com sucesso.
             * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
             */
            this.onSuccess = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da *tag* `form`.
             *
             * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
             * two-way binding no componente deve se utilizar da seguinte forma:
             *
             * ```
             * <po-upload ... [ngModel]="UploadModel" (ngModelChange)="uploadModel = $event"> </po-upload>
             * ```
             *
             */
            this.ngModelChange = new i0.EventEmitter();
            this.extensionNotAllowed = 0;
            this.quantityNotAllowed = 0;
            this.sizeNotAllowed = 0;
            this.onModelTouched = null;
            this._dragDrop = false;
            this.language = languageService.getShortLanguage();
        }
        Object.defineProperty(PoUploadBaseComponent.prototype, "directory", {
            get: function () {
                return this._directory;
            },
            /**
             * @optional
             *
             * @description
             *
             * Permite a seleção de diretórios contendo um ou mais arquivos para envio.
             *
             * > A habilitação desta propriedade se restringe apenas à seleção de diretórios.
             *
             * > Definição não suportada pelo browser **Internet Explorer**, todavia será possível a seleção de arquivos padrão.
             *
             * @default `false`
             */
            set: function (value) {
                this._directory = convertToBoolean(value);
                this.canHandleDirectory = this._directory && !isIE() && !isMobile();
                this.setDirectoryAttribute(this.canHandleDirectory);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "dragDrop", {
            get: function () {
                return this._dragDrop;
            },
            /**
             * @optional
             *
             * @description
             *
             * Exibe a área onde é possível arrastar e selecionar os arquivos. Quando estiver definida, omite o botão para seleção de arquivos
             * automaticamente.
             *
             * > Recomendamos utilizar apenas um `po-upload` com esta funcionalidade por tela.
             *
             * @default `false`
             */
            set: function (value) {
                this._dragDrop = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "hideRestrictionsInfo", {
            get: function () {
                return this._hideRestrictionsInfo;
            },
            /**
             * @optional
             *
             * @description
             *
             * Oculta visualmente as informações de restrições para o upload.
             *
             * @default `false`
             */
            set: function (value) {
                this._hideRestrictionsInfo = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "hideSelectButton", {
            get: function () {
                return this._hideSelectButton;
            },
            /**
             * @optional
             *
             * @description
             *
             * Omite o botão de seleção de arquivos.
             *
             * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
             * pela chamada do método `selectFiles()` para seleção de arquivos.
             *
             * @default `false`
             */
            set: function (value) {
                this._hideSelectButton = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "hideSendButton", {
            get: function () {
                return this._hideSendButton;
            },
            /**
             * @optional
             *
             * @description
             *
             * Omite o botão de envio de arquivos.
             *
             * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
             * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
             *
             * @default `false`
             */
            set: function (value) {
                this._hideSendButton = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poUploadLiteralsDefault[this.language];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-upload`.
             *
             * Existem duas maneiras de customizar o componente:
             *
             * - passando um objeto implementando a interface `PoUploadLiterals` com todas as literais disponíveis;
             * - passando apenas as literais que deseja customizar:
             * ```
             *  const customLiterals: PoUploadLiterals = {
             *    folders: 'Pastas',
             *    selectFile: 'Buscar arquivo',
             *    startSending: 'Enviar'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
             *
             * ```
             * <po-upload
             *   [p-literals]="customLiterals">
             * </po-upload>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es, ru).
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = Object.assign(Object.assign(Object.assign({}, poUploadLiteralsDefault[poLocaleDefault]), poUploadLiteralsDefault[this.language]), value);
                }
                else {
                    this._literals = poUploadLiteralsDefault[this.language];
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "fileRestrictions", {
            get: function () {
                return this._fileRestrictions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto que segue a definição da interface `PoUploadFileRestrictions`,
             * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
             */
            set: function (restrictions) {
                this._fileRestrictions = this.initRestrictions(restrictions);
                this.setAllowedExtensions(restrictions);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "formField", {
            get: function () {
                return this._formField;
            },
            /**
             * @optional
             *
             * @description
             *
             * Nome do campo de formulário que será enviado para o serviço informado na propriedade `p-url`.
             *
             * @default `files`
             */
            set: function (value) {
                this._formField = value && typeof value === 'string' ? value : poUploadFormFieldDefault;
                this.getUploadService().formField = this.formField;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será desabilitado.
             */
            set: function (value) {
                this._disabled = convertToBoolean(value);
                this.validateModel(this.currentFiles);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "isMultiple", {
            get: function () {
                return this.canHandleDirectory ? true : this._isMultiple;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define se pode selecionar mais de um arquivo.
             *
             * > Se utilizada a `p-directory`, habilita-se automaticamente esta propriedade.
             */
            set: function (value) {
                this._isMultiple = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: function (required) {
                this._required = convertToBoolean(required);
                this.validateModel(this.currentFiles);
            },
            enumerable: false,
            configurable: true
        });
        // Função implementada do ControlValueAccessor
        // Usada para interceptar os estados de habilitado via forms api
        PoUploadBaseComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        PoUploadBaseComponent.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        PoUploadBaseComponent.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        PoUploadBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoUploadBaseComponent.prototype.validate = function (abstractControl) {
            if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
        };
        PoUploadBaseComponent.prototype.writeValue = function (model) {
            if (model) {
                if (!isEquals(this.currentFiles, model)) {
                    this.currentFiles = this.parseFiles(model);
                }
            }
            else {
                this.currentFiles = undefined;
            }
        };
        PoUploadBaseComponent.prototype.isExceededFileLimit = function (currentFilesLength) {
            return (this.isMultiple &&
                this.fileRestrictions &&
                this.fileRestrictions.maxFiles > 0 &&
                this.fileRestrictions.maxFiles <= currentFilesLength);
        };
        // Faz o parse dos arquivos selecionados para arquivos do formato PoUploadFile e atualiza os arquivos correntes.
        PoUploadBaseComponent.prototype.parseFiles = function (files) {
            var poUploadFiles = this.currentFiles || [];
            var filesLength = files.length;
            for (var i = 0; i < filesLength; i++) {
                if (this.isExceededFileLimit(poUploadFiles.length)) {
                    this.quantityNotAllowed = filesLength - this.fileRestrictions.maxFiles;
                    break;
                }
                var file = new PoUploadFile(files[i]);
                if (this.checkRestrictions(file)) {
                    poUploadFiles = this.insertFileInFiles(file, poUploadFiles);
                }
            }
            this.sendFeedback();
            return poUploadFiles;
        };
        PoUploadBaseComponent.prototype.validateModel = function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        // Verifica se o arquivo está de acordo com as restrições.
        PoUploadBaseComponent.prototype.checkRestrictions = function (file) {
            var restrictions = this.fileRestrictions;
            if (restrictions) {
                var allowedExtensions = restrictions.allowedExtensions;
                var minFileSize = restrictions.minFileSize;
                var maxFileSize = restrictions.maxFileSize;
                var isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
                var isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
                if (!isAcceptSize) {
                    this.sizeNotAllowed = this.sizeNotAllowed + 1;
                }
                return isAccept && isAcceptSize;
            }
            return true;
        };
        PoUploadBaseComponent.prototype.existsFileSameName = function (file, files) {
            return files.some(function (currentFile) { return file.name === currentFile.name; });
        };
        PoUploadBaseComponent.prototype.getUploadService = function () {
            return this.uploadService;
        };
        PoUploadBaseComponent.prototype.insertFileInFiles = function (newFile, files) {
            if (this.existsFileSameName(newFile, files)) {
                return this.updateExistsFileInFiles(newFile, files);
            }
            if (this.isMultiple) {
                files.push(newFile);
            }
            else {
                files.splice(0, files.length, newFile);
            }
            return files;
        };
        PoUploadBaseComponent.prototype.isAllowedExtension = function (extension, allowedExtensions) {
            if (allowedExtensions === void 0) { allowedExtensions = []; }
            var isAllowed = allowedExtensions.some(function (ext) { return ext.toLowerCase() === extension; });
            if (!isAllowed) {
                this.extensionNotAllowed = this.extensionNotAllowed + 1;
            }
            return isAllowed;
        };
        PoUploadBaseComponent.prototype.setAllowedExtensions = function (restrictions) {
            if (restrictions === void 0) { restrictions = {}; }
            var _allowedExtensions = restrictions.allowedExtensions || [];
            this.allowedExtensions = _allowedExtensions.join(',');
        };
        PoUploadBaseComponent.prototype.initRestrictions = function (restrictions) {
            if (!restrictions) {
                return;
            }
            var minFileSize = restrictions.minFileSize || poUploadMinFileSize;
            var maxFileSize = restrictions.maxFileSize || poUploadMaxFileSize;
            return Object.assign(Object.assign({}, restrictions), { maxFileSize: maxFileSize, minFileSize: minFileSize });
        };
        PoUploadBaseComponent.prototype.updateExistsFileInFiles = function (newFile, files) {
            var fileIndex = files.findIndex(function (currentFile) { return newFile.name === currentFile.name && currentFile.status !== PoUploadStatus.Uploaded; });
            if (fileIndex !== -1) {
                files.splice(fileIndex, 1, newFile);
            }
            return files;
        };
        return PoUploadBaseComponent;
    }());
    PoUploadBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoUploadBaseComponent.ctorParameters = function () { return [
        { type: PoUploadService },
        { type: PoLanguageService }
    ]; };
    PoUploadBaseComponent.propDecorators = {
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        dragDropHeight: [{ type: i0.Input, args: ['p-drag-drop-height',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        help: [{ type: i0.Input, args: ['p-help',] }],
        url: [{ type: i0.Input, args: ['p-url',] }],
        name: [{ type: i0.Input, args: ['name',] }],
        autoUpload: [{ type: i0.Input, args: ['p-auto-upload',] }],
        optional: [{ type: i0.Input, args: ['p-optional',] }],
        headers: [{ type: i0.Input, args: ['p-headers',] }],
        onUpload: [{ type: i0.Output, args: ['p-upload',] }],
        onError: [{ type: i0.Output, args: ['p-error',] }],
        onSuccess: [{ type: i0.Output, args: ['p-success',] }],
        ngModelChange: [{ type: i0.Output, args: ['ngModelChange',] }],
        directory: [{ type: i0.Input, args: ['p-directory',] }],
        dragDrop: [{ type: i0.Input, args: ['p-drag-drop',] }],
        hideRestrictionsInfo: [{ type: i0.Input, args: ['p-hide-restrictions-info',] }],
        hideSelectButton: [{ type: i0.Input, args: ['p-hide-select-button',] }],
        hideSendButton: [{ type: i0.Input, args: ['p-hide-send-button',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        fileRestrictions: [{ type: i0.Input, args: ['p-restrictions',] }],
        formField: [{ type: i0.Input, args: ['p-form-field',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        isMultiple: [{ type: i0.Input, args: ['p-multiple',] }],
        required: [{ type: i0.Input, args: ['p-required',] }]
    };
    __decorate([
        InputBoolean()
    ], PoUploadBaseComponent.prototype, "autoFocus", void 0);

    var PoUploadDragDropAreaComponent = /** @class */ (function () {
        function PoUploadDragDropAreaComponent(elementRef) {
            this.elementRef = elementRef;
            this.selectFiles = new i0.EventEmitter();
        }
        PoUploadDragDropAreaComponent.prototype.focus = function () {
            this.selectFilesLinkElement.nativeElement.focus();
        };
        return PoUploadDragDropAreaComponent;
    }());
    PoUploadDragDropAreaComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-upload-drag-drop-area',
                    template: "<div\r\n  class=\"po-upload-drag-drop-area\"\r\n  [ngClass]=\"{ 'po-upload-drag-drop-area-disabled': disabled }\"\r\n  [style.height.px]=\"height\"\r\n>\r\n  <div class=\"po-upload-drag-drop-area-container\">\r\n    <ng-container *ngIf=\"overlay && !disabled; then overlayTemplate; else defaultTemplate\"> </ng-container>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #overlayTemplate>\r\n  <span class=\"po-upload-drag-drop-area-overlay-icon po-icon po-icon-upload-cloud\"></span>\r\n\r\n  <div class=\"po-upload-drag-drop-area-overlay-label\">\r\n    {{ directoryCompatible ? literals?.dropFoldersHere : literals?.dropFilesHere }}\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #defaultTemplate>\r\n  <span class=\"po-upload-drag-drop-area-icon po-icon po-icon-upload-cloud\"></span>\r\n\r\n  <div class=\"po-upload-drag-drop-area-label\">\r\n    {{ directoryCompatible ? literals?.dragFoldersHere : literals?.dragFilesHere }}\r\n  </div>\r\n\r\n  <button\r\n    #selectFilesLink\r\n    class=\"po-upload-drag-drop-area-select-files\"\r\n    [disabled]=\"disabled\"\r\n    [ngClass]=\"{ 'po-clickable': !disabled }\"\r\n    (click)=\"selectFiles.emit()\"\r\n  >\r\n    {{ directoryCompatible ? literals?.selectFolderOnComputer : literals?.selectFilesOnComputer }}\r\n  </button>\r\n</ng-template>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoUploadDragDropAreaComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PoUploadDragDropAreaComponent.propDecorators = {
        directoryCompatible: [{ type: i0.Input, args: ['p-directory-compatible',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        height: [{ type: i0.Input, args: ['p-height',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        overlay: [{ type: i0.Input, args: ['p-overlay',] }],
        selectFiles: [{ type: i0.Output, args: ['p-select-files',] }],
        selectFilesLinkElement: [{ type: i0.ViewChild, args: ['selectFilesLink',] }]
    };

    var PoUploadDragDropHeightDefault = 320;
    var PoUploadDragDropHeightMin = 160;
    var PoUploadDragDropComponent = /** @class */ (function () {
        function PoUploadDragDropComponent(changeDetector) {
            this.changeDetector = changeDetector;
            this.fileChange = new i0.EventEmitter();
            this.selectFiles = new i0.EventEmitter();
            this.isDragOver = false;
            this._dragDropHeight = PoUploadDragDropHeightDefault;
        }
        Object.defineProperty(PoUploadDragDropComponent.prototype, "dragDropHeight", {
            get: function () {
                return this._dragDropHeight;
            },
            set: function (value) {
                var dragDropHeight = convertToInt(value, PoUploadDragDropHeightDefault);
                this._dragDropHeight = dragDropHeight < PoUploadDragDropHeightMin ? PoUploadDragDropHeightMin : dragDropHeight;
            },
            enumerable: false,
            configurable: true
        });
        PoUploadDragDropComponent.prototype.focus = function () {
            this.dragDropAreaComponent.focus();
        };
        PoUploadDragDropComponent.prototype.onAreaElement = function (element) {
            this.areaElement = element;
            // necessário para não ocorrer o erro HasBeenChecked
            this.changeDetector.detectChanges();
        };
        PoUploadDragDropComponent.prototype.onDragLeave = function () {
            this.isDragOver = false;
        };
        PoUploadDragDropComponent.prototype.onDragOver = function () {
            this.isDragOver = true;
        };
        PoUploadDragDropComponent.prototype.onFileChange = function (files) {
            this.isDragOver = false;
            this.fileChange.emit(files);
        };
        return PoUploadDragDropComponent;
    }());
    PoUploadDragDropComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-upload-drag-drop',
                    template: "<po-upload-drag-drop-area-overlay\r\n  #dragDropOverlay\r\n  *ngIf=\"isDragOver\"\r\n  [p-directory-compatible]=\"directoryCompatible\"\r\n  [p-disabled]=\"disabled\"\r\n  [p-literals]=\"literals\"\r\n  [p-target]=\"dragDropAreaComponent.elementRef\"\r\n  (p-area-element)=\"onAreaElement($event)\"\r\n>\r\n</po-upload-drag-drop-area-overlay>\r\n\r\n<po-upload-drag-drop-area\r\n  p-upload-drag-drop\r\n  [p-area-element]=\"areaElement\"\r\n  [p-directory-compatible]=\"directoryCompatible\"\r\n  [p-disabled]=\"disabled\"\r\n  [p-height]=\"dragDropHeight\"\r\n  [p-literals]=\"literals\"\r\n  [p-overlay]=\"false\"\r\n  (p-drag-leave)=\"onDragLeave()\"\r\n  (p-drag-over)=\"onDragOver()\"\r\n  (p-file-change)=\"onFileChange($event)\"\r\n  (p-select-files)=\"selectFiles.emit()\"\r\n>\r\n</po-upload-drag-drop-area>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoUploadDragDropComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    PoUploadDragDropComponent.propDecorators = {
        dragDropOverlayElement: [{ type: i0.ViewChild, args: ['dragDropOverlay', { read: i0.ElementRef },] }],
        dragDropAreaComponent: [{ type: i0.ViewChild, args: [PoUploadDragDropAreaComponent, { static: true },] }],
        directoryCompatible: [{ type: i0.Input, args: ['p-directory-compatible',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        fileChange: [{ type: i0.Output, args: ['p-file-change',] }],
        selectFiles: [{ type: i0.Output, args: ['p-select-files',] }],
        dragDropHeight: [{ type: i0.Input, args: ['p-drag-drop-height',] }]
    };

    /**
     * @docsExtends PoUploadBaseComponent
     *
     * @example
     *
     * <example name="po-upload-basic" title="PO Upload Basic">
     *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.html"> </file>
     *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-upload-labs" title="PO Upload Labs">
     *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.html"> </file>
     *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-upload-resume" title="PO Upload - Resume">
     *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.html"> </file>
     *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.ts"> </file>
     * </example>
     *
     * <example name="po-upload-rs" title="PO Upload - Realize & Show">
     *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.html"> </file>
     *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.ts"> </file>
     * </example>
     */
    var PoUploadComponent = /** @class */ (function (_super) {
        __extends(PoUploadComponent, _super);
        function PoUploadComponent(uploadService, renderer, i18nPipe, notification, languageService) {
            var _b, _c;
            var _this = _super.call(this, uploadService, languageService) || this;
            _this.renderer = renderer;
            _this.i18nPipe = i18nPipe;
            _this.notification = notification;
            _this.infoByUploadStatus = (_b = {},
                _b[PoUploadStatus.Uploaded] = {
                    text: function () { return _this.literals.sentWithSuccess; },
                    icon: 'po-icon-ok'
                },
                _b[PoUploadStatus.Error] = {
                    text: function () { return _this.literals.errorOccurred; }
                },
                _b[PoUploadStatus.Uploading] = {
                    text: function (percent) { return percent + '%'; }
                },
                _b);
            _this.progressStatusByFileStatus = (_c = {},
                _c[PoUploadStatus.Uploaded] = exports.PoProgressStatus.Success,
                _c[PoUploadStatus.Error] = exports.PoProgressStatus.Error,
                _c);
            _this.calledByCleanInputValue = false;
            return _this;
        }
        Object.defineProperty(PoUploadComponent.prototype, "displayDragDrop", {
            get: function () {
                return this.dragDrop && !isMobile();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadComponent.prototype, "displaySendButton", {
            get: function () {
                var currentFiles = this.currentFiles || [];
                return !this.hideSendButton && !this.autoUpload && currentFiles.length > 0 && this.hasFileNotUploaded;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadComponent.prototype, "selectFileButtonLabel", {
            get: function () {
                if (this.canHandleDirectory) {
                    return this.literals.selectFolder;
                }
                else if (this.isMultiple) {
                    return this.literals.selectFiles;
                }
                else {
                    return this.literals.selectFile;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadComponent.prototype, "hasMoreThanFourItems", {
            get: function () {
                return this.currentFiles && this.currentFiles.length > 4;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadComponent.prototype, "hasMultipleFiles", {
            get: function () {
                return this.currentFiles && this.currentFiles.length > 1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadComponent.prototype, "hasFileNotUploaded", {
            get: function () {
                if (Array.isArray(this.currentFiles)) {
                    return this.currentFiles.some(function (file) { return file.status !== PoUploadStatus.Uploaded; });
                }
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadComponent.prototype, "isDisabled", {
            get: function () {
                var currentFiles = this.currentFiles || [];
                return !!(this.hasAnyFileUploading(currentFiles) ||
                    !this.url ||
                    this.disabled ||
                    this.isExceededFileLimit(currentFiles.length));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadComponent.prototype, "maxFiles", {
            get: function () {
                return this.isMultiple && this.fileRestrictions && this.fileRestrictions.maxFiles;
            },
            enumerable: false,
            configurable: true
        });
        PoUploadComponent.prototype.cancel = function (file) {
            if (file.status === PoUploadStatus.Uploading) {
                return this.stopUpload(file);
            }
            this.removeFile(file);
        };
        PoUploadComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        /** Método responsável por **limpar** o(s) arquivo(s) selecionado(s). */
        PoUploadComponent.prototype.clear = function () {
            this.currentFiles = undefined;
            this.updateModel([]);
            this.cleanInputValue();
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoUploadComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoUploadComponent, { static: true }) upload: PoUploadComponent;
         *
         * focusUpload() {
         *   this.upload.focus();
         * }
         * ```
         */
        PoUploadComponent.prototype.focus = function () {
            if (!this.disabled) {
                if (this.uploadButton) {
                    this.uploadButton.focus();
                    return;
                }
                if (this.displayDragDrop) {
                    this.poUploadDragDropComponent.focus();
                }
            }
        };
        // Verifica se existe algum arquivo sendo enviado ao serviço.
        PoUploadComponent.prototype.hasAnyFileUploading = function (files) {
            if (files && files.length) {
                return files.some(function (file) { return file.status === PoUploadStatus.Uploading; });
            }
            return false;
        };
        // retorna se o status do arquivo é diferente de enviado
        PoUploadComponent.prototype.isAllowCancelEvent = function (status) {
            return status !== PoUploadStatus.Uploaded;
        };
        // Função disparada ao selecionar algum arquivo.
        PoUploadComponent.prototype.onFileChange = function (event) {
            // necessário este tratamento quando para IE, pois nele o change é disparado quando o campo é limpado também
            if (this.calledByCleanInputValue) {
                this.calledByCleanInputValue = false;
                return event.preventDefault();
            }
            var files = event.target.files;
            this.updateFiles(files);
            this.cleanInputValue();
        };
        PoUploadComponent.prototype.onFileChangeDragDrop = function (files) {
            this.updateFiles(files);
        };
        // Remove o arquivo passado por parâmetro da lista dos arquivos correntes.
        PoUploadComponent.prototype.removeFile = function (file) {
            var index = this.currentFiles.indexOf(file);
            this.currentFiles.splice(index, 1);
            this.updateModel(__spreadArray([], __read(this.currentFiles)));
        };
        /** Método responsável por **abrir** a janela para seleção de arquivo(s). */
        PoUploadComponent.prototype.selectFiles = function () {
            var _a;
            (_a = this.onModelTouched) === null || _a === void 0 ? void 0 : _a.call(this);
            this.calledByCleanInputValue = false;
            this.inputFile.nativeElement.click();
        };
        PoUploadComponent.prototype.sendFeedback = function () {
            if (this.sizeNotAllowed > 0) {
                var minFileSize = formatBytes(this.fileRestrictions.minFileSize);
                var maxFileSize = formatBytes(this.fileRestrictions.maxFileSize);
                var args = [this.sizeNotAllowed, minFileSize || '0', maxFileSize];
                this.setPipeArguments('invalidSize', args);
                this.sizeNotAllowed = 0;
            }
            if (this.extensionNotAllowed > 0) {
                var allowedExtensionsFormatted = this.fileRestrictions.allowedExtensions.join(', ').toUpperCase();
                var args = [this.extensionNotAllowed, allowedExtensionsFormatted];
                this.setPipeArguments('invalidFormat', args);
                this.extensionNotAllowed = 0;
            }
            if (this.quantityNotAllowed > 0) {
                var args = [this.quantityNotAllowed];
                this.setPipeArguments('invalidAmount', args);
                this.quantityNotAllowed = 0;
            }
        };
        /** Método responsável por **enviar** o(s) arquivo(s) selecionado(s). */
        PoUploadComponent.prototype.sendFiles = function () {
            if (this.currentFiles && this.currentFiles.length) {
                this.uploadFiles(this.currentFiles);
            }
        };
        PoUploadComponent.prototype.setDirectoryAttribute = function (canHandleDirectory) {
            if (canHandleDirectory) {
                this.renderer.setAttribute(this.inputFile.nativeElement, 'webkitdirectory', 'true');
            }
            else {
                this.renderer.removeAttribute(this.inputFile.nativeElement, 'webkitdirectory');
            }
        };
        // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
        PoUploadComponent.prototype.stopUpload = function (file) {
            var _this = this;
            this.uploadService.stopRequestByFile(file, function () {
                if (_this.autoUpload) {
                    _this.removeFile(file);
                }
                else {
                    _this.stopUploadHandler(file);
                }
            });
        };
        PoUploadComponent.prototype.trackByFn = function (index, file) {
            return file.uid;
        };
        // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
        PoUploadComponent.prototype.uploadFiles = function (files) {
            var _this = this;
            var filesFiltered = files.filter(function (file) { return file.status !== PoUploadStatus.Uploaded; });
            this.uploadService.upload(this.url, filesFiltered, this.headers, this.onUpload, function (file, percent) {
                // UPLOADING
                _this.uploadingHandler(file, percent);
            }, function (file, eventResponse) {
                // SUCCESS
                _this.responseHandler(file, PoUploadStatus.Uploaded);
                _this.onSuccess.emit(eventResponse);
            }, function (file, eventError) {
                // Error
                _this.responseHandler(file, PoUploadStatus.Error);
                _this.onError.emit(eventError);
            });
        };
        PoUploadComponent.prototype.cleanInputValue = function () {
            this.calledByCleanInputValue = true;
            this.inputFile.nativeElement.value = '';
        };
        // função disparada na resposta do sucesso ou error
        PoUploadComponent.prototype.responseHandler = function (file, status) {
            file.status = status;
            file.percent = 100;
        };
        // método responsável por setar os argumentos do i18nPipe de acordo com a restrição.
        PoUploadComponent.prototype.setPipeArguments = function (literalAttributes, literalArguments) {
            var pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], literalArguments);
            this.notification.information(pipeArguments);
        };
        // Função disparada ao parar um envio de arquivo.
        PoUploadComponent.prototype.stopUploadHandler = function (file) {
            file.status = PoUploadStatus.None;
            file.percent = 0;
        };
        PoUploadComponent.prototype.updateFiles = function (files) {
            this.currentFiles = this.parseFiles(files);
            this.updateModel(__spreadArray([], __read(this.currentFiles)));
            if (this.autoUpload) {
                this.uploadFiles(this.currentFiles);
            }
        };
        // Atualiza o ngModel para os arquivos passados por parâmetro.
        PoUploadComponent.prototype.updateModel = function (files) {
            var modelFiles = this.mapCleanUploadFiles(files);
            this.onModelChange ? this.onModelChange(modelFiles) : this.ngModelChange.emit(modelFiles);
        };
        // Função disparada enquanto o arquivo está sendo enviado ao serviço.
        PoUploadComponent.prototype.uploadingHandler = function (file, percent) {
            file.status = PoUploadStatus.Uploading;
            file.percent = percent;
        };
        // retorna os objetos do array sem as propriedades: percent e displayName
        PoUploadComponent.prototype.mapCleanUploadFiles = function (files) {
            var mapedByUploadFile = function (progressFile) {
                var percent = progressFile.percent, displayName = progressFile.displayName, uploadFile = __rest(progressFile, ["percent", "displayName"]);
                return uploadFile;
            };
            return files.map(mapedByUploadFile);
        };
        return PoUploadComponent;
    }(PoUploadBaseComponent));
    PoUploadComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-upload',
                    template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-upload\">\r\n    <input\r\n      #inputFile\r\n      class=\"po-upload-input\"\r\n      type=\"file\"\r\n      [accept]=\"allowedExtensions\"\r\n      [attr.name]=\"name\"\r\n      [disabled]=\"isDisabled\"\r\n      [multiple]=\"isMultiple\"\r\n      [required]=\"required\"\r\n      (change)=\"onFileChange($event)\"\r\n    />\r\n\r\n    <po-upload-drag-drop\r\n      *ngIf=\"displayDragDrop\"\r\n      [p-directory-compatible]=\"canHandleDirectory\"\r\n      [p-disabled]=\"isDisabled\"\r\n      [p-drag-drop-height]=\"dragDropHeight\"\r\n      [p-literals]=\"literals\"\r\n      (p-file-change)=\"onFileChangeDragDrop($event)\"\r\n      (p-select-files)=\"selectFiles()\"\r\n    >\r\n    </po-upload-drag-drop>\r\n\r\n    <po-button\r\n      *ngIf=\"!hideSelectButton && !displayDragDrop\"\r\n      #uploadButton\r\n      class=\"po-upload-button\"\r\n      for=\"file\"\r\n      [p-disabled]=\"isDisabled\"\r\n      [p-label]=\"selectFileButtonLabel\"\r\n      (p-click)=\"selectFiles()\"\r\n    >\r\n    </po-button>\r\n\r\n    <po-upload-file-restrictions\r\n      *ngIf=\"fileRestrictions && !hideRestrictionsInfo\"\r\n      class=\"po-upload-file-restrictions\"\r\n      [ngClass]=\"{ 'po-upload-file-restrictions-drag-drop': displayDragDrop }\"\r\n      [p-allowed-extensions]=\"fileRestrictions?.allowedExtensions\"\r\n      [p-max-files]=\"maxFiles\"\r\n      [p-max-file-size]=\"fileRestrictions?.maxFileSize\"\r\n      [p-min-file-size]=\"fileRestrictions?.minFileSize\"\r\n    >\r\n    </po-upload-file-restrictions>\r\n\r\n    <div *ngIf=\"currentFiles && currentFiles.length\" class=\"po-upload-progress-container\">\r\n      <po-container\r\n        p-no-shadow\r\n        [p-height]=\"hasMoreThanFourItems ? 280 : 'auto'\"\r\n        [p-no-border]=\"!hasMoreThanFourItems\"\r\n        [p-no-padding]=\"!hasMoreThanFourItems\"\r\n      >\r\n        <div [ngClass]=\"{ 'po-upload-progress-container-area po-pt-2 po-pl-1': hasMoreThanFourItems }\">\r\n          <po-progress\r\n            *ngFor=\"let file of currentFiles; trackBy: trackByFn\"\r\n            [p-info]=\"infoByUploadStatus[file.status]?.text(file.percent)\"\r\n            [p-info-icon]=\"infoByUploadStatus[file.status]?.icon\"\r\n            [p-status]=\"progressStatusByFileStatus[file.status]\"\r\n            [p-text]=\"file.displayName\"\r\n            [p-value]=\"file.percent\"\r\n            (p-cancel)=\"cancel(file)\"\r\n            (p-retry)=\"uploadFiles([file])\"\r\n          >\r\n          </po-progress>\r\n        </div>\r\n      </po-container>\r\n    </div>\r\n\r\n    <po-button\r\n      *ngIf=\"displaySendButton\"\r\n      class=\"po-upload-send-button\"\r\n      [class.po-mt-3]=\"hasMoreThanFourItems\"\r\n      p-type=\"primary\"\r\n      [p-disabled]=\"hasAnyFileUploading(currentFiles)\"\r\n      [p-label]=\"literals.startSending\"\r\n      (p-click)=\"uploadFiles(currentFiles)\"\r\n    >\r\n    </po-button>\r\n  </div>\r\n</po-field-container>\r\n",
                    providers: [
                        PoI18nPipe,
                        PoUploadService,
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return PoUploadComponent; }),
                            multi: true
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return PoUploadComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    PoUploadComponent.ctorParameters = function () { return [
        { type: PoUploadService },
        { type: i0.Renderer2 },
        { type: PoI18nPipe },
        { type: PoNotificationService },
        { type: PoLanguageService }
    ]; };
    PoUploadComponent.propDecorators = {
        inputFile: [{ type: i0.ViewChild, args: ['inputFile', { read: i0.ElementRef, static: true },] }],
        poUploadDragDropComponent: [{ type: i0.ViewChild, args: [PoUploadDragDropComponent,] }],
        uploadButton: [{ type: i0.ViewChild, args: ['uploadButton',] }]
    };

    var PoUploadDragDropDirective = /** @class */ (function () {
        function PoUploadDragDropDirective(i18nPipe, notification) {
            this.i18nPipe = i18nPipe;
            this.notification = notification;
            this.dragLeave = new i0.EventEmitter();
            this.dragOver = new i0.EventEmitter();
            this.fileChange = new i0.EventEmitter();
        }
        PoUploadDragDropDirective.prototype.onDragLeave = function (event) {
            var _this = this;
            event.preventDefault();
            event.stopPropagation();
            this.timeout = setTimeout(function () { return _this.dragLeave.emit(); }, 30);
        };
        PoUploadDragDropDirective.prototype.onDragOver = function (event) {
            event.preventDefault();
            event.stopPropagation();
            clearTimeout(this.timeout);
            if (!this.disabled) {
                this.dragOver.emit();
            }
        };
        PoUploadDragDropDirective.prototype.onDrop = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.getFilesFromDataTransferItems(event);
            this.dragLeave.emit();
        };
        PoUploadDragDropDirective.prototype.getFilesFromDataTransferItems = function (event) {
            var _this = this;
            if (!this.disabled) {
                this.invalidFileType = 0;
                if (this.directoryCompatible) {
                    this.getOnlyDirectories(event.dataTransfer.items).then(function () {
                        _this.sendFiles(event, _this.files);
                    });
                }
                else {
                    var files = this.getOnlyFiles(event.dataTransfer);
                    this.sendFiles(event, files);
                }
            }
        };
        // analisa as entradas recursivamente
        PoUploadDragDropDirective.prototype.getFilesFromEntry = function (entry) {
            return __awaiter(this, void 0, void 0, function () {
                var file;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!entry.isFile) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.readFile(entry)];
                        case 1:
                            file = _a.sent();
                            return [2 /*return*/, [file]];
                        case 2:
                            if (!entry.isDirectory) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.readDirectory(entry)];
                        case 3: return [2 /*return*/, _a.sent()];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        PoUploadDragDropDirective.prototype.getOnlyDirectories = function (dataTransferItems) {
            return __awaiter(this, void 0, void 0, function () {
                var entries, dataTransferItems_1, dataTransferItems_1_1, item, entries_1, entries_1_1, entry, newFiles, e_1_1;
                var e_2, _a, e_1, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            entries = [];
                            try {
                                // lista todas as entradas antes de analisá-las
                                for (dataTransferItems_1 = __values(dataTransferItems), dataTransferItems_1_1 = dataTransferItems_1.next(); !dataTransferItems_1_1.done; dataTransferItems_1_1 = dataTransferItems_1.next()) {
                                    item = dataTransferItems_1_1.value;
                                    entries.push(item.webkitGetAsEntry());
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (dataTransferItems_1_1 && !dataTransferItems_1_1.done && (_a = dataTransferItems_1.return)) _a.call(dataTransferItems_1);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                            this.files = [];
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 7, 8, 9]);
                            entries_1 = __values(entries), entries_1_1 = entries_1.next();
                            _c.label = 2;
                        case 2:
                            if (!!entries_1_1.done) return [3 /*break*/, 6];
                            entry = entries_1_1.value;
                            if (!entry.isFile) return [3 /*break*/, 3];
                            this.invalidFileType++;
                            return [3 /*break*/, 5];
                        case 3: return [4 /*yield*/, this.getFilesFromEntry(entry)];
                        case 4:
                            newFiles = _c.sent();
                            this.files = this.files.concat(newFiles);
                            _c.label = 5;
                        case 5:
                            entries_1_1 = entries_1.next();
                            return [3 /*break*/, 2];
                        case 6: return [3 /*break*/, 9];
                        case 7:
                            e_1_1 = _c.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 9];
                        case 8:
                            try {
                                if (entries_1_1 && !entries_1_1.done && (_b = entries_1.return)) _b.call(entries_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 9: return [2 /*return*/];
                    }
                });
            });
        };
        // return only files. If it is a directory, invalidFileType counts.
        PoUploadDragDropDirective.prototype.getOnlyFiles = function (dataTransfer) {
            var _this = this;
            var fileList = Array.from(dataTransfer.files);
            var entriesFiles = Array.from(dataTransfer.items).map(function (item) { return item.webkitGetAsEntry(); });
            return fileList.reduce(function (newFiles, file) {
                var entryFile = entriesFiles.find(function (entry) { return entry.name === file.name; });
                if (entryFile.isFile) {
                    return newFiles.concat(file);
                }
                else {
                    _this.invalidFileType++;
                }
                return newFiles;
            }, []);
        };
        PoUploadDragDropDirective.prototype.readFile = function (entry) {
            return new Promise(function (resolve) {
                entry.file(function (file) {
                    resolve(file);
                });
            });
        };
        PoUploadDragDropDirective.prototype.readDirectory = function (entry) {
            return __awaiter(this, void 0, void 0, function () {
                var dirReader, files, newFiles;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            dirReader = entry.createReader();
                            files = [];
                            return [4 /*yield*/, this.readDirectoryEntries(dirReader)];
                        case 1:
                            newFiles = _a.sent();
                            files = files.concat(newFiles);
                            return [2 /*return*/, files];
                    }
                });
            });
        };
        PoUploadDragDropDirective.prototype.readDirectoryEntries = function (dirReader) {
            var _this = this;
            return new Promise(function (resolve) {
                dirReader.readEntries(function (entries) { return __awaiter(_this, void 0, void 0, function () {
                    var files, entries_2, entries_2_1, entry, itemFiles, e_3_1;
                    var e_3, _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                files = [];
                                _b.label = 1;
                            case 1:
                                _b.trys.push([1, 6, 7, 8]);
                                entries_2 = __values(entries), entries_2_1 = entries_2.next();
                                _b.label = 2;
                            case 2:
                                if (!!entries_2_1.done) return [3 /*break*/, 5];
                                entry = entries_2_1.value;
                                return [4 /*yield*/, this.getFilesFromEntry(entry)];
                            case 3:
                                itemFiles = _b.sent();
                                files = files.concat(itemFiles);
                                _b.label = 4;
                            case 4:
                                entries_2_1 = entries_2.next();
                                return [3 /*break*/, 2];
                            case 5: return [3 /*break*/, 8];
                            case 6:
                                e_3_1 = _b.sent();
                                e_3 = { error: e_3_1 };
                                return [3 /*break*/, 8];
                            case 7:
                                try {
                                    if (entries_2_1 && !entries_2_1.done && (_a = entries_2.return)) _a.call(entries_2);
                                }
                                finally { if (e_3) throw e_3.error; }
                                return [7 /*endfinally*/];
                            case 8:
                                resolve(files);
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        };
        PoUploadDragDropDirective.prototype.sendFeedback = function (invalidFiles) {
            if (invalidFiles) {
                this.setPipeArguments('invalidFileType', invalidFiles);
            }
        };
        PoUploadDragDropDirective.prototype.sendFiles = function (event, files) {
            if (this.areaElement.contains(event.target)) {
                if (files.length > 0) {
                    this.fileChange.emit(files);
                }
                this.sendFeedback(this.invalidFileType);
            }
            else {
                var invalidDropAreaArg = this.directoryCompatible ? this.literals.folders : this.literals.files;
                this.setPipeArguments('invalidDropArea', invalidDropAreaArg);
            }
        };
        // método responsável por setar os argumentos do i18nPipe.
        PoUploadDragDropDirective.prototype.setPipeArguments = function (literalAttributes, args) {
            var pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], args);
            this.notification.information(pipeArguments);
        };
        return PoUploadDragDropDirective;
    }());
    PoUploadDragDropDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[p-upload-drag-drop]',
                    providers: [PoI18nPipe]
                },] }
    ];
    PoUploadDragDropDirective.ctorParameters = function () { return [
        { type: PoI18nPipe },
        { type: PoNotificationService }
    ]; };
    PoUploadDragDropDirective.propDecorators = {
        areaElement: [{ type: i0.Input, args: ['p-area-element',] }],
        directoryCompatible: [{ type: i0.Input, args: ['p-directory-compatible',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        dragLeave: [{ type: i0.Output, args: ['p-drag-leave',] }],
        dragOver: [{ type: i0.Output, args: ['p-drag-over',] }],
        fileChange: [{ type: i0.Output, args: ['p-file-change',] }],
        onDragLeave: [{ type: i0.HostListener, args: ['document:dragleave', ['$event'],] }],
        onDragOver: [{ type: i0.HostListener, args: ['document:dragover', ['$event'],] }],
        onDrop: [{ type: i0.HostListener, args: ['document:drop', ['$event'],] }]
    };

    var PoUploadDragDropAreaOverlayComponent = /** @class */ (function () {
        function PoUploadDragDropAreaOverlayComponent(renderer) {
            this.renderer = renderer;
            this.areaElement = new i0.EventEmitter();
        }
        PoUploadDragDropAreaOverlayComponent.prototype.ngAfterViewInit = function () {
            if (this.target) {
                this.setPosition(this.target);
            }
            this.areaElement.emit(this.DragDropAreaFixed.nativeElement);
        };
        PoUploadDragDropAreaOverlayComponent.prototype.setPosition = function (targetElement) {
            var _this = this;
            var boundingClientRect = targetElement.nativeElement.getBoundingClientRect();
            var clientRectKeys = ['bottom', 'left', 'height', 'right', 'top', 'width'];
            clientRectKeys.forEach(function (clientRectKey) {
                var clientRectValue = boundingClientRect[clientRectKey];
                _this.renderer.setStyle(_this.DragDropAreaFixed.nativeElement, clientRectKey, clientRectValue + "px");
            });
        };
        return PoUploadDragDropAreaOverlayComponent;
    }());
    PoUploadDragDropAreaOverlayComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-upload-drag-drop-area-overlay',
                    template: "<div class=\"po-overlay-fixed\">\r\n  <po-upload-drag-drop-area\r\n    #DragDropAreaFixed\r\n    class=\"po-upload-drag-drop-area-overlay\"\r\n    [p-directory-compatible]=\"directoryCompatible\"\r\n    [p-disabled]=\"disabled\"\r\n    [p-literals]=\"literals\"\r\n    [p-overlay]=\"true\"\r\n  >\r\n  </po-upload-drag-drop-area>\r\n</div>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoUploadDragDropAreaOverlayComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 }
    ]; };
    PoUploadDragDropAreaOverlayComponent.propDecorators = {
        DragDropAreaFixed: [{ type: i0.ViewChild, args: ['DragDropAreaFixed', { read: i0.ElementRef, static: true },] }],
        directoryCompatible: [{ type: i0.Input, args: ['p-directory-compatible',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        target: [{ type: i0.Input, args: ['p-target',] }],
        areaElement: [{ type: i0.Output, args: ['p-area-element',] }]
    };

    var PoUploadFileRestrictionsComponent = /** @class */ (function () {
        function PoUploadFileRestrictionsComponent(changeDetector, languageService) {
            this.changeDetector = changeDetector;
            this.language = languageService.getShortLanguage();
        }
        Object.defineProperty(PoUploadFileRestrictionsComponent.prototype, "allowedExtensions", {
            get: function () {
                return this._allowedExtensions;
            },
            set: function (value) {
                this._allowedExtensions = this.formatAllowedExtensions(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadFileRestrictionsComponent.prototype, "maxFileSize", {
            get: function () {
                return this._maxFileSize;
            },
            set: function (value) {
                this._maxFileSize = formatBytes(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoUploadFileRestrictionsComponent.prototype, "minFileSize", {
            get: function () {
                return this._minFileSize;
            },
            set: function (value) {
                this._minFileSize = formatBytes(value);
            },
            enumerable: false,
            configurable: true
        });
        PoUploadFileRestrictionsComponent.prototype.ngOnInit = function () {
            this.setLiterals();
        };
        PoUploadFileRestrictionsComponent.prototype.formatAllowedExtensions = function (allowedExtensions) {
            var conjunction = { 'pt': 'e', 'en': 'and', 'es': 'y', 'ru': 'и' };
            return allowedExtensions
                ? allowedExtensions
                    .join(', ')
                    .toUpperCase()
                    .replace(/,(?=[^,]*$)/, " " + conjunction[this.language])
                : undefined;
        };
        PoUploadFileRestrictionsComponent.prototype.setLiterals = function () {
            this.literals = Object.assign(Object.assign({}, poUploadLiteralsDefault[poLocaleDefault]), poUploadLiteralsDefault[this.language]);
            this.changeDetector.detectChanges();
        };
        return PoUploadFileRestrictionsComponent;
    }());
    PoUploadFileRestrictionsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-upload-file-restrictions',
                    template: "<p class=\"po-font-text-small\" *ngIf=\"maxFiles > 1\">\r\n  {{ literals?.numberOfFilesAllowed | poI18n: maxFiles }}\r\n</p>\r\n\r\n<p class=\"po-font-text-small\" *ngIf=\"allowedExtensions\">\r\n  {{ literals?.allowedFormats | poI18n: allowedExtensions }}\r\n</p>\r\n\r\n<p class=\"po-font-text-small\" *ngIf=\"minFileSize || maxFileSize\">\r\n  <span>{{ literals?.allowedSizes }}</span>\r\n\r\n  <span *ngIf=\"minFileSize && maxFileSize\">\r\n    {{ literals?.allowedFileSizeRange | poI18n: [minFileSize, maxFileSize] }}\r\n  </span>\r\n\r\n  <span *ngIf=\"minFileSize && !maxFileSize\">\r\n    {{ literals?.minFileSizeAllowed | poI18n: minFileSize }}\r\n  </span>\r\n\r\n  <span *ngIf=\"maxFileSize && !minFileSize\">\r\n    {{ literals?.maxFileSizeAllowed | poI18n: maxFileSize }}\r\n  </span>\r\n</p>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoUploadFileRestrictionsComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: PoLanguageService }
    ]; };
    PoUploadFileRestrictionsComponent.propDecorators = {
        maxFiles: [{ type: i0.Input, args: ['p-max-files',] }],
        allowedExtensions: [{ type: i0.Input, args: ['p-allowed-extensions',] }],
        maxFileSize: [{ type: i0.Input, args: ['p-max-file-size',] }],
        minFileSize: [{ type: i0.Input, args: ['p-min-file-size',] }]
    };

    /**
     * @docsExtends PoInputBaseComponent
     *
     * @description
     *
     * po-url é um input específico para receber URL, com o pattern já configurado.
     *
     * @example
     *
     * <example name="po-url-basic" title="PO Url Basic">
     *   <file name="sample-po-url-basic/sample-po-url-basic.component.html"> </file>
     *   <file name="sample-po-url-basic/sample-po-url-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-url-labs" title="PO Url Labs">
     *   <file name="sample-po-url-labs/sample-po-url-labs.component.html"> </file>
     *   <file name="sample-po-url-labs/sample-po-url-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-url-shortener" title="PO Url - Shortener">
     *   <file name="sample-po-url-shortener/sample-po-url-shortener.component.html"> </file>
     *   <file name="sample-po-url-shortener/sample-po-url-shortener.component.ts"> </file>
     * </example>
     *
     */
    var PoUrlComponent = /** @class */ (function (_super) {
        __extends(PoUrlComponent, _super);
        /* istanbul ignore next */
        function PoUrlComponent(el, cd) {
            var _this = _super.call(this, el, cd) || this;
            _this.icon = 'po-icon-world';
            _this.type = 'url';
            _this.pattern = '^((https|http):\\/\\/)?' + // protocol
                '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
                '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
                '(\\:\\d+)?(\\/[-A-Za-z\\d%_.~+]*)*' + // port and path
                '(\\?[;&A-Za-z\\d%_.~+=-]*)?' + // query string
                '(\\#[-A-Za-z\\d_]*)?$';
            _this.mask = '';
            _this.listener = _this.validateClassesForPattern.bind(_this);
            _this.maxlength = 254;
            return _this;
        }
        PoUrlComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            // Se não tem ngModel ou reactive form adiciona validação com classes css
            setTimeout(function () {
                if (!_this.onChangePropagate) {
                    _this.inputEl.nativeElement.addEventListener('keyup', _this.listener);
                }
            });
            _super.prototype.ngAfterViewInit.call(this);
        };
        PoUrlComponent.prototype.ngOnDestroy = function () {
            if (!this.onChangePropagate) {
                this.inputEl.nativeElement.removeEventListener('keyup', this.listener);
            }
        };
        PoUrlComponent.prototype.extraValidation = function (c) {
            return null;
        };
        return PoUrlComponent;
    }(PoInputGeneric));
    PoUrlComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-url',
                    template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\r\n  <div class=\"po-field-container-content\">\r\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\r\n      <po-icon class=\"po-field-icon\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\r\n    </div>\r\n\r\n    <input\r\n      #inp\r\n      class=\"po-input\"\r\n      [attr.name]=\"name\"\r\n      [autocomplete]=\"autocomplete\"\r\n      [class.po-input-icon-left]=\"icon\"\r\n      [class.po-input-icon-right]=\"clean\"\r\n      [disabled]=\"disabled\"\r\n      [placeholder]=\"placeholder\"\r\n      [readonly]=\"readonly\"\r\n      [required]=\"required\"\r\n      [type]=\"type\"\r\n      (blur)=\"eventOnBlur($event)\"\r\n      (click)=\"eventOnClick($event)\"\r\n      (focus)=\"eventOnFocus($event)\"\r\n      (input)=\"eventOnInput($event)\"\r\n    />\r\n\r\n    <div class=\"po-field-icon-container-right\">\r\n      <po-clean *ngIf=\"clean && !disabled && !readonly\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\">\r\n      </po-clean>\r\n    </div>\r\n  </div>\r\n\r\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\r\n</po-field-container>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return PoUrlComponent; }),
                            multi: true
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: i0.forwardRef(function () { return PoUrlComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    PoUrlComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };

    /**
     * @description
     *
     * Módulo dos componentes: po-checkbox, po-checkbox-group, po-combo, po-datepicker, po-datepicker-range, po-email, po-input,
     * po-lookup, po-number, po-multiselect, po-password, po-radio-group, po-select, po-switch, po-textarea, po-upload
     * e po-url.
     *
     * > Não esqueça de importar o módulo `FormsModule` para usar os componentes de formulários e caso esteja trabalhando com
     * > formulários reativos, importe o módulo `ReactiveFormsModule`, ambos nativos do Angular.
     */
    var PoFieldModule = /** @class */ (function () {
        function PoFieldModule() {
        }
        return PoFieldModule;
    }());
    PoFieldModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        i1.HttpClientModule,
                        PoButtonGroupModule,
                        PoButtonModule,
                        PoCleanModule,
                        PoCalendarModule,
                        PoCheckboxGroupModule,
                        PoContainerModule,
                        PoDatepickerModule,
                        PoDisclaimerGroupModule,
                        PoDisclaimerModule,
                        PoFieldContainerModule,
                        PoLoadingModule,
                        PoModalModule,
                        PoProgressModule,
                        PoServicesModule,
                        PoTableModule,
                        PoTooltipModule,
                        PoIconModule
                    ],
                    exports: [
                        PoCheckboxGroupModule,
                        PoCleanModule,
                        PoDatepickerModule,
                        PoCheckboxComponent,
                        PoComboComponent,
                        PoComboOptionTemplateDirective,
                        PoDecimalComponent,
                        PoDatepickerRangeComponent,
                        PoEmailComponent,
                        PoFieldContainerModule,
                        PoInputComponent,
                        PoLoginComponent,
                        PoLookupComponent,
                        PoLookupModalComponent,
                        PoMultiselectComponent,
                        PoNumberComponent,
                        PoPasswordComponent,
                        PoRadioGroupComponent,
                        PoRichTextComponent,
                        PoSelectComponent,
                        PoSelectOptionTemplateDirective,
                        PoSwitchComponent,
                        PoTextareaComponent,
                        PoUploadComponent,
                        PoUrlComponent
                    ],
                    declarations: [
                        PoCheckboxComponent,
                        PoComboComponent,
                        PoComboOptionTemplateDirective,
                        PoDecimalComponent,
                        PoDatepickerRangeComponent,
                        PoEmailComponent,
                        PoInputComponent,
                        PoLoginComponent,
                        PoLookupComponent,
                        PoLookupModalComponent,
                        PoMultiselectComponent,
                        PoMultiselectDropdownComponent,
                        PoMultiselectItemComponent,
                        PoMultiselectSearchComponent,
                        PoNumberComponent,
                        PoPasswordComponent,
                        PoRadioGroupComponent,
                        PoRichTextBodyComponent,
                        PoRichTextComponent,
                        PoRichTextImageModalComponent,
                        PoRichTextLinkModalComponent,
                        PoRichTextToolbarComponent,
                        PoSelectComponent,
                        PoSelectOptionTemplateDirective,
                        PoSwitchComponent,
                        PoTextareaComponent,
                        PoUploadComponent,
                        PoUploadDragDropComponent,
                        PoUploadDragDropDirective,
                        PoUploadDragDropAreaOverlayComponent,
                        PoUploadDragDropAreaComponent,
                        PoUploadFileRestrictionsComponent,
                        PoUrlComponent
                    ],
                    providers: []
                },] }
    ];

    /**
     * @usedBy PoInfoComponent
     *
     * @description
     *
     * Define os tipos de orientações disponíveis para o `po-info`.
     */
    exports.PoInfoOrientation = void 0;
    (function (PoInfoOrientation) {
        /** O valor será exibido na horizontal, ao lado direito em relação ao label. */
        PoInfoOrientation["Horizontal"] = "horizontal";
        /** Exibe o valor na vertical, ou seja, abaixo do label. */
        PoInfoOrientation["Vertical"] = "vertical";
    })(exports.PoInfoOrientation || (exports.PoInfoOrientation = {}));

    var poInfoOrientationDefault = exports.PoInfoOrientation.Vertical;
    var PoInfoBaseComponent = /** @class */ (function () {
        function PoInfoBaseComponent() {
            this.poInfoOrientation = exports.PoInfoOrientation;
            this._orientation = poInfoOrientationDefault;
        }
        Object.defineProperty(PoInfoBaseComponent.prototype, "labelSize", {
            get: function () {
                return this._labelSize;
            },
            /**
             * @optional
             *
             * @description
             *
             * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `p-label` quando o componente for
             * utilizado na orientação horizontal.
             *
             * Valores válidos:
             *  - `[1 .. 11]`
             *
             * > A propriedade `p-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
             */
            set: function (value) {
                if (isNaN(parseInt(value, 10))) {
                    this._labelSize = undefined;
                }
                else {
                    value = parseInt(value, 10);
                    this._labelSize = value < 1 || value > 11 ? undefined : value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoInfoBaseComponent.prototype, "orientation", {
            get: function () {
                return this._orientation;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o layout de exibição.
             *
             * > Quando definido na horizontal, pode-se utilizar a propriedade `p-label-size` para um maior controle das informações exibidas.
             *
             * @default `vertical`
             */
            set: function (value) {
                this._orientation = Object.values(exports.PoInfoOrientation).includes(value) ? value : poInfoOrientationDefault;
            },
            enumerable: false,
            configurable: true
        });
        return PoInfoBaseComponent;
    }());
    PoInfoBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoInfoBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['p-label',] }],
        url: [{ type: i0.Input, args: ['p-url',] }],
        value: [{ type: i0.Input, args: ['p-value',] }],
        labelSize: [{ type: i0.Input, args: ['p-label-size',] }],
        orientation: [{ type: i0.Input, args: ['p-orientation',] }]
    };

    /**
     * @docsExtends PoInfoBaseComponent
     *
     * @description
     *
     * Este componente tem como objetivo renderizar valores na tela no estilo label na parte superior e
     * valor na parte inferior. Facilita a exibição de dados pois vem com layout padrão PO.
     *
     * @example
     *
     * <example name="po-info-basic" title="PO Info Basic">
     *  <file name="sample-po-info-basic/sample-po-info-basic.component.html"> </file>
     *  <file name="sample-po-info-basic/sample-po-info-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-info-labs" title="PO Info Labs">
     *  <file name="sample-po-info-labs/sample-po-info-labs.component.html"> </file>
     *  <file name="sample-po-info-labs/sample-po-info-labs.component.ts"> </file>
     * </example>
     */
    var PoInfoComponent = /** @class */ (function (_super) {
        __extends(PoInfoComponent, _super);
        function PoInfoComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PoInfoComponent.prototype, "isExternalLink", {
            get: function () {
                return isExternalLink(this.url);
            },
            enumerable: false,
            configurable: true
        });
        return PoInfoComponent;
    }(PoInfoBaseComponent));
    PoInfoComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-info',
                    template: "<div class=\"po-info\" [class.po-row]=\"orientation === poInfoOrientation.Horizontal && labelSize\">\r\n  <div\r\n    class=\"po-info-container-title\"\r\n    [ngClass]=\"labelSize && orientation === poInfoOrientation.Horizontal ? 'po-sm-' + labelSize : ''\"\r\n    [class.po-info-label-horizontal]=\"orientation === poInfoOrientation.Horizontal\"\r\n    [class.po-text-nowrap]=\"orientation === poInfoOrientation.Horizontal && !labelSize\"\r\n  >\r\n    <span class=\"po-info-label\">\r\n      {{ orientation === poInfoOrientation.Horizontal ? label + ':' : label }}\r\n    </span>\r\n  </div>\r\n\r\n  <div\r\n    [ngClass]=\"labelSize && orientation === poInfoOrientation.Horizontal ? 'po-sm-' + (12 - labelSize) : ''\"\r\n    [class.po-info-container-content]=\"orientation !== poInfoOrientation.Horizontal\"\r\n    [class.po-info-value-horizontal]=\"orientation === poInfoOrientation.Horizontal\"\r\n  >\r\n    <ng-container *ngIf=\"url; then infoLink; else infoValue\"></ng-container>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #infoLink>\r\n  <ng-container *ngIf=\"isExternalLink; then externalLink; else internalLink\"> </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #infoValue>\r\n  <span class=\"po-info-value\">{{ value }}</span>\r\n</ng-template>\r\n\r\n<ng-template #externalLink>\r\n  <a class=\"po-info-value po-info-link\" [href]=\"url\" target=\"_blank\">{{ value }}</a>\r\n</ng-template>\r\n\r\n<ng-template #internalLink>\r\n  <a class=\"po-info-value po-info-link\" [routerLink]=\"url\">{{ value }}</a>\r\n</ng-template>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];

    /**
     * @description
     *
     * Módulo do componente po-info.
     */
    var PoInfoModule = /** @class */ (function () {
        function PoInfoModule() {
        }
        return PoInfoModule;
    }());
    PoInfoModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, router.RouterModule],
                    declarations: [PoInfoComponent],
                    exports: [PoInfoComponent],
                    providers: [],
                    schemas: []
                },] }
    ];

    /**
     * @usedBy PoTagComponent
     *
     * @description
     *
     * Define os tipos de orientações disponíveis para o `po-tag`.
     */
    exports.PoTagOrientation = void 0;
    (function (PoTagOrientation) {
        /** A tag será exibida na horizontal, ao lado direito em relação ao label. */
        PoTagOrientation["Horizontal"] = "horizontal";
        /** Exibe a tag na vertical, ou seja, abaixo do label. */
        PoTagOrientation["Vertical"] = "vertical";
    })(exports.PoTagOrientation || (exports.PoTagOrientation = {}));

    /**
     * @usedBy PoTagComponent
     *
     * @description
     *
     * Define os tipos disponíveis para o `po-tag`.
     */
    exports.PoTagType = void 0;
    (function (PoTagType) {
        /** Erro, perigo, problema ou aviso crítico. */
        PoTagType["Danger"] = "danger";
        /** Informativo ou explicativo. */
        PoTagType["Info"] = "info";
        /** Confirmação, resultados positivos ou êxito */
        PoTagType["Success"] = "success";
        /** Aviso ou advertência. */
        PoTagType["Warning"] = "warning";
    })(exports.PoTagType || (exports.PoTagType = {}));

    var poTagColors = Object.values(PoColorPaletteEnum);
    var poTagOrientationDefault = exports.PoTagOrientation.Vertical;
    /**
     * @description
     *
     * Este componente permite exibir um valor em forma de um marcador colorido, sendo possível definir uma legenda e realizar customizações
     * na cor, iconografia e tipo.
     *
     * Além disso, é possível definir uma ação que será executada tanto ao *click* quanto através das teclas *enter/space* enquanto navega
     * utilizando a tecla *tab*.
     *
     * Seu uso é recomendado para informações que necessitem de destaque em forma de marcação.
     */
    var PoTagBaseComponent = /** @class */ (function () {
        function PoTagBaseComponent() {
            /**
             * @optional
             *
             * @description
             *
             * Ação que será executada ao clicar sobre o `po-tag` e que receberá como parâmetro um objeto contendo o seu valor e tipo.
             */
            this.click = new i0.EventEmitter();
            this.poTagOrientation = exports.PoTagOrientation;
            this._orientation = poTagOrientationDefault;
        }
        Object.defineProperty(PoTagBaseComponent.prototype, "color", {
            get: function () {
                return this._color;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma cor para a *tag*.
             *
             * Valores válidos:
             *  - <span class="dot po-color-01"></span> `color-01`
             *  - <span class="dot po-color-02"></span> `color-02`
             *  - <span class="dot po-color-03"></span> `color-03`
             *  - <span class="dot po-color-04"></span> `color-04`
             *  - <span class="dot po-color-05"></span> `color-05`
             *  - <span class="dot po-color-06"></span> `color-06`
             *  - <span class="dot po-color-07"></span> `color-07`
             *  - <span class="dot po-color-08"></span> `color-08`
             *  - <span class="dot po-color-09"></span> `color-09`
             *  - <span class="dot po-color-10"></span> `color-10`
             *  - <span class="dot po-color-11"></span> `color-11`
             *  - <span class="dot po-color-12"></span> `color-12`
             *
             * > **Atenção:** A propriedade `p-type` sobrepõe esta definição.
             */
            set: function (value) {
                this._color = poTagColors.includes(value) ? value : undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTagBaseComponent.prototype, "icon", {
            get: function () {
                return this._icon;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define ou ativa um ícone que será exibido ao lado do valor da *tag*.
             *
             * Quando `p-type` estiver definida, basta informar um valor igual a `true` para que o ícone seja exibido conforme descrições abaixo:
             * - <span class="po-icon po-icon-ok"></span> - `success`
             * - <span class="po-icon po-icon-warning"></span> - `warning`
             * - <span class="po-icon po-icon-close"></span> - `danger`
             * - <span class="po-icon po-icon-info"></span> - `info`
             *
             * Também É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
             * ```
             * <po-tag p-icon="po-icon-user" p-value="PO Tag"></po-tag>
             * ```
             * como também utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
             * ```
             * <po-tag p-icon="fa fa-podcast" p-value="PO Tag"></po-button>
             * ```
             * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
             * ```
             * <po-tag [p-icon]="template" p-value="Tag template ionic"></po-button>
             *
             * <ng-template #template>
             *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
             * </ng-template>
             * ```
             * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.
             *
             * @default `false`
             */
            set: function (value) {
                if (this.type) {
                    this._icon = convertToBoolean(value);
                }
                else {
                    this._icon = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTagBaseComponent.prototype, "inverse", {
            get: function () {
                return this._inverse;
            },
            /**
             * @optional
             *
             * @description
             *
             * Ativa a inversão de cores configuradas no componente, possibilitando uma visualização de status ativo e inativo.
             *
             * > A cor do texto, do ícone e da borda ficam com a cor utilizada na propriedade `p-color` ou a cor correspondente ao `p-type`,
             * e a cor do fundo fica branca.
             *
             * @default `false`
             */
            set: function (value) {
                this._inverse = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTagBaseComponent.prototype, "orientation", {
            get: function () {
                return this._orientation;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o *layout* de exibição.
             *
             * @default `vertical`
             */
            set: function (value) {
                this._orientation = Object.values(exports.PoTagOrientation).includes(value) ? value : poTagOrientationDefault;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTagBaseComponent.prototype, "type", {
            get: function () {
                return this._type;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o tipo da *tag*.
             *
             * Valores válidos:
             *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
             *  - `warning`: cor amarela que representa aviso ou advertência.
             *  - `danger`: cor vermelha para erro ou aviso crítico.
             *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
             *
             * > Quando esta propriedade for definida, irá sobrepor a definição de `p-color` e `p-icon` somente será exibido caso seja `true`.
             *
             * @default `info`
             */
            set: function (value) {
                this._type = Object.values(exports.PoTagType).includes(value) ? value : undefined;
            },
            enumerable: false,
            configurable: true
        });
        return PoTagBaseComponent;
    }());
    PoTagBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoTagBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['p-label',] }],
        value: [{ type: i0.Input, args: ['p-value',] }],
        click: [{ type: i0.Output, args: ['p-click',] }],
        color: [{ type: i0.Input, args: ['p-color',] }],
        icon: [{ type: i0.Input, args: ['p-icon',] }],
        inverse: [{ type: i0.Input, args: ['p-inverse',] }],
        orientation: [{ type: i0.Input, args: ['p-orientation',] }],
        type: [{ type: i0.Input, args: ['p-type',] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Define os ícones disponíveis para o `po-tag`.
     */
    var PoTagIcon;
    (function (PoTagIcon) {
        /** Ícone fechar. */
        PoTagIcon["Danger"] = "po-icon-close";
        /** Ícone de informação. */
        PoTagIcon["Info"] = "po-icon-info";
        /** Ícone que representa confirmação. */
        PoTagIcon["Success"] = "po-icon-ok";
        /** Ícone com ponto de exclamação. */
        PoTagIcon["Warning"] = "po-icon-warning";
    })(PoTagIcon || (PoTagIcon = {}));

    var poTagTypeDefault = 'po-tag-' + exports.PoTagType.Info;
    /**
     * @docsExtends PoTagBaseComponent
     *
     * @example
     *
     * <example name="po-tag-basic" title="PO Tag Basic">
     *  <file name="sample-po-tag-basic/sample-po-tag-basic.component.html"> </file>
     *  <file name="sample-po-tag-basic/sample-po-tag-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-tag-labs" title="PO Tag Labs">
     *  <file name="sample-po-tag-labs/sample-po-tag-labs.component.html"> </file>
     *  <file name="sample-po-tag-labs/sample-po-tag-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-tag-bank-account" title="PO Tag - Bank Account">
     *  <file name="sample-po-tag-bank-account/sample-po-tag-bank-account.component.html"> </file>
     *  <file name="sample-po-tag-bank-account/sample-po-tag-bank-account.component.ts"> </file>
     * </example>
     */
    var PoTagComponent = /** @class */ (function (_super) {
        __extends(PoTagComponent, _super);
        function PoTagComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoTagComponent.prototype.ngOnInit = function () {
            this.isClickable = this.click.observers.length > 0;
        };
        Object.defineProperty(PoTagComponent.prototype, "iconFromType", {
            get: function () {
                switch (this.type) {
                    case exports.PoTagType.Danger:
                        return PoTagIcon.Danger;
                    case exports.PoTagType.Info:
                        return PoTagIcon.Info;
                    case exports.PoTagType.Success:
                        return PoTagIcon.Success;
                    case exports.PoTagType.Warning:
                        return PoTagIcon.Warning;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTagComponent.prototype, "tagColor", {
            get: function () {
                if (this.type) {
                    return this.inverse ? "po-tag-" + this.type + "-inverse" : "po-tag-" + this.type;
                }
                if (this.color) {
                    return this.inverse ? "po-text-" + this.color : "po-" + this.color;
                }
                return this.inverse ? poTagTypeDefault + "-inverse" : poTagTypeDefault;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTagComponent.prototype, "tagOrientation", {
            get: function () {
                return this.orientation === this.poTagOrientation.Horizontal;
            },
            enumerable: false,
            configurable: true
        });
        PoTagComponent.prototype.onClick = function () {
            var submittedTagItem = { value: this.value, type: this.type };
            this.click.emit(submittedTagItem);
        };
        PoTagComponent.prototype.onKeyPressed = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.onClick();
        };
        return PoTagComponent;
    }(PoTagBaseComponent));
    PoTagComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-tag',
                    template: "<div class=\"po-tag-container\" [class.po-tag-container-horizontal]=\"tagOrientation\">\r\n  <div *ngIf=\"label\" class=\"po-tag-title po-text-nowrap\">\r\n    <span class=\"po-tag-label\">{{ tagOrientation ? label + ':' : label }}</span>\r\n  </div>\r\n\r\n  <div class=\"po-tag-sub-container\">\r\n    <div\r\n      class=\"po-tag\"\r\n      [class.po-clickable]=\"isClickable\"\r\n      [class.po-tag-inverse]=\"inverse\"\r\n      [ngClass]=\"tagColor\"\r\n      tabindex=\"0\"\r\n      (click)=\"onClick()\"\r\n      (keydown.enter)=\"onKeyPressed($event)\"\r\n      (keydown.space)=\"$event.preventDefault()\"\r\n      (keyup.space)=\"onKeyPressed($event)\"\r\n    >\r\n      <po-icon *ngIf=\"icon\" class=\"po-tag-icon\" [p-icon]=\"!type ? icon : iconFromType\"> </po-icon>\r\n\r\n      <span class=\"po-tag-value\">{{ value }}</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];

    /**
     * @description
     *
     * Módulo do componente `po-tag`.
     */
    var PoTagModule = /** @class */ (function () {
        function PoTagModule() {
        }
        return PoTagModule;
    }());
    PoTagModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, PoIconModule],
                    declarations: [PoTagComponent],
                    exports: [PoTagComponent],
                    providers: [],
                    schemas: []
                },] }
    ];

    function getGridColumnsClasses(smColumns, mdColumns, lgColumns, xlColumns, gridColumns, pullColumns) {
        var systemGrid = {
            sm: smColumns || gridColumns || 12,
            md: mdColumns || gridColumns || 6,
            lg: lgColumns || gridColumns || 4,
            xl: xlColumns || gridColumns || 3,
            pullSm: (pullColumns === null || pullColumns === void 0 ? void 0 : pullColumns.smPull) || 0,
            pullMd: (pullColumns === null || pullColumns === void 0 ? void 0 : pullColumns.mdPull) || 0,
            pullLg: (pullColumns === null || pullColumns === void 0 ? void 0 : pullColumns.lgPull) || 0,
            pullXl: (pullColumns === null || pullColumns === void 0 ? void 0 : pullColumns.xlPull) || 0
        };
        return "po-sm-" + systemGrid.sm + " po-pull-sm-" + systemGrid.pullSm + " po-md-" + systemGrid.md + " po-pull-md-" + systemGrid.pullMd + " po-lg-" + systemGrid.lg + " po-pull-lg-" + systemGrid.pullLg + " po-xl-" + systemGrid.xl + " po-pull-xl-" + systemGrid.pullXl;
    }
    function isVisibleField(field) {
        var containsVisible = 'visible' in field;
        return containsVisible ? field.visible : true;
    }

    /**
     * @usedBy PoDynamicFormComponent
     *
     * @description
     *
     * Enum para definição do tipo de campo que será criado dinamicamente.
     */
    exports.PoDynamicFieldType = void 0;
    (function (PoDynamicFieldType) {
        /** Valor booleano. */
        PoDynamicFieldType["Boolean"] = "boolean";
        /** Valor numérico que contém casas decimais e milhar. */
        PoDynamicFieldType["Currency"] = "currency";
        /** Valor para data. */
        PoDynamicFieldType["Date"] = "date";
        /** Valor para data e hora. */
        PoDynamicFieldType["DateTime"] = "datetime";
        /** Utilizado para informar/exibir hora. */
        PoDynamicFieldType["Time"] = "time";
        /** Valor númerico. */
        PoDynamicFieldType["Number"] = "number";
        /** Texto. */
        PoDynamicFieldType["String"] = "string";
    })(exports.PoDynamicFieldType || (exports.PoDynamicFieldType = {}));

    var PoDynamicFormFieldsBaseComponent = /** @class */ (function () {
        function PoDynamicFormFieldsBaseComponent(titleCasePipe) {
            this.titleCasePipe = titleCasePipe;
            this.formValidate = new i0.EventEmitter();
            this.fieldsChange = new i0.EventEmitter();
            // Evento disparado se existir optionsService em visibleField. Necessário resgatar referência do objeto selecionado para quando se tratar de recebimento de opções via serviço.
            this.objectValue = new i0.EventEmitter();
            this.visibleFields = [];
            this._value = {};
        }
        Object.defineProperty(PoDynamicFormFieldsBaseComponent.prototype, "fields", {
            get: function () {
                return this._fields;
            },
            // array de objetos que implementam a interface PoDynamicFormField, que serão exibidos no componente.
            set: function (value) {
                this._fields = Array.isArray(value) ? __spreadArray([], __read(value)) : [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDynamicFormFieldsBaseComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            // valor que será utilizado para iniciar valor no componente.
            set: function (value) {
                this._value = value && isTypeof(value, 'object') ? value : {};
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDynamicFormFieldsBaseComponent.prototype, "validateFields", {
            get: function () {
                return this._validateFields;
            },
            set: function (value) {
                this._validateFields = Array.isArray(value) ? __spreadArray([], __read(value)) : [];
            },
            enumerable: false,
            configurable: true
        });
        PoDynamicFormFieldsBaseComponent.prototype.compareTo = function (value, compareTo) {
            return value === compareTo;
        };
        // retorna um array com os objetos configurados e visiveis.
        PoDynamicFormFieldsBaseComponent.prototype.getVisibleFields = function () {
            var _this = this;
            var visibleFields = [];
            this.fields.forEach(function (field) {
                if (_this.existsProperty(visibleFields, field.property)) {
                    _this.printError("\"po-dynamic-form\" property \"" + field.property + "\" est\u00E1 duplicado. Interface: PoDynamicFormField.");
                    return;
                }
                if (!field['property']) {
                    _this.printError('"po-dynamic-form" É obrigatório ser especificado um property.');
                    return;
                }
                if (isVisibleField(field)) {
                    visibleFields.push(_this.createField(field));
                }
            });
            return sortFields(visibleFields);
        };
        // converte um array em string para um array de objetos que contem label e value.
        PoDynamicFormFieldsBaseComponent.prototype.convertOptions = function (options) {
            var everyOptionString = options.every(function (option) { return typeof option === 'string'; });
            if (everyOptionString) {
                return options.map(function (value) { return ({ label: value, value: value }); });
            }
            return options;
        };
        // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
        PoDynamicFormFieldsBaseComponent.prototype.createField = function (field) {
            var control = this.getComponentControl(field);
            var options = !!field.options ? this.convertOptions(field.options) : undefined;
            var focus = this.hasFocus(field);
            var type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
            var componentClass = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns, {
                smPull: field.gridSmPull,
                mdPull: field.gridMdPull,
                lgPull: field.gridLgPull,
                xlPull: field.gridXlPull
            });
            return Object.assign(Object.assign({ label: this.titleCasePipe.transform(field.property), maskFormatModel: this.compareTo(type, exports.PoDynamicFieldType.Time) }, field), { componentClass: componentClass, control: control, focus: focus, options: options });
        };
        PoDynamicFormFieldsBaseComponent.prototype.existsProperty = function (fields, property) {
            return fields.some(function (field) { return field.property === property; });
        };
        // recupera o componente de acordo com algumas regras do field.
        PoDynamicFormFieldsBaseComponent.prototype.getComponentControl = function (field) {
            if (field === void 0) { field = {}; }
            var type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
            if (this.isNumberType(field, type)) {
                return 'number';
            }
            else if (this.isCurrencyType(field, type)) {
                return 'decimal';
            }
            else if (this.isSelect(field)) {
                return 'select';
            }
            else if (this.isRadioGroup(field)) {
                return 'radioGroup';
            }
            else if (this.isCheckboxGroup(field)) {
                return 'checkboxGroup';
            }
            else if (this.isMultiselect(field)) {
                return 'multiselect';
            }
            else if (this.compareTo(type, exports.PoDynamicFieldType.Boolean)) {
                return 'switch';
            }
            else if (this.compareTo(type, exports.PoDynamicFieldType.Date) || this.compareTo(type, exports.PoDynamicFieldType.DateTime)) {
                return field.range ? 'datepickerrange' : 'datepicker';
            }
            else if (this.compareTo(type, exports.PoDynamicFieldType.Time)) {
                field.mask = field.mask || '99:99';
                return 'input';
            }
            else if (this.isCombo(field)) {
                return 'combo';
            }
            else if (this.isLookup(field)) {
                return 'lookup';
            }
            else if (this.isTextarea(field)) {
                return 'textarea';
            }
            else if (this.isPassword(field)) {
                return 'password';
            }
            return 'input';
        };
        PoDynamicFormFieldsBaseComponent.prototype.hasFocus = function (field) {
            return !!this.autoFocus && this.autoFocus === field.property;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isCheckboxGroup = function (field) {
            var optionsService = field.optionsService, optionsMulti = field.optionsMulti, options = field.options;
            return !optionsService && optionsMulti && !!options && options.length <= 3;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isCombo = function (field) {
            var optionsService = field.optionsService;
            return !!optionsService && (isTypeof(optionsService, 'string') || this.isComboFilter(optionsService));
        };
        PoDynamicFormFieldsBaseComponent.prototype.isCurrencyType = function (field, type) {
            var mask = field.mask, pattern = field.pattern;
            return this.compareTo(type, exports.PoDynamicFieldType.Currency) && !mask && !pattern;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isLookupFilter = function (object) {
            return object && object.getObjectByValue !== undefined;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isComboFilter = function (object) {
            return object && object.getFilteredData !== undefined;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isLookup = function (field) {
            var searchService = field.searchService;
            return !!searchService && (isTypeof(searchService, 'string') || this.isLookupFilter(searchService));
        };
        PoDynamicFormFieldsBaseComponent.prototype.isMultiselect = function (field) {
            var optionsService = field.optionsService, optionsMulti = field.optionsMulti, options = field.options;
            return optionsMulti && (!!optionsService || (!!options && options.length > 3));
        };
        PoDynamicFormFieldsBaseComponent.prototype.isNumberType = function (field, type) {
            var mask = field.mask, pattern = field.pattern;
            return this.compareTo(type, exports.PoDynamicFieldType.Number) && !mask && !pattern;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isPassword = function (field) {
            var secret = field.secret;
            return secret;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isRadioGroup = function (field) {
            var optionsMulti = field.optionsMulti, options = field.options;
            return !optionsMulti && !!options && options.length <= 3;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isSelect = function (field) {
            var optionsMulti = field.optionsMulti, options = field.options;
            return !optionsMulti && !!options && options.length > 3;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isTextarea = function (field) {
            var rows = field.rows;
            return rows && rows >= 3;
        };
        PoDynamicFormFieldsBaseComponent.prototype.printError = function (error) {
            console.error(error);
        };
        return PoDynamicFormFieldsBaseComponent;
    }());
    PoDynamicFormFieldsBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoDynamicFormFieldsBaseComponent.ctorParameters = function () { return [
        { type: common.TitleCasePipe }
    ]; };
    PoDynamicFormFieldsBaseComponent.propDecorators = {
        autoFocus: [{ type: i0.Input, args: ['p-auto-focus',] }],
        disabledForm: [{ type: i0.Input, args: ['p-disabled-form',] }],
        validate: [{ type: i0.Input, args: ['p-validate',] }],
        formValidate: [{ type: i0.Output, args: ['p-form-validate',] }],
        fieldsChange: [{ type: i0.Output, args: ['p-fieldsChange',] }],
        objectValue: [{ type: i0.Output, args: ['p-object-value',] }],
        fields: [{ type: i0.Input, args: ['p-fields',] }],
        value: [{ type: i0.Input, args: ['p-value',] }],
        validateFields: [{ type: i0.Input, args: ['p-validate-fields',] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente de criação dos campos dinâmicos.
     */
    var PoDynamicFormFieldsComponent = /** @class */ (function (_super) {
        __extends(PoDynamicFormFieldsComponent, _super);
        function PoDynamicFormFieldsComponent(titleCasePipe, validationService, changes, form) {
            var _this = _super.call(this, titleCasePipe) || this;
            _this.validationService = validationService;
            _this.changes = changes;
            _this.form = form;
            _this.previousValue = {};
            return _this;
        }
        PoDynamicFormFieldsComponent.prototype.ngOnChanges = function (changes) {
            if (changes.fields) {
                this.visibleFields = this.getVisibleFields();
            }
        };
        PoDynamicFormFieldsComponent.prototype.focus = function (property) {
            var foundComponent = this.components.find(function (component) { return component.name === property; });
            if (foundComponent) {
                foundComponent.focus();
            }
        };
        PoDynamicFormFieldsComponent.prototype.isDisabled = function (field) {
            return field.disabled || this.disabledForm;
        };
        PoDynamicFormFieldsComponent.prototype.onChangeField = function (visibleField, objectValue) {
            return __awaiter(this, void 0, void 0, function () {
                var property, isBooleanType, isChangedValueField, _b, changedField, changedFieldIndex;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            property = visibleField.property;
                            isBooleanType = visibleField.type === 'boolean';
                            isChangedValueField = this.previousValue[property] !== this.value[property];
                            if (visibleField.optionsService) {
                                this.objectValue.emit(objectValue);
                            }
                            if (!((this.form.touched || isBooleanType) && isChangedValueField)) return [3 /*break*/, 3];
                            _b = this.getField(property), changedField = _b.changedField, changedFieldIndex = _b.changedFieldIndex;
                            if (!changedField.validate) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.validateField(changedField, changedFieldIndex, visibleField)];
                        case 1:
                            _c.sent();
                            _c.label = 2;
                        case 2:
                            this.triggerValidationOnForm(changedFieldIndex);
                            _c.label = 3;
                        case 3:
                            this.updatePreviousValue();
                            return [2 /*return*/];
                    }
                });
            });
        };
        PoDynamicFormFieldsComponent.prototype.updatePreviousValue = function () {
            this.previousValue = JSON.parse(JSON.stringify(this.value));
        };
        PoDynamicFormFieldsComponent.prototype.trackBy = function (index) {
            return index;
        };
        PoDynamicFormFieldsComponent.prototype.applyFieldValidation = function (index, validatedField) {
            var field = this.fields[index];
            this.fields[index] = Object.assign(Object.assign({}, field), validatedField.field);
            this.updateFields();
            if (validatedField.hasOwnProperty('value')) {
                this.value[field.property] = validatedField.value;
            }
            this.changes.detectChanges();
            if (validatedField.focus) {
                this.focus(field.property);
            }
        };
        PoDynamicFormFieldsComponent.prototype.getField = function (property) {
            var changedFieldIndex = this.fields.findIndex(function (field) { return field.property === property; });
            var changedField = this.fields[changedFieldIndex];
            return { changedField: changedField, changedFieldIndex: changedFieldIndex };
        };
        PoDynamicFormFieldsComponent.prototype.triggerValidationOnForm = function (changedFieldIndex) {
            var _a;
            var isValidatableField = ((_a = this.validateFields) === null || _a === void 0 ? void 0 : _a.length)
                ? this.validateFieldsChecker(this.validateFields, this.fields[changedFieldIndex].property)
                : true;
            var hasValidationForm = this.validate && isValidatableField && this.formValidate.observers.length;
            if (hasValidationForm) {
                var updatedField = this.fields[changedFieldIndex];
                this.formValidate.emit(updatedField);
            }
        };
        PoDynamicFormFieldsComponent.prototype.updateFields = function () {
            this.fieldsChange.emit(this.fields);
            this.visibleFields = this.getVisibleFields();
        };
        PoDynamicFormFieldsComponent.prototype.validateFieldsChecker = function (validateFields, propertyField) {
            return validateFields.some(function (validateFieldItem) { return validateFieldItem === propertyField; });
        };
        PoDynamicFormFieldsComponent.prototype.validateField = function (field, fieldIndex, visibleField) {
            return __awaiter(this, void 0, void 0, function () {
                var value, previousDisabled, validatedField, _a_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            value = this.value[field.property];
                            previousDisabled = visibleField.disabled;
                            visibleField.disabled = true;
                            this.changes.detectChanges();
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.validationService.sendFieldChange(field, value).toPromise()];
                        case 2:
                            validatedField = _b.sent();
                            this.applyFieldValidation(fieldIndex, validatedField);
                            return [3 /*break*/, 4];
                        case 3:
                            _a_1 = _b.sent();
                            visibleField.disabled = previousDisabled;
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        return PoDynamicFormFieldsComponent;
    }(PoDynamicFormFieldsBaseComponent));
    PoDynamicFormFieldsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-dynamic-form-fields',
                    template: "<div class=\"po-row\" *ngIf=\"visibleFields && visibleFields.length > 0\">\r\n  <ng-container *ngFor=\"let field of visibleFields; trackBy: trackBy\">\r\n    <po-divider *ngIf=\"field?.divider?.trim()\" class=\"po-sm-12\" [p-label]=\"field.divider\"> </po-divider>\r\n\r\n    <po-datepicker\r\n      #component\r\n      *ngIf=\"compareTo(field.control, 'datepicker')\"\r\n      [name]=\"field.property\"\r\n      [(ngModel)]=\"value[field.property]\"\r\n      [ngClass]=\"field.componentClass\"\r\n      p-clean\r\n      [p-disabled]=\"isDisabled(field)\"\r\n      [p-error-pattern]=\"field.errorMessage\"\r\n      [p-auto-focus]=\"field.focus\"\r\n      [p-format]=\"field.format\"\r\n      [p-help]=\"field.help\"\r\n      [p-label]=\"field.label\"\r\n      [p-locale]=\"field.locale\"\r\n      [p-max-date]=\"field.maxValue\"\r\n      [p-min-date]=\"field.minValue\"\r\n      [p-optional]=\"field.optional\"\r\n      [p-required]=\"field.required\"\r\n      (p-change)=\"onChangeField(field)\"\r\n      [p-placeholder]=\"field.placeholder\"\r\n    >\r\n    </po-datepicker>\r\n\r\n    <po-datepicker-range\r\n      #component\r\n      *ngIf=\"compareTo(field.control, 'datepickerrange')\"\r\n      [name]=\"field.property\"\r\n      [(ngModel)]=\"value[field.property]\"\r\n      [ngClass]=\"field.componentClass\"\r\n      p-clean\r\n      [p-disabled]=\"isDisabled(field)\"\r\n      [p-auto-focus]=\"field.focus\"\r\n      [p-help]=\"field.help\"\r\n      [p-label]=\"field.label\"\r\n      [p-optional]=\"field.optional\"\r\n      [p-required]=\"field.required\"\r\n      (p-change)=\"onChangeField(field)\"\r\n    >\r\n    </po-datepicker-range>\r\n\r\n    <po-input\r\n      #component\r\n      *ngIf=\"compareTo(field.control, 'input')\"\r\n      [name]=\"field.property\"\r\n      [(ngModel)]=\"value[field.property]\"\r\n      [ngClass]=\"field.componentClass\"\r\n      p-clean\r\n      [p-disabled]=\"isDisabled(field)\"\r\n      [p-error-pattern]=\"field.errorMessage\"\r\n      [p-auto-focus]=\"field.focus\"\r\n      [p-help]=\"field.help\"\r\n      [p-label]=\"field.label\"\r\n      [p-mask-format-model]=\"field.maskFormatModel\"\r\n      [p-mask]=\"field.mask\"\r\n      [p-maxlength]=\"field.maxLength\"\r\n      [p-minlength]=\"field.minLength\"\r\n      [p-optional]=\"field.optional\"\r\n      [p-pattern]=\"field.pattern\"\r\n      [p-required]=\"field.required\"\r\n      (p-change)=\"onChangeField(field)\"\r\n      [p-icon]=\"field.icon\"\r\n      [p-placeholder]=\"field.placeholder\"\r\n    >\r\n    </po-input>\r\n\r\n    <po-number\r\n      #component\r\n      *ngIf=\"compareTo(field.control, 'number')\"\r\n      [name]=\"field.property\"\r\n      [(ngModel)]=\"value[field.property]\"\r\n      [ngClass]=\"field.componentClass\"\r\n      p-clean\r\n      [p-disabled]=\"isDisabled(field)\"\r\n      [p-error-pattern]=\"field.errorMessage\"\r\n      [p-auto-focus]=\"field.focus\"\r\n      [p-help]=\"field.help\"\r\n      [p-label]=\"field.label\"\r\n      [p-min]=\"field.minValue\"\r\n      [p-max]=\"field.maxValue\"\r\n      [p-maxlength]=\"field.maxLength\"\r\n      [p-minlength]=\"field.minLength\"\r\n      [p-optional]=\"field.optional\"\r\n      [p-required]=\"field.required\"\r\n      (p-change)=\"onChangeField(field)\"\r\n      [p-icon]=\"field.icon\"\r\n      [p-placeholder]=\"field.placeholder\"\r\n    >\r\n    </po-number>\r\n\r\n    <po-decimal\r\n      #component\r\n      *ngIf=\"compareTo(field.control, 'decimal')\"\r\n      [name]=\"field.property\"\r\n      [(ngModel)]=\"value[field.property]\"\r\n      [ngClass]=\"field.componentClass\"\r\n      p-clean\r\n      [p-disabled]=\"isDisabled(field)\"\r\n      [p-decimals-length]=\"field.decimalsLength\"\r\n      [p-thousand-maxlength]=\"field.thousandMaxlength\"\r\n      [p-icon]=\"field.icon\"\r\n      [p-auto-focus]=\"field.focus\"\r\n      [p-help]=\"field.help\"\r\n      [p-label]=\"field.label\"\r\n      [p-locale]=\"field.locale\"\r\n      [p-optional]=\"field.optional\"\r\n      [p-required]=\"field.required\"\r\n      (p-change)=\"onChangeField(field)\"\r\n      [p-placeholder]=\"field.placeholder\"\r\n    >\r\n    </po-decimal>\r\n\r\n    <po-select\r\n      #component\r\n      *ngIf=\"compareTo(field.control, 'select')\"\r\n      [name]=\"field.property\"\r\n      [(ngModel)]=\"value[field.property]\"\r\n      [ngClass]=\"field.componentClass\"\r\n      [p-auto-focus]=\"field.focus\"\r\n      [p-disabled]=\"isDisabled(field)\"\r\n      [p-help]=\"field.help\"\r\n      [p-label]=\"field.label\"\r\n      [p-optional]=\"field.optional\"\r\n      [p-options]=\"field.options\"\r\n      [p-required]=\"field.required\"\r\n      (p-change)=\"onChangeField(field)\"\r\n      [p-placeholder]=\"field.placeholder\"\r\n    >\r\n    </po-select>\r\n\r\n    <po-radio-group\r\n      #component\r\n      *ngIf=\"compareTo(field.control, 'radioGroup')\"\r\n      [name]=\"field.property\"\r\n      [(ngModel)]=\"value[field.property]\"\r\n      [ngClass]=\"field.componentClass\"\r\n      p-columns=\"3\"\r\n      [p-auto-focus]=\"field.focus\"\r\n      [p-disabled]=\"isDisabled(field)\"\r\n      [p-help]=\"field.help\"\r\n      [p-label]=\"field.label\"\r\n      [p-optional]=\"field.optional\"\r\n      [p-options]=\"field.options\"\r\n      [p-required]=\"field.required\"\r\n      (p-change)=\"onChangeField(field)\"\r\n    >\r\n    </po-radio-group>\r\n\r\n    <po-switch\r\n      #component\r\n      *ngIf=\"compareTo(field.control, 'switch')\"\r\n      [name]=\"field.property\"\r\n      [(ngModel)]=\"value[field.property]\"\r\n      [ngClass]=\"field.componentClass\"\r\n      [p-auto-focus]=\"field.focus\"\r\n      [p-disabled]=\"isDisabled(field)\"\r\n      [p-help]=\"field.help\"\r\n      [p-label]=\"field.label\"\r\n      [p-label-off]=\"field.booleanFalse\"\r\n      [p-label-on]=\"field.booleanTrue\"\r\n      (p-change)=\"onChangeField(field)\"\r\n    >\r\n    </po-switch>\r\n\r\n    <po-combo\r\n      #component\r\n      *ngIf=\"compareTo(field.control, 'combo')\"\r\n      [name]=\"field.property\"\r\n      [(ngModel)]=\"value[field.property]\"\r\n      [ngClass]=\"field.componentClass\"\r\n      p-emit-object-value\r\n      [p-auto-focus]=\"field.focus\"\r\n      [p-disabled]=\"isDisabled(field)\"\r\n      [p-field-label]=\"field.fieldLabel\"\r\n      [p-field-value]=\"field.fieldValue\"\r\n      [p-filter-params]=\"field.params\"\r\n      [p-filter-service]=\"field.optionsService\"\r\n      [p-help]=\"field.help\"\r\n      [p-label]=\"field.label\"\r\n      [p-optional]=\"field.optional\"\r\n      [p-required]=\"field.required\"\r\n      (p-change)=\"onChangeField(field, $event)\"\r\n      [p-icon]=\"field.icon\"\r\n      [p-placeholder]=\"field.placeholder\"\r\n    >\r\n    </po-combo>\r\n\r\n    <po-lookup\r\n      #component\r\n      *ngIf=\"compareTo(field.control, 'lookup')\"\r\n      [name]=\"field.property\"\r\n      [(ngModel)]=\"value[field.property]\"\r\n      p-field-label=\"label\"\r\n      p-field-value=\"value\"\r\n      [ngClass]=\"field.componentClass\"\r\n      [p-columns]=\"field.columns\"\r\n      [p-disabled]=\"isDisabled(field)\"\r\n      [p-field-label]=\"field.fieldLabel || 'label'\"\r\n      [p-field-value]=\"field.fieldValue || 'value'\"\r\n      [p-filter-params]=\"field.params\"\r\n      [p-filter-service]=\"field.searchService\"\r\n      [p-auto-focus]=\"field.focus\"\r\n      [p-help]=\"field.help\"\r\n      [p-field-format]=\"field.format\"\r\n      [p-label]=\"field.label\"\r\n      [p-optional]=\"field.optional\"\r\n      [p-required]=\"field.required\"\r\n      (p-change)=\"onChangeField(field)\"\r\n      [p-placeholder]=\"field.placeholder\"\r\n    >\r\n    </po-lookup>\r\n\r\n    <po-checkbox-group\r\n      #component\r\n      *ngIf=\"compareTo(field.control, 'checkboxGroup')\"\r\n      [name]=\"field.property\"\r\n      [(ngModel)]=\"value[field.property]\"\r\n      [ngClass]=\"field.componentClass\"\r\n      p-columns=\"3\"\r\n      [p-auto-focus]=\"field.focus\"\r\n      [p-disabled]=\"isDisabled(field)\"\r\n      [p-help]=\"field.help\"\r\n      [p-label]=\"field.label\"\r\n      [p-optional]=\"field.optional\"\r\n      [p-options]=\"field.options\"\r\n      [p-required]=\"field.required\"\r\n      (p-change)=\"onChangeField(field)\"\r\n    >\r\n    </po-checkbox-group>\r\n\r\n    <po-multiselect\r\n      #component\r\n      *ngIf=\"compareTo(field.control, 'multiselect')\"\r\n      [name]=\"field.property\"\r\n      [(ngModel)]=\"value[field.property]\"\r\n      [ngClass]=\"field.componentClass\"\r\n      [p-disabled]=\"isDisabled(field)\"\r\n      [p-auto-focus]=\"field.focus\"\r\n      [p-help]=\"field.help\"\r\n      [p-label]=\"field.label\"\r\n      [p-optional]=\"field.optional\"\r\n      [p-options]=\"field.options\"\r\n      [p-required]=\"field.required\"\r\n      (p-change)=\"onChangeField(field)\"\r\n      [p-placeholder]=\"field.placeholder\"\r\n      [p-field-label]=\"field.fieldLabel\"\r\n      [p-field-value]=\"field.fieldValue\"\r\n      [p-filter-service]=\"field.optionsService\"\r\n    >\r\n    </po-multiselect>\r\n\r\n    <po-textarea\r\n      #component\r\n      *ngIf=\"compareTo(field.control, 'textarea')\"\r\n      [name]=\"field.property\"\r\n      [(ngModel)]=\"value[field.property]\"\r\n      [ngClass]=\"field.componentClass\"\r\n      [p-disabled]=\"isDisabled(field)\"\r\n      [p-auto-focus]=\"field.focus\"\r\n      [p-help]=\"field.help\"\r\n      [p-label]=\"field.label\"\r\n      [p-maxlength]=\"field.maxLength\"\r\n      [p-minlength]=\"field.minLength\"\r\n      [p-optional]=\"field.optional\"\r\n      [p-required]=\"field.required\"\r\n      [p-rows]=\"field.rows\"\r\n      (p-change)=\"onChangeField(field)\"\r\n      [p-placeholder]=\"field.placeholder\"\r\n    >\r\n    </po-textarea>\r\n\r\n    <po-password\r\n      #component\r\n      *ngIf=\"compareTo(field.control, 'password')\"\r\n      [name]=\"field.property\"\r\n      [(ngModel)]=\"value[field.property]\"\r\n      [ngClass]=\"field.componentClass\"\r\n      p-clean\r\n      [p-disabled]=\"isDisabled(field)\"\r\n      [p-error-pattern]=\"field.errorMessage\"\r\n      [p-auto-focus]=\"field.focus\"\r\n      [p-help]=\"field.help\"\r\n      [p-label]=\"field.label\"\r\n      [p-maxlength]=\"field.maxLength\"\r\n      [p-minlength]=\"field.minLength\"\r\n      [p-optional]=\"field.optional\"\r\n      [p-pattern]=\"field.pattern\"\r\n      [p-required]=\"field.required\"\r\n      (p-change)=\"onChangeField(field)\"\r\n      [p-placeholder]=\"field.placeholder\"\r\n    >\r\n    </po-password>\r\n  </ng-container>\r\n</div>\r\n",
                    viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }],
                    providers: [PoDynamicFormValidationService]
                },] }
    ];
    PoDynamicFormFieldsComponent.ctorParameters = function () { return [
        { type: common.TitleCasePipe },
        { type: PoDynamicFormValidationService },
        { type: i0.ChangeDetectorRef },
        { type: forms.NgForm }
    ]; };
    PoDynamicFormFieldsComponent.propDecorators = {
        components: [{ type: i0.ViewChildren, args: ['component',] }]
    };

    var PoDynamicViewService = /** @class */ (function () {
        function PoDynamicViewService(http) {
            this.http = http;
        }
        PoDynamicViewService.prototype.onLoad = function (url, value) {
            return this.http.post(url, value).toPromise();
        };
        return PoDynamicViewService;
    }());
    PoDynamicViewService.decorators = [
        { type: i0.Injectable }
    ];
    PoDynamicViewService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    /**
     *
     * @description
     *
     * Componente para listar dados dinamicamente a partir de uma lista de objetos.
     *
     * > Por padrão esse componente cria `po-info` para exibição, é possível criar `po-tag` passando a propriedade { tag: true }.
     *
     */
    var PoDynamicViewBaseComponent = /** @class */ (function () {
        function PoDynamicViewBaseComponent(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService) {
            this.currencyPipe = currencyPipe;
            this.datePipe = datePipe;
            this.decimalPipe = decimalPipe;
            this.timePipe = timePipe;
            this.titleCasePipe = titleCasePipe;
            this.dynamicViewService = dynamicViewService;
            this.visibleFields = [];
            this._fields = [];
            this._showAllValue = false;
            this._value = {};
        }
        Object.defineProperty(PoDynamicViewBaseComponent.prototype, "fields", {
            get: function () {
                return this._fields;
            },
            /**
             * @optional
             *
             * @description
             *
             * Lista de objetos que implementam a interface `PoDynamicView`.
             *
             * > Ex: `[ { property: 'age' } ]`
             *
             * Regras de tipagem e formatação dos valores exibidos:
             *
             * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
             * como formato padrão.
             * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
             * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
             * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
             * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
             *
             * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `p-value`.
             *
             * @default `[]`
             */
            set: function (fields) {
                this._fields = Array.isArray(fields) ? __spreadArray([], __read(fields)) : [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDynamicViewBaseComponent.prototype, "showAllValue", {
            get: function () {
                return this._showAllValue;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `p-value`.
             *
             * @default `false`
             */
            set: function (value) {
                this._showAllValue = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoDynamicViewBaseComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            /**
             * @description
             *
             * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
             * dos objetos contidos na propridade `p-fields`.
             *
             * > Ex: `{ age: '35' }`
             */
            set: function (value) {
                this._value = value && isTypeof(value, 'object') ? value : {};
            },
            enumerable: false,
            configurable: true
        });
        // retorna os fields com os valores recuperados do objeto value.
        PoDynamicViewBaseComponent.prototype.getConfiguredFields = function () {
            var _this = this;
            var newFields = [];
            this.fields.forEach(function (field) {
                if (isVisibleField(field)) {
                    newFields.push(_this.createField(field));
                }
            });
            return sortFields(newFields);
        };
        // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
        PoDynamicViewBaseComponent.prototype.getMergedFields = function () {
            var _this = this;
            var mergedFields = __spreadArray([], __read(this.getConfiguredFields()));
            this.getValueFields().forEach(function (valueField) {
                var fieldIndex = mergedFields.findIndex(function (field) { return field.property === valueField.property; });
                var property = valueField.property;
                if (fieldIndex === -1) {
                    mergedFields.push(_this.createField({ property: property }));
                }
            });
            return mergedFields;
        };
        // retorna o objeto value como fields.
        PoDynamicViewBaseComponent.prototype.getValueFields = function () {
            var _this = this;
            return Object.keys(this.value).map(function (property) { return _this.createField({ property: property }); });
        };
        PoDynamicViewBaseComponent.prototype.createField = function (field) {
            var property = field.property;
            var value = this.transformValue(field.type, this.value[property], field.format);
            var classesGridColumns = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns, {
                smPull: field.gridSmPull,
                mdPull: field.gridMdPull,
                lgPull: field.gridLgPull,
                xlPull: field.gridXlPull
            });
            return Object.assign({ property: property, value: value, label: this.titleCasePipe.transform(property), cssClass: classesGridColumns }, field);
        };
        PoDynamicViewBaseComponent.prototype.transformValue = function (type, value, format) {
            var transformedValue = value;
            switch (type) {
                case 'currency':
                    transformedValue = this.currencyPipe.transform(value, format || 'BRL', 'symbol', '1.2-2');
                    break;
                case 'date':
                    transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy');
                    break;
                case 'dateTime':
                    transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy HH:mm:ss');
                    break;
                case 'number':
                    transformedValue = this.decimalPipe.transform(value, format);
                    break;
                case 'time':
                    transformedValue = this.timePipe.transform(value, format || 'HH:mm:ss.ffffff');
                    break;
            }
            return transformedValue;
        };
        return PoDynamicViewBaseComponent;
    }());
    PoDynamicViewBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoDynamicViewBaseComponent.ctorParameters = function () { return [
        { type: common.CurrencyPipe },
        { type: common.DatePipe },
        { type: common.DecimalPipe },
        { type: PoTimePipe },
        { type: common.TitleCasePipe },
        { type: PoDynamicViewService }
    ]; };
    PoDynamicViewBaseComponent.propDecorators = {
        load: [{ type: i0.Input, args: ['p-load',] }],
        fields: [{ type: i0.Input, args: ['p-fields',] }],
        showAllValue: [{ type: i0.Input, args: ['p-show-all-value',] }],
        value: [{ type: i0.Input, args: ['p-value',] }]
    };

    /**
     * @docsExtends PoDynamicViewBaseComponent
     *
     * @example
     *
     * <example name="po-dynamic-view-basic" title="PO Dynamic View Basic">
     *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.html"> </file>
     *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-dynamic-view-employee" title="PO Dynamic View - Employee">
     *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.html"> </file>
     *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.ts"> </file>
     * </example>
     *
     * <example name="po-dynamic-view-employee-on-load" title="PO Dynamic View - Employee on load">
     *  <file name="sample-po-dynamic-view-employee-on-load/sample-po-dynamic-view-employee-on-load.component.html"> </file>
     *  <file name="sample-po-dynamic-view-employee-on-load/sample-po-dynamic-view-employee-on-load.component.ts"> </file>
     * </example>
     */
    var PoDynamicViewComponent = /** @class */ (function (_super) {
        __extends(PoDynamicViewComponent, _super);
        function PoDynamicViewComponent(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService) {
            return _super.call(this, currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService) || this;
        }
        PoDynamicViewComponent.prototype.ngOnChanges = function (changes) {
            if (changes.fields || changes.value || changes.showAllValue) {
                this.visibleFields = this.getVisibleFields();
            }
        };
        PoDynamicViewComponent.prototype.ngOnInit = function () {
            if (this.load) {
                this.updateValuesAndFieldsOnLoad();
            }
        };
        PoDynamicViewComponent.prototype.getValuesAndFieldsFromLoad = function () {
            return __awaiter(this, void 0, void 0, function () {
                var valueAndFieldsFromLoad;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(typeof this.load === 'string')) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.dynamicViewService.onLoad(this.load, this.value)];
                        case 1:
                            valueAndFieldsFromLoad = _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            if (typeof this.load === 'function') {
                                valueAndFieldsFromLoad = this.load();
                            }
                            _a.label = 3;
                        case 3: return [2 /*return*/, valueAndFieldsFromLoad || {}];
                    }
                });
            });
        };
        PoDynamicViewComponent.prototype.getVisibleFields = function () {
            if (this.showAllValue) {
                return this.getMergedFields();
            }
            return this.value && this.fields.length ? this.getConfiguredFields() : this.getValueFields();
        };
        PoDynamicViewComponent.prototype.setFieldOnLoad = function (fieldOnLoad) {
            var index = this.fields.findIndex(function (field) { return field.property === fieldOnLoad.property; });
            if (index >= 0) {
                this.fields[index] = Object.assign(Object.assign({}, this.fields[index]), fieldOnLoad);
            }
            else {
                this.fields.push(Object.assign({}, fieldOnLoad));
            }
        };
        PoDynamicViewComponent.prototype.setFieldsOnLoad = function (fields) {
            var _this = this;
            if (fields) {
                fields.forEach(function (fieldOnLoad) {
                    _this.setFieldOnLoad(fieldOnLoad);
                });
            }
        };
        PoDynamicViewComponent.prototype.setValueOnLoad = function (newValue) {
            Object.assign(this.value, newValue);
        };
        PoDynamicViewComponent.prototype.updateValuesAndFieldsOnLoad = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, value, fields;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.getValuesAndFieldsFromLoad()];
                        case 1:
                            _a = _b.sent(), value = _a.value, fields = _a.fields;
                            this.setValueOnLoad(value);
                            this.setFieldsOnLoad(fields);
                            this.visibleFields = this.getVisibleFields();
                            return [2 /*return*/];
                    }
                });
            });
        };
        return PoDynamicViewComponent;
    }(PoDynamicViewBaseComponent));
    PoDynamicViewComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-dynamic-view',
                    template: "<div class=\"po-dynamic-view po-row\" *ngIf=\"visibleFields.length\">\r\n  <ng-template ngFor let-field [ngForOf]=\"visibleFields\">\r\n    <po-divider *ngIf=\"field?.divider?.trim()\" class=\"po-sm-12\" [p-label]=\"field.divider\"> </po-divider>\r\n\r\n    <ng-container *ngTemplateOutlet=\"!field.tag ? poInfo : poTag; context: { $implicit: field }\"> </ng-container>\r\n  </ng-template>\r\n</div>\r\n\r\n<ng-template #poInfo let-field>\r\n  <po-info [ngClass]=\"field.cssClass\" [p-label]=\"field.label\" [p-value]=\"field.value\"> </po-info>\r\n</ng-template>\r\n\r\n<ng-template #poTag let-field>\r\n  <po-tag\r\n    [ngClass]=\"field.cssClass\"\r\n    [p-color]=\"field.color\"\r\n    [p-icon]=\"field.icon\"\r\n    [p-inverse]=\"field.inverse\"\r\n    [p-label]=\"field.label\"\r\n    [p-value]=\"field.value\"\r\n  >\r\n  </po-tag>\r\n</ng-template>\r\n"
                },] }
    ];
    PoDynamicViewComponent.ctorParameters = function () { return [
        { type: common.CurrencyPipe },
        { type: common.DatePipe },
        { type: common.DecimalPipe },
        { type: PoTimePipe },
        { type: common.TitleCasePipe },
        { type: PoDynamicViewService }
    ]; };

    var PoDynamicModule = /** @class */ (function () {
        function PoDynamicModule() {
        }
        return PoDynamicModule;
    }());
    PoDynamicModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, PoDividerModule, PoInfoModule, PoFieldModule, PoTagModule, PoTimeModule],
                    declarations: [PoDynamicFormComponent, PoDynamicFormFieldsComponent, PoDynamicViewComponent],
                    exports: [PoDynamicFormComponent, PoDynamicViewComponent],
                    providers: [
                        common.CurrencyPipe,
                        common.DatePipe,
                        common.DecimalPipe,
                        PoTimePipe,
                        common.TitleCasePipe,
                        PoDynamicFormLoadService,
                        PoDynamicFormValidationService,
                        PoDynamicViewService
                    ]
                },] }
    ];

    // Padding existente nas bordas do componente
    var PoGaugePadding = 24;
    // Altura mínima aceita pelo po-gauge.
    var poGaugeMinHeight = 300;
    // Chamado de coroa circular, refere-se à área entre os círculos externos e internos e que define a espessura do gauge.
    var PoGaugeThickness = 16;
    // A medida referente ao quanto o ponteiro se sobressai em relação ao gráfico. É necessário esse desconto no viewBox para não haver overflow.
    var PoGaugePointerEnd = 4;
    // Base default para cálculo da angulação final. Para gauge simples, seria como se fosse 100%.
    var poGaugeTotalValueDefault = 100;

    /**
     * @description
     *
     * O componente `po-gauge` provê a representação de um valor através de um arco. É muito comum, por exemplo, para demonstrar o desempenho ou progresso de algo.
     * O `po-gauge` possui dois tipos de tratamentos:
     * - É possível demonstrar um dado percentual simples em conjunto com uma descrição resumida em seu interior;
     * - Para um demonstrativo mais elaborado, consegue-se definir alcances em cores, um breve texto descritivo e um ponteiro indicando o valor desejado.
     *
     * #### Guia de uso para Gráficos
     *
     * > Veja nosso [guia de uso para gráficos](/guides/guide-charts) para auxiliar na construção do seu gráfico,
     * informando em qual caso utilizar, o que devemos evitar e boas práticas relacionada a cores.
     */
    var PoGaugeBaseComponent = /** @class */ (function () {
        function PoGaugeBaseComponent(colorService) {
            this.colorService = colorService;
            this._height = poGaugeMinHeight;
            this._ranges = [];
        }
        Object.defineProperty(PoGaugeBaseComponent.prototype, "description", {
            get: function () {
                return this._description;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o texto que será exibido no gauge.
             * Há dois posicionamentos para ele:
             * - Se houver definição para `p-ranges`, o descritivo será exibido no topo do container, ficando acima do gauge;
             * - Na ausência de `p-ranges`, será incorporado dentro do arco do gauge, e abaixo de `p-value`.
             *
             * Para ambos os casos, se o conteúdo ultrapassar a área designada, serão geradas automaticamente reticências.
             * No entanto, será possível visualizar a mensagem através de um tooltip no passar do mouse sobre o texto.
             *
             * > Para uma melhor experiência do usuário, é recomendado um descritivo breve e com poucas palavras.
             * Desta forma evita-se o *overflow* do texto.
             */
            set: function (value) {
                this._description = value;
                this.svgContainerSize();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoGaugeBaseComponent.prototype, "height", {
            get: function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura do gauge.
             *
             * O valor mínimo aceito é 300px.
             *
             * @default `300px`
             */
            set: function (value) {
                this._height = this.setGaugeHeight(value);
                this.svgContainerSize();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoGaugeBaseComponent.prototype, "ranges", {
            get: function () {
                return this._ranges;
            },
            /**
             * @optional
             *
             * @description
             *
             * Definição para o alcance de cores. Ao adicionar pelo menos um item na lista,
             * incorpora-se o ponteiro que assinala o valor passado em `p-value`.
             * Se o valor de `p-value` for inferior ao mínimo valor definido em `PoGaugeRanges.from`, o domínio mínimo do gauge será `p-value`.
             * A mesma regra prevalece para valores máximos.
             */
            set: function (value) {
                this._ranges = Array.isArray(value) ? this.verifyColors(value) : [];
                this.svgContainerSize();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoGaugeBaseComponent.prototype, "title", {
            get: function () {
                return this._title;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o título do gauge.
             */
            set: function (value) {
                this._title = value;
                this.svgContainerSize();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoGaugeBaseComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            /**
             * @optional
             *
             * @description
             *
             * Valor referente ao valor da série. Seu comportamento segue a seguintes regras:
             *
             * - Sem `p-ranges`: Os valores passados para `p-value` e `p-description` serão centralizados no interior do arco.
             * A base do valor será percentual tendo como base os alcances entre zero e 100%. Se passado um valor superior a 100,
             * A colorização do gauge será completa e o valor passado será exibido no interior do arco.
             * - Com `p-ranges`: A descrição será exibida acima do gauge e haverá um ponteiro marcando o valor passado em `p-value`.
             * Considerando que o alcance em `ranges` é aberto, então a escala de `p-value` será em relação ao menor/maior alcance
             * absoluto definido em `p-ranges`.
             * Se passado um `p-value` inferior em relação ao mínimo valor definido em `p-ranges`, o domínio mínimo do gauge partirá de `p-value`.
             * A mesma regra prevalece para valores máximos.
             *
             */
            set: function (gaugeValue) {
                if (typeof gaugeValue === 'number' || (typeof gaugeValue === 'string' && gaugeValue.trim())) {
                    var value = !isNaN(gaugeValue) ? Number(gaugeValue) : undefined;
                    this._value = value;
                }
                else {
                    this._value = undefined;
                }
            },
            enumerable: false,
            configurable: true
        });
        PoGaugeBaseComponent.prototype.verifyColors = function (ranges) {
            return this.colorService.getColors(ranges);
        };
        PoGaugeBaseComponent.prototype.setGaugeHeight = function (height) {
            var gaugeHeight = convertToInt(height);
            return gaugeHeight && gaugeHeight > poGaugeMinHeight ? gaugeHeight : poGaugeMinHeight;
        };
        return PoGaugeBaseComponent;
    }());
    PoGaugeBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoGaugeBaseComponent.ctorParameters = function () { return [
        { type: PoColorService }
    ]; };
    PoGaugeBaseComponent.propDecorators = {
        description: [{ type: i0.Input, args: ['p-description',] }],
        height: [{ type: i0.Input, args: ['p-height',] }],
        ranges: [{ type: i0.Input, args: ['p-ranges',] }],
        title: [{ type: i0.Input, args: ['p-title',] }],
        value: [{ type: i0.Input, args: ['p-value',] }]
    };

    /**
     * @docsExtends PoGaugeBaseComponent
     *
     * @example
     *
     * <example name="po-gauge-basic" title="PO Gauge Basic">
     *  <file name="sample-po-gauge-basic/sample-po-gauge-basic.component.html"> </file>
     *  <file name="sample-po-gauge-basic/sample-po-gauge-basic.component.ts"> </file>
     * </example>
     * <example name="po-gauge-labs" title="PO Gauge Labs">
     *  <file name="sample-po-gauge-labs/sample-po-gauge-labs.component.html"> </file>
     *  <file name="sample-po-gauge-labs/sample-po-gauge-labs.component.ts"> </file>
     * </example>
     * <example name="po-gauge-summary" title="PO Gauge Summary">
     *  <file name="sample-po-gauge-summary/sample-po-gauge-summary.component.html"> </file>
     *  <file name="sample-po-gauge-summary/sample-po-gauge-summary.component.ts"> </file>
     * </example>
     */
    var PoGaugeComponent = /** @class */ (function (_super) {
        __extends(PoGaugeComponent, _super);
        function PoGaugeComponent(colorService, changeDetector) {
            var _this = _super.call(this, colorService) || this;
            _this.colorService = colorService;
            _this.changeDetector = changeDetector;
            _this.isLoaded = false;
            return _this;
        }
        Object.defineProperty(PoGaugeComponent.prototype, "hasElementRef", {
            get: function () {
                var _a;
                return !!((_a = this.svgEl) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoGaugeComponent.prototype, "hasRanges", {
            get: function () {
                return this.ranges.length > 0;
            },
            enumerable: false,
            configurable: true
        });
        PoGaugeComponent.prototype.ngDoCheck = function () {
            if (!this.isLoaded && this.hasElementRef) {
                this.isLoaded = true;
                this.svgContainerSize();
            }
        };
        PoGaugeComponent.prototype.svgContainerSize = function () {
            var _a, _b, _c, _d, _e, _f, _g;
            if ((_a = this.svgEl) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth) {
                this.changeDetector.detectChanges();
                var titleHeight = (_c = (_b = this.titleEl.nativeElement) === null || _b === void 0 ? void 0 : _b.offsetHeight) !== null && _c !== void 0 ? _c : 0;
                var legendHeight = (_e = (_d = this.legendEl.nativeElement) === null || _d === void 0 ? void 0 : _d.offsetHeight) !== null && _e !== void 0 ? _e : 0;
                var descriptionHeight = (_g = (_f = this.descriptionEl.nativeElement) === null || _f === void 0 ? void 0 : _f.offsetHeight) !== null && _g !== void 0 ? _g : 0;
                var height = this.height - titleHeight - legendHeight - descriptionHeight - PoGaugePadding * 2;
                var width = this.svgEl.nativeElement.offsetWidth;
                this.svgContainer = { width: width, height: height };
            }
        };
        return PoGaugeComponent;
    }(PoGaugeBaseComponent));
    PoGaugeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-gauge',
                    template: "<div class=\"po-gauge-wrapper\" [style.height.px]=\"height\">\r\n  <po-gauge-title #titleEl [p-title]=\"title\"></po-gauge-title>\r\n\r\n  <po-gauge-description\r\n    #descriptionEl\r\n    [p-description]=\"description\"\r\n    [p-description-width]=\"height\"\r\n    [p-has-ranges]=\"hasRanges\"\r\n    [p-value]=\"value\"\r\n  ></po-gauge-description>\r\n\r\n  <po-gauge-svg #svgEl [p-container]=\"svgContainer\" [p-ranges]=\"ranges\" [p-value]=\"value\"></po-gauge-svg>\r\n\r\n  <po-gauge-legend #legendEl [p-ranges]=\"ranges\"> </po-gauge-legend>\r\n</div>\r\n"
                },] }
    ];
    PoGaugeComponent.ctorParameters = function () { return [
        { type: PoColorService },
        { type: i0.ChangeDetectorRef }
    ]; };
    PoGaugeComponent.propDecorators = {
        descriptionEl: [{ type: i0.ViewChild, args: ['descriptionEl', { read: i0.ElementRef },] }],
        legendEl: [{ type: i0.ViewChild, args: ['legendEl', { read: i0.ElementRef },] }],
        titleEl: [{ type: i0.ViewChild, args: ['titleEl', { read: i0.ElementRef },] }],
        svgEl: [{ type: i0.ViewChild, args: ['svgEl', { read: i0.ElementRef },] }]
    };

    var PoGaugeDescriptionComponent = /** @class */ (function () {
        function PoGaugeDescriptionComponent() {
        }
        Object.defineProperty(PoGaugeDescriptionComponent.prototype, "isValidValue", {
            get: function () {
                return this.value || this.value === 0;
            },
            enumerable: false,
            configurable: true
        });
        PoGaugeDescriptionComponent.prototype.verifyIfHasEllipsis = function () {
            var _this = this;
            var _a = this.descriptionText.nativeElement, offsetWidth = _a.offsetWidth, scrollWidth = _a.scrollWidth;
            // O tooltip só exibe se adicionado dentro de setTimeout.
            setTimeout(function () {
                _this.tooltip = offsetWidth < scrollWidth ? _this.description : undefined;
            });
        };
        return PoGaugeDescriptionComponent;
    }());
    PoGaugeDescriptionComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-gauge-description',
                    template: "<div class=\"po-gauge-description\">\r\n  <ng-container *ngTemplateOutlet=\"hasRanges ? rangesDescription : percentageDescription\"> </ng-container>\r\n</div>\r\n\r\n<ng-template #rangesDescription>\r\n  <p\r\n    #descriptionText\r\n    *ngIf=\"description\"\r\n    class=\"po-gauge-description-text po-gauge-description-upper-text\"\r\n    [p-tooltip]=\"tooltip\"\r\n    (mouseenter)=\"verifyIfHasEllipsis()\"\r\n  >\r\n    {{ description }}\r\n  </p>\r\n</ng-template>\r\n\r\n<ng-template #percentageDescription>\r\n  <div class=\"po-gauge-description-bottom\" tabindex=\"0\" [style.width.px]=\"descriptionWidth\">\r\n    <p *ngIf=\"isValidValue\" class=\"po-gauge-description-bottom-value\">{{ value }}%</p>\r\n    <p\r\n      #descriptionText\r\n      *ngIf=\"description\"\r\n      class=\"po-gauge-description-text po-gauge-description-bottom-text\"\r\n      [p-tooltip]=\"tooltip\"\r\n      (mouseenter)=\"verifyIfHasEllipsis()\"\r\n    >\r\n      {{ description }}\r\n    </p>\r\n  </div>\r\n</ng-template>\r\n"
                },] }
    ];
    PoGaugeDescriptionComponent.propDecorators = {
        description: [{ type: i0.Input, args: ['p-description',] }],
        hasRanges: [{ type: i0.Input, args: ['p-has-ranges',] }],
        descriptionWidth: [{ type: i0.Input, args: ['p-description-width',] }],
        value: [{ type: i0.Input, args: ['p-value',] }],
        descriptionText: [{ type: i0.ViewChild, args: ['descriptionText',] }]
    };

    var PoGaugeLegendComponent = /** @class */ (function () {
        function PoGaugeLegendComponent() {
        }
        Object.defineProperty(PoGaugeLegendComponent.prototype, "ranges", {
            get: function () {
                return this._ranges;
            },
            set: function (value) {
                this._ranges = value.length ? this.filterLabel(value) : [];
            },
            enumerable: false,
            configurable: true
        });
        PoGaugeLegendComponent.prototype.trackBy = function (index) {
            return index;
        };
        PoGaugeLegendComponent.prototype.filterLabel = function (ranges) {
            return ranges.filter(function (range) { return range.label; });
        };
        return PoGaugeLegendComponent;
    }());
    PoGaugeLegendComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-gauge-legend',
                    template: "<ul class=\"po-gauge-legend\">\r\n  <li class=\"po-gauge-legend-item\" *ngFor=\"let range of ranges; trackBy: trackBy\">\r\n    <ng-container\r\n      *ngTemplateOutlet=\"range.color?.includes('po-color') ? colorpalette : colorstyle; context: { $implicit: range }\"\r\n    ></ng-container>\r\n    <p class=\"po-gauge-legend-text\">{{ range.label }}</p>\r\n  </li>\r\n</ul>\r\n\r\n<ng-template #colorpalette let-range>\r\n  <span class=\"po-gauge-legend-square\" [class]=\"range.color\"></span>\r\n</ng-template>\r\n\r\n<ng-template #colorstyle let-range>\r\n  <span class=\"po-gauge-legend-square\" [style.background]=\"range.color\"></span>\r\n</ng-template>\r\n"
                },] }
    ];
    PoGaugeLegendComponent.ctorParameters = function () { return []; };
    PoGaugeLegendComponent.propDecorators = {
        ranges: [{ type: i0.Input, args: ['p-ranges',] }]
    };

    var PoGaugePathComponent = /** @class */ (function () {
        function PoGaugePathComponent() {
        }
        PoGaugePathComponent.prototype.ngOnInit = function () { };
        PoGaugePathComponent.prototype.trackBy = function (index) {
            return index;
        };
        return PoGaugePathComponent;
    }());
    PoGaugePathComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-gauge-path]',
                    template: "<svg:g>\r\n  <svg:path\r\n    class=\"po-gauge-base\"\r\n    [attr.d]=\"baseCoordinates?.coordinates\">\r\n  </svg:path> \r\n\r\n  <svg:path *ngFor=\"let range of rangesCoordinates; trackBy: trackBy\"\r\n    [class]=\"range?.color?.includes('po-color') ? range.color : ''\"\r\n    [attr.d]=\"range?.coordinates\"\r\n    [attr.fill]=\"range?.color\">\r\n  </svg:path> \r\n</svg:g>\r\n"
                },] }
    ];
    PoGaugePathComponent.ctorParameters = function () { return []; };
    PoGaugePathComponent.propDecorators = {
        baseCoordinates: [{ type: i0.Input, args: ['p-base-coordinates',] }],
        rangesCoordinates: [{ type: i0.Input, args: ['p-ranges-coordinates',] }]
    };

    var poGaugeStartAngle = -Math.PI;
    var PoGaugeSvgComponent = /** @class */ (function () {
        function PoGaugeSvgComponent() {
            this.addSvgElement = false;
        }
        Object.defineProperty(PoGaugeSvgComponent.prototype, "hasRanges", {
            get: function () {
                return this.ranges.length > 0;
            },
            enumerable: false,
            configurable: true
        });
        PoGaugeSvgComponent.prototype.ngOnChanges = function (changes) {
            if ((this.container && changes.value) || (this.container && changes.ranges) || this.container) {
                this.setCoordinates(this.value, this.ranges, this.container);
            }
        };
        PoGaugeSvgComponent.prototype.setCoordinates = function (value, ranges, container) {
            var height = container.height;
            // Adiciona elemento svg somente após calcular a altura do container pois o svg tem altura default de 150px.
            this.addSvgElement = true;
            this.setViewBox(height);
            this.setBaseCoordinates(height);
            if (!ranges.length) {
                this.setSingleRangeCoordinates(height, value);
                return;
            }
            this.setRangesCoordinates(height, value, ranges);
        };
        PoGaugeSvgComponent.prototype.setBaseCoordinates = function (height) {
            var endAngleRadian = 0;
            var coordinates = this.calculateCoordinates(height, poGaugeStartAngle, endAngleRadian);
            this.baseCoordinates = { coordinates: coordinates };
        };
        PoGaugeSvgComponent.prototype.setRangesCoordinates = function (height, value, ranges) {
            var _this = this;
            if (value === void 0) { value = 0; }
            var _c = this.calculateMinAndMaxValues(ranges), minRange = _c.minRange, maxRange = _c.maxRange;
            var minValue = value < minRange ? value : minRange;
            var maxValue = value > maxRange ? value : maxRange;
            this.setPointerCoordinates(height, value, maxValue, minValue);
            // `.reverse()` no término da iteração para tratar a sobreposicão correta das bordas arredondadas dos ranges.
            var rangesCoordinates = ranges
                .map(function (range) {
                var _a, _b;
                var from = (_a = range.from) !== null && _a !== void 0 ? _a : 0;
                var to = (_b = range.to) !== null && _b !== void 0 ? _b : maxRange;
                var startAngleRadian = poGaugeStartAngle + _this.calculateAngleRadius(from, maxValue, minValue);
                var endAngleRadian = poGaugeStartAngle + _this.calculateAngleRadius(to, maxValue, minValue);
                var coordinates = _this.calculateCoordinates(height, startAngleRadian, endAngleRadian);
                return { coordinates: coordinates, color: range.color };
            })
                .reverse();
            this.coordinates = rangesCoordinates;
        };
        PoGaugeSvgComponent.prototype.setSingleRangeCoordinates = function (height, value) {
            var verifiedValue = value > 100 ? 100 : value;
            var endAngleRadian = poGaugeStartAngle + this.calculateAngleRadius(verifiedValue, poGaugeTotalValueDefault);
            var coordinates = value > 0 ? this.calculateCoordinates(height, poGaugeStartAngle, endAngleRadian) : undefined;
            var color = PoDefaultColors[0][0];
            this.coordinates = [{ coordinates: coordinates, color: color }];
        };
        PoGaugeSvgComponent.prototype.setPointerCoordinates = function (height, value, maxValue, minValue) {
            var coordinates = this.calculatePointerInitialCoordinates(height, poGaugeStartAngle);
            var pointerDegrees = this.pointerRotation(value, maxValue, minValue);
            this.pointerCoordinates = Object.assign(Object.assign({}, coordinates), { pointerDegrees: pointerDegrees });
        };
        PoGaugeSvgComponent.prototype.pointerRotation = function (value, maxValue, minValue) {
            var percent = this.convertValueToPercentage(value, maxValue, minValue);
            // valores referentes às angulações mínimas e máximas do ponteiro.
            var minRotation = 0;
            var maxRotation = 180;
            return (percent * (maxRotation - minRotation)) / 100 + minRotation;
        };
        PoGaugeSvgComponent.prototype.calculatePointerInitialCoordinates = function (height, startAngleRadian) {
            var radius = height - PoGaugePointerEnd - PoGaugeThickness / 2;
            // Valor que representa a escala do ponteiro para plotagem.
            var scale = 40;
            var pointerScaledWidth = radius / scale;
            var pointerScaledBorderRadius = radius / (scale * 2);
            var sinAlpha = Math.sin(startAngleRadian);
            var cosAlpha = Math.cos(startAngleRadian);
            var targetX = radius + cosAlpha * radius;
            var targetY = radius + sinAlpha * radius;
            var startX = radius;
            var startY = radius + pointerScaledWidth;
            var endX = radius;
            var endY = radius - pointerScaledWidth;
            var coordinates = [
                'M',
                startX,
                startY,
                'L',
                targetX,
                targetY + pointerScaledBorderRadius,
                'A',
                1,
                1,
                0,
                '0,1',
                targetX,
                targetY - pointerScaledBorderRadius,
                'L',
                endX,
                endY,
                'Z'
            ].join(' ');
            return { coordinates: coordinates, radius: radius };
        };
        PoGaugeSvgComponent.prototype.calculateCoordinates = function (height, startAngleRadian, endAngleRadian) {
            // Subtrai altura pelo excedente ponteiro em relação ao gráfico, pela metade do valor da coroa circular.
            var radius = height - PoGaugePointerEnd - PoGaugeThickness / 2;
            var innerRadius = radius - PoGaugeThickness;
            var sinAlpha = Math.sin(startAngleRadian);
            var cosAlpha = Math.cos(startAngleRadian);
            var sinBeta = Math.sin(endAngleRadian);
            var cosBeta = Math.cos(endAngleRadian);
            var startX = Math.round(radius + cosAlpha * radius);
            var startY = Math.round(radius + sinAlpha * radius);
            var endX = Math.round(radius + cosBeta * radius);
            var endY = Math.round(radius + sinBeta * radius);
            var startInnerX = Math.round(radius + cosAlpha * innerRadius);
            var startInnerY = Math.round(radius + sinAlpha * innerRadius);
            var endInnerX = Math.round(radius + cosBeta * innerRadius);
            var endInnerY = Math.round(radius + sinBeta * innerRadius);
            return [
                'M',
                startX,
                startY,
                'A',
                radius,
                radius,
                0,
                '0,1',
                endX,
                endY,
                'A',
                1,
                1,
                0,
                '0,1',
                endInnerX,
                endInnerY,
                'A',
                innerRadius,
                innerRadius,
                0,
                '0,0',
                startInnerX,
                startInnerY,
                'A',
                1,
                1,
                0,
                '0,1',
                startX,
                startY,
                'Z'
            ].join(' ');
        };
        PoGaugeSvgComponent.prototype.calculateAngleRadius = function (value, maxValue, minValue) {
            if (minValue === void 0) { minValue = 0; }
            var angle = ((value - minValue) / (maxValue - minValue)) * (Math.PI * 2);
            return angle / 2;
        };
        PoGaugeSvgComponent.prototype.convertValueToPercentage = function (value, maxValue, minValue) {
            return ((value - minValue) / (maxValue - minValue)) * 100;
        };
        PoGaugeSvgComponent.prototype.setViewBox = function (height) {
            var width = this.calculateDiameter(height);
            this.viewBox = "0 " + -PoGaugePointerEnd + " " + width + " " + height;
        };
        PoGaugeSvgComponent.prototype.calculateDiameter = function (height) {
            var radius = height - PoGaugePointerEnd - PoGaugeThickness / 2;
            return radius + Math.cos(0) * radius;
        };
        PoGaugeSvgComponent.prototype.calculateMinAndMaxValues = function (ranges) {
            var minRange = this.getDomain(ranges, 'min');
            var maxRange = this.getDomain(ranges, 'max');
            return {
                minRange: this.verifyIfFloatOrInteger(minRange) ? minRange : 0,
                maxRange: this.verifyIfFloatOrInteger(maxRange) ? maxRange : 100
            };
        };
        PoGaugeSvgComponent.prototype.verifyIfFloatOrInteger = function (number) {
            var notABoolean = typeof number !== 'boolean';
            var notInfinity = number !== Infinity;
            var isInteger = Number(number) === number && number % 1 === 0 && notInfinity;
            var isFloat = Number(number) === number && number % 1 !== 0 && notInfinity;
            return (notABoolean && isInteger) || (notABoolean && isFloat);
        };
        PoGaugeSvgComponent.prototype.getDomain = function (ranges, type) {
            var rangeType = { min: 'from', max: 'to' };
            return Math[type].apply(Math, __spreadArray([], __read(ranges.map(function (range) { return range[rangeType[type]]; }))));
        };
        return PoGaugeSvgComponent;
    }());
    PoGaugeSvgComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-gauge-svg',
                    template: "<svg:svg\r\n  *ngIf=\"addSvgElement\"\r\n  class=\"po-gauge-svg\"\r\n  preserveAspectRatio=\"xMidYMax meet\"\r\n  width=\"100%\"\r\n  [attr.viewBox]=\"viewBox\"\r\n  [attr.height]=\"container?.height\"\r\n>\r\n  <!-- GAUGE PATHS -->\r\n  <svg:g po-gauge-path [p-base-coordinates]=\"baseCoordinates\" [p-ranges-coordinates]=\"coordinates\"></svg:g>\r\n\r\n  <!-- GAUGE POINTER -->\r\n  <svg:g *ngIf=\"hasRanges\" po-gauge-pointer [p-coordinates]=\"pointerCoordinates\"></svg:g>\r\n</svg:svg>\r\n"
                },] }
    ];
    PoGaugeSvgComponent.propDecorators = {
        container: [{ type: i0.Input, args: ['p-container',] }],
        ranges: [{ type: i0.Input, args: ['p-ranges',] }],
        value: [{ type: i0.Input, args: ['p-value',] }]
    };

    var PoGaugeTitleComponent = /** @class */ (function () {
        function PoGaugeTitleComponent() {
        }
        return PoGaugeTitleComponent;
    }());
    PoGaugeTitleComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-gauge-title',
                    template: "<div *ngIf=\"title\" class=\"po-gauge-title\">{{ title }}</div>\r\n"
                },] }
    ];
    PoGaugeTitleComponent.propDecorators = {
        title: [{ type: i0.Input, args: ['p-title',] }]
    };

    var PoGaugePointerComponent = /** @class */ (function () {
        function PoGaugePointerComponent(renderer) {
            this.renderer = renderer;
            this.afterViewInit = false;
        }
        Object.defineProperty(PoGaugePointerComponent.prototype, "coordinates", {
            get: function () {
                return this._coordinates;
            },
            set: function (value) {
                var _a, _b;
                this._coordinates = value;
                if ((_a = this._coordinates) === null || _a === void 0 ? void 0 : _a.radius) {
                    this.calculateRadiusScale(this.coordinates.radius);
                }
                if (((_b = this._coordinates) === null || _b === void 0 ? void 0 : _b.hasOwnProperty('pointerDegrees')) && this.afterViewInit) {
                    this.applyPointerRotation(this.coordinates.pointerDegrees);
                }
            },
            enumerable: false,
            configurable: true
        });
        PoGaugePointerComponent.prototype.ngAfterViewInit = function () {
            var _a;
            if ((_a = this._coordinates) === null || _a === void 0 ? void 0 : _a.pointerDegrees) {
                this.applyPointerRotation(this.coordinates.pointerDegrees);
            }
            this.afterViewInit = true;
        };
        PoGaugePointerComponent.prototype.calculateRadiusScale = function (radius) {
            var scale = radius / 20;
            var maxScaleValue = 24;
            this.radiusScale = scale < maxScaleValue ? scale : maxScaleValue;
        };
        PoGaugePointerComponent.prototype.applyPointerRotation = function (degrees) {
            this.renderer.setStyle(this.pointer.nativeElement, 'transformOrigin', this.coordinates.radius + "px " + this.coordinates.radius + "px");
            this.renderer.setStyle(this.pointer.nativeElement, 'transform', "rotate(" + degrees + "deg)");
        };
        return PoGaugePointerComponent;
    }());
    PoGaugePointerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[po-gauge-pointer]',
                    template: "<svg:g>\r\n  <svg:path #pointer\r\n    class=\"po-gauge-pointer\"\r\n    [attr.d]=\"coordinates?.coordinates\"\r\n  >\r\n  </svg:path> \r\n\r\n  <svg:circle \r\n    class=\"po-gauge-pointer-circle\" \r\n    [attr.cx]=\"coordinates?.radius\" \r\n    [attr.cy]=\"coordinates?.radius\" \r\n    [attr.r]=\"radiusScale\"\r\n  >\r\n  </svg:circle>\r\n</svg:g>"
                },] }
    ];
    PoGaugePointerComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 }
    ]; };
    PoGaugePointerComponent.propDecorators = {
        pointer: [{ type: i0.ViewChild, args: ['pointer',] }],
        coordinates: [{ type: i0.Input, args: ['p-coordinates',] }]
    };

    /**
     * @description
     * Módulo do componente po-gauge.
     */
    var PoGaugeModule = /** @class */ (function () {
        function PoGaugeModule() {
        }
        return PoGaugeModule;
    }());
    PoGaugeModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, PoTooltipModule],
                    declarations: [
                        PoGaugeComponent,
                        PoGaugeTitleComponent,
                        PoGaugeLegendComponent,
                        PoGaugeSvgComponent,
                        PoGaugePathComponent,
                        PoGaugeDescriptionComponent,
                        PoGaugePointerComponent
                    ],
                    exports: [PoGaugeComponent]
                },] }
    ];

    var PoGridCellActionComponent = /** @class */ (function () {
        function PoGridCellActionComponent() {
            this.position = '';
        }
        PoGridCellActionComponent.prototype.onKeyDownContent = function (event) {
            // ENTER
            if (event.keyCode === 13) {
                event.preventDefault();
            }
        };
        return PoGridCellActionComponent;
    }());
    PoGridCellActionComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-grid-cell-action',
                    template: "<div>\r\n  <div\r\n    #contentElement\r\n    [id]=\"position\"\r\n    class=\"po-grid-cell-action-content\"\r\n    tabindex=\"0\"\r\n    (keydown)=\"onKeyDownContent($event)\"\r\n  >\r\n    <span>{{ value || '&nbsp;' }}</span>\r\n  </div>\r\n</div>\r\n"
                },] }
    ];
    PoGridCellActionComponent.ctorParameters = function () { return []; };
    PoGridCellActionComponent.propDecorators = {
        position: [{ type: i0.Input, args: ['p-position',] }],
        value: [{ type: i0.Input, args: ['p-value',] }]
    };

    var PoGridCellComponent = /** @class */ (function () {
        function PoGridCellComponent(changeDetectorRef) {
            this.changeDetectorRef = changeDetectorRef;
            this.align = 'left';
            this.freeze = false;
            this.tabIndex = -1;
            this.position = '';
            this.readonly = false;
            this.required = false;
            this.valueChange = new i0.EventEmitter();
            this._value = '';
            this.edit = false;
            this.editValue = '';
        }
        Object.defineProperty(PoGridCellComponent.prototype, "width", {
            get: function () {
                return this._width ? this._width + "px" : '100%';
            },
            set: function (value) {
                this._width = value;
                if (this.freeze && !this._width) {
                    this._width = 100;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoGridCellComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                this._value = value;
                this.valueChange.emit(this._value);
            },
            enumerable: false,
            configurable: true
        });
        PoGridCellComponent.prototype.onKeyDownContent = function (event) {
            // BACKSPACE / DELETE
            if (!event.ctrlKey && (event.keyCode === 8 || event.keyCode === 46)) {
                if (this.readonly) {
                    return;
                }
                event.preventDefault();
                this.value = '';
                return;
            }
            // ENTER
            if (event.keyCode === 13) {
                event.preventDefault();
                this.onEditCell(this.value);
                return;
            }
            // A..Z - 0..9
            if ((event.keyCode >= 65 && event.keyCode <= 90) || (event.keyCode >= 48 && event.keyCode <= 57)) {
                event.preventDefault();
                this.onEditCell(event.key);
            }
        };
        PoGridCellComponent.prototype.dblclick = function (event) {
            event.preventDefault();
            this.onEditCell(this.value);
        };
        PoGridCellComponent.prototype.onBlurInput = function () {
            this.value = this.editValue;
            this.editValue = undefined;
            this.edit = false;
        };
        PoGridCellComponent.prototype.onKeyDownInput = function (event) {
            // ENTER
            if (event.keyCode === 13) {
                event.target.blur();
                this.changeDetectorRef.detectChanges();
                this.contentElement.nativeElement.focus();
            }
            // ESCAPE
            if (event.keyCode === 27) {
                this.editValue = undefined;
                this.edit = false;
                this.changeDetectorRef.detectChanges();
                this.contentElement.nativeElement.focus();
                event.stopPropagation();
            }
        };
        PoGridCellComponent.prototype.onEditCell = function (value) {
            if (this.readonly) {
                return;
            }
            this.editValue = value;
            this.edit = true;
            this.changeDetectorRef.detectChanges();
            this.inputElement.nativeElement.focus();
        };
        return PoGridCellComponent;
    }());
    PoGridCellComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-grid-cell',
                    template: "<div>\r\n  <ng-container *ngIf=\"edit; then input; else content\"></ng-container>\r\n\r\n  <ng-template #content>\r\n    <div\r\n      #contentElement\r\n      [id]=\"position\"\r\n      class=\"po-grid-cell-content po-grid-cell-{{ align }} {{ !value && required ? 'po-grid-cell-required' : '' }}\"\r\n      (keydown)=\"onKeyDownContent($event)\"\r\n      tabindex=\"{{ readonly ? -1 : 0 }}\"\r\n      (dblclick)=\"dblclick($event)\"\r\n    >\r\n      <span>{{ value || '&nbsp;' }}</span>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-template #input>\r\n    <input\r\n      [id]=\"position\"\r\n      #inputElement\r\n      class=\"po-grid-cell-input\"\r\n      [(ngModel)]=\"editValue\"\r\n      (keydown.arrowup)=\"$event.stopPropagation()\"\r\n      (keydown.arrowdown)=\"$event.stopPropagation()\"\r\n      (keydown.arrowleft)=\"$event.stopPropagation()\"\r\n      (keydown.arrowright)=\"$event.stopPropagation()\"\r\n      (keydown)=\"onKeyDownInput($event)\"\r\n      (blur)=\"onBlurInput()\"\r\n    />\r\n  </ng-template>\r\n</div>\r\n"
                },] }
    ];
    PoGridCellComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    PoGridCellComponent.propDecorators = {
        align: [{ type: i0.Input, args: ['p-align',] }],
        freeze: [{ type: i0.Input, args: ['p-freeze',] }],
        tabIndex: [{ type: i0.Input, args: ['p-tab-index',] }],
        position: [{ type: i0.Input, args: ['p-position',] }],
        readonly: [{ type: i0.Input, args: ['p-readonly',] }],
        required: [{ type: i0.Input, args: ['p-required',] }],
        valueChange: [{ type: i0.Output, args: ['p-valueChange',] }],
        inputElement: [{ type: i0.ViewChild, args: ['inputElement',] }],
        contentElement: [{ type: i0.ViewChild, args: ['contentElement',] }],
        width: [{ type: i0.Input, args: ['p-width',] }],
        value: [{ type: i0.Input, args: ['p-value',] }]
    };

    /**
     * @description
     *
     * > Componente em desenvolvimento, podendo haver BREAKING CHANGES nas próximas versões.
     *
     * Componente grid.
     *
     * Ações / atalhos:
     *
     * - ARROW-UP: Navega para celula superior / Na ultima linha adiciona uma linha em branco no grid;
     * - ARROW-DOWN: Navega para celula inferior;
     * - ARROW-RIGHT: Navega para celula direita;
     * - ARROW-LEFT: Navega para celula esquerda;
     * - TAB: Navega para próxima celula;
     * - SHIFT+TAB: Navega para celula anterior;
     * - CTRL+DEL: Remove linha;
     * - DEL/BACKSPACE: Limpa celula;
     * - ENTER: Edita linha com valor atual/Confirma edição da celula;
     * - DOUBLE-CLICK: Edita linha com valor atual;
     * - ESC: Cancela edição da celula / Cancela inserção de linhas em branco;
     * - A..Z/0..9: Inicia edição com valor em branco.
     *
     * @example
     *
     * <example name="po-grid-basic" title="PO Grid Basic">
     *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.html"> </file>
     *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.ts"> </file>
     * </example>
     */
    var PoGridComponent = /** @class */ (function () {
        function PoGridComponent(changeDetectorRef, elRef, renderer) {
            var _this = this;
            this.changeDetectorRef = changeDetectorRef;
            this.elRef = elRef;
            /**
             * @description
             *
             * Ações disparadas quando uma linha do grid é manipulada.
             */
            this.rowActions = {};
            /**
             * Lista com os dados que serão exibidos no grid.
             */
            this.data = [];
            this.lastCell = '0-0';
            this.lastRow = 0;
            this.lastColumn = 0;
            this.currencyCell = '0-0';
            this.currencyRow = 0;
            this.currencyColumn = 0;
            this.logger = false;
            this.width = '100%';
            this.widporeeze = 0;
            this.widthActions = 0;
            this._columns = [];
            this.debounceResize();
            this.resizeListener = renderer.listen('window', 'resize', function (event) {
                _this.debounceResize();
            });
        }
        Object.defineProperty(PoGridComponent.prototype, "columns", {
            get: function () {
                return this._columns.filter(function (column) { return column.freeze !== true && column.action !== true; });
            },
            /**
             * Colunas exibidas no grid.
             */
            set: function (value) {
                this._columns = __spreadArray([], __read(value));
                this._columns.forEach(function (column) {
                    column.label = column.label || column.property;
                    if (column.freeze === true) {
                        column.cssWidth = (column.width || 100) + "px";
                    }
                    else {
                        column.cssWidth = column.width ? column.width + "px" : '100%';
                    }
                });
            },
            enumerable: false,
            configurable: true
        });
        PoGridComponent.prototype.ngOnDestroy = function () {
            if (this.resizeListener) {
                this.resizeListener();
            }
        };
        Object.defineProperty(PoGridComponent.prototype, "freezeColumns", {
            get: function () {
                var freezeColumns = this._columns.filter(function (column) { return column.freeze === true; });
                this.widporeeze = freezeColumns.reduce(function (prev, current) { return prev + (current.width || 100); }, 0);
                return freezeColumns;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoGridComponent.prototype, "actionColumns", {
            get: function () {
                var actionsColumns = this._columns.filter(function (column) { return column.action === true; });
                this.widthActions = actionsColumns.length > 0 ? 56 : 0;
                return actionsColumns;
            },
            enumerable: false,
            configurable: true
        });
        PoGridComponent.prototype.cancelRow = function (event, row) {
            var _this = this;
            var el = this.getEventPath(event).find(function (element) { return element.id; });
            if (!el) {
                return;
            }
            var _a = __read(el.id.split('-'), 1), x = _a[0];
            if (this.isEmptyRow(x)) {
                if (!this.removeRow(event, row)) {
                    return;
                }
                this.currencyObj = Object.assign({}, this.data[this.currencyRow - 1]);
            }
            else {
                this.data[+x - 1] = Object.assign({}, this.currencyObj);
                setTimeout(function () { return _this.selectCell(_this.currencyRow, _this.currencyColumn); });
            }
        };
        PoGridComponent.prototype.removeRow = function (event, row) {
            if (this.rowActions.beforeRemove && !this.rowActions.beforeRemove(Object.assign({}, row))) {
                return false;
            }
            var index = this.data.indexOf(row);
            this.data.splice(index, 1);
            this.changeDetectorRef.detectChanges();
            if (this.data.length === 0 || index === this.data.length) {
                this.selectCell(this.currencyRow - 1, this.currencyColumn);
            }
            else {
                this.selectCell(this.currencyRow, this.currencyColumn);
            }
            return true;
        };
        PoGridComponent.prototype.tableKeydown = function (event, direction) {
            var _a = __read(event.target.id.split('-'), 2), row = _a[0], col = _a[1];
            row = +row;
            col = +col;
            var prow = +row;
            var pcol = +col;
            if (direction === 'down') {
                if (row <= this.data.length) {
                    prow++;
                }
                if (row === this.data.length) {
                    if (row === 0 || !this.isEmptyRow(row)) {
                        if (this.saveRow(row)) {
                            if (!this.insertRow()) {
                                return;
                            }
                        }
                        else {
                            return;
                        }
                    }
                    else {
                        prow--;
                    }
                }
            }
            else if (direction === 'up' && row > 0) {
                prow--;
            }
            else if (direction === 'left' && col > 0) {
                pcol--;
            }
            else if (direction === 'right' && col < this._columns.length - 1) {
                pcol++;
            }
            else if (direction === 'next') {
                if (col < this._columns.length - 1) {
                    pcol++;
                    event.preventDefault();
                }
                else if (row < this.data.length) {
                    pcol = 0;
                    prow++;
                    event.preventDefault();
                }
            }
            else if (direction === 'prior') {
                if (col > 0) {
                    pcol--;
                    event.preventDefault();
                }
                else if (row > 0) {
                    pcol = this._columns.length - 1;
                    prow--;
                    event.preventDefault();
                }
            }
            if (this.currencyCell === prow + "-" + pcol) {
                return;
            }
            if (prow !== this.currencyRow && row > 0 && this.data.length >= row) {
                if (!this.isEmptyRow(row)) {
                    if (!this.saveRow(row)) {
                        return;
                    }
                }
                else {
                    if (!this.removeRow(event, row)) {
                        return;
                    }
                }
            }
            if (this.currencyRow !== prow) {
                this.currencyObj = Object.assign({}, this.data[prow - 1]);
            }
            this.lastCell = event.target.id;
            this.lastRow = row;
            this.lastColumn = col;
            this.selectCell(prow, pcol);
        };
        PoGridComponent.prototype.tableClick = function (event) {
            var el = this.getEventPath(event).find(function (element) { return element.id; });
            if (!el) {
                this.selectCell(this.currencyRow, this.currencyColumn);
                return;
            }
            if (this.currencyCell === el.id) {
                return;
            }
            var _a = __read(el.id.split('-'), 2), row = _a[0], col = _a[1];
            var prow = +row;
            var pcol = +col;
            if (prow !== this.currencyRow) {
                if (this.currencyRow > 0) {
                    if (!this.isEmptyRow(this.currencyRow)) {
                        if (!this.saveRow(this.currencyRow)) {
                            this.selectCell(this.currencyRow, this.currencyColumn);
                            return;
                        }
                    }
                    else {
                        if (!this.removeRow(event, row)) {
                            return;
                        }
                    }
                }
                this.currencyObj = Object.assign({}, this.data[prow - 1]);
            }
            this.lastCell = this.currencyCell;
            this.lastRow = this.currencyRow;
            this.lastColumn = this.currencyColumn;
            this.currencyCell = el.id;
            this.currencyRow = prow;
            this.currencyColumn = pcol;
        };
        PoGridComponent.prototype.saveRow = function (row) {
            var _this = this;
            var obj = this.data[row - 1];
            if (!Object.keys(obj).some(function (prop) { return obj[prop] !== _this.currencyObj[prop]; })) {
                return true;
            }
            if (this.rowActions.beforeSave && !this.rowActions.beforeSave(obj, this.currencyObj)) {
                return false;
            }
            var requireds = [];
            this.columns.forEach(function (column) {
                if (column.required === true && !obj[column.property]) {
                    requireds.push(column.property);
                }
            });
            return requireds.length === 0;
        };
        PoGridComponent.prototype.insertRow = function () {
            var obj = {};
            if (this.rowActions.beforeInsert && !this.rowActions.beforeInsert(obj)) {
                return false;
            }
            this.data.push(obj);
            this.changeDetectorRef.detectChanges();
            return true;
        };
        PoGridComponent.prototype.isEmptyRow = function (row) {
            var obj = this.data[row - 1];
            if (!obj) {
                // title
                return false;
            }
            var filled = Object.keys(obj).some(function (property) { return obj[property]; });
            return !filled;
        };
        PoGridComponent.prototype.selectCell = function (row, col) {
            var nextCell = this.elRef.nativeElement.querySelector("[id='" + row + "-" + col + "']");
            if (nextCell) {
                this.currencyCell = row + "-" + col;
                this.currencyRow = row;
                this.currencyColumn = col;
                nextCell.focus();
            }
        };
        PoGridComponent.prototype.debounceResize = function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(function () {
                var widthTableWrapper = _this.tableWrapper.nativeElement.offsetWidth;
                _this.width = widthTableWrapper - (_this.widporeeze + 8) - _this.widthActions + "px";
            }, 100);
        };
        PoGridComponent.prototype.getEventPath = function (event) {
            // firefox do not have support to event.path
            return event.path || event.composedPath();
        };
        return PoGridComponent;
    }());
    PoGridComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-grid',
                    template: "<div class=\"po-grid-wrapper po-grid-row-wrapper\" #wrapper>\r\n  <div *ngIf=\"logger\">\r\n    lastCell: {{ lastCell }} | currencyCell: {{ currencyCell }} <br />\r\n    lastRow: {{ lastRow }} | currencyRow: {{ currencyRow }} <br />\r\n    lastColumn: {{ lastColumn }} | currencyColumn: {{ currencyColumn }} <br />\r\n    <hr />\r\n    currencyObj: {{ currencyObj | json }}\r\n    <hr />\r\n  </div>\r\n\r\n  <div class=\"po-grid\">\r\n    <div class=\"po-grid-body\">\r\n      <div\r\n        class=\"po-grid-row\"\r\n        #table\r\n        (keydown.arrowup)=\"tableKeydown($event, 'up')\"\r\n        (keydown.arrowdown)=\"tableKeydown($event, 'down')\"\r\n        (keydown.arrowleft)=\"tableKeydown($event, 'left')\"\r\n        (keydown.arrowright)=\"tableKeydown($event, 'right')\"\r\n        (keydown.tab)=\"tableKeydown($event, 'next')\"\r\n        (keydown.shift.tab)=\"tableKeydown($event, 'prior')\"\r\n        (click)=\"tableClick($event)\"\r\n        (contextmenu)=\"tableClick($event)\"\r\n        (dblclick)=\"tableClick($event)\"\r\n      >\r\n        <div class=\"po-grid-cell po-grid-cell-freeze\" *ngIf=\"freezeColumns.length > 0\">\r\n          <ng-container *ngTemplateOutlet=\"divFreezeColumns\"></ng-container>\r\n        </div>\r\n\r\n        <div\r\n          class=\"po-grid-cell po-grid-cell-normal\"\r\n          [style.width]=\"width\"\r\n          [style.max-width]=\"width\"\r\n          [style.min-width]=\"width\"\r\n        >\r\n          <ng-container *ngTemplateOutlet=\"divColumns\"></ng-container>\r\n        </div>\r\n\r\n        <div class=\"po-grid-cell po-grid-cell-action\" *ngIf=\"actionColumns.length > 0\">\r\n          <ng-container *ngTemplateOutlet=\"divActionColumns\"></ng-container>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Coluna com as colunas congeladas -->\r\n<ng-template #divFreezeColumns>\r\n  <div class=\"po-grid po-grid-freeze\">\r\n    <div class=\"po-grid-header-group\">\r\n      <div class=\"po-grid-row\">\r\n        <po-grid-head\r\n          *ngFor=\"let column of freezeColumns; index as i\"\r\n          class=\"po-grid-title\"\r\n          [style.width]=\"column.cssWidth\"\r\n          [style.max-width]=\"column.cssWidth\"\r\n          [style.min-width]=\"column.cssWidth\"\r\n          p-freeze=\"true\"\r\n          p-position=\"{{ '0-' + i }}\"\r\n          [p-width]=\"column.width\"\r\n          [p-align]=\"column.align\"\r\n          [p-title]=\"column.label\"\r\n        >\r\n        </po-grid-head>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"po-grid-body\">\r\n      <div\r\n        class=\"po-grid-row\"\r\n        *ngFor=\"let row of data; index as j\"\r\n        (keydown.control.delete)=\"removeRow($event, row)\"\r\n        (keydown.esc)=\"cancelRow($event, row)\"\r\n      >\r\n        <po-grid-cell\r\n          *ngFor=\"let column of freezeColumns; index as i\"\r\n          class=\"po-grid-cell\"\r\n          [style.width]=\"column.cssWidth\"\r\n          [style.max-width]=\"column.cssWidth\"\r\n          [style.min-width]=\"column.cssWidth\"\r\n          p-freeze=\"true\"\r\n          [p-align]=\"column.align\"\r\n          [p-readonly]=\"column.readonly\"\r\n          [p-required]=\"column.required\"\r\n          p-position=\"{{ j + 1 + '-' + i }}\"\r\n          [p-width]=\"column.width\"\r\n          [(p-value)]=\"row[column.property]\"\r\n        >\r\n        </po-grid-cell>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<!-- FIM: Coluna com as colunas congeladas -->\r\n\r\n<!-- Coluna com as colunas nornais -->\r\n<ng-template #divColumns>\r\n  <div class=\"po-grid po-grid-normal\">\r\n    <div class=\"po-grid-header-group\">\r\n      <div class=\"po-grid-row\">\r\n        <po-grid-head\r\n          *ngFor=\"let column of columns; index as i\"\r\n          class=\"po-grid-title\"\r\n          [style.width]=\"column.cssWidth\"\r\n          [style.max-width]=\"column.cssWidth\"\r\n          [style.min-width]=\"column.cssWidth\"\r\n          [p-align]=\"column.align\"\r\n          p-position=\"{{ '0-' + (i + freezeColumns.length) }}\"\r\n          [p-title]=\"column.label\"\r\n          [p-width]=\"column.width\"\r\n        >\r\n        </po-grid-head>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"po-grid-body\">\r\n      <div\r\n        class=\"po-grid-row\"\r\n        *ngFor=\"let row of data; index as j\"\r\n        (keydown.control.delete)=\"removeRow($event, row)\"\r\n        (keydown.esc)=\"cancelRow($event, row)\"\r\n      >\r\n        <po-grid-cell\r\n          *ngFor=\"let column of columns; index as i\"\r\n          class=\"po-grid-cell\"\r\n          [style.width]=\"column.cssWidth\"\r\n          [style.max-width]=\"column.cssWidth\"\r\n          [style.min-width]=\"column.cssWidth\"\r\n          [p-align]=\"column.align\"\r\n          [p-readonly]=\"column.readonly\"\r\n          [p-required]=\"column.required\"\r\n          p-position=\"{{ j + 1 + '-' + (i + freezeColumns.length) }}\"\r\n          [(p-value)]=\"row[column.property]\"\r\n          [p-width]=\"column.width\"\r\n        >\r\n        </po-grid-cell>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<!-- FIM: Coluna com as colunas nornais -->\r\n\r\n<!-- Coluna com as colunas de a\u00E7\u00E3o -->\r\n<ng-template #divActionColumns>\r\n  <div class=\"po-grid po-grid-actions\">\r\n    <div class=\"po-grid-header-group\">\r\n      <div class=\"po-grid-row\">\r\n        <po-grid-head\r\n          *ngFor=\"let column of actionColumns; index as i\"\r\n          class=\"po-grid-title\"\r\n          p-position=\"{{ '0-' + (i + freezeColumns.length + columns.length) }}\"\r\n          [p-title]=\"column.label\"\r\n          [p-align]=\"column.align\"\r\n        >\r\n        </po-grid-head>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"po-grid-body\">\r\n      <div\r\n        class=\"po-grid-row\"\r\n        *ngFor=\"let row of data; index as j\"\r\n        (keydown.control.delete)=\"removeRow($event, row)\"\r\n        (keydown.esc)=\"cancelRow($event, row)\"\r\n      >\r\n        <po-grid-cell-action\r\n          *ngFor=\"let column of actionColumns; index as i\"\r\n          class=\"po-grid-cell\"\r\n          p-position=\"{{ j + 1 + '-' + (i + freezeColumns.length + columns.length) }}\"\r\n          [p-value]=\"row[column.property]\"\r\n        >\r\n        </po-grid-cell-action>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<!-- FIM: Coluna com as colunas de a\u00E7\u00E3o -->\r\n"
                },] }
    ];
    PoGridComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    PoGridComponent.propDecorators = {
        tableElement: [{ type: i0.ViewChild, args: ['table', { static: true },] }],
        tableWrapper: [{ type: i0.ViewChild, args: ['wrapper', { static: true },] }],
        rowActions: [{ type: i0.Input, args: ['p-row-actions',] }],
        data: [{ type: i0.Input, args: ['p-data',] }],
        columns: [{ type: i0.Input, args: ['p-columns',] }]
    };

    var PoGridHeadComponent = /** @class */ (function () {
        function PoGridHeadComponent() {
            this.align = 'left';
            this.boolean = false;
            this.position = '';
            this.tabIndex = -1;
        }
        Object.defineProperty(PoGridHeadComponent.prototype, "width", {
            get: function () {
                return this._width ? this._width + "px" : '100%';
            },
            set: function (value) {
                this._width = value;
            },
            enumerable: false,
            configurable: true
        });
        return PoGridHeadComponent;
    }());
    PoGridHeadComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-grid-head',
                    template: "<div>\r\n  <div [id]=\"position\" class=\"po-grid-head-content po-grid-head-{{ align }}\" tabindex=\"{{ title ? 0 : -1 }}\">\r\n    <span>{{ title || '&nbsp;' }}</span>\r\n  </div>\r\n</div>\r\n"
                },] }
    ];
    PoGridHeadComponent.propDecorators = {
        align: [{ type: i0.Input, args: ['p-align',] }],
        boolean: [{ type: i0.Input, args: ['p-freeze',] }],
        position: [{ type: i0.Input, args: ['p-position',] }],
        tabIndex: [{ type: i0.Input, args: ['p-tab-index',] }],
        title: [{ type: i0.Input, args: ['p-title',] }],
        width: [{ type: i0.Input, args: ['p-width',] }]
    };

    /**
     * @description
     *
     * Módulo do componente po-grid.
     */
    var PoGridModule = /** @class */ (function () {
        function PoGridModule() {
        }
        return PoGridModule;
    }());
    PoGridModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, PoFieldModule],
                    declarations: [PoGridCellActionComponent, PoGridCellComponent, PoGridComponent, PoGridHeadComponent],
                    exports: [PoGridComponent]
                },] }
    ];

    var poListViewLiteralsDefault = {
        en: {
            hideDetails: 'Hide details',
            loadMoreData: 'Load more data',
            noData: 'No data found',
            selectAll: 'Select all',
            showDetails: 'Show details'
        },
        es: {
            hideDetails: 'Ocultar detalles',
            loadMoreData: 'Cargar más resultados',
            noData: 'Datos no encontrados',
            selectAll: 'Seleccionar todos',
            showDetails: 'Mostrar detalles'
        },
        pt: {
            hideDetails: 'Ocultar detalhes',
            loadMoreData: 'Carregar mais resultados',
            noData: 'Nenhum dado encontrado',
            selectAll: 'Selecionar todos',
            showDetails: 'Exibir detalhes'
        },
        ru: {
            hideDetails: 'Скрыть детали',
            loadMoreData: 'Загрузить больше результатов',
            noData: 'Данные не найдены',
            selectAll: 'Выбрать все',
            showDetails: 'Посмотреть детали'
        }
    };
    /**
     * @description
     *
     * Componente de lista que recebe um array de objetos e renderiza de forma dinâmica os dados de
     * acordo com a necessidade de cada tela e deve ser utilizado em conjunto com as diretivas de *templates*
     *  **[p-list-view-content-template](/documentation/po-list-view-content-template)** e
     * **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
     *
     * O componente disponibiliza uma área específica para exibição informações adicionais,
     * através da diretiva **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
     */
    var PoListViewBaseComponent = /** @class */ (function () {
        function PoListViewBaseComponent(languageService) {
            /**
             * @optional
             *
             * @description
             *
             * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
             *
             * > Caso nenhuma ação for definida o mesmo não ficará visível.
             */
            this.showMore = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Ação que será executada ao clicar no título.
             *
             * Ao ser disparado, o método inserido na ação irá receber como parâmetro o item da lista clicado.
             */
            this.titleAction = new i0.EventEmitter();
            this.selectAll = false;
            this.showHeader = false;
            this.language = poLocaleDefault;
            this.language = languageService.getShortLanguage();
        }
        Object.defineProperty(PoListViewBaseComponent.prototype, "actions", {
            get: function () {
                return this._actions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Lista de ações que serão exibidas no componente.
             */
            set: function (value) {
                this._actions = Array.isArray(value) ? value : [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoListViewBaseComponent.prototype, "height", {
            get: function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura do `po-list-view` em *pixels*.
             */
            set: function (height) {
                this._height = height;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoListViewBaseComponent.prototype, "hideSelectAll", {
            get: function () {
                return this._hideSelectAll;
            },
            /**
             * @description
             *
             * Esconde o *checkbox* para seleção de todos os itens.
             *
             * @default `false`
             */
            set: function (hideSelectAll) {
                this._hideSelectAll = convertToBoolean(hideSelectAll);
                this.showMainHeader();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoListViewBaseComponent.prototype, "items", {
            get: function () {
                return this._items;
            },
            /** Lista de itens que serão exibidos no componente. */
            set: function (value) {
                this._items = Array.isArray(value) ? value : [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoListViewBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poListViewLiteralsDefault[this.language];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-list-view`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoListViewLiterals = {
             *    hideDetail: 'Ocultar detalhes completamente',
             *    loadMoreData: 'Mais dados',
             *    showDetail: 'Mostrar mais detalhes',
             *    selectAll: 'Selecionar todos os itens'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: PoListViewLiterals = {
             *    showDetail: 'Mostrar mais detalhes'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-list-view
             *   [p-literals]="customLiterals">
             * </po-list-view>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do
             * [`PoI18nService`](/documentation/po-i18n) ou do browser.
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = Object.assign(Object.assign(Object.assign({}, poListViewLiteralsDefault[poLocaleDefault]), poListViewLiteralsDefault[this.language]), value);
                }
                else {
                    this._literals = poListViewLiteralsDefault[this.language];
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoListViewBaseComponent.prototype, "select", {
            get: function () {
                return this._select;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
             * item está selecionado, por exemplo:
             *
             * ```
             *  item.$selected
             *
             *  // ou
             *
             *  item['$selected']
             * ```
             *
             * @default `false`
             */
            set: function (select) {
                this._select = convertToBoolean(select);
                this.showMainHeader();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoListViewBaseComponent.prototype, "showMoreDisabled", {
            get: function () {
                return this._showMoreDisabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o botão `Carregar Mais Resultados` será desabilitado.
             */
            set: function (value) {
                this._showMoreDisabled = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        PoListViewBaseComponent.prototype.onClickAction = function (listViewAction, item) {
            var cleanItem = this.deleteInternalAttrs(item);
            if (listViewAction.action) {
                listViewAction.action(cleanItem);
            }
        };
        PoListViewBaseComponent.prototype.onShowMore = function () {
            this.showMore.emit();
        };
        PoListViewBaseComponent.prototype.runTitleAction = function (listItem) {
            var itemWithPublicProperties = this.deleteInternalAttrs(listItem);
            this.titleAction.emit(itemWithPublicProperties);
        };
        PoListViewBaseComponent.prototype.selectAllListItems = function () {
            var _this = this;
            if (!this.hideSelectAll) {
                this.selectAll = !this.selectAll;
                this.items.forEach(function (item) {
                    item.$selected = _this.selectAll;
                });
            }
        };
        PoListViewBaseComponent.prototype.selectListItem = function (row) {
            row.$selected = !row.$selected;
            this.selectAll = this.checkIfItemsAreSelected(this.items);
        };
        PoListViewBaseComponent.prototype.deleteInternalAttrs = function (item) {
            var itemCopy = item ? Object.assign({}, item) : undefined;
            for (var key in itemCopy) {
                if (itemCopy.hasOwnProperty(key) && key.startsWith('$')) {
                    delete itemCopy[key];
                }
            }
            return itemCopy;
        };
        PoListViewBaseComponent.prototype.checkIfItemsAreSelected = function (items) {
            var someCheckedOrIndeterminate = function (item) { return item.$selected || item.$selected === null; };
            var everyChecked = function (item) { return item.$selected; };
            if (items.every(everyChecked)) {
                return true;
            }
            if (items.some(someCheckedOrIndeterminate)) {
                return null;
            }
            return false;
        };
        PoListViewBaseComponent.prototype.showMainHeader = function () {
            this.showHeader = !!(this.select && !this.hideSelectAll && this.items && this.items.length);
        };
        return PoListViewBaseComponent;
    }());
    PoListViewBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoListViewBaseComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoListViewBaseComponent.propDecorators = {
        propertyLink: [{ type: i0.Input, args: ['p-property-link',] }],
        propertyTitle: [{ type: i0.Input, args: ['p-property-title',] }],
        showMore: [{ type: i0.Output, args: ['p-show-more',] }],
        titleAction: [{ type: i0.Output, args: ['p-title-action',] }],
        actions: [{ type: i0.Input, args: ['p-actions',] }],
        height: [{ type: i0.Input, args: ['p-height',] }],
        hideSelectAll: [{ type: i0.Input, args: ['p-hide-select-all',] }],
        items: [{ type: i0.Input, args: ['p-items',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        select: [{ type: i0.Input, args: ['p-select',] }],
        showMoreDisabled: [{ type: i0.Input, args: ['p-show-more-disabled',] }]
    };

    /**
     * @usedBy PoListViewComponent
     *
     * @description
     *
     * Esta diretiva permite que sejam apresentadas informações essenciais de cada item.
     *
     * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
     *  - Item: `item` determina o item da linha corrente.
     *  - Índice: `index` determina o índice da linha corrente.
     *
     * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <po-list-view
     *   p-property-title="name"
     *   [p-items]="[{id: 1, name: "Register", email: register@po-ui.com}]">
     *
     *   <ng-template p-list-view-content-template let-item let-code="index">
     *     <div class="po-row">
     *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
     *       <po-info class="po-md-6" p-label="Email" [p-value]="item.email"></po-info>
     *     </div>
     *   </ng-template>
     *
     * </po-list-view>
     *
     * ...
     * ```
     *
     * ```
     * ...
     * <po-list-view
     *    p-property-title="name"
     *    [p-items]="[{id: 1, name: "Register", email: register@po-ui.com}]">
     *
     *    <div *p-list-view-content-template="let item, let i=index" class="po-row">
     *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
     *    </div>
     * </po-list-view>
     * ...
     *
     * ```
     *
     * A diretiva **p-list-view-content-template**, possibilita também alterar o título dos itens. Para isto,
     * é necessário atribuir a referência da função que faz a alteração, à propriedade `p-title`,
     * a mesma deve retornar um valor do tipo *string*. Veja o exemplo a seguir:
     *
     * ```
     * ...
     * @Component({
     *    selector: 'app-root',
     *    template: `
     *      ...
     *      <po-list-view
     *        [p-items]="items">
     *        <ng-template p-list-view-content-template let-item [p-title]="customTitle">
     *          <div class="po-row">
     *            <po-info class="po-md-12" p-label="Customer" [p-value]="item.customer"></po-info>
     *          </div>
     *        </ng-template>
     *      ...
     *    `
     * })
     * export class AppComponent {
     *    public items = [{
     *      code: 1200,
     *      product: 'Rice',
     *      customer: 'Supermarket 1',
     *    }, {
     *      code: 1355,
     *      product: 'Bean',
     *      customer: 'Supermarket 2'
     *    }];
     *
     *    customTitle(item) {
     *      return `${item.code} - ${item.product}`;
     *    }
     * }
     * ```
     */
    var PoListViewContentTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function PoListViewContentTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return PoListViewContentTemplateDirective;
    }());
    PoListViewContentTemplateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[p-list-view-content-template]'
                },] }
    ];
    PoListViewContentTemplateDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };
    PoListViewContentTemplateDirective.propDecorators = {
        title: [{ type: i0.Input, args: ['p-title',] }]
    };

    /**
     * @usedBy PoListViewComponent
     *
     * @description
     *
     * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
     * botão `Exibir detalhes` abaixo do conteúdo principal do item.
     *
     * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
     *  - Item: `item` determina o item da linha corrente.
     *  - Índice: `index` determina o índice da linha corrente.
     *
     * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <po-list-view
     *   p-property-title="name"
     *   [p-items]="items">
     *
     *   <ng-template p-list-view-detail-template let-item let-code="index">
     *     <div class="po-row">
     *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
     *       <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
     *     </div>
     *   </ng-template>
     *
     * </po-list-view>
     *
     * ...
     * ```
     *
     * ```
     * ...
     * <po-list-view
     *    p-property-title="name"
     *    [p-items]="items">
     *    <div *p-list-view-detail-template="let item, let i=index" class="po-row">
     *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
     *    </div>
     * </po-list-view>
     * ...
     *
     * ```
     */
    var PoListViewDetailTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function PoListViewDetailTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return PoListViewDetailTemplateDirective;
    }());
    PoListViewDetailTemplateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[p-list-view-detail-template]'
                },] }
    ];
    PoListViewDetailTemplateDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };
    PoListViewDetailTemplateDirective.propDecorators = {
        showDetail: [{ type: i0.Input, args: ['p-show-detail',] }]
    };

    /**
     * @docsExtends PoListViewBaseComponent
     *
     * @example
     *
     * <example name="po-list-view-basic" title="PO List View Basic">
     *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.html"> </file>
     *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-list-view-labs" title="PO List View Labs">
     *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.html"> </file>
     *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-list-view-hiring-processes" title="PO List View - Hiring Processes">
     *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.html"> </file>
     *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.ts"> </file>
     *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.service.ts"> </file>
     * </example>
     */
    var PoListViewComponent = /** @class */ (function (_super) {
        __extends(PoListViewComponent, _super);
        function PoListViewComponent(changeDetector, differs, languageService) {
            var _this = _super.call(this, languageService) || this;
            _this.changeDetector = changeDetector;
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        Object.defineProperty(PoListViewComponent.prototype, "hasContentTemplate", {
            get: function () {
                return !!this.listViewContentTemplate;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoListViewComponent.prototype, "hasDetailTemplate", {
            get: function () {
                return !!this.listViewDetailTemplate;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoListViewComponent.prototype, "displayShowMoreButton", {
            get: function () {
                return this.items && this.items.length > 0 && this.showMore.observers.length > 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoListViewComponent.prototype, "showButtonsActions", {
            get: function () {
                return this.visibleActions && this.visibleActions.length > 0 && this.visibleActions.length <= 2;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoListViewComponent.prototype, "showPopupActions", {
            get: function () {
                return this.visibleActions && this.visibleActions.length > 2;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoListViewComponent.prototype, "titleHasAction", {
            get: function () {
                return this.titleAction.observers.length > 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoListViewComponent.prototype, "visibleActions", {
            get: function () {
                return this.actions && this.actions.filter(function (action) { return action.visible !== false; });
            },
            enumerable: false,
            configurable: true
        });
        PoListViewComponent.prototype.ngAfterContentInit = function () {
            this.initShowDetail();
        };
        PoListViewComponent.prototype.ngDoCheck = function () {
            this.checkItemsChange();
        };
        PoListViewComponent.prototype.checkTitleType = function (item) {
            if (this.propertyLink && item[this.propertyLink]) {
                return item[this.propertyLink].startsWith('http') ? 'externalLink' : 'internalLink';
            }
            return 'noLink';
        };
        PoListViewComponent.prototype.getItemTitle = function (item) {
            return this.hasContentTemplate && this.listViewContentTemplate.title
                ? this.listViewContentTemplate.title(item)
                : item[this.propertyTitle];
        };
        PoListViewComponent.prototype.hasItems = function () {
            return this.items && this.items.length > 0;
        };
        PoListViewComponent.prototype.returnBooleanValue = function (listViewAction, item) {
            return isTypeof(listViewAction.disabled, 'function')
                ? listViewAction.disabled(item)
                : listViewAction.disabled;
        };
        PoListViewComponent.prototype.trackBy = function (index) {
            return index;
        };
        PoListViewComponent.prototype.togglePopup = function (item, targetRef) {
            this.popupTarget = targetRef;
            this.changeDetector.detectChanges();
            this.poPopupComponent.toggle(item);
        };
        PoListViewComponent.prototype.checkItemsChange = function () {
            var changesItems = this.differ.diff(this.items);
            if (changesItems && this.selectAll) {
                this.selectAll = null;
            }
            if (changesItems && this.items && this.items.length && this.select && !this.hideSelectAll) {
                this.showHeader = true;
            }
        };
        PoListViewComponent.prototype.initShowDetail = function () {
            var _this = this;
            if (this.items && this.items.length > 0 && this.hasDetailTemplate && this.listViewDetailTemplate.showDetail) {
                this.items.forEach(function (item) { return (item.$showDetail = _this.listViewDetailTemplate.showDetail(item)); });
            }
        };
        return PoListViewComponent;
    }(PoListViewBaseComponent));
    PoListViewComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-list-view',
                    template: "<div\r\n  [class.po-list-view-main-container-header]=\"showHeader\"\r\n  [class.po-list-view-main-container]=\"!showHeader\"\r\n  [style.height.px]=\"height\"\r\n>\r\n  <div *ngIf=\"showHeader\" class=\"po-list-view-main-header\">\r\n    <div class=\"po-checkbox-group-item\">\r\n      <div class=\"po-list-view-main-select\">\r\n        <input\r\n          class=\"po-input po-checkbox-group-input\"\r\n          type=\"checkbox\"\r\n          [class.po-checkbox-group-input-checked]=\"selectAll\"\r\n          [class.po-checkbox-group-input-indeterminate]=\"selectAll === null\"\r\n        />\r\n        <label\r\n          class=\"po-checkbox-group-label po-list-view-selectable-label po-clickable\"\r\n          (click)=\"selectAllListItems()\"\r\n        >\r\n          {{ literals.selectAll }}\r\n        </label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"po-list-view-main-content\">\r\n    <div class=\"po-list-view\" *ngIf=\"!hasItems()\">\r\n      <div class=\"po-list-view-container-no-data po-text-center\">\r\n        <span> {{ literals.noData }} </span>\r\n      </div>\r\n    </div>\r\n\r\n    <ng-container *ngFor=\"let item of items; let index = index; trackBy: trackBy\">\r\n      <div class=\"po-list-view\">\r\n        <div class=\"po-list-view-container\">\r\n          <div class=\"po-list-view-header\">\r\n            <div class=\"po-list-view-title\" [ngSwitch]=\"checkTitleType(item)\">\r\n              <div *ngIf=\"select\" class=\"po-list-view-select\">\r\n                <input\r\n                  class=\"po-input po-checkbox-group-input\"\r\n                  type=\"checkbox\"\r\n                  [class.po-checkbox-group-input-checked]=\"item.$selected\"\r\n                />\r\n                <label\r\n                  class=\"po-checkbox-group-label po-list-view-selectable-label po-clickable\"\r\n                  (click)=\"selectListItem(item)\"\r\n                ></label>\r\n              </div>\r\n              <a\r\n                *ngSwitchCase=\"'externalLink'\"\r\n                class=\"po-list-view-title-link\"\r\n                target=\"_blank\"\r\n                [href]=\"item[propertyLink]\"\r\n                (click)=\"runTitleAction(item)\"\r\n              >\r\n                {{ getItemTitle(item) }}\r\n              </a>\r\n              <a\r\n                *ngSwitchCase=\"'internalLink'\"\r\n                class=\"po-list-view-title-link\"\r\n                [routerLink]=\"item[propertyLink]\"\r\n                (click)=\"runTitleAction(item)\"\r\n              >\r\n                {{ getItemTitle(item) }}\r\n              </a>\r\n              <span\r\n                *ngSwitchCase=\"'noLink'\"\r\n                class=\"po-list-view-title-no-link\"\r\n                [class.po-list-view-title-link]=\"titleHasAction\"\r\n                (click)=\"titleHasAction && runTitleAction(item)\"\r\n              >\r\n                {{ getItemTitle(item) }}\r\n              </span>\r\n            </div>\r\n\r\n            <div *ngIf=\"showButtonsActions\" class=\"po-list-view-actions\">\r\n              <po-button\r\n                *ngFor=\"let action of visibleActions\"\r\n                p-small=\"true\"\r\n                [p-disabled]=\"returnBooleanValue(action, item)\"\r\n                [p-icon]=\"action.icon\"\r\n                [p-label]=\"action.label\"\r\n                [p-type]=\"action.type\"\r\n                (p-click)=\"onClickAction(action, item)\"\r\n              >\r\n              </po-button>\r\n            </div>\r\n\r\n            <div *ngIf=\"showPopupActions\" class=\"po-list-view-more-actions\">\r\n              <span\r\n                #popupTarget\r\n                class=\"po-icon po-icon-more po-list-view-more-icon po-clickable\"\r\n                (click)=\"togglePopup(item, popupTarget)\"\r\n              >\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div *ngIf=\"hasContentTemplate\" class=\"po-list-view-content\">\r\n            <ng-template\r\n              [ngTemplateOutlet]=\"listViewContentTemplate.templateRef\"\r\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"\r\n            >\r\n            </ng-template>\r\n          </div>\r\n\r\n          <div @showHideDetail *ngIf=\"hasDetailTemplate && item.$showDetail\" class=\"po-list-view-detail\">\r\n            <ng-template\r\n              [ngTemplateOutlet]=\"listViewDetailTemplate.templateRef\"\r\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"\r\n            >\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n\r\n        <div *ngIf=\"hasDetailTemplate\" class=\"po-list-view-detail-button\">\r\n          <span class=\"po-clickable\" (click)=\"item.$showDetail = !item.$showDetail\">\r\n            {{ item.$showDetail ? literals.hideDetails : literals.showDetails }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"displayShowMoreButton\" class=\"po-mb-2 po-text-center\">\r\n  <po-button [p-disabled]=\"showMoreDisabled\" [p-label]=\"literals.loadMoreData\" (p-click)=\"onShowMore()\"> </po-button>\r\n</div>\r\n\r\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"popupTarget\"> </po-popup>\r\n",
                    animations: [
                        animations.trigger('showHideDetail', [
                            animations.state('*', animations.style({ 'overflow-y': 'visible' })),
                            animations.state('void', animations.style({ 'overflow-y': 'hidden' })),
                            animations.transition('* => void', [animations.style({ height: '*', 'overflow-y': 'hidden' }), animations.animate(100, animations.style({ height: 0 }))]),
                            animations.transition('void => *', [animations.style({ height: '0' }), animations.animate(100, animations.style({ height: '*' }))])
                        ])
                    ]
                },] }
    ];
    PoListViewComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.IterableDiffers },
        { type: PoLanguageService }
    ]; };
    PoListViewComponent.propDecorators = {
        listViewContentTemplate: [{ type: i0.ContentChild, args: [PoListViewContentTemplateDirective, { static: true },] }],
        listViewDetailTemplate: [{ type: i0.ContentChild, args: [PoListViewDetailTemplateDirective, { static: true },] }],
        poPopupComponent: [{ type: i0.ViewChild, args: ['popup', { static: true },] }]
    };

    /**
     * @description
     *
     * Módulo do componente `po-list-view`.
     *
     * > Para o correto funcionamento do componente `po-list-view`, deve ser importado o módulo `BrowserAnimationsModule` no
     * > módulo principal da sua aplicação.
     *
     * Módulo da aplicação:
     * ```
     * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
     * import { PoModule } from '@po-ui/ng-components';
     * ...
     *
     * @NgModule({
     *   imports: [
     *     BrowserModule,
     *     BrowserAnimationsModule,
     *     ...
     *     PoModule
     *   ],
     *   declarations: [
     *     AppComponent,
     *     ...
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     */
    var PoListViewModule = /** @class */ (function () {
        function PoListViewModule() {
        }
        return PoListViewModule;
    }());
    PoListViewModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, router.RouterModule, PoButtonModule, PoPopupModule],
                    declarations: [PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective],
                    exports: [PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective],
                    providers: [],
                    schemas: []
                },] }
    ];

    var PO_BADGE_COLORS = [
        'color-01',
        'color-02',
        'color-03',
        'color-04',
        'color-05',
        'color-06',
        'color-07',
        'color-08',
        'color-09',
        'color-10',
        'color-11',
        'color-12'
    ];
    var PO_BADGE_COLOR_DEFAULT = 'color-07';
    /**
     * @description
     *
     * @docsPrivate
     *
     * Componente utilizado no `po-menu` para exibir por exemplo a quantidade de tarefas pendentes.
     */
    var PoBadgeBaseComponent = /** @class */ (function () {
        function PoBadgeBaseComponent() {
        }
        Object.defineProperty(PoBadgeBaseComponent.prototype, "color", {
            get: function () {
                return this._color;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a cor de fundo do componente e aceita os valores:
             *
             * <span class="dot po-color-01"></span> `color-01`
             *
             * <span class="dot po-color-02"></span> `color-02`
             *
             * <span class="dot po-color-03"></span> `color-03`
             *
             * <span class="dot po-color-04"></span> `color-04`
             *
             * <span class="dot po-color-05"></span> `color-05`
             *
             * <span class="dot po-color-06"></span> `color-06`
             *
             * <span class="dot po-color-07"></span> `color-07`
             *
             * <span class="dot po-color-08"></span> `color-08`
             *
             * <span class="dot po-color-09"></span> `color-09`
             *
             * <span class="dot po-color-10"></span> `color-10`
             *
             * <span class="dot po-color-11"></span> `color-11`
             *
             * <span class="dot po-color-12"></span> `color-12`
             *
             * @default `color-07`
             */
            set: function (value) {
                this._color = PO_BADGE_COLORS.includes(value) ? value : PO_BADGE_COLOR_DEFAULT;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoBadgeBaseComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            /**
             * @description
             *
             * Número exibido no componente, caso o mesmo seja maior que 99 o valor exibido será 99+.
             */
            set: function (value) {
                this._value = convertToInt(value);
                this.setBadgeValue(this._value);
            },
            enumerable: false,
            configurable: true
        });
        PoBadgeBaseComponent.prototype.setBadgeValue = function (value) {
            var validRangeValue = (value || value === 0) && value >= 0 && value < 100;
            this.badgeValue = validRangeValue ? value.toString() : value > 99 ? '99+' : undefined;
        };
        return PoBadgeBaseComponent;
    }());
    PoBadgeBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoBadgeBaseComponent.propDecorators = {
        color: [{ type: i0.Input, args: ['p-color',] }],
        value: [{ type: i0.Input, args: ['p-value',] }]
    };

    /**
     * @docsExtends PoBadgeBaseComponent
     *
     * @docsPrivate
     */
    var PoBadgeComponent = /** @class */ (function (_super) {
        __extends(PoBadgeComponent, _super);
        function PoBadgeComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PoBadgeComponent;
    }(PoBadgeBaseComponent));
    PoBadgeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-badge',
                    template: "<div class=\"po-badge po-{{ color }}\">\r\n  <span class=\"po-badge-value\">{{ badgeValue }}</span>\r\n</div>\r\n"
                },] }
    ];

    /**
     * @description
     *
     * Módulo do componente po-badge.
     */
    var PoBadgeModule = /** @class */ (function () {
        function PoBadgeModule() {
        }
        return PoBadgeModule;
    }());
    PoBadgeModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [PoBadgeComponent],
                    exports: [PoBadgeComponent]
                },] }
    ];

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço que implementa a interface `PoMenuFilter`, utilizado para fazer requisições ao serviço informado pelo usuário,
     * caso for uma URL, no componente `po-menu`.
     */
    var PoMenuService = /** @class */ (function () {
        function PoMenuService(http) {
            this.http = http;
        }
        Object.defineProperty(PoMenuService.prototype, "url", {
            get: function () {
                return this._url;
            },
            enumerable: false,
            configurable: true
        });
        PoMenuService.prototype.configProperties = function (url) {
            this._url = url;
        };
        PoMenuService.prototype.getFilteredData = function (search, params) {
            var filterParams = Object.assign({ search: search }, params);
            return this.http
                .get(this.url, { params: filterParams })
                .pipe(operators.map(function (response) { return response && response.items; }));
        };
        return PoMenuService;
    }());
    PoMenuService.decorators = [
        { type: i0.Injectable }
    ];
    PoMenuService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    var PoMenuGlobalService = /** @class */ (function () {
        function PoMenuGlobalService() {
            this.applicationMenu = new rxjs.Subject();
            this.menus = new rxjs.Subject();
            this.removedApplicationMenu = new rxjs.Subject();
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.receiveApplicationMenu$ = this.applicationMenu.asObservable();
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.receiveMenus$ = this.menus.asObservable();
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.receiveRemovedApplicationMenu$ = this.removedApplicationMenu.asObservable();
        }
        PoMenuGlobalService.prototype.sendApplicationMenu = function (menu) {
            this.applicationMenu.next(menu);
        };
        PoMenuGlobalService.prototype.sendMenus = function (menus) {
            this.menus.next(menus);
        };
        PoMenuGlobalService.prototype.sendRemovedApplicationMenu = function (id) {
            this.removedApplicationMenu.next(id);
        };
        return PoMenuGlobalService;
    }());
    PoMenuGlobalService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PoMenuGlobalService_Factory() { return new PoMenuGlobalService(); }, token: PoMenuGlobalService, providedIn: "root" });
    PoMenuGlobalService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    var poMenuLiteralsDefault = {
        en: { itemNotFound: 'Item not found.', emptyLabelError: 'Attribute PoMenuItem.label can not be empty.' },
        es: { itemNotFound: 'Elemento no encontrado.', emptyLabelError: 'El atributo PoMenuItem.label no puede ser vacío.' },
        pt: { itemNotFound: 'Item não encontrado.', emptyLabelError: 'O atributo PoMenuItem.label não pode ser vazio.' },
        ru: { itemNotFound: 'Предмет не найден.', emptyLabelError: 'Атрибут PoMenuItem.label не может быть пустым.' }
    };
    /**
     * @description
     *
     * Este é um componente de menu lateral que é utilizado para navegação nas páginas de uma aplicação.
     *
     * O componente po-menu recebe uma lista de objetos do tipo `MenuItem` com as informações dos itens de menu como
     * textos, links para redirecionamento, ações, até 4 níveis de menu e ícones para o primeiro nível de menu.
     */
    var PoMenuBaseComponent = /** @class */ (function () {
        function PoMenuBaseComponent(menuGlobalService, menuService, languageService) {
            this.menuGlobalService = menuGlobalService;
            this.menuService = menuService;
            this.languageService = languageService;
            this.literals = Object.assign(Object.assign({}, poMenuLiteralsDefault[this.languageService.getLanguageDefault()]), poMenuLiteralsDefault[this.languageService.getShortLanguage()]);
            this._collapsed = false;
            this._filter = false;
            this._maxLevel = 4;
            this._menus = [];
        }
        Object.defineProperty(PoMenuBaseComponent.prototype, "collapsed", {
            get: function () {
                return this._collapsed;
            },
            /**
             * @optional
             *
             * @description
             *
             * Colapsa (retrai) o menu e caso receba o valor `false` expande o menu.
             *
             * > Utilize esta propriedade para iniciar o menu colapsado.
             *
             * > Ao utilizar os métodos [`colapse`](documentation/po-menu#colapseMethod), [`expand`](documentation/po-menu#expandMethod) e
             * [`toggle`](documentation/po-menu#toggleMethod) o valor desta propriedade não é alterado.
             *
             * **Importante:**
             *
             * > O menu será colapsado/expandido apenas se todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
             *
             * @default `false`
             */
            set: function (collapsed) {
                this._collapsed = convertToBoolean(collapsed);
                this.validateCollapseClass();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuBaseComponent.prototype, "menus", {
            get: function () {
                return this._menus;
            },
            /** Lista dos itens do menu. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
            set: function (menus) {
                var _this = this;
                this._menus = Array.isArray(menus) ? menus : [];
                this.menuGlobalService.sendMenus(menus);
                setTimeout(function () {
                    var urlRouter = _this.checkingRouterChildrenFragments();
                    _this.checkActiveMenuByUrl(urlRouter);
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuBaseComponent.prototype, "maxLevel", {
            get: function () {
                return this._maxLevel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuBaseComponent.prototype, "filter", {
            get: function () {
                return this._filter;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita um campo para pesquisa no menu.
             * A pesquisa é realizada em todos os níveis do menu e busca apenas pelos itens que contém uma ação e/ou link definidos,
             * ou também, pode ser realizada através de um serviço definido na propriedade `p-service`.
             *
             * > O campo de pesquisa é desabilitado se o menu estiver colapsado.
             *
             * @default `false`
             */
            set: function (filter) {
                this._filter = filter === '' ? true : convertToBoolean(filter);
                this.filteredItems = __spreadArray([], __read(this._menus));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuBaseComponent.prototype, "service", {
            get: function () {
                return this._service;
            },
            /**
             * @optional
             *
             * @description
             *
             * Nesta propriedade deve ser informada a URL do serviço em que será utilizado para realizar o filtro de itens do
             * menu quando realizar uma busca. Caso haja a necessidade de customização, pode ser informado um
             * serviço implementando a interface `PoMenuFilter`.
             *
             * Caso utilizada uma URL, o serviço deve retornar os dados conforme o
             * [Guia de implementação de APIs](https://po-ui.io/guides/api) do PO UI.
             *
             * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando o valor digitado
             * no parâmetro `search`, veja exemplo:
             *
             * > O filtro no serviço será realizado caso contenha no mínimo três caracteres no campo de busca, por exemplo `tot`.
             *
             * ```
             * <po-menu p-service="/api/v1/fnd/menu">
             * </po-menu>
             *
             * Requisição: GET /api/v1/fnd/menu?search=contas
             * ```
             *
             * > É necessário que propriedade `p-filter` esteja habilitada.
             */
            set: function (value) {
                this._service = value || undefined;
                this.configService(this.service);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuBaseComponent.prototype, "params", {
            get: function () {
                return this._params;
            },
            /**
             * @optional
             *
             * @description
             *
             * Deve ser informado um objeto que deseja-se utilizar na requisição de filtro dos itens de menu.
             *
             * Caso utilizado um serviço customizado, implementando a interface `PoMenuFilter`, o valor desta propriedade
             * será passado como parâmetro, na função `getFilteredData`.
             *
             * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando os valores informados
             * nesta propriedade em conjunto com o parâmetro `search`, veja exemplo:
             *
             * ```
             * <po-menu p-service="/api/v1/fnd/menu" [p-params]="{ company: 1, user: 297767512 }">
             * </po-menu>
             *
             * Requisição: GET /api/v1/fnd/menu?search=contas&company=1&user=297767512
             * ```
             */
            set: function (value) {
                this._params = value && isTypeof(value, 'object') ? value : undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuBaseComponent.prototype, "logo", {
            get: function () {
                return this._logo;
            },
            /**
             * @optional
             *
             * @description
             *
             * Caminho para a logomarca, que será exibida quando o componente estiver expandido, localizada na parte superior.
             *
             * > **Importante:**
             * - Caso esta propriedade estiver indefinida ou inválida o espaço para logomarca será removido.
             * - Como boa prática, indica-se utilizar imagens com até `24px` de altura e `224px` de largura,
             * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
             */
            set: function (value) {
                this._logo = isTypeof(value, 'string') && value.trim() ? value : undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuBaseComponent.prototype, "shortLogo", {
            get: function () {
                return this._shortLogo;
            },
            /**
             * @optional
             *
             * @description
             *
             * Caminho para a logomarca, que será exibida quando o componente estiver colapsado, localizada na parte superior.
             *
             * > **Importante:**
             * - Caso esta propriedade estiver indefinida ou inválida passa a assumir o valor informado na propriedade `p-logo` e na ausência desta o
             * espaço para logomarca será removido.
             * - Como boa prática, indica-se utilizar imagens com até `48px` de altura e `48px` de largura,
             * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
             * - Caso não informar um valor, esta propriedade passa a assumir o valor informado na propriedade `p-logo`.
             */
            set: function (value) {
                this._shortLogo = isTypeof(value, 'string') && value.trim() ? value : undefined;
            },
            enumerable: false,
            configurable: true
        });
        PoMenuBaseComponent.prototype.setMenuExtraProperties = function () {
            var _this = this;
            this.allowIcons = !!this.menus.length;
            this.allowCollapseMenu = !!this.menus.length;
            this.menus.forEach(function (menuItem) {
                _this._level = 1;
                _this.allowIcons = _this.allowIcons ? validValue(menuItem.icon) : false;
                _this.allowCollapseMenu = _this.allowCollapseMenu && _this.allowIcons ? validValue(menuItem.shortLabel) : false;
                _this.removeBadgeAlert(menuItem);
                _this.setMenuItemProperties(menuItem);
                if (menuItem.subItems) {
                    _this._level++;
                    _this.processSubItems(menuItem);
                }
            });
        };
        PoMenuBaseComponent.prototype.setMenuItemProperties = function (menuItem) {
            menuItem['id'] = menuItem['id'] || uuid();
            menuItem['level'] = this._level;
            menuItem['type'] = this.setMenuType(menuItem);
        };
        PoMenuBaseComponent.prototype.validateMenus = function (menus) {
            var _this = this;
            menus.forEach(function (menu) { return _this.validateMenu(menu); });
        };
        PoMenuBaseComponent.prototype.setMenuType = function (menuItem) {
            if (menuItem.subItems && menuItem.subItems.length > 0 && this._level < this.maxLevel) {
                return 'subItems';
            }
            if (!menuItem.link) {
                return 'noLink';
            }
            if (isExternalLink(menuItem.link)) {
                return 'externalLink';
            }
            return 'internalLink';
        };
        PoMenuBaseComponent.prototype.configService = function (service) {
            if (typeof service === 'string' && service.trim()) {
                // service url
                this.menuService.configProperties(service);
                this.filterService = this.menuService;
            }
            else if (typeof service === 'object' && service.getFilteredData) {
                // custom service
                this.filterService = service;
            }
            else {
                this.filterService = undefined;
            }
        };
        PoMenuBaseComponent.prototype.processSubItems = function (menu) {
            var _this = this;
            menu.subItems.forEach(function (menuItem, index, menuItems) {
                var previousItem = menuItems[index - 1];
                if (previousItem && previousItem.subItems) {
                    _this._level = previousItem['level'];
                }
                if (_this._level <= _this.maxLevel) {
                    _this.setMenuItemProperties(menuItem);
                    if (menuItem.subItems) {
                        _this._level++;
                        _this.processSubItems(menuItem);
                    }
                }
                if (!menu['badgeAlert']) {
                    menu = _this.setMenuBadgeAlert(menu, menuItem);
                }
            });
            menu.subItems = Object.assign([], menu.subItems);
        };
        PoMenuBaseComponent.prototype.removeBadgeAlert = function (menuItem) {
            var _this = this;
            if (menuItem['badgeAlert']) {
                delete menuItem['badgeAlert'];
            }
            if (menuItem.subItems) {
                menuItem.subItems.forEach(function (subItem) { return _this.removeBadgeAlert(subItem); });
            }
        };
        PoMenuBaseComponent.prototype.setMenuBadgeAlert = function (parent, child) {
            var childHasSubItems = child.subItems && child.subItems.length;
            var childHasBadgeAlert = child['badgeAlert'];
            var childHasBadge = child.badge && convertToInt(child.badge.value) >= 0;
            parent['badgeAlert'] = childHasBadgeAlert || (childHasBadge && !childHasSubItems);
            return parent;
        };
        PoMenuBaseComponent.prototype.validateMenu = function (menuItem) {
            var _this = this;
            if (!menuItem.label || menuItem.label.trim() === '') {
                throw new Error(this.literals.emptyLabelError);
            }
            else if (menuItem.subItems) {
                menuItem.subItems.forEach(function (subItem) {
                    _this.validateMenu(subItem);
                });
            }
        };
        return PoMenuBaseComponent;
    }());
    PoMenuBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoMenuBaseComponent.ctorParameters = function () { return [
        { type: PoMenuGlobalService },
        { type: PoMenuService },
        { type: PoLanguageService }
    ]; };
    PoMenuBaseComponent.propDecorators = {
        collapsed: [{ type: i0.Input, args: ['p-collapsed',] }],
        menus: [{ type: i0.Input, args: ['p-menus',] }],
        filter: [{ type: i0.Input, args: ['p-filter',] }],
        service: [{ type: i0.Input, args: ['p-service',] }],
        params: [{ type: i0.Input, args: ['p-params',] }],
        logo: [{ type: i0.Input, args: ['p-logo',] }],
        shortLogo: [{ type: i0.Input, args: ['p-short-logo',] }]
    };

    /**
     * @usedBy PoMenuComponent
     *
     * @description
     *
     * Esta diretiva permite adicionar um conteúdo personalizado entre a logo e o campo de filtro do cabeçalho do
     * [`po-menu`](/documentation/po-menu).
     *
     * Para personalizar o conteúdo do cabeçalho deve-se utilizar a diretiva `p-menu-header-template` dentro da *tag* do
     * [`po-menu`](/documentation/po-menu). Podendo ser utilizada de duas formas:
     *
     * Com `ng-template`
     * ```
     * ...
     * <po-menu [p-menus]="menus">
     *   <ng-template p-menu-header-template>
     *     ...
     *   </ng-template>
     * </po-menu>
     * ...
     * ```
     *
     * ou com *syntax sugar*
     * ```
     * ...
     * <po-menu [p-menus]="menus">
     *   <div *p-menu-header-template>
     *     ...
     *   </div>
     * </po-menu>
     * ...
     * ```
     *
     * > Quando o menu estiver colapsado ou tela for _mobile_ o conteúdo personalizado não será exibido.
     */
    var PoMenuHeaderTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function PoMenuHeaderTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return PoMenuHeaderTemplateDirective;
    }());
    PoMenuHeaderTemplateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[p-menu-header-template]'
                },] }
    ];
    PoMenuHeaderTemplateDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço que implementa a comunicação entre os items do po-menu.
     */
    var PoMenuItemsService = /** @class */ (function () {
        function PoMenuItemsService() {
            this.subjectParent = new rxjs.Subject();
            this.subjectChild = new rxjs.Subject();
        }
        // Envia informações do click do po-menu-item para o po-menu
        PoMenuItemsService.prototype.sendToParentMenuClicked = function (menu) {
            this.subjectChild.next(menu);
        };
        // Recebe do po-menu-item sua informação de click.
        PoMenuItemsService.prototype.receiveFromChildMenuClicked = function () {
            return this.subjectChild.asObservable();
        };
        // Envia para os po-menu-item a resposta do processamento de click de um po-menu-item.
        PoMenuItemsService.prototype.sendToChildMenuClicked = function (menu) {
            this.subjectParent.next(menu);
        };
        // Recebe do po-menu as informações processadas do click de um po-menu-item.
        PoMenuItemsService.prototype.receiveFromParentMenuClicked = function () {
            return this.subjectParent.asObservable();
        };
        return PoMenuItemsService;
    }());
    PoMenuItemsService.decorators = [
        { type: i0.Injectable }
    ];

    var poMenuDebounceTime = 400;
    var poMenuMinLength = 3;
    var poMenuRootLevel = 1;
    /**
     * @docsExtends PoMenuBaseComponent
     *
     * @description
     *
     * Aparece completo em telas com largura maior que 1200px, caso contrário o menu é escondido e chamado por meio de um botão.
     *
     * O menu também pode ser colapsado. Essa opção é habilitada quando todos os itens de primeiro nível possuírem ícones e textos curtos.
     * Se colapsado, somente os itens de primeiro nível serão exibidos e, caso o item selecionado possua sub-níveis,
     * então o menu alternará novamente para o estado aberto.
     *
     * Existe a possibilidade de customizar a logomarca, que é exibida na parte superior do componente.
     *
     * E para adicionar um conteúdo personalizado entre a logomarca e o campo de filtro,
     * basta adicionar este conteúdo com a diretiva [**p-menu-header-template**](/documentation/po-menu-header-template).
     *
     * Caso utilizar o filtro de menus, é possível realizar buscas em serviço, apenas informando a URL do serviço ou a instância de
     * um serviço customizado implementando a interface `PoMenuFilter`.
     *
     * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
     *  sua aplicação:
     *
     * ````
     * import { RouterModule, Routes } from '@angular/router';
     *
     * ...
     *
     * @NgModule({
     *   imports: [
     *     RouterModule,
     *     Routes,
     *     ...
     *     PoModule,
     *     ...
     *   ],
     *   declarations: [
     *     AppComponent
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     *
     * Além disso é necessário criar um módulo configurando as rotas da aplicação.
     *
     * ```
     * import { NgModule } from '@angular/core';
     *
     * import { RouterModule, Routes } from '@angular/router';
     *
     * import { HelloWorldComponent } from './hello-world/hello-world.component';
     *
     * const routes: Routes = [
     *   {path: 'hello-world', component: HelloWorldComponent}
     * ];
     *
     * @NgModule({
     *   imports: [RouterModule.forRoot(routes, {useHash: true})],
     *   exports: [RouterModule]
     * })
     * export class AppRoutingModule {}
     * ```
     *
     * @example
     *
     * <example name="po-menu-basic" title="PO Menu Basic">
     *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.html"> </file>
     *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-menu-labs" title="PO Menu Labs">
     *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.html"> </file>
     *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-menu-human-resources" title="PO Menu - Human Resources">
     *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.html"> </file>
     *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.ts"> </file>
     *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.service.ts"> </file>
     * </example>
     */
    var PoMenuComponent = /** @class */ (function (_super) {
        __extends(PoMenuComponent, _super);
        function PoMenuComponent(changeDetector, element, renderer, router, menuItemsService, menuGlobalService, menuService, languageService) {
            var _this = _super.call(this, menuGlobalService, menuService, languageService) || this;
            _this.changeDetector = changeDetector;
            _this.element = element;
            _this.renderer = renderer;
            _this.router = router;
            _this.menuItemsService = menuItemsService;
            _this.filterLoading = false;
            _this.id = uuid();
            _this.mobileOpened = false;
            _this.noData = false;
            _this.filteringItems = false;
            _this.menuInitialized = false;
            _this.menuPrevious = null;
            return _this;
        }
        Object.defineProperty(PoMenuComponent.prototype, "isActiveItemMenuSubMenu", {
            get: function () {
                return this.activeMenuItem['level'] > this.groupedMenuItem['level'];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuComponent.prototype, "enableCollapse", {
            get: function () {
                return this.isCollapsed && !this.collapsedMobile;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuComponent.prototype, "enableCollapseButton", {
            get: function () {
                return this.allowCollapseMenu && !this.collapsed && !this.mobileOpened;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuComponent.prototype, "hasFooter", {
            get: function () {
                return this.enableCollapseButton || this.enableCollapse;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuComponent.prototype, "isCollapsed", {
            get: function () {
                return this.allowCollapseMenu && this.collapsed;
            },
            enumerable: false,
            configurable: true
        });
        PoMenuComponent.prototype.ngDoCheck = function () {
            if (this.filteringItems && this.filter) {
                return;
            }
            var menuCurrent = this.stringify(this.menus);
            if (this.menuPrevious !== menuCurrent || !this.menuInitialized) {
                this.updateMenu();
                this.validateCollapseClass();
            }
        };
        PoMenuComponent.prototype.ngOnDestroy = function () {
            this.itemSubscription.unsubscribe();
            this.routeSubscription.unsubscribe();
            if (this.resizeListener) {
                this.resizeListener();
            }
            this.menuGlobalService.sendRemovedApplicationMenu(this.id);
        };
        PoMenuComponent.prototype.ngOnInit = function () {
            this.subscribeToMenuItem();
            this.subscribeToRoute();
        };
        PoMenuComponent.prototype.ngAfterViewInit = function () {
            this.menuGlobalService.sendApplicationMenu(this);
        };
        PoMenuComponent.prototype.activateMenuByUrl = function (urlPath, menus) {
            var _this = this;
            if (menus) {
                var urlPathWithoutLastFragment_1 = urlPath.substr(0, urlPath.lastIndexOf('/'));
                return menus.some(function (menu) {
                    var formattedMenuLink = getFormattedLink(menu.link);
                    var menuLinkPath = "" + urlPathWithoutLastFragment_1 + formattedMenuLink.substr(formattedMenuLink.lastIndexOf('/'));
                    if (menuLinkPath === urlPath && menuLinkPath === formattedMenuLink) {
                        _this.linkActive = formattedMenuLink;
                        _this.activateMenuItem(menu);
                        return true;
                    }
                    else {
                        return _this.activateMenuByUrl(urlPath, menu.subItems);
                    }
                });
            }
        };
        PoMenuComponent.prototype.checkActiveMenuByUrl = function (urlPath) {
            if (!this.linkActive || this.linkActive !== urlPath) {
                this.activateMenuByUrl(urlPath, this.menus);
            }
        };
        /**
         * <a id="colapseMethod"></a>
         *
         * *Método para colapsar (retrair) o menu.
         */
        PoMenuComponent.prototype.collapse = function () {
            this.validateToggleMenu(true);
        };
        PoMenuComponent.prototype.debounceFilter = function (filter) {
            var _this = this;
            clearTimeout(this.timeoutFilter);
            this.timeoutFilter = setTimeout(function () {
                _this.filterProcess(filter);
            }, poMenuDebounceTime);
        };
        /**
         * <a id="expandMethod"></a>
         *
         * *Método para expandir (aumentar) o menu.
         */
        PoMenuComponent.prototype.expand = function () {
            this.validateToggleMenu(false);
        };
        PoMenuComponent.prototype.subscribeToMenuItem = function () {
            var _this = this;
            this.itemSubscription = this.menuItemsService.receiveFromChildMenuClicked().subscribe(function (menu) {
                _this.clickMenuItem(menu);
            });
        };
        PoMenuComponent.prototype.subscribeToRoute = function () {
            var _this = this;
            this.routeSubscription = this.router.events.subscribe(function (val) {
                if (val instanceof router.NavigationEnd || val instanceof router.NavigationCancel) {
                    var urlRouter = _this.checkingRouterChildrenFragments();
                    _this.checkActiveMenuByUrl(urlRouter);
                }
            });
        };
        /**
         * <a id="toggleMethod"></a>
         * *Método que colapsa e expande o menu alternadamente.
         *
         * > *Os métodos apenas vão colapsar/expandir o menu se:
         *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
         */
        PoMenuComponent.prototype.toggle = function () {
            this.validateToggleMenu(!this.collapsed);
        };
        PoMenuComponent.prototype.toggleMenuMobile = function () {
            this.mobileOpened = !this.mobileOpened;
            this.collapsedMobile = this.collapsed && this.mobileOpened;
            this.validateCollapseClass(this.collapsedMobile);
            if (isMobile()) {
                return;
            }
            if (this.mobileOpened) {
                this.createResizeListener();
            }
        };
        PoMenuComponent.prototype.checkingRouterChildrenFragments = function () {
            var childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
            return childrenPrimary ? "/" + childrenPrimary.segments.map(function (it) { return it.path; }).join('/') : '';
        };
        PoMenuComponent.prototype.validateCollapseClass = function (collapsedMobile) {
            if (collapsedMobile === void 0) { collapsedMobile = false; }
            var wrapper = this.element.nativeElement.parentNode;
            this.renderer[this.isCollapsed && !collapsedMobile ? 'addClass' : 'removeClass'](wrapper, 'po-collapsed-menu');
        };
        PoMenuComponent.prototype.activateCollapseSubMenuItem = function () {
            this.clearGroupMenuIfFirstLevel(this.activeMenuItem);
            if (!this.collapsed && this.activeMenuItem['level'] > poMenuRootLevel && this.isActiveItemMenuSubMenu) {
                this.openParentMenu(this.activeMenuItem);
            }
        };
        PoMenuComponent.prototype.activateMenuItem = function (menu) {
            this.activeMenuItem = menu;
            this.linkActive = menu.link;
            if (this.activeMenuItem['level'] > poMenuRootLevel) {
                this.openParentMenu(this.activeMenuItem);
            }
            else {
                this.groupedMenuItem = null;
            }
            this.menuItemsService.sendToChildMenuClicked({
                active: this.activeMenuItem,
                grouped: this.groupedMenuItem,
                activatedByRoute: true
            });
        };
        PoMenuComponent.prototype.areSubMenus = function (menus) {
            return menus.every(function (menu) { return menu['level'] > poMenuRootLevel; });
        };
        PoMenuComponent.prototype.clearGroupMenuIfFirstLevel = function (activeMenuItem) {
            if (activeMenuItem['level'] === poMenuRootLevel) {
                this.groupedMenuItem = undefined;
            }
        };
        PoMenuComponent.prototype.clickMenuItem = function (menu) {
            if (menu.action) {
                this.executeMenuAction(menu);
            }
            if (menu['type'] === 'externalLink') {
                openExternalLink(menu.link);
            }
            else if (menu['type'] === 'internalLink') {
                this.activateMenuItem(menu);
            }
            else if (menu['type'] === 'subItems') {
                if (this.filteringItems) {
                    this.filteringItems = false;
                }
                this.groupMenuItem(menu);
            }
            if (menu['type'] !== 'subItems') {
                this.mobileOpened = false;
            }
        };
        PoMenuComponent.prototype.convertToMenuItemFiltered = function (menuItem) {
            if (menuItem === void 0) { menuItem = { label: '', link: '' }; }
            var label = menuItem.label, link = menuItem.link;
            var menuItemFiltered = { label: label, link: link };
            this.setMenuItemProperties(menuItemFiltered);
            return menuItemFiltered;
        };
        PoMenuComponent.prototype.createResizeListener = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function () {
                _this.toggleResize();
                _this.resizeListener();
            });
        };
        PoMenuComponent.prototype.executeMenuAction = function (menu) {
            menu.action(menu);
        };
        PoMenuComponent.prototype.filterItems = function (filter) {
            return __awaiter(this, void 0, void 0, function () {
                var trimFilter, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            trimFilter = filter && filter.trim();
                            if (!trimFilter) return [3 /*break*/, 4];
                            this.filteredItems = [];
                            _b = this;
                            if (!this.filterService) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.filterOnService(trimFilter)];
                        case 1:
                            _c = _d.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            _c = this.filterLocalItems(trimFilter);
                            _d.label = 3;
                        case 3:
                            _b.filteredItems = _c;
                            this.filteringItems = true;
                            return [3 /*break*/, 5];
                        case 4:
                            this.filteredItems = __spreadArray([], __read(this.menus));
                            this.filteringItems = false;
                            _d.label = 5;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        PoMenuComponent.prototype.filterLocalItems = function (filter) {
            var filteredItems = [];
            this.findItems(this.menus, filter.toLowerCase(), filteredItems);
            return filteredItems;
        };
        PoMenuComponent.prototype.filterProcess = function (filter) {
            var _this = this;
            this.filterLoading = true;
            this.filterItems(filter)
                .then(function () {
                _this.filterLoading = false;
                _this.showNoData();
                _this.changeDetector.detectChanges();
                _this.menuItemsService.sendToChildMenuClicked({ active: _this.activeMenuItem, grouped: _this.groupedMenuItem });
            })
                .catch(function (error) {
                _this.filterLoading = false;
                Promise.reject(error);
            });
        };
        PoMenuComponent.prototype.filterOnService = function (search) {
            if (search === void 0) { search = ''; }
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(search.length >= poMenuMinLength)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.filterService
                                    .getFilteredData(search, this.params)
                                    .pipe(operators.map(function (menuItemsFiltered) { return menuItemsFiltered.map(function (menuItem) { return _this.convertToMenuItemFiltered(menuItem); }); }))
                                    .toPromise()];
                        case 1: return [2 /*return*/, _b.sent()];
                        case 2: return [2 /*return*/, this.filteredItems];
                    }
                });
            });
        };
        PoMenuComponent.prototype.findItems = function (menus, filter, filteredItems) {
            var _this = this;
            menus.forEach(function (menu) {
                var _a;
                var hasAction = menu.action || menu.link;
                var labelHasFilter = menu.label.toLowerCase().includes(filter);
                if (labelHasFilter && hasAction) {
                    var newMenu = Object.assign({}, menu);
                    if ((_a = newMenu.subItems) === null || _a === void 0 ? void 0 : _a.length) {
                        delete newMenu.subItems;
                        newMenu['type'] = _this.setMenuType(newMenu);
                    }
                    filteredItems.push(newMenu);
                }
                if (menu.subItems) {
                    _this.findItems(menu.subItems, filter, filteredItems);
                }
            });
        };
        PoMenuComponent.prototype.findParent = function (menus, menuItem) {
            var getParent = function (menuItems, id) {
                if (menuItems) {
                    for (var index = 0; index < menuItems.length; index++) {
                        var menu = menuItems[index];
                        if (menu.subItems && menu.subItems.find(function (subItem) { return subItem['id'] === id; })) {
                            return menu;
                        }
                        var found = getParent(menu.subItems, id);
                        if (found) {
                            return found;
                        }
                    }
                }
            };
            return getParent(menus, menuItem['id']);
        };
        PoMenuComponent.prototype.findRootParent = function (menus, menu) {
            var findParent = this.findParent;
            var getRootParent = function (menuItems, menuItem) {
                var parent = findParent(menuItems, menuItem);
                if (parent['level'] !== poMenuRootLevel) {
                    parent = getRootParent(menuItems, parent);
                }
                return parent;
            };
            return getRootParent(menus, menu);
        };
        PoMenuComponent.prototype.getActiveMenuParent = function (menus, activeMenuItem, groupedMenuItem) {
            if (this.areSubMenus([groupedMenuItem, activeMenuItem])) {
                return this.findRootParent(menus, activeMenuItem);
            }
        };
        PoMenuComponent.prototype.groupMenuItem = function (menu) {
            if (this.collapsed) {
                this.toggleMenuCollapse();
            }
            menu['isOpened'] = !menu['isOpened'];
            this.groupedMenuItem = menu;
            if (this.activeMenuItem &&
                menu['isOpened'] &&
                this.isActiveItemMenuSubMenu &&
                this.isRootMenuEqualGroupedMenu(this.menus, this.activeMenuItem, menu)) {
                this.activateMenuItem(this.activeMenuItem);
            }
            this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
        };
        PoMenuComponent.prototype.isRootMenuEqualGroupedMenu = function (menus, activeMenuItem, groupedMenuItem) {
            var activeMenuRootParent = this.findRootParent(menus, activeMenuItem);
            return activeMenuRootParent['id'] === groupedMenuItem['id'];
        };
        PoMenuComponent.prototype.openParentMenu = function (childMenu) {
            var parent = this.findParent(this.menus, childMenu);
            parent['isOpened'] = true;
            this.groupedMenuItem = parent;
        };
        PoMenuComponent.prototype.showNoData = function () {
            this.noData = this.filteredItems.length === 0;
        };
        PoMenuComponent.prototype.stringify = function (menus) {
            // não faz o stringify da propriedade icon, pois pode conter objeto complexo e disparar um erro.
            return JSON.stringify(this.menus, function (key, value) {
                if (key !== 'icon') {
                    return value;
                }
            });
        };
        PoMenuComponent.prototype.toggleGroupedMenuItem = function () {
            this.groupedMenuItem['isOpened'] = !this.collapsed && this.allowCollapseMenu;
        };
        PoMenuComponent.prototype.toggleMenuCollapse = function (collapsed) {
            if (collapsed === void 0) { collapsed = false; }
            this.collapsed = collapsed;
            if (this.groupedMenuItem && this.activeMenuItem) {
                this.groupedMenuItem =
                    this.getActiveMenuParent(this.menus, this.activeMenuItem, this.groupedMenuItem) || this.groupedMenuItem;
                this.toggleGroupedMenuItem();
            }
            if (this.activeMenuItem) {
                this.activateCollapseSubMenuItem();
                this.menuItemsService.sendToChildMenuClicked({
                    active: this.activeMenuItem,
                    grouped: this.groupedMenuItem,
                    activatedByRoute: true
                });
            }
            this.updateMenu();
        };
        PoMenuComponent.prototype.toggleResize = function () {
            if (this.mobileOpened) {
                this.mobileOpened = false;
                this.collapsedMobile = false;
                this.validateCollapseClass(this.collapsedMobile);
            }
        };
        PoMenuComponent.prototype.validateToggleMenu = function (collapsed) {
            if (!this.allowCollapseMenu) {
                return;
            }
            this.toggleMenuCollapse(collapsed);
        };
        PoMenuComponent.prototype.updateMenu = function () {
            this.menuInitialized = true;
            this.setMenuExtraProperties();
            this.filteredItems = __spreadArray([], __read(this.menus));
            this.menuPrevious = this.stringify(this.menus);
            this.validateMenus(this.menus);
        };
        return PoMenuComponent;
    }(PoMenuBaseComponent));
    PoMenuComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-menu',
                    template: "<div *ngIf=\"mobileOpened\" class=\"po-menu-overlay\" (click)=\"toggleMenuMobile()\"></div>\r\n<div class=\"po-menu-mobile po-clickable\" (click)=\"toggleMenuMobile()\">\r\n  <span class=\"po-icon po-icon-menu\"></span>\r\n</div>\r\n\r\n<div class=\"po-menu\" [ngClass]=\"{ 'po-menu-animation': mobileOpened }\">\r\n  <div class=\"po-menu-header\">\r\n    <div *ngIf=\"logo || (shortLogo && enableCollapse)\" class=\"po-menu-header-container-logo\">\r\n      <a href=\"./\">\r\n        <img\r\n          [ngClass]=\"enableCollapse ? 'po-menu-short-logo' : 'po-menu-logo'\"\r\n          [src]=\"enableCollapse ? shortLogo || logo : logo\"\r\n        />\r\n      </a>\r\n    </div>\r\n\r\n    <div *ngIf=\"!enableCollapse && menuHeaderTemplate\" class=\"po-menu-header-template\">\r\n      <ng-container *ngTemplateOutlet=\"menuHeaderTemplate.templateRef\"></ng-container>\r\n    </div>\r\n\r\n    <po-menu-filter *ngIf=\"filter && !enableCollapse\" [p-loading]=\"filterLoading\" (p-filter)=\"debounceFilter($event)\">\r\n    </po-menu-filter>\r\n  </div>\r\n\r\n  <nav class=\"po-menu-body\">\r\n    <!-- Inner e outer para esconder scroll -->\r\n    <div class=\"po-menu-outer\">\r\n      <div class=\"po-menu-inner\">\r\n        <div *ngIf=\"noData\" class=\"po-menu-item-wrapper\">\r\n          <div class=\"po-menu-item-first\">\r\n            <div class=\"po-menu-icon-container po-menu-item-no-data\">\r\n              <po-icon class=\"po-icon po-icon-info po-menu-icon-item po-lg-2\"></po-icon>\r\n              <div class=\"po-lg-10 po-menu-icon-label\">{{ literals.itemNotFound }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div *ngFor=\"let menu of filteredItems; let menuIndex = index\" class=\"po-menu-item-wrapper\">\r\n          <po-menu-item\r\n            [class.po-menu-item-first]=\"menuIndex === 0\"\r\n            [p-action]=\"menu.action\"\r\n            [p-badge-alert]=\"menu.badgeAlert\"\r\n            [p-badge-color]=\"menu.badge ? menu.badge.color : undefined\"\r\n            [p-badge-value]=\"menu.badge ? menu.badge.value : undefined\"\r\n            [p-collapsed-menu]=\"enableCollapse\"\r\n            [p-icon]=\"allowIcons ? menu.icon : null\"\r\n            [p-id]=\"menu.id\"\r\n            [p-label]=\"menu.label\"\r\n            [p-level]=\"menu.level\"\r\n            [p-link]=\"menu.link\"\r\n            [p-short-label]=\"menu.shortLabel\"\r\n            [p-sub-items]=\"menu.subItems\"\r\n            [p-type]=\"menu.type\"\r\n          >\r\n          </po-menu-item>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n\r\n  <div *ngIf=\"hasFooter\" class=\"po-menu-footer\">\r\n    <a class=\"po-menu-collapse-button-icon po-clickable\" (click)=\"toggle()\">\r\n      <span\r\n        class=\"po-icon\"\r\n        [class.po-icon-menu-close]=\"enableCollapseButton\"\r\n        [class.po-icon-menu-open]=\"enableCollapse\"\r\n      >\r\n      </span>\r\n    </a>\r\n  </div>\r\n</div>\r\n",
                    providers: [PoMenuItemsService, PoMenuService]
                },] }
    ];
    PoMenuComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: router.Router },
        { type: PoMenuItemsService },
        { type: PoMenuGlobalService },
        { type: PoMenuService },
        { type: PoLanguageService }
    ]; };
    PoMenuComponent.propDecorators = {
        menuHeaderTemplate: [{ type: i0.ContentChild, args: [PoMenuHeaderTemplateDirective, { static: true },] }]
    };

    var poMenuFilterLiteralsDefault = {
        en: { search: 'Search' },
        es: { search: 'Buscar' },
        pt: { search: 'Pesquisar' },
        ru: { search: 'Поиск' }
    };
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que apresenta o campo de pesquisa no po-menu.
     */
    var PoMenuFilterComponent = /** @class */ (function () {
        function PoMenuFilterComponent(languageService) {
            this.languageService = languageService;
            this.filter = new i0.EventEmitter();
            this.literals = Object.assign(Object.assign({}, poMenuFilterLiteralsDefault[this.languageService.getLanguageDefault()]), poMenuFilterLiteralsDefault[this.languageService.getShortLanguage()]);
        }
        PoMenuFilterComponent.prototype.filterItems = function (search) {
            this.filter.emit(search);
        };
        return PoMenuFilterComponent;
    }());
    PoMenuFilterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-menu-filter',
                    template: "<div class=\"po-menu-filter-container\">\r\n  <input\r\n    #inputFilter\r\n    type=\"text\"\r\n    class=\"po-menu-filter\"\r\n    [placeholder]=\"literals.search\"\r\n    (keyup)=\"filterItems(inputFilter.value)\"\r\n  />\r\n\r\n  <div class=\"po-menu-filter-search-icon-container\">\r\n    <span *ngIf=\"!loading\" class=\"po-icon po-menu-filter-icon po-icon-search\"></span>\r\n    <po-loading-icon *ngIf=\"loading\"></po-loading-icon>\r\n  </div>\r\n  <div class=\"po-menu-filter-close-icon-container\">\r\n    <po-clean [p-element-ref]=\"inputFilterElement\" (p-change-event)=\"filterItems(inputFilter.value)\"></po-clean>\r\n  </div>\r\n</div>\r\n"
                },] }
    ];
    PoMenuFilterComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoMenuFilterComponent.propDecorators = {
        loading: [{ type: i0.Input, args: ['p-loading',] }],
        inputFilterElement: [{ type: i0.ViewChild, args: ['inputFilter', { read: i0.ElementRef, static: true },] }],
        filter: [{ type: i0.Output, args: ['p-filter',] }]
    };

    // valor para que caibam 3 linhas de `label`
    var poMenuItemSubItemSize = 98;
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que implementa cada item do po-menu.
     */
    var PoMenuItemComponent = /** @class */ (function () {
        function PoMenuItemComponent(menuItemsService) {
            this.menuItemsService = menuItemsService;
            this.maxHeight = 0;
            this._isSelected = false;
            this._isSubItem = false;
        }
        Object.defineProperty(PoMenuItemComponent.prototype, "badgeValue", {
            get: function () {
                return this._badgeValue;
            },
            // Valor do badge.
            set: function (badgeValue) {
                this._badgeValue = convertToInt(badgeValue);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuItemComponent.prototype, "isSelected", {
            get: function () {
                return this._isSelected;
            },
            // Indica se o item está selecionado.
            set: function (value) {
                this._isSelected = convertToBoolean(value);
                this.isSelectedSubItem = this.isSelected && this.isSubItem;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuItemComponent.prototype, "isSubItem", {
            get: function () {
                return this._isSubItem;
            },
            // Indica se o item é um sub item
            set: function (value) {
                this._isSubItem = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuItemComponent.prototype, "subItems", {
            get: function () {
                return this._subItems;
            },
            // Lista de sub-items.
            set: function (subitems) {
                this._subItems = subitems;
                if (this.isOpened) {
                    this.calcMenuSubItemsMaxHeight();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuItemComponent.prototype, "canShowBadge", {
            get: function () {
                return this.type !== 'subItems' && (this.badgeValue || this.badgeValue === 0) && this.badgeValue >= 0;
            },
            enumerable: false,
            configurable: true
        });
        PoMenuItemComponent.prototype.ngOnDestroy = function () {
            this.itemSubscription.unsubscribe();
        };
        PoMenuItemComponent.prototype.ngOnInit = function () {
            var _this = this;
            // subscribe to menu component messages
            this.itemSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(function (menu) {
                _this.processMenuItem(menu);
            });
        };
        PoMenuItemComponent.prototype.clickMenuItem = function (event) {
            if (!(event.ctrlKey || event.metaKey)) {
                event.preventDefault();
                // Emmit to parent
                this.menuItemsService.sendToParentMenuClicked({
                    link: this.link,
                    action: this.action,
                    id: this.id,
                    icon: this.icon,
                    label: this.label,
                    level: this.level,
                    subItems: this.subItems,
                    isSelected: this.isSelected,
                    isOpened: this.isOpened,
                    shortLabel: this.shortLabel,
                    type: this.type
                });
            }
        };
        PoMenuItemComponent.prototype.accordionAnimation = function (menuActive, menuOpened, hasSubItemOpened, activatedByRoute) {
            if (this.id === menuOpened['id']) {
                this.maxHeight = this.subItems.length * poMenuItemSubItemSize;
            }
            if (hasSubItemOpened) {
                this.maxHeight = menuOpened['isOpened']
                    ? this.maxHeight + menuOpened.subItems.length * poMenuItemSubItemSize
                    : this.maxHeight - menuOpened.subItems.length * poMenuItemSubItemSize;
                if (activatedByRoute) {
                    this.maxHeight = this.getMinimumHeight(0, this, menuActive);
                }
            }
        };
        PoMenuItemComponent.prototype.activateMenu = function (menu) {
            this.isSelected = menu && this.id === menu.id;
        };
        PoMenuItemComponent.prototype.calcMenuSubItemsMaxHeight = function () {
            var _this = this;
            setTimeout(function () {
                var subItems = Array.from(_this.menuSubItems.nativeElement.querySelectorAll('.po-menu-item'));
                subItems.forEach(function (menuItem) { return (_this.maxHeight += menuItem.offsetHeight); });
            });
        };
        PoMenuItemComponent.prototype.getMinimumHeight = function (minimumHeight, menuItem, menuActive) {
            minimumHeight += poMenuItemSubItemSize;
            if (menuItem.subItems && this.hasSubItem(menuItem.subItems, menuActive['id'])) {
                for (var index = 0; index < menuItem.subItems.length; index++) {
                    minimumHeight = this.getMinimumHeight(minimumHeight, menuItem.subItems[index], menuActive);
                }
            }
            return minimumHeight;
        };
        PoMenuItemComponent.prototype.groupedMenu = function (menuActive, menuOpened, activatedByRoute) {
            if (activatedByRoute === void 0) { activatedByRoute = false; }
            var hasSubItemOpened = menuOpened && this.id !== menuOpened['id'] ? this.hasSubItem(this.subItems, menuOpened['id']) : false;
            this.isOpened = this.isMenuOpened(menuOpened, hasSubItemOpened);
            this.isSelected = menuActive && !this.isOpened ? this.hasSubItem(this.subItems, menuActive['id']) : false;
            if (!this.isOpened) {
                this.maxHeight = 0;
                return;
            }
            this.accordionAnimation(menuActive, menuOpened, hasSubItemOpened, activatedByRoute);
        };
        PoMenuItemComponent.prototype.hasSubItem = function (subItems, id) {
            var _this = this;
            if (subItems) {
                return subItems.some(function (item) { return (item['id'] === id ? true : _this.hasSubItem(item.subItems, id)); });
            }
        };
        PoMenuItemComponent.prototype.isMenuOpened = function (menuOpened, hasSubItemOpened) {
            if (menuOpened) {
                return this.id === menuOpened['id'] ? menuOpened['isOpened'] : hasSubItemOpened;
            }
            return false;
        };
        PoMenuItemComponent.prototype.processMenuItem = function (menu) {
            if (this.type === 'internalLink') {
                this.activateMenu(menu.active);
                return;
            }
            if (this.type === 'subItems') {
                this.groupedMenu(menu.active, menu.grouped, menu.activatedByRoute);
            }
        };
        return PoMenuItemComponent;
    }());
    PoMenuItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-menu-item',
                    template: "<!-- menu com link interno -->\r\n<a *ngIf=\"type === 'internalLink'\" class=\"po-menu-item-link\" [routerLink]=\"link\">\r\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\r\n</a>\r\n<!-- menu com link externo -->\r\n<a *ngIf=\"type === 'externalLink'\" class=\"po-menu-item-link\" [href]=\"link\">\r\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\r\n</a>\r\n<!-- menu sem link -->\r\n<a *ngIf=\"type === 'noLink'\" class=\"po-menu-item-link\" href=\"javascript:;\">\r\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\r\n</a>\r\n<!-- menu com sub itens -->\r\n<div *ngIf=\"type === 'subItems'\" class=\"po-menu-item-link po-clickable\">\r\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\r\n  <div #menuSubItems class=\"po-menu-sub-items\" [hidden]=\"collapsedMenu\" [style.maxHeight.px]=\"maxHeight\">\r\n    <div *ngFor=\"let subItem of subItems\">\r\n      <po-menu-item\r\n        p-is-sub-item\r\n        [p-action]=\"subItem.action\"\r\n        [p-badge-alert]=\"subItem.badgeAlert\"\r\n        [p-badge-color]=\"subItem.badge ? subItem.badge.color : undefined\"\r\n        [p-badge-value]=\"subItem.badge ? subItem.badge.value : undefined\"\r\n        [p-id]=\"subItem.id\"\r\n        [p-label]=\"subItem.label\"\r\n        [p-level]=\"subItem.level\"\r\n        [p-link]=\"subItem.link\"\r\n        [p-sub-items]=\"subItem.subItems\"\r\n        [p-type]=\"subItem.type\"\r\n      >\r\n      </po-menu-item>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #menuItemTemplate>\r\n  <div\r\n    class=\"po-menu-item\"\r\n    [class.po-menu-icon-container]=\"level === 1 && icon\"\r\n    [class.po-menu-item-selected]=\"isSelected\"\r\n    [class.po-menu-item-level-two]=\"level === 2\"\r\n    [class.po-menu-item-level-three]=\"level === 3\"\r\n    [class.po-menu-item-level-four]=\"level === 4\"\r\n    [class.po-menu-item-grouper-up]=\"type === 'subItems' && isOpened\"\r\n    [class.po-menu-item-grouper-down]=\"type === 'subItems' && !isOpened\"\r\n    [class.po-menu-sub-item-selected]=\"isSelectedSubItem\"\r\n    (click)=\"clickMenuItem($event)\"\r\n  >\r\n    <po-badge\r\n      *ngIf=\"canShowBadge\"\r\n      [ngClass]=\"!collapsedMenu ? 'po-menu-badge-align' : 'po-menu-badge-align-collapsed'\"\r\n      [p-color]=\"badgeColor\"\r\n      [p-value]=\"badgeValue\"\r\n    >\r\n    </po-badge>\r\n    <po-icon *ngIf=\"level === 1 && icon\" class=\"po-menu-icon-item\" [p-icon]=\"icon\"></po-icon>\r\n    <div\r\n      *ngIf=\"badgeAlert\"\r\n      class=\"po-color-07\"\r\n      [ngClass]=\"!collapsedMenu ? 'po-menu-badge-alert' : 'po-menu-badge-alert-collapsed'\"\r\n    ></div>\r\n    <span\r\n      *ngIf=\"type === 'subItems' && !collapsedMenu\"\r\n      class=\"po-icon po-menu-group-icon\"\r\n      [class.po-icon-arrow-up]=\"isOpened\"\r\n      [class.po-icon-arrow-down]=\"!isOpened\"\r\n    >\r\n    </span>\r\n    <div [class.po-menu-icon-label]=\"level === 1 && icon\">\r\n      {{ label }}\r\n    </div>\r\n    <div *ngIf=\"collapsedMenu\" class=\"po-menu-short-label\">{{ shortLabel }}</div>\r\n  </div>\r\n</ng-template>\r\n"
                },] }
    ];
    PoMenuItemComponent.ctorParameters = function () { return [
        { type: PoMenuItemsService }
    ]; };
    PoMenuItemComponent.propDecorators = {
        action: [{ type: i0.Input, args: ['p-action',] }],
        badgeAlert: [{ type: i0.Input, args: ['p-badge-alert',] }],
        badgeColor: [{ type: i0.Input, args: ['p-badge-color',] }],
        collapsedMenu: [{ type: i0.Input, args: ['p-collapsed-menu',] }],
        icon: [{ type: i0.Input, args: ['p-icon',] }],
        id: [{ type: i0.Input, args: ['p-id',] }],
        isOpened: [{ type: i0.Input, args: ['p-is-opened',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        level: [{ type: i0.Input, args: ['p-level',] }],
        link: [{ type: i0.Input, args: ['p-link',] }],
        shortLabel: [{ type: i0.Input, args: ['p-short-label',] }],
        type: [{ type: i0.Input, args: ['p-type',] }],
        menuSubItems: [{ type: i0.ViewChild, args: ['menuSubItems',] }],
        badgeValue: [{ type: i0.Input, args: ['p-badge-value',] }],
        isSelected: [{ type: i0.Input, args: ['p-is-selected',] }],
        isSubItem: [{ type: i0.Input, args: ['p-is-sub-item',] }],
        subItems: [{ type: i0.Input, args: ['p-sub-items',] }]
    };

    /**
     * @description
     *
     * Módulo do componente po-menu.
     */
    var PoMenuModule = /** @class */ (function () {
        function PoMenuModule() {
        }
        return PoMenuModule;
    }());
    PoMenuModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, router.RouterModule, PoBadgeModule, PoFieldModule, PoLoadingModule, PoIconModule],
                    declarations: [PoMenuComponent, PoMenuFilterComponent, PoMenuHeaderTemplateDirective, PoMenuItemComponent],
                    exports: [PoMenuComponent, PoMenuHeaderTemplateDirective]
                },] }
    ];

    var poDefaultLogo = 'https://po-ui.io/assets/po-logos/po_black.svg';
    /**
     * @description
     *
     * Este é um componente de menu lateral composto apenas por ícones e com um nível, utilizado para navegação
     * em páginas internas, externas da aplicação ou aciona uma ação.
     *
     * O componente `po-menu-panel` recebe uma lista de objetos do tipo `MenuPanelItem` com as informações dos
     * itens de menu como textos, links para redirecionamento, ações e ícones.
     */
    var PoMenuPanelBaseComponent = /** @class */ (function () {
        function PoMenuPanelBaseComponent() {
            this._logo = poDefaultLogo;
        }
        Object.defineProperty(PoMenuPanelBaseComponent.prototype, "menus", {
            get: function () {
                return this._menus;
            },
            /** Lista dos itens do `po-menu-panel`. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
            set: function (menus) {
                this._menus = Array.isArray(menus) ? menus : [];
                this.setMenuExtraProperties(this._menus);
                this.validateMenus(this._menus);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoMenuPanelBaseComponent.prototype, "logo", {
            get: function () {
                return this._logo;
            },
            /**
             * @optional
             *
             * @description
             *
             * Caminho para a logomarca localizada na parte superior do menu.
             *
             * > Caso seja indefinida será aplicada a imagem default do PO UI.
             */
            set: function (src) {
                this._logo = src !== null && src !== void 0 ? src : poDefaultLogo;
            },
            enumerable: false,
            configurable: true
        });
        PoMenuPanelBaseComponent.prototype.setMenuExtraProperties = function (menus) {
            var _this = this;
            menus.forEach(function (menuItem) { return _this.setMenuItemProperties(menuItem); });
        };
        PoMenuPanelBaseComponent.prototype.setMenuItemProperties = function (menuItem) {
            menuItem.id = menuItem.id || uuid();
            menuItem.type = this.setMenuType(menuItem);
        };
        PoMenuPanelBaseComponent.prototype.setMenuType = function (menuItem) {
            if (!menuItem.link) {
                return 'noLink';
            }
            if (isExternalLink(menuItem.link)) {
                return 'externalLink';
            }
            return 'internalLink';
        };
        PoMenuPanelBaseComponent.prototype.validateMenu = function (menuItem) {
            if (!menuItem.label) {
                throw new Error('O atributo PoMenuPanelItem.label não pode ser vazio.');
            }
            if (!menuItem.icon) {
                throw new Error('O atributo PoMenuPanelItem.icon não pode ser vazio.');
            }
        };
        PoMenuPanelBaseComponent.prototype.validateMenus = function (menus) {
            var _this = this;
            menus.forEach(function (menu) { return _this.validateMenu(menu); });
        };
        return PoMenuPanelBaseComponent;
    }());
    PoMenuPanelBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoMenuPanelBaseComponent.propDecorators = {
        menus: [{ type: i0.Input, args: ['p-menus',] }],
        logo: [{ type: i0.Input, args: ['p-logo',] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço que implementa a comunicação entre os items do po-menu-panel.
     */
    var PoMenuPanelItemsService = /** @class */ (function () {
        function PoMenuPanelItemsService() {
            this.subjectChild = new rxjs.Subject();
            this.subjectParent = new rxjs.Subject();
        }
        // Recebe do po-menu-panel-item sua informação de click.
        PoMenuPanelItemsService.prototype.receiveFromChildMenuClicked = function () {
            return this.subjectChild.asObservable();
        };
        // Recebe do po-menu-panel as informações processadas do click de um po-menu-panel-item.
        PoMenuPanelItemsService.prototype.receiveFromParentMenuClicked = function () {
            return this.subjectParent.asObservable();
        };
        // Envia informações do click do po-menu-panel-item para o po-menu
        PoMenuPanelItemsService.prototype.sendToParentMenuClicked = function (menu) {
            this.subjectChild.next(menu);
        };
        // Envia para os po-menu-panel-item a resposta do processamento de click de um po-menu-panel-item.
        PoMenuPanelItemsService.prototype.sendToChildMenuClicked = function (menu) {
            this.subjectParent.next(menu);
        };
        return PoMenuPanelItemsService;
    }());
    PoMenuPanelItemsService.decorators = [
        { type: i0.Injectable }
    ];

    /**
     * @docsExtends PoMenuPanelBaseComponent
     *
     * @description
     *
     * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
     *  sua aplicação:
     *
     * ````
     * import { RouterModule, Routes } from '@angular/router';
     *
     * ...
     *
     * @NgModule({
     *   imports: [
     *     RouterModule,
     *     Routes,
     *     ...
     *     PoModule,
     *     ...
     *   ],
     *   declarations: [
     *     AppComponent
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     *
     * Além disso é necessário criar um módulo configurando as rotas da aplicação.
     *
     * ```
     * import { NgModule } from '@angular/core';
     *
     * import { RouterModule, Routes } from '@angular/router';
     *
     * import { HelloWorldComponent } from './hello-world/hello-world.component';
     *
     * const routes: Routes = [
     *   {path: 'hello-world', component: HelloWorldComponent}
     * ];
     *
     * @NgModule({
     *   imports: [RouterModule.forRoot(routes, {useHash: true})],
     *   exports: [RouterModule]
     * })
     * export class AppRoutingModule {}
     * ```
     *
     * @example
     *
     * <example name="po-menu-panel-basic" title="PO Menu Panel Basic">
     *   <file name="sample-po-menu-panel-basic/sample-po-menu-panel-basic.component.html"> </file>
     *   <file name="sample-po-menu-panel-basic/sample-po-menu-panel-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-menu-panel-labs" title="PO Menu Panel Labs">
     *   <file name="sample-po-menu-panel-labs/sample-po-menu-panel-labs.component.html"> </file>
     *   <file name="sample-po-menu-panel-labs/sample-po-menu-panel-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-menu-panel-customer" title="PO Menu Panel - Customers">
     *   <file name="sample-po-menu-panel-customer/sample-po-menu-panel-customer.component.html"> </file>
     *   <file name="sample-po-menu-panel-customer/sample-po-menu-panel-customer.component.ts"> </file>
     * </example>
     */
    var PoMenuPanelComponent = /** @class */ (function (_super) {
        __extends(PoMenuPanelComponent, _super);
        function PoMenuPanelComponent(viewRef, location, menuItemsService, router) {
            var _this = _super.call(this) || this;
            _this.location = location;
            _this.menuItemsService = menuItemsService;
            _this.router = router;
            return _this;
        }
        PoMenuPanelComponent.prototype.ngOnDestroy = function () {
            this.itemSubscription.unsubscribe();
            this.routeSubscription.unsubscribe();
        };
        PoMenuPanelComponent.prototype.ngOnInit = function () {
            this.subscribeToMenuItem();
            this.subscribeToRoute();
        };
        PoMenuPanelComponent.prototype.activateMenuByUrl = function (urlPath, menus) {
            var _this = this;
            if (menus) {
                return menus.some(function (menu) {
                    if (getFormattedLink(menu.link) === urlPath) {
                        _this.activateMenuItem(menu);
                        return true;
                    }
                });
            }
        };
        PoMenuPanelComponent.prototype.activateMenuItem = function (menu) {
            this.activeMenuItem = menu;
            this.linkActive = getFormattedLink(menu.link);
            this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, activatedByRoute: true });
        };
        PoMenuPanelComponent.prototype.checkActiveMenuByUrl = function (urlPath) {
            if (!this.linkActive || this.linkActive !== urlPath) {
                this.activateMenuByUrl(urlPath, this.menus);
            }
        };
        PoMenuPanelComponent.prototype.clickMenuItem = function (menu) {
            if (menu.action) {
                menu.action(menu);
            }
            if (menu.type === 'externalLink') {
                openExternalLink(menu.link);
            }
            else if (menu.type === 'internalLink') {
                this.activateMenuItem(menu);
            }
        };
        PoMenuPanelComponent.prototype.subscribeToRoute = function () {
            var _this = this;
            this.routeSubscription = this.router.events.subscribe(function (rounterEvent) {
                if (rounterEvent instanceof router.NavigationEnd) {
                    _this.checkActiveMenuByUrl(_this.location.path());
                }
            });
        };
        PoMenuPanelComponent.prototype.subscribeToMenuItem = function () {
            var _this = this;
            this.itemSubscription = this.menuItemsService
                .receiveFromChildMenuClicked()
                .subscribe(function (menu) { return _this.clickMenuItem(menu); });
        };
        return PoMenuPanelComponent;
    }(PoMenuPanelBaseComponent));
    PoMenuPanelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-menu-panel',
                    template: "<div class=\"po-menu-panel\">\r\n  <div class=\"po-menu-panel-logo-container\">\r\n    <a href=\"./\">\r\n      <img class=\"po-menu-panel-logo\" alt=\"main-logo\" [src]=\"logo\" />\r\n    </a>\r\n  </div>\r\n\r\n  <nav class=\"po-menu-panel-container\">\r\n    <div class=\"po-menu-panel-inner\">\r\n      <div *ngFor=\"let menu of menus; let menuIndex = index\" class=\"po-menu-panel-item-wrapper\">\r\n        <po-menu-panel-item [class.po-menu-panel-item-first]=\"menuIndex === 0\" [p-menu-item-internal]=\"menu\">\r\n        </po-menu-panel-item>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n</div>\r\n"
                },] }
    ];
    PoMenuPanelComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: common.Location },
        { type: PoMenuPanelItemsService },
        { type: router.Router }
    ]; };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que implementa cada item do po-menu-panel.
     */
    var PoMenuPanelItemComponent = /** @class */ (function () {
        function PoMenuPanelItemComponent(menuItemsService) {
            this.menuItemsService = menuItemsService;
        }
        PoMenuPanelItemComponent.prototype.ngOnDestroy = function () {
            this.itemsSubscription.unsubscribe();
        };
        PoMenuPanelItemComponent.prototype.ngOnInit = function () {
            // subscribe to menu component messages
            this.subscribeMenuClickedFromParent();
        };
        PoMenuPanelItemComponent.prototype.clickMenuItem = function (event) {
            if (!(event.ctrlKey || event.metaKey)) {
                event.preventDefault();
                // Emmit to parent
                this.menuItemsService.sendToParentMenuClicked(this.menuItemInternal);
            }
        };
        PoMenuPanelItemComponent.prototype.activateMenu = function (menu) {
            this.menuItemInternal.isSelected = this.menuItemInternal.id === menu.id;
        };
        PoMenuPanelItemComponent.prototype.processMenuItem = function (menu) {
            if (this.menuItemInternal.type === 'internalLink') {
                this.activateMenu(menu.active);
            }
        };
        PoMenuPanelItemComponent.prototype.subscribeMenuClickedFromParent = function () {
            var _this = this;
            this.itemsSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(function (menu) {
                _this.processMenuItem(menu);
            });
        };
        return PoMenuPanelItemComponent;
    }());
    PoMenuPanelItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-menu-panel-item',
                    template: "<!-- menu com link interno -->\r\n<a *ngIf=\"menuItemInternal.type === 'internalLink'\" [routerLink]=\"menuItemInternal.link\">\r\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\r\n</a>\r\n\r\n<!-- menu com link externo -->\r\n<a *ngIf=\"menuItemInternal.type === 'externalLink'\" [href]=\"menuItemInternal.link\">\r\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\r\n</a>\r\n\r\n<!-- menu sem link -->\r\n<a *ngIf=\"menuItemInternal.type === 'noLink'\" href=\"javascript:;\">\r\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\r\n</a>\r\n\r\n<ng-template #menuItemTemplate>\r\n  <div\r\n    class=\"po-menu-panel-item\"\r\n    p-tooltip-position=\"right\"\r\n    [class.po-menu-panel-item-selected]=\"menuItemInternal.isSelected\"\r\n    [p-tooltip]=\"menuItemInternal.label\"\r\n    (click)=\"clickMenuItem($event)\"\r\n  >\r\n    <span class=\"po-icon {{ menuItemInternal.icon }}\"></span>\r\n  </div>\r\n</ng-template>\r\n"
                },] }
    ];
    PoMenuPanelItemComponent.ctorParameters = function () { return [
        { type: PoMenuPanelItemsService }
    ]; };
    PoMenuPanelItemComponent.propDecorators = {
        menuItemInternal: [{ type: i0.Input, args: ['p-menu-item-internal',] }]
    };

    /**
     * @description
     *
     * Módulo do componente po-menu-panel.
     */
    var PoMenuPanelModule = /** @class */ (function () {
        function PoMenuPanelModule() {
        }
        return PoMenuPanelModule;
    }());
    PoMenuPanelModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, router.RouterModule, PoFieldModule, PoTooltipModule],
                    declarations: [PoMenuPanelComponent, PoMenuPanelItemComponent],
                    exports: [PoMenuPanelComponent],
                    providers: [PoMenuPanelItemsService]
                },] }
    ];

    var PoNavbarActionComponent = /** @class */ (function () {
        function PoNavbarActionComponent(viewContainerRef, router) {
            this.router = router;
        }
        PoNavbarActionComponent.prototype.click = function () {
            if (this.action) {
                this.action();
                return;
            }
            if (this.link) {
                return this.openUrl(this.link);
            }
        };
        PoNavbarActionComponent.prototype.openUrl = function (url) {
            if (isExternalLink(url)) {
                return openExternalLink(url);
            }
            if (url) {
                return this.router.navigate([url]);
            }
        };
        return PoNavbarActionComponent;
    }());
    PoNavbarActionComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-navbar-action',
                    template: "<po-icon\r\n  tabindex=\"0\"\r\n  class=\"po-navbar-action-content po-clickable\"\r\n  [p-icon]=\"icon\"\r\n  [p-tooltip]=\"tooltip\"\r\n  (click)=\"click()\"\r\n></po-icon>\r\n"
                },] }
    ];
    PoNavbarActionComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: router.Router }
    ]; };
    PoNavbarActionComponent.propDecorators = {
        action: [{ type: i0.Input, args: ['p-action',] }],
        icon: [{ type: i0.Input, args: ['p-icon',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        link: [{ type: i0.Input, args: ['p-link',] }],
        tooltip: [{ type: i0.Input, args: ['p-tooltip-text',] }]
    };

    var PoNavbarActionPopupComponent = /** @class */ (function () {
        function PoNavbarActionPopupComponent() {
        }
        PoNavbarActionPopupComponent.prototype.getLastIconAction = function () {
            if (this.iconActions && this.iconActions.length) {
                return this.iconActions[this.iconActions.length - 1].icon;
            }
        };
        return PoNavbarActionPopupComponent;
    }());
    PoNavbarActionPopupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-navbar-action-popup',
                    template: "<div tabindex=\"0\" #target class=\"po-navbar-action-popup-content po-clickable\" (click)=\"popup.toggle()\">\r\n  <span class=\"po-icon {{ getLastIconAction() }}\"></span>\r\n</div>\r\n\r\n<po-popup #popup [p-actions]=\"iconActions\" [p-target]=\"target\"> </po-popup>\r\n"
                },] }
    ];
    PoNavbarActionPopupComponent.propDecorators = {
        iconActions: [{ type: i0.Input, args: ['p-icon-actions',] }]
    };

    var PoNavbarActionsComponent = /** @class */ (function () {
        function PoNavbarActionsComponent() {
        }
        Object.defineProperty(PoNavbarActionsComponent.prototype, "iconActions", {
            get: function () {
                return this._iconActions;
            },
            set: function (actions) {
                this._iconActions = actions.map(function (action) { return (Object.assign(Object.assign({}, action), { separator: true, url: action.link })); });
            },
            enumerable: false,
            configurable: true
        });
        return PoNavbarActionsComponent;
    }());
    PoNavbarActionsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-navbar-actions',
                    template: "<po-navbar-action\r\n  *ngFor=\"let iconAction of iconActions\"\r\n  class=\"po-navbar-action\"\r\n  [p-action]=\"iconAction.action\"\r\n  [p-icon]=\"iconAction.icon\"\r\n  [p-label]=\"iconAction.label\"\r\n  [p-link]=\"iconAction.link\"\r\n  [p-tooltip-text]=\"iconAction.tooltip\"\r\n>\r\n</po-navbar-action>\r\n\r\n<po-navbar-action-popup class=\"po-navbar-action-popup\" [p-icon-actions]=\"iconActions\"> </po-navbar-action-popup>\r\n"
                },] }
    ];
    PoNavbarActionsComponent.propDecorators = {
        iconActions: [{ type: i0.Input, args: ['p-icon-actions',] }]
    };

    var PoNavbarActionsModule = /** @class */ (function () {
        function PoNavbarActionsModule() {
        }
        return PoNavbarActionsModule;
    }());
    PoNavbarActionsModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, PoPopupModule, PoTooltipModule, PoIconModule],
                    declarations: [PoNavbarActionComponent, PoNavbarActionPopupComponent, PoNavbarActionsComponent],
                    exports: [PoNavbarActionsComponent]
                },] }
    ];

    var poNavbarLiteralsDefault = {
        en: {
            navbarLinks: 'Navbar links'
        },
        es: {
            navbarLinks: 'Navbar links'
        },
        pt: {
            navbarLinks: 'Navbar links'
        },
        ru: {
            navbarLinks: 'Navbar связи'
        }
    };
    /**
     * @description
     *
     * O componente `po-navbar` é um cabeçalho fixo que permite apresentar uma lista de links para facilitar a navegação pelas
     * páginas da aplicação. Também possui ícones com ações.
     *
     * Quando utilizado em uma resolução menor que `768px`, o componente utilizará o menu corrente da aplicação para
     * incluir seus itens.
     *
     * Ao utilizar Navbar com Menu e ambos tiverem logo, será mantido o logo do Navbar.
     */
    var PoNavbarBaseComponent = /** @class */ (function () {
        function PoNavbarBaseComponent(languageService) {
            this._iconActions = [];
            this._items = [];
            this._shadow = false;
            this.language = poLocaleDefault;
            this.language = languageService.getShortLanguage();
        }
        Object.defineProperty(PoNavbarBaseComponent.prototype, "iconActions", {
            get: function () {
                return this._iconActions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma lista de ações apresentadas em ícones no lado direito do `po-navbar`.
             */
            set: function (value) {
                this._iconActions = Array.isArray(value) ? value : [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoNavbarBaseComponent.prototype, "items", {
            get: function () {
                return this._items;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma lista de items do `po-navbar`.
             */
            set: function (value) {
                this._items = Array.isArray(value) ? value : [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoNavbarBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poNavbarLiteralsDefault[this.language];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com a literal usada na propriedade `p-literals`.
             *
             * Para customizar a literal, basta declarar um objeto do tipo `PoNavbarLiterals` conforme exemplo abaixo:
             *
             * ```
             *  const customLiterals: PoNavbarLiterals = {
             *    navbarLinks: 'Itens de navegação'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-navbar
             *   [p-literals]="customLiterals">
             * </po-navbar>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do
             * [`PoI18nService`](/documentation/po-i18n) ou do browser.
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = Object.assign(Object.assign(Object.assign({}, poNavbarLiteralsDefault[poLocaleDefault]), poNavbarLiteralsDefault[this.language]), value);
                }
                else {
                    this._literals = poNavbarLiteralsDefault[this.language];
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoNavbarBaseComponent.prototype, "logo", {
            get: function () {
                return this._logo;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a logo apresentada `po-navbar`.
             */
            set: function (value) {
                this._logo = value;
                if (this.applicationMenu) {
                    this.validateMenuLogo();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoNavbarBaseComponent.prototype, "shadow", {
            get: function () {
                return this._shadow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Aplica uma sombra na parte inferior do `po-navbar`.
             *
             * @default `false`
             */
            set: function (value) {
                this._shadow = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        return PoNavbarBaseComponent;
    }());
    PoNavbarBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoNavbarBaseComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoNavbarBaseComponent.propDecorators = {
        menu: [{ type: i0.Input, args: ['p-menu',] }],
        iconActions: [{ type: i0.Input, args: ['p-icon-actions',] }],
        items: [{ type: i0.Input, args: ['p-items',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        logo: [{ type: i0.Input, args: ['p-logo',] }],
        shadow: [{ type: i0.Input, args: ['p-shadow',] }]
    };

    var PoNavbarItemComponent = /** @class */ (function () {
        function PoNavbarItemComponent() {
            this.click = new i0.EventEmitter();
        }
        Object.defineProperty(PoNavbarItemComponent.prototype, "type", {
            get: function () {
                return isExternalLink(this.link) ? 'externalLink' : 'internalLink';
            },
            enumerable: false,
            configurable: true
        });
        PoNavbarItemComponent.prototype.itemClick = function (label, link) {
            if (this.action) {
                this.action({ label: label, link: link });
            }
            this.click.emit();
        };
        return PoNavbarItemComponent;
    }());
    PoNavbarItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-navbar-item',
                    template: "<ng-container [ngSwitch]=\"type\">\r\n  <a\r\n    *ngSwitchCase=\"'externalLink'\"\r\n    class=\"po-navbar-item-link\"\r\n    [class.po-clickable]=\"clickable\"\r\n    [href]=\"link\"\r\n    target=\"_blank\"\r\n    (click)=\"itemClick()\"\r\n  >\r\n    {{ label }}\r\n  </a>\r\n\r\n  <a\r\n    *ngSwitchCase=\"'internalLink'\"\r\n    class=\"po-navbar-item-link\"\r\n    [class.po-clickable]=\"clickable\"\r\n    [routerLink]=\"link\"\r\n    (click)=\"itemClick(label, link)\"\r\n  >\r\n    {{ label }}\r\n  </a>\r\n</ng-container>\r\n"
                },] }
    ];
    PoNavbarItemComponent.propDecorators = {
        action: [{ type: i0.Input, args: ['p-action',] }],
        clickable: [{ type: i0.Input, args: ['p-clickable',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        link: [{ type: i0.Input, args: ['p-link',] }],
        click: [{ type: i0.Output, args: ['p-click',] }]
    };

    var PoNavbarItemsComponent = /** @class */ (function () {
        function PoNavbarItemsComponent(router) {
            this.router = router;
        }
        PoNavbarItemsComponent.prototype.ngOnDestroy = function () {
            this.routeSubscription.unsubscribe();
        };
        PoNavbarItemsComponent.prototype.ngOnInit = function () {
            this.subscribeToRoute();
        };
        PoNavbarItemsComponent.prototype.checkActiveItemByUrl = function (urlRouter) {
            var urlArray = urlRouter.split('/');
            var counter = urlArray.length;
            var _loop_1 = function () {
                var url = urlArray.slice(0, counter).join('/');
                this_1.selectedItem = this_1.items.find(function (item) { return item.link === url; });
                if (this_1.selectedItem) {
                    return "break";
                }
                counter--;
            };
            var this_1 = this;
            while (counter >= 0) {
                var state_1 = _loop_1();
                if (state_1 === "break")
                    break;
            }
        };
        PoNavbarItemsComponent.prototype.checkRouterChildrenFragments = function () {
            var childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
            return childrenPrimary ? "/" + childrenPrimary.segments.map(function (it) { return it.path; }).join('/') : '/';
        };
        PoNavbarItemsComponent.prototype.subscribeToRoute = function () {
            var _this = this;
            this.routeSubscription = this.router.events.subscribe(function (val) {
                if (val instanceof router.NavigationEnd || val instanceof router.NavigationCancel) {
                    var urlRouter = _this.checkRouterChildrenFragments();
                    _this.checkActiveItemByUrl(urlRouter);
                }
            });
        };
        return PoNavbarItemsComponent;
    }());
    PoNavbarItemsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-navbar-items',
                    template: "<nav>\r\n  <ul class=\"po-navbar-items-container\" #navbarItemsContainer>\r\n    <li *ngFor=\"let item of items\" class=\"po-navbar-item\" [class.po-navbar-item-selected]=\"selectedItem === item\">\r\n      <po-navbar-item\r\n        [p-action]=\"item.action\"\r\n        [p-clickable]=\"selectedItem !== item\"\r\n        [p-label]=\"item.label\"\r\n        [p-link]=\"item.link\"\r\n      >\r\n      </po-navbar-item>\r\n    </li>\r\n  </ul>\r\n</nav>\r\n"
                },] }
    ];
    PoNavbarItemsComponent.ctorParameters = function () { return [
        { type: router.Router }
    ]; };
    PoNavbarItemsComponent.propDecorators = {
        navbarItemsContainer: [{ type: i0.ViewChild, args: ['navbarItemsContainer', { read: i0.ElementRef, static: true },] }],
        allNavbarItems: [{ type: i0.ViewChildren, args: [PoNavbarItemComponent, { read: i0.ElementRef },] }],
        items: [{ type: i0.Input, args: ['p-items',] }]
    };

    var poNavbarNavigationWidth = 88;
    var poNavbarMenuMedia = 768;
    var poNavbarMatchMedia = "(max-width: " + poNavbarMenuMedia + "px)";
    var poNavbarTiming = '250ms ease';
    /**
     * @docsExtends PoNavbarBaseComponent
     */
    var PoNavbarComponent = /** @class */ (function (_super) {
        __extends(PoNavbarComponent, _super);
        function PoNavbarComponent(poLanguageService, renderer, builder, changeDetector, menuGlobalService) {
            var _this = _super.call(this, poLanguageService) || this;
            _this.renderer = renderer;
            _this.builder = builder;
            _this.changeDetector = changeDetector;
            _this.menuGlobalService = menuGlobalService;
            _this.showItemsNavigation = false;
            _this.isNavbarUpdateMenu = false;
            _this.id = uuid();
            _this.offset = 0;
            _this.previousMenusItems = [];
            _this.onMediaQueryChange = function (changed) {
                _this.changeNavbarMenuItems(changed.matches, _this.items, _this.literals.navbarLinks);
            };
            _this.windowResizeListener = _this.renderer.listen(window, 'resize', _this.displayItemsNavigation.bind(_this));
            return _this;
        }
        Object.defineProperty(PoNavbarComponent.prototype, "navbarItemNavigationDisableLeft", {
            get: function () {
                return this.offset === 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoNavbarComponent.prototype, "navbarItemNavigationDisableRight", {
            get: function () {
                return this.disableRight && this.offset !== 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoNavbarComponent.prototype, "menuComponent", {
            set: function (menu) {
                this._menuComponent = menu;
                this.previousMenuComponentId = (menu === null || menu === void 0 ? void 0 : menu.id) || this.previousMenuComponentId;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoNavbarComponent.prototype, "isCollapsedMedia", {
            get: function () {
                return window.innerWidth < poNavbarMenuMedia;
            },
            enumerable: false,
            configurable: true
        });
        PoNavbarComponent.prototype.ngOnInit = function () {
            var _this = this;
            // necessário para quando o menu da aplicação carregar os itens lazy e navbar estiver colapsado,
            // quando isso acontece, o navbar inclui 1 item de menu "Navbar links", portanto é removido quando
            // os novos itens de menu é carregado, a partir disso este tratamento é necessario para incluir
            // o navbar links apos a adição dos itens de menu da aplicação.
            this.menusSubscription = this.menuGlobalService.receiveMenus$.subscribe(function (newMenus) {
                var _a;
                var previousMenusiIsNavbarLinks = ((_a = _this.previousMenusItems) === null || _a === void 0 ? void 0 : _a.length) === 1 && _this.previousMenusItems[0].id === _this.id;
                if (_this.applicationMenu && _this.isCollapsedMedia && _this.isNavbarUpdateMenu && previousMenusiIsNavbarLinks) {
                    _this.isNavbarUpdateMenu = false;
                    _this.applicationMenu.menus = __spreadArray([
                        { label: _this.literals.navbarLinks, subItems: _this.items, id: _this.id }
                    ], __read(newMenus));
                }
                _this.isNavbarUpdateMenu = false;
                _this.previousMenusItems = newMenus;
            });
            this.removedMenuSubscription = this.menuGlobalService.receiveRemovedApplicationMenu$.subscribe(function (removedMenuId) {
                // verifica se o menu removido foi o presente no navbar, caso sim, ele mantem o applictionMenu.
                // é preciso para tratar a sequencia do ngDestroy, quando o menu do navbar era removido do DOM
                // disparava esse evento, sendo necessario tratar, para não tornar indefinido o applicationMenu
                _this.applicationMenu =
                    _this.applicationMenu && _this.previousMenuComponentId === removedMenuId ? _this.applicationMenu : undefined;
                _this.changeDetector.detectChanges();
                if (!_this.applicationMenu && _this.mediaQuery) {
                    _this.mediaQuery.removeListener(_this.onMediaQueryChange);
                }
            });
            this.applicationMenuSubscription = this.menuGlobalService.receiveApplicationMenu$
                .pipe(operators.delay(100))
                .subscribe(function (newMenu) {
                _this.applicationMenu = _this.previousMenuComponentId === newMenu.id ? undefined : newMenu;
                _this.changeDetector.detectChanges();
                if (_this.applicationMenu) {
                    _this.initNavbarMenu();
                }
            });
        };
        PoNavbarComponent.prototype.ngAfterViewInit = function () {
            this.displayItemsNavigation();
        };
        PoNavbarComponent.prototype.ngOnDestroy = function () {
            var _a, _b, _c;
            if (this.mediaQuery) {
                this.mediaQuery.removeListener(this.onMediaQueryChange);
            }
            (_a = this.removedMenuSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
            (_b = this.applicationMenuSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();
            (_c = this.menusSubscription) === null || _c === void 0 ? void 0 : _c.unsubscribe();
        };
        PoNavbarComponent.prototype.navigateItems = function (orientation) {
            orientation === 'left' ? this.navigateLeft() : this.navigateRight();
            this.animate(this.offset);
        };
        PoNavbarComponent.prototype.validateMenuLogo = function () {
            if (this.applicationMenu.logo && this.logo) {
                this.applicationMenu.logo = undefined;
                this.changeDetector.detectChanges();
            }
        };
        PoNavbarComponent.prototype.allNavbarItemsWidth = function () {
            return this.navbarItems.allNavbarItems.reduce(function (previous, current) { return previous + current.nativeElement.offsetWidth; }, 0);
        };
        PoNavbarComponent.prototype.animate = function (offset) {
            var animation = this.buildTransitionAnimation(offset);
            this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);
            this.player.play();
        };
        PoNavbarComponent.prototype.buildTransitionAnimation = function (offset) {
            return this.builder.build([animations.animate(poNavbarTiming, animations.keyframes([animations.style({ transform: "translateX(" + -offset + "px)" })]))]);
        };
        PoNavbarComponent.prototype.changeNavbarMenuItems = function (isCollapsedMedia, navbarItems, label) {
            var _this = this;
            if (isCollapsedMedia) {
                this.applicationMenu.menus = __spreadArray([{ label: label, subItems: navbarItems, id: this.id }], __read(this.applicationMenu.menus));
            }
            else {
                this.applicationMenu.menus = this.applicationMenu.menus.filter(function (m) { return m.id !== _this.id; });
            }
            this.isNavbarUpdateMenu = true;
            this.changeDetector.detectChanges();
        };
        PoNavbarComponent.prototype.calculateLeftNavigation = function () {
            var _this = this;
            var calculatedOffset;
            this.navbarItems.allNavbarItems.some(function (navbarItem) {
                var navbarItemOffset = navbarItem.nativeElement.offsetLeft;
                var navbarItemWidth = navbarItem.nativeElement.offsetWidth;
                if (navbarItemOffset >= _this.offset) {
                    calculatedOffset = navbarItemOffset - (_this.navbarItemsWidth() - navbarItemWidth);
                    return true;
                }
            });
            return calculatedOffset;
        };
        PoNavbarComponent.prototype.calculateRightNavigation = function (itemBreakPoint) {
            var calculatedOffset;
            this.navbarItems.allNavbarItems.some(function (navbarItem) {
                var offsetLeft = navbarItem.nativeElement.offsetLeft;
                var finalPosition = navbarItem.nativeElement.offsetWidth + offsetLeft;
                if (itemBreakPoint < finalPosition) {
                    calculatedOffset = offsetLeft;
                    return true;
                }
            });
            return calculatedOffset;
        };
        PoNavbarComponent.prototype.displayItemsNavigation = function () {
            this.showItemsNavigation = this.navbarItemsWidth() < this.allNavbarItemsWidth() + poNavbarNavigationWidth;
            this.changeDetector.detectChanges();
            if (this.offset !== 0) {
                this.setOffsetToZero();
                this.animate(this.offset);
            }
        };
        PoNavbarComponent.prototype.initNavbarMenu = function () {
            this.mediaQuery = window.matchMedia(poNavbarMatchMedia);
            if (this.isCollapsedMedia) {
                this.changeNavbarMenuItems(true, this.items, this.literals.navbarLinks);
            }
            this.validateMenuLogo();
            this.mediaQuery.addListener(this.onMediaQueryChange);
        };
        PoNavbarComponent.prototype.navbarItemsWidth = function () {
            return this.navbarItemsElement.nativeElement.offsetWidth;
        };
        PoNavbarComponent.prototype.navigateLeft = function () {
            this.disableRight = false;
            this.offset = this.calculateLeftNavigation();
            if (this.offset < 0) {
                this.setOffsetToZero();
            }
        };
        PoNavbarComponent.prototype.navigateRight = function () {
            var maxAllowedOffset = this.allNavbarItemsWidth() - this.navbarItemsWidth();
            var itemBreakPoint = this.offset + this.navbarItemsWidth();
            this.offset = this.calculateRightNavigation(itemBreakPoint);
            this.validateMaxOffset(maxAllowedOffset);
        };
        PoNavbarComponent.prototype.setOffsetToZero = function () {
            this.offset = 0;
        };
        PoNavbarComponent.prototype.validateMaxOffset = function (maxAllowedOffset) {
            if (this.offset >= maxAllowedOffset) {
                this.offset = maxAllowedOffset;
                this.disableRight = true;
            }
        };
        return PoNavbarComponent;
    }(PoNavbarBaseComponent));
    PoNavbarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-navbar',
                    template: "<header class=\"po-navbar\" [ngClass]=\"{ 'po-navbar-shadow': shadow }\">\r\n  <po-navbar-logo\r\n    class=\"po-navbar-logo\"\r\n    [ngClass]=\"{ 'po-navbar-logo-menu': !!applicationMenu, 'po-navbar-no-logo': !logo }\"\r\n    [p-logo]=\"logo\"\r\n  >\r\n  </po-navbar-logo>\r\n\r\n  <po-navbar-items class=\"po-navbar-items\" [p-items]=\"items\"> </po-navbar-items>\r\n\r\n  <po-navbar-item-navigation\r\n    *ngIf=\"showItemsNavigation\"\r\n    class=\"po-navbar-item-navigation\"\r\n    [p-disable-left]=\"navbarItemNavigationDisableLeft\"\r\n    [p-disable-right]=\"navbarItemNavigationDisableRight\"\r\n    (p-click)=\"navigateItems($event)\"\r\n  >\r\n  </po-navbar-item-navigation>\r\n\r\n  <po-navbar-actions class=\"po-navbar-actions\" [p-icon-actions]=\"iconActions\"> </po-navbar-actions>\r\n</header>\r\n\r\n<po-menu *ngIf=\"!applicationMenu\" [p-menus]=\"items\"> </po-menu>\r\n"
                },] }
    ];
    PoNavbarComponent.ctorParameters = function () { return [
        { type: PoLanguageService },
        { type: i0.Renderer2 },
        { type: animations.AnimationBuilder },
        { type: i0.ChangeDetectorRef },
        { type: PoMenuGlobalService }
    ]; };
    PoNavbarComponent.propDecorators = {
        navbarItemsElement: [{ type: i0.ViewChild, args: [PoNavbarItemsComponent, { read: i0.ElementRef, static: true },] }],
        navbarItems: [{ type: i0.ViewChild, args: [PoNavbarItemsComponent, { static: true },] }],
        menuComponent: [{ type: i0.ViewChild, args: [PoMenuComponent,] }]
    };

    var PoNavbarItemsModule = /** @class */ (function () {
        function PoNavbarItemsModule() {
        }
        return PoNavbarItemsModule;
    }());
    PoNavbarItemsModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, router.RouterModule],
                    declarations: [PoNavbarItemComponent, PoNavbarItemsComponent],
                    exports: [PoNavbarItemsComponent]
                },] }
    ];

    var PoNavbarLogoComponent = /** @class */ (function () {
        function PoNavbarLogoComponent() {
        }
        return PoNavbarLogoComponent;
    }());
    PoNavbarLogoComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-navbar-logo',
                    template: "<a href=\"./\">\r\n  <img *ngIf=\"logo\" class=\"po-navbar-logo-image\" alt=\"logo\" [src]=\"logo\" />\r\n</a>\r\n"
                },] }
    ];
    PoNavbarLogoComponent.propDecorators = {
        logo: [{ type: i0.Input, args: ['p-logo',] }]
    };

    var PoNavbarItemNavigationComponent = /** @class */ (function () {
        function PoNavbarItemNavigationComponent() {
            this.click = new i0.EventEmitter();
        }
        return PoNavbarItemNavigationComponent;
    }());
    PoNavbarItemNavigationComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-navbar-item-navigation',
                    template: "<po-navbar-item-navigation-icon\r\n  class=\"po-navbar-item-navigation-icon\"\r\n  p-icon=\"left\"\r\n  [p-disabled]=\"disableLeft\"\r\n  (p-click)=\"click.emit($event)\"\r\n>\r\n</po-navbar-item-navigation-icon>\r\n\r\n<po-navbar-item-navigation-icon\r\n  class=\"po-navbar-item-navigation-icon\"\r\n  p-icon=\"right\"\r\n  [p-disabled]=\"disableRight\"\r\n  (p-click)=\"click.emit($event)\"\r\n>\r\n</po-navbar-item-navigation-icon>\r\n"
                },] }
    ];
    PoNavbarItemNavigationComponent.propDecorators = {
        disableLeft: [{ type: i0.Input, args: ['p-disable-left',] }],
        disableRight: [{ type: i0.Input, args: ['p-disable-right',] }],
        click: [{ type: i0.Output, args: ['p-click',] }]
    };

    var PoNavbarItemNavigationIconComponent = /** @class */ (function () {
        function PoNavbarItemNavigationIconComponent() {
            this.click = new i0.EventEmitter();
        }
        return PoNavbarItemNavigationIconComponent;
    }());
    PoNavbarItemNavigationIconComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-navbar-item-navigation-icon',
                    template: "<div\r\n  [ngClass]=\"{ 'po-navbar-item-navigation-icon-disabled': disabled, 'po-clickable': !disabled }\"\r\n  tabindex=\"0\"\r\n  (click)=\"disabled ? undefined : click.emit(icon)\"\r\n>\r\n  <span class=\"po-icon po-icon-arrow-{{ icon }}\"></span>\r\n</div>\r\n"
                },] }
    ];
    PoNavbarItemNavigationIconComponent.propDecorators = {
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        icon: [{ type: i0.Input, args: ['p-icon',] }],
        click: [{ type: i0.Output, args: ['p-click',] }]
    };

    var PoNavbarItemNavigationModule = /** @class */ (function () {
        function PoNavbarItemNavigationModule() {
        }
        return PoNavbarItemNavigationModule;
    }());
    PoNavbarItemNavigationModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, router.RouterModule],
                    declarations: [PoNavbarItemNavigationComponent, PoNavbarItemNavigationIconComponent],
                    exports: [PoNavbarItemNavigationComponent]
                },] }
    ];

    /**
     * @description
     *
     * Módulo do componente `po-navbar`.
     *
     * > Para o correto funcionamento do componente `po-navbar`, deve ser importado o módulo `BrowserAnimationsModule` no
     * > módulo principal da sua aplicação.
     *
     * Módulo da aplicação:
     * ```
     * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
     * import { PoModule } from '@po-ui/ng-components';
     * ...
     *
     * @NgModule({
     *   imports: [
     *     BrowserModule,
     *     BrowserAnimationsModule,
     *     ...
     *     PoModule
     *   ],
     *   declarations: [
     *     AppComponent,
     *     ...
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     */
    var PoNavbarModule = /** @class */ (function () {
        function PoNavbarModule() {
        }
        return PoNavbarModule;
    }());
    PoNavbarModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        PoNavbarActionsModule,
                        PoNavbarItemsModule,
                        PoNavbarItemNavigationModule,
                        PoMenuModule,
                        PoIconModule
                    ],
                    declarations: [PoNavbarComponent, PoNavbarLogoComponent],
                    exports: [PoNavbarComponent]
                },] }
    ];

    /**
     * @docsPrivate
     *
     * @description
     *
     * O componente **po-page-content** é utilizado como o container para o conteúdo da página.
     */
    var PoPageContentBaseComponent = /** @class */ (function () {
        function PoPageContentBaseComponent() {
        }
        return PoPageContentBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * @docsExtends PoPageContentBaseComponent
     */
    var PoPageContentComponent = /** @class */ (function (_super) {
        __extends(PoPageContentComponent, _super);
        function PoPageContentComponent(renderer) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.contentOpacity = 0;
            _this.height = '90%';
            _this.overflowY = 'none';
            _this.initializeListeners();
            return _this;
        }
        PoPageContentComponent.prototype.ngAfterViewInit = function () {
            this.recalculateHeaderSize();
        };
        PoPageContentComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        PoPageContentComponent.prototype.recalculateHeaderSize = function () {
            var _this = this;
            setTimeout(function () {
                var pageHeaderElement = document.querySelector('div.po-page-header');
                _this.setHeightContent(pageHeaderElement);
                _this.contentOpacity = 1;
            });
        };
        PoPageContentComponent.prototype.setHeightContent = function (poPageHeader) {
            var bodyHeight = document.body.clientHeight;
            var pageHeaderHeight = poPageHeader ? poPageHeader.offsetTop + poPageHeader.offsetHeight : 0;
            var newHeight = bodyHeight - pageHeaderHeight;
            this.height = newHeight + "px";
        };
        PoPageContentComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function () {
                _this.recalculateHeaderSize();
            });
        };
        PoPageContentComponent.prototype.removeListeners = function () {
            this.resizeListener();
        };
        return PoPageContentComponent;
    }(PoPageContentBaseComponent));
    PoPageContentComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-page-content',
                    template: "<div class=\"po-page-content\" [style.height]=\"height\" [style.opacity]=\"contentOpacity\" [style.overflow-y]=\"overflowY\">\r\n  <ng-content></ng-content>\r\n</div>\r\n"
                },] }
    ];
    PoPageContentComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 }
    ]; };

    var poPageDefaultLiteralsDefault = {
        en: {
            otherActions: 'Other actions'
        },
        es: {
            otherActions: 'Otras acciones'
        },
        pt: {
            otherActions: 'Outras ações'
        },
        ru: {
            otherActions: 'Другие действия'
        }
    };
    /**
     * @description
     *
     * O componente `po-page-default` é utilizado como o container principal para as telas sem um template definido.
     */
    var PoPageDefaultBaseComponent = /** @class */ (function () {
        function PoPageDefaultBaseComponent(languageService) {
            this.visibleActions = [];
            this._actions = [];
            this.language = languageService.getShortLanguage();
        }
        Object.defineProperty(PoPageDefaultBaseComponent.prototype, "actions", {
            get: function () {
                return this._actions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`.
             */
            set: function (actions) {
                this._actions = Array.isArray(actions) ? actions : [];
                this.visibleActions = this.actions.filter(function (action) { return action.visible !== false; });
                this.setDropdownActions();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoPageDefaultBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poPageDefaultLiteralsDefault[this.language];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-page-default`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoPageDefaultLiterals = {
             *    otherActions: 'Mais ações'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: PoPageDefaultLiterals = {
             *    otherActions: 'Ações da página'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-page-default
             *   [p-literals]="customLiterals">
             * </po-page-default>
             * ```
             *
             * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = Object.assign(Object.assign(Object.assign({}, poPageDefaultLiteralsDefault[poLocaleDefault]), poPageDefaultLiteralsDefault[this.language]), value);
                }
                else {
                    this._literals = poPageDefaultLiteralsDefault[this.language];
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoPageDefaultBaseComponent.prototype, "title", {
            get: function () {
                return this._title;
            },
            /** Título da página. */
            set: function (title) {
                var _this = this;
                this._title = title;
                setTimeout(function () { return _this.poPageContent.recalculateHeaderSize(); });
            },
            enumerable: false,
            configurable: true
        });
        return PoPageDefaultBaseComponent;
    }());
    PoPageDefaultBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoPageDefaultBaseComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoPageDefaultBaseComponent.propDecorators = {
        poPageContent: [{ type: i0.ViewChild, args: [PoPageContentComponent, { static: true },] }],
        breadcrumb: [{ type: i0.Input, args: ['p-breadcrumb',] }],
        actions: [{ type: i0.Input, args: ['p-actions',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        title: [{ type: i0.Input, args: ['p-title',] }]
    };

    /**
     * @docsExtends PoPageDefaultBaseComponent
     *
     * @example
     *
     * <example name="po-page-default-basic" title="PO Page Default Basic">
     *  <file name="sample-po-page-default-basic/sample-po-page-default-basic.component.html"> </file>
     *  <file name="sample-po-page-default-basic/sample-po-page-default-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-default-labs" title="PO Page Default Labs">
     *  <file name="sample-po-page-default-labs/sample-po-page-default-labs.component.html"> </file>
     *  <file name="sample-po-page-default-labs/sample-po-page-default-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-default-dashboard" title="PO Page Default - Dashboard">
     *  <file name="sample-po-page-default-dashboard/sample-po-page-default-dashboard.component.html"> </file>
     *  <file name="sample-po-page-default-dashboard/sample-po-page-default-dashboard.component.ts"> </file>
     *  <file name="sample-po-page-default-dashboard/sample-po-page-default-dashboard.service.ts"> </file>
     * </example>
     */
    var PoPageDefaultComponent = /** @class */ (function (_super) {
        __extends(PoPageDefaultComponent, _super);
        function PoPageDefaultComponent(viewRef, languageService, renderer, router) {
            var _this = _super.call(this, languageService) || this;
            _this.renderer = renderer;
            _this.router = router;
            _this.limitPrimaryActions = 3;
            _this.maxWidthMobile = 480;
            return _this;
        }
        PoPageDefaultComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.setIsMobile();
            this.setDropdownActions();
            this.renderer.listen('window', 'resize', function (event) {
                _this.onResize(event);
            });
        };
        PoPageDefaultComponent.prototype.ngOnChanges = function (changes) {
            this.setDropdownActions();
        };
        PoPageDefaultComponent.prototype.actionIsDisabled = function (action) {
            return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;
        };
        PoPageDefaultComponent.prototype.callAction = function (item) {
            if (item.url) {
                isExternalLink(item.url) ? openExternalLink(item.url) : this.router.navigate([item.url]);
            }
            else if (item.action) {
                item.action();
            }
        };
        PoPageDefaultComponent.prototype.hasPageHeader = function () {
            return !!(this.title ||
                (this.visibleActions && this.visibleActions.length) ||
                (this.breadcrumb && this.breadcrumb.items.length));
        };
        PoPageDefaultComponent.prototype.setDropdownActions = function () {
            if (this.visibleActions.length > this.limitPrimaryActions) {
                this.dropdownActions = this.visibleActions.slice(this.limitPrimaryActions - 1);
            }
        };
        PoPageDefaultComponent.prototype.onResize = function (event) {
            var width = event.target.innerWidth;
            if (width < this.maxWidthMobile) {
                this.isMobile = true;
                this.limitPrimaryActions = 2;
                this.setDropdownActions();
            }
            else {
                this.isMobile = false;
                this.limitPrimaryActions = 3;
                this.setDropdownActions();
            }
        };
        PoPageDefaultComponent.prototype.setIsMobile = function () {
            if (window.innerWidth < this.maxWidthMobile) {
                this.isMobile = true;
                this.limitPrimaryActions = 2;
            }
        };
        return PoPageDefaultComponent;
    }(PoPageDefaultBaseComponent));
    PoPageDefaultComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-page-default',
                    template: "<po-page>\r\n  <!-- HEADER -->\r\n  <po-page-header *ngIf=\"hasPageHeader()\" [p-breadcrumb]=\"breadcrumb\" [p-title]=\"title\">\r\n    <!-- OPERATIONS -->\r\n    <div class=\"po-page-header-actions\">\r\n      <po-dropdown\r\n        *ngIf=\"visibleActions.length > limitPrimaryActions\"\r\n        [p-label]=\"literals.otherActions\"\r\n        [p-actions]=\"dropdownActions\"\r\n      >\r\n      </po-dropdown>\r\n\r\n      <po-button\r\n        *ngIf=\"visibleActions.length === 3 && visibleActions[2] && !isMobile\"\r\n        [p-disabled]=\"actionIsDisabled(visibleActions[2])\"\r\n        [p-label]=\"visibleActions[2].label\"\r\n        (p-click)=\"callAction(visibleActions[2])\"\r\n      >\r\n      </po-button>\r\n\r\n      <po-button\r\n        *ngIf=\"visibleActions[1] && (visibleActions.length === 2 || !isMobile)\"\r\n        [p-disabled]=\"actionIsDisabled(visibleActions[1])\"\r\n        [p-label]=\"visibleActions[1].label\"\r\n        (p-click)=\"callAction(visibleActions[1])\"\r\n      >\r\n      </po-button>\r\n\r\n      <po-button\r\n        *ngIf=\"visibleActions[0]\"\r\n        p-type=\"primary\"\r\n        [p-disabled]=\"actionIsDisabled(visibleActions[0])\"\r\n        [p-icon]=\"visibleActions[0].icon\"\r\n        [p-label]=\"visibleActions[0].label\"\r\n        (p-click)=\"callAction(visibleActions[0])\"\r\n      >\r\n      </po-button>\r\n    </div>\r\n  </po-page-header>\r\n\r\n  <!-- CONTENT -->\r\n  <po-page-content>\r\n    <ng-content></ng-content>\r\n  </po-page-content>\r\n</po-page>\r\n"
                },] }
    ];
    PoPageDefaultComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: PoLanguageService },
        { type: i0.Renderer2 },
        { type: router.Router }
    ]; };

    var poPageDetailLiteralsDefault = {
        en: {
            back: 'Back',
            edit: 'Edit',
            remove: 'Remove'
        },
        es: {
            back: 'Volver',
            edit: 'Editar',
            remove: 'Eliminar'
        },
        pt: {
            back: 'Voltar',
            edit: 'Editar',
            remove: 'Remover'
        },
        ru: {
            back: 'возвращение',
            edit: 'редактировать',
            remove: 'удаление'
        }
    };
    /**
     * @description
     *
     * O componente **po-page-detail** é utilizado como container principal para a tela de
     * detalhamento de um registro, tendo a possibilidade de usar as ações de "Voltar", "Editar" e "Remover".
     */
    var PoPageDetailBaseComponent = /** @class */ (function () {
        function PoPageDetailBaseComponent(languageService) {
            /**
             * Evento que será disparado ao clicar no botão de "Voltar".
             *
             * ```
             * <po-page-detail (p-back)="myBackFunction()">
             * </po-page-detail>
             * ```
             *
             * > Caso não utilizar esta propriedade, o botão de "Voltar" não será exibido.
             */
            this.back = new i0.EventEmitter();
            /**
             * Evento que será disparado ao clicar no botão de "Editar".
             *
             * ```
             * <po-page-detail (p-edit)="myEditFunction()">
             * </po-page-detail>
             * ```
             *
             * > Caso não utilizar esta propriedade, o botão de "Editar" não será exibido.
             */
            this.edit = new i0.EventEmitter();
            /**
             * Evento que será disparado ao clicar no botão de "Remover".
             *
             * ```
             * <po-page-detail (p-remove)="myRemoveFunction()">
             * </po-page-detail>
             * ```
             *
             * > Caso não utilizar esta propriedade, o botão de "Remover" não será exibido.
             */
            this.remove = new i0.EventEmitter();
            this.language = languageService.getShortLanguage();
        }
        Object.defineProperty(PoPageDetailBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poPageDetailLiteralsDefault[this.language];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-page-detail`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoPageDetailLiterals = {
             *    edit: 'Edição',
             *    remove: 'Exclusão',
             *    back: 'Menu'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: PoPageDetailLiterals = {
             *    remove: 'Excluir registro permanentemente'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-page-detail
             *   [p-literals]="customLiterals">
             * </po-page-detail>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do
             * [`PoI18nService`](/documentation/po-i18n) ou do browser.
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = Object.assign(Object.assign(Object.assign({}, poPageDetailLiteralsDefault[poLocaleDefault]), poPageDetailLiteralsDefault[this.language]), value);
                }
                else {
                    this._literals = poPageDetailLiteralsDefault[this.language];
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoPageDetailBaseComponent.prototype, "title", {
            get: function () {
                return this._title;
            },
            /** Título da página. */
            set: function (title) {
                var _this = this;
                this._title = title;
                setTimeout(function () { return _this.poPageContent.recalculateHeaderSize(); });
            },
            enumerable: false,
            configurable: true
        });
        return PoPageDetailBaseComponent;
    }());
    PoPageDetailBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoPageDetailBaseComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoPageDetailBaseComponent.propDecorators = {
        poPageContent: [{ type: i0.ViewChild, args: [PoPageContentComponent, { static: true },] }],
        breadcrumb: [{ type: i0.Input, args: ['p-breadcrumb',] }],
        back: [{ type: i0.Output, args: ['p-back',] }],
        edit: [{ type: i0.Output, args: ['p-edit',] }],
        remove: [{ type: i0.Output, args: ['p-remove',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        title: [{ type: i0.Input, args: ['p-title',] }]
    };

    /**
     * @docsExtends PoPageDetailBaseComponent
     *
     * @example
     *
     * <example name="po-page-detail-basic" title="PO Page Detail Basic">
     *  <file name="sample-po-page-detail-basic/sample-po-page-detail-basic.component.html"> </file>
     *  <file name="sample-po-page-detail-basic/sample-po-page-detail-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-detail-labs" title="PO Page Detail Labs">
     *  <file name="sample-po-page-detail-labs/sample-po-page-detail-labs.component.html"> </file>
     *  <file name="sample-po-page-detail-labs/sample-po-page-detail-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-detail-user" title="PO Page Detail - User">
     *  <file name="sample-po-page-detail-user/sample-po-page-detail-user.component.html"> </file>
     *  <file name="sample-po-page-detail-user/sample-po-page-detail-user.component.ts"> </file>
     * </example>
     */
    var PoPageDetailComponent = /** @class */ (function (_super) {
        __extends(PoPageDetailComponent, _super);
        function PoPageDetailComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoPageDetailComponent.prototype.hasAnyAction = function () {
            return this.hasEvent('back') || this.hasEvent('edit') || this.hasEvent('remove');
        };
        PoPageDetailComponent.prototype.hasEditFn = function (property) {
            if (property === 'icon') {
                return this.hasEvent('edit') ? '' : 'po-icon-delete';
            }
            else if (property === 'type') {
                return this.hasEvent('edit') ? 'default' : 'primary';
            }
            else {
                return '';
            }
        };
        PoPageDetailComponent.prototype.hasEditOrRemoveFn = function (property) {
            if (property === 'icon') {
                return this.hasEvent('edit') || this.hasEvent('remove') ? '' : 'po-icon-arrow-left';
            }
            else if (property === 'type') {
                return this.hasEvent('edit') || this.hasEvent('remove') ? 'default' : 'primary';
            }
            else {
                return '';
            }
        };
        PoPageDetailComponent.prototype.hasEvent = function (event) {
            return !!this[event].observers.length;
        };
        PoPageDetailComponent.prototype.hasPageHeader = function () {
            return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));
        };
        return PoPageDetailComponent;
    }(PoPageDetailBaseComponent));
    PoPageDetailComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-page-detail',
                    template: "<po-page>\r\n  <!-- HEADER -->\r\n  <po-page-header *ngIf=\"hasPageHeader()\" [p-breadcrumb]=\"breadcrumb\" [p-title]=\"title\">\r\n    <!-- OPERATIONS -->\r\n    <div *ngIf=\"hasAnyAction()\" class=\"po-page-header-actions\">\r\n      <po-button\r\n        *ngIf=\"hasEvent('back')\"\r\n        [p-icon]=\"hasEditOrRemoveFn('icon')\"\r\n        [p-label]=\"literals.back\"\r\n        [p-type]=\"hasEditOrRemoveFn('type')\"\r\n        (p-click)=\"back.emit()\"\r\n      >\r\n      </po-button>\r\n\r\n      <po-button\r\n        *ngIf=\"hasEvent('remove')\"\r\n        [p-icon]=\"hasEditFn('icon')\"\r\n        [p-label]=\"literals.remove\"\r\n        [p-type]=\"hasEditFn('type')\"\r\n        (p-click)=\"remove.emit()\"\r\n      >\r\n      </po-button>\r\n\r\n      <po-button\r\n        *ngIf=\"hasEvent('edit')\"\r\n        p-icon=\"po-icon-edit\"\r\n        p-type=\"primary\"\r\n        [p-label]=\"literals.edit\"\r\n        (p-click)=\"edit.emit()\"\r\n      >\r\n      </po-button>\r\n    </div>\r\n  </po-page-header>\r\n\r\n  <!-- CONTENT -->\r\n  <po-page-content>\r\n    <ng-content> </ng-content>\r\n  </po-page-content>\r\n</po-page>\r\n"
                },] }
    ];

    var poPageEditLiteralsDefault = {
        en: {
            cancel: 'Cancel',
            save: 'Save',
            saveNew: 'Save and New'
        },
        es: {
            cancel: 'Cancelar',
            save: 'Guardar',
            saveNew: 'Guardar y Nuevo'
        },
        pt: {
            cancel: 'Cancelar',
            save: 'Salvar',
            saveNew: 'Salvar e Novo'
        },
        ru: {
            cancel: 'отменить',
            save: 'экономить',
            saveNew: 'Сохранить и новый'
        }
    };
    /**
     * @description
     *
     * O componente **po-page-edit** é utilizado como container principal para tela de edição ou adição de um
     * registro, tendo a possibilidade de usar as ações de "Salvar", "Salvar e Novo" e "Cancelar".
     *
     * Os botões "Salvar" e "Salvar e Novo" podem ser habilitados/desabilitados utilizando a propriedade `p-disable-submit`.
     * Esta propriedade pode ser utilizada para desabilitar os botões caso exista um formulário inválido na página ou alguma
     * regra de negócio não tenha sido atendida.
     */
    var PoPageEditBaseComponent = /** @class */ (function () {
        function PoPageEditBaseComponent(languageService) {
            /**
             * Evento que será disparado ao clicar no botão de "Cancelar".
             *
             * ```
             * <po-page-edit (p-cancel)="myCancelFunction()">
             * </po-page-edit>
             * ```
             *
             * > Caso não utilizar esta propriedade, o botão de "Cancelar" não será exibido.
             */
            this.cancel = new i0.EventEmitter();
            /**
             * Evento que será disparado ao clicar no botão de "Salvar".
             *
             * ```
             * <po-page-edit (p-save)="mySaveFunction()">
             * </po-page-edit>
             * ```
             *
             * > Caso não utilizar esta propriedade, o botão de "Salvar" não será exibido.
             */
            this.save = new i0.EventEmitter();
            /**
             * Evento que será disparado ao clicar no botão de "Salvar e Novo".
             *
             * ```
             * <po-page-edit (p-save-new)="mySaveNewFunction()">
             * </po-page-edit>
             * ```
             *
             * > Caso não utilizar esta propriedade, o botão de "Salvar e Novo" não será exibido.
             */
            this.saveNew = new i0.EventEmitter();
            this.language = languageService.getShortLanguage();
        }
        Object.defineProperty(PoPageEditBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poPageEditLiteralsDefault[this.language];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-page-edit`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoPageEditLiterals = {
             *    cancel: 'Voltar',
             *    save: 'Confirmar',
             *    saveNew: 'Confirmar e criar um novo'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: PoPageEditLiterals = {
             *    cancel: 'Cancelar processo'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-page-edit
             *   [p-literals]="customLiterals">
             * </po-page-edit>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do
             * [`PoI18nService`](/documentation/po-i18n) ou do browser.
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = Object.assign(Object.assign(Object.assign({}, poPageEditLiteralsDefault[poLocaleDefault]), poPageEditLiteralsDefault[this.language]), value);
                }
                else {
                    this._literals = poPageEditLiteralsDefault[this.language];
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoPageEditBaseComponent.prototype, "title", {
            get: function () {
                return this._title;
            },
            /** Título da página. */
            set: function (title) {
                var _this = this;
                this._title = title;
                setTimeout(function () { return _this.poPageContent.recalculateHeaderSize(); });
            },
            enumerable: false,
            configurable: true
        });
        return PoPageEditBaseComponent;
    }());
    PoPageEditBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoPageEditBaseComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoPageEditBaseComponent.propDecorators = {
        poPageContent: [{ type: i0.ViewChild, args: [PoPageContentComponent, { static: true },] }],
        breadcrumb: [{ type: i0.Input, args: ['p-breadcrumb',] }],
        disableSubmit: [{ type: i0.Input, args: ['p-disable-submit',] }],
        cancel: [{ type: i0.Output, args: ['p-cancel',] }],
        save: [{ type: i0.Output, args: ['p-save',] }],
        saveNew: [{ type: i0.Output, args: ['p-save-new',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        title: [{ type: i0.Input, args: ['p-title',] }]
    };

    /**
     * @docsExtends PoPageEditBaseComponent
     *
     * @example
     *
     * <example name="po-page-edit-basic" title="PO Page Edit Basic">
     *  <file name="sample-po-page-edit-basic/sample-po-page-edit-basic.component.html"> </file>
     *  <file name="sample-po-page-edit-basic/sample-po-page-edit-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-edit-labs" title="PO Page Edit Labs">
     *  <file name="sample-po-page-edit-labs/sample-po-page-edit-labs.component.html"> </file>
     *  <file name="sample-po-page-edit-labs/sample-po-page-edit-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-edit-user" title="PO Page Edit - User">
     *  <file name="sample-po-page-edit-user/sample-po-page-edit-user.component.html"> </file>
     *  <file name="sample-po-page-edit-user/sample-po-page-edit-user.component.ts"> </file>
     * </example>
     */
    var PoPageEditComponent = /** @class */ (function (_super) {
        __extends(PoPageEditComponent, _super);
        function PoPageEditComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoPageEditComponent.prototype.getIcon = function (icon) {
            if (icon === 'cancel') {
                return this.isPrimaryAction('cancel') ? 'po-icon-close' : '';
            }
            if (icon === 'saveNew') {
                return this.isPrimaryAction('saveNew') ? 'po-icon-ok' : '';
            }
            return '';
        };
        PoPageEditComponent.prototype.getType = function (type) {
            var isCancelPrimaryAction = type === 'cancel' && this.isPrimaryAction('cancel');
            var isSaveNewPrimaryAction = type === 'saveNew' && this.isPrimaryAction('saveNew');
            return isCancelPrimaryAction || isSaveNewPrimaryAction ? 'primary' : 'default';
        };
        PoPageEditComponent.prototype.hasAnyAction = function () {
            return this.hasEvent('cancel') || this.hasEvent('saveNew') || this.hasEvent('save');
        };
        PoPageEditComponent.prototype.hasPageHeader = function () {
            return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));
        };
        PoPageEditComponent.prototype.hasEvent = function (event) {
            return !!this[event].observers.length;
        };
        PoPageEditComponent.prototype.isPrimaryAction = function (action) {
            var hasSaveAction = this.hasEvent('save');
            if (action === 'saveNew') {
                return !hasSaveAction;
            }
            if (action === 'cancel') {
                var hasSaveNewAction = this.hasEvent('saveNew');
                return !hasSaveNewAction && !hasSaveAction;
            }
            return false;
        };
        return PoPageEditComponent;
    }(PoPageEditBaseComponent));
    PoPageEditComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-page-edit',
                    template: "<po-page>\r\n  <!-- HEADER -->\r\n  <po-page-header *ngIf=\"hasPageHeader()\" [p-breadcrumb]=\"breadcrumb\" [p-title]=\"title\">\r\n    <!-- OPERATIONS -->\r\n    <div *ngIf=\"hasAnyAction()\" class=\"po-page-header-actions\">\r\n      <po-button\r\n        *ngIf=\"hasEvent('cancel')\"\r\n        [p-icon]=\"getIcon('cancel')\"\r\n        [p-label]=\"literals.cancel\"\r\n        [p-type]=\"getType('cancel')\"\r\n        (p-click)=\"cancel.emit()\"\r\n      >\r\n      </po-button>\r\n\r\n      <po-button\r\n        *ngIf=\"hasEvent('saveNew')\"\r\n        [p-disabled]=\"disableSubmit\"\r\n        [p-icon]=\"getIcon('saveNew')\"\r\n        [p-label]=\"literals.saveNew\"\r\n        [p-type]=\"getType('saveNew')\"\r\n        (p-click)=\"saveNew.emit()\"\r\n      >\r\n      </po-button>\r\n\r\n      <po-button\r\n        *ngIf=\"hasEvent('save')\"\r\n        p-icon=\"po-icon-ok\"\r\n        p-type=\"primary\"\r\n        [p-disabled]=\"disableSubmit\"\r\n        [p-label]=\"literals.save\"\r\n        (p-click)=\"save.emit()\"\r\n      >\r\n      </po-button>\r\n    </div>\r\n  </po-page-header>\r\n\r\n  <!-- CONTENT -->\r\n  <po-page-content>\r\n    <ng-content> </ng-content>\r\n  </po-page-content>\r\n</po-page>\r\n"
                },] }
    ];

    /**
     * @docsPrivate
     *
     * @description
     *
     * O componente **po-page-header** é responsável pelo título da página e container dos botões de ações dos componentes
     * po-page-list e po-page-base.
     */
    var PoPageHeaderBaseComponent = /** @class */ (function () {
        function PoPageHeaderBaseComponent() {
        }
        Object.defineProperty(PoPageHeaderBaseComponent.prototype, "breadcrumb", {
            get: function () {
                return this._breadcrumb;
            },
            /** Objeto com propriedades do breadcrumb. */
            set: function (value) {
                this._breadcrumb = value;
            },
            enumerable: false,
            configurable: true
        });
        return PoPageHeaderBaseComponent;
    }());
    PoPageHeaderBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoPageHeaderBaseComponent.propDecorators = {
        title: [{ type: i0.Input, args: ['p-title',] }],
        breadcrumb: [{ type: i0.Input, args: ['p-breadcrumb',] }]
    };

    /**
     * @docsPrivate
     * @docsExtends PoPageHeaderBaseComponent
     */
    var PoPageHeaderComponent = /** @class */ (function (_super) {
        __extends(PoPageHeaderComponent, _super);
        function PoPageHeaderComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PoPageHeaderComponent;
    }(PoPageHeaderBaseComponent));
    PoPageHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-page-header',
                    template: "<div class=\"po-page-header\">\r\n  <!-- Breadcrumb -->\r\n  <div class=\"po-page-header-breadcrumb\" *ngIf=\"breadcrumb && breadcrumb.items.length\">\r\n    <po-breadcrumb\r\n      [p-favorite-service]=\"breadcrumb.favorite\"\r\n      [p-items]=\"breadcrumb.items\"\r\n      [p-params-service]=\"breadcrumb.params\"\r\n    >\r\n    </po-breadcrumb>\r\n  </div>\r\n\r\n  <div class=\"po-pt-1\">\r\n    <!-- Titulo -->\r\n    <h1 class=\"po-page-header-title\" *ngIf=\"title\">\r\n      {{ title }}\r\n    </h1>\r\n\r\n    <!-- Opera\u00E7\u00F5es -->\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n"
                },] }
    ];

    var poPageListLiteralsDefault = {
        en: {
            otherActions: 'Other actions'
        },
        es: {
            otherActions: 'Otras acciones'
        },
        pt: {
            otherActions: 'Outras ações'
        },
        ru: {
            otherActions: 'Другие действия'
        }
    };
    /**
     * @description
     *
     * O componente `po-page-list` é utilizado como o container principal para as telas de listagem de dados,
     * podendo ser apresentado como lista ou tabela.
     *
     * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
     * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [po-icon-search](/guides/icons)
     * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
     *
     * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
     * [`po-disclaimer-group`](/documentation/po-disclaimer-group).
     */
    var PoPageListBaseComponent = /** @class */ (function () {
        function PoPageListBaseComponent(languageService) {
            this.visibleActions = [];
            this._actions = [];
            this.language = languageService.getShortLanguage();
        }
        Object.defineProperty(PoPageListBaseComponent.prototype, "actions", {
            get: function () {
                return this._actions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`.
             */
            set: function (actions) {
                this._actions = Array.isArray(actions) ? actions : [];
                this.visibleActions = this.actions.filter(function (action) { return action.visible !== false; });
                this.setDropdownActions();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoPageListBaseComponent.prototype, "disclaimerGroup", {
            get: function () {
                return this._disclaimerGroup;
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto que implementa as propriedades da interface `PoDisclaimerGroup`.
             */
            set: function (value) {
                if (!value) {
                    value = {};
                }
                this._disclaimerGroup = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoPageListBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poPageListLiteralsDefault[this.language];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-page-list`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoPageListLiterals = {
             *    otherActions: 'Mais ações'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: PoPageListLiterals = {
             *    otherActions: 'Ações da página'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-page-list
             *   [p-literals]="customLiterals">
             * </po-page-list>
             * ```
             *
             * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = Object.assign(Object.assign(Object.assign({}, poPageListLiteralsDefault[poLocaleDefault]), poPageListLiteralsDefault[this.language]), value);
                }
                else {
                    this._literals = poPageListLiteralsDefault[this.language];
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoPageListBaseComponent.prototype, "title", {
            get: function () {
                return this._title;
            },
            /** Título da página. */
            set: function (title) {
                var _this = this;
                this._title = title;
                setTimeout(function () { return _this.poPageContent.recalculateHeaderSize(); });
            },
            enumerable: false,
            configurable: true
        });
        return PoPageListBaseComponent;
    }());
    PoPageListBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoPageListBaseComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoPageListBaseComponent.propDecorators = {
        poPageContent: [{ type: i0.ViewChild, args: [PoPageContentComponent, { static: true },] }],
        breadcrumb: [{ type: i0.Input, args: ['p-breadcrumb',] }],
        filter: [{ type: i0.Input, args: ['p-filter',] }],
        actions: [{ type: i0.Input, args: ['p-actions',] }],
        disclaimerGroup: [{ type: i0.Input, args: ['p-disclaimer-group',] }],
        literals: [{ type: i0.Input, args: ['p-literals',] }],
        title: [{ type: i0.Input, args: ['p-title',] }]
    };

    /**
     * @docsExtends PoPageListBaseComponent
     *
     * @example
     *
     * <example name="po-page-list-basic" title="PO Page List Basic">
     *  <file name="sample-po-page-list-basic/sample-po-page-list-basic.component.html"> </file>
     *  <file name="sample-po-page-list-basic/sample-po-page-list-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-list-labs" title="PO Page List Labs">
     *  <file name="sample-po-page-list-labs/sample-po-page-list-labs.component.html"> </file>
     *  <file name="sample-po-page-list-labs/sample-po-page-list-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-list-hiring-processes" title="PO Page List - Hiring Processes">
     *  <file name="sample-po-page-list-hiring-processes/sample-po-page-list-hiring-processes.component.html"> </file>
     *  <file name="sample-po-page-list-hiring-processes/sample-po-page-list-hiring-processes.component.ts"> </file>
     *  <file name="sample-po-page-list-hiring-processes/sample-po-page-list-hiring-processes.service.ts"> </file>
     * </example>
     */
    var PoPageListComponent = /** @class */ (function (_super) {
        __extends(PoPageListComponent, _super);
        /* istanbul ignore next */
        function PoPageListComponent(viewRef, languageService, renderer, router, changeDetector) {
            var _this = _super.call(this, languageService) || this;
            _this.renderer = renderer;
            _this.router = router;
            _this.changeDetector = changeDetector;
            _this.limitPrimaryActions = 3;
            _this.callFunction = callFunction;
            _this.isRecalculate = true;
            _this.maxWidthMobile = 480;
            _this.initializeListeners();
            return _this;
        }
        PoPageListComponent.prototype.ngOnInit = function () {
            this.advancedSearch = this.initializeFixedLiterals();
        };
        PoPageListComponent.prototype.ngAfterContentInit = function () {
            this.setIsMobile();
            this.setDropdownActions();
        };
        PoPageListComponent.prototype.ngOnChanges = function (changes) {
            this.setDropdownActions();
        };
        PoPageListComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        PoPageListComponent.prototype.actionIsDisabled = function (action) {
            return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;
        };
        PoPageListComponent.prototype.callAction = function (item) {
            if (item.url) {
                isExternalLink(item.url) ? openExternalLink(item.url) : this.router.navigate([item.url]);
            }
            else if (item.action) {
                item.action();
            }
        };
        PoPageListComponent.prototype.hasPageHeader = function () {
            return !!(this.title ||
                (this.visibleActions && this.visibleActions.length) ||
                (this.breadcrumb && this.breadcrumb.items.length));
        };
        PoPageListComponent.prototype.hasCustomFilterSize = function () {
            if (!this.filter) {
                return false;
            }
            return this.filter.width >= 1 && this.filter.width <= 6;
        };
        PoPageListComponent.prototype.filterSizeClass = function (width) {
            var _a, _b, _c;
            var smWidth = Math.max(((_a = this.filter) === null || _a === void 0 ? void 0 : _a.advancedAction) ? 6 : 2, width);
            var mdWidth = Math.max(((_b = this.filter) === null || _b === void 0 ? void 0 : _b.advancedAction) ? 4 : 1, width);
            if ((_c = this.filter) === null || _c === void 0 ? void 0 : _c.advancedAction) {
                width = Math.max(width, 2);
            }
            return "po-sm-" + smWidth + " po-md-" + mdWidth + " po-lg-" + width + " po-xl-" + width;
        };
        PoPageListComponent.prototype.setDropdownActions = function () {
            if (this.visibleActions.length > this.limitPrimaryActions) {
                this.dropdownActions = this.visibleActions.slice(this.limitPrimaryActions - 1);
            }
        };
        PoPageListComponent.prototype.callActionFilter = function (field) {
            this.filter[field](this.filterInput.nativeElement.value);
            this.changeDetector.detectChanges();
        };
        /**
         * Limpa o campo de pesquisa.
         */
        PoPageListComponent.prototype.clearInputSearch = function () {
            this.filterInput.nativeElement.value = null;
        };
        PoPageListComponent.prototype.onkeypress = function (key) {
            if (key === 13) {
                this.callActionFilter('action');
            }
        };
        // Recebe evento change do disclaimer e recalcula tela
        PoPageListComponent.prototype.onChangeDisclaimerGroup = function (disclaimers) {
            if ((disclaimers && disclaimers.length && this.isRecalculate) ||
                (disclaimers.length === 0 && !this.isRecalculate)) {
                this.poPageContent.recalculateHeaderSize();
                this.isRecalculate = !this.isRecalculate;
            }
            if (this.disclaimerGroup && this.disclaimerGroup.change) {
                this.disclaimerGroup.change(disclaimers);
            }
        };
        PoPageListComponent.prototype.onRemoveDisclaimer = function (removeData) {
            if (this.disclaimerGroup.remove) {
                this.disclaimerGroup.remove(removeData);
            }
        };
        PoPageListComponent.prototype.onRemoveAllDisclaimers = function (removedDisclaimers) {
            if (this.disclaimerGroup.removeAll) {
                this.disclaimerGroup.removeAll(removedDisclaimers);
            }
        };
        PoPageListComponent.prototype.initializeFixedLiterals = function () {
            var literal = {
                pt: {
                    advancedSearch: 'Busca avançada'
                },
                en: {
                    advancedSearch: 'Advanced search'
                },
                es: {
                    advancedSearch: 'Búsqueda avanzada'
                },
                ru: {
                    advancedSearch: 'полный поиск'
                }
            };
            return literal[this.language].advancedSearch;
        };
        PoPageListComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
                _this.onResize(event);
            });
        };
        PoPageListComponent.prototype.removeListeners = function () {
            this.resizeListener();
        };
        PoPageListComponent.prototype.onResize = function (event) {
            var width = event.target.innerWidth;
            if (width < this.maxWidthMobile) {
                this.isMobile = true;
                this.limitPrimaryActions = 2;
                this.setDropdownActions();
            }
            else {
                this.isMobile = false;
                this.limitPrimaryActions = 3;
                this.setDropdownActions();
            }
        };
        PoPageListComponent.prototype.setIsMobile = function () {
            if (window.innerWidth < this.maxWidthMobile) {
                this.isMobile = true;
                this.limitPrimaryActions = 2;
            }
        };
        return PoPageListComponent;
    }(PoPageListBaseComponent));
    PoPageListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-page-list',
                    template: "<po-page>\r\n  <!-- HEADER -->\r\n  <po-page-header\r\n    *ngIf=\"hasPageHeader()\"\r\n    [class.po-page-list-header-padding]=\"filter && !visibleActions.length\"\r\n    [p-breadcrumb]=\"breadcrumb\"\r\n    [p-title]=\"title\"\r\n  >\r\n    <!-- OPERATIONS -->\r\n    <div class=\"po-page-list-operations\">\r\n      <div class=\"po-page-list-actions\" [class.po-page-list-actions-padding]=\"filter\">\r\n        <po-button\r\n          *ngIf=\"visibleActions[0]\"\r\n          p-type=\"primary\"\r\n          [p-disabled]=\"actionIsDisabled(actions[0])\"\r\n          [p-icon]=\"visibleActions[0].icon\"\r\n          [p-label]=\"visibleActions[0].label\"\r\n          (p-click)=\"callAction(visibleActions[0])\"\r\n        >\r\n        </po-button>\r\n\r\n        <po-button\r\n          *ngIf=\"visibleActions[1] && (visibleActions.length === 2 || !isMobile)\"\r\n          [p-disabled]=\"actionIsDisabled(actions[1])\"\r\n          [p-label]=\"visibleActions[1].label\"\r\n          (p-click)=\"callAction(visibleActions[1])\"\r\n        >\r\n        </po-button>\r\n\r\n        <po-button\r\n          *ngIf=\"visibleActions.length === 3 && visibleActions[2] && !isMobile\"\r\n          [p-disabled]=\"actionIsDisabled(visibleActions[2])\"\r\n          [p-label]=\"visibleActions[2].label\"\r\n          (p-click)=\"callAction(visibleActions[2])\"\r\n        >\r\n        </po-button>\r\n\r\n        <po-dropdown\r\n          *ngIf=\"visibleActions.length > limitPrimaryActions\"\r\n          [p-actions]=\"dropdownActions\"\r\n          [p-label]=\"literals.otherActions\"\r\n        >\r\n        </po-dropdown>\r\n      </div>\r\n\r\n      <!-- FILTER -->\r\n      <div\r\n        class=\"po-page-list-filter-wrapper\"\r\n        *ngIf=\"filter\"\r\n        [ngClass]=\"hasCustomFilterSize() ? filterSizeClass(filter.width) : ''\"\r\n      >\r\n        <div\r\n          class=\"po-field-container-content po-page-filter-content\"\r\n          [ngClass]=\"\r\n            hasCustomFilterSize()\r\n              ? filter.advancedAction\r\n                ? 'po-page-filter-input-variable-size'\r\n                : 'po-page-filter-input-variable-size-wo-adv-search'\r\n              : ''\r\n          \"\r\n        >\r\n          <div class=\"po-field-icon-container-right\">\r\n            <span class=\"po-icon po-icon-search po-field-icon\" (click)=\"callActionFilter('action')\"> </span>\r\n          </div>\r\n\r\n          <input\r\n            #filterInput\r\n            class=\"po-input po-input-icon-right\"\r\n            name=\"model\"\r\n            type=\"text\"\r\n            [placeholder]=\"filter.placeholder || ''\"\r\n            (keypress)=\"onkeypress($event.keyCode)\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"po-page-list-filter-search\" *ngIf=\"filter.advancedAction\">\r\n          <span\r\n            class=\"po-page-list-filter-search-link\"\r\n            tabindex=\"0\"\r\n            (click)=\"callActionFilter('advancedAction')\"\r\n            (keydown.enter)=\"callActionFilter('advancedAction')\"\r\n          >\r\n            {{ advancedSearch }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- DISCLAIMER -->\r\n    <po-disclaimer-group\r\n      *ngIf=\"!!disclaimerGroup\"\r\n      [class.po-page-list-disclaimer-group]=\"!!disclaimerGroup?.disclaimers?.length\"\r\n      [p-disclaimers]=\"disclaimerGroup?.disclaimers\"\r\n      [p-hide-remove-all]=\"disclaimerGroup?.hideRemoveAll\"\r\n      [p-title]=\"disclaimerGroup?.title\"\r\n      (p-change)=\"onChangeDisclaimerGroup($event)\"\r\n      (p-remove)=\"onRemoveDisclaimer($event)\"\r\n      (p-remove-all)=\"onRemoveAllDisclaimers($event)\"\r\n    >\r\n    </po-disclaimer-group>\r\n  </po-page-header>\r\n\r\n  <!-- CONTENT -->\r\n  <po-page-content>\r\n    <ng-content></ng-content>\r\n  </po-page-content>\r\n</po-page>\r\n"
                },] }
    ];
    PoPageListComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: PoLanguageService },
        { type: i0.Renderer2 },
        { type: router.Router },
        { type: i0.ChangeDetectorRef }
    ]; };
    PoPageListComponent.propDecorators = {
        filterInput: [{ type: i0.ViewChild, args: ['filterInput',] }],
        poPageContent: [{ type: i0.ViewChild, args: [PoPageContentComponent, { static: true },] }]
    };

    /**
     * @description
     *
     * O componente `po-page-slide` é utilizado para incluir conteúdos secundários
     * adicionando controles e navegações adicionais, mas mantendo o usuário na
     * página principal.
     *
     * Este componente é ativado a partir do método `#open()` e pode ser  encerrado
     * através do botão que encontra-se no cabeçalho do mesmo ou através do método
     * `#close()`.
     *
     * > Para o correto funcionamento do componente `po-page-slide`, deve ser
     * > importado o módulo `BrowserAnimationsModule` no módulo principal da sua
     * > aplicação.
     */
    var PoPageSlideBaseComponent = /** @class */ (function () {
        function PoPageSlideBaseComponent() {
            /**
             * @optional
             *
             * @description
             *
             * Oculta o botão de encerramento da página.
             *
             * Esta opção só é possível se a propriedade `p-click-out` estiver habilitada.
             *
             * @default `false`
             */
            this.hideClose = false;
            /**
             * @optional
             *
             * @description
             *
             * Define se permite o encerramento da página ao clicar fora da mesma.
             *
             * @default `false`
             */
            this.clickOut = false;
            // Controla se a página está ou não oculta, por padrão é oculto.
            this.hidden = true;
            this._size = 'md';
        }
        Object.defineProperty(PoPageSlideBaseComponent.prototype, "size", {
            get: function () {
                return this._size;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o tamanho da página.
             *
             * Valores válidos:
             *  - `sm` (pequeno)
             *  - `md` (médio)
             *  - `lg` (grande)
             *  - `xl` (extra-grande)
             *  - `auto` (automático)
             *
             * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
             *
             * @default `md`
             */
            set: function (value) {
                var sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
                this._size = sizes.indexOf(value) > -1 ? value : 'md';
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Ativa a visualização da página.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo
         * ser utilizado o `ViewChild` da seguinte forma:
         *
         * ```typescript
         * import { PoPageSlideComponent } from '@po/ng-components';
         *
         * ...
         *
         * @ViewChild(PoPageSlideComponent, { static: true }) pageSlide: PoPageSlideComponent;
         *
         * public openPage() {
         *   this.pageSlide.open();
         * }
         * ```
         */
        PoPageSlideBaseComponent.prototype.open = function () {
            // Evita com que a página seja aberta sem que seja possível fechá-la.
            if (this.hideClose && !this.clickOut) {
                this.hideClose = false;
            }
            this.hidden = false;
        };
        /**
         * Encerra a visualização da página.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo
         * ser utilizado o `ViewChild` da seguinte forma:
         *
         * ```typescript
         * import { PoPageSlideComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoPageSlideComponent, { static: true }) pageSlide: PoPageSlideComponent;
         *
         * public closePage() {
         *   this.pageSlide.close();
         * }
         * ```
         */
        PoPageSlideBaseComponent.prototype.close = function () {
            this.hidden = true;
        };
        return PoPageSlideBaseComponent;
    }());
    PoPageSlideBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoPageSlideBaseComponent.propDecorators = {
        title: [{ type: i0.Input, args: ['p-title',] }],
        subtitle: [{ type: i0.Input, args: ['p-subtitle',] }],
        hideClose: [{ type: i0.Input, args: ['p-hide-close',] }],
        clickOut: [{ type: i0.Input, args: ['p-click-out',] }],
        size: [{ type: i0.Input, args: ['p-size',] }]
    };
    __decorate([
        InputBoolean()
    ], PoPageSlideBaseComponent.prototype, "hideClose", void 0);
    __decorate([
        InputBoolean()
    ], PoPageSlideBaseComponent.prototype, "clickOut", void 0);

    /**
     * @docsExtends PoPageSlideBaseComponent
     *
     * @example
     *
     * <example name="po-page-slide-basic" title="PO Page Slide Basic">
     *  <file name="sample-po-page-slide-basic/sample-po-page-slide-basic.component.html"> </file>
     *  <file name="sample-po-page-slide-basic/sample-po-page-slide-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-slide-labs" title="PO Page Slide Labs">
     *  <file name="sample-po-page-slide-labs/sample-po-page-slide-labs.component.html"> </file>
     *  <file name="sample-po-page-slide-labs/sample-po-page-slide-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-slide-configuration" title="PO Page Slide - Configuration">
     *  <file name="sample-po-page-slide-configuration/sample-po-page-slide-configuration.component.html"> </file>
     *  <file name="sample-po-page-slide-configuration/sample-po-page-slide-configuration.component.ts"> </file>
     * </example>
     */
    var PoPageSlideComponent = /** @class */ (function (_super) {
        __extends(PoPageSlideComponent, _super);
        function PoPageSlideComponent(poActiveOverlayService) {
            var _this = _super.call(this) || this;
            _this.poActiveOverlayService = poActiveOverlayService;
            _this.id = uuid();
            _this.loadingCompleted = new rxjs.ReplaySubject();
            return _this;
        }
        Object.defineProperty(PoPageSlideComponent.prototype, "pageContent", {
            get: function () {
                return this._pageContent;
            },
            set: function (pageContent) {
                if (pageContent) {
                    this._pageContent = pageContent;
                    this.loadingCompleted.next();
                }
            },
            enumerable: false,
            configurable: true
        });
        PoPageSlideComponent.prototype.open = function () {
            this.sourceElement = document.activeElement;
            _super.prototype.open.call(this);
            this.loadingCompleted.pipe(operators.take(1)).pipe(operators.delay(0)).subscribe(this.handleFocus.bind(this));
        };
        PoPageSlideComponent.prototype.close = function () {
            this.poActiveOverlayService.activeOverlay.pop();
            _super.prototype.close.call(this);
            this.removeEventListeners();
            this.sourceElement.focus();
        };
        PoPageSlideComponent.prototype.onClickOut = function (event) {
            if (this.clickOut && !this.pageContent.nativeElement.contains(event.target)) {
                this.close();
            }
        };
        PoPageSlideComponent.prototype.handleFocus = function () {
            this.poActiveOverlayService.activeOverlay.push(this.id);
            this.loadFirstElement();
            this.initFocus();
            document.addEventListener('focus', this.focusEvent, true);
        };
        PoPageSlideComponent.prototype.initFocus = function () {
            var _this = this;
            // O foco não pode sair da página.
            this.focusEvent = function (event) {
                if (!_this.pageContent.nativeElement.contains(event.target) &&
                    _this.poActiveOverlayService.activeOverlay[_this.poActiveOverlayService.activeOverlay.length - 1] === _this.id) {
                    event.stopPropagation();
                    _this.firstElement.focus();
                }
            };
            if (this.hideClose) {
                this.firstElement.focus();
            }
            else {
                var elements = getFocusableElements(this.pageContent.nativeElement);
                var element = elements[1] || this.pageContent.nativeElement;
                element.focus();
            }
        };
        PoPageSlideComponent.prototype.loadFirstElement = function () {
            this.firstElement = getFocusableElements(this.pageContent.nativeElement)[0] || this.pageContent.nativeElement;
        };
        PoPageSlideComponent.prototype.removeEventListeners = function () {
            document.removeEventListener('focus', this.focusEvent, true);
            this.loadingCompleted.complete();
        };
        return PoPageSlideComponent;
    }(PoPageSlideBaseComponent));
    PoPageSlideComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-page-slide',
                    template: "<div class=\"po-page-slide\" tabindex=\"0\" *ngIf=\"!hidden\" [@fade]>\r\n  <div class=\"po-page-slide-overlay\" (mousedown)=\"onClickOut($event)\">\r\n    <div class=\"po-page-slide-container po-page-slide-right po-page-slide-{{ size }}\" [@slide]>\r\n      <div class=\"po-page-slide-content\" tabindex=\"-1\" #pageContent>\r\n        <div class=\"po-page-slide-header\">\r\n          <div class=\"po-page-slide-title\">\r\n            <span>{{ title }}</span>\r\n            <button *ngIf=\"!hideClose\" class=\"po-page-slide-close-button\" (click)=\"close()\" (key.enter)=\"close()\">\r\n              <span class=\"po-icon po-icon-close\"></span>\r\n            </button>\r\n          </div>\r\n          <div class=\"po-page-slide-subtitle\" *ngIf=\"subtitle\">{{ subtitle }}</div>\r\n        </div>\r\n        <div class=\"po-page-slide-body\">\r\n          <ng-content></ng-content>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                    providers: [],
                    animations: [
                        animations.trigger('fade', [
                            animations.transition(':enter', [
                                animations.style({ opacity: 0 }),
                                animations.group([animations.animate('150ms', animations.style({ opacity: 1 })), animations.query('@slide', animations.animateChild())])
                            ]),
                            animations.transition(':leave', animations.group([animations.query('@slide', animations.animateChild()), animations.animate('150ms', animations.style({ opacity: 0 }))]))
                        ]),
                        animations.trigger('slide', [
                            animations.transition(':enter', [
                                animations.style({ transform: 'translateX(50px)' }),
                                animations.animate('691ms ease-in-out', animations.style({ transform: 'none' }))
                            ]),
                            animations.transition(':leave', [animations.animate('150ms', animations.style({ transform: 'translateX(50px)' }))])
                        ])
                    ]
                },] }
    ];
    PoPageSlideComponent.ctorParameters = function () { return [
        { type: PoActiveOverlayService }
    ]; };
    PoPageSlideComponent.propDecorators = {
        pageContent: [{ type: i0.ViewChild, args: ['pageContent', { read: i0.ElementRef },] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * O componente **po-page** é utilizado como container principal para os componentes po-page-header, po-page-content
     * e para as ações dos componentes po-page-edit e po-page-detail.
     *
     * Quando estiver sendo utilizado o componente po-menu junto ao po-page, ambos devem estar no mesmo nível
     * e inseridos em uma div com a classe **po-wrapper**. Esta classe será responsável por fazer os cálculos
     * necessários de alinhamento dos componentes.
     *
     * O componente **po-page** também pode ser utilizado sem o po-menu e neste caso o corpo da página deve ser
     * definido com a altura de 100% para que o po-page maximize seu tamanho.
     * ```
     * html, body {
     *   height:100%;
     * }
     * ```
     */
    var PoPageBaseComponent = /** @class */ (function () {
        function PoPageBaseComponent() {
        }
        return PoPageBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * @docsExtends PoPageBaseComponent
     */
    var PoPageComponent = /** @class */ (function (_super) {
        __extends(PoPageComponent, _super);
        function PoPageComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PoPageComponent;
    }(PoPageBaseComponent));
    PoPageComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-page',
                    template: "<div class=\"po-page\">\r\n  <ng-content> </ng-content>\r\n</div>\r\n"
                },] }
    ];

    /**
     * @description
     * Módulo dos componentes po-page-default, po-page-detail, po-page-edit,
     * po-page-list e po-page-slide.
     */
    var PoPageModule = /** @class */ (function () {
        function PoPageModule() {
        }
        return PoPageModule;
    }());
    PoPageModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        router.RouterModule,
                        PoBreadcrumbModule,
                        PoButtonModule,
                        PoDisclaimerGroupModule,
                        PoDropdownModule,
                        PoFieldModule,
                        PoLanguageModule,
                        PoModalModule
                    ],
                    declarations: [
                        PoPageComponent,
                        PoPageContentComponent,
                        PoPageDefaultComponent,
                        PoPageDetailComponent,
                        PoPageEditComponent,
                        PoPageHeaderComponent,
                        PoPageListComponent,
                        PoPageSlideComponent
                    ],
                    exports: [
                        PoPageDefaultComponent,
                        PoPageDetailComponent,
                        PoPageEditComponent,
                        PoPageListComponent,
                        PoPageSlideComponent
                    ]
                },] }
    ];

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para o conjunto de círculos que faz a passagem de itens do `po-slide`.
     */
    var PoSlideCirclesComponent = /** @class */ (function () {
        function PoSlideCirclesComponent() {
            /** Evento emitido ao clicar em um controle. */
            this.click = new i0.EventEmitter();
        }
        return PoSlideCirclesComponent;
    }());
    PoSlideCirclesComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-slide-circles',
                    template: "<div class=\"po-slide-circles\">\r\n  <ng-container *ngFor=\"let item of items; let index = index\">\r\n    <div\r\n      class=\"po-slide-circle\"\r\n      [class.po-slide-active-circle]=\"index === currentSlideIndex\"\r\n      (click)=\"click.emit(index)\"\r\n    ></div>\r\n  </ng-container>\r\n</div>\r\n"
                },] }
    ];
    PoSlideCirclesComponent.propDecorators = {
        currentSlideIndex: [{ type: i0.Input, args: ['p-current-slide-index',] }],
        items: [{ type: i0.Input, args: ['p-items',] }],
        click: [{ type: i0.Output, args: ['p-click',] }]
    };

    var poSlideIntervalDefault = 4000;
    /**
     * @description
     *
     * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
     * customizar sua visualização utilizando a diretiva **[p-slide-content-template](/documentation/po-slide-content-template)**.
     *
     * #### Boas práticas:
     * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
     * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
     * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
     */
    var PoSlideBaseComponent = /** @class */ (function () {
        function PoSlideBaseComponent() {
            /**
             * @optional
             *
             * @description
             *
             * Define a exibição das setas de navegação.
             *
             * @default `false`
             */
            this.hideArrows = false;
            this._interval = poSlideIntervalDefault;
        }
        Object.defineProperty(PoSlideBaseComponent.prototype, "height", {
            get: function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             * Altura do po-slide, caso seja slide com template customizado, não assume o valor `default`.
             *
             * @default `336`
             */
            set: function (value) {
                this._height = convertToInt(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoSlideBaseComponent.prototype, "interval", {
            get: function () {
                return this._interval;
            },
            /**
             * @optional
             *
             * @description
             *
             * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
             *
             * @default `4000`
             */
            set: function (value) {
                this._interval = convertToInt(value, poSlideIntervalDefault);
                this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoSlideBaseComponent.prototype, "slides", {
            get: function () {
                return this._slides;
            },
            /**
             * @description
             *
             * Array de imagens ou dados para o slide, pode ser de três formas:
             *
             * - Array implementando objetos da interface `PoSlideItem`:
             * ```
             * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
             * ```
             * - Array de `strings` com os caminhos das imagens:
             * ```
             * ['/assets/image-1', '/assets/image-2' ]
             * ```
             * - Array com lista de itens (para utilizar template):
             * ```
             * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
             * ```
             *
             * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
             */
            set: function (value) {
                this._slides = value;
                this.setSlideItems(value);
                if (value && value.length) {
                    this.startSlide();
                }
            },
            enumerable: false,
            configurable: true
        });
        return PoSlideBaseComponent;
    }());
    PoSlideBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoSlideBaseComponent.propDecorators = {
        hideArrows: [{ type: i0.Input, args: ['p-hide-arrows',] }],
        height: [{ type: i0.Input, args: ['p-height',] }],
        interval: [{ type: i0.Input, args: ['p-interval',] }],
        slides: [{ type: i0.Input, args: ['p-slides',] }]
    };
    __decorate([
        InputBoolean()
    ], PoSlideBaseComponent.prototype, "hideArrows", void 0);

    /**
     * @usedBy PoSlideComponent
     *
     * @description
     *
     * Esta diretiva permite a customização de um slide.
     *
     * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
     *  - Item: `item` determina o item do slide corrente.
     *  - Índice: `index` determina o índice do slide corrente.
     *
     * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <po-slide
     *   [p-slides]="[{ id: 1, name: 'Register', email: 'register@po-ui.com' }]">
     *
     *   <ng-template p-slide-content-template let-item let-code="index">
     *     <div class="po-row">
     *       <po-info class="po-md-6" p-label="Code" [p-value]="item.id"></po-info>
     *       <po-info class="po-md-6" p-label="Email" [p-value]="item.email"></po-info>
     *     </div>
     *   </ng-template>
     *
     * </po-slide>
     *
     * ...
     * ```
     *
     * ```
     * ...
     * <po-slide
     *    [p-slides]="[{ id: 1, name: 'Register', email: 'register@po-ui.com' }]">
     *
     *    <div *p-slide-content-template="let item, let i=index" class="po-row">
     *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
     *    </div>
     * </po-slide>
     * ...
     *
     * ```
     */
    var PoSlideContentTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function PoSlideContentTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return PoSlideContentTemplateDirective;
    }());
    PoSlideContentTemplateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[p-slide-content-template]'
                },] }
    ];
    PoSlideContentTemplateDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para cada item do po-slide.
     */
    var PoSlideItemComponent = /** @class */ (function () {
        function PoSlideItemComponent() {
            this.isIEOrEdge = isIEOrEdge();
        }
        PoSlideItemComponent.prototype.setLinkType = function () {
            if (!this.template && this.link) {
                return this.link.startsWith('http') ? 'externalLink' : 'internalLink';
            }
            return 'noLink';
        };
        return PoSlideItemComponent;
    }());
    PoSlideItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-slide-item',
                    template: "<div\r\n  #slideItem\r\n  class=\"po-slide-item\"\r\n  [class.po-slide-item-background-image]=\"!template && isIEOrEdge\"\r\n  [style.background-image]=\"!template && isIEOrEdge ? 'url(' + image + ')' : ''\"\r\n  [ngSwitch]=\"setLinkType()\"\r\n>\r\n  <!-- slide com link interno -->\r\n  <a *ngSwitchCase=\"'internalLink'\" class=\"po-slide-item-link\" [routerLink]=\"link\">\r\n    <ng-container [ngTemplateOutlet]=\"slideItemImage\" [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image } }\">\r\n    </ng-container>\r\n  </a>\r\n  <!-- slide com link externo -->\r\n  <a *ngSwitchCase=\"'externalLink'\" class=\"po-slide-item-link\" [href]=\"link\">\r\n    <ng-container [ngTemplateOutlet]=\"slideItemImage\" [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image } }\">\r\n    </ng-container>\r\n  </a>\r\n  <!-- slide sem link -->\r\n  <a\r\n    *ngSwitchCase=\"'noLink'\"\r\n    [ngClass]=\"action ? 'po-slide-item-link' : 'po-slide-item-no-link'\"\r\n    (click)=\"action ? action(data) : undefined\"\r\n  >\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"template ? slideItemTemplate : slideItemImage\"\r\n      [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image, data: data } }\"\r\n    >\r\n    </ng-container>\r\n  </a>\r\n</div>\r\n\r\n<ng-template #slideItemTemplate let-item=\"item\" ; let-index=\"index\">\r\n  <div *ngIf=\"template\" class=\"po-slide-item-content\">\r\n    <ng-template\r\n      [ngTemplateOutlet]=\"template.templateRef\"\r\n      [ngTemplateOutletContext]=\"{ $implicit: item.data, index: index }\"\r\n    >\r\n    </ng-template>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #slideItemImage let-item=\"item\">\r\n  <img\r\n    *ngIf=\"item.image && !isIEOrEdge\"\r\n    class=\"po-slide-image\"\r\n    [alt]=\"item.alt\"\r\n    [src]=\"item.image\"\r\n    [style.height.px]=\"imageHeight\"\r\n  />\r\n</ng-template>\r\n"
                },] }
    ];
    PoSlideItemComponent.propDecorators = {
        itemElement: [{ type: i0.ViewChild, args: ['slideItem', { static: true },] }],
        action: [{ type: i0.Input, args: ['p-action',] }],
        alt: [{ type: i0.Input, args: ['p-alt',] }],
        data: [{ type: i0.Input, args: ['p-data',] }],
        image: [{ type: i0.Input, args: ['p-image',] }],
        imageHeight: [{ type: i0.Input, args: ['p-image-height',] }],
        template: [{ type: i0.Input, args: ['p-template',] }],
        link: [{ type: i0.Input, args: ['p-link',] }]
    };

    var poSlideDefaultHeight = 336;
    var poSlideIntervalMin = 1000;
    var poSlideMinHeight = 192;
    var poSlideTiming = '250ms ease';
    /**
     * @docsExtends PoSlideBaseComponent
     *
     * @example
     * <example name="po-slide-basic" title="PO Slide Basic">
     *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.html"> </file>
     *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-slide-labs" title="PO Slide Labs">
     *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.html"> </file>
     *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-slide-useful-articles" title="PO Slide - Useful articles">
     *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.html"> </file>
     *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.ts"> </file>
     * </example>
     *
     * <example name="po-slide-landscapes" title="PO Slide - Landscapes">
     *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.html"> </file>
     *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.ts"> </file>
     * </example>
     *
     * <example name="po-slide-external-controls" title="PO Slide - External Controls">
     *  <file name="sample-po-slide-external-controls/sample-po-slide-external-controls.component.html"> </file>
     *  <file name="sample-po-slide-external-controls/sample-po-slide-external-controls.component.ts"> </file>
     * </example>
     */
    var PoSlideComponent = /** @class */ (function (_super) {
        __extends(PoSlideComponent, _super);
        function PoSlideComponent(builder) {
            var _this = _super.call(this) || this;
            _this.builder = builder;
            _this.currentSlideIndex = 0;
            _this.slideItems = [];
            _this.isLoaded = false;
            _this.resize$ = new rxjs.Subject();
            return _this;
        }
        Object.defineProperty(PoSlideComponent.prototype, "hasElements", {
            get: function () {
                return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoSlideComponent.prototype, "isImageSlide", {
            get: function () {
                return !this.slideContentTemplate;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoSlideComponent.prototype, "offset", {
            get: function () {
                return this.currentSlideIndex * this.slideItemWidth;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoSlideComponent.prototype, "hasSlides", {
            get: function () {
                return !!this.slides && !!this.slides.length;
            },
            enumerable: false,
            configurable: true
        });
        PoSlideComponent.prototype.onResize = function () {
            this.resize$.next();
        };
        PoSlideComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.resizeSubscription = this.resize$.pipe(operators.debounceTime(150)).subscribe(function () {
                _this.setSlideItemWidth();
                _this.goToItem(_this.currentSlideIndex);
            });
        };
        PoSlideComponent.prototype.ngDoCheck = function () {
            if (!this.isLoaded && this.hasElements) {
                this.setSlideItemWidth();
                this.isLoaded = true;
                if (this.hasSlides) {
                    this.startSlide();
                }
            }
        };
        PoSlideComponent.prototype.ngOnChanges = function (changes) {
            if (changes.height) {
                this.setSlideHeight(this.height);
            }
        };
        PoSlideComponent.prototype.ngOnDestroy = function () {
            var _a;
            (_a = this.resizeSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        };
        /**
         * Método que retorna o index do slide atual
         *
         * ```
         * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
         *  myFunction() {
         *    let currentIndex = this.slideComponent.getCurrentSlideIndex();
         * }
         *
         * ```
         */
        PoSlideComponent.prototype.getCurrentSlideIndex = function () {
            return this.currentSlideIndex;
        };
        PoSlideComponent.prototype.goToItem = function (index) {
            if (this.interval > poSlideIntervalMin) {
                this.startInterval();
            }
            this.currentSlideIndex = index;
            this.animate(this.offset);
        };
        PoSlideComponent.prototype.nextControl = function () {
            if (this.interval > poSlideIntervalMin) {
                this.startInterval();
            }
            this.next();
        };
        /**
         * Método para chamar o próximo slide.
         *
         * ```
         * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
         *
         * myFunction() {
         *  this.slideComponent.next();
         * }
         * ```
         */
        PoSlideComponent.prototype.next = function () {
            if (this.currentSlideIndex + 1 === this.slideItems.length) {
                this.currentSlideIndex = 0;
                this.animate(0);
                return;
            }
            this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;
            this.animate(this.offset);
        };
        /**
         * Método para chamar o slide anterior.
         *
         * ```
         * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
         *
         * myFunction() {
         *  this.slideComponent.previous();
         * }
         * ```
         */
        PoSlideComponent.prototype.previous = function () {
            if (this.currentSlideIndex === 0) {
                this.currentSlideIndex = this.slideItems.length - 1;
                this.animate(this.offset);
                return;
            }
            this.currentSlideIndex = (this.currentSlideIndex - 1 + this.slideItems.length) % this.slideItems.length;
            this.animate(this.offset);
        };
        PoSlideComponent.prototype.previousControl = function () {
            if (this.interval > poSlideIntervalMin) {
                this.startInterval();
            }
            this.previous();
        };
        PoSlideComponent.prototype.setSlideHeight = function (height) {
            this.setHeight(height);
        };
        PoSlideComponent.prototype.cancelInterval = function () {
            clearInterval(this.setInterval);
        };
        PoSlideComponent.prototype.setSlideItems = function (slides) {
            if (this.hasSlides) {
                this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);
            }
            else {
                this.slideItems = [];
                this.cancelInterval();
            }
        };
        PoSlideComponent.prototype.startSlide = function () {
            this.setSlideHeight(this.height);
            if (this.interval > poSlideIntervalMin) {
                this.startInterval();
            }
            this.currentSlideIndex = 0;
        };
        PoSlideComponent.prototype.startInterval = function () {
            var _this = this;
            if (this.setInterval) {
                this.cancelInterval();
            }
            this.setInterval =
                this.hasSlides && this.hasElements
                    ? setInterval(function () {
                        _this.next();
                    }, this.interval)
                    : undefined;
        };
        PoSlideComponent.prototype.animate = function (offset) {
            if (this.hasElements) {
                var animation = this.buildTransitionAnimation(offset);
                this.player = animation.create(this.slide.nativeElement);
                this.player.play();
            }
        };
        PoSlideComponent.prototype.buildTransitionAnimation = function (offset) {
            return this.builder.build([animations.animate(poSlideTiming, animations.keyframes([animations.style({ transform: "translateX(-" + offset + "px)" })]))]);
        };
        PoSlideComponent.prototype.createArrayForTemplate = function (slides) {
            this.slideItems = __spreadArray([], __read(slides));
        };
        PoSlideComponent.prototype.createArrayFromSlides = function (slides) {
            var _this = this;
            var isStringArray = slides.every(function (item) { return typeof item === 'string'; });
            if (isStringArray) {
                slides.forEach(function (element) { return _this.slideItems.push({ image: "" + element }); });
            }
            else {
                this.slideItems = __spreadArray([], __read(slides));
            }
        };
        PoSlideComponent.prototype.setDefaultHeight = function (height) {
            if ((height && height <= poSlideMinHeight) || (!height && this.isImageSlide)) {
                this.slide.nativeElement.style.height = poSlideDefaultHeight + "px";
                this.imageHeight = poSlideDefaultHeight;
            }
            else {
                this.imageHeight = undefined;
            }
        };
        PoSlideComponent.prototype.setHeight = function (height) {
            if (height && height > poSlideMinHeight) {
                this.slide.nativeElement.style.height = height + "px";
                this.imageHeight = height;
            }
            else {
                this.setDefaultHeight(height);
            }
        };
        PoSlideComponent.prototype.setSlideItemWidth = function () {
            if (this.hasElements) {
                this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;
            }
        };
        return PoSlideComponent;
    }(PoSlideBaseComponent));
    PoSlideComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-slide',
                    template: "<div class=\"po-slide-wrapper\">\r\n  <div class=\"po-slide-outer\">\r\n    <div class=\"po-slide-inner\" #slide>\r\n      <ng-container *ngFor=\"let item of slideItems; let index = index\">\r\n        <po-slide-item\r\n          [p-action]=\"item.action\"\r\n          [p-data]=\"item\"\r\n          [p-image]=\"item.image\"\r\n          [p-image-height]=\"imageHeight\"\r\n          [p-template]=\"slideContentTemplate\"\r\n          [p-alt]=\"item.alt\"\r\n          [p-link]=\"item.link\"\r\n        >\r\n        </po-slide-item>\r\n      </ng-container>\r\n    </div>\r\n\r\n    <po-slide-control\r\n      *ngIf=\"!hideArrows && hasSlides && slides.length > 1\"\r\n      p-control=\"previous\"\r\n      (p-click)=\"previousControl()\"\r\n    >\r\n    </po-slide-control>\r\n\r\n    <po-slide-control *ngIf=\"!hideArrows && hasSlides && slides.length > 1\" p-control=\"next\" (p-click)=\"nextControl()\">\r\n    </po-slide-control>\r\n  </div>\r\n\r\n  <po-slide-circles\r\n    *ngIf=\"hasSlides && slides.length > 1\"\r\n    [p-current-slide-index]=\"currentSlideIndex\"\r\n    [p-items]=\"slideItems\"\r\n    (p-click)=\"goToItem($event)\"\r\n  >\r\n  </po-slide-circles>\r\n</div>\r\n"
                },] }
    ];
    PoSlideComponent.ctorParameters = function () { return [
        { type: animations.AnimationBuilder }
    ]; };
    PoSlideComponent.propDecorators = {
        slideContentTemplate: [{ type: i0.ContentChild, args: [PoSlideContentTemplateDirective, { static: true },] }],
        slide: [{ type: i0.ViewChild, args: ['slide', { static: true },] }],
        itemsElements: [{ type: i0.ViewChildren, args: [PoSlideItemComponent,] }],
        onResize: [{ type: i0.HostListener, args: ['window:resize',] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para a seta que controla a passagem de itens do `po-slide`.
     */
    var PoSlideControlComponent = /** @class */ (function () {
        function PoSlideControlComponent() {
            /** Evento emitido ao clicar em um controle. */
            this.click = new i0.EventEmitter();
        }
        return PoSlideControlComponent;
    }());
    PoSlideControlComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-slide-control',
                    template: "<div class=\"po-slide-control-{{ control }}\">\r\n  <div class=\"po-slide-arrow-circle\" (click)=\"click.emit()\">\r\n    <div class=\"po-slide-arrow po-slide-arrow-{{ control }}\"></div>\r\n  </div>\r\n</div>\r\n"
                },] }
    ];
    PoSlideControlComponent.propDecorators = {
        control: [{ type: i0.Input, args: ['p-control',] }],
        click: [{ type: i0.Output, args: ['p-click',] }]
    };

    /**
     * @description
     *
     * Módulo do componente `po-slide`.
     *
     * > Para o correto funcionamento do componente `po-slide`, deve ser importado o módulo `BrowserAnimationsModule` no
     * > módulo principal da sua aplicação.
     *
     * Módulo da aplicação:
     * ```
     * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
     * import { PoModule } from '@po-ui/ng-components';
     * ...
     *
     * @NgModule({
     *   imports: [
     *     BrowserModule,
     *     BrowserAnimationsModule,
     *     ...
     *     PoModule
     *   ],
     *   declarations: [
     *     AppComponent,
     *     ...
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     */
    var PoSlideModule = /** @class */ (function () {
        function PoSlideModule() {
        }
        return PoSlideModule;
    }());
    PoSlideModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, router.RouterModule, PoContainerModule],
                    declarations: [
                        PoSlideCirclesComponent,
                        PoSlideComponent,
                        PoSlideControlComponent,
                        PoSlideContentTemplateDirective,
                        PoSlideItemComponent
                    ],
                    exports: [PoSlideComponent, PoSlideContentTemplateDirective],
                    providers: [],
                    schemas: []
                },] }
    ];

    /**
     * @usedBy PoStepperComponent
     *
     * @description
     *
     * <a id="stepperStatus"></a>
     *
     * *Enums* para os status do `po-stepper` quando utilizada a propriedade `p-steps`.
     */
    exports.PoStepperStatus = void 0;
    (function (PoStepperStatus) {
        /** Define o estado do *step* como ativo. */
        PoStepperStatus["Active"] = "active";
        /** Define o estado do *step* como padrão. */
        PoStepperStatus["Default"] = "default";
        /** Define o estado do *step* como desabilitado. */
        PoStepperStatus["Disabled"] = "disabled";
        /** Define o estado do *step* como concluído. */
        PoStepperStatus["Done"] = "done";
        /** Define o estado do *step* com erro. */
        PoStepperStatus["Error"] = "error";
    })(exports.PoStepperStatus || (exports.PoStepperStatus = {}));

    /**
     * @description
     *
     * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:
     *
     * ```
     * <po-stepper>
     *
     *    <po-step p-label="Endereço">
     *
     *        <!-- Conteúdo referente ao endereço -->
     *
     *    </po-step>
     *
     *    <po-step p-label="Pagamento">
     *
     *        <!-- Conteúdo referente ao pagamento -->
     *
     *    </po-step>
     *
     *  </po-stepper>
     * ```
     *
     * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
     * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
     * desabilitados (*disabled*).
     *
     * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o
     * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
     * com o status desabilitado.
     *
     * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível
     * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).
     *
     * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento
     * e exemplos de uso.
     */
    var PoStepComponent = /** @class */ (function () {
        function PoStepComponent(elementRef) {
            this.elementRef = elementRef;
            // ID do step
            this.id = uuid();
            this._status = exports.PoStepperStatus.Disabled;
        }
        Object.defineProperty(PoStepComponent.prototype, "status", {
            get: function () {
                return this._status;
            },
            // Estado de exibição do `po-step`.
            set: function (status) {
                this._status = status;
                this.setDisplayOnActiveOrError();
            },
            enumerable: false,
            configurable: true
        });
        PoStepComponent.prototype.ngAfterContentInit = function () {
            this.setDisplayOnActiveOrError();
        };
        PoStepComponent.prototype.setDisplayOnActiveOrError = function () {
            this.elementRef.nativeElement.style.display =
                this.status === exports.PoStepperStatus.Active || this.status === exports.PoStepperStatus.Error ? '' : 'none';
        };
        return PoStepComponent;
    }());
    PoStepComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-step',
                    template: "<ng-content></ng-content>\r\n"
                },] }
    ];
    PoStepComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PoStepComponent.propDecorators = {
        canActiveNextStep: [{ type: i0.Input, args: ['p-can-active-next-step',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        status: [{ type: i0.Input, args: ['p-status',] }]
    };

    var poMediumStepSize = 32;
    var poLargeStepSize = 48;
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente responsável por exibir os círculos dos *steps*.
     */
    var PoStepperCircleComponent = /** @class */ (function () {
        function PoStepperCircleComponent() {
        }
        Object.defineProperty(PoStepperCircleComponent.prototype, "isActive", {
            get: function () {
                return this.status === exports.PoStepperStatus.Active;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperCircleComponent.prototype, "isDefault", {
            get: function () {
                return this.status === exports.PoStepperStatus.Default;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperCircleComponent.prototype, "isDisabled", {
            get: function () {
                return this.status === exports.PoStepperStatus.Disabled;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperCircleComponent.prototype, "isDone", {
            get: function () {
                return this.status === exports.PoStepperStatus.Done;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperCircleComponent.prototype, "isError", {
            get: function () {
                return this.status === exports.PoStepperStatus.Error;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperCircleComponent.prototype, "isLargeStep", {
            get: function () {
                return this.size >= poLargeStepSize;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperCircleComponent.prototype, "isMediumStep", {
            get: function () {
                return this.size >= poMediumStepSize && !this.isLargeStep;
            },
            enumerable: false,
            configurable: true
        });
        return PoStepperCircleComponent;
    }());
    PoStepperCircleComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-stepper-circle',
                    template: "<div class=\"po-stepper-circle\" [style.height.px]=\"size\" [style.width.px]=\"size\" [tabindex]=\"isDisabled ? -1 : 0\">\r\n  <span\r\n    *ngIf=\"!isActive\"\r\n    class=\"po-stepper-circle-content\"\r\n    [class.po-icon]=\"icons || isDone\"\r\n    [class.po-icon-exclamation]=\"icons && isError\"\r\n    [class.po-icon-info]=\"icons && (isActive || isDefault || isDisabled)\"\r\n    [class.po-icon-ok]=\"isDone\"\r\n    [class.po-stepper-circle-content-lg]=\"isLargeStep\"\r\n    [class.po-stepper-circle-content-md]=\"isMediumStep\"\r\n  >\r\n    {{ !icons && !isDone ? content : '' }}\r\n  </span>\r\n\r\n  <div *ngIf=\"isActive || isError\" class=\"po-stepper-circle-active\"></div>\r\n</div>\r\n"
                },] }
    ];
    PoStepperCircleComponent.propDecorators = {
        content: [{ type: i0.Input, args: ['p-content',] }],
        icons: [{ type: i0.Input, args: ['p-icons',] }],
        size: [{ type: i0.Input, args: ['p-size',] }],
        status: [{ type: i0.Input, args: ['p-status',] }]
    };

    /**
     *
     * @usedBy PoStepperComponent
     *
     * @description
     *
     * <a id="stepperOrientation"></a>
     *
     * *Enums* para definição da orientação do `po-stepper`.
     */
    exports.PoStepperOrientation = void 0;
    (function (PoStepperOrientation) {
        /** Define a exibição do componente na horizontal. */
        PoStepperOrientation["Horizontal"] = "horizontal";
        /** Define a exibição do componente na vertical. */
        PoStepperOrientation["Vertical"] = "vertical";
    })(exports.PoStepperOrientation || (exports.PoStepperOrientation = {}));

    var poStepperOrientationDefault = exports.PoStepperOrientation.Horizontal;
    /**
     * @description
     *
     * O `po-stepper` permite que um processo seja dividido em passos para que o usuário o realize
     * mais facilmente.
     *
     * Existem duas formas de utilização:
     *
     * 1 - Usando o componente [**po-step**](/documentation/po-step) para renderizar e descrever os passos.
     *
     * 2 - Através da propriedade `p-steps` para descrever os passos do processo, sendo responsabilidade do desenvolvedor o controle
     * de renderização do que será exibido a cada *step* ativo.
     *
     * Através de suas propriedades, é possível definir se sua orientação será horizontal ou vertical,
     * além da possibilidade de aumentar o tamanho dos *steps*.
     *
     * Também é possível navegar entre os *steps* através do teclado utilizando a tecla *tab* e, para ativar o *step* em foco basta
     * pressionar a tecla *enter*. Além disso, é possível ativar a exibição de ícones no lugar de números nos *steps* através da
     * propriedade [`p-step-icons`](/documentation/po-stepper#stepIconsProperty).
     *
     * #### Utilizando os métodos do componente:
     *
     * Para acessar os métodos do componente é necessário ter a referência do mesmo.
     *
     * Por exemplo, utilizando um [**ViewChild**](https://angular.io/api/core/ViewChild):
     *
     * ```
     * @ViewChild(PoStepperComponent) poStepperComponent: PoStepperComponent;
     * ```
     *
     * E para acessar o método:
     *
     * ```
     * poStepperComponent.next();
     * ```
     *
     * #### Boas práticas
     *
     * - Evite `labels` extensos que quebram o layout do `po-stepper`, use `labels` diretos, curtos e intuitivos.
     * - Utilize apenas um `po-stepper` por página.
     */
    var PoStepperBaseComponent = /** @class */ (function () {
        function PoStepperBaseComponent() {
            /** Ação que será executada quando o usuário mudar o passo do `po-stepper`. */
            this.onChangeStep = new i0.EventEmitter();
            this._orientation = poStepperOrientationDefault;
            this._sequential = true;
            this._step = 1;
            this._steps = [];
        }
        Object.defineProperty(PoStepperBaseComponent.prototype, "orientation", {
            get: function () {
                return this._orientation;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a orientação de exibição do `po-stepper`.
             *
             * > Veja os valores válidos no *enum* [PoStepperOrientation](documentation/po-stepper#stepperOrientation).
             *
             * @default `PoStepperOrientation.Horizontal`
             */
            set: function (value) {
                this._orientation = Object.values(exports.PoStepperOrientation).includes(value)
                    ? value
                    : poStepperOrientationDefault;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperBaseComponent.prototype, "step", {
            get: function () {
                return this._step;
            },
            /**
             * @optional
             *
             * @description
             *
             * Controla o passo atual do `po-stepper`.
             *
             * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
             * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
             *
             * @default `1`
             */
            set: function (step) {
                if (step >= 1 && step <= this.steps.length) {
                    this._step = step;
                    this._steps[this._step - 1].status = exports.PoStepperStatus.Active;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperBaseComponent.prototype, "steps", {
            get: function () {
                return this._steps;
            },
            /**
             * @optional
             *
             * @description
             *
             * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
             *
             * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
             * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
             */
            set: function (steps) {
                this._steps = Array.isArray(steps) ? steps : [];
                this._steps.forEach(function (step) { return (step.status = exports.PoStepperStatus.Default); });
                this.step = 1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperBaseComponent.prototype, "sequential", {
            get: function () {
                return this._sequential;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define se o `po-stepper` será sequencial ou aleatório.
             *
             * > Ao utilizar o componente [**po-step**](/documentation/po-step), o valor desta propriedade sempre será verdadeiro.
             *
             * @default `true`
             */
            set: function (sequential) {
                this._sequential = convertToBoolean(sequential);
            },
            enumerable: false,
            configurable: true
        });
        return PoStepperBaseComponent;
    }());
    PoStepperBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoStepperBaseComponent.propDecorators = {
        stepIcons: [{ type: i0.Input, args: ['p-step-icons',] }],
        stepSize: [{ type: i0.Input, args: ['p-step-size',] }],
        onChangeStep: [{ type: i0.Output, args: ['p-change-step',] }],
        orientation: [{ type: i0.Input, args: ['p-orientation',] }],
        step: [{ type: i0.Input, args: ['p-step',] }],
        steps: [{ type: i0.Input, args: ['p-steps',] }],
        sequential: [{ type: i0.Input, args: ['p-sequential',] }]
    };

    /**
     * @docsExtends PoStepperBaseComponent
     *
     * @example
     *
     * <example name="po-stepper-basic" title="PO Stepper Basic">
     *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.html"> </file>
     *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-stepper-labs" title="PO Stepper Labs">
     *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.html"> </file>
     *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-stepper-sales" title="PO Stepper - Sales">
     *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.html"> </file>
     *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.ts"> </file>
     * </example>
     *
     * <example name="po-stepper-active" title="PO Stepper - Active">
     *  <file name="sample-po-stepper-active/sample-po-stepper-active.component.html"> </file>
     *  <file name="sample-po-stepper-active/sample-po-stepper-active.component.ts"> </file>
     *  <file name="sample-po-stepper-active/sample-po-stepper-active.service.ts"> </file>
     * </example>
     */
    var PoStepperComponent = /** @class */ (function (_super) {
        __extends(PoStepperComponent, _super);
        function PoStepperComponent(changeDetector) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            return _this;
        }
        Object.defineProperty(PoStepperComponent.prototype, "currentStepIndex", {
            get: function () {
                return this.step - 1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperComponent.prototype, "stepList", {
            get: function () {
                return (this.usePoSteps && this.poSteps) || this.steps;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperComponent.prototype, "usePoSteps", {
            get: function () {
                return !!this.poSteps.length;
            },
            enumerable: false,
            configurable: true
        });
        PoStepperComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.activeFirstStep();
            this.poSteps.changes.subscribe(function () {
                _this.controlStepsStatus(0, _this.poSteps.first);
            });
        };
        /**
         * Altera o status do *step* para ativo.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
         *
         * @param {number} index Índice do `po-step` que se deseja ativar.
         */
        PoStepperComponent.prototype.active = function (index) {
            if (!this.usePoSteps) {
                return;
            }
            var stepsArray = this.getPoSteps();
            var step = stepsArray[index];
            this.changeStep(index, step);
        };
        /**
         * Ativa o primeiro *step*.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
         */
        PoStepperComponent.prototype.first = function () {
            if (!this.usePoSteps) {
                return;
            }
            var firstStep = this.poSteps.first;
            var firstStepIndex = 0;
            this.changeStep(firstStepIndex, firstStep);
        };
        /**
         * Ativa o próximo *step*.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
         */
        PoStepperComponent.prototype.next = function () {
            if (!this.usePoSteps) {
                return;
            }
            var _a = this.getStepsAndIndex(this.currentActiveStep), steps = _a.steps, stepIndex = _a.stepIndex;
            var nextIndex = stepIndex + 1;
            var nextStep = steps[nextIndex];
            this.changeStep(nextIndex, nextStep);
        };
        /**
         * Ativa o *step* anterior.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
         */
        PoStepperComponent.prototype.previous = function () {
            if (!this.usePoSteps) {
                return;
            }
            var _a = this.getStepsAndIndex(this.currentActiveStep), steps = _a.steps, stepIndex = _a.stepIndex;
            var previousIndex = stepIndex - 1;
            var previousStep = steps[previousIndex];
            this.changeStep(previousIndex, previousStep);
        };
        PoStepperComponent.prototype.changeStep = function (stepIndex, step) {
            var _this = this;
            this.allowNextStep(stepIndex)
                .pipe(operators.take(1))
                .subscribe(function (nextStepAllowed) {
                if (nextStepAllowed) {
                    var isDifferentStep = !_this.currentActiveStep || step.id !== _this.currentActiveStep.id;
                    if (_this.usePoSteps && isDifferentStep) {
                        _this.controlStepsStatus(stepIndex, step);
                        _this.onChangeStep.emit(step);
                    }
                    else if (!_this.usePoSteps && stepIndex !== _this.currentStepIndex) {
                        // if para tratamento do modelo antigo do po-stepper
                        _this.onChangeStep.emit(stepIndex + 1);
                    }
                }
            });
        };
        PoStepperComponent.prototype.onStepActive = function (step) {
            this.currentActiveStep = step;
            var stepIndex = this.getStepsAndIndex(this.currentActiveStep).stepIndex;
            this.poSteps.forEach(function (stepChild, i) {
                if (i < stepIndex) {
                    stepChild.status = exports.PoStepperStatus.Done;
                }
            });
        };
        PoStepperComponent.prototype.trackByFn = function (step) {
            return step.id;
        };
        PoStepperComponent.prototype.activeFirstStep = function () {
            var hasStepActive = this.poSteps.some(function (poStep) { return poStep.status === exports.PoStepperStatus.Active; });
            if (this.usePoSteps && !hasStepActive) {
                this.changeStep(0, this.poSteps.first);
            }
        };
        PoStepperComponent.prototype.allowNextStep = function (nextStepIndex) {
            if (!this.sequential) {
                return rxjs.of(true);
            }
            var isAllowNextStep$ = this.usePoSteps
                ? this.isBeforeStep(nextStepIndex) || this.canActiveNextStep(this.currentActiveStep)
                : this.steps.slice(this.step, nextStepIndex).every(function (step) { return step.status === exports.PoStepperStatus.Done; });
            return typeof isAllowNextStep$ === 'boolean' ? rxjs.of(isAllowNextStep$) : isAllowNextStep$;
        };
        PoStepperComponent.prototype.canActiveNextStep = function (currentActiveStep) {
            var _this = this;
            if (currentActiveStep === void 0) { currentActiveStep = {}; }
            if (!currentActiveStep.canActiveNextStep) {
                return rxjs.of(true);
            }
            var canActiveNextStep = currentActiveStep.canActiveNextStep(currentActiveStep);
            var canActiveNextStep$ = canActiveNextStep instanceof rxjs.Observable ? canActiveNextStep : rxjs.of(canActiveNextStep);
            return canActiveNextStep$.pipe(operators.tap(function (isCanActiveNextStep) {
                currentActiveStep.status = _this.getStepperStatusByCanActive(isCanActiveNextStep);
            }), operators.catchError(function (err) {
                currentActiveStep.status = exports.PoStepperStatus.Error;
                return rxjs.throwError(err);
            }));
        };
        PoStepperComponent.prototype.controlStepsStatus = function (stepIndex, step) {
            if (this.usePoSteps) {
                this.setStepAsActive(step);
                this.setNextStepAsDefault(step);
                if (this.isBeforeStep(stepIndex)) {
                    this.setFinalSteppersAsDisabled(stepIndex);
                }
                this.changeDetector.detectChanges();
            }
        };
        PoStepperComponent.prototype.getStepperStatusByCanActive = function (canActiveNextStep) {
            return canActiveNextStep ? exports.PoStepperStatus.Done : exports.PoStepperStatus.Error;
        };
        PoStepperComponent.prototype.getStepsAndIndex = function (step) {
            if (step === void 0) { step = {}; }
            var steps = this.getPoSteps();
            var stepIndex = steps.findIndex(function (poStep) { return poStep.id === step.id; });
            return { steps: steps, stepIndex: stepIndex };
        };
        PoStepperComponent.prototype.getPoSteps = function () {
            return this.poSteps.toArray();
        };
        PoStepperComponent.prototype.isBeforeStep = function (stepIndex) {
            var _this = this;
            var currentActiveStepIndex = function () { return _this.getPoSteps().findIndex(function (step) { return step.id === _this.currentActiveStep.id; }); };
            return !!this.currentActiveStep && currentActiveStepIndex() >= stepIndex;
        };
        PoStepperComponent.prototype.setFinalSteppersAsDisabled = function (stepIndex) {
            this.getPoSteps()
                .filter(function (step, index) { return step && index >= stepIndex + 2; })
                .forEach(function (step) { return (step.status = exports.PoStepperStatus.Disabled); });
        };
        PoStepperComponent.prototype.setStepAsActive = function (step) {
            step.status = exports.PoStepperStatus.Active;
        };
        PoStepperComponent.prototype.setNextStepAsDefault = function (currentStep) {
            var _a = this.getStepsAndIndex(currentStep), steps = _a.steps, stepIndex = _a.stepIndex;
            var nextIndex = stepIndex + 1;
            if (nextIndex < this.poSteps.length) {
                steps[nextIndex].status = exports.PoStepperStatus.Default;
            }
        };
        return PoStepperComponent;
    }(PoStepperBaseComponent));
    PoStepperComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-stepper',
                    template: "<div class=\"po-stepper po-stepper-{{ orientation }}\">\r\n  <div class=\"po-stepper-container\">\r\n    <po-stepper-step\r\n      *ngFor=\"let step of stepList; let index = index; trackBy: trackByFn\"\r\n      class=\"po-stepper-step-position\"\r\n      [p-circle-content]=\"index + 1\"\r\n      [p-label]=\"step.label\"\r\n      [p-orientation]=\"orientation\"\r\n      [p-status]=\"step.status\"\r\n      [p-step-icons]=\"stepIcons\"\r\n      [p-step-size]=\"stepSize\"\r\n      [p-next-status]=\"poSteps.get(index + 1)?.status\"\r\n      (p-activated)=\"onStepActive(step)\"\r\n      (p-click)=\"changeStep(index, step)\"\r\n      (p-enter)=\"changeStep(index, step)\"\r\n    >\r\n    </po-stepper-step>\r\n  </div>\r\n\r\n  <div *ngIf=\"usePoSteps\" class=\"po-stepper-content\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n"
                },] }
    ];
    PoStepperComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    PoStepperComponent.propDecorators = {
        poSteps: [{ type: i0.ContentChildren, args: [PoStepComponent,] }]
    };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente responsável por exibir as legendas dos *steps*.
     */
    var PoStepperLabelComponent = /** @class */ (function () {
        function PoStepperLabelComponent() {
        }
        return PoStepperLabelComponent;
    }());
    PoStepperLabelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-stepper-label',
                    template: "<div class=\"po-stepper-label\">\r\n  {{ content }}\r\n</div>\r\n"
                },] }
    ];
    PoStepperLabelComponent.propDecorators = {
        content: [{ type: i0.Input, args: ['p-content',] }]
    };

    var poStepperStepSizeDefault = 24;
    var poStepperStepSizeMax = 64;
    var poStepLiteralsDefault = {
        en: { label: 'Step' },
        es: { label: 'Paso' },
        pt: { label: 'Passo' }
    };
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que representa um *step* contendo as ligações das laterais (`po-stepper-step-bar`) e a label.
     */
    var PoStepperStepComponent = /** @class */ (function () {
        function PoStepperStepComponent() {
            // Evento que será emitido quando o status do *step* estiver ativo (`PoStepperStatus.Active`).
            this.activated = new i0.EventEmitter();
            // Evento que será emitido ao clicar no *step*.
            this.click = new i0.EventEmitter();
            // Evento que será emitido ao focar no *step* e pressionar a tecla *enter*.
            this.enter = new i0.EventEmitter();
            this.literals = Object.assign(Object.assign({}, poStepLiteralsDefault[poLocaleDefault]), poStepLiteralsDefault[browserLanguage()]);
            this._stepIcons = false;
            this._stepSize = poStepperStepSizeDefault;
        }
        Object.defineProperty(PoStepperStepComponent.prototype, "label", {
            get: function () {
                return this._label;
            },
            // Label do *step*.
            set: function (value) {
                this._label = isTypeof(value, 'string') ? value : this.literals.label + " " + this.circleContent;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperStepComponent.prototype, "status", {
            get: function () {
                return this._status;
            },
            // Define o estado de exibição.
            set: function (value) {
                this._status = value ? value : undefined;
                if (this.status === exports.PoStepperStatus.Active) {
                    this.activated.emit();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperStepComponent.prototype, "stepIcons", {
            get: function () {
                return this._stepIcons;
            },
            set: function (stepIcons) {
                this._stepIcons = convertToBoolean(stepIcons);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperStepComponent.prototype, "stepSize", {
            get: function () {
                return this._stepSize;
            },
            // Tamanho do `step` em *pixels*, possibilitando um maior destaque.
            // O valor informado deve ser entre `24` e `64`.
            set: function (value) {
                this._stepSize =
                    value >= poStepperStepSizeDefault && value <= poStepperStepSizeMax ? value : poStepperStepSizeDefault;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperStepComponent.prototype, "halfStepSize", {
            get: function () {
                return this.stepSize / 2;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperStepComponent.prototype, "isVerticalOrientation", {
            get: function () {
                return this.orientation === exports.PoStepperOrientation.Vertical;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoStepperStepComponent.prototype, "marginHorizontalBar", {
            get: function () {
                return this.isVerticalOrientation ? undefined : this.halfStepSize;
            },
            enumerable: false,
            configurable: true
        });
        PoStepperStepComponent.prototype.getStatusClass = function (status) {
            switch (status) {
                case exports.PoStepperStatus.Active:
                    return 'po-stepper-step-default';
                case exports.PoStepperStatus.Disabled:
                    return 'po-stepper-step-disabled';
                case exports.PoStepperStatus.Done:
                    return 'po-stepper-step-default';
                case exports.PoStepperStatus.Error:
                    return 'po-stepper-step-error';
                default:
                    return 'po-stepper-step-default';
            }
        };
        PoStepperStepComponent.prototype.onClick = function () {
            if (this.status !== exports.PoStepperStatus.Disabled) {
                this.click.emit();
            }
        };
        PoStepperStepComponent.prototype.onEnter = function () {
            if (this.status !== exports.PoStepperStatus.Disabled) {
                this.enter.emit();
            }
        };
        return PoStepperStepComponent;
    }());
    PoStepperStepComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-stepper-step',
                    template: "<div class=\"po-stepper-step\" [ngClass]=\"getStatusClass(status)\" (click)=\"onClick()\" (keydown.enter)=\"onEnter()\">\r\n  <div class=\"po-stepper-step-container\" [style.width.px]=\"isVerticalOrientation ? stepSize : undefined\">\r\n    <div\r\n      [class.po-stepper-step-bar-top]=\"isVerticalOrientation\"\r\n      [class.po-stepper-step-bar-left]=\"!isVerticalOrientation\"\r\n      [style.margin-right.px]=\"marginHorizontalBar\"\r\n    ></div>\r\n\r\n    <po-stepper-circle [p-content]=\"circleContent\" [p-icons]=\"stepIcons\" [p-size]=\"stepSize\" [p-status]=\"status\">\r\n    </po-stepper-circle>\r\n\r\n    <div\r\n      [class.po-stepper-step-bar-bottom]=\"isVerticalOrientation\"\r\n      [class.po-stepper-step-bar-right]=\"!isVerticalOrientation\"\r\n      [class.po-stepper-step-dashed-border]=\"nextStatus === 'disabled' && !isVerticalOrientation\"\r\n      [class.po-stepper-step-dashed-border-vertical]=\"nextStatus === 'disabled' && isVerticalOrientation\"\r\n      [style.margin-left.px]=\"marginHorizontalBar\"\r\n    ></div>\r\n  </div>\r\n\r\n  <po-stepper-label class=\"po-stepper-step-label-position\" [p-content]=\"label\"> </po-stepper-label>\r\n</div>\r\n"
                },] }
    ];
    PoStepperStepComponent.propDecorators = {
        circleContent: [{ type: i0.Input, args: ['p-circle-content',] }],
        orientation: [{ type: i0.Input, args: ['p-orientation',] }],
        nextStatus: [{ type: i0.Input, args: ['p-next-status',] }],
        activated: [{ type: i0.Output, args: ['p-activated',] }],
        click: [{ type: i0.Output, args: ['p-click',] }],
        enter: [{ type: i0.Output, args: ['p-enter',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        status: [{ type: i0.Input, args: ['p-status',] }],
        stepIcons: [{ type: i0.Input, args: ['p-step-icons',] }],
        stepSize: [{ type: i0.Input, args: ['p-step-size',] }]
    };

    /**
     * @description
     * Módulo do componente po-stepper
     */
    var PoStepperModule = /** @class */ (function () {
        function PoStepperModule() {
        }
        return PoStepperModule;
    }());
    PoStepperModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [
                        PoStepComponent,
                        PoStepperCircleComponent,
                        PoStepperComponent,
                        PoStepperLabelComponent,
                        PoStepperStepComponent
                    ],
                    exports: [PoStepComponent, PoStepperComponent]
                },] }
    ];

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente responsável por manipular os botões de aba.
     */
    var PoTabButtonComponent = /** @class */ (function () {
        function PoTabButtonComponent(elementRef) {
            this.elementRef = elementRef;
            // Função sera emitida quando a tab ficar ativada
            this.activated = new i0.EventEmitter();
            // Função sera emitida quando a tab ficar desabilitada ou escondida
            this.changeState = new i0.EventEmitter();
            // Método recebido do usuário para ser disparado quando clicar na aba
            this.click = new i0.EventEmitter();
        }
        Object.defineProperty(PoTabButtonComponent.prototype, "active", {
            get: function () {
                return this._active;
            },
            // Ativa o botão
            set: function (value) {
                this._active = value;
                this.emitActivated();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTabButtonComponent.prototype, "hide", {
            get: function () {
                return this._hide;
            },
            // Oculta o botão
            set: function (value) {
                this._hide = convertToBoolean(value);
                this.setDisplayOnHide();
            },
            enumerable: false,
            configurable: true
        });
        PoTabButtonComponent.prototype.ngOnChanges = function (changes) {
            if ((changes.hide && changes.hide.currentValue) || (changes.disabled && changes.disabled.currentValue)) {
                this.changeState.emit(this);
            }
        };
        PoTabButtonComponent.prototype.onClick = function () {
            if (!this.disabled) {
                this.click.emit(this.id);
            }
        };
        PoTabButtonComponent.prototype.emitActivated = function () {
            if (this.active) {
                this.activated.emit(this);
            }
        };
        PoTabButtonComponent.prototype.setDisplayOnHide = function () {
            this.elementRef.nativeElement.style.display = this.hide ? 'none' : '';
        };
        return PoTabButtonComponent;
    }());
    PoTabButtonComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-tab-button',
                    template: "<div\r\n  class=\"po-tab-button-md\"\r\n  [attr.tabindex]=\"disabled ? null : 0\"\r\n  [class.po-tab-button-active]=\"active\"\r\n  [class.po-tab-button-disabled]=\"disabled\"\r\n  [class.po-tab-button-sm]=\"small\"\r\n  (click)=\"onClick()\"\r\n  (keyup.enter)=\"onClick()\"\r\n>\r\n  <span class=\"po-tab-button-label po-text-ellipsis\">\r\n    {{ label }}\r\n  </span>\r\n</div>\r\n"
                },] }
    ];
    PoTabButtonComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PoTabButtonComponent.propDecorators = {
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        id: [{ type: i0.Input, args: ['p-id',] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        small: [{ type: i0.Input, args: ['p-small',] }],
        activated: [{ type: i0.Output, args: ['p-activated',] }],
        changeState: [{ type: i0.Output, args: ['p-change-state',] }],
        click: [{ type: i0.Output, args: ['p-click',] }],
        active: [{ type: i0.Input, args: ['p-active',] }],
        hide: [{ type: i0.Input, args: ['p-hide',] }]
    };

    /**
     * @description
     *
     * O componente `po-tab` renderiza uma aba na qual envolve um conteúdo HTML.
     *
     * Com este componente é possível atribuir um rótulo para auxiliar na identificação do conteúdo, ativar para que o mesmo seja exibido,
     * desabilitar para impossibilitar o acesso, bem como ocultar para indisponibilizar a aba.
     *
     * > Para controlar a navegação entre diversas abas, utilizar o componente [`po-tabs`](/documentation/po-tabs).
     */
    var PoTabBaseComponent = /** @class */ (function () {
        function PoTabBaseComponent() {
            /** Método disparado ao clicar na aba. */
            this.click = new i0.EventEmitter();
            // ID da aba
            this.id = uuid();
            this._active = false;
            this._disabled = false;
            this._hide = false;
        }
        Object.defineProperty(PoTabBaseComponent.prototype, "active", {
            get: function () {
                return this._active;
            },
            /**
             * @optional
             *
             * @description
             *
             * Ativa a aba exibindo seu conteúdo.
             *
             * > Sugere-se utilizar na aba de conteúdo inicial.
             *
             * @default `false`
             */
            set: function (active) {
                this._active = convertToBoolean(active);
                this.setDisplayOnActive();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTabBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita a aba.
             *
             * @default `false`
             */
            set: function (disabled) {
                this._disabled = convertToBoolean(disabled);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTabBaseComponent.prototype, "hide", {
            get: function () {
                return this._hide;
            },
            /**
             * @optional
             *
             * @description
             *
             * Oculta a aba.
             *
             * @default `false`
             */
            set: function (hide) {
                this._hide = convertToBoolean(hide);
            },
            enumerable: false,
            configurable: true
        });
        return PoTabBaseComponent;
    }());
    PoTabBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoTabBaseComponent.propDecorators = {
        label: [{ type: i0.Input, args: ['p-label',] }],
        click: [{ type: i0.Output, args: ['p-click',] }],
        active: [{ type: i0.Input, args: ['p-active',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        hide: [{ type: i0.Input, args: ['p-hide',] }]
    };

    /**
     * @docsExtends PoTabBaseComponent
     */
    var PoTabComponent = /** @class */ (function (_super) {
        __extends(PoTabComponent, _super);
        function PoTabComponent(elementRef) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            return _this;
        }
        PoTabComponent.prototype.ngAfterContentInit = function () {
            this.setDisplayOnActive();
        };
        PoTabComponent.prototype.setDisplayOnActive = function () {
            this.elementRef.nativeElement.style.display = this.active ? '' : 'none';
        };
        return PoTabComponent;
    }(PoTabBaseComponent));
    PoTabComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-tab',
                    template: "<ng-content></ng-content>\r\n"
                },] }
    ];
    PoTabComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para agrupamento de componentes `po-tab-button` que os rendereiza em uma um caixa de diálogo
     * no formato de lista.
     */
    var PoTabDropdownComponent = /** @class */ (function () {
        function PoTabDropdownComponent() {
            // Lista de abas
            this.tabs = [];
            // Evento que será emitido ao ativar uma aba
            this.activated = new i0.EventEmitter();
            // Evento que será emitido a aba for desabilitada ou ocultada
            this.changeState = new i0.EventEmitter();
            // Evento de click
            this.click = new i0.EventEmitter();
        }
        PoTabDropdownComponent.prototype.getContainerClass = function () {
            return this.small ? 'po-tab-dropdown-container-sm' : 'po-tab-dropdown-container';
        };
        PoTabDropdownComponent.prototype.togglePopover = function () {
            this.popover.isHidden ? this.popover.open() : this.popover.close();
        };
        return PoTabDropdownComponent;
    }());
    PoTabDropdownComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-tab-dropdown',
                    template: "<div\r\n  #tabDrop\r\n  class=\"po-tab-dropdown-content po-tab-button-md\"\r\n  [attr.tabindex]=\"0\"\r\n  [class.po-tab-button-sm]=\"small\"\r\n  (keyup.enter)=\"togglePopover()\"\r\n>\r\n  <div class=\"po-tab-button-label\">\r\n    {{ label }}\r\n    <span class=\"po-icon\" [ngClass]=\"popover.isHidden ? 'po-icon-arrow-down' : 'po-icon-arrow-up'\"> </span>\r\n  </div>\r\n</div>\r\n\r\n<po-popover #popover p-hide-arrow p-position=\"bottom\" [p-target]=\"tabDropdown\">\r\n  <div [ngClass]=\"getContainerClass()\">\r\n    <po-tab-button\r\n      *ngFor=\"let tab of tabs\"\r\n      class=\"po-tab-dropdown-button\"\r\n      [class.po-tab-dropdown-button-active]=\"tab.active\"\r\n      [p-active]=\"tab.active\"\r\n      [p-disabled]=\"tab.disabled\"\r\n      [p-hide]=\"tab.hide\"\r\n      [p-id]=\"tab.id\"\r\n      [p-label]=\"tab.label\"\r\n      [p-small]=\"small\"\r\n      (p-activated)=\"activated.emit(tab)\"\r\n      (p-change-state)=\"changeState.emit(tab)\"\r\n      (p-click)=\"popover.close(); click.emit(tab)\"\r\n    >\r\n    </po-tab-button>\r\n  </div>\r\n</po-popover>\r\n"
                },] }
    ];
    PoTabDropdownComponent.propDecorators = {
        popover: [{ type: i0.ViewChild, args: ['popover', { static: true },] }],
        tabDropdown: [{ type: i0.ViewChild, args: ['tabDrop', { read: i0.ElementRef, static: true },] }],
        label: [{ type: i0.Input, args: ['p-label',] }],
        small: [{ type: i0.Input, args: ['p-small',] }],
        tabs: [{ type: i0.Input, args: ['p-tabs',] }],
        activated: [{ type: i0.Output, args: ['p-activated',] }],
        changeState: [{ type: i0.Output, args: ['p-change-state',] }],
        click: [{ type: i0.Output, args: ['p-click',] }]
    };

    /**
     * @description
     *
     * O componente `po-tabs` é responsável por agrupar [abas](/documentation/po-tab) dispostas numa linha horizontal,
     * ideal para facilitar a organização de conteúdos.
     *
     * Em dispositivos móveis o componente exibirá tadas as abas de maneira linear gerando um *scroll* na horizontal. Já em telas telas com
     * resoluções maiores, o componente exibirá até cinco abas normalmente, porém, à partir de seis abas o componente automaticamente torna
     * visível apenas as quatro primeiras, agrupando as subsequentes na quinta aba rotulada de **Mais**.
     *
     * > As abas que estiverem agrupadas serão dispostas numa cascata suspensa que será exibida ao clicar no botão **Mais**.
     *
     * É possível realizar a navegação entre as abas através da tecla TAB do teclado.
     * Caso uma aba estiver desabilitada, não receberá foco de navegação.
     *
     * #### Boas práticas
     *
     * - Evite utilizar uma quantidade excessiva de abas, pois irá gerar um *scroll* muito longo no `dropdown`;
     * - Evite `labels` extensos para as `tabs` pois podem quebrar seu *layout*, use `labels` diretos, curtos e intuitivos.
     */
    var PoTabsBaseComponent = /** @class */ (function () {
        function PoTabsBaseComponent() {
            this._small = false;
        }
        Object.defineProperty(PoTabsBaseComponent.prototype, "small", {
            get: function () {
                return this._small;
            },
            /**
             * @optinal
             *
             * @description
             *
             * Diminui o tamanho das abas.
             *
             * @default `false`
             */
            set: function (value) {
                this._small = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        return PoTabsBaseComponent;
    }());
    PoTabsBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoTabsBaseComponent.propDecorators = {
        small: [{ type: i0.Input, args: ['p-small',] }]
    };

    var poTabsMaxNumberOfTabs = 5;
    /**
     * @docsExtends PoTabsBaseComponent
     *
     * @example
     *
     * <example name="po-tabs-basic" title="PO Tabs Basic">
     *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.html"> </file>
     *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-tabs-labs" title="PO Tabs Labs">
     *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.html"> </file>
     *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-tabs-travel" title="PO Tabs - Travel">
     *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.html"> </file>
     *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.ts"> </file>
     * </example>
     *
     * <example name="po-tabs-business-conf" title="PO Tabs - Business Conference">
     *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.html"> </file>
     *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.ts"> </file>
     * </example>
     */
    var PoTabsComponent = /** @class */ (function (_super) {
        __extends(PoTabsComponent, _super);
        function PoTabsComponent(changeDetector) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            _this.maxNumberOfTabs = poTabsMaxNumberOfTabs;
            return _this;
        }
        Object.defineProperty(PoTabsComponent.prototype, "isMobileDevice", {
            get: function () {
                return isMobile();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTabsComponent.prototype, "isShowTabDropdown", {
            get: function () {
                return !this.isMobileDevice && this.visibleTabs.length > this.maxNumberOfTabs;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTabsComponent.prototype, "overflowedTabs", {
            // tabs que serão apresentadas na aba "Mais"
            get: function () {
                var _this = this;
                return this.visibleTabs.filter(function (_tab, index) { return index > _this.maxNumberOfTabs - 2; });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTabsComponent.prototype, "visibleTabs", {
            get: function () {
                return this.tabs.filter(function (tab) { return !tab.hide; });
            },
            enumerable: false,
            configurable: true
        });
        PoTabsComponent.prototype.closePopover = function () {
            var containsPopoverVisible = this.tabDropdown && this.tabDropdown.popover && !this.tabDropdown.popover.isHidden;
            if (containsPopoverVisible) {
                this.tabDropdown.popover.close();
            }
        };
        PoTabsComponent.prototype.isVisibleTab = function (tab) {
            if (this.isMobileDevice) {
                return true;
            }
            var visibleTabIndex = this.visibleTabs.findIndex(function (visibleTab) { return visibleTab.id === tab.id; });
            return this.visibleTabs.length <= this.maxNumberOfTabs || visibleTabIndex < this.maxNumberOfTabs - 1;
        };
        // Função disparada quando alguma tab ficar ativa
        PoTabsComponent.prototype.onTabActive = function (tab) {
            this.previousActiveTab = this.tabs.find(function (tabChild) { return tabChild.active && tabChild.id !== tab.id; });
            this.deactivateTab();
        };
        // funcao será disparada quando mudar o estado do poTab para desabilitado ou escondido.
        PoTabsComponent.prototype.onTabChangeState = function (tab) {
            if (tab.active) {
                tab.active = false;
                this.activeDistinctTab();
                this.changeDetector.detectChanges();
            }
        };
        // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
        PoTabsComponent.prototype.selectedTab = function (tab) {
            tab.active = true;
            if (tab.click) {
                tab.click.emit(tab);
            }
            this.changeDetector.detectChanges();
        };
        PoTabsComponent.prototype.trackByFn = function (_i, tab) {
            return tab.id;
        };
        // ativa a previousActiveTab ou primeira tab encontrada.
        PoTabsComponent.prototype.activeDistinctTab = function () {
            if (this.previousActiveTab) {
                this.previousActiveTab.active = true;
            }
            else {
                this.activeFirstTab();
            }
        };
        // Ativa a primeira Tab que não estiver desabilitada ou escondida.
        PoTabsComponent.prototype.activeFirstTab = function () {
            this.tabs.some(function (tabChild) {
                if (!tabChild.disabled && !tabChild.hide) {
                    tabChild.active = true;
                    return true;
                }
            });
        };
        // desativa previousActiveTab e dispara a detecção de mudança.
        PoTabsComponent.prototype.deactivateTab = function () {
            if (this.previousActiveTab) {
                this.previousActiveTab.active = false;
                this.changeDetector.detectChanges();
            }
        };
        return PoTabsComponent;
    }(PoTabsBaseComponent));
    PoTabsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-tabs',
                    template: "<div class=\"po-tabs-container\" [class.po-tabs-container-mobile]=\"isMobileDevice\">\r\n  <div class=\"po-tabs-header\">\r\n    <ng-container *ngFor=\"let tab of tabs; trackBy: trackByFn\">\r\n      <po-tab-button\r\n        *ngIf=\"isVisibleTab(tab)\"\r\n        class=\"po-tab-button\"\r\n        [class.po-tab-button-mobile]=\"isMobileDevice\"\r\n        [p-active]=\"tab.active\"\r\n        [p-disabled]=\"tab.disabled\"\r\n        [p-hide]=\"tab.hide\"\r\n        [p-id]=\"tab.id\"\r\n        [p-label]=\"tab.label\"\r\n        [p-small]=\"small\"\r\n        (keyup.enter)=\"closePopover()\"\r\n        (p-activated)=\"onTabActive(tab)\"\r\n        (p-change-state)=\"onTabChangeState(tab)\"\r\n        (p-click)=\"selectedTab(tab)\"\r\n      >\r\n      </po-tab-button>\r\n    </ng-container>\r\n\r\n    <po-tab-dropdown\r\n      #tabDropdown\r\n      *ngIf=\"isShowTabDropdown\"\r\n      class=\"po-tab-button po-tab-dropdown\"\r\n      p-label=\"Mais\"\r\n      [p-small]=\"small\"\r\n      [p-tabs]=\"overflowedTabs\"\r\n      (p-activated)=\"onTabActive($event)\"\r\n      (p-change-state)=\"onTabChangeState($event)\"\r\n      (p-click)=\"selectedTab($event)\"\r\n    >\r\n    </po-tab-dropdown>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"po-tabs-content\">\r\n  <ng-content></ng-content>\r\n</div>\r\n"
                },] }
    ];
    PoTabsComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    PoTabsComponent.propDecorators = {
        tabs: [{ type: i0.ContentChildren, args: [PoTabComponent,] }],
        tabDropdown: [{ type: i0.ViewChild, args: ['tabDropdown', { static: true },] }]
    };

    /**
     * @description
     * Módulo do componente po-tabs
     */
    var PoTabsModule = /** @class */ (function () {
        function PoTabsModule() {
        }
        return PoTabsModule;
    }());
    PoTabsModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, PoPopoverModule],
                    declarations: [PoTabButtonComponent, PoTabComponent, PoTabDropdownComponent, PoTabsComponent],
                    exports: [PoTabComponent, PoTabsComponent]
                },] }
    ];

    var poToolbarActionsIconDefault = 'po-icon-more';
    /**
     * @docsPrivate
     *
     * @usedBy PoToolbarComponent
     *
     * @description
     *
     * O componente `po-toolbar-actions` tem como objetivo receber uma lista de ações e um ícone que podem ser personalizados.
     */
    var PoToolbarActionsComponent = /** @class */ (function () {
        function PoToolbarActionsComponent() {
            this._actionsIcon = poToolbarActionsIconDefault;
        }
        Object.defineProperty(PoToolbarActionsComponent.prototype, "actionsIcon", {
            get: function () {
                return this._actionsIcon;
            },
            /** Define o ícone das ações. */
            set: function (icon) {
                this._actionsIcon = isTypeof(icon, 'string') || icon instanceof i0.TemplateRef ? icon : poToolbarActionsIconDefault;
            },
            enumerable: false,
            configurable: true
        });
        return PoToolbarActionsComponent;
    }());
    PoToolbarActionsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-toolbar-actions',
                    template: "<div class=\"po-toolbar-actions\" (click)=\"popup.toggle()\">\r\n  <span #toolbarActions>\r\n    <po-icon class=\"po-toolbar-icon po-clickable\" [p-icon]=\"actionsIcon\"></po-icon>\r\n  </span>\r\n</div>\r\n\r\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"toolbarActions\"> </po-popup>\r\n"
                },] }
    ];
    PoToolbarActionsComponent.propDecorators = {
        actions: [{ type: i0.Input, args: ['p-actions',] }],
        actionsIcon: [{ type: i0.Input, args: ['p-actions-icon',] }]
    };

    /**
     * @description
     *
     * O componente `po-toolbar` é um cabeçalho para o título da aplicação e informações de usuário e notificações quando houver necessidade.
     */
    var PoToolbarBaseComponent = /** @class */ (function () {
        function PoToolbarBaseComponent() {
            /** Se falso, oculta o ícone de notificações. */
            this.showNotification = true;
        }
        Object.defineProperty(PoToolbarBaseComponent.prototype, "notificationNumber", {
            get: function () {
                return this._notificationNumber;
            },
            /**
             * @optional
             *
             * @description
             *
             * Número de notificações.
             */
            set: function (value) {
                this._notificationNumber = convertToInt(value, 0);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoToolbarBaseComponent.prototype, "isShowProfile", {
            get: function () {
                return !!(this.profile || this.profileActions);
            },
            enumerable: false,
            configurable: true
        });
        return PoToolbarBaseComponent;
    }());
    PoToolbarBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoToolbarBaseComponent.propDecorators = {
        actions: [{ type: i0.Input, args: ['p-actions',] }],
        actionsIcon: [{ type: i0.Input, args: ['p-actions-icon',] }],
        profile: [{ type: i0.Input, args: ['p-profile',] }],
        profileActions: [{ type: i0.Input, args: ['p-profile-actions',] }],
        showNotification: [{ type: i0.Input, args: ['p-show-notification',] }],
        title: [{ type: i0.Input, args: ['p-title',] }],
        notificationActions: [{ type: i0.Input, args: ['p-notification-actions',] }],
        notificationNumber: [{ type: i0.Input, args: ['p-notification-number',] }]
    };

    /**
     * @docsExtends PoToolbarBaseComponent
     *
     * @example
     *
     * <example name="po-toolbar-basic" title="PO Toolbar Basic">
     *  <file name="sample-po-toolbar-basic/sample-po-toolbar-basic.component.html"> </file>
     *  <file name="sample-po-toolbar-basic/sample-po-toolbar-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-toolbar-labs" title="PO Toolbar Labs">
     *  <file name="sample-po-toolbar-labs/sample-po-toolbar-labs.component.html"> </file>
     *  <file name="sample-po-toolbar-labs/sample-po-toolbar-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-toolbar-logged" title="PO Toolbar - Logged">
     *  <file name="sample-po-toolbar-logged/sample-po-toolbar-logged.component.html"> </file>
     *  <file name="sample-po-toolbar-logged/sample-po-toolbar-logged.component.ts"> </file>
     * </example>
     */
    var PoToolbarComponent = /** @class */ (function (_super) {
        __extends(PoToolbarComponent, _super);
        function PoToolbarComponent(titleService, viewRef) {
            var _this = _super.call(this) || this;
            _this.titleService = titleService;
            return _this;
        }
        PoToolbarComponent.prototype.ngOnInit = function () {
            this.setTitle(this.title);
        };
        PoToolbarComponent.prototype.setTitle = function (newTitle) {
            this.titleService.setTitle(newTitle);
        };
        return PoToolbarComponent;
    }(PoToolbarBaseComponent));
    PoToolbarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-toolbar',
                    template: "<div class=\"po-toolbar\">\r\n  <div class=\"po-toolbar-title\">{{ title }}</div>\r\n\r\n  <div class=\"po-toolbar-group-icon\">\r\n    <po-toolbar-actions *ngIf=\"actions && actions.length\" [p-actions]=\"actions\" [p-actions-icon]=\"actionsIcon\">\r\n    </po-toolbar-actions>\r\n\r\n    <po-toolbar-notification\r\n      *ngIf=\"showNotification && notificationActions\"\r\n      [p-notification-actions]=\"notificationActions\"\r\n      [p-notification-number]=\"notificationNumber\"\r\n    >\r\n    </po-toolbar-notification>\r\n\r\n    <po-toolbar-profile *ngIf=\"isShowProfile\" [p-profile]=\"profile\" [p-profile-actions]=\"profileActions\">\r\n    </po-toolbar-profile>\r\n  </div>\r\n</div>\r\n"
                },] }
    ];
    PoToolbarComponent.ctorParameters = function () { return [
        { type: platformBrowser.Title },
        { type: i0.ViewContainerRef }
    ]; };

    /**
     * @docsPrivate
     *
     * @usedBy PoToolbarComponent
     *
     * @description
     *
     * O componente `po-toolbar-notification` tem como objetivo notificar o usuário de novas ações da aplicação que necessitam de atenção,
     * como por exemplo um alerta de nova mensagem.
     *
     * O mesmo também permite que a cada nova notificação seja incrementado e exibido, ou não, este número em uma *tag* ao lado do
     * ícone de notificações.
     */
    var PoToolbarNotificationComponent = /** @class */ (function () {
        function PoToolbarNotificationComponent() {
            this._notificationNumber = 0;
        }
        Object.defineProperty(PoToolbarNotificationComponent.prototype, "notificationNumber", {
            get: function () {
                return this._notificationNumber;
            },
            /** Define o número de notificações. */
            set: function (value) {
                this._notificationNumber = Number.isInteger(value) ? value : 0;
            },
            enumerable: false,
            configurable: true
        });
        return PoToolbarNotificationComponent;
    }());
    PoToolbarNotificationComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-toolbar-notification',
                    template: "<div class=\"po-toolbar-notification po-clickable\" (click)=\"popup.toggle()\">\r\n  <span #notification class=\"po-icon po-icon-notification po-toolbar-icon\"></span>\r\n  <div *ngIf=\"notificationNumber\" class=\"po-toolbar-notification-badge\">\r\n    {{ notificationNumber }}\r\n  </div>\r\n</div>\r\n\r\n<po-popup #popup [p-actions]=\"notificationActions\" [p-target]=\"notification\"> </po-popup>\r\n",
                    providers: [PoControlPositionService]
                },] }
    ];
    PoToolbarNotificationComponent.propDecorators = {
        notificationActions: [{ type: i0.Input, args: ['p-notification-actions',] }],
        notificationNumber: [{ type: i0.Input, args: ['p-notification-number',] }]
    };

    /**
     * @docsPrivate
     *
     * @docsExtends PoToolbarProfileComponent
     *
     * @description
     *
     * Componente `po-toolbar-profile`.
     */
    var PoToolbarProfileComponent = /** @class */ (function () {
        function PoToolbarProfileComponent() {
        }
        Object.defineProperty(PoToolbarProfileComponent.prototype, "profileAvatar", {
            get: function () {
                return this.profile ? this.profile.avatar : undefined;
            },
            enumerable: false,
            configurable: true
        });
        return PoToolbarProfileComponent;
    }());
    PoToolbarProfileComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-toolbar-profile',
                    template: "<div #profileElement class=\"po-toolbar-profile po-clickable\" (click)=\"popup.toggle()\">\r\n  <po-avatar p-size=\"xs\" [p-src]=\"profileAvatar\"></po-avatar>\r\n</div>\r\n\r\n<po-popup #popup [p-actions]=\"profileActions\" [p-target]=\"profileElement\">\r\n  <div p-popup-header-template *ngIf=\"profile?.title\" class=\"po-toolbar-profile-item-header\">\r\n    <po-avatar class=\"po-toolbar-profile-item-avatar\" p-size=\"sm\" [p-src]=\"profileAvatar\"> </po-avatar>\r\n\r\n    <div>\r\n      <div class=\"po-toolbar-profile-item-header-title\">\r\n        {{ profile.title }}\r\n      </div>\r\n\r\n      <div *ngIf=\"profile.subtitle\" class=\"po-toolbar-profile-item-header-subtitle\">\r\n        {{ profile.subtitle }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</po-popup>\r\n",
                    providers: [PoControlPositionService]
                },] }
    ];
    PoToolbarProfileComponent.propDecorators = {
        profile: [{ type: i0.Input, args: ['p-profile',] }],
        profileActions: [{ type: i0.Input, args: ['p-profile-actions',] }]
    };

    /**
     * @description
     *
     * Módulo do componente po-toolbar
     *
     */
    var PoToolbarModule = /** @class */ (function () {
        function PoToolbarModule() {
        }
        return PoToolbarModule;
    }());
    PoToolbarModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, PoAvatarModule, PoPopupModule, PoIconModule],
                    declarations: [
                        PoToolbarActionsComponent,
                        PoToolbarComponent,
                        PoToolbarNotificationComponent,
                        PoToolbarProfileComponent
                    ],
                    exports: [PoToolbarComponent],
                    providers: [],
                    schemas: []
                },] }
    ];

    var poTreeViewMaxLevel = 4;
    /**
     * @description
     *
     * O componente fornece um modelo de visualização em árvore, possibilitando a visualização das informações de maneira
     * hierárquica, desta forma sendo possível utilizar até 4 níveis.
     *
     * Nele é possível navegar entre os itens através da tecla *tab*, permitindo expandir ou colapsar o item em foco
     * por meio das teclas *enter* e *space*.
     *
     * Além da navegação, o componente possibilita também a seleção dos itens do primeiro ao último nível, tanto de forma parcial como completa.
     *
     * O componente também possui eventos disparados ao marcar/desmarcar e expandir/colapsar os itens.
     */
    var PoTreeViewBaseComponent = /** @class */ (function () {
        function PoTreeViewBaseComponent() {
            /**
             * @optional
             *
             * @description
             *
             * Ação que será disparada ao colapsar um item.
             *
             * > Como parâmetro o componente envia o item colapsado.
             */
            this.collapsed = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Ação que será disparada ao expandir um item.
             *
             * > Como parâmetro o componente envia o item expandido.
             */
            this.expanded = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Ação que será disparada ao selecionar um item.
             *
             * > Como parâmetro o componente envia o item selecionado.
             */
            this.selected = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Ação que será disparada ao desfazer a seleção de um item.
             *
             * > Como parâmetro o componente envia o item que foi desmarcado.
             */
            this.unselected = new i0.EventEmitter();
            this._items = [];
            this._selectable = false;
        }
        Object.defineProperty(PoTreeViewBaseComponent.prototype, "items", {
            get: function () {
                return this._items;
            },
            /**
             * Lista de itens do tipo `PoTreeViewItem` que será renderizada pelo componente.
             */
            set: function (value) {
                this._items = Array.isArray(value) ? this.getItemsByMaxLevel(value) : [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoTreeViewBaseComponent.prototype, "selectable", {
            get: function () {
                return this._selectable;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita uma caixa de seleção para selecionar e/ou desmarcar um item da lista.
             *
             * @default false
             */
            set: function (value) {
                this._selectable = convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        PoTreeViewBaseComponent.prototype.emitExpanded = function (treeViewItem) {
            var event = treeViewItem.expanded ? 'expanded' : 'collapsed';
            this[event].emit(Object.assign({}, treeViewItem));
        };
        PoTreeViewBaseComponent.prototype.emitSelected = function (treeViewItem) {
            var event = treeViewItem.selected ? 'selected' : 'unselected';
            this.updateItemsOnSelect(treeViewItem);
            this[event].emit(Object.assign({}, treeViewItem));
        };
        PoTreeViewBaseComponent.prototype.addChildItemInParent = function (childItem, parentItem) {
            if (!parentItem.subItems) {
                parentItem.subItems = [];
            }
            parentItem.subItems.push(childItem);
        };
        // caso houver parentItem:
        //  - expande o parentItem caso o filho estiver expandido;
        //  - adiciona o childItem no parentItem;
        //  - marca o parentItem caso conter subItems marcodos ou nulos;
        // Se não conter parentItem, adiciona o childItem no items.
        PoTreeViewBaseComponent.prototype.addItem = function (items, childItem, parentItem) {
            if (parentItem) {
                this.expandParentItem(childItem, parentItem);
                this.addChildItemInParent(childItem, parentItem);
                this.selectItemBySubItems(parentItem);
                items.push(parentItem);
            }
            else {
                items.push(childItem);
            }
        };
        PoTreeViewBaseComponent.prototype.selectAllItems = function (items, isSelected) {
            var _this = this;
            items.forEach(function (item) {
                if (item.subItems) {
                    _this.selectAllItems(item.subItems, isSelected);
                }
                item.selected = isSelected;
            });
        };
        PoTreeViewBaseComponent.prototype.selectItemBySubItems = function (item) {
            item.selected = this.everyItemSelected(item.subItems);
        };
        // retornará:
        //  - true: se todos os items estiverem marcados;
        //  - null: se no minimo um item esteja marcado ou nullo (indeterminate)
        //  - false: caso não corresponda em nenhuma das opções acima, no caso, nenhum marcado ou nulo;
        PoTreeViewBaseComponent.prototype.everyItemSelected = function (items) {
            if (items === void 0) { items = []; }
            var itemsLength = items.length;
            var lengthCheckedItems = items.filter(function (item) { return item.selected; }).length;
            if (itemsLength && itemsLength === lengthCheckedItems) {
                return true;
            }
            var hasIndeterminateItems = items.filter(function (item) { return item.selected || item.selected === null; }).length;
            if (hasIndeterminateItems) {
                return null;
            }
            return false;
        };
        // expande o item pai caso o filho estiver expandido.
        PoTreeViewBaseComponent.prototype.expandParentItem = function (childItem, parentItem) {
            if (childItem.expanded) {
                parentItem.expanded = true;
            }
        };
        PoTreeViewBaseComponent.prototype.getItemsByMaxLevel = function (items, level, parentItem, newItems) {
            var _this = this;
            if (items === void 0) { items = []; }
            if (level === void 0) { level = 0; }
            if (newItems === void 0) { newItems = []; }
            items.forEach(function (item) {
                var subItems = item.subItems, currentItem = __rest(item, ["subItems"]);
                if (level === poTreeViewMaxLevel) {
                    return;
                }
                if (Array.isArray(subItems)) {
                    // caso um item pai iniciar selecionado, deve selecionar os filhos.
                    if (currentItem.selected) {
                        _this.selectAllItems(subItems, currentItem.selected);
                    }
                    _this.getItemsByMaxLevel(subItems, ++level, currentItem);
                    --level;
                }
                _this.addItem(newItems, currentItem, parentItem);
            });
            return newItems;
        };
        PoTreeViewBaseComponent.prototype.getItemsWithParentSelected = function (items, parentItem, newItems) {
            var _this = this;
            if (items === void 0) { items = []; }
            if (newItems === void 0) { newItems = []; }
            items.forEach(function (item) {
                var subItems = item.subItems, currentItem = __rest(item, ["subItems"]);
                if (Array.isArray(subItems)) {
                    _this.getItemsWithParentSelected(subItems, currentItem);
                }
                _this.addItem(newItems, currentItem, parentItem);
            });
            return newItems;
        };
        PoTreeViewBaseComponent.prototype.updateItemsOnSelect = function (selectedItem) {
            if (selectedItem.subItems) {
                this.selectAllItems(selectedItem.subItems, selectedItem.selected);
            }
            this._items = this.getItemsWithParentSelected(this.items);
        };
        return PoTreeViewBaseComponent;
    }());
    PoTreeViewBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoTreeViewBaseComponent.propDecorators = {
        collapsed: [{ type: i0.Output, args: ['p-collapsed',] }],
        expanded: [{ type: i0.Output, args: ['p-expanded',] }],
        selected: [{ type: i0.Output, args: ['p-selected',] }],
        unselected: [{ type: i0.Output, args: ['p-unselected',] }],
        items: [{ type: i0.Input, args: ['p-items',] }],
        selectable: [{ type: i0.Input, args: ['p-selectable',] }]
    };

    var PoTreeViewService = /** @class */ (function () {
        function PoTreeViewService() {
            this.expandedEvent = new rxjs.Subject();
            this.selectedEvent = new rxjs.Subject();
        }
        PoTreeViewService.prototype.emitExpandedEvent = function (treeViewItem) {
            return this.expandedEvent.next(treeViewItem);
        };
        PoTreeViewService.prototype.emitSelectedEvent = function (treeViewItem) {
            return this.selectedEvent.next(treeViewItem);
        };
        PoTreeViewService.prototype.onExpand = function () {
            return this.expandedEvent.asObservable();
        };
        PoTreeViewService.prototype.onSelect = function () {
            return this.selectedEvent.asObservable();
        };
        return PoTreeViewService;
    }());
    PoTreeViewService.decorators = [
        { type: i0.Injectable }
    ];

    /**
     * @docsExtends PoTreeViewBaseComponent
     *
     * @example
     *
     * <example name="po-tree-view-basic" title="PO Tree View Basic">
     *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.html"> </file>
     *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-tree-view-labs" title="PO Tree View Labs">
     *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.html"> </file>
     *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-tree-view-folder-structure" title="PO Tree View - Folder Structure">
     *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.html"> </file>
     *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.ts"> </file>
     * </example>
     *
     * <example name="po-tree-view-supermarket" title="PO Tree View - Supermarket">
     *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.html"> </file>
     *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.ts"> </file>
     * </example>
     */
    var PoTreeViewComponent = /** @class */ (function (_super) {
        __extends(PoTreeViewComponent, _super);
        function PoTreeViewComponent(treeViewService) {
            var _this = _super.call(this) || this;
            _this.treeViewService = treeViewService;
            return _this;
        }
        Object.defineProperty(PoTreeViewComponent.prototype, "hasItems", {
            get: function () {
                return !!(this.items && this.items.length);
            },
            enumerable: false,
            configurable: true
        });
        PoTreeViewComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.treeViewService.onExpand().subscribe(function (treeViewItem) {
                _this.emitExpanded(treeViewItem);
            });
            this.treeViewService.onSelect().subscribe(function (treeViewItem) {
                _this.emitSelected(treeViewItem);
            });
        };
        PoTreeViewComponent.prototype.trackByFunction = function (index) {
            return index;
        };
        return PoTreeViewComponent;
    }(PoTreeViewBaseComponent));
    PoTreeViewComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-tree-view',
                    template: "<po-container *ngIf=\"hasItems\" p-no-padding p-no-shadow>\r\n  <ul class=\"po-tree-view\">\r\n    <po-tree-view-item *ngFor=\"let item of items; trackBy: trackByFunction\" [p-item]=\"item\" [p-selectable]=\"selectable\">\r\n    </po-tree-view-item>\r\n  </ul>\r\n</po-container>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: [PoTreeViewService]
                },] }
    ];
    PoTreeViewComponent.ctorParameters = function () { return [
        { type: PoTreeViewService }
    ]; };

    var PoTreeViewItemComponent = /** @class */ (function () {
        function PoTreeViewItemComponent(treeViewService) {
            this.treeViewService = treeViewService;
        }
        Object.defineProperty(PoTreeViewItemComponent.prototype, "hasSubItems", {
            get: function () {
                return !!(this.item.subItems && this.item.subItems.length);
            },
            enumerable: false,
            configurable: true
        });
        PoTreeViewItemComponent.prototype.onClick = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.item.expanded = !this.item.expanded;
            this.treeViewService.emitExpandedEvent(Object.assign({}, this.item));
        };
        PoTreeViewItemComponent.prototype.onSelect = function (selectedItem) {
            this.treeViewService.emitSelectedEvent(Object.assign({}, selectedItem));
        };
        PoTreeViewItemComponent.prototype.trackByFunction = function (index) {
            return index;
        };
        return PoTreeViewItemComponent;
    }());
    PoTreeViewItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-tree-view-item',
                    template: "<li class=\"po-tree-view-item\">\r\n  <po-tree-view-item-header\r\n    [p-item]=\"item\"\r\n    [p-selectable]=\"selectable\"\r\n    (p-expanded)=\"onClick($event)\"\r\n    (p-selected)=\"onSelect(item)\"\r\n  >\r\n  </po-tree-view-item-header>\r\n\r\n  <ul *ngIf=\"hasSubItems\" class=\"po-tree-view-item-group\" [@toggleBody]=\"item.expanded ? 'expanded' : 'collapsed'\">\r\n    <po-tree-view-item\r\n      *ngFor=\"let subItem of item.subItems; trackBy: trackByFunction\"\r\n      [p-item]=\"subItem\"\r\n      [p-selectable]=\"selectable\"\r\n    >\r\n    </po-tree-view-item>\r\n  </ul>\r\n</li>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    animations: [
                        animations.trigger('toggleBody', [
                            animations.state('collapsed', animations.style({
                                'overflow-y': 'hidden',
                                visibility: 'hidden',
                                opacity: 0,
                                height: '0'
                            })),
                            animations.transition('expanded => collapsed', [
                                animations.style({ height: '*' }),
                                animations.animate(100, animations.style({ opacity: 0 })),
                                animations.animate(200, animations.style({ height: 0 }))
                            ]),
                            animations.transition('collapsed => expanded', [
                                animations.style({ height: '0' }),
                                animations.animate(100, animations.style({ opacity: 1 })),
                                animations.animate(200, animations.style({ height: '*' }))
                            ])
                        ])
                    ]
                },] }
    ];
    PoTreeViewItemComponent.ctorParameters = function () { return [
        { type: PoTreeViewService }
    ]; };
    PoTreeViewItemComponent.propDecorators = {
        item: [{ type: i0.Input, args: ['p-item',] }],
        selectable: [{ type: i0.Input, args: ['p-selectable',] }]
    };

    var PoTreeViewItemHeaderComponent = /** @class */ (function () {
        function PoTreeViewItemHeaderComponent() {
            this.selectable = false;
            this.expanded = new i0.EventEmitter();
            this.selected = new i0.EventEmitter();
        }
        Object.defineProperty(PoTreeViewItemHeaderComponent.prototype, "hasSubItems", {
            get: function () {
                return !!(this.item.subItems && this.item.subItems.length);
            },
            enumerable: false,
            configurable: true
        });
        return PoTreeViewItemHeaderComponent;
    }());
    PoTreeViewItemHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-tree-view-item-header',
                    template: "<div class=\"po-tree-view-item-header\">\r\n  <button *ngIf=\"hasSubItems\" class=\"po-tree-view-item-header-button\" (click)=\"expanded.emit($event)\">\r\n    <span\r\n      class=\"po-icon po-icon-arrow-down po-tree-view-item-header-button-icon\"\r\n      [class.po-tree-view-item-header-button-icon-transform]=\"item.expanded\"\r\n    >\r\n    </span>\r\n  </button>\r\n\r\n  <ng-container *ngIf=\"selectable; then checkboxTemplate; else labelTemplate\"></ng-container>\r\n</div>\r\n\r\n<ng-template #labelTemplate>\r\n  <span class=\"po-tree-view-item-header-label\" [class.po-tree-view-item-header-padding]=\"!hasSubItems\">\r\n    {{ item.label }}\r\n  </span>\r\n</ng-template>\r\n\r\n<ng-template #checkboxTemplate>\r\n  <po-checkbox\r\n    class=\"po-tree-view-item-header-checkbox\"\r\n    [class.po-tree-view-item-header-padding]=\"!hasSubItems\"\r\n    [p-label]=\"item.label\"\r\n    [(ngModel)]=\"item.selected\"\r\n    (p-change)=\"selected.emit(item)\"\r\n  >\r\n  </po-checkbox>\r\n</ng-template>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    PoTreeViewItemHeaderComponent.propDecorators = {
        inputCheckbox: [{ type: i0.ViewChild, args: ['inputCheckbox',] }],
        item: [{ type: i0.Input, args: ['p-item',] }],
        selectable: [{ type: i0.Input, args: ['p-selectable',] }],
        expanded: [{ type: i0.Output, args: ['p-expanded',] }],
        selected: [{ type: i0.Output, args: ['p-selected',] }]
    };

    /**
     * @description
     *
     * Módulo do componente `po-tree-view`.
     *
     * > Para o correto funcionamento do componente `po-tree-view`, deve ser importado o módulo `BrowserAnimationsModule` no
     * > módulo principal da sua aplicação.
     *
     * Módulo da aplicação:
     * ```
     * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
     * import { PoModule } from '@po-ui/ng-components';
     * ...
     *
     * @NgModule({
     *   imports: [
     *     BrowserModule,
     *     BrowserAnimationsModule,
     *     ...
     *     PoModule
     *   ],
     *   declarations: [
     *     AppComponent,
     *     ...
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     */
    var PoTreeViewModule = /** @class */ (function () {
        function PoTreeViewModule() {
        }
        return PoTreeViewModule;
    }());
    PoTreeViewModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [PoTreeViewComponent, PoTreeViewItemComponent, PoTreeViewItemHeaderComponent],
                    exports: [PoTreeViewComponent],
                    imports: [common.CommonModule, forms.FormsModule, PoContainerModule, PoFieldModule]
                },] }
    ];

    /**
     *
     * @description
     *
     * O componente `po-widget` é recomendado para exibição de *dashboards*, podendo ser utilizado
     * para incluir vários tipos de conteúdo como: gráficos, tabelas, grids e imagens.
     *
     * Além da exibição de conteúdos, este componente possibilita adicionar ações e um link
     * para ajuda, como também possibilita ser utilizado com ou sem sombra.
     *
     * Para controlar sua largura, é possível utilizar o [Grid System](/guides/grid-system) para um maior
     * controle de seu redimensionamento, assim possibilitando o tratamento para diferentes resoluções.
     */
    var PoWidgetBaseComponent = /** @class */ (function () {
        function PoWidgetBaseComponent() {
            /**
             * @optional
             *
             * @description
             *
             * Ação que será executada quando o usuário clicar sobre a área total do `po-widget`.
             */
            this.click = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Função que será disparada com o valor do `p-disabled` quando esta propriedade for alterada.
             */
            this.onDisabled = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Função que será chamada na primeira ação.
             */
            this.primaryAction = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Função que será chamada na segunda ação.
             */
            this.secondaryAction = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             * Função chamada ao clicar no ícone de configuração
             */
            this.setting = new i0.EventEmitter();
            /**
             * @optional
             *
             * @description
             * Função que será chamada ao clicar no título.
             */
            this.titleAction = new i0.EventEmitter();
            this.containerHeight = 'auto';
            this._disabled = false;
            this._noShadow = false;
            this._primary = false;
        }
        Object.defineProperty(PoWidgetBaseComponent.prototype, "background", {
            get: function () {
                return this._background;
            },
            /**
             * @optional
             *
             * @description
             *
             * Aplicação de imagem de fundo.
             * > Se a imagem escolhida intervir na legibilidade do texto contido no `p-widget`,
             * pode-se utilizar a propriedade `p-primary` em conjunto para que os textos fiquem na cor branca.
             *
             */
            set: function (value) {
                this._background = value && typeof value === 'string' ? value : undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoWidgetBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita todas as ações do componente.
             *
             * @default `false`
             */
            set: function (value) {
                this._disabled = convertToBoolean(value);
                this.onDisabled.emit(this.disabled);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoWidgetBaseComponent.prototype, "height", {
            get: function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura do `po-widget`.
             * A altura mínima para o `po-widget` depende do que será exibido através das propriedades `p-primary-label`,
             * `p-setting`, `p-help` e `p-title`.
             * > Caso não seja informado valor, a propriedade irá assumir o tamanho do conteúdo.
             */
            set: function (value) {
                this._height = parseInt(value, 10);
                this.setHeight(this.height);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoWidgetBaseComponent.prototype, "help", {
            get: function () {
                return this._help;
            },
            /**
             * @optional
             *
             * @description
             *
             * Link de ajuda
             */
            set: function (value) {
                this._help = isTypeof(value, 'string') ? value : '';
                this.setHeight(this.height);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoWidgetBaseComponent.prototype, "noShadow", {
            get: function () {
                return this._noShadow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita a sombra do `po-widget`.
             *
             * @default `true`
             */
            set: function (value) {
                this._noShadow = value === '' ? true : convertToBoolean(value);
                this.setHeight(this.height);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoWidgetBaseComponent.prototype, "primary", {
            get: function () {
                return this._primary;
            },
            /**
             * @optional
             *
             * @description
             *
             * Opção para que o `po-widget` fique em destaque.
             *
             * @default `false`
             */
            set: function (value) {
                this._primary = value === '' ? true : convertToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoWidgetBaseComponent.prototype, "primaryLabel", {
            get: function () {
                return this._primaryLabel;
            },
            /**
             * @optional
             *
             * @description
             *
             * Descrição da primeira ação.
             *
             * @default `false`
             */
            set: function (value) {
                this._primaryLabel = isTypeof(value, 'string') ? value : '';
                this.setHeight(this.height);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PoWidgetBaseComponent.prototype, "title", {
            get: function () {
                return this._title;
            },
            /**
             * @optional
             *
             * @description
             *
             * Título do `po-widget`.
             *
             * @default `false`
             */
            set: function (value) {
                this._title = isTypeof(value, 'string') ? value : '';
                this.setHeight(this.height);
            },
            enumerable: false,
            configurable: true
        });
        return PoWidgetBaseComponent;
    }());
    PoWidgetBaseComponent.decorators = [
        { type: i0.Directive }
    ];
    PoWidgetBaseComponent.propDecorators = {
        secondaryLabel: [{ type: i0.Input, args: ['p-secondary-label',] }],
        click: [{ type: i0.Output, args: ['p-click',] }],
        onDisabled: [{ type: i0.Output, args: ['p-on-disabled',] }],
        primaryAction: [{ type: i0.Output, args: ['p-primary-action',] }],
        secondaryAction: [{ type: i0.Output, args: ['p-secondary-action',] }],
        setting: [{ type: i0.Output, args: ['p-setting',] }],
        titleAction: [{ type: i0.Output, args: ['p-title-action',] }],
        background: [{ type: i0.Input, args: ['p-background',] }],
        disabled: [{ type: i0.Input, args: ['p-disabled',] }],
        height: [{ type: i0.Input, args: ['p-height',] }],
        help: [{ type: i0.Input, args: ['p-help',] }],
        noShadow: [{ type: i0.Input, args: ['p-no-shadow',] }],
        primary: [{ type: i0.Input, args: ['p-primary',] }],
        primaryLabel: [{ type: i0.Input, args: ['p-primary-label',] }],
        title: [{ type: i0.Input, args: ['p-title',] }]
    };

    /**
     * @docsExtends PoWidgetBaseComponent
     *
     * @example
     *
     * <example name="po-widget-basic" title="PO Widget Basic">
     *  <file name="sample-po-widget-basic/sample-po-widget-basic.component.html"> </file>
     *  <file name="sample-po-widget-basic/sample-po-widget-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-widget-labs" title="PO Widget Labs">
     *  <file name="sample-po-widget-labs/sample-po-widget-labs.component.html"> </file>
     *  <file name="sample-po-widget-labs/sample-po-widget-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-widget-finance-dashboard" title="PO Widget - Finance dashboard">
     *  <file name="sample-po-widget-finance-dashboard/sample-po-widget-finance-dashboard.component.html"> </file>
     *  <file name="sample-po-widget-finance-dashboard/sample-po-widget-finance-dashboard.component.ts"> </file>
     * </example>
     *
     * <example name="po-widget-card" title="PO Widget - Card">
     *  <file name="sample-po-widget-card/sample-po-widget-card.component.html"> </file>
     *  <file name="sample-po-widget-card/sample-po-widget-card.component.ts"> </file>
     * </example>
     *
     */
    var PoWidgetComponent = /** @class */ (function (_super) {
        __extends(PoWidgetComponent, _super);
        function PoWidgetComponent(viewRef) {
            return _super.call(this) || this;
        }
        Object.defineProperty(PoWidgetComponent.prototype, "showTitleAction", {
            get: function () {
                return !!this.titleAction.observers[0];
            },
            enumerable: false,
            configurable: true
        });
        PoWidgetComponent.prototype.ngOnInit = function () {
            this.setHeight(this.height);
        };
        PoWidgetComponent.prototype.hasTitleHelpOrSetting = function () {
            return !!this.title || !!this.help || !!this.setting.observers[0];
        };
        PoWidgetComponent.prototype.onClick = function (event) {
            if (!this.disabled) {
                this.click.emit(event);
            }
        };
        PoWidgetComponent.prototype.openHelp = function (event) {
            if (!this.disabled) {
                event.stopPropagation();
                window.open(this.help, '_blank');
            }
        };
        PoWidgetComponent.prototype.runPrimaryAction = function (event) {
            if (!this.disabled) {
                event.stopPropagation();
                this.primaryAction.emit();
            }
        };
        PoWidgetComponent.prototype.runSecondaryAction = function (event) {
            if (!this.disabled) {
                event.stopPropagation();
                this.secondaryAction.emit();
            }
        };
        PoWidgetComponent.prototype.runTitleAction = function (event) {
            if (!this.disabled) {
                event.stopPropagation();
                this.titleAction.emit();
            }
        };
        PoWidgetComponent.prototype.setHeight = function (height) {
            if (height) {
                var bodyHeight = height;
                var hasSettingOrHelp = this.setting.observers.length > 0 || this.help;
                var footerBorder = 1;
                var footerHeight = 40;
                var settingHeight = 37;
                var shadowHeight = 2;
                var titleHeight = 50;
                if (this.noShadow) {
                    bodyHeight -= shadowHeight;
                }
                if (hasSettingOrHelp && !this.title) {
                    bodyHeight -= settingHeight;
                }
                if (this.title) {
                    bodyHeight -= titleHeight;
                }
                if (this.primaryLabel) {
                    bodyHeight -= footerHeight + footerBorder;
                }
                this.containerHeight = bodyHeight + "px";
            }
            else {
                this.containerHeight = "auto";
            }
        };
        PoWidgetComponent.prototype.settingOutput = function (event) {
            if (!this.disabled) {
                event.stopPropagation();
                this.setting.emit();
            }
        };
        return PoWidgetComponent;
    }(PoWidgetBaseComponent));
    PoWidgetComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-widget',
                    template: "<div\r\n  [class.po-clickable]=\"click.observers.length\"\r\n  [class.po-widget]=\"!primary\"\r\n  [class.po-widget-disabled]=\"disabled\"\r\n  [class.po-widget-primary]=\"primary\"\r\n  [class.po-widget-no-shadow]=\"noShadow\"\r\n  [style.background-image]=\"background ? 'url(' + background + ')' : undefined\"\r\n  (click)=\"onClick($event)\"\r\n>\r\n  <div *ngIf=\"hasTitleHelpOrSetting()\" class=\"po-widget-header\">\r\n    <span *ngIf=\"showTitleAction; else noTitleAction\" class=\"po-widget-title-action\" (click)=\"runTitleAction($event)\">\r\n      {{ title }}\r\n    </span>\r\n    <ng-template #noTitleAction>{{ title }}</ng-template>\r\n\r\n    <div *ngIf=\"setting.observers[0] || help\" class=\"po-pull-right\">\r\n      <span\r\n        id=\"settingAction\"\r\n        *ngIf=\"setting.observers[0]\"\r\n        class=\"po-clickable po-icon po-icon-settings\"\r\n        (click)=\"settingOutput($event)\"\r\n      >\r\n      </span>\r\n      <span id=\"helpLink\" *ngIf=\"help\" class=\"po-clickable po-icon po-icon-help\" (click)=\"openHelp($event)\"> </span>\r\n    </div>\r\n  </div>\r\n\r\n  <po-container p-no-border [p-height]=\"containerHeight\">\r\n    <div class=\"po-widget-body\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </po-container>\r\n\r\n  <div *ngIf=\"primaryLabel\" class=\"po-widget-footer\">\r\n    <div class=\"po-widget-xl\" *ngIf=\"!secondaryLabel\">\r\n      <a class=\"po-widget-action\" id=\"primaryAct\" (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a>\r\n    </div>\r\n\r\n    <div class=\"po-widget-md\" *ngIf=\"secondaryLabel\">\r\n      <a class=\"po-widget-action\" id=\"primaryAct\" (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a>\r\n    </div>\r\n    <div class=\"po-widget-md\" *ngIf=\"secondaryLabel\">\r\n      <a class=\"po-widget-action\" id=\"secondaryAct\" (click)=\"runSecondaryAction($event)\">{{ secondaryLabel }}</a>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
                },] }
    ];
    PoWidgetComponent.ctorParameters = function () { return [
        { type: i0.ViewContainerRef }
    ]; };

    /**
     * @description
     *
     * Módulo do componente po-widget
     */
    var PoWidgetModule = /** @class */ (function () {
        function PoWidgetModule() {
        }
        return PoWidgetModule;
    }());
    PoWidgetModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, PoContainerModule],
                    exports: [PoWidgetComponent],
                    declarations: [PoWidgetComponent]
                },] }
    ];

    var PoComponentsModule = /** @class */ (function () {
        function PoComponentsModule() {
        }
        return PoComponentsModule;
    }());
    PoComponentsModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        PoAccordionModule,
                        PoAvatarModule,
                        PoBreadcrumbModule,
                        PoButtonModule,
                        PoButtonGroupModule,
                        PoCalendarModule,
                        PoChartModule,
                        PoContainerModule,
                        PoDisclaimerGroupModule,
                        PoDisclaimerModule,
                        PoDividerModule,
                        PoDropdownModule,
                        PoDynamicModule,
                        PoFieldModule,
                        PoGaugeModule,
                        PoGridModule,
                        PoIconModule,
                        PoInfoModule,
                        PoListViewModule,
                        PoLoadingModule,
                        PoMenuModule,
                        PoMenuPanelModule,
                        PoModalModule,
                        PoNavbarModule,
                        PoPageModule,
                        PoPopoverModule,
                        PoPopupModule,
                        PoProgressModule,
                        PoSlideModule,
                        PoStepperModule,
                        PoTableModule,
                        PoTabsModule,
                        PoTagModule,
                        PoToolbarModule,
                        PoTreeViewModule,
                        PoWidgetModule
                    ],
                    exports: [
                        PoAccordionModule,
                        PoAvatarModule,
                        PoBreadcrumbModule,
                        PoButtonModule,
                        PoButtonGroupModule,
                        PoCalendarModule,
                        PoChartModule,
                        PoContainerModule,
                        PoDisclaimerGroupModule,
                        PoDisclaimerModule,
                        PoDividerModule,
                        PoDropdownModule,
                        PoDynamicModule,
                        PoFieldModule,
                        PoGaugeModule,
                        PoGridModule,
                        PoIconModule,
                        PoInfoModule,
                        PoListViewModule,
                        PoLoadingModule,
                        PoMenuModule,
                        PoMenuPanelModule,
                        PoModalModule,
                        PoNavbarModule,
                        PoPageModule,
                        PoPopoverModule,
                        PoPopupModule,
                        PoProgressModule,
                        PoSlideModule,
                        PoStepperModule,
                        PoTableModule,
                        PoTabsModule,
                        PoTagModule,
                        PoToolbarModule,
                        PoTreeViewModule,
                        PoWidgetModule
                    ],
                    providers: [],
                    bootstrap: []
                },] }
    ];

    var PoDirectivesModule = /** @class */ (function () {
        function PoDirectivesModule() {
        }
        return PoDirectivesModule;
    }());
    PoDirectivesModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [PoTooltipModule],
                    exports: [PoTooltipModule],
                    providers: [],
                    bootstrap: []
                },] }
    ];

    var PoGuardsModule = /** @class */ (function () {
        function PoGuardsModule() {
        }
        return PoGuardsModule;
    }());
    PoGuardsModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [],
                    bootstrap: []
                },] }
    ];

    var poHttpInterceptorDetailLiteralsDefault = {
        en: {
            closeButton: 'Close',
            details: 'Details',
            detail: 'Detail',
            error: 'Error',
            warning: 'Warning',
            information: 'Information',
            success: 'Success'
        },
        es: {
            closeButton: 'Cerrar',
            details: 'Detalles',
            detail: 'Detalle',
            error: 'Error',
            warning: 'Advertencia',
            information: 'Informacion',
            success: 'Éxito'
        },
        pt: {
            closeButton: 'Fechar',
            details: 'Detalhes',
            detail: 'Detalhe',
            error: 'Erro',
            warning: 'Aviso',
            information: 'Informação',
            success: 'Sucesso'
        },
        ru: {
            closeButton: 'Закрывать',
            details: 'Детали',
            detail: 'Деталь',
            error: 'Ошибка',
            warning: 'Предупреждение',
            information: 'Информация',
            success: 'Yспех'
        }
    };

    var colors = { success: 'color-11', error: 'color-07', warning: 'color-08', info: '' };
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para a modal de detalhes exibida pelo interceptor
     */
    var PoHttpInterceptorDetailComponent = /** @class */ (function () {
        function PoHttpInterceptorDetailComponent(languageService) {
            var _this = this;
            this.languageService = languageService;
            this.closed = new i0.EventEmitter();
            this.details = [];
            this.language = this.languageService.getShortLanguage();
            this.literals = poHttpInterceptorDetailLiteralsDefault[this.language];
            // eslint-disable-next-line @typescript-eslint/member-ordering
            this.primaryAction = {
                action: function () { return _this.close(); },
                label: this.literals.closeButton
            };
        }
        Object.defineProperty(PoHttpInterceptorDetailComponent.prototype, "detail", {
            set: function (details) {
                if (details && details.length) {
                    this.details = this.filterByValidDetails(details);
                }
                this.title = this.formatTitle(this.details);
            },
            enumerable: false,
            configurable: true
        });
        PoHttpInterceptorDetailComponent.prototype.close = function () {
            this.modal.close();
            this.closed.emit();
        };
        PoHttpInterceptorDetailComponent.prototype.formatDetailItemTitle = function (detail) {
            return detail.detailTitle
                ? detail.detailTitle
                : detail.code
                    ? detail.code + " - " + detail.message
                    : detail.message;
        };
        PoHttpInterceptorDetailComponent.prototype.open = function () {
            this.modal.open();
        };
        PoHttpInterceptorDetailComponent.prototype.typeColor = function (type) {
            return colors[type];
        };
        PoHttpInterceptorDetailComponent.prototype.typeValue = function (type) {
            return poHttpInterceptorDetailLiteralsDefault[this.language][type] || type;
        };
        PoHttpInterceptorDetailComponent.prototype.addValidDetail = function (newDetails, detail) {
            return detail.message ? newDetails.concat(this.getValidDetailProperties(detail)) : newDetails;
        };
        PoHttpInterceptorDetailComponent.prototype.getValidDetailProperties = function (_a) {
            var code = _a.code, message = _a.message, detailedMessage = _a.detailedMessage, type = _a.type, detailTitle = _a.detailTitle;
            return detailTitle
                ? { code: code, message: message, detailedMessage: detailedMessage, type: type, detailTitle: detailTitle }
                : { code: code, message: message, detailedMessage: detailedMessage, type: type };
        };
        PoHttpInterceptorDetailComponent.prototype.filterByValidDetails = function (details) {
            var _this = this;
            return details.reduce(function (newDetails, detail) { return _this.addValidDetail(newDetails, detail); }, []);
        };
        PoHttpInterceptorDetailComponent.prototype.formatTitle = function (details) {
            return details.length > 1
                ? this.literals.details + " (" + details.length + ")"
                : details.length === 1
                    ? this.formatDetailItemTitle(details[0])
                    : this.literals.detail;
        };
        return PoHttpInterceptorDetailComponent;
    }());
    PoHttpInterceptorDetailComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'po-http-interceptor-detail',
                    template: "<po-modal p-hide-close p-size=\"lg\" [p-primary-action]=\"primaryAction\" [p-title]=\"title\">\r\n  <div class=\"po-row\">\r\n    <po-accordion class=\"po-md-12 po-mt-1 po-mb-1\" *ngIf=\"details.length > 1; else elseBlock\">\r\n      <po-accordion-item *ngFor=\"let detail of details\" [p-label]=\"formatDetailItemTitle(detail)\">\r\n        <ng-template [ngTemplateOutlet]=\"body\" [ngTemplateOutletContext]=\"{detail}\"></ng-template>\r\n      </po-accordion-item>\r\n    </po-accordion>\r\n  </div>\r\n</po-modal>\r\n\r\n<ng-template #elseBlock>\r\n  <ng-container [ngTemplateOutlet]=\"body\" [ngTemplateOutletContext]=\"{ detail: details[0] || {} }\"></ng-container>\r\n</ng-template>\r\n\r\n<ng-template #body let-detail=\"detail\">\r\n  <div *ngIf=\"detail.type\" class=\"po-row po-mb-1\">\r\n    <po-tag [p-color]=\"typeColor(detail.type)\" [p-value]=\"typeValue(detail.type)\"></po-tag>\r\n  </div>\r\n\r\n  <p *ngIf=\"detail.detailTitle\">\r\n    <strong>{{ detail.code }}</strong>\r\n  </p>\r\n\r\n  <div class=\"po-row\">\r\n    <p>{{ detail.detailedMessage }}</p>\r\n  </div>\r\n</ng-template>\r\n"
                },] }
    ];
    PoHttpInterceptorDetailComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoHttpInterceptorDetailComponent.propDecorators = {
        modal: [{ type: i0.ViewChild, args: [PoModalComponent, { static: true },] }]
    };

    var poHttpInterceptorLiterals = {
        pt: {
            help: 'Ajuda',
            details: 'Detalhes',
            serverNotResponse: 'Servidor não está respondendo'
        },
        en: {
            help: 'Help',
            details: 'Details',
            serverNotResponse: 'Server is not responding'
        },
        es: {
            help: 'Ayuda',
            details: 'Detalles',
            serverNotResponse: 'El servidor no está respondiendo'
        },
        ru: {
            help: 'Помогите',
            details: 'Детали',
            serverNotResponse: 'Сервер не отвечает'
        }
    };

    var NO_ERROR_HEADER_PARAM = 'X-PO-No-Error';
    var NO_MESSAGE_HEADER_PARAM = 'X-PO-No-Message';
    /**
     * @description
     *
     * O *interceptor* tem a finalidade de exibir notificações com mensagens na tela, baseado nas respostas das requisições HTTP.
     *
     * Pode ser utilizado para dar feedback das ações do usuário como, por exemplo: erro de autorização, mensagens de regras de negócio,
     * atualizações de registros, erro quando o servidor estiver indisponível e entre outros.
     *
     * ## Configuração
     *
     * Para o correto funcionamento do interceptor `po-http-interceptor`, deve ser importado o `BrowserAnimationsModule` no
     * módulo principal da sua aplicação.
     *
     * Módulo da aplicação:
     * ```
     * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
     * import { PoModule } from '@po-ui/ng-components';
     * ...
     *
     * @NgModule({
     *   imports: [
     *     BrowserModule,
     *     BrowserAnimationsModule,
     *     ...
     *     PoModule
     *   ],
     *   declarations: [
     *     AppComponent,
     *     ...
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     *
     * Ao importar o módulo `PoModule` na aplicação, o `po-http-interceptor` é automaticamente configurado sem a necessidade
     * de qualquer configuração extra.
     *
     * Ao realizar requisições utilize o `HttpClient`, conforme exemplo abaixo:
     *
     * ```
     * import { HttpClient } from '@angular/common/http';
     *
     * ...
     *
     * @Injectable()
     * export class UserService {
     *
     *   constructor(private http: HttpClient) { }
     *
     *   getUsers() {
     *     return this.http.get('/api/users');
     *   }
     *
     *   ...
     *
     * }
     * ```
     *
     * ## Como usar
     *
     * Para exibir as noticações é necessário informar a mensagem no retorno da requisição. A estrutura da mensagem
     * é feita com base no status da resposta, conforme será apresentado nos próximos tópicos.
     *
     * ### Estrutura das mensagens
     *
     * #### Mensagens de sucesso `2xx`
     *
     * Para exibir mensagens ao retornar uma lista ou um item, deve-se incluir a propriedade `_messages` no objeto de retorno.
     * Por exemplo:
     * ```
     * {
     *   "_messages": [
     *     {
     *       "type": "success" || "warning" || "error" || "information" (será exibido a `tag` apenas se esta propriedade possuir valor),
     *       "code": "título ou código da mensagem",
     *       "message": "texto da mensagem",
     *       "detailedMessage": "detalhamento da mensagem"
     *     }
     *   ]
     * }
     * ```
     *
     * #### Mensagens de erro `4xx` ou `5xx`
     *
     * Ao retornar erro, o objeto não necessita ter `_messages`, deve-se retornar o objeto diretamente:
     *
     * ```
     * {
     *    "code": "título ou código da mensagem",
     *    "message": "texto da mensagem",
     *    "detailedMessage": "detalhamento da mensagem"
     * }
     * ```
     *
     * Também é possível informar as seguintes propriedades:
     *
     * - `helpUrl`: link para a documentação do erro;
     *    - Caso for informado, será exibido uma ação de "Ajuda" na notificação, para isso não deverá ter a propriedade `detailedMessage`.
     * - `type`: É possível informar `error`, `warning` e `information`, sendo `error` o valor padrão.
     * - `details`: Uma lista de objetos de mensagem (recursiva) com mais detalhes sobre a mensagem principal.
     * - `detailTitle`: caso for informado, será apresentado como título dos detalhes substituindo o padrão `code - message`
     *
     * > Veja o [Guia de implementação de APIs](guides/api) para mais detalhes sobre a estrutura das mensagens.
     *
     * ### Cabeçalho
     *
     * É possível dispensar a notificação para o usuário utilizando no cabeçalho da requisição os parâmetros listados abaixo com o valor
     * igual a `true`:
     *
     * - `X-PO-No-Message`: Não exibe notificações de erro e/ou sucesso.
     *
     * - `X-PO-No-Error`: Não mostra notificações de erro com códigos `4xx` e `5xx`.
     *
     * ```
     * ...
     *  const headers = { 'X-PO-No-Message': 'true' };
     *
     *  this.http.get(`/customers/1`, { headers: headers });
     * ...
     *
     * ```
     *
     * > Após a validação no *interceptor*, os parâmetros serão removidos do cabeçalho da requisição.
     *
     */
    var PoHttpInterceptorBaseService = /** @class */ (function () {
        function PoHttpInterceptorBaseService(componentInjector, notification, languageService) {
            this.componentInjector = componentInjector;
            this.notification = notification;
            this.languageService = languageService;
            this.notificationTypes = ['success', 'warning', 'error', 'information'];
            this.literals = poHttpInterceptorLiterals[this.languageService.getShortLanguage()];
            this.httpInterceptorDetailComponent = undefined;
        }
        PoHttpInterceptorBaseService.prototype.intercept = function (request, next) {
            var _this = this;
            var cloneRequest = request.clone();
            request = request && this.hasParameters(request) ? this.cloneRequestWithoutParameters(request) : request;
            return next.handle(request).pipe(operators.tap(function (response) {
                if (response instanceof i1.HttpResponse) {
                    _this.processResponse(response, cloneRequest);
                }
            }, function (error) {
                _this.processErrorResponse(error, cloneRequest);
            }));
        };
        PoHttpInterceptorBaseService.prototype.processResponse = function (response, request) {
            var _this = this;
            var hasNoMessageParam = this.hasNoMessageParam(request);
            if (!hasNoMessageParam && response.body && response.body._messages) {
                var messages = response.body._messages;
                if (messages instanceof Array) {
                    messages.forEach(function (message) {
                        _this.showNotification(message);
                    });
                }
                else {
                    this.showNotification(messages);
                }
            }
        };
        PoHttpInterceptorBaseService.prototype.processErrorResponse = function (response, request) {
            var errorResponse = response.status !== 0
                ? response.error
                : { code: 0, message: this.literals.serverNotResponse, detailedMessage: response.message };
            var hasNoErrorParam = this.hasNoErrorParam(request);
            var hasNoMessageParam = this.hasNoMessageParam(request);
            var errorResponseValidTypes = this.notificationTypes.slice(1);
            if (errorResponse && errorResponse.message && !hasNoErrorParam && !hasNoMessageParam) {
                this.showNotification(Object.assign(Object.assign({}, errorResponse), { type: errorResponseValidTypes.includes(errorResponse.type) ? errorResponse.type : 'error' }));
            }
        };
        PoHttpInterceptorBaseService.prototype.cloneRequestWithoutParameters = function (request) {
            var headers = request.headers.delete(NO_ERROR_HEADER_PARAM).delete(NO_MESSAGE_HEADER_PARAM);
            return request.clone({ headers: headers });
        };
        PoHttpInterceptorBaseService.prototype.createModal = function (responseMessage) {
            var _this = this;
            var details = responseMessage.details ? __spreadArray([responseMessage], __read(responseMessage.details)) : [responseMessage];
            this.httpInterceptorDetailComponent = this.componentInjector.createComponentInApplication(PoHttpInterceptorDetailComponent);
            this.httpInterceptorDetailComponent.instance.detail = details;
            this.httpInterceptorDetailComponent.instance.closed.subscribe(function () { return _this.destroyModal(); });
            this.httpInterceptorDetailComponent.instance.open();
        };
        PoHttpInterceptorBaseService.prototype.destroyModal = function () {
            if (this.httpInterceptorDetailComponent) {
                this.componentInjector.destroyComponentInApplication(this.httpInterceptorDetailComponent);
                this.httpInterceptorDetailComponent = undefined;
            }
        };
        PoHttpInterceptorBaseService.prototype.hasMessage = function (responseMessage) {
            var hasMessageProperties = responseMessage.message;
            return responseMessage && hasMessageProperties;
        };
        PoHttpInterceptorBaseService.prototype.hasNoErrorParam = function (request) {
            var noErrorParam = request && request.headers.get(NO_ERROR_HEADER_PARAM);
            return noErrorParam && noErrorParam.toString().toLocaleLowerCase() === 'true';
        };
        PoHttpInterceptorBaseService.prototype.hasNoMessageParam = function (request) {
            var noMessageParam = request && request.headers.get(NO_MESSAGE_HEADER_PARAM);
            return noMessageParam && noMessageParam.toString().toLocaleLowerCase() === 'true';
        };
        PoHttpInterceptorBaseService.prototype.hasParameters = function (request) {
            return request.headers.has(NO_ERROR_HEADER_PARAM) || request.headers.has(NO_MESSAGE_HEADER_PARAM);
        };
        PoHttpInterceptorBaseService.prototype.showNotification = function (response) {
            if (!this.hasMessage(response)) {
                return;
            }
            var typeNotification = this.notificationTypes.includes(response.type) ? response.type : 'information';
            var notificationAction = this.generateNotificationAction(response);
            this.notification[typeNotification]({
                message: response.message,
                actionLabel: notificationAction.label,
                action: notificationAction.action
            });
        };
        PoHttpInterceptorBaseService.prototype.generateDetailModal = function (responseMessage) {
            var _this = this;
            return function () {
                if (!_this.httpInterceptorDetailComponent) {
                    _this.createModal(responseMessage);
                }
            };
        };
        PoHttpInterceptorBaseService.prototype.generateNotificationAction = function (responseMessage) {
            var notificationAction;
            var notificationLabel;
            if (responseMessage.helpUrl && !(responseMessage.detailedMessage || responseMessage.details)) {
                notificationLabel = this.literals.help;
                notificationAction = this.generateUrlHelpFunction(responseMessage.helpUrl);
            }
            else if (responseMessage.detailedMessage || responseMessage.details) {
                notificationLabel = this.literals.details;
                notificationAction = this.generateDetailModal(responseMessage);
            }
            return { label: notificationLabel, action: notificationAction };
        };
        PoHttpInterceptorBaseService.prototype.generateUrlHelpFunction = function (helpUrl) {
            return function () {
                window.open(helpUrl, '_blank');
            };
        };
        return PoHttpInterceptorBaseService;
    }());

    /**
     * @docsExtends PoHttpInterceptorBaseService
     *
     * @example
     * <example name='po-http-interceptor-labs' title='PO Http Interceptor Labs'>
     *  <file name='sample-po-http-interceptor-labs.component.ts'> </file>
     *  <file name='sample-po-http-interceptor-labs.component.html'> </file>
     * </example>
     */
    var PoHttpInterceptorService = /** @class */ (function (_super) {
        __extends(PoHttpInterceptorService, _super);
        function PoHttpInterceptorService(notification, componentInjector, languageService) {
            return _super.call(this, componentInjector, notification, languageService) || this;
        }
        return PoHttpInterceptorService;
    }(PoHttpInterceptorBaseService));
    PoHttpInterceptorService.decorators = [
        { type: i0.Injectable }
    ];
    PoHttpInterceptorService.ctorParameters = function () { return [
        { type: PoNotificationService },
        { type: PoComponentInjectorService },
        { type: PoLanguageService }
    ]; };

    var PoHttpInterceptorModule = /** @class */ (function () {
        function PoHttpInterceptorModule() {
        }
        return PoHttpInterceptorModule;
    }());
    PoHttpInterceptorModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, PoAccordionModule, PoModalModule, PoNotificationModule, PoTagModule],
                    declarations: [PoHttpInterceptorDetailComponent],
                    providers: [
                        PoHttpInterceptorService,
                        PoNotificationService,
                        {
                            provide: i1.HTTP_INTERCEPTORS,
                            useClass: PoHttpInterceptorService,
                            multi: true
                        }
                    ]
                },] }
    ];

    /**
     * @docsPrivate
     *
     * Serviço responsável por efetuar o controle de interação com o serviço de interceptor `PoHttpRequestInterceptorService`
     * gerenciando o seu estado.
     */
    var PoHttpRequesControltService = /** @class */ (function () {
        function PoHttpRequesControltService() {
            this.controlHttpRequest = new rxjs.Subject();
        }
        PoHttpRequesControltService.prototype.getControlHttpRequest = function () {
            return this.controlHttpRequest.asObservable();
        };
        PoHttpRequesControltService.prototype.send = function (value) {
            if (value === void 0) { value = 0; }
            this.controlHttpRequest.next(value);
        };
        return PoHttpRequesControltService;
    }());
    PoHttpRequesControltService.decorators = [
        { type: i0.Injectable }
    ];

    var noCountPendingRequests = 'X-PO-No-Count-Pending-Requests';
    var screenLock = 'X-PO-Screen-Lock';
    /**
     * @description
     *
     * O serviço PO Http Request Interceptor realiza a contabilização de requisições pendentes na aplicação.
     *
     * Existe a possibilidade de não efetuar a contabilização das requisições pendentes, utilizando o parâmetro
     * `X-PO-No-Count-Pending-Requests`. Para isso deve ser informado no cabeçalho da requisição com o valor `'true'`,
     * por exemplo:
     *
     * ```
     * ...
     *  const headers = { 'X-PO-No-Count-Pending-Requests': 'true' };
     *
     *  this.http.get(`/customers/1`, { headers: headers });
     * ...
     *
     * ```
     * Para obter a quantidade de requisições pendentes, deve inscrever-se no método `getCountPendingRequests` do
     * serviço `PoHttpRequestInterceptorService`, com isso, ao realizar requisições utilizando `HttpClient`,
     * será retornado a quantidade de requisições pendentes.
     *
     * Também existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisição
     * deve-se passar o parâmetro `X-PO-Screen-Lock` no cabeçalho da requisição com valor `'true'`.
     *
     * por exemplo:
     *
     * ```
     * ...
     *  const headers = { 'X-PO-Screen-Lock': 'true' };
     *
     *  this.http.get(`/customers/1`, { headers: headers });
     * ...
     *
     * ```
     * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
     *
     * Ao importar o módulo `PoModule` na aplicação, o `po-http-request-interceptor` é automaticamente configurado sem a necessidade
     * de qualquer configuração extra.
     *
     *
     * Segue abaixo um exemplo de uso:
     *
     * ```
     * import { HttpClient } from '@angular/common/http';
     *
     * ...
     *
     * @Injectable()
     * export class CustomersService {
     *
     *  headers = { 'X-PO-No-Count-Pending-Requests': true, 'X-PO-Screen-Lock': 'true' }
     *  pendingRequests: number = 0;
     *  subscription: Subscription;
     *
     *  constructor(
     *    private http: HttpClient,
     *    private httpRequestInterceptor: PoHttpRequestInterceptorService) { }
     *
     *  ngOnDestroy(): void {
     *    this.subscription.unsubscribe();
     *  }
     *
     *  ngOnInit(): void {
     *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {
     *      this.pendingRequests = data;
     *    });
     *  }
     *
     *  getCustomers() {
     *    return this.http.get(`/customers/1`, { headers: headers });
     *  }
     *
     *  ...
     *
     * }
     * ```
     *
     * @example
     * <example name='po-http-request-interceptor-labs' title='PO Http Request Interceptor Labs'>
     *  <file name='sample-po-http-request-interceptor-labs.component.ts'> </file>
     *  <file name='sample-po-http-request-interceptor-labs.component.html'> </file>
     * </example>
     */
    var PoHttpRequestInterceptorService = /** @class */ (function () {
        function PoHttpRequestInterceptorService(controlHttpRequest, poComponentInjector) {
            this.controlHttpRequest = controlHttpRequest;
            this.poComponentInjector = poComponentInjector;
            this.loadingOverlayComponent = undefined;
            this.pendingRequests = 0;
            this.overlayRequests = 0;
        }
        PoHttpRequestInterceptorService.prototype.intercept = function (request, next) {
            var _this = this;
            var requestClone = request.clone();
            request = this.requestCloneWithoutHeaderParam([noCountPendingRequests, screenLock], request);
            this.setCountPendingRequests(true, requestClone);
            this.setCountOverlayRequests(true, requestClone);
            return next.handle(request).pipe(operators.finalize(function () {
                _this.setCountPendingRequests(false, requestClone);
                _this.setCountOverlayRequests(false, requestClone);
            }));
        };
        PoHttpRequestInterceptorService.prototype.getCountPendingRequests = function () {
            return this.controlHttpRequest.getControlHttpRequest();
        };
        PoHttpRequestInterceptorService.prototype.buildLoading = function () {
            if (!this.loadingOverlayComponent) {
                this.loadingOverlayComponent = this.poComponentInjector.createComponentInApplication(PoLoadingOverlayComponent);
                this.loadingOverlayComponent.instance.screenLock = true;
                this.loadingOverlayComponent.instance.changeDetector.detectChanges();
            }
        };
        PoHttpRequestInterceptorService.prototype.destroyLoading = function () {
            if (this.loadingOverlayComponent) {
                this.poComponentInjector.destroyComponentInApplication(this.loadingOverlayComponent);
                this.loadingOverlayComponent = undefined;
            }
        };
        PoHttpRequestInterceptorService.prototype.requestCloneWithoutHeaderParam = function (headersParams, request) {
            var isRequestClone = false;
            headersParams.forEach(function (headerParam) {
                if (request.headers.has(headerParam)) {
                    request.headers.delete(headerParam);
                    isRequestClone = true;
                }
            });
            return isRequestClone ? request.clone({ headers: request.headers }) : request;
        };
        PoHttpRequestInterceptorService.prototype.setCountPendingRequests = function (isIncrement, request) {
            var hasCountPendingRequestHeaderParam = request.headers.has(noCountPendingRequests);
            var headerParam = request.headers.get(noCountPendingRequests);
            if (hasCountPendingRequestHeaderParam && headerParam.toString().toLowerCase() === 'true') {
                return;
            }
            this.pendingRequests += isIncrement ? 1 : -1;
            this.controlHttpRequest.send(this.pendingRequests);
        };
        PoHttpRequestInterceptorService.prototype.setCountOverlayRequests = function (isIncrement, request) {
            var hasOverlayRequestHeaderParam = request.headers.has(screenLock);
            if (hasOverlayRequestHeaderParam) {
                var headerParam = request.headers.get(screenLock);
                if (headerParam.toString().toLowerCase() === 'false') {
                    return;
                }
                this.overlayRequests += isIncrement ? 1 : -1;
                this.overlayRequests > 0 ? this.buildLoading() : this.destroyLoading();
            }
        };
        return PoHttpRequestInterceptorService;
    }());
    PoHttpRequestInterceptorService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PoHttpRequestInterceptorService_Factory() { return new PoHttpRequestInterceptorService(i0__namespace.ɵɵinject(PoHttpRequesControltService), i0__namespace.ɵɵinject(PoComponentInjectorService)); }, token: PoHttpRequestInterceptorService, providedIn: "root" });
    PoHttpRequestInterceptorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PoHttpRequestInterceptorService.ctorParameters = function () { return [
        { type: PoHttpRequesControltService },
        { type: PoComponentInjectorService }
    ]; };

    var PoHttpRequestModule = /** @class */ (function () {
        function PoHttpRequestModule() {
        }
        return PoHttpRequestModule;
    }());
    PoHttpRequestModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [PoLoadingModule],
                    providers: [
                        PoHttpRequesControltService,
                        PoHttpRequestInterceptorService,
                        PoComponentInjectorService,
                        {
                            provide: i1.HTTP_INTERCEPTORS,
                            useClass: PoHttpRequestInterceptorService,
                            multi: true
                        }
                    ]
                },] }
    ];

    var PoInterceptorsModule = /** @class */ (function () {
        function PoInterceptorsModule() {
        }
        return PoInterceptorsModule;
    }());
    PoInterceptorsModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [PoHttpInterceptorModule, PoHttpRequestModule],
                    exports: [PoHttpInterceptorModule, PoHttpRequestModule],
                    providers: [],
                    bootstrap: []
                },] }
    ];

    var PoPipesModule = /** @class */ (function () {
        function PoPipesModule() {
        }
        return PoPipesModule;
    }());
    PoPipesModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [PoTimeModule],
                    exports: [PoTimeModule],
                    providers: [],
                    bootstrap: []
                },] }
    ];

    var PoModule = /** @class */ (function () {
        function PoModule() {
        }
        return PoModule;
    }());
    PoModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [
                        PoComponentsModule,
                        PoDirectivesModule,
                        PoGuardsModule,
                        PoInterceptorsModule,
                        PoPipesModule,
                        PoServicesModule
                    ],
                    exports: [
                        PoComponentsModule,
                        PoDirectivesModule,
                        PoInterceptorsModule,
                        PoGuardsModule,
                        PoPipesModule,
                        PoServicesModule
                    ],
                    providers: [PoNotificationService],
                    bootstrap: []
                },] }
    ];

    var I18N_CONFIG = new i0.InjectionToken('I18N_CONFIG');

    /**
     * @description
     *
     * O serviço `PoI18nService` possibilita utilizar múltiplos idiomas e contextos na aplicação.
     *
     * > Antes da utilização do serviço, é necessário realizar a
     * [importação e configuração do módulo `PoI18nModule`](/documentation/po-i18n#i18n-config).
     *
     * **Utilização do serviço `PoI18nService`:**
     *
     * Para utilizar o serviço basta importá-lo nos componentes que necessitarem de literais e fazer a injeção de
     * dependência no construtor:
     * ```
     *  import { PoI18nService } from '@po-ui/ng-components';
     *  ...
     *  constructor(private poI18nService: PoI18nService) { }
     *  ...
     * ```
     *
     * Por fim realizar a busca pelas literais, inscrevendo-se no [Observable](https://angular.io/guide/observables) pelo
     * método `getLiterals()`.
     *
     * > O método `getLiterals()` pode receber um objeto do tipo da interface `PoI18nLiterals` como parâmetro,
     * porém, nenhuma das propriedades são obrigatórias. Caso nenhum parâmetro seja passado, serão buscadas
     * todas as literais do contexto definido com padrão, no idioma definido como padrão.
     *
     * Exemplos de requisição:
     * ```
     * literals = {};
     * literalsEn = {};
     * literalsCrm = {};
     *
     * constructor(private poI18nService: PoI18nService) {
     *   poI18nService.getLiterals()
     *     .subscribe((literals) => {
     *       this.literals = literals;
     *     });
     *
     *   poI18nService.getLiterals({context: 'crm', literals: ['add', 'remove']})
     *     .subscribe((literals) => {
     *       this.literalsCrm = literals;
     *     });
     *
     *   poI18nService.getLiterals({language: 'en-us'})
     *     .subscribe((literals) => {
     *       this.literalsEn = literals;
     *     });
     * }
     * ```
     *
     * Para apresentar as literais capturadas acima no HTML do componente, deve-se utilizar o
     * seguinte código:
     *
     * <pre ngNonBindable>
     * {{ literals?.add }}
     * {{ literals?.remove }}
     * </pre>
     *
     * Caso as literais contenham variáveis que precisem ser substituídas, pode-se utilizar o *pipe* `poI18n`.
     * É possível informar propriedades do componente como `name` e `nickname` ou
     * informar o valor diretamente com "" ou número, conforme o exemplo abaixo:
     *
     * <pre ngNonBindable>
     * {{ literals?.people | poI18n:[120] }}
     * {{ literals?.greeting | poI18n:[name, nickname] }}
     * {{ literals?.greeting | poI18n:["Brad", "Green"] }}
     * </pre>
     *
     * > É importante o uso do operador `?` (Elvis) para evitar erros enquanto as literais não forem carregadas.
     *
     * ### Teste unitário
     *
     * Abaixo segue um exemplo de *setup* inicial de teste unitário do *AppComponent* que utiliza o `PoI18nService`:
     *
     * > Atenção: não declarar o `PoI18nService` no providers do TestBed pois a biblioteca realiza a injeção de dependência de forma dinâmica.
     * > Se o serviço for declarado o teste não fará a injeção e o teste apresentará erros.
     *
     * ```
     * import { async, TestBed } from '@angular/core/testing';
     * import { HttpClientTestingModule } from '@angular/common/http/testing';
     *
     * import { PoI18nModule } from '@po-ui/ng-components';
     *
     * import { AppComponent } from './app.component';
     *
     * describe('AppComponent', () => {
     *   const anotherPT = {
     *     text: 'texto',
     *     add: 'adicionar',
     *     remove: 'remover'
     *   };
     *
     *   const generalPT = {
     *     text: 'texto',
     *     add: 'adicionar',
     *     remove: 'remover'
     *   };
     *
     *   const config = {
     *     default: {
     *       language: 'pt-BR',
     *       context: 'general',
     *       cache: false
     *     },
     *     contexts: {
     *       general: {
     *         'pt-br': generalPT
     *       },
     *       another: {
     *         'pt-br': anotherPT
     *       }
     *     }
     *   };
     *
     *   beforeEach(async(() => {
     *     TestBed.configureTestingModule({
     *       declarations: [
     *         AppComponent
     *       ],
     *       imports: [
     *         HttpClientTestingModule,
     *         PoI18nModule.config(config)
     *       ]
     *     }).compileComponents();
     *   }));
     *
     *   it('should create the app', async(() => {
     *     const fixture = TestBed.createComponent(AppComponent);
     *     const app = fixture.debugElement.componentInstance;
     *
     *     expect(app).toBeTruthy();
     *   }));
     *
     * });
     * ```
     */
    var PoI18nBaseService = /** @class */ (function () {
        function PoI18nBaseService(config, http, languageService) {
            this.config = config;
            this.http = http;
            this.languageService = languageService;
            this.varI18n = {};
            this.useCache = false;
            this.servicesContext = {};
            this.setConfig(config);
        }
        /**
         * <a id="get-language"></a>
         * Método que retorna o idioma padrão ativo.
         *
         * A busca deste idioma pelo método será feita na seguinte ordem:
         *
         *   1 - o idioma que foi armazenado no *localStorage*, através do método [`setLanguage()`](documentation/po-i18n#setLanguage).
         *
         *   2 - o valor inserido no módulo do i18n através do parâmetro `config`, sendo o idioma inserido na propriedade
         * `language` da interface [`PoI18nConfigDefault`](documentation/po-i18n#poI18nConfigDefault).
         *
         *   3 - o idioma do navegador utilizado.
         *
         * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
         *
         * @returns {string} sigla do idioma padrão.
         */
        PoI18nBaseService.prototype.getLanguage = function () {
            return this.languageService.getLanguage();
        };
        PoI18nBaseService.prototype.getLiterals = function (options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            var language = options['language'] ? options['language'].toLowerCase() : this.getLanguage();
            var context = options['context'] ? options['context'] : this.contextDefault;
            var literals = options['literals'] ? options['literals'] : [];
            return new rxjs.Observable(function (observer) {
                if (_this.servicesContext[context]) {
                    // Faz o processo de busca de um contexto que contém serviço
                    _this.getLiteralsFromContextService(language, context, literals, observer);
                }
                else {
                    // Faz o processo de busca de um contexto que utiliza constante
                    _this.getLiteralsFromContextConstant(language, context, literals, observer);
                }
            });
        };
        /**
         * Método que retorna o idioma padrão ativo, com somente a abreviação do idioma (duas primeiras letras).
         * Por exemplo: "pt" ou "es".
         *
         * A busca deste idioma é baseada no método [**getLanguage()**](/documentation/po-i18n#get-language).
         *
         * @returns {string} sigla do idioma padrão.
         */
        PoI18nBaseService.prototype.getShortLanguage = function () {
            return this.languageService.getShortLanguage();
        };
        /**
         * <a id="setLanguage"></a>
         * Método para alterar o idioma padrão do módulo do i18n.
         *
         * Ao utilizar este método, o idioma ficará gravado no armazenamento local do navegador, que será utilizado pelo
         * serviço do `i18n` para buscar as literais no idioma padrão.
         *
         * @param {string} language Sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma,
         * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         *
         * @param {boolean} reload Indica se a página atual poderá ser recarregada após a alteração do idioma.
         *
         * Este recurso pode ser útil para os usuários que utilizam o método `getLiterals()` do serviço do i18n para poder
         * buscar novamente as literais no novo idioma configurado.
         */
        PoI18nBaseService.prototype.setLanguage = function (language, reload) {
            if (reload === void 0) { reload = false; }
            if (!isLanguage(language)) {
                return;
            }
            this.languageService.setLanguage(language);
            if (reload) {
                reloadCurrentPage();
            }
        };
        PoI18nBaseService.prototype.setConfig = function (config) {
            // Seta as configurações padrões definidas no importação do módulo
            if (config['default']) {
                this.languageService.setLanguageDefault(config['default']['language']);
                this.contextDefault = config['default']['context'] ? config['default']['context'] : '';
                this.useCache = config['default']['cache'] ? config['default']['cache'] : false;
            }
            // Carrega a lista dos contextos e as contantes informadas
            if (config['contexts']) {
                this.setVarI18n(config['contexts']);
                // Se nenhum contexto foi definido como padrão,
                // então define o primeiro contexto
                if (!this.contextDefault) {
                    for (var context in config['contexts']) {
                        if (this.config['contexts'].hasOwnProperty(context)) {
                            this.contextDefault = context;
                            break;
                        }
                    }
                }
            }
        };
        // Processo de busca de um contexto que contém serviço.
        //    1 - Procura na variável I18n deste serviço
        //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
        //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
        //    4 - Se nenhuma literal for encontrada, então busca em pt-br
        PoI18nBaseService.prototype.getLiteralsFromContextService = function (language, context, literals, observer, translations, languageAlternative) {
            if (translations === void 0) { translations = {}; }
            if (languageAlternative === void 0) { languageAlternative = null; }
            // Idioma usado para tentar buscar as literais faltantes
            var languageSearch = languageAlternative ? languageAlternative : language;
            translations = this.mergeObject(translations, this.searchInVarI18n(languageSearch, context, literals));
            if (this.countObject(translations) > 0) {
                observer.next(translations);
            }
            // realiza a busca no localStorage e em seguida no serviço
            this.getLiteralsLocalStorageAndCache(languageSearch, context, literals, observer, translations, languageAlternative);
        };
        // Procura no local storage e em seguida no serviço
        // Caso não encontre nem no serviço, recomeça a busca em pt-br
        PoI18nBaseService.prototype.getLiteralsLocalStorageAndCache = function (language, context, literals, observer, translations, languageAlternative) {
            var _this = this;
            if (languageAlternative === void 0) { languageAlternative = null; }
            var languageSearch = languageAlternative ? languageAlternative : language;
            var translationTemp;
            // Verifica se usa cache
            if (this.useCache) {
                translationTemp = this.searchInLocalStorage(languageSearch, context, literals);
                if (this.countObject(translationTemp) > 0) {
                    this.updateVarI18n(language, context, translationTemp);
                    translations = this.mergeObject(translationTemp, translations);
                    observer.next(translations);
                }
            }
            // Busca do Serviço
            this.getHttpService(this.servicesContext[context], languageSearch, literals).subscribe(function (response) {
                if (response) {
                    _this.updateLocalStorage(language, context, response);
                    _this.updateVarI18n(language, context, response);
                    translationTemp = _this.searchInVarI18n(language, context, literals);
                    translations = _this.mergeObject(translationTemp, translations);
                    observer.next(translations);
                }
                // Se não encontrou todas as literais pesquisadas no idioma
                // Então refaz o processo procurando em português
                if (literals.length > _this.countObject(translations)) {
                    if (languageAlternative === 'pt-br') {
                        // Se não encontrou nem em português, então retorna o nome das literais
                        translations = _this.completeFaultLiterals(language, context, literals, translations);
                        _this.updateLocalStorage(language, context, translations);
                        _this.updateVarI18n(language, context, translations);
                        observer.next(translations);
                    }
                    else {
                        _this.getLiteralsFromContextService(language, context, literals, observer, translations, 'pt-br');
                    }
                }
            });
        };
        // Procura pela lista de literais
        // Se não encontrar todas, procura em pt-br
        PoI18nBaseService.prototype.getLiteralsFromContextConstant = function (language, context, literals, observer, translations) {
            if (translations === void 0) { translations = {}; }
            translations = this.mergeObject(translations, this.searchInVarI18n(language, context, literals));
            if (this.countObject(translations) > 0) {
                observer.next(translations);
            }
            // Se foi pesquisado por literais
            if (literals.length > 0) {
                // Se não encontrou todas as literais pesquisadas no idioma, procura em português
                if (literals.length > this.countObject(translations)) {
                    if (language === 'pt-br') {
                        // Se não encontrou nem em português, então retorna o nome das literais
                        translations = this.completeFaultLiterals(language, context, literals, translations);
                        observer.next(translations);
                    }
                    else {
                        this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
                    }
                }
            }
            else {
                // Se não encontrar nenhuma literal, procura em português
                if (this.countObject(translations) === 0 && language !== 'pt-br') {
                    this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
                }
                // caso não informar literais e não houver tradução
                observer.next(translations);
                observer.complete();
            }
        };
        // Busca pelas literais no local storage
        PoI18nBaseService.prototype.searchInLocalStorage = function (language, context, literals) {
            var translations = {};
            if (literals.length > 0) {
                for (var i = 0; i < literals.length; i++) {
                    var literal = literals[i];
                    var translation = localStorage.getItem(language + '-' + context + '-' + literal);
                    if (translation) {
                        translations[literal] = translation;
                    }
                }
            }
            return translations;
        };
        // Busca pelas literais na variável do serviço
        PoI18nBaseService.prototype.searchInVarI18n = function (language, context, literals) {
            var translations = {};
            if (this.varI18n[language] && this.varI18n[language][context]) {
                var content = this.varI18n[language][context];
                if (literals.length > 0) {
                    // Busca as literais desejadas
                    for (var i = 0; i < literals.length; i++) {
                        var literal = literals[i];
                        if (content.hasOwnProperty(literal)) {
                            translations[literal] = content[literal];
                        }
                    }
                }
                else {
                    // Atribui todas as literais
                    translations = Object.assign({}, content);
                }
            }
            return translations;
        };
        // Atualiza o local storage
        PoI18nBaseService.prototype.updateLocalStorage = function (language, context, data) {
            var e_1, _a;
            if (this.useCache) {
                try {
                    for (var _b = __values(Object.keys(data)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var literal = _c.value;
                        localStorage.setItem(language + '-' + context + '-' + literal, data[literal]);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        };
        // Atualiza a variável local com as literais com os objetos passados na configuração
        PoI18nBaseService.prototype.setVarI18n = function (contexts) {
            var e_2, _a, e_3, _b;
            try {
                // Percorre os contextos
                for (var _c = __values(Object.keys(contexts)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var context = _d.value;
                    var contextContent = contexts[context];
                    try {
                        // Percorre os idiomas dentro do contexto
                        for (var _e = (e_3 = void 0, __values(Object.keys(contextContent))), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var language = _f.value;
                            var languageContent = contextContent[language];
                            if (language === 'url') {
                                this.servicesContext[context] = languageContent;
                            }
                            else {
                                this.updateVarI18n(language, context, languageContent);
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
        };
        // Atualiza a variável local com as literais idioma e contexto
        PoI18nBaseService.prototype.updateVarI18n = function (language, context, data) {
            var _a;
            language = language.toLowerCase();
            if (!this.varI18n[language]) {
                this.varI18n[language] = (_a = {}, _a[context] = {}, _a);
            }
            if (!this.varI18n[language][context]) {
                this.varI18n[language][context] = {};
            }
            // Cria ou atualiza o contexto dentro do storage
            this.varI18n[language][context] = this.mergeObject(data, this.varI18n[language][context]);
        };
        PoI18nBaseService.prototype.getHttpService = function (url, language, literals) {
            var param = '?language=' + language;
            if (literals.length > 0) {
                param += '&literals=' + literals.join();
            }
            // Remove a barra final do endereço
            url = url.replace(/\/$/, '');
            return this.http.get("" + url + param);
        };
        // Completa com o nome da literais, as que não foram encontradas
        PoI18nBaseService.prototype.completeFaultLiterals = function (language, context, literals, translations) {
            for (var i = 0; i < literals.length; i++) {
                var literal = literals[i];
                if (!translations[literal]) {
                    translations[literal] = literal;
                }
            }
            return translations;
        };
        // Conta os atributos do objeto
        PoI18nBaseService.prototype.countObject = function (obj) {
            return Object.keys(obj).length;
        };
        // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
        PoI18nBaseService.prototype.mergeObject = function (objPermanent, obj) {
            return Object.assign(Object.assign({}, obj), objPermanent);
        };
        return PoI18nBaseService;
    }());
    PoI18nBaseService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [I18N_CONFIG,] }] },
        { type: i1.HttpClient, decorators: [{ type: i0.Inject, args: [i1.HttpClient,] }] },
        { type: PoLanguageService }
    ]; };

    /**
     * @docsExtends PoI18nBaseService
     */
    var PoI18nService = /** @class */ (function (_super) {
        __extends(PoI18nService, _super);
        function PoI18nService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PoI18nService;
    }(PoI18nBaseService));
    PoI18nService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PoI18nService_Factory() { return new PoI18nService(i0__namespace.ɵɵinject(I18N_CONFIG), i0__namespace.ɵɵinject(i1__namespace.HttpClient), i0__namespace.ɵɵinject(PoLanguageService)); }, token: PoI18nService, providedIn: "root" });
    PoI18nService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    // Função usada para retornar instância para o módulo po-i18n.module
    function returnPoI18nService(config, http, languageService) {
        return new PoI18nService(config, http, languageService);
    }

    /**
     * @description
     *
     * Módulo do serviço `PoI18nService` para controle de idiomas com PO.
     *
     * Para utilização do serviço de idiomas `PoI18nService`, deve-se importar este módulo mesmo já havendo importado
     * o módulo `PoModule`. Na importação deve ser invocado o método `config`, informando um objeto que deve implementar
     * a interface [`PoI18nConfig`](documentation/po-i18n#poI18nConfig) para configuração.
     *
     * <a id="i18n-config"></a>
     * **Exemplo de configuração do módulo do i18n:**
     * ```
     * import { PoI18nConfig } from '@po-ui/ng-components';
     *
     * import { generalEn } from './i18n/general-en';
     * import { generalPt } from './i18n/general-pt';
     *
     * const i18nConfig: PoI18nConfig = {
     *   default: {
     *     language: 'pt-BR',
     *     context: 'general',
     *     cache: true
     *   },
     *   contexts: {
     *     general: {
     *       'pt-BR': generalPt,
     *       'en-US': generalEn
     *     },
     *     hcm: {
     *       url: 'http://10.1.1.1/api/translations/hcm/'
     *     }
     *   }
     * };
     *
     * @NgModule({
     *   declarations: [],
     *   imports: [
     *     PoModule,
     *     PoI18nModule.config(i18nConfig)
     *   ],
     *   bootstrap: [AppComponent]
     * })
     * ```
     *
     * Para cada contexto é possível definir a origem das literais, que podem ser de um serviço REST ou
     * de um objeto. Exemplo:
     *
     * Arquivo general-pt.ts
     * ```
     * export const generalPt = {
     *  add: 'Adicionar',
     *  greeting: 'Prazer, {0} {1}',
     *  people: '{0} Pessoas,
     *  remove: 'Remover'
     * }
     * ```
     *
     * Arquivo general-en.ts
     * ```
     * export const generalEn = {
     *  add: 'Add',
     *  greeting: 'Nice to meet you, {0} {1}',
     *  people: '{0} People,
     *  remove: 'Remove'
     * }
     * ```
     *
     * **Exemplo de configuração de contextos usando constantes externas:**
     * ```
     * import { PoI18nConfig } from '@po-ui/ng-components';
     *
     * import { generalEn } from './i18n/general-en';
     * import { generalPt } from './i18n/general-pt';
     *
     * const i18nConfig: PoI18nConfig = {
     *   contexts: {
     *     general: {
     *       'pt-BR': generalPt, // constantes em arquivos separados
     *       'en-US': generalEn // constantes em arquivos separados
     *     },
     *     crm: {
     *       url: 'http://10.0.0.1:3000/api/translations/crm'
     *     }
     *   },
     *   default: {}
     * }
     * ```
     *
     * **Exemplo de configuração de um contexto utilizando serviço:**
     *
     * Ao optar por utilizar um serviço para configuração de contexto, deverá ser definida a URL
     * específica do contexto, como nos exemplos abaixo:
     *
     *  - http://10.0.0.1:3000/api/translations/crm
     *  - http://10.0.0.1:3000/api/translations/general
     *
     * Os idiomas e literais serão automaticamente buscados com parâmetros na própria URL:
     * - **language**: o idioma será sempre passado por parâmetro e é recomendado utilizar uma das linguagens
     * suportadas pelo PO (`pt-br`, `en-us`, `es-es` ou `ru`).
     * - **literals**: as literais serão separadas por vírgula. Caso esse parâmetro não seja informado, o
     * serviço deve retornar todas as literais do idioma.
     *
     * Exemplos de requisição:
     *
     *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br
     *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br&literals=add,remove,text
     *
     * > Sempre que o idioma solicitado não for encontrado, será buscado por `pt-br`.
     *
     * Além dos contextos, é possível definir as configurações *default* do sistema na configuração do
     * módulo utilizando a interface [`PoI18nConfig`](documentation/po-i18n#poI18nConfig):
     *
     * **Exemplo de padrões definidos:**
     * ```
     * const i18nConfig: PoI18nConfig = {
     *   contexts: {
     *     general: { }
     *   },
     *   default: {
     *    language: 'pt-BR',
     *    context: 'general',
     *    cache: true
     *   }
     * }
     * ```
     *
     * **Importante:**
     *
     * Recomenda-se que as definições *default* sejam realizadas apenas uma vez na aplicação,
     * preferencialmente no módulo `AppModule`.
     *
     * **i18n com *Lazy loading***
     *
     * Para aplicações que utilizem a abordagem de módulos com carregamento *lazy loading*, caso seja
     * definida outra configuração do `PoI18nModule`, deve-se atentar os seguintes detalhes:
     *
     * - Caso existam literais comuns na aplicação, estas devem ser reimportadas;
     * - Não defina outra *default language* para este módulo. Caso for definida, será sobreposta para
     * toda a aplicação;
     * - Caso precise de módulos carregados via *lazy loading* com linguagens diferentes, utilize o
     * método [`setLanguage()`](documentation/po-i18n#setLanguage) disponibilizado pelo `PoI18nService`
     * para definir a linguagem da aplicação e dos módulos com as linguagens diferentes.
     */
    var PoI18nModule = /** @class */ (function () {
        function PoI18nModule() {
        }
        PoI18nModule.config = function (config) {
            return {
                ngModule: PoI18nModule,
                providers: [
                    {
                        provide: I18N_CONFIG,
                        useValue: config
                    },
                    {
                        provide: i0.APP_INITIALIZER,
                        useFactory: initializeLanguageDefault,
                        multi: true,
                        deps: [I18N_CONFIG, PoLanguageService]
                    },
                    {
                        provide: PoI18nService,
                        useFactory: returnPoI18nService,
                        deps: [I18N_CONFIG, i1.HttpClient, PoLanguageService]
                    }
                ]
            };
        };
        return PoI18nModule;
    }());
    PoI18nModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.HttpClientModule, PoLanguageModule]
                },] }
    ];
    function initializeLanguageDefault(config, languageService) {
        // eslint-disable-next-line sonarjs/prefer-immediate-return
        var setDefaultLanguage = function () {
            if (config.default.language) {
                languageService.setLanguageDefault(config.default.language);
            }
        };
        return setDefaultLanguage;
    }

    /**
     * Generated bundle index. Do not edit.
     */

    exports.I18N_CONFIG = I18N_CONFIG;
    exports.InputBoolean = InputBoolean;
    exports.InputRequired = InputRequired;
    exports.PO_CONTROL_POSITIONS = PO_CONTROL_POSITIONS;
    exports.PoAccordionComponent = PoAccordionComponent;
    exports.PoAccordionItemComponent = PoAccordionItemComponent;
    exports.PoAccordionModule = PoAccordionModule;
    exports.PoActiveOverlayModule = PoActiveOverlayModule;
    exports.PoActiveOverlayService = PoActiveOverlayService;
    exports.PoAvatarComponent = PoAvatarComponent;
    exports.PoAvatarModule = PoAvatarModule;
    exports.PoBreadcrumbComponent = PoBreadcrumbComponent;
    exports.PoBreadcrumbModule = PoBreadcrumbModule;
    exports.PoButtonComponent = PoButtonComponent;
    exports.PoButtonGroupComponent = PoButtonGroupComponent;
    exports.PoButtonGroupModule = PoButtonGroupModule;
    exports.PoButtonModule = PoButtonModule;
    exports.PoCalendarComponent = PoCalendarComponent;
    exports.PoCalendarModule = PoCalendarModule;
    exports.PoChartComponent = PoChartComponent;
    exports.PoChartModule = PoChartModule;
    exports.PoCheckboxComponent = PoCheckboxComponent;
    exports.PoCheckboxGroupComponent = PoCheckboxGroupComponent;
    exports.PoCheckboxGroupModule = PoCheckboxGroupModule;
    exports.PoCleanComponent = PoCleanComponent;
    exports.PoColorPaletteModule = PoColorPaletteModule;
    exports.PoColorPaletteService = PoColorPaletteService;
    exports.PoComboComponent = PoComboComponent;
    exports.PoComboOptionTemplateDirective = PoComboOptionTemplateDirective;
    exports.PoComponentInjectorModule = PoComponentInjectorModule;
    exports.PoComponentInjectorService = PoComponentInjectorService;
    exports.PoComponentsModule = PoComponentsModule;
    exports.PoContainerComponent = PoContainerComponent;
    exports.PoContainerModule = PoContainerModule;
    exports.PoControlPositionModule = PoControlPositionModule;
    exports.PoDateService = PoDateService;
    exports.PoDateTimeModule = PoDateTimeModule;
    exports.PoDatepickerComponent = PoDatepickerComponent;
    exports.PoDatepickerModule = PoDatepickerModule;
    exports.PoDatepickerRangeComponent = PoDatepickerRangeComponent;
    exports.PoDecimalComponent = PoDecimalComponent;
    exports.PoDialogComponent = PoDialogComponent;
    exports.PoDialogModule = PoDialogModule;
    exports.PoDialogService = PoDialogService;
    exports.PoDirectivesModule = PoDirectivesModule;
    exports.PoDisclaimerComponent = PoDisclaimerComponent;
    exports.PoDisclaimerGroupComponent = PoDisclaimerGroupComponent;
    exports.PoDisclaimerGroupModule = PoDisclaimerGroupModule;
    exports.PoDisclaimerModule = PoDisclaimerModule;
    exports.PoDividerComponent = PoDividerComponent;
    exports.PoDividerModule = PoDividerModule;
    exports.PoDropdownComponent = PoDropdownComponent;
    exports.PoDropdownModule = PoDropdownModule;
    exports.PoDynamicFormComponent = PoDynamicFormComponent;
    exports.PoDynamicModule = PoDynamicModule;
    exports.PoDynamicViewComponent = PoDynamicViewComponent;
    exports.PoEmailComponent = PoEmailComponent;
    exports.PoFieldModule = PoFieldModule;
    exports.PoGaugeComponent = PoGaugeComponent;
    exports.PoGaugeModule = PoGaugeModule;
    exports.PoGridComponent = PoGridComponent;
    exports.PoGridModule = PoGridModule;
    exports.PoGuardsModule = PoGuardsModule;
    exports.PoHttpInterceptorModule = PoHttpInterceptorModule;
    exports.PoHttpInterceptorService = PoHttpInterceptorService;
    exports.PoHttpRequestInterceptorService = PoHttpRequestInterceptorService;
    exports.PoHttpRequestModule = PoHttpRequestModule;
    exports.PoI18nModule = PoI18nModule;
    exports.PoI18nPipe = PoI18nPipe;
    exports.PoI18nService = PoI18nService;
    exports.PoIconComponent = PoIconComponent;
    exports.PoIconModule = PoIconModule;
    exports.PoInfoComponent = PoInfoComponent;
    exports.PoInfoModule = PoInfoModule;
    exports.PoInputComponent = PoInputComponent;
    exports.PoInterceptorsModule = PoInterceptorsModule;
    exports.PoLanguageModule = PoLanguageModule;
    exports.PoLanguageService = PoLanguageService;
    exports.PoListViewComponent = PoListViewComponent;
    exports.PoListViewContentTemplateDirective = PoListViewContentTemplateDirective;
    exports.PoListViewDetailTemplateDirective = PoListViewDetailTemplateDirective;
    exports.PoListViewModule = PoListViewModule;
    exports.PoLoadingComponent = PoLoadingComponent;
    exports.PoLoadingIconComponent = PoLoadingIconComponent;
    exports.PoLoadingModule = PoLoadingModule;
    exports.PoLoadingOverlayComponent = PoLoadingOverlayComponent;
    exports.PoLoginComponent = PoLoginComponent;
    exports.PoLookupComponent = PoLookupComponent;
    exports.PoLookupModalComponent = PoLookupModalComponent;
    exports.PoMenuComponent = PoMenuComponent;
    exports.PoMenuGlobalService = PoMenuGlobalService;
    exports.PoMenuHeaderTemplateDirective = PoMenuHeaderTemplateDirective;
    exports.PoMenuModule = PoMenuModule;
    exports.PoMenuPanelComponent = PoMenuPanelComponent;
    exports.PoMenuPanelModule = PoMenuPanelModule;
    exports.PoModalComponent = PoModalComponent;
    exports.PoModalFooterComponent = PoModalFooterComponent;
    exports.PoModalModule = PoModalModule;
    exports.PoModule = PoModule;
    exports.PoMultiselectComponent = PoMultiselectComponent;
    exports.PoNavbarComponent = PoNavbarComponent;
    exports.PoNavbarModule = PoNavbarModule;
    exports.PoNotificationModule = PoNotificationModule;
    exports.PoNotificationService = PoNotificationService;
    exports.PoNumberComponent = PoNumberComponent;
    exports.PoPageDefaultComponent = PoPageDefaultComponent;
    exports.PoPageDetailComponent = PoPageDetailComponent;
    exports.PoPageEditComponent = PoPageEditComponent;
    exports.PoPageListComponent = PoPageListComponent;
    exports.PoPageModule = PoPageModule;
    exports.PoPageSlideComponent = PoPageSlideComponent;
    exports.PoPasswordComponent = PoPasswordComponent;
    exports.PoPipesModule = PoPipesModule;
    exports.PoPopoverComponent = PoPopoverComponent;
    exports.PoPopoverModule = PoPopoverModule;
    exports.PoPopupComponent = PoPopupComponent;
    exports.PoPopupModule = PoPopupModule;
    exports.PoProgressComponent = PoProgressComponent;
    exports.PoProgressModule = PoProgressModule;
    exports.PoRadioGroupComponent = PoRadioGroupComponent;
    exports.PoRichTextComponent = PoRichTextComponent;
    exports.PoSelectComponent = PoSelectComponent;
    exports.PoSelectOptionTemplateDirective = PoSelectOptionTemplateDirective;
    exports.PoServicesModule = PoServicesModule;
    exports.PoSlideComponent = PoSlideComponent;
    exports.PoSlideContentTemplateDirective = PoSlideContentTemplateDirective;
    exports.PoSlideModule = PoSlideModule;
    exports.PoStepComponent = PoStepComponent;
    exports.PoStepperComponent = PoStepperComponent;
    exports.PoStepperModule = PoStepperModule;
    exports.PoSwitchComponent = PoSwitchComponent;
    exports.PoTabComponent = PoTabComponent;
    exports.PoTableCellTemplateDirective = PoTableCellTemplateDirective;
    exports.PoTableColumnTemplateDirective = PoTableColumnTemplateDirective;
    exports.PoTableComponent = PoTableComponent;
    exports.PoTableModule = PoTableModule;
    exports.PoTableRowTemplateDirective = PoTableRowTemplateDirective;
    exports.PoTabsComponent = PoTabsComponent;
    exports.PoTabsModule = PoTabsModule;
    exports.PoTagComponent = PoTagComponent;
    exports.PoTagModule = PoTagModule;
    exports.PoTextareaComponent = PoTextareaComponent;
    exports.PoTimeModule = PoTimeModule;
    exports.PoTimePipe = PoTimePipe;
    exports.PoToolbarComponent = PoToolbarComponent;
    exports.PoToolbarModule = PoToolbarModule;
    exports.PoTooltipDirective = PoTooltipDirective;
    exports.PoTooltipModule = PoTooltipModule;
    exports.PoTreeViewComponent = PoTreeViewComponent;
    exports.PoTreeViewModule = PoTreeViewModule;
    exports.PoUploadComponent = PoUploadComponent;
    exports.PoUrlComponent = PoUrlComponent;
    exports.PoWidgetComponent = PoWidgetComponent;
    exports.PoWidgetModule = PoWidgetModule;
    exports.initializeLanguageDefault = initializeLanguageDefault;
    exports.poDialogAlertLiteralsDefault = poDialogAlertLiteralsDefault;
    exports.poDialogConfirmLiteralsDefault = poDialogConfirmLiteralsDefault;
    exports.poLanguageDefault = poLanguageDefault;
    exports.poLocaleDecimalSeparatorList = poLocaleDecimalSeparatorList;
    exports.poLocaleDefault = poLocaleDefault;
    exports.poLocaleThousandSeparatorList = poLocaleThousandSeparatorList;
    exports.poLocales = poLocales;
    exports.returnPoI18nService = returnPoI18nService;
    exports.ɵ0 = ɵ0;
    exports.ɵa = PoAccordionBaseComponent;
    exports.ɵb = PoAccordionService;
    exports.ɵba = PoChartMathsService;
    exports.ɵbb = PoChartAxisComponent;
    exports.ɵbc = PoChartAxisPathComponent;
    exports.ɵbd = PoChartAxisLabelComponent;
    exports.ɵbe = PoChartBaseComponent;
    exports.ɵbf = PoColorService;
    exports.ɵbg = PoChartSvgContainerService;
    exports.ɵbh = PoChartContainerComponent;
    exports.ɵbi = PoChartGaugeComponent;
    exports.ɵbj = PoChartCircular;
    exports.ɵbk = PoChartDynamicTypeComponent;
    exports.ɵbl = PoChartGaugeTextContentComponent;
    exports.ɵbm = PoChartLegendComponent;
    exports.ɵbn = PoChartLineComponent;
    exports.ɵbo = PoChartPathComponent;
    exports.ɵbp = PoChartPieComponent;
    exports.ɵbq = PoChartCircularComponent;
    exports.ɵbr = PoChartDonutComponent;
    exports.ɵbs = PoChartSeriesPointComponent;
    exports.ɵbt = PoChartBarComponent;
    exports.ɵbu = PoChartBarBaseComponent;
    exports.ɵbv = PoChartColumnComponent;
    exports.ɵbw = PoChartBarPathComponent;
    exports.ɵbx = PoChartCircularPathComponent;
    exports.ɵby = PoChartCircularLabelComponent;
    exports.ɵbz = PoChartTooltipDirective;
    exports.ɵc = PoAccordionItemBodyComponent;
    exports.ɵca = PoResizeObserverDirective;
    exports.ɵcb = PoContainerBaseComponent;
    exports.ɵcc = PoDisclaimerBaseComponent;
    exports.ɵcd = PoDisclaimerGroupBaseComponent;
    exports.ɵce = PoDisclaimerRemoveComponent;
    exports.ɵcf = PoDividerBaseComponent;
    exports.ɵcg = PoPopupBaseComponent;
    exports.ɵch = PoDropdownBaseComponent;
    exports.ɵci = PoInfoBaseComponent;
    exports.ɵcj = PoCleanModule;
    exports.ɵck = PoCleanBaseComponent;
    exports.ɵcl = PoFieldContainerModule;
    exports.ɵcm = PoFieldContainerBottomComponent;
    exports.ɵcn = PoFieldContainerComponent;
    exports.ɵco = PoCheckboxGroupBaseComponent;
    exports.ɵcp = PoDatepickerBaseComponent;
    exports.ɵcq = PoModalBaseComponent;
    exports.ɵcr = PoProgressBaseComponent;
    exports.ɵcs = PoProgressBarComponent;
    exports.ɵct = PoI18nBasePipe;
    exports.ɵcu = PoDialogBaseService;
    exports.ɵcv = PoToasterComponent;
    exports.ɵcw = PoToasterBaseComponent;
    exports.ɵcx = PoPopoverBaseComponent;
    exports.ɵcy = PoTableBaseComponent;
    exports.ɵcz = PoTableService;
    exports.ɵd = PoAccordionItemHeaderComponent;
    exports.ɵda = PoTableColumnIconComponent;
    exports.ɵdb = PoTableColumnLabelComponent;
    exports.ɵdc = PoTableColumnLinkComponent;
    exports.ɵdd = PoTableColumnManagerComponent;
    exports.ɵde = PoTableDetailComponent;
    exports.ɵdf = PoTableIconComponent;
    exports.ɵdg = PoTableShowSubtitleComponent;
    exports.ɵdh = PoTableSubtitleCircleComponent;
    exports.ɵdi = PoTableSubtitleFooterComponent;
    exports.ɵdj = PoCheckboxBaseComponent;
    exports.ɵdk = PoComboBaseComponent;
    exports.ɵdl = PoComboFilterService;
    exports.ɵdm = PoInputBaseComponent;
    exports.ɵdn = PoDatepickerRangeBaseComponent;
    exports.ɵdo = PoInputGeneric;
    exports.ɵdp = PoLookupBaseComponent;
    exports.ɵdq = PoLookupFilterService;
    exports.ɵdr = PoLookupModalService;
    exports.ɵds = PoLookupModalBaseComponent;
    exports.ɵdt = PoMultiselectBaseComponent;
    exports.ɵdu = PoMultiselectFilterService;
    exports.ɵdv = PoNumberBaseComponent;
    exports.ɵdw = PoRadioGroupBaseComponent;
    exports.ɵdx = PoRichTextBaseComponent;
    exports.ɵdy = PoRichTextService;
    exports.ɵdz = PoRichTextBodyComponent;
    exports.ɵe = PoAvatarBaseComponent;
    exports.ɵea = PoFieldValidateModel;
    exports.ɵeb = PoFieldModel;
    exports.ɵec = PoTextareaBaseComponent;
    exports.ɵed = PoUploadBaseComponent;
    exports.ɵee = PoUploadService;
    exports.ɵef = PoUploadBaseService;
    exports.ɵeg = PoUploadDragDropComponent;
    exports.ɵeh = PoUploadDragDropAreaComponent;
    exports.ɵei = PoNotificationBaseService;
    exports.ɵej = PoMultiselectDropdownComponent;
    exports.ɵek = PoMultiselectItemComponent;
    exports.ɵel = PoMultiselectSearchComponent;
    exports.ɵem = PoRichTextImageModalComponent;
    exports.ɵen = PoRichTextLinkModalComponent;
    exports.ɵeo = PoRichTextToolbarComponent;
    exports.ɵep = PoUploadDragDropDirective;
    exports.ɵeq = PoUploadDragDropAreaOverlayComponent;
    exports.ɵer = PoUploadFileRestrictionsComponent;
    exports.ɵes = PoTagBaseComponent;
    exports.ɵet = PoDynamicFormBaseComponent;
    exports.ɵeu = PoDynamicFormLoadService;
    exports.ɵev = PoDynamicFormOperation;
    exports.ɵew = PoDynamicFormValidationService;
    exports.ɵex = PoDynamicFormFieldsComponent;
    exports.ɵey = PoDynamicFormFieldsBaseComponent;
    exports.ɵez = PoDynamicViewBaseComponent;
    exports.ɵf = PoBreadcrumbBaseComponent;
    exports.ɵfa = PoDynamicViewService;
    exports.ɵfb = PoGaugeBaseComponent;
    exports.ɵfc = PoGaugeTitleComponent;
    exports.ɵfd = PoGaugeLegendComponent;
    exports.ɵfe = PoGaugeSvgComponent;
    exports.ɵff = PoGaugePathComponent;
    exports.ɵfg = PoGaugeDescriptionComponent;
    exports.ɵfh = PoGaugePointerComponent;
    exports.ɵfi = PoGridCellActionComponent;
    exports.ɵfj = PoGridCellComponent;
    exports.ɵfk = PoGridHeadComponent;
    exports.ɵfl = PoListViewBaseComponent;
    exports.ɵfm = PoBadgeModule;
    exports.ɵfn = PoBadgeComponent;
    exports.ɵfo = PoBadgeBaseComponent;
    exports.ɵfp = PoMenuBaseComponent;
    exports.ɵfq = PoMenuService;
    exports.ɵfr = PoMenuItemsService;
    exports.ɵfs = PoMenuFilterComponent;
    exports.ɵft = PoMenuItemComponent;
    exports.ɵfu = PoMenuPanelBaseComponent;
    exports.ɵfv = PoMenuPanelItemsService;
    exports.ɵfw = PoMenuPanelItemComponent;
    exports.ɵfx = PoNavbarActionsModule;
    exports.ɵfy = PoNavbarActionComponent;
    exports.ɵfz = PoNavbarActionPopupComponent;
    exports.ɵg = PoBreadcrumbDropdownComponent;
    exports.ɵga = PoNavbarActionsComponent;
    exports.ɵgb = PoNavbarItemsModule;
    exports.ɵgc = PoNavbarItemComponent;
    exports.ɵgd = PoNavbarItemsComponent;
    exports.ɵge = PoNavbarItemNavigationModule;
    exports.ɵgf = PoNavbarItemNavigationComponent;
    exports.ɵgg = PoNavbarItemNavigationIconComponent;
    exports.ɵgh = PoNavbarBaseComponent;
    exports.ɵgi = PoNavbarLogoComponent;
    exports.ɵgj = PoPageComponent;
    exports.ɵgk = PoPageBaseComponent;
    exports.ɵgl = PoPageContentComponent;
    exports.ɵgm = PoPageContentBaseComponent;
    exports.ɵgn = PoPageDefaultBaseComponent;
    exports.ɵgo = PoPageDetailBaseComponent;
    exports.ɵgp = PoPageEditBaseComponent;
    exports.ɵgq = PoPageHeaderComponent;
    exports.ɵgr = PoPageHeaderBaseComponent;
    exports.ɵgs = PoPageListBaseComponent;
    exports.ɵgt = PoPageSlideBaseComponent;
    exports.ɵgu = PoSlideCirclesComponent;
    exports.ɵgv = PoSlideBaseComponent;
    exports.ɵgw = PoSlideItemComponent;
    exports.ɵgx = PoSlideControlComponent;
    exports.ɵgy = PoStepperCircleComponent;
    exports.ɵgz = PoStepperBaseComponent;
    exports.ɵh = PoBreadcrumbFavoriteComponent;
    exports.ɵha = PoStepperLabelComponent;
    exports.ɵhb = PoStepperStepComponent;
    exports.ɵhc = PoTabButtonComponent;
    exports.ɵhd = PoTabBaseComponent;
    exports.ɵhe = PoTabDropdownComponent;
    exports.ɵhf = PoTabsBaseComponent;
    exports.ɵhg = PoToolbarActionsComponent;
    exports.ɵhh = PoToolbarBaseComponent;
    exports.ɵhi = PoToolbarNotificationComponent;
    exports.ɵhj = PoToolbarProfileComponent;
    exports.ɵhk = PoTreeViewBaseComponent;
    exports.ɵhl = PoTreeViewService;
    exports.ɵhm = PoTreeViewItemComponent;
    exports.ɵhn = PoTreeViewItemHeaderComponent;
    exports.ɵho = PoWidgetBaseComponent;
    exports.ɵhp = PoHttpInterceptorDetailComponent;
    exports.ɵhq = PoHttpInterceptorBaseService;
    exports.ɵhr = PoHttpRequesControltService;
    exports.ɵhs = PoI18nBaseService;
    exports.ɵi = PoBreadcrumbFavoriteService;
    exports.ɵj = PoBreadcrumbItemComponent;
    exports.ɵk = PoLoadingBaseComponent;
    exports.ɵl = PoLoadingOverlayBaseComponent;
    exports.ɵm = PoButtonBaseComponent;
    exports.ɵn = InputBoolean;
    exports.ɵo = PoTooltipBaseDirective;
    exports.ɵp = PoTooltipControlPositionService;
    exports.ɵq = PoControlPositionService;
    exports.ɵr = PoButtonGroupBaseComponent;
    exports.ɵs = PoCalendarBaseComponent;
    exports.ɵt = PoDateService;
    exports.ɵu = PoCalendarHeaderComponent;
    exports.ɵv = PoCalendarWrapperComponent;
    exports.ɵw = PoCalendarService;
    exports.ɵx = PoCalendarLangService;
    exports.ɵy = PoChartAreaComponent;
    exports.ɵz = PoChartLineBaseComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=po-ui-ng-components.umd.js.map
