{"version":3,"file":"po-list-view-detail-template.directive.d.ts","sources":["po-list-view-detail-template.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { TemplateRef } from '@angular/core';\r\n/**\r\n * @usedBy PoListViewComponent\r\n *\r\n * @description\r\n *\r\n * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um\r\n * botão `Exibir detalhes` abaixo do conteúdo principal do item.\r\n *\r\n * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.\r\n *  - Item: `item` determina o item da linha corrente.\r\n *  - Índice: `index` determina o índice da linha corrente.\r\n *\r\n * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:\r\n *\r\n * ```\r\n * ...\r\n * <po-list-view\r\n *   p-property-title=\"name\"\r\n *   [p-items]=\"items\">\r\n *\r\n *   <ng-template p-list-view-detail-template let-item let-code=\"index\">\r\n *     <div class=\"po-row\">\r\n *       <po-info class=\"po-md-6\" p-label=\"Code\" [p-value]=\"code\"></po-info>\r\n *       <po-info class=\"po-md-12\" p-label=\"Email\" [p-value]=\"item.email\"></po-info>\r\n *     </div>\r\n *   </ng-template>\r\n *\r\n * </po-list-view>\r\n *\r\n * ...\r\n * ```\r\n *\r\n * ```\r\n * ...\r\n * <po-list-view\r\n *    p-property-title=\"name\"\r\n *    [p-items]=\"items\">\r\n *    <div *p-list-view-detail-template=\"let item, let i=index\" class=\"po-row\">\r\n *      <po-info class=\"po-md-12\" p-label=\"Email\" [p-value]=\"item.email\"></po-info>\r\n *    </div>\r\n * </po-list-view>\r\n * ...\r\n *\r\n * ```\r\n */\r\nexport declare class PoListViewDetailTemplateDirective {\r\n    templateRef: TemplateRef<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Função que deve retornar um valor do tipo `boolean`, que será utilizado como a validação para que o detalhe de item\r\n     * da lista inicie aberto ou fechado.\r\n     *\r\n     */\r\n    showDetail: (item: any) => boolean;\r\n    constructor(templateRef: TemplateRef<any>);\r\n}\r\n"]}