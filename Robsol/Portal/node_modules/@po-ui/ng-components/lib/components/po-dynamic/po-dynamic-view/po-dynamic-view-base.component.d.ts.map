{"version":3,"file":"po-dynamic-view-base.component.d.ts","sources":["po-dynamic-view-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { CurrencyPipe, DatePipe, DecimalPipe, TitleCasePipe } from '@angular/common';\r\nimport { PoTimePipe } from '../../../pipes/po-time/po-time.pipe';\r\nimport { PoDynamicViewField } from './po-dynamic-view-field.interface';\r\nimport { PoDynamicViewService } from './po-dynamic-view.service';\r\n/**\r\n *\r\n * @description\r\n *\r\n * Componente para listar dados dinamicamente a partir de uma lista de objetos.\r\n *\r\n * > Por padrão esse componente cria `po-info` para exibição, é possível criar `po-tag` passando a propriedade { tag: true }.\r\n *\r\n */\r\nexport declare class PoDynamicViewBaseComponent {\r\n    private currencyPipe;\r\n    private datePipe;\r\n    private decimalPipe;\r\n    private timePipe;\r\n    private titleCasePipe;\r\n    protected dynamicViewService: PoDynamicViewService;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Possibilita executar uma função quando o componente é inicializado.\r\n     *\r\n     * A propriedade aceita os seguintes tipos:\r\n     * - **String**: Endpoint usado pelo componente para requisição via `POST`.\r\n     * - **Function**: Método que será executado na inicialização do componente.\r\n     *\r\n     * Para os dois tipos de utilização da propriedade espera-se o seguinte retorno:\r\n     *\r\n     * ```\r\n     * {\r\n     *   value: {\r\n     *     cnpj: '**************', // altera valor do campo\r\n     *     updated: (new Date()).toString() // atribui valor ao campo novo\r\n     *   },\r\n     *   fields: [\r\n     *     { property: 'cnpj', tag: true, inverse: true }, // atribui novas propriedades ao field\r\n     *     { property: 'updated', tag: true } // inclui campo novo\r\n     *   ]\r\n     * }\r\n     * ```\r\n     * > **value**: any = atribui novo valor do model.\r\n     *\r\n     * > **fields**: `Array<PoDynamicViewField>` = Lista de campos que deseja alterar as propriedades,\r\n     * caso enviar um campo a mais será criado um novo campo.\r\n     *\r\n     * - Para esconder/remover campos precisa informar no field a propriedade `visible = false`.\r\n     *\r\n     */\r\n    load: string | Function;\r\n    visibleFields: any[];\r\n    private _fields;\r\n    private _showAllValue;\r\n    private _value;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Lista de objetos que implementam a interface `PoDynamicView`.\r\n     *\r\n     * > Ex: `[ { property: 'age' } ]`\r\n     *\r\n     * Regras de tipagem e formatação dos valores exibidos:\r\n     *\r\n     * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe \"'BRL', 'symbol', '1.2-2'\"\r\n     * como formato padrão.\r\n     * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.\r\n     * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.\r\n     * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.\r\n     * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.\r\n     *\r\n     * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `p-value`.\r\n     *\r\n     * @default `[]`\r\n     */\r\n    set fields(fields: Array<PoDynamicViewField>);\r\n    get fields(): Array<PoDynamicViewField>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `p-value`.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set showAllValue(value: boolean);\r\n    get showAllValue(): boolean;\r\n    /**\r\n     * @description\r\n     *\r\n     * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*\r\n     * dos objetos contidos na propridade `p-fields`.\r\n     *\r\n     * > Ex: `{ age: '35' }`\r\n     */\r\n    set value(value: object);\r\n    get value(): object;\r\n    constructor(currencyPipe: CurrencyPipe, datePipe: DatePipe, decimalPipe: DecimalPipe, timePipe: PoTimePipe, titleCasePipe: TitleCasePipe, dynamicViewService: PoDynamicViewService);\r\n    protected getConfiguredFields(): any[];\r\n    protected getMergedFields(): any[];\r\n    protected getValueFields(): {\r\n        tag?: boolean;\r\n        color?: string;\r\n        icon?: string;\r\n        inverse?: boolean;\r\n        format?: string;\r\n        order?: number;\r\n        key?: boolean;\r\n        property: string;\r\n        label: string;\r\n        gridColumns?: number;\r\n        gridSmColumns?: number;\r\n        gridMdColumns?: number;\r\n        gridLgColumns?: number;\r\n        gridXlColumns?: number;\r\n        gridSmPull?: number;\r\n        gridMdPull?: number;\r\n        gridLgPull?: number;\r\n        gridXlPull?: number;\r\n        visible?: boolean;\r\n        divider?: string;\r\n        type?: string;\r\n        value: any;\r\n        cssClass: string;\r\n    }[];\r\n    private createField;\r\n    private transformValue;\r\n}\r\n"]}