{"version":3,"file":"po-chart-maths.service.d.ts","sources":["po-chart-maths.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { PoChartType } from '../enums/po-chart-type.enum';\r\nimport { PoChartMinMaxValues } from '../interfaces/po-chart-min-max-values.interface';\r\nimport { PoChartOptions } from '../interfaces/po-chart-options.interface';\r\nimport { PoChartSerie } from '../interfaces/po-chart-serie.interface';\r\nexport declare class PoChartMathsService {\r\n    /**\r\n     * Calcula e retorna os válores mínimo e máximo das séries.\r\n     *\r\n     * @param series Lista de séries.\r\n     * @param acceptNegativeValues boolean.\r\n     */\r\n    calculateMinAndMaxValues(series: Array<any>, acceptNegativeValues?: boolean): PoChartMinMaxValues;\r\n    /**\r\n     * Retorna o valor com maior quantidade de dígitos entre todas as séries.\r\n     * Pode receber uma lista de categorias para o caso de gráfico de barra, ou então a lista de séries se o tipo de gráfico for linha ou coluna.\r\n     *\r\n     * @param data Lista de séries.\r\n     * @param type O tipo do gráfico'.\r\n     * @param options As opções para validação de número de linhas do eixo X'.\r\n     */\r\n    getLongestDataValue(data: Array<PoChartSerie | string>, type: PoChartType, options: PoChartOptions): number | string;\r\n    /**\r\n     * Retorna o tamanho da série que tiver mais itens.\r\n     *\r\n     * @param series Lista de séries.\r\n     */\r\n    seriesGreaterLength(series: Array<PoChartSerie>): number;\r\n    /**\r\n     * Retorna o percentual em decimal da série passada pela distância entre os valores mínimos e máximos da série.\r\n     *\r\n     * Se o valor mínimo for negativo o alcance partirá dele como sendo zero %.\r\n     *\r\n     * Por exemplo:\r\n     *    minValue = -10;\r\n     *    maxValue = 0;\r\n     *    serieValue = -8\r\n     *    O resultado será de 0.20;\r\n     *\r\n     * @param minMaxValues Objeto contendo os valores mínimo e máximo de todas as séries.\r\n     * @param serieValue O valor da série.\r\n     */\r\n    getSeriePercentage(minMaxValues: any, serieValue: number): number;\r\n    /**\r\n     * Calcula e retorna uma lista de valores referentes aos textos dos eixos X em relação à quantidade de linhas horizontais.\r\n     *\r\n     * @param minMaxValues Objeto contendo os valores mínimo e máximo de todas as séries.\r\n     * @param gridLines Quantidade de linhas horizontais. Valor default é 5.\r\n     */\r\n    range(minMaxValues: PoChartMinMaxValues, gridLines?: number): any[];\r\n    /**\r\n     *\r\n     * Verifica se o valor passado é um Integer ou Float.\r\n     *\r\n     * @param number O valor a ser validado\r\n     */\r\n    verifyIfFloatOrInteger(number: number): boolean;\r\n    private amountOfGridLines;\r\n    private getAxisXLabelLongestValue;\r\n    private getGridLineArea;\r\n    private getDomain;\r\n    private getFractionFromInt;\r\n    private getLongestData;\r\n}\r\n"]}