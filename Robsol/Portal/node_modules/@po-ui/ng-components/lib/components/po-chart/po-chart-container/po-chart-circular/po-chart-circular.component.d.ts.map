{"version":3,"file":"po-chart-circular.component.d.ts","sources":["po-chart-circular.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, EventEmitter, NgZone } from '@angular/core';\r\nimport { PoChartContainerSize } from '../../interfaces/po-chart-container-size.interface';\r\nimport { PoChartLabelCoordinates } from '../../interfaces/po-chart-label-coordinates.interface';\r\nimport { PoChartOptions } from '../../interfaces/po-chart-options.interface';\r\nimport { PoChartPathCoordinates } from '../../interfaces/po-chart-path-coordinates.interface';\r\nimport { PoChartSerie } from '../../interfaces/po-chart-serie.interface';\r\nexport declare abstract class PoChartCircularComponent {\r\n    private ngZone;\r\n    private changeDetector;\r\n    containerSize: PoChartContainerSize;\r\n    circularClick: EventEmitter<any>;\r\n    circularHover: EventEmitter<any>;\r\n    private svgPaths;\r\n    private svgLabels;\r\n    canDisplayLabels: boolean;\r\n    seriesLabels: Array<PoChartLabelCoordinates>;\r\n    seriesList: Array<PoChartPathCoordinates>;\r\n    showLabels: boolean;\r\n    protected innerRadius: number;\r\n    protected totalValue: number;\r\n    private _options;\r\n    private _series;\r\n    private animate;\r\n    set options(value: PoChartOptions);\r\n    get options(): PoChartOptions;\r\n    set series(value: Array<PoChartSerie>);\r\n    get series(): Array<PoChartSerie>;\r\n    constructor(ngZone: NgZone, changeDetector: ChangeDetectorRef);\r\n    onSerieClick(selectedItem: any): void;\r\n    onSerieHover(selectedItem: any): void;\r\n    protected calculateAngle(data: number, totalValue: number): number;\r\n    protected drawSeries(series: Array<PoChartSerie>, height: number): void;\r\n    private calculateTotalValue;\r\n    private calculateSerieCoordinates;\r\n    private calculateCoordinatesWithAnimation;\r\n    private calculateCurrentEndAngle;\r\n    private initDrawPaths;\r\n    private setSerieLabelCoordinates;\r\n    private validateSeries;\r\n    protected abstract calculateCoordinates(height: any, startRadianAngle: any, currentEndRadianAngle: any): any;\r\n    protected abstract getTooltipLabel(data: any, label: any, tooltip: any): any;\r\n}\r\n"]}