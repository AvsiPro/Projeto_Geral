{"version":3,"file":"po-chart-base.component.d.ts","sources":["po-chart-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { PoChartContainerSize } from './interfaces/po-chart-container-size.interface';\r\nimport { PoChartGaugeSerie } from './po-chart-types/po-chart-gauge/po-chart-gauge-series.interface';\r\nimport { PoChartType } from './enums/po-chart-type.enum';\r\nimport { PoChartOptions } from './interfaces/po-chart-options.interface';\r\nimport { PoChartSerie } from './interfaces/po-chart-serie.interface';\r\nimport { PoColorService } from '../../services/po-color/po-color.service';\r\n/**\r\n * @description\r\n *\r\n * O `po-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a\r\n * visualização destes dados mais agradável.\r\n *\r\n * Através de suas principais propriedades é possível definir atributos, tais como tipo de gráfico, altura, título, cores customizadas, opções para os eixos, entre outros.\r\n *\r\n * O componente permite utilizar em conjunto séries do tipo linha e coluna.\r\n *\r\n * Além disso, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico\r\n * e outra que será executada ao passar o *mouse* sobre o elemento.\r\n *\r\n * #### Guia de uso para Gráficos\r\n *\r\n * > Veja nosso [guia de uso para gráficos](/guides/guide-charts) para auxiliar na construção do seu gráfico,\r\n * informando em qual caso utilizar, o que devemos evitar e boas práticas relacionada a cores.\r\n */\r\nexport declare abstract class PoChartBaseComponent implements OnChanges {\r\n    protected colorService: PoColorService;\r\n    /** Define o título do gráfico. */\r\n    title?: string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Evento executado quando o usuário clicar sobre um elemento do gráfico.\r\n     *\r\n     * O evento emitirá o seguinte parâmetro:\r\n     * - *donut* e *pie*: um objeto contendo a categoria e valor da série.\r\n     * - *area*, *line*, *column* e *bar*: um objeto contendo o nome da série, valor e categoria do eixo do gráfico.\r\n     */\r\n    seriesClick: EventEmitter<PoChartGaugeSerie | PoChartSerie>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.\r\n     *\r\n     * O evento emitirá o seguinte parâmetro de acordo com o tipo de gráfico:\r\n     * - *donut* e *pie*: um objeto contendo a categoria e valor da série.\r\n     * - *area*, *line*, *column* e *bar*: um objeto contendo a categoria, valor da série e categoria do eixo do gráfico.\r\n     */\r\n    seriesHover: EventEmitter<PoChartGaugeSerie | PoChartSerie>;\r\n    chartSeries: Array<PoChartSerie | PoChartGaugeSerie>;\r\n    chartType: PoChartType;\r\n    svgContainerSize: PoChartContainerSize;\r\n    private _options;\r\n    private _categories;\r\n    private _height;\r\n    private _series;\r\n    private _type;\r\n    private defaultType;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define a altura do gráfico.\r\n     *\r\n     * > O valor mínimo aceito nesta propriedade é 200.\r\n     *\r\n     * @default `400px`\r\n     */\r\n    set height(value: number);\r\n    get height(): number;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define o tipo de gráfico.\r\n     *\r\n     * É possível também combinar gráficos dos tipos linha e coluna. Para isso, opte pela declaração de `type` conforme a interface `PoChartSerie`.\r\n     *\r\n     * > Note que, se houver declaração de tipo de gráfico tanto em `p-type` quanto em `PochartSerie.type`, o valor `{ type }` da primeira série anulará o valor definido em `p-type`.\r\n     *\r\n     * Se não passado valor, o padrão será relativo à primeira série passada em `p-series`:\r\n     * - Se `p-series = [{ data: [1,2,3] }]`: será `PoChartType.Column`.\r\n     * - Se `p-series = [{ data: 1 }]`: será `PoChartType.Pie`.\r\n     *\r\n     * > Veja os valores válidos no *enum* `PoChartType`.\r\n     */\r\n    set type(value: PoChartType);\r\n    get type(): PoChartType;\r\n    /**\r\n     * @description\r\n     *\r\n     * Define os elementos do gráfico que serão criados dinamicamente.\r\n     */\r\n    set series(value: Array<PoChartSerie> | PoChartGaugeSerie);\r\n    get series(): Array<PoChartSerie> | PoChartGaugeSerie;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define os nomes das categorias que serão plotadas no eixo X do gráfico caso seja do tipo `bar`, ou então nos eixos Y do grid de gráficos dos tipos `area`, `columnn` e `line`.\r\n     *\r\n     * > Gráficos do tipo `bar` dimensionam a área do gráfico de acordo com a largura do maior texto de categorias. No entanto, é uma boa prática optar por palavras curtas para que a leitura do gráfico não seja prejudicada.\r\n     *\r\n     * > Caso não seja especificado um valor para a categoria, será plotado um hífen na categoria referente a cada série.\r\n     */\r\n    set categories(value: Array<string>);\r\n    get categories(): Array<string>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Objeto com as configurações usadas no `po-chart`.\r\n     *\r\n     * É possível, por exemplo, definir as configurações de exibição das legendas,\r\n     * configurar os eixos(*axis*) para os gráficos dos tipos `area`, `line`, `column` e `bar` da seguinte forma:\r\n     *\r\n     * ```\r\n     *  chartOptions: PoChartOptions = {\r\n     *    legend: true,\r\n     *    axis: {\r\n     *      minRange: 0,\r\n     *      maxRange: 100,\r\n     *      gridLines: 5,\r\n     *    },\r\n     *  };\r\n     * ```\r\n     */\r\n    set options(value: PoChartOptions);\r\n    get options(): PoChartOptions;\r\n    constructor(colorService: PoColorService);\r\n    get isTypeCircular(): boolean;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    onSeriesClick(event: any): void;\r\n    onSeriesHover(event: any): void;\r\n    private setDefaultHeight;\r\n    private transformObjectToArrayObject;\r\n    private setTypeDefault;\r\n    private validateSerieAndAddType;\r\n    private appendColors;\r\n    private appendType;\r\n    abstract rebuildComponentRef(): void;\r\n    protected abstract getSvgContainerSize(): void;\r\n    protected abstract calculateAxisXLabelArea(): number;\r\n}\r\n"]}