{"version":3,"file":"po-step.component.d.ts","sources":["po-step.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, ElementRef } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { PoStepperStatus } from '../enums/po-stepper-status.enum';\r\n/**\r\n * @description\r\n *\r\n * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:\r\n *\r\n * ```\r\n * <po-stepper>\r\n *\r\n *    <po-step p-label=\"Endereço\">\r\n *\r\n *        <!-- Conteúdo referente ao endereço -->\r\n *\r\n *    </po-step>\r\n *\r\n *    <po-step p-label=\"Pagamento\">\r\n *\r\n *        <!-- Conteúdo referente ao pagamento -->\r\n *\r\n *    </po-step>\r\n *\r\n *  </po-stepper>\r\n * ```\r\n *\r\n * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro\r\n * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam\r\n * desabilitados (*disabled*).\r\n *\r\n * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o\r\n * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá\r\n * com o status desabilitado.\r\n *\r\n * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível\r\n * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).\r\n *\r\n * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento\r\n * e exemplos de uso.\r\n */\r\nexport declare class PoStepComponent implements AfterContentInit {\r\n    private elementRef;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Função chamada quando o próximo *step* for clicado ou quando o método `PoStepperComponent.next()` for chamado.\r\n     * Ao retornar `true` define que esse *step* ficará ativo e o atual como concluído (*done*).\r\n     * Também aceita funções que retornem `Observable<boolean>`. Ao retornar um `Observable<boolean>`,\r\n     * garanta que esse `Observable` será completado, caso houver algum erro durante o processo não será possível prosseguir\r\n     * ao próximo *step*.\r\n     *\r\n     * Ao ser disparada, a mesma receberá por parâmetro o `PoStepComponent` atual.\r\n     *\r\n     * O contexto da função que será chamada, será o mesmo que o do `PoStepComponent`, então para poder alterar\r\n     * para o contexto do componente que o está utilizando, pode ser utilizado a propriedade `bind` do Javascript.\r\n     * Por exemplo, para a função `validate`:\r\n     *\r\n     * ```\r\n     * <po-step p-label=\"Step 1\" [p-can-active-next-step]=\"validate.bind(this)\">\r\n     * ...\r\n     * </po-step>\r\n     * ```\r\n     */\r\n    canActiveNextStep: ((currentStep: any) => boolean) | ((currentStep: any) => Observable<boolean>);\r\n    /** Título que será exibido descrevendo o passo (*step*). */\r\n    label: string;\r\n    id?: string;\r\n    private _status?;\r\n    set status(status: PoStepperStatus);\r\n    get status(): PoStepperStatus;\r\n    constructor(elementRef: ElementRef);\r\n    ngAfterContentInit(): void;\r\n    protected setDisplayOnActiveOrError(): void;\r\n}\r\n"]}