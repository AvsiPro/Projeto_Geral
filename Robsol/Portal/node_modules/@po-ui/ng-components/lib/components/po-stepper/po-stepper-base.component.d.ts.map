{"version":3,"file":"po-stepper-base.component.d.ts","sources":["po-stepper-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter } from '@angular/core';\r\nimport { PoStepComponent } from './po-step/po-step.component';\r\nimport { PoStepperItem } from './po-stepper-item.interface';\r\nimport { PoStepperOrientation } from './enums/po-stepper-orientation.enum';\r\n/**\r\n * @description\r\n *\r\n * O `po-stepper` permite que um processo seja dividido em passos para que o usuário o realize\r\n * mais facilmente.\r\n *\r\n * Existem duas formas de utilização:\r\n *\r\n * 1 - Usando o componente [**po-step**](/documentation/po-step) para renderizar e descrever os passos.\r\n *\r\n * 2 - Através da propriedade `p-steps` para descrever os passos do processo, sendo responsabilidade do desenvolvedor o controle\r\n * de renderização do que será exibido a cada *step* ativo.\r\n *\r\n * Através de suas propriedades, é possível definir se sua orientação será horizontal ou vertical,\r\n * além da possibilidade de aumentar o tamanho dos *steps*.\r\n *\r\n * Também é possível navegar entre os *steps* através do teclado utilizando a tecla *tab* e, para ativar o *step* em foco basta\r\n * pressionar a tecla *enter*. Além disso, é possível ativar a exibição de ícones no lugar de números nos *steps* através da\r\n * propriedade [`p-step-icons`](/documentation/po-stepper#stepIconsProperty).\r\n *\r\n * #### Utilizando os métodos do componente:\r\n *\r\n * Para acessar os métodos do componente é necessário ter a referência do mesmo.\r\n *\r\n * Por exemplo, utilizando um [**ViewChild**](https://angular.io/api/core/ViewChild):\r\n *\r\n * ```\r\n * @ViewChild(PoStepperComponent) poStepperComponent: PoStepperComponent;\r\n * ```\r\n *\r\n * E para acessar o método:\r\n *\r\n * ```\r\n * poStepperComponent.next();\r\n * ```\r\n *\r\n * #### Boas práticas\r\n *\r\n * - Evite `labels` extensos que quebram o layout do `po-stepper`, use `labels` diretos, curtos e intuitivos.\r\n * - Utilize apenas um `po-stepper` por página.\r\n */\r\nexport declare class PoStepperBaseComponent {\r\n    /**\r\n     *\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * <a id=\"stepIconsProperty\"></a>\r\n     *\r\n     * Habilita a exibição de ícone ao invés de número no centro do círculo dos *steps*.\r\n     *\r\n     * @default `false`\r\n     */\r\n    stepIcons: boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define o tamanho dos *steps* em *pixels*, possibilitando um maior destaque.\r\n     *\r\n     * O valor informado deve ser entre `24` e `64`.\r\n     *\r\n     * > Valores que não se enquadrarem a esta regra serão ignorados, mantendo-se o valor *default*.\r\n     *\r\n     * @default `24`\r\n     */\r\n    stepSize: number;\r\n    /** Ação que será executada quando o usuário mudar o passo do `po-stepper`. */\r\n    onChangeStep: EventEmitter<number | PoStepComponent>;\r\n    private _orientation?;\r\n    private _sequential?;\r\n    private _step;\r\n    private _steps;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define a orientação de exibição do `po-stepper`.\r\n     *\r\n     * > Veja os valores válidos no *enum* [PoStepperOrientation](documentation/po-stepper#stepperOrientation).\r\n     *\r\n     * @default `PoStepperOrientation.Horizontal`\r\n     */\r\n    set orientation(value: PoStepperOrientation);\r\n    get orientation(): PoStepperOrientation;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Controla o passo atual do `po-stepper`.\r\n     *\r\n     * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),\r\n     * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).\r\n     *\r\n     * @default `1`\r\n     */\r\n    set step(step: number);\r\n    get step(): number;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.\r\n     *\r\n     * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),\r\n     * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).\r\n     */\r\n    set steps(steps: Array<PoStepperItem>);\r\n    get steps(): Array<PoStepperItem>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define se o `po-stepper` será sequencial ou aleatório.\r\n     *\r\n     * > Ao utilizar o componente [**po-step**](/documentation/po-step), o valor desta propriedade sempre será verdadeiro.\r\n     *\r\n     * @default `true`\r\n     */\r\n    set sequential(sequential: boolean);\r\n    get sequential(): boolean;\r\n}\r\n"]}