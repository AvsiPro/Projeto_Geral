{"version":3,"file":"po-select.component.d.ts","sources":["po-select.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, IterableDiffers, Renderer2, EventEmitter } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { PoControlPositionService } from './../../../services/po-control-position/po-control-position.service';\r\nimport { PoSelectOption } from './po-select-option.interface';\r\nimport { PoSelectOptionTemplateDirective } from './po-select-option-template/po-select-option-template.directive';\r\nimport { PoFieldValidateModel } from '../po-field-validate.model';\r\n/**\r\n * @docsExtends PoFieldValidateModel\r\n *\r\n * @example\r\n *\r\n * <example name=\"po-select-basic\" title=\"PO Select Basic\">\r\n *   <file name=\"sample-po-select-basic/sample-po-select-basic.component.html\"> </file>\r\n *   <file name=\"sample-po-select-basic/sample-po-select-basic.component.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-select-labs\" title=\"PO Select Labs\">\r\n *   <file name=\"sample-po-select-labs/sample-po-select-labs.component.html\"> </file>\r\n *   <file name=\"sample-po-select-labs/sample-po-select-labs.component.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-select-customer-registration\" title=\"PO Select - Customer registration\">\r\n *   <file name=\"sample-po-select-customer-registration/sample-po-select-customer-registration.component.html\"> </file>\r\n *   <file name=\"sample-po-select-customer-registration/sample-po-select-customer-registration.component.ts\"> </file>\r\n *   <file name=\"sample-po-select-customer-registration/sample-po-select-customer-registration.service.ts\"> </file>\r\n *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.e2e-spec.ts'> </file>\r\n *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.po.ts'> </file>\r\n * </example>\r\n *\r\n * @description\r\n *\r\n * O componente po-select exibe uma lista de valores e permite que o usuário selecione um desses valores.\r\n * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.\r\n * O po-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.\r\n * O po-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.\r\n *\r\n * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.\r\n *\r\n * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,\r\n * veja mais em **[p-select-option-template](/documentation/po-select-option-template)**.\r\n */\r\nexport declare class PoSelectComponent extends PoFieldValidateModel<any> implements AfterViewInit, DoCheck {\r\n    private element;\r\n    private changeDetector;\r\n    renderer: Renderer2;\r\n    private controlPosition;\r\n    selectOptionTemplate: PoSelectOptionTemplateDirective;\r\n    contentList: ElementRef;\r\n    iconElement: ElementRef;\r\n    selectElement: ElementRef;\r\n    selectButtonElement: ElementRef;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.\r\n     *\r\n     * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar\r\n     * two-way binding no componente deve se utilizar da seguinte forma:\r\n     *\r\n     * ```\r\n     * <po-select ... [ngModel]=\"selectModel\" (ngModelChange)=\"selectModel = $event\"> </po-select>\r\n     * ```\r\n     */\r\n    ngModelChange: EventEmitter<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Indica que o campo será somente para leitura.\r\n     *\r\n     * @default `false`\r\n     */\r\n    readonly: boolean;\r\n    /** Mensagem que aparecerá enquanto nenhuma opção estiver selecionada. */\r\n    placeholder?: string;\r\n    displayValue: any;\r\n    isMobile: any;\r\n    modelValue: any;\r\n    onModelChange: any;\r\n    open: boolean;\r\n    selectedValue: any;\r\n    selectIcon: string;\r\n    scrollPosition: number;\r\n    eventListenerFunction: () => void;\r\n    eventResizeListener: () => void;\r\n    onModelTouched: any;\r\n    protected clickoutListener: () => void;\r\n    private differ;\r\n    private _options;\r\n    /**\r\n     * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface `PoSelectOption`.\r\n     *\r\n     * Caso esta lista estiver vazia, o model será `undefined`.\r\n     *\r\n     * > Essa propriedade é imutável, ou seja, sempre que quiser atualizar a lista de opções disponíveis\r\n     * atualize a referência do objeto:\r\n     *\r\n     * ```\r\n     * // atualiza a referência do objeto garantindo a atualização do template\r\n     * this.options = [...this.options, { value: 'x', label: 'Nova opção' }];\r\n     *\r\n     * // evite, pois não atualiza a referência do objeto podendo gerar atrasos na atualização do template\r\n     * this.options.push({ value: 'x', label: 'Nova opção' });\r\n     * ```\r\n     */\r\n    set options(options: Array<PoSelectOption>);\r\n    get options(): Array<PoSelectOption>;\r\n    constructor(element: ElementRef, changeDetector: ChangeDetectorRef, differs: IterableDiffers, renderer: Renderer2, controlPosition: PoControlPositionService);\r\n    get isInvisibleSelectNative(): any;\r\n    onKeydown($event?: any): void;\r\n    ngAfterViewInit(): void;\r\n    ngDoCheck(): void;\r\n    /**\r\n     * Função que atribui foco ao componente.\r\n     *\r\n     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:\r\n     *\r\n     * ```\r\n     * import { PoSelectComponent } from '@po-ui/ng-components';\r\n     *\r\n     * ...\r\n     *\r\n     * @ViewChild(PoSelectComponent, { static: true }) select: PoSelectComponent;\r\n     *\r\n     * focusSelect() {\r\n     *   this.select.focus();\r\n     * }\r\n     * ```\r\n     */\r\n    focus(): void;\r\n    hideDropDown(): void;\r\n    onBlur(): void;\r\n    onOptionClick(option: PoSelectOption): void;\r\n    onSelectChange(value: any): void;\r\n    onUpdateOptions(): void;\r\n    scrollValue(index: any, clientHeight: any): number;\r\n    selector(query: string): Element;\r\n    toggleButton(): void;\r\n    updateValues(option: PoSelectOption): void;\r\n    wasClickedOnToggle(event: MouseEvent): void;\r\n    onWriteValue(value: any): void;\r\n    extraValidation(c: AbstractControl): {\r\n        [key: string]: any;\r\n    };\r\n    private isEqual;\r\n    private disableDefaultEventAndToggleButton;\r\n    private findOptionValue;\r\n    private getSelectItemHeight;\r\n    private initializeListeners;\r\n    private onScroll;\r\n    private removeListeners;\r\n    private setPositionDropdown;\r\n    private setScrollPosition;\r\n    private showDropdown;\r\n}\r\n"]}