{"version":3,"file":"po-lookup-base.component.d.ts","sources":["po-lookup-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\r\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { PoLookupAdvancedFilter } from './interfaces/po-lookup-advanced-filter.interface';\r\nimport { PoLookupColumn } from './interfaces/po-lookup-column.interface';\r\nimport { PoLookupFilter } from './interfaces/po-lookup-filter.interface';\r\nimport { PoLookupLiterals } from './interfaces/po-lookup-literals.interface';\r\nimport { PoLookupFilterService } from './services/po-lookup-filter.service';\r\n/**\r\n * @description\r\n *\r\n * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviço. Nesta janela é possível buscar e\r\n * selecionar um ou mais registros que serão enviados para o campo. O `po-lookup` permite que o usuário digite um valor e pressione a tecla *TAB* para\r\n * buscar um registro.\r\n *\r\n * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo será limpado.\r\n * No segundo caso ocorrerá após este perder o foco; ambos os casos o campo ficará inválido quando requerido.\r\n *\r\n * > Enquanto o componente realiza a requisição ao servidor, o componente ficará desabilitado e com o status interno do\r\n * [modelo](https://angular.io/guide/form-validation#creating-asynchronous-validators) como `pending`.\r\n *\r\n * Este componente não é recomendado quando a busca dos dados possuir poucas informações, para isso utilize outros componentes como o\r\n * `po-select` ou o `po-combo`.\r\n */\r\nexport declare abstract class PoLookupBaseComponent implements ControlValueAccessor, OnDestroy, OnInit, Validator, AfterViewInit, OnChanges {\r\n    private defaultService;\r\n    private injector;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Aplica foco no elemento ao ser iniciado.\r\n     *\r\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\r\n     *\r\n     * @default `false`\r\n     */\r\n    autoFocus: boolean;\r\n    /**\r\n     * Label do campo.\r\n     *\r\n     * > Quando utilizar esta propriedade o seu valor será utilizado como título da modal do componente caso não tenha\r\n     * sido definido um `modalTitle` na propriedade `p-literals`.\r\n     */\r\n    label?: string;\r\n    /**\r\n     * @description\r\n     *\r\n     * Objeto com as literais usadas no `po-lookup`.\r\n     *\r\n     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:\r\n     *\r\n     * ```\r\n     *  const customLiterals: PoLookupLiterals = {\r\n     *    modalPrimaryActionLabel: 'Select',\r\n     *    modalSecondaryActionLabel: 'Cancel',\r\n     *    modalPlaceholder: 'Search Value',\r\n     *    modalTableNoColumns: 'No columns',\r\n     *    modalTableNoData: 'No data',\r\n     *    modalTableLoadingData: 'Loading data',\r\n     *    modalTableLoadMoreData: 'Load more',\r\n     *    modalTitle: 'Select a user',\r\n     *    modalAdvancedSearch: 'Advanced search',\r\n     *    modalAdvancedSearchTitle: 'Advanced search',\r\n     *    modalAdvancedSearchPrimaryActionLabel: 'Filter',\r\n     *    modalAdvancedSearchSecondaryActionLabel: 'Return',\r\n     *    modalDisclaimerGroupTitle: 'Presenting results filtered by:'\r\n     *  };\r\n     * ```\r\n     *\r\n     * Ou passando apenas as literais que deseja customizar:\r\n     *\r\n     * ```\r\n     *  const customLiterals: PoLookupLiterals = {\r\n     *    modalPrimaryActionLabel: 'Select'\r\n     *  };\r\n     * ```\r\n     *\r\n     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\r\n     *\r\n     * ```\r\n     * <po-lookup\r\n     *   [p-literals]=\"customLiterals\">\r\n     * </po-lookup>\r\n     * ```\r\n     *\r\n     * > O objeto padrão de literais será traduzido de acordo com o idioma do\r\n     * [`PoI18nService`](/documentation/po-i18n) ou do browser.\r\n     */\r\n    literals?: PoLookupLiterals;\r\n    /** Texto de apoio do campo. */\r\n    help?: string;\r\n    /** Mensagem que aparecerá enquanto o campo não estiver preenchido. */\r\n    set placeholder(value: string);\r\n    get placeholder(): string;\r\n    /** Nome e Id do componente. */\r\n    name: string;\r\n    /**\r\n     * @description\r\n     *\r\n     * Indica a coluna que será utilizada como valor do campo.\r\n     *\r\n     * > Atenção: Caso não seja passada ou tenha o conteúdo incorreto, não irá atualizar o model do formulário.\r\n     */\r\n    fieldValue: string;\r\n    /** Indica a coluna que será utilizada como descrição do campo e como filtro dentro da janela. */\r\n    set fieldLabel(value: string);\r\n    get fieldLabel(): string;\r\n    /** Valor que será repassado como parâmetro para a URL ou aos métodos do serviço que implementam a interface `PoLookupFilter`. */\r\n    filterParams?: any;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Formato de exibição do campo.\r\n     *\r\n     * Recebe uma função que deve retornar uma *string* com o/os valores do objeto formatados para exibição, por exemplo:\r\n     *\r\n     * ```\r\n     * fieldFormat(obj) {\r\n     *   return `${obj.id} - ${obj.name}`;\r\n     * }\r\n     * ```\r\n     * > Esta propriedade sobrepõe o valor da propriedade `p-field-label` na descrição do campo.\r\n     *\r\n     * Pode-se informar uma lista de propriedades que deseja exibir como descrição do campo, Por exemplo:\r\n     * ```\r\n     * <po-lookup\r\n     *  ...\r\n     *  [p-field-format]=\"['id','nickname']\"\r\n     *  ...\r\n     * >\r\n     *\r\n     * Objeto retornado:\r\n     *   {\r\n     *      id:123,\r\n     *      name: 'Kakaroto',\r\n     *      nickname: 'Goku',\r\n     *   }\r\n     * Apresentação no campo: 123 - Goku\r\n     * ```\r\n     *\r\n     * > Será utilizado ` - ` como separador.\r\n     */\r\n    fieldFormat?: ((value: any) => string) | Array<string>;\r\n    /**\r\n     * Lista das colunas da tabela.\r\n     * Essa propriedade deve receber um array de objetos que implementam a interface PoLookupColumn.\r\n     */\r\n    columns?: Array<PoLookupColumn>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define se a indicação de campo opcional será exibida.\r\n     *\r\n     * > Não será exibida a indicação se:\r\n     * - O campo conter `p-required`;\r\n     * - Não possuir `p-help` e/ou `p-label`.\r\n     *\r\n     * @default `false`\r\n     */\r\n    optional: boolean;\r\n    /**\r\n     *\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Lista de objetos dos campos que serão criados na busca avançada.\r\n     *\r\n     * > Caso não seja passado um objeto ou então ele esteja em branco o link de busca avançada ficará escondido.\r\n     *\r\n     * Exemplo de URL com busca avançada:\r\n     *\r\n     * ```\r\n     * url + ?page=1&pageSize=20&name=Tony%20Stark&nickname=Homem%20de%20Ferro\r\n     * ```\r\n     *\r\n     * Caso algum parâmetro seja uma lista, a concatenação é feita utilizando vírgula.\r\n     * Exemplo:\r\n     *\r\n     * ```\r\n     * url + ?page=1&pageSize=20&name=Tony%20Stark,Peter%20Parker,Gohan\r\n     * ```\r\n     *\r\n     */\r\n    advancedFilters: Array<PoLookupAdvancedFilter>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Ativa a funcionalidade de scroll infinito para a tabela exibida no retorno da consulta.\r\n     *\r\n     * @default `false`\r\n     */\r\n    infiniteScroll: boolean;\r\n    /** Exibe um ícone que permite limpar o campo. */\r\n    clean: boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Permite a seleção de múltiplos itens.\r\n     *\r\n     * > Quando habilitado o valor do campo passará a ser uma lista de valores, por exemplo: `[ 12345, 67890 ]`\r\n     *\r\n     * @default `false`\r\n     */\r\n    multiple: boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define que a altura do componente será auto ajustável, possuindo uma altura minima porém a altura máxima será de acordo\r\n     * com o número de itens selecionados e a extensão dos mesmos, mantendo-os sempre visíveis.\r\n     *\r\n     * @default `false`\r\n     */\r\n    autoHeight: boolean;\r\n    /**\r\n     * Evento será disparado quando ocorrer algum erro na requisição de busca do item.\r\n     * Será passado por parâmetro o objeto de erro retornado.\r\n     */\r\n    onError: EventEmitter<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Evento será disparado quando ocorrer alguma seleção.\r\n     * Será passado por parâmetro o objeto com o valor selecionado.\r\n     */\r\n    selected: EventEmitter<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     *  Evento que será disparado ao alterar o model.\r\n     *  Por parâmetro será passado o novo valor.\r\n     */\r\n    change: EventEmitter<any>;\r\n    service: any;\r\n    protected selectedOptions: any[];\r\n    protected getSubscription: Subscription;\r\n    protected keysDescription: Array<any>;\r\n    protected oldValue: string;\r\n    protected valueToModel: any;\r\n    protected oldValueToModel: any;\r\n    protected onTouched: any;\r\n    protected resizeListener: () => void;\r\n    private _disabled?;\r\n    private _fieldLabel;\r\n    private _filterService;\r\n    private _noAutocomplete;\r\n    private _placeholder;\r\n    private _required?;\r\n    private _autoHeight;\r\n    private autoHeightInitialValue;\r\n    private onChangePropagate;\r\n    private validatorChange;\r\n    private control;\r\n    /**\r\n     * Serviço responsável por buscar os dados da tabela na janela. Pode ser informado um serviço que implemente a interface\r\n     * `PoLookupFilter` ou uma URL.\r\n     *\r\n     * Quando utilizada uma URL de um serviço, será concatenada nesta URL o valor que deseja-se filtrar, por exemplo:\r\n     *\r\n     * ```\r\n     * url + ?page=1&pageSize=20&filter=Peter\r\n     * ```\r\n     *\r\n     * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:\r\n     * - Coluna decrescente:\r\n     * ```\r\n     *  url + ?page=1&pageSize=20&filter=Peter&order=-name\r\n     * ```\r\n     *\r\n     * - Coluna ascendente:\r\n     * ```\r\n     *  url + ?page=1&pageSize=20&filter=Peter&order=name\r\n     * ```\r\n     *\r\n     * Se for definido a propriedade `p-filter-params`, o mesmo também será concatenado. Por exemplo, para o\r\n     * parâmetro `{ age: 23 }` a URL ficaria:\r\n     *\r\n     * ```\r\n     * url + ?page=1&pageSize=20&age=23&filter=Peter\r\n     * ```\r\n     *\r\n     * Ao iniciar o campo com valor, os registros serão buscados da seguinte forma:\r\n     * ```\r\n     * model = 1234;\r\n     *\r\n     * GET url/1234\r\n     * ```\r\n     *\r\n     * Caso estiver com múltipla seleção habilitada:\r\n     * ```\r\n     * model = [1234, 5678]\r\n     *\r\n     * GET url?${fieldValue}=1234,5678\r\n     * ```\r\n     *\r\n     * > Esta URL deve retornar e receber os dados no padrão de [API do PO UI](https://po-ui.io/guides/api) e utiliza os valores\r\n     * definidos nas propriedades `p-field-label` e `p-field-value` para a construção do `po-lookup`.\r\n     *\r\n     * Caso o usuário digite um valor e pressione a tecla *TAB* para realizar a busca de um registro específico, o valor que se\r\n     * deseja filtrar será codificado utilizando a função [encodeURIComponent](https://tc39.es/ecma262/#sec-encodeuricomponent-uricomponent)\r\n     * e concatenado na URL da seguinte forma:\r\n     *\r\n     * ```\r\n     * url/valor%20que%20se%20deseja%20filtrar\r\n     * ```\r\n     *\r\n     * > Quando informado um serviço que implemente a interface `PoLookupFilter` o tratamento de encoding do valor a ser filtrado ficará a cargo do desenvolvedor.\r\n     *\r\n     */\r\n    set filterService(filterService: PoLookupFilter | string);\r\n    get filterService(): PoLookupFilter | string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define a propriedade nativa `autocomplete` do campo como `off`.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set noAutocomplete(value: boolean);\r\n    get noAutocomplete(): boolean;\r\n    /**\r\n     * @optional\r\n     * @description\r\n     *\r\n     * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).\r\n     *\r\n     * @default `false`\r\n     */\r\n    set required(required: boolean);\r\n    get required(): boolean;\r\n    /**\r\n     * @description\r\n     *\r\n     * Indica que o campo será desabilitado.\r\n     *\r\n     * @default false\r\n     * @optional\r\n     */\r\n    set disabled(disabled: boolean);\r\n    get disabled(): boolean;\r\n    constructor(defaultService: PoLookupFilterService, injector: Injector);\r\n    ngOnDestroy(): void;\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    cleanModel(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    registerOnValidatorChange(fn: () => void): void;\r\n    registerOnChange(func: any): void;\r\n    registerOnTouched(func: any): void;\r\n    selectValue(valueSelected: any): void;\r\n    callOnChange(value: any): void;\r\n    searchById(value: any): void;\r\n    validate(abstractControl: AbstractControl): {\r\n        [key: string]: any;\r\n    };\r\n    writeValue(value: any): void;\r\n    protected cleanViewValue(): void;\r\n    protected getFormattedLabel(value: any): string;\r\n    protected selectModel(options: Array<any>): void;\r\n    protected validateModel(model: any): void;\r\n    private setService;\r\n    private setControl;\r\n    private initializeColumn;\r\n    abstract setViewValue(value: any, object: any): void;\r\n    abstract openLookup(): void;\r\n    abstract setDisclaimers(a: any): any;\r\n    abstract updateVisibleItems(): any;\r\n}\r\n"]}