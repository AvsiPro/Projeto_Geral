{"version":3,"file":"po-decimal.component.d.ts","sources":["po-decimal.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ChangeDetectorRef, ElementRef, OnInit } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { PoLanguageService } from '../../../services/po-language/po-language.service';\r\nimport { PoInputBaseComponent } from '../po-input/po-input-base.component';\r\n/**\r\n *\r\n * @docsExtends PoInputBaseComponent\r\n *\r\n * @description\r\n *\r\n * <br>\r\n * - O `po-decimal` é um *input* específico para receber apenas números decimais, por isso recebe as seguintes características:\r\n *  + Aceita apenas números;\r\n *  + Utiliza ',' como separador de decimal;\r\n *  + Utiliza '.' para separação de milhar;\r\n *  + É possível configurar a quantidade de casas decimais e a quantidade de digitos do campo.\r\n *\r\n * > **Importante:**\r\n * Atualmente o JavaScript limita-se a um conjunto de dados de `32 bits`, e para que os valores comportem-se devidamente,\r\n * o `po-decimal` contém um tratamento que limita em 16 o número total de casas antes e após a vírgula.\r\n * Veja abaixo as demais regras nas documentações de `p-decimals-length` e `p-thousand-maxlength`.\r\n *\r\n * @example\r\n *\r\n * <example name=\"po-decimal-basic\" title=\"PO Decimal Basic\">\r\n *  <file name=\"sample-po-decimal-basic/sample-po-decimal-basic.component.html\"> </file>\r\n *  <file name=\"sample-po-decimal-basic/sample-po-decimal-basic.component.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-decimal-labs\" title=\"PO Decimal Labs\">\r\n *  <file name=\"sample-po-decimal-labs/sample-po-decimal-labs.component.html\"> </file>\r\n *  <file name=\"sample-po-decimal-labs/sample-po-decimal-labs.component.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-decimal-hourly-wage\" title=\"PO Decimal - Hourly Wage\">\r\n *  <file name=\"sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.html\"> </file>\r\n *  <file name=\"sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-decimal-hourly-wage-reactive-form\" title=\"PO Decimal - Hourly Wage Reactive Form\">\r\n *  <file name=\"sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.html\"> </file>\r\n *  <file name=\"sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.ts\"> </file>\r\n * </example>\r\n */\r\nexport declare class PoDecimalComponent extends PoInputBaseComponent implements AfterViewInit, OnInit {\r\n    private el;\r\n    private poLanguageService;\r\n    inputEl: ElementRef;\r\n    private _decimalsLength?;\r\n    private _thousandMaxlength?;\r\n    private _locale?;\r\n    private _min?;\r\n    private _max?;\r\n    private decimalSeparator;\r\n    private fireChange;\r\n    private isKeyboardAndroid;\r\n    private minusSign;\r\n    private oldDotsLength;\r\n    private thousandSeparator;\r\n    private valueBeforeChange;\r\n    private regex;\r\n    get autocomplete(): \"on\" | \"off\";\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Quantidade máxima de casas decimais.\r\n     *\r\n     * > **Importante:**\r\n     * - O valor máximo permitido é 15;\r\n     * - A soma total de `p-decimals-length` com `p-thousand-maxlength` limita-se à 16;\r\n     * - Esta propriedade sobrepõe apenas o valor **padrão** de `p-thousand-maxlength`;\r\n     * - Caso `p-thousand-maxlength` tenha um valor definido, esta propriedade poderá receber apenas o valor restante do limite total (16).\r\n     *\r\n     * @default `2`\r\n     */\r\n    set decimalsLength(value: number);\r\n    get decimalsLength(): number;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Quantidade máxima de dígitos antes do separador decimal.\r\n     *\r\n     * > **Importante:**\r\n     * - O valor máximo permitido é 13;\r\n     * - A soma total de `p-decimals-length` com `p-thousand-maxlength` limita-se à 16;\r\n     * - Esta propriedade sobrepõe o valor definido em `p-decimals-length`.\r\n     *\r\n     * @default `13`\r\n     */\r\n    set thousandMaxlength(value: number);\r\n    get thousandMaxlength(): number;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Informa o locale(país) para a formatação do valor.\r\n     * Por padrão o valor será configurado segundo a o módulo [`I18n`](documentation/po-i18n)\r\n     *\r\n     * > Para ver quais linguagens suportadas acesse [`I18n`](documentation/po-i18n)\r\n     *\r\n     */\r\n    set locale(locale: string);\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Valor mínimo.\r\n     */\r\n    set min(value: number);\r\n    get min(): number;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Valor máximo.\r\n     */\r\n    set max(value: number);\r\n    get max(): number;\r\n    constructor(el: ElementRef, poLanguageService: PoLanguageService, cd: ChangeDetectorRef);\r\n    ngOnInit(): void;\r\n    setNumbersSeparators(): void;\r\n    ngAfterViewInit(): void;\r\n    clear(value: any): void;\r\n    extraValidation(abstractControl: AbstractControl): {\r\n        [key: string]: any;\r\n    };\r\n    focus(): void;\r\n    getScreenValue(): any;\r\n    hasInvalidClass(): boolean;\r\n    hasLetters(value?: string): RegExpMatchArray;\r\n    isValidNumber(event: any): boolean;\r\n    onBlur(event: any): void;\r\n    onFocus(event: FocusEvent): void;\r\n    onInput(event: any): void;\r\n    onInputKeyboardAndroid(event: any): any;\r\n    onKeyPress(event: KeyboardEvent): void;\r\n    setPaddingInput(): void;\r\n    writeValueModel(value: any): void;\r\n    getErrorPatternMessage(): string;\r\n    private addZeroBefore;\r\n    private containsComma;\r\n    private containsMoreThanOneDecimalSeparator;\r\n    private controlChangeEmitter;\r\n    private formatMask;\r\n    private formatToModelValue;\r\n    private formatToViewValue;\r\n    private formatValueWithoutThousandSeparator;\r\n    private getValueAfterSeparator;\r\n    private getValueBeforeSeparator;\r\n    private hasLessDot;\r\n    private hasMoreDot;\r\n    private hasMinusSignInvalidPosition;\r\n    private isInvalidKey;\r\n    private isGreaterThanTotalLengthLimit;\r\n    private isKeyDecimalSeparator;\r\n    private isPositionAfterDecimalSeparator;\r\n    private isSelectionStartDifferentSelectionEnd;\r\n    private isValidKey;\r\n    private isValueBetweenAllowed;\r\n    private verifyDecimalLengthIsZeroAndKeyPressedIsComma;\r\n    private verifyAutoFocus;\r\n    private setInitialSelectionRange;\r\n    private replaceAt;\r\n    private replaceCommaToDot;\r\n    private setCursorInput;\r\n    private setPositionValue;\r\n    private setViewValue;\r\n    private validateCursorPositionBeforeSeparator;\r\n    private verifyThousandLength;\r\n    private verifyInsertComma;\r\n    private verifyInsertMinusSign;\r\n    private verifyValueAfterComma;\r\n}\r\n"]}