{"version":3,"file":"po-password.component.d.ts","sources":["po-password.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AbstractControl } from '@angular/forms';\r\nimport { ChangeDetectorRef, ElementRef } from '@angular/core';\r\nimport { PoInputGeneric } from '../po-input-generic/po-input-generic';\r\n/**\r\n * @docsExtends PoInputBaseComponent\r\n *\r\n * @description\r\n * O po-password é um input específico para senhas. Já possui tipo, estilo e ícone predefinidos.\r\n *\r\n * @example\r\n *\r\n * <example name=\"po-password-basic\" title=\"PO Password Basic\">\r\n *   <file name=\"sample-po-password-basic/sample-po-password-basic.component.html\"> </file>\r\n *   <file name=\"sample-po-password-basic/sample-po-password-basic.component.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-password-labs\" title=\"PO Password Labs\">\r\n *   <file name=\"sample-po-password-labs/sample-po-password-labs.component.html\"> </file>\r\n *   <file name=\"sample-po-password-labs/sample-po-password-labs.component.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-password-reset\" title=\"PO Password - Reset\">\r\n *   <file name=\"sample-po-password-reset/sample-po-password-reset.component.html\"> </file>\r\n *   <file name=\"sample-po-password-reset/sample-po-password-reset.component.ts\"> </file>\r\n * </example>\r\n */\r\nexport declare class PoPasswordComponent extends PoInputGeneric {\r\n    type: string;\r\n    visiblePassword: boolean;\r\n    private _hidePasswordPeek?;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Permite esconder a função de espiar a senha digitada.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set hidePasswordPeek(value: boolean);\r\n    get hidePasswordPeek(): boolean;\r\n    get autocomplete(): string;\r\n    constructor(el: ElementRef, cd: ChangeDetectorRef);\r\n    extraValidation(c: AbstractControl): {\r\n        [key: string]: any;\r\n    };\r\n    showPassword(): void;\r\n}\r\n"]}