{"version":3,"file":"po-rich-text-base.component.d.ts","sources":["po-rich-text-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { PoRichTextService } from './po-rich-text.service';\r\n/**\r\n * @description\r\n *\r\n * O componente `po-rich-text` é um editor de textos enriquecidos.\r\n *\r\n * Para edição de texto simples sem formatação recomenda-se o uso do componente [**po-textarea**](/documentation/po-textarea).\r\n *\r\n * > No navegador Internet Explorer não é possível alterar a cor do texto.\r\n */\r\nexport declare abstract class PoRichTextBaseComponent implements ControlValueAccessor, Validator {\r\n    private richTextService;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Aplica foco no elemento ao ser iniciado.\r\n     *\r\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\r\n     *\r\n     * @default `false`\r\n     */\r\n    autoFocus: boolean;\r\n    /**\r\n     * @description\r\n     *\r\n     * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.\r\n     */\r\n    errorMessage?: string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Texto de apoio do campo.\r\n     */\r\n    help?: string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Rótulo do campo.\r\n     */\r\n    label?: string;\r\n    /** Nome e identificador do campo. */\r\n    name: string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define se a indicação de campo opcional será exibida.\r\n     *\r\n     * > Não será exibida a indicação se:\r\n     * - O campo conter `p-required`;\r\n     * - Não possuir `p-help` e/ou `p-label`.\r\n     *\r\n     * @default `false`\r\n     */\r\n    optional: boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Evento disparado ao deixar o campo e que recebe como parâmetro o valor alterado.\r\n     */\r\n    change: EventEmitter<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Evento disparado ao modificar valor do model e que recebe como parâmetro o valor alterado.\r\n     */\r\n    changeModel: EventEmitter<any>;\r\n    invalid: boolean;\r\n    onChangeModel: any;\r\n    value: string;\r\n    private _height?;\r\n    private _placeholder;\r\n    private _readonly;\r\n    private _required;\r\n    private validatorChange;\r\n    protected onTouched: any;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define a altura da área de edição de texto.\r\n     *\r\n     * > Altura mínima do componente é `94` e a altura máxima é `262`.\r\n     */\r\n    set height(height: number);\r\n    get height(): number;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Mensagem que aparecerá enquanto o campo não estiver preenchido.\r\n     *\r\n     * @default ''\r\n     */\r\n    set placeholder(value: string);\r\n    get placeholder(): string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Indica que o campo será somente leitura.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set readonly(value: boolean);\r\n    get readonly(): boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Indica que o campo será obrigatório.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set required(value: boolean);\r\n    get required(): boolean;\r\n    constructor(richTextService: PoRichTextService);\r\n    registerOnChange(func: any): void;\r\n    registerOnTouched(func: any): void;\r\n    registerOnValidatorChange(fn: () => void): void;\r\n    validate(abstractControl: AbstractControl): {\r\n        [key: string]: any;\r\n    };\r\n    writeValue(value: string): void;\r\n    protected updateModel(value: any): void;\r\n    protected validateModel(value: any): void;\r\n}\r\n"]}