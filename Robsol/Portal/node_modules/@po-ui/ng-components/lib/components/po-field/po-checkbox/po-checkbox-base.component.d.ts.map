{"version":3,"file":"po-checkbox-base.component.d.ts","sources":["po-checkbox-base.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ControlValueAccessor } from '@angular/forms';\r\nimport { EventEmitter } from '@angular/core';\r\n/**\r\n * @description\r\n *\r\n * O componente `po-checkbox` exibe uma caixa de opção com um texto ao lado, na qual é possível marcar e desmarcar através tanto\r\n * no *click* do *mouse* quanto por meio da tecla *space* quando estiver com foco.\r\n *\r\n * Cada opção poderá receber um estado de marcado, desmarcado, indeterminado e desabilitado, como também uma ação que será disparada quando\r\n * ocorrer mudanças do valor.\r\n *\r\n * > O *model* deste componente aceitará valores igual à `true`, `false` ou `null` para quando for indeterminado.\r\n */\r\nexport declare abstract class PoCheckboxBaseComponent implements ControlValueAccessor {\r\n    /** Define o nome do *checkbox*. */\r\n    name: string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Aplica foco no elemento ao ser iniciado.\r\n     *\r\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\r\n     *\r\n     * @default `false`\r\n     */\r\n    autoFocus: boolean;\r\n    /** Texto de exibição do *checkbox*. */\r\n    label?: string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Evento disparado quando o valor do *checkbox* for alterado.\r\n     */\r\n    change: EventEmitter<any>;\r\n    checkboxValue: boolean | null;\r\n    id: string;\r\n    propagateChange: any;\r\n    onTouched: any;\r\n    private _disabled?;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define o estado do *checkbox* como desabilitado.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set disabled(value: boolean);\r\n    get disabled(): boolean;\r\n    changeValue(): void;\r\n    checkOption(value: boolean | null): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    registerOnChange(fn: any): void;\r\n    registerOnTouched(fn: any): void;\r\n    writeValue(value: any): void;\r\n    protected abstract changeModelValue(value: boolean | null): any;\r\n}\r\n"]}