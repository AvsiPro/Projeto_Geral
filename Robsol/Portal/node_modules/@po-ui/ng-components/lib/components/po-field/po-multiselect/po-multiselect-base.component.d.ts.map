{"version":3,"file":"po-multiselect-base.component.d.ts","sources":["po-multiselect-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\r\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\r\nimport { Observable, Subject, Subscription } from 'rxjs';\r\nimport { PoLanguageService } from '../../../services/po-language/po-language.service';\r\nimport { PoMultiselectFilterMode } from './po-multiselect-filter-mode.enum';\r\nimport { PoMultiselectLiterals } from './po-multiselect-literals.interface';\r\nimport { PoMultiselectOption } from './po-multiselect-option.interface';\r\nimport { PoMultiselectFilter } from './po-multiselect-filter.interface';\r\nimport { PoMultiselectFilterService } from './po-multiselect-filter.service';\r\nexport declare const poMultiselectLiteralsDefault: {\r\n    en: PoMultiselectLiterals;\r\n    es: PoMultiselectLiterals;\r\n    pt: PoMultiselectLiterals;\r\n    ru: PoMultiselectLiterals;\r\n};\r\n/**\r\n * @description\r\n *\r\n * O po-multiselect é um componente de múltipla seleção.\r\n * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.\r\n *\r\n * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do po-checkbox-group, por ser mais simples\r\n * e mais rápido para a seleção do usuário.\r\n *\r\n * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o\r\n * po-select, po-combo ou po-radio-group.\r\n *\r\n * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.\r\n */\r\nexport declare abstract class PoMultiselectBaseComponent implements ControlValueAccessor, OnInit, Validator {\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Aplica foco no elemento ao ser iniciado.\r\n     *\r\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\r\n     *\r\n     * @default `false`\r\n     */\r\n    autoFocus: boolean;\r\n    /** Label no componente. */\r\n    label?: string;\r\n    /** Texto de apoio para o campo. */\r\n    help?: string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define se a indicação de campo opcional será exibida.\r\n     *\r\n     * > Não será exibida a indicação se:\r\n     * - O campo conter `p-required`;\r\n     * - Não possuir `p-help` e/ou `p-label`.\r\n     *\r\n     * @default `false`\r\n     */\r\n    optional: boolean;\r\n    /** Mensagem apresentada enquanto o campo estiver vazio. */\r\n    placeholder?: string;\r\n    /**\r\n     * @description\r\n     *\r\n     * Placeholder do campo de pesquisa.\r\n     *\r\n     * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).\r\n     *\r\n     * @default `Buscar`\r\n     */\r\n    placeholderSearch?: string;\r\n    /** Nome do componente. */\r\n    name: string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Indica se o campo \"Selecionar todos\" será escondido.\r\n     *\r\n     * @default `false`\r\n     */\r\n    hideSelectAll: boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Pode ser informada uma função que será disparada quando houver alterações no ngModel.\r\n     */\r\n    change: EventEmitter<any>;\r\n    selectedOptions: Array<PoMultiselectOption>;\r\n    visibleOptionsDropdown: Array<PoMultiselectOption>;\r\n    visibleDisclaimers: any[];\r\n    isServerSearching: boolean;\r\n    isFirstFilter: boolean;\r\n    filterSubject: Subject<unknown>;\r\n    service: PoMultiselectFilterService;\r\n    defaultService: PoMultiselectFilterService;\r\n    protected onModelTouched: any;\r\n    protected clickOutListener: () => void;\r\n    protected resizeListener: () => void;\r\n    protected getObjectsByValuesSubscription: Subscription;\r\n    private _filterService?;\r\n    private _debounceTime?;\r\n    private _disabled?;\r\n    private _filterMode?;\r\n    private _hideSearch?;\r\n    private _literals;\r\n    private _options;\r\n    private _required?;\r\n    private _sort?;\r\n    private _autoHeight;\r\n    private _fieldLabel?;\r\n    private _fieldValue?;\r\n    private language;\r\n    private lastLengthModel;\r\n    private onModelChange;\r\n    private validatorChange;\r\n    private autoHeightInitialValue;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Nesta propriedade pode ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de itens no componente.\r\n     *\r\n     *Também existe a possibilidade de informar um serviço implementando a interface `PoMultiselectFilter`.\r\n     *\r\n     *Caso utilizado uma URL, o serviço deve ser retornado no padrão [API PO UI](https://po-ui.io/guides/api) e utilizar as propriedades `p-field-label` e `p-field-value` para a construção da lista de itens.\r\n     *\r\n     *Quando utilizada uma URL de serviço, então será concatenada nesta URL o valor que deseja-se filtrar da seguinte forma:\r\n     *\r\n     *```\r\n     * // caso filtrar por \"Peter\"\r\n     *  https://localhost:8080/api/heroes?filter=Peter\r\n     *```\r\n     *\r\n     *E caso iniciar o campo com valor, os itens serão buscados da seguinte forma:\r\n     *\r\n     *```\r\n     * // caso o valor do campo for [1234, 5678];\r\n     *  https://localhost:8080/api/heroes?value=1234,5678\r\n     *\r\n     * //O *value* é referente ao `fieldValue`.\r\n     *```\r\n     *\r\n     */\r\n    set filterService(value: PoMultiselectFilter | string);\r\n    get filterService(): PoMultiselectFilter | string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define que a altura do componente será auto ajustável, possuindo uma altura minima porém a altura máxima será de acordo\r\n     * com o número de itens selecionados e a extensão dos mesmos, mantendo-os sempre visíveis.\r\n     *\r\n     * > O valor padrão será `true` quando houver serviço (`p-filter-service`).\r\n     *\r\n     * @default `false`\r\n     */\r\n    set autoHeight(value: boolean);\r\n    get autoHeight(): boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.\r\n     *\r\n     * > Será utilizada apenas quando houver serviço (`p-filter-service`) e somente será aceito valor maior do que *zero*.\r\n     *\r\n     * @default `400`\r\n     */\r\n    set debounceTime(value: number);\r\n    get debounceTime(): number;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Objeto com as literais usadas no `po-multiselect`.\r\n     *\r\n     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:\r\n     *\r\n     * ```\r\n     *  const customLiterals: PoMultiselectLiterals = {\r\n     *    noData: 'Nenhum dado encontrado',\r\n     *    placeholderSearch: 'Buscar'\r\n     *  };\r\n     * ```\r\n     *\r\n     * Ou passando apenas as literais que deseja customizar:\r\n     *\r\n     * ```\r\n     *  const customLiterals: PoMultiselectLiterals = {\r\n     *    noData: 'Sem dados'\r\n     *  };\r\n     * ```\r\n     *\r\n     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:\r\n     *\r\n     * ```\r\n     * <po-multiselect\r\n     *   [p-literals]=\"customLiterals\">\r\n     * </po-po-multiselect>\r\n     * ```\r\n     *\r\n     * > O objeto padrão de literais será traduzido de acordo com o idioma do\r\n     * [`PoI18nService`](/documentation/po-i18n) ou do browser.\r\n     */\r\n    set literals(value: PoMultiselectLiterals);\r\n    get literals(): PoMultiselectLiterals;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).\r\n     *\r\n     * @default `false`\r\n     */\r\n    set required(required: boolean);\r\n    get required(): boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Indica que o campo será desabilitado.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set disabled(disabled: boolean);\r\n    get disabled(): boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Esconde o campo de pesquisa existente dentro do dropdown do po-multiselect.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set hideSearch(hideSearch: boolean);\r\n    get hideSearch(): boolean;\r\n    /**\r\n     * @description\r\n     *\r\n     * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoMultiselectOption.\r\n     * Esta lista deve conter os valores e os labels que serão apresentados na tela.\r\n     *\r\n     * > Essa propriedade é imutável, ou seja, sempre que quiser atualizar a lista de opções disponíveis\r\n     * atualize a referência do objeto:\r\n     *\r\n     * ```\r\n     * // atualiza a referência do objeto garantindo a atualização do template\r\n     * this.options = [...this.options, { value: 'x', label: 'Nova opção' }];\r\n     *\r\n     * // evite, pois não atualiza a referência do objeto podendo gerar atrasos na atualização do template\r\n     * this.options.push({ value: 'x', label: 'Nova opção' });\r\n     * ```\r\n     */\r\n    set options(options: Array<PoMultiselectOption>);\r\n    get options(): Array<PoMultiselectOption>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Indica que a lista definida na propriedade p-options será ordenada pelo label antes de ser apresentada no\r\n     * dropdown.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set sort(sort: boolean);\r\n    get sort(): boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.\r\n     * Valores definidos no enum: PoMultiselectFilterMode\r\n     *\r\n     * @default `startsWith`\r\n     */\r\n    set filterMode(filterMode: PoMultiselectFilterMode);\r\n    get filterMode(): PoMultiselectFilterMode;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente\r\n     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.\r\n     *\r\n     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface\r\n     * `PoMultiSelectOption`.\r\n     *\r\n     * @default `label`\r\n     */\r\n    set fieldLabel(value: string);\r\n    get fieldLabel(): string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente\r\n     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.\r\n     *\r\n     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface\r\n     * `PoMultiSelectOption`.\r\n     *\r\n     * @default `value`\r\n     */\r\n    set fieldValue(value: string);\r\n    get fieldValue(): string;\r\n    constructor(languageService: PoLanguageService);\r\n    ngOnInit(): void;\r\n    setService(service: PoMultiselectFilter | string): void;\r\n    validAndSortOptions(): void;\r\n    setUndefinedLabels(options: any): void;\r\n    updateList(options: Array<PoMultiselectOption>): void;\r\n    callOnChange(selectedOptions: Array<PoMultiselectOption>): void;\r\n    eventChange(selectedOptions: any): void;\r\n    getValuesFromOptions(selectedOptions: Array<PoMultiselectOption>): (string | number)[];\r\n    getLabelByValue(value: any): string;\r\n    searchByLabel(search: string, options: Array<PoMultiselectOption>, filterMode: PoMultiselectFilterMode): void;\r\n    compareMethod(search: string, option: PoMultiselectOption, filterMode: PoMultiselectFilterMode): boolean;\r\n    startsWith(search: string, option: PoMultiselectOption): boolean;\r\n    contains(search: string, option: PoMultiselectOption): boolean;\r\n    endsWith(search: string, option: PoMultiselectOption): boolean;\r\n    validate(c: AbstractControl): {\r\n        [key: string]: any;\r\n    };\r\n    updateSelectedOptions(newOptions: Array<any>, options?: PoMultiselectOption[]): void;\r\n    writeValue(values: any): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    registerOnChange(fn: any): void;\r\n    registerOnTouched(fn: any): void;\r\n    registerOnValidatorChange(fn: () => void): void;\r\n    private validateModel;\r\n    abstract applyFilter(value?: string): Observable<Array<PoMultiselectOption>>;\r\n    abstract updateVisibleItems(): void;\r\n}\r\n"]}