{"version":3,"file":"po-rich-text-toolbar.component.d.ts","sources":["po-rich-text-toolbar.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ElementRef, EventEmitter } from '@angular/core';\r\nimport { PoLanguageService } from '../../../../services/po-language/po-language.service';\r\nimport { PoButtonGroupItem } from '../../../po-button-group';\r\nimport { PoRichTextToolbarButtonGroupItem } from '../interfaces/po-rich-text-toolbar-button-group-item.interface';\r\nimport { PoRichTextImageModalComponent } from '../po-rich-text-image-modal/po-rich-text-image-modal.component';\r\nimport { PoRichTextLinkModalComponent } from '../po-rich-text-link-modal/po-rich-text-link-modal.component';\r\nexport declare class PoRichTextToolbarComponent implements AfterViewInit {\r\n    private languageService;\r\n    colorPickerInput: ElementRef;\r\n    toolbarElement: ElementRef;\r\n    richTextImageModal: PoRichTextImageModalComponent;\r\n    richTextLinkModal: PoRichTextLinkModalComponent;\r\n    command: EventEmitter<string | {\r\n        command: string;\r\n        value: string;\r\n    }>;\r\n    modal: EventEmitter<any>;\r\n    linkEditing: EventEmitter<any>;\r\n    readonly literals: any;\r\n    alignButtons: Array<PoRichTextToolbarButtonGroupItem>;\r\n    formatButtons: Array<PoRichTextToolbarButtonGroupItem>;\r\n    listButtons: Array<PoRichTextToolbarButtonGroupItem>;\r\n    linkButtons: Array<PoRichTextToolbarButtonGroupItem>;\r\n    mediaButtons: Array<PoButtonGroupItem>;\r\n    private _readonly;\r\n    private selectedLinkElement;\r\n    set readonly(value: boolean);\r\n    get readonly(): boolean;\r\n    get isInternetExplorer(): boolean;\r\n    constructor(languageService: PoLanguageService);\r\n    ngAfterViewInit(): void;\r\n    changeTextColor(value: any): void;\r\n    emitLinkEditing(isLinkEdit: boolean): void;\r\n    selectedLink(selectedLinkElement: any): void;\r\n    setButtonsStates(obj: {\r\n        commands: Array<string>;\r\n        hexColor: string;\r\n    }): void;\r\n    shortcutTrigger(): void;\r\n    emitCommand(command: string): void;\r\n    private emitAlignCommand;\r\n    private removeButtonFocus;\r\n    private setColorInColorPicker;\r\n    private toggleDisableButtons;\r\n}\r\n"]}