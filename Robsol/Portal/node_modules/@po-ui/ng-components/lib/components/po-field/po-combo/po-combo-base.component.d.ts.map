{"version":3,"file":"po-combo-base.component.d.ts","sources":["po-combo-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\r\nimport { EventEmitter, OnInit, TemplateRef } from '@angular/core';\r\nimport { PoLanguageService } from '../../../services/po-language/po-language.service';\r\nimport { PoComboFilter } from './interfaces/po-combo-filter.interface';\r\nimport { PoComboFilterMode } from './po-combo-filter-mode.enum';\r\nimport { PoComboFilterService } from './po-combo-filter.service';\r\nimport { PoComboGroup } from './interfaces/po-combo-group.interface';\r\nimport { PoComboLiterals } from './interfaces/po-combo-literals.interface';\r\nimport { PoComboOption } from './interfaces/po-combo-option.interface';\r\nimport { PoComboOptionGroup } from './interfaces/po-combo-option-group.interface';\r\nexport declare const poComboLiteralsDefault: {\r\n    en: PoComboLiterals;\r\n    es: PoComboLiterals;\r\n    pt: PoComboLiterals;\r\n    ru: PoComboLiterals;\r\n};\r\n/**\r\n * @description\r\n *\r\n * O `po-combo` exibe uma lista de opções com fácil seleção e filtragem.\r\n *\r\n * Além da exibição padrão, nele é possível listar as opões em agrupamentos.\r\n *\r\n * É possível selecionar e navegar entre as opções da lista tanto através do *mouse* quanto do teclado. No teclado navegue com\r\n * as setas e pressione *Enter* na opção que desejar.\r\n *\r\n * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.\r\n *\r\n * Em `p-filter-mode`, o filtro poderá ser configurado para buscar opões que correspondam ao início, fim ou que contenha o valor digitado.\r\n *\r\n * O `po-combo` guarda o último valor caso o usuário desista de uma busca, deixando o campo ou pressionando *Esc*. Caso seja digitado no\r\n * campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada ao deixar o campo ou pressionando *Enter*.\r\n */\r\nexport declare abstract class PoComboBaseComponent implements ControlValueAccessor, OnInit, Validator {\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Aplica foco no elemento ao ser iniciado.\r\n     *\r\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\r\n     *\r\n     * @default `false`\r\n     */\r\n    autoFocus: boolean;\r\n    /** Label no componente. */\r\n    label?: string;\r\n    /** Texto de apoio para o campo. */\r\n    help?: string;\r\n    /** Nome do componente. */\r\n    name: string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de\r\n     * itens no componente.\r\n     * Caso haja a necessidade de customização, então pode ser informado um serviço implementando a interface PoComboFilter.\r\n     *\r\n     * Caso utilizado uma URL, o serviço deve ser retornado no padrão API TOTVS e utiliza as propriedades\r\n     * `p-field-label` e `p-field-value` para a construção da lista de itens.\r\n     *\r\n     * Quando utilizada uma URL de serviço, então será concatenada nesta URL o valor que deseja-se filtrar da seguinte forma:\r\n     * ```\r\n     * url + ?filter=Peter\r\n     * ```\r\n     *\r\n     * Se for definida a propriedade `p-filter-params`, a mesma também será concatenada. Por exemplo, para o\r\n     * parâmetro `{ age: 23 }` a URL ficaria:\r\n     *\r\n     * ```\r\n     * url + ?page=1&pageSize=20&age=23&filter=Peter\r\n     * ```\r\n     */\r\n    filterService: PoComboFilter | string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define o ícone que será exibido no início do campo.\r\n     *\r\n     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:\r\n     * ```\r\n     * <po-combo p-icon=\"po-icon-user\" p-label=\"PO combo\"></po-combo>\r\n     * ```\r\n     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:\r\n     * ```\r\n     * <po-combo p-icon=\"fa fa-podcast\" p-label=\"PO combo\"></po-combo>\r\n     * ```\r\n     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:\r\n     * ```\r\n     * <po-combo [p-icon]=\"template\" p-label=\"combo template ionic\"></po-combo>\r\n     *\r\n     * <ng-template #template>\r\n     *  <ion-icon style=\"font-size: inherit\" name=\"heart\"></ion-icon>\r\n     * </ng-template>\r\n     * ```\r\n     * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.\r\n     */\r\n    icon?: string | TemplateRef<void>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define se a indicação de campo opcional será exibida.\r\n     *\r\n     * > Não será exibida a indicação se:\r\n     * - O campo conter `p-required`;\r\n     * - Não possuir `p-help` e/ou `p-label`.\r\n     *\r\n     * @default `false`\r\n     */\r\n    optional: boolean;\r\n    /** Se verdadeiro, o campo receberá um botão para ser limpo. */\r\n    clean?: boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Se verdadeiro, o evento `p-change` receberá como argumento o `PoComboOption` referente à opção selecionada.\r\n     *\r\n     * @default `false`\r\n     */\r\n    emitObjectValue?: boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Se verdadeiro, desabilitará a busca de um item via TAB.\r\n     *\r\n     * @default `false`\r\n     */\r\n    disabledTabFilter?: boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Deve ser informada uma função que será disparada quando houver alterações no ngModel. A função receberá como argumento o model modificado.\r\n     *\r\n     * > Pode-se optar pelo recebimento do objeto selecionado ao invés do model através da propriedade `p-emit-object-value`.\r\n     */\r\n    change: EventEmitter<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.\r\n     *\r\n     * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar\r\n     * two-way binding no componente deve se utilizar da seguinte forma:\r\n     *\r\n     * ```\r\n     * <po-combo ... [ngModel]=\"comboModel\" (ngModelChange)=\"comboModel = $event\"> </po-combo>\r\n     * ```\r\n     *\r\n     */\r\n    ngModelChange: EventEmitter<any>;\r\n    cacheOptions: Array<PoComboOption | PoComboGroup>;\r\n    defaultService: PoComboFilterService;\r\n    firstInWriteValue: boolean;\r\n    isFirstFilter: boolean;\r\n    isFiltering: boolean;\r\n    keyupSubscribe: any;\r\n    onModelChange: any;\r\n    previousSearchValue: string;\r\n    selectedOption: PoComboOption | PoComboGroup;\r\n    selectedValue: any;\r\n    selectedView: any;\r\n    service: PoComboFilterService;\r\n    visibleOptions: Array<PoComboOption | PoComboGroup>;\r\n    protected cacheStaticOptions: Array<PoComboOption | PoComboGroup>;\r\n    protected comboOptionsList: Array<PoComboOption | PoComboGroup>;\r\n    protected onModelTouched: any;\r\n    private _changeOnEnter?;\r\n    private _debounceTime?;\r\n    private _disabled?;\r\n    private _disabledInitFilter?;\r\n    private _fieldLabel?;\r\n    private _fieldValue?;\r\n    private _filterMinlength?;\r\n    private _filterMode?;\r\n    private _filterParams?;\r\n    private _literals?;\r\n    private _options;\r\n    private _placeholder;\r\n    private _required?;\r\n    private _sort?;\r\n    private language;\r\n    private fromWriteValue;\r\n    private validatorChange;\r\n    /** Mensagem apresentada enquanto o campo estiver vazio. */\r\n    set placeholder(value: string);\r\n    get placeholder(): string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.\r\n     * Será utilizada apenas quando houver serviço (`p-filter-service`).\r\n     *\r\n     * @default `400`\r\n     */\r\n    set debounceTime(value: number);\r\n    get debounceTime(): number;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.\r\n     *\r\n     * @default `false`\r\n     *\r\n     */\r\n    set disabledInitFilter(value: boolean);\r\n    get disabledInitFilter(): boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente\r\n     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.\r\n     *\r\n     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface\r\n     * PoComboOption.\r\n     *\r\n     * @default `value`\r\n     */\r\n    set fieldValue(value: string);\r\n    get fieldValue(): string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente\r\n     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.\r\n     *\r\n     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface\r\n     * PoComboOption.\r\n     *\r\n     * @default `label`\r\n     */\r\n    set fieldLabel(value: string);\r\n    get fieldLabel(): string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Valor mínimo de caracteres para realizar o filtro no serviço.\r\n     *\r\n     * @default `0`\r\n     */\r\n    set filterMinlength(value: number);\r\n    get filterMinlength(): number;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Indica que o campo será obrigatório.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set required(required: boolean);\r\n    get required(): boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Indica que o evento `p-change` só será disparado ao clicar ou pressionar a tecla \"Enter\" sobre uma opção selecionada.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set changeOnEnter(changeOnEnter: boolean);\r\n    get changeOnEnter(): boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Indica que o campo será desabilitado.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set disabled(disabled: boolean);\r\n    get disabled(): boolean;\r\n    /** Indica que a lista definida na propriedade p-options será ordenada pela descrição. */\r\n    set sort(sort: boolean);\r\n    get sort(): boolean;\r\n    /**\r\n     * Nesta propriedade define a lista de opções do `po-combo`.\r\n     *\r\n     * > A lista pode ser definida em dois formatos, simples ou com agrupamentos.\r\n     * - Utilize `PoComboOption` para lista de opções simples.\r\n     * - Utilize `PoComboOptionGroup` para lista de opções com agrupamento.\r\n     *\r\n     * **Importante:**\r\n     * - A lista deve seguir as definições descritas nas respectivas interfaces, caso contrário não exibirá a(as) opção(ões) fora dos padrões.\r\n     * - O componente interpretará o formato da lista de acordo com a interface utilizada e só exibirá as opções correspondentes à ela.\r\n     * - Um agrupamento só será exibido se houver pelo menos uma opção válida.\r\n     */\r\n    set options(options: Array<PoComboOption | PoComboOptionGroup>);\r\n    get options(): Array<PoComboOption | PoComboOptionGroup>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.\r\n     *\r\n     * > Quando utilizar a propriedade `p-filter-service` esta propriedade será ignorada.\r\n     *\r\n     * @default `startsWith`\r\n     */\r\n    set filterMode(filterMode: PoComboFilterMode);\r\n    get filterMode(): PoComboFilterMode;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Valor que será repassado como parâmetro para a URL ou aos métodos do serviço que implementam a interface *PoComboFilter*.\r\n     *\r\n     * > Caso a lista contenha agrupamentos, os mesmos só serão exibidos se houver no mínimo uma opção que corresponda à pesquisa.\r\n     */\r\n    set filterParams(filterParams: any);\r\n    get filterParams(): any;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Objeto com as literais usadas no `po-combo`.\r\n     *\r\n     * Para utilizar basta passar a literal que deseja customizar:\r\n     *\r\n     * ```\r\n     *  const customLiterals: PoComboLiterals = {\r\n     *    noData: 'Nenhum valor'\r\n     *  };\r\n     * ```\r\n     *\r\n     * E para carregar a literal customizada, basta apenas passar o objeto para o componente.\r\n     *\r\n     * ```\r\n     * <po-combo\r\n     *   [p-literals]=\"customLiterals\">\r\n     * </po-combo>\r\n     * ```\r\n     *\r\n     * > O objeto padrão de literais será traduzido de acordo com o idioma do\r\n     * [`PoI18nService`](/documentation/po-i18n) ou do browser.\r\n     */\r\n    set literals(value: PoComboLiterals);\r\n    get literals(): PoComboLiterals;\r\n    constructor(languageService: PoLanguageService);\r\n    get isOptionGroupList(): boolean;\r\n    ngOnInit(): void;\r\n    onInitService(): void;\r\n    setService(service: PoComboFilter | string): void;\r\n    compareMethod(search: string, option: PoComboOption | PoComboGroup, filterMode: PoComboFilterMode): boolean;\r\n    startsWith(search: string, option: PoComboOption | PoComboGroup): boolean;\r\n    contains(search: string, option: PoComboOption | PoComboGroup): boolean;\r\n    endsWith(search: string, option: PoComboOption | PoComboGroup): boolean;\r\n    getOptionFromValue(value: any, options: any): any;\r\n    getOptionFromLabel(label: any, options: any): any;\r\n    updateSelectedValue(option: PoComboOption | PoComboGroup, isUpdateModel?: boolean): void;\r\n    callModelChange(value: any): any;\r\n    isEqual(value: any, inputValue: any): boolean;\r\n    searchForLabel(search: string, options: Array<PoComboOption | PoComboGroup>, filterMode: PoComboFilterMode): void;\r\n    updateComboList(options?: Array<PoComboOption | PoComboGroup>): void;\r\n    getNextOption(value: any, options: Array<PoComboOption | PoComboGroup>, reverse?: boolean): any;\r\n    getIndexSelectedView(): number;\r\n    compareObjects(obj1: any, obj2: any): boolean;\r\n    verifyValidOption(): void;\r\n    writeValue(value: any): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    registerOnChange(fn: any): void;\r\n    registerOnTouched(fn: any): void;\r\n    registerOnValidatorChange(fn: () => void): void;\r\n    validate(abstractControl: AbstractControl): {\r\n        [key: string]: any;\r\n    };\r\n    clear(value: any): void;\r\n    protected configAfterSetFilterService(service: PoComboFilter | string): void;\r\n    protected unsubscribeKeyupObservable(): void;\r\n    protected validateModel(model: any): void;\r\n    private comboListDefinitions;\r\n    private compareOptions;\r\n    private hasDuplicatedOption;\r\n    private listingComboOptions;\r\n    private sortOptions;\r\n    private validateValue;\r\n    private verifyComboOptions;\r\n    private verifyComboOptionsGroup;\r\n    private verifyIfHasLabel;\r\n    private updateInternalVariables;\r\n    private updateModel;\r\n    private updateSelectedValueWithOldOption;\r\n    abstract setInputValue(value: any): void;\r\n    abstract applyFilter(value: string): void;\r\n    abstract getObjectByValue(value: string): void;\r\n    abstract getInputValue(): string;\r\n    abstract initInputObservable(): void;\r\n}\r\n"]}