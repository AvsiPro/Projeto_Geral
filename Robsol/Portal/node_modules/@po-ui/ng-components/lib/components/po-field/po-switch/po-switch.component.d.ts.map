{"version":3,"file":"po-switch.component.d.ts","sources":["po-switch.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ChangeDetectorRef, ElementRef } from '@angular/core';\r\nimport { PoFieldModel } from '../po-field.model';\r\nimport { PoSwitchLabelPosition } from './po-switch-label-position.enum';\r\n/**\r\n * @docsExtends PoFieldModel\r\n *\r\n * @description\r\n *\r\n * O componente `po-switch` é um [checkbox](/documentation/po-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.\r\n * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.\r\n *\r\n * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.\r\n *\r\n * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,\r\n * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.\r\n *\r\n * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.\r\n *\r\n * @example\r\n *\r\n * <example name=\"po-switch-basic\" title=\"PO Switch Basic\">\r\n *   <file name=\"sample-po-switch-basic/sample-po-switch-basic.component.html\"> </file>\r\n *   <file name=\"sample-po-switch-basic/sample-po-switch-basic.component.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-switch-labs\" title=\"PO Switch Labs\">\r\n *   <file name=\"sample-po-switch-labs/sample-po-switch-labs.component.html\"> </file>\r\n *   <file name=\"sample-po-switch-labs/sample-po-switch-labs.component.ts\"> </file>\r\n *   <file name=\"sample-po-switch-labs/sample-po-switch-labs.component.e2e-spec.ts\"> </file>\r\n *   <file name=\"sample-po-switch-labs/sample-po-switch-labs.component.po.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-switch-order\" title=\"PO Switch - Order Summary\">\r\n *   <file name=\"sample-po-switch-order/sample-po-switch-order.component.html\"> </file>\r\n *   <file name=\"sample-po-switch-order/sample-po-switch-order.component.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-switch-order-reactive-form\" title=\"PO Switch - Order Summary Reactive Form\">\r\n *   <file name=\"sample-po-switch-order-reactive-form/sample-po-switch-order-reactive-form.component.html\"> </file>\r\n *   <file name=\"sample-po-switch-order-reactive-form/sample-po-switch-order-reactive-form.component.ts\"> </file>\r\n * </example>\r\n */\r\nexport declare class PoSwitchComponent extends PoFieldModel<boolean> implements AfterViewInit {\r\n    private changeDetector;\r\n    switchContainer: ElementRef;\r\n    value: boolean;\r\n    private _labelOff;\r\n    private _labelOn;\r\n    private _labelPosition;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Posição de exibição do rótulo.\r\n     *\r\n     * > Por padrão exibe à direita.\r\n     */\r\n    set labelPosition(position: PoSwitchLabelPosition);\r\n    get labelPosition(): PoSwitchLabelPosition;\r\n    /**\r\n     * Texto exibido quando o valor do componente for `false`.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set labelOff(label: string);\r\n    get labelOff(): string;\r\n    /**\r\n     * Texto exibido quando o valor do componente for `true`.\r\n     *\r\n     * @default `true`\r\n     */\r\n    set labelOn(label: string);\r\n    get labelOn(): string;\r\n    constructor(changeDetector: ChangeDetectorRef);\r\n    ngAfterViewInit(): void;\r\n    /**\r\n     * Função que atribui foco ao componente.\r\n     *\r\n     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:\r\n     *\r\n     * ```\r\n     * import { PoSwitchComponent } from '@po-ui/ng-components';\r\n     *\r\n     * ...\r\n     *\r\n     * @ViewChild(PoSwitchComponent, { static: true }) switch: PoSwitchComponent;\r\n     *\r\n     * focusSwitch() {\r\n     *   this.switch.focus();\r\n     * }\r\n     * ```\r\n     */\r\n    focus(): void;\r\n    onBlur(): void;\r\n    getLabelPosition(): \"left\" | \"right\";\r\n    getSwitchPosition(): \"left\" | \"right\";\r\n    onKeyDown(event: any): void;\r\n    changeValue(value: any): void;\r\n    eventClick(): void;\r\n    onWriteValue(value: any): void;\r\n}\r\n"]}