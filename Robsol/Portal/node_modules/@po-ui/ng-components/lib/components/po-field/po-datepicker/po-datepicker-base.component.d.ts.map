{"version":3,"file":"po-datepicker-base.component.d.ts","sources":["po-datepicker-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\r\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\r\nimport { PoMask } from '../po-input/po-mask';\r\nimport { PoDatepickerIsoFormat } from './enums/po-datepicker-iso-format.enum';\r\nimport { PoLanguageService } from '../../../services/po-language/po-language.service';\r\n/**\r\n * @description\r\n *\r\n * O `po-datepicker` é um componente específico para manipulação de datas permitindo a digitação e / ou seleção.\r\n *\r\n * O formato de exibição da data, ou seja, o formato que é apresentado ao usuário é o dd/mm/yyyy,\r\n * mas podem ser definidos outros padrões (veja mais na propriedade `p-format`).\r\n *\r\n * O idioma padrão do calendário será exibido de acordo com o navegador, caso tenha necessidade de alterar\r\n * use a propriedade `p-locale`.\r\n *\r\n * O datepicker aceita três formatos de data: o E8601DZw (yyyy-mm-ddThh:mm:ss+|-hh:mm), o E8601DAw (yyyy-mm-dd) e o\r\n * Date padrão do Javascript.\r\n *\r\n * > Por padrão, o formato de saída do *model* se ajustará conforme o formato de entrada. Se por acaso precisar controlar o valor de saída,\r\n * a propriedade `p-iso-format` provê esse controle independentemente do formato de entrada. Veja abaixo os formatos disponíveis:\r\n *\r\n * - Formato de entrada e saída (E8601DZw) - `'2017-11-28T00:00:00-02:00'`;\r\n *\r\n * - Formato de entrada e saída (E8601DAw) - `'2017-11-28'`;\r\n *\r\n * - Formato de entrada (Date) - `new Date(2017, 10, 28)` e saída (E8601DAw) - `'2017-11-28'`;\r\n *\r\n * **Importante:**\r\n *\r\n * - Para utilizar datas com ano inferior a 100, verificar o comportamento do [`new Date`](https://www.w3schools.com/js/js_dates.asp)\r\n * e utilizar o método [`setFullYear`](https://www.w3schools.com/jsref/jsref_setfullyear.asp).\r\n * - Caso a data esteja inválida, o `model` receberá **'Data inválida'**.\r\n * - Caso o `input` esteja passando um `[(ngModel)]`, mas não tenha um `name`, então irá ocorrer um erro\r\n * do próprio Angular (`[ngModelOptions]=\"{standalone: true}\"`).\r\n *\r\n * Exemplo:\r\n *\r\n * ```\r\n * <po-datepicker\r\n *   [(ngModel)]=\"pessoa.nome\"\r\n *   [ngModelOptions]=\"{standalone: true}\"\r\n * </po-datepicker>\r\n * ```\r\n *\r\n * > Não esqueça de importar o `FormsModule` em seu módulo, tal como para utilizar o `input default`.\r\n */\r\nexport declare abstract class PoDatepickerBaseComponent implements ControlValueAccessor, OnInit, Validator {\r\n    private languageService;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Aplica foco no elemento ao ser iniciado.\r\n     *\r\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\r\n     *\r\n     * @default `false`\r\n     */\r\n    autoFocus: boolean;\r\n    name: string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define se a indicação de campo opcional será exibida.\r\n     *\r\n     * > Não será exibida a indicação se:\r\n     * - O campo conter `p-required`;\r\n     * - Não possuir `p-help` e/ou `p-label`.\r\n     *\r\n     * @default `false`\r\n     */\r\n    optional: boolean;\r\n    /**\r\n     * Mensagem apresentada quando a data for inválida ou fora do período.\r\n     *\r\n     * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.\r\n     */\r\n    errorPattern?: string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Evento disparado ao sair do campo.\r\n     */\r\n    onblur: EventEmitter<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Evento disparado ao alterar valor do campo.\r\n     */\r\n    onchange: EventEmitter<any>;\r\n    protected firstStart: boolean;\r\n    protected hour: string;\r\n    protected isExtendedISO: boolean;\r\n    protected objMask: any;\r\n    protected onChangeModel: any;\r\n    protected validatorChange: any;\r\n    protected onTouchedModel: any;\r\n    private _format?;\r\n    private _isoFormat;\r\n    private _maxDate;\r\n    private _minDate;\r\n    private _noAutocomplete?;\r\n    private _placeholder?;\r\n    private shortLanguage;\r\n    private previousValue;\r\n    private _date;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define a propriedade nativa `autocomplete` do campo como `off`.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set noAutocomplete(value: boolean);\r\n    get noAutocomplete(): boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Mensagem que aparecerá enquanto o campo não estiver preenchido.\r\n     */\r\n    set placeholder(placeholder: string);\r\n    get placeholder(): string;\r\n    /** Desabilita o campo. */\r\n    disabled?: boolean;\r\n    set setDisabled(disabled: string);\r\n    /** Torna o elemento somente leitura. */\r\n    readonly?: boolean;\r\n    set setReadonly(readonly: string);\r\n    /** Faz com que o campo seja obrigatório. */\r\n    required?: boolean;\r\n    set setRequired(required: string);\r\n    /** Habilita ação para limpar o campo. */\r\n    clean?: boolean;\r\n    set setClean(clean: string);\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define uma data mínima para o `po-datepicker`.\r\n     */\r\n    set minDate(value: string | Date);\r\n    get minDate(): string | Date;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define uma data máxima para o `po-datepicker`.\r\n     */\r\n    set maxDate(value: string | Date);\r\n    get maxDate(): string | Date;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Formato de exibição da data.\r\n     *\r\n     * Valores válidos:\r\n     *  - `dd/mm/yyyy`\r\n     *  - `mm/dd/yyyy`\r\n     *  - `yyyy/mm/dd`\r\n     *\r\n     * @default `dd/mm/yyyy`\r\n     */\r\n    set format(value: string);\r\n    get format(): string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Padrão de formatação para saída do *model*, independentemente do formato de entrada.\r\n     *\r\n     * > Veja os valores válidos no *enum* `PoDatepickerIsoFormat`.\r\n     */\r\n    set isoFormat(value: PoDatepickerIsoFormat);\r\n    get isoFormat(): PoDatepickerIsoFormat;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Idioma do Datepicker.\r\n     *\r\n     * > O locale padrão sera recuperado com base no [`PoI18nService`](/documentation/po-i18n) ou *browser*.\r\n     */\r\n    _locale?: string;\r\n    set locale(value: string);\r\n    get locale(): string;\r\n    constructor(languageService: PoLanguageService);\r\n    set date(value: any);\r\n    get date(): any;\r\n    ngOnInit(): void;\r\n    getDateFromString(dateString: string): Date;\r\n    formatToDate(value: Date): string;\r\n    controlModel(date: Date): void;\r\n    callOnChange(value: any, retry?: boolean): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    registerOnChange(func: any): void;\r\n    registerOnTouched(func: any): void;\r\n    registerOnValidatorChange(fn: () => void): void;\r\n    validate(c: AbstractControl): {\r\n        [key: string]: any;\r\n    };\r\n    protected validateModel(model: any): void;\r\n    protected buildMask(): PoMask;\r\n    abstract writeValue(value: any): void;\r\n    abstract refreshValue(value: Date): void;\r\n}\r\n"]}