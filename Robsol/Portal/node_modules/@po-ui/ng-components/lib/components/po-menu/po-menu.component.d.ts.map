{"version":3,"file":"po-menu.component.d.ts","sources":["po-menu.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, OnDestroy, OnInit, Renderer2 } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { PoMenuBaseComponent } from './po-menu-base.component';\r\nimport { PoMenuHeaderTemplateDirective } from './po-menu-header-template/po-menu-header-template.directive';\r\nimport { PoMenuItem } from './po-menu-item.interface';\r\nimport { PoMenuItemsService } from './services/po-menu-items.service';\r\nimport { PoMenuGlobalService } from './services/po-menu-global.service';\r\nimport { PoMenuService } from './services/po-menu.service';\r\nimport { PoLanguageService } from '../../services/po-language/po-language.service';\r\n/**\r\n * @docsExtends PoMenuBaseComponent\r\n *\r\n * @description\r\n *\r\n * Aparece completo em telas com largura maior que 1200px, caso contrário o menu é escondido e chamado por meio de um botão.\r\n *\r\n * O menu também pode ser colapsado. Essa opção é habilitada quando todos os itens de primeiro nível possuírem ícones e textos curtos.\r\n * Se colapsado, somente os itens de primeiro nível serão exibidos e, caso o item selecionado possua sub-níveis,\r\n * então o menu alternará novamente para o estado aberto.\r\n *\r\n * Existe a possibilidade de customizar a logomarca, que é exibida na parte superior do componente.\r\n *\r\n * E para adicionar um conteúdo personalizado entre a logomarca e o campo de filtro,\r\n * basta adicionar este conteúdo com a diretiva [**p-menu-header-template**](/documentation/po-menu-header-template).\r\n *\r\n * Caso utilizar o filtro de menus, é possível realizar buscas em serviço, apenas informando a URL do serviço ou a instância de\r\n * um serviço customizado implementando a interface `PoMenuFilter`.\r\n *\r\n * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de\r\n *  sua aplicação:\r\n *\r\n * ````\r\n * import { RouterModule, Routes } from '@angular/router';\r\n *\r\n * ...\r\n *\r\n * @NgModule({\r\n *   imports: [\r\n *     RouterModule,\r\n *     Routes,\r\n *     ...\r\n *     PoModule,\r\n *     ...\r\n *   ],\r\n *   declarations: [\r\n *     AppComponent\r\n *   ],\r\n *   providers: [],\r\n *   bootstrap: [AppComponent]\r\n * })\r\n * export class AppModule { }\r\n * ```\r\n *\r\n * Além disso é necessário criar um módulo configurando as rotas da aplicação.\r\n *\r\n * ```\r\n * import { NgModule } from '@angular/core';\r\n *\r\n * import { RouterModule, Routes } from '@angular/router';\r\n *\r\n * import { HelloWorldComponent } from './hello-world/hello-world.component';\r\n *\r\n * const routes: Routes = [\r\n *   {path: 'hello-world', component: HelloWorldComponent}\r\n * ];\r\n *\r\n * @NgModule({\r\n *   imports: [RouterModule.forRoot(routes, {useHash: true})],\r\n *   exports: [RouterModule]\r\n * })\r\n * export class AppRoutingModule {}\r\n * ```\r\n *\r\n * @example\r\n *\r\n * <example name=\"po-menu-basic\" title=\"PO Menu Basic\">\r\n *   <file name=\"sample-po-menu-basic/sample-po-menu-basic.component.html\"> </file>\r\n *   <file name=\"sample-po-menu-basic/sample-po-menu-basic.component.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-menu-labs\" title=\"PO Menu Labs\">\r\n *   <file name=\"sample-po-menu-labs/sample-po-menu-labs.component.html\"> </file>\r\n *   <file name=\"sample-po-menu-labs/sample-po-menu-labs.component.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-menu-human-resources\" title=\"PO Menu - Human Resources\">\r\n *   <file name=\"sample-po-menu-human-resources/sample-po-menu-human-resources.component.html\"> </file>\r\n *   <file name=\"sample-po-menu-human-resources/sample-po-menu-human-resources.component.ts\"> </file>\r\n *   <file name=\"sample-po-menu-human-resources/sample-po-menu-human-resources.service.ts\"> </file>\r\n * </example>\r\n */\r\nexport declare class PoMenuComponent extends PoMenuBaseComponent implements AfterViewInit, OnDestroy, OnInit, DoCheck {\r\n    changeDetector: ChangeDetectorRef;\r\n    private element;\r\n    private renderer;\r\n    private router;\r\n    private menuItemsService;\r\n    menuHeaderTemplate: PoMenuHeaderTemplateDirective;\r\n    activeMenuItem: PoMenuItem;\r\n    collapsedMobile: boolean;\r\n    filterLoading: boolean;\r\n    groupedMenuItem: PoMenuItem;\r\n    id: string;\r\n    linkActive: string;\r\n    mobileOpened: boolean;\r\n    noData: boolean;\r\n    timeoutFilter: any;\r\n    private filteringItems;\r\n    private menuInitialized;\r\n    private menuPrevious;\r\n    private resizeListener;\r\n    private itemSubscription;\r\n    private routeSubscription;\r\n    constructor(changeDetector: ChangeDetectorRef, element: ElementRef, renderer: Renderer2, router: Router, menuItemsService: PoMenuItemsService, menuGlobalService: PoMenuGlobalService, menuService: PoMenuService, languageService: PoLanguageService);\r\n    private get isActiveItemMenuSubMenu();\r\n    get enableCollapse(): boolean;\r\n    get enableCollapseButton(): boolean;\r\n    get hasFooter(): boolean;\r\n    get isCollapsed(): boolean;\r\n    ngDoCheck(): void;\r\n    ngOnDestroy(): void;\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    activateMenuByUrl(urlPath: string, menus: Array<PoMenuItem>): any;\r\n    checkActiveMenuByUrl(urlPath: string): void;\r\n    /**\r\n     * <a id=\"colapseMethod\"></a>\r\n     *\r\n     * *Método para colapsar (retrair) o menu.\r\n     */\r\n    collapse(): void;\r\n    debounceFilter(filter: string): void;\r\n    /**\r\n     * <a id=\"expandMethod\"></a>\r\n     *\r\n     * *Método para expandir (aumentar) o menu.\r\n     */\r\n    expand(): void;\r\n    subscribeToMenuItem(): void;\r\n    subscribeToRoute(): void;\r\n    /**\r\n     * <a id=\"toggleMethod\"></a>\r\n     * *Método que colapsa e expande o menu alternadamente.\r\n     *\r\n     * > *Os métodos apenas vão colapsar/expandir o menu se:\r\n     *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.\r\n     */\r\n    toggle(): void;\r\n    toggleMenuMobile(): void;\r\n    protected checkingRouterChildrenFragments(): string;\r\n    protected validateCollapseClass(collapsedMobile?: boolean): void;\r\n    private activateCollapseSubMenuItem;\r\n    private activateMenuItem;\r\n    private areSubMenus;\r\n    private clearGroupMenuIfFirstLevel;\r\n    private clickMenuItem;\r\n    private convertToMenuItemFiltered;\r\n    private createResizeListener;\r\n    private executeMenuAction;\r\n    private filterItems;\r\n    private filterLocalItems;\r\n    private filterProcess;\r\n    private filterOnService;\r\n    private findItems;\r\n    private findParent;\r\n    private findRootParent;\r\n    private getActiveMenuParent;\r\n    private groupMenuItem;\r\n    private isRootMenuEqualGroupedMenu;\r\n    private openParentMenu;\r\n    private showNoData;\r\n    private stringify;\r\n    private toggleGroupedMenuItem;\r\n    private toggleMenuCollapse;\r\n    private toggleResize;\r\n    private validateToggleMenu;\r\n    private updateMenu;\r\n}\r\n"]}