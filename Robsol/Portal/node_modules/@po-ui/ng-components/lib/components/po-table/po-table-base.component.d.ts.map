{"version":3,"file":"po-table-base.component.d.ts","sources":["po-table-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { PoDateService } from '../../services/po-date/po-date.service';\r\nimport { PoLanguageService } from '../../services/po-language/po-language.service';\r\nimport { PoTableAction } from './interfaces/po-table-action.interface';\r\nimport { PoTableColumn } from './interfaces/po-table-column.interface';\r\nimport { PoTableColumnSort } from './interfaces/po-table-column-sort.interface';\r\nimport { PoTableLiterals } from './interfaces/po-table-literals.interface';\r\nimport { PoTableService } from './services/po-table.service';\r\nimport { PoTableResponseApi } from './interfaces/po-table-response-api.interface';\r\nexport declare type QueryParamsType = string | number | boolean;\r\nexport declare const poTableContainer: string[];\r\nexport declare const poTableContainerDefault = \"border\";\r\nexport declare const poTableLiteralsDefault: {\r\n    en: PoTableLiterals;\r\n    es: PoTableLiterals;\r\n    pt: PoTableLiterals;\r\n    ru: PoTableLiterals;\r\n};\r\n/**\r\n * @description\r\n *\r\n * Este componente de tabela é utilizado para exibição de dados com diferentes tipos como por exemplo textos, data, horas e números com\r\n * formato personalizado.\r\n *\r\n * Também é possivel criar tabelas com ordenação de dados, linhas com detalhes, coluna para seleção de linhas, coluna com ações e também\r\n * carregamento por demanda através do botão **Carregar mais resultados**.\r\n *\r\n * > As linhas de detalhes podem também ser customizadas através do [`p-table-row-template`](/documentation/po-table-row-template).\r\n *\r\n * > As colunas podem ser customizadas através dos templates [`p-table-column-template`](/documentation/po-table-column-template)\r\n * e [`p-table-cell-template`](/documentation/po-table-cell-template).\r\n *\r\n * O componente permite gerenciar a exibição das colunas dinamicamente. Esta funcionalidade pode ser acessada através do ícone de engrenagem\r\n * no canto superior direito do cabeçalho da tabela.\r\n *\r\n * Caso a largura de todas as colunas forem definidas e o total ultrapassar o tamanho tabela, será exibido um *scroll* na horizontal para a\r\n * completa visualização dos dados.\r\n */\r\nexport declare abstract class PoTableBaseComponent implements OnChanges, OnDestroy {\r\n    private poDate;\r\n    private poTableService;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.\r\n     * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,\r\n     * o mesmo será exibido através do [`po-tooltip`](/documentation/po-tooltip).\r\n     */\r\n    hideTextOverflow: boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Permite que o gerenciador de colunas, responsável pela definição de quais colunas serão exibidas, seja escondido.\r\n     *\r\n     * @default `false`\r\n     */\r\n    hideColumnsManager?: boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Permite fechar um detalhe ou row template automaticamente, ao abrir outro item.\r\n     *\r\n     * @default `false`\r\n     */\r\n    autoCollapse?: boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Permite que seja adicionado o estado de carregamento no botão \"Carregar mais resultados\".\r\n     *\r\n     * @default `false`\r\n     */\r\n    loadingShowMore?: boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Habilita em todas as colunas a opção de ordenação de dados. Caso a coluna seja do tipo 'data' ou 'dateTime' a\r\n     * mesma deve respeitar os tipos de entrada definidos para que sejam ordenadas.\r\n     *\r\n     * @default `false`\r\n     */\r\n    sort: boolean;\r\n    /**\r\n     * @description\r\n     *\r\n     * Se verdadeiro, torna habilitado o botão \"Carregar mais resultados\".\r\n     *\r\n     * @default `false`\r\n     */\r\n    showMoreDisabled?: boolean;\r\n    /**\r\n     * @description\r\n     *\r\n     * Habilita ou desabilita o estilo listrado da tabela (`striped`).\r\n     * > Recomendado para tabelas com maior número de dados, facilitando a sua visualização na tabela.\r\n     *\r\n     * @default `false`\r\n     */\r\n    striped?: boolean;\r\n    /**\r\n     * @description\r\n     *\r\n     * Esconde o *checkbox* para seleção de todas as linhas.\r\n     *\r\n     * > Sempre receberá *true* caso a seleção de apenas uma linha esteja ativa.\r\n     *\r\n     * @default `false`\r\n     */\r\n    hideSelectAll: boolean;\r\n    /**\r\n     * @description\r\n     *\r\n     * Define que somente uma linha da tabela pode ser selecionada.\r\n     *\r\n     * > Esta definição não se aplica aos itens filhos, os mesmos possuem comportamento independente do item pai.\r\n     */\r\n    singleSelect?: boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define uma quantidade máxima de colunas que serão exibidas na tabela.\r\n     *\r\n     * Quando chegar no valor informado, as colunas que não estiverem selecionadas ficarão\r\n     * desabilitadas e caso houver mais colunas visíveis do que o permitido, as excedentes\r\n     * serão ignoradas por ordem de posição.\r\n     */\r\n    maxColumns?: number;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Evento executado quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.\r\n     */\r\n    allSelected: EventEmitter<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Evento executado quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.\r\n     */\r\n    allUnselected: EventEmitter<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Evento executado ao colapsar uma linha do `po-table`.\r\n     *\r\n     * > Como parâmetro o componente envia o item colapsado.\r\n     */\r\n    collapsed: EventEmitter<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Evento executado ao expandir uma linha do `po-table`.\r\n     *\r\n     * > Como parâmetro o componente envia o item expandido.\r\n     */\r\n    expanded: EventEmitter<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Evento executado ao selecionar uma linha do `po-table`.\r\n     */\r\n    selected: EventEmitter<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Recebe uma ação de clique para o botão \"Carregar mais resultados\", caso nenhuma ação for definida o mesmo\r\n     * não é visível.\r\n     *\r\n     * Recebe um objeto `{ column, type }` onde:\r\n     *\r\n     * - column (`PoTableColumn`): objeto da coluna que está ordenada.\r\n     * - type (`PoTableColumnSortType`): tipo da ordenação.\r\n     */\r\n    showMore: EventEmitter<PoTableColumnSort>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Evento executado ao ordenar colunas da tabela.\r\n     *\r\n     * Recebe um objeto `{ column, type }` onde:\r\n     *\r\n     * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.\r\n     * - type (`PoTableColumnSortType`): tipo da ordenação.\r\n     */\r\n    sortBy: EventEmitter<PoTableColumnSort>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Evento executado ao desmarcar a seleção de uma linha do `po-table`.\r\n     */\r\n    unselected: EventEmitter<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     * Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.\r\n     *\r\n     * O componente envia como parâmetro um array de string com as colunas visíveis atualizadas.\r\n     * Por exemplo: [\"idCard\", \"name\", \"hireStatus\", \"age\"].\r\n     */\r\n    changeVisibleColumns: EventEmitter<string[]>;\r\n    allColumnsWidthPixels: boolean;\r\n    columnMasterDetail: PoTableColumn;\r\n    hasMainColumns: boolean;\r\n    mainColumns: Array<PoTableColumn>;\r\n    selectAll: boolean;\r\n    sortedColumn: {\r\n        property: PoTableColumn;\r\n        ascending: boolean;\r\n    };\r\n    subtitleColumns: Array<PoTableColumn>;\r\n    page: number;\r\n    pageSize: number;\r\n    hasService?: boolean;\r\n    private _actions?;\r\n    private _columns;\r\n    private _container?;\r\n    private _height?;\r\n    private _hideDetail?;\r\n    private _items;\r\n    private _literals;\r\n    private _loading?;\r\n    private _selectable?;\r\n    private language;\r\n    private _serviceApi;\r\n    private poTableServiceSubscription;\r\n    private sortStore;\r\n    private _infiniteScrollDistance?;\r\n    private _infiniteScroll?;\r\n    /**\r\n     * @description\r\n     *\r\n     * Lista de itens da tabela.\r\n     * > Se falso, será inicializado como um *array* vazio.\r\n     */\r\n    set items(items: Array<any>);\r\n    get items(): Array<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.\r\n     * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.\r\n     * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.\r\n     *\r\n     */\r\n    set columns(columns: Array<PoTableColumn>);\r\n    get columns(): Array<PoTableColumn>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Adiciona um contorno arredondado ao `po-table`, as opções são:\r\n     * - `border`: com bordas/linhas.\r\n     * - `shadow`: com sombras.\r\n     *\r\n     * @default `border`\r\n     */\r\n    set container(value: string);\r\n    get container(): string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define a altura da tabela em *pixels* e fixa o cabeçalho.\r\n     */\r\n    set height(height: number);\r\n    get height(): number;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Habilita a visualização da lista de detalhes de cada linha da coluna.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set hideDetail(hideDetail: boolean);\r\n    get hideDetail(): boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Objeto com as literais usadas no `po-table`.\r\n     *\r\n     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:\r\n     *\r\n     * ```\r\n     *  const customLiterals: PoTableLiterals = {\r\n     *    loadMoreData: 'Buscar mais dados',\r\n     *    loadingData: 'Processando',\r\n     *    noColumns: 'Sem colunas',\r\n     *    noData: 'Sem dados',\r\n     *    seeCompleteSubtitle: 'Mostrar legenda completa',\r\n     *    completeSubtitle: 'Todas legendas'\r\n     *  };\r\n     * ```\r\n     *\r\n     * Ou passando apenas as literais que deseja customizar:\r\n     *\r\n     * ```\r\n     *  const customLiterals: PoTableLiterals = {\r\n     *    noData: 'Sem dados'\r\n     *  };\r\n     * ```\r\n     *\r\n     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\r\n     *\r\n     * ```\r\n     * <po-table\r\n     *   [p-literals]=\"customLiterals\">\r\n     * </po-table>\r\n     * ```\r\n     *\r\n     * > O objeto padrão de literais será traduzido de acordo com o idioma do\r\n     * [`PoI18nService`](/documentation/po-i18n) ou do browser.\r\n     */\r\n    set literals(value: PoTableLiterals);\r\n    get literals(): PoTableLiterals;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Bloqueia a interação do usuário com os dados da _table_.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set loading(loading: boolean);\r\n    get loading(): boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define uma lista de ações.\r\n     *\r\n     * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente\r\n     * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.\r\n     *\r\n     * **A coluna de ações não será exibida quando:**\r\n     *  - a lista conter valores inválidos ou indefinidos.\r\n     *  - tenha uma única ação e a mesma não for visível.\r\n     */\r\n    set actions(actions: Array<PoTableAction>);\r\n    get actions(): Array<PoTableAction>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Permite a seleção de linhas na tabela e, caso a propriedade `p-single-select` esteja definida será possível\r\n     * selecionar apenas uma única linha.\r\n     *\r\n     * **Importante:**\r\n     *  - As linhas de detalhe definidas em `PoTableDetail` possuem comportamento independente da linha mestre;\r\n     *  - Cada linha possui por padrão a propriedade dinâmica `$selected`, na qual é possível validar se a linha\r\n     * está selecionada, por exemplo: `item.$selected` ou `item['$selected']`.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set selectable(value: boolean);\r\n    get selectable(): boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Se verdadeiro, ativa a funcionalidade de scroll infinito para a tabela e o botão \"Carregar Mais\" deixará de ser exibido. Ao chegar no fim da tabela\r\n     * executará a função `p-show-more`.\r\n     *\r\n     * **Regras de utilização:**\r\n     *  - O scroll infinito só funciona para tabelas que utilizam a propriedade `p-height` e que possuem o scroll já na carga inicial dos dados.\r\n     *\r\n     * @default `false`\r\n     */\r\n    set infiniteScroll(value: boolean);\r\n    get infiniteScroll(): boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Define o percentual necessário para disparar o evento `p-show-more`, que é responsável por carregar mais dados na tabela. Caso o valor informado seja maior que 100 ou menor\r\n     * que 0, o valor padrão será 100%\r\n     *\r\n     * **Exemplos:**\r\n     *  - p-infinite-scroll-distance = 80: Quando atingir 80%  do scroll da tabela, o `p-show-more` será disparado.\r\n     */\r\n    set infiniteScrollDistance(value: number);\r\n    get infiniteScrollDistance(): number;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * URL da API responsável por retornar os registros.\r\n     *\r\n     * Ao realizar a busca de mais registros via paginação (Carregar mais resultados), será enviado os parâmetros `page` e `pageSize`, conforme abaixo:\r\n     *\r\n     * ```\r\n     * url + ?page=1&pageSize=10\r\n     * ```\r\n     *\r\n     * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:\r\n     * - Coluna decrescente:\r\n     * ```\r\n     *  url + ?page=1&pageSize=10&order=-name\r\n     * ```\r\n     *\r\n     * - Coluna ascendente:\r\n     * ```\r\n     *  url + ?page=1&pageSize=10&order=name\r\n     * ```\r\n     *\r\n     * > Esta URL deve retornar e receber os dados no padrão de [API do PO UI](https://po-ui.io/guides/api).\r\n     */\r\n    set serviceApi(service: string);\r\n    get serviceApi(): string;\r\n    get hasColumns(): boolean;\r\n    get hasItems(): boolean;\r\n    get nameColumnDetail(): string;\r\n    get validColumns(): PoTableColumn[];\r\n    private get sortType();\r\n    constructor(poDate: PoDateService, languageService: PoLanguageService, poTableService: PoTableService);\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    selectAllRows(): void;\r\n    selectRow(row: any): void;\r\n    selectDetailRow(row: any): void;\r\n    getClassColor(row: any, column: any): string;\r\n    toggleDetail(row: any): void;\r\n    toggleRowAction(row: any): void;\r\n    sortColumn(column: PoTableColumn): void;\r\n    onShowMore(): void;\r\n    getFilteredItems(queryParams?: {\r\n        [key: string]: QueryParamsType;\r\n    }): Observable<PoTableResponseApi>;\r\n    setTableResponseProperties(data: PoTableResponseApi): void;\r\n    initializeData(params?: {\r\n        [key: string]: QueryParamsType;\r\n    }): void;\r\n    protected getDefaultColumns(item: any): {\r\n        label: string;\r\n        property: string;\r\n    }[];\r\n    protected setShowDetail(rowIdentifier: any | number, isShowDetail: boolean): void;\r\n    private collapseAllItems;\r\n    private configAfterSelectRow;\r\n    private emitExpandEvents;\r\n    private emitSelectAllEvents;\r\n    private emitSelectEvents;\r\n    private getColumnColor;\r\n    private getColumnMasterDetail;\r\n    private getMainColumns;\r\n    private getSubtitleColumns;\r\n    private isEverySelected;\r\n    private onChangeColumns;\r\n    private setColumnLink;\r\n    private setColumnMasterDetail;\r\n    private setMainColumns;\r\n    private setSubtitleColumns;\r\n    private sortArray;\r\n    private unselectOtherRows;\r\n    private verifyWidthColumnsPixels;\r\n    private setService;\r\n    private getFilteredParams;\r\n    private getOrderParam;\r\n    protected abstract calculateHeightTableContainer(height: any): any;\r\n    protected abstract calculateWidthHeaders(): any;\r\n    protected abstract checkInfiniteScroll(): any;\r\n}\r\n"]}