{"version":3,"file":"po-http-request-interceptor.service.d.ts","sources":["po-http-request-interceptor.service.d.ts"],"names":[],"mappingssourcesContent":["import { HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { PoComponentInjectorService } from '../../services/po-component-injector/po-component-injector.service';\r\nimport { PoHttpRequesControltService } from './po-http-request-control-service';\r\n/**\r\n * @description\r\n *\r\n * O serviço PO Http Request Interceptor realiza a contabilização de requisições pendentes na aplicação.\r\n *\r\n * Existe a possibilidade de não efetuar a contabilização das requisições pendentes, utilizando o parâmetro\r\n * `X-PO-No-Count-Pending-Requests`. Para isso deve ser informado no cabeçalho da requisição com o valor `'true'`,\r\n * por exemplo:\r\n *\r\n * ```\r\n * ...\r\n *  const headers = { 'X-PO-No-Count-Pending-Requests': 'true' };\r\n *\r\n *  this.http.get(`/customers/1`, { headers: headers });\r\n * ...\r\n *\r\n * ```\r\n * Para obter a quantidade de requisições pendentes, deve inscrever-se no método `getCountPendingRequests` do\r\n * serviço `PoHttpRequestInterceptorService`, com isso, ao realizar requisições utilizando `HttpClient`,\r\n * será retornado a quantidade de requisições pendentes.\r\n *\r\n * Também existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisição\r\n * deve-se passar o parâmetro `X-PO-Screen-Lock` no cabeçalho da requisição com valor `'true'`.\r\n *\r\n * por exemplo:\r\n *\r\n * ```\r\n * ...\r\n *  const headers = { 'X-PO-Screen-Lock': 'true' };\r\n *\r\n *  this.http.get(`/customers/1`, { headers: headers });\r\n * ...\r\n *\r\n * ```\r\n * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.\r\n *\r\n * Ao importar o módulo `PoModule` na aplicação, o `po-http-request-interceptor` é automaticamente configurado sem a necessidade\r\n * de qualquer configuração extra.\r\n *\r\n *\r\n * Segue abaixo um exemplo de uso:\r\n *\r\n * ```\r\n * import { HttpClient } from '@angular/common/http';\r\n *\r\n * ...\r\n *\r\n * @Injectable()\r\n * export class CustomersService {\r\n *\r\n *  headers = { 'X-PO-No-Count-Pending-Requests': true, 'X-PO-Screen-Lock': 'true' }\r\n *  pendingRequests: number = 0;\r\n *  subscription: Subscription;\r\n *\r\n *  constructor(\r\n *    private http: HttpClient,\r\n *    private httpRequestInterceptor: PoHttpRequestInterceptorService) { }\r\n *\r\n *  ngOnDestroy(): void {\r\n *    this.subscription.unsubscribe();\r\n *  }\r\n *\r\n *  ngOnInit(): void {\r\n *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {\r\n *      this.pendingRequests = data;\r\n *    });\r\n *  }\r\n *\r\n *  getCustomers() {\r\n *    return this.http.get(`/customers/1`, { headers: headers });\r\n *  }\r\n *\r\n *  ...\r\n *\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * <example name='po-http-request-interceptor-labs' title='PO Http Request Interceptor Labs'>\r\n *  <file name='sample-po-http-request-interceptor-labs.component.ts'> </file>\r\n *  <file name='sample-po-http-request-interceptor-labs.component.html'> </file>\r\n * </example>\r\n */\r\nexport declare class PoHttpRequestInterceptorService implements HttpInterceptor {\r\n    private controlHttpRequest;\r\n    private poComponentInjector;\r\n    private loadingOverlayComponent;\r\n    private pendingRequests;\r\n    private overlayRequests;\r\n    constructor(controlHttpRequest: PoHttpRequesControltService, poComponentInjector: PoComponentInjectorService);\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<import(\"@angular/common/http\").HttpEvent<any>>;\r\n    getCountPendingRequests(): Observable<any>;\r\n    private buildLoading;\r\n    private destroyLoading;\r\n    private requestCloneWithoutHeaderParam;\r\n    private setCountPendingRequests;\r\n    private setCountOverlayRequests;\r\n}\r\n"]}