{"version":3,"file":"po-date.service.d.ts","sources":["po-date.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\r\n * @docsPrivate\r\n *\r\n * @description\r\n *\r\n * Serviço responsável por gerenciar o tratamento dos formatos de data e hora.\r\n */\r\nexport declare class PoDateService {\r\n    private readonly dateRegex;\r\n    private readonly isoRegex;\r\n    /**\r\n     * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.\r\n     *\r\n     * @param dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.\r\n     * @param minDate Definir `true` caso seja `minDate`.\r\n     * @param maxDate Definir `true` caso seja `maxDate`.\r\n     */\r\n    convertIsoToDate(dateString: string, minDate?: boolean, maxDate?: boolean): Date;\r\n    /**\r\n     * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.\r\n     *\r\n     * @param date Data no formato `Date`.\r\n     */\r\n    convertDateToISO(date: Date): string;\r\n    /**\r\n     * Método responsável por adicionar zeros a esquerda do anos em formato string.\r\n     *\r\n     * @param year Ano a ser validado.\r\n     */\r\n    formatYear(year: number): string;\r\n    /**\r\n     * Método responsável por retornar o dia, mês e ano separados em formato de objeto.\r\n     *\r\n     * @param isoDate Ano em formato string.\r\n     */\r\n    getDateFromIso(isoDate: string): {\r\n        year: number;\r\n        month: number;\r\n        day: number;\r\n    };\r\n    /**\r\n     * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`\r\n     * caso `isMindate` seja igual a `false` .\r\n     *\r\n     * @param date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.\r\n     * @param isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.\r\n     */\r\n    getDateForDateRange(date: any, isMinDate: boolean): Date;\r\n    /**\r\n     * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.\r\n     *\r\n     * @param dateA primeira data\r\n     * @param dateB segunda data\r\n     */\r\n    isDateRangeValid(dateA?: string, dateB?: string): boolean;\r\n    /**\r\n     * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.\r\n     *\r\n     * @param stringDate Data.\r\n     */\r\n    isValidIso(stringDate: string): boolean;\r\n    /**\r\n     * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.\r\n     *\r\n     * @param date Data.\r\n     * @param year .\r\n     */\r\n    setYearFrom0To100(date: Date, year: number): void;\r\n    /**\r\n     * Método responsável por retornar o dia , mês e ano de uma data informada.\r\n     *\r\n     * @param date Valor da data.\r\n     */\r\n    splitDate(date: Date): {\r\n        year: number;\r\n        month: number;\r\n        day: number;\r\n    };\r\n    /**\r\n     * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.\r\n     *\r\n     * @param date Data a ser validada.\r\n     * @param minDate Data inicial.\r\n     * @param maxDate Data final.\r\n     */\r\n    validateDateRange(date: Date, minDate: Date, maxDate: Date): boolean;\r\n    /**\r\n     * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou\r\n     * 'Date' padrão do javascript.\r\n     *\r\n     * @param date Data que será validada.\r\n     */\r\n    private validateDate;\r\n}\r\n"]}