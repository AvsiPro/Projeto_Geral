import { Component, Input } from '@angular/core';
import { DatePipe } from '@angular/common';
import { PoInfoOrientation } from '@po-ui/ng-components';
export class PoPageJobSchedulerSummaryComponent {
    constructor(datePipe) {
        this.datePipe = datePipe;
        this.literals = {};
        this.parameters = [];
        this.value = {};
        this.noParameters = true;
        this.executionValue = '';
        this.firstExecutionValue = '';
        this.infoOrientation = PoInfoOrientation.Horizontal;
        this.periodicityValue = '';
        this.frequencyValue = '';
        this.rangeLimitHour = '';
        this.rangeLimitDay = '';
        this.recurrentValue = '';
    }
    ngOnInit() {
        const { periodicity, hour, dayOfMonth, daysOfWeek, recurrent, firstExecution, firstExecutionHour, frequency, rangeLimitHour, rangeLimitDay } = this.value;
        this.periodicityValue = this.getPeriodicityLabel(periodicity);
        if (frequency) {
            this.frequencyValue = this.getFrequencyValue(frequency, periodicity);
        }
        this.executionValue = this.getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth, rangeLimitHour, rangeLimitDay);
        this.firstExecutionValue = this.getFirstExecutionLabel(firstExecution, firstExecutionHour);
        this.recurrentValue = this.getRecurrentValue(recurrent);
    }
    getFrequencyValue(frequency, periodicity) {
        return frequency['value'] && frequency['type'] && periodicity !== 'single'
            ? `${frequency['value']} - ${frequency['type']}`
            : '';
    }
    getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth, rangeLimitHour, rangeLimitDay) {
        switch (periodicity) {
            case 'daily':
                return this.getHourLabel(hour, rangeLimitHour);
            case 'monthly':
                return this.getMonthlyLabelExecution(dayOfMonth, hour, rangeLimitHour, rangeLimitDay);
            case 'weekly':
                return this.getWeeklyLabelExecution(daysOfWeek, hour, rangeLimitHour);
            default:
                return this.literals.notReported;
        }
    }
    getFirstExecutionLabel(firstExecution, firstExecutionHour) {
        if (firstExecution) {
            const date = this.datePipe.transform(firstExecution, 'dd/MM/yyyy', '-0200');
            return `${date} ${this.getHourLabel(firstExecutionHour)}`;
        }
        else {
            return this.literals.notReported;
        }
    }
    getHourLabel(hour, rangeLimitHour) {
        return `${rangeLimitHour ? this.literals.from : this.literals.at} ${hour || '00:00'} ${rangeLimitHour ? this.literals.to + ' ' + rangeLimitHour : ''}`;
    }
    getMonthlyLabelExecution(dayOfMonth, hour, rangeLimitHour, rangeLimitDay) {
        const hourLabel = this.getHourLabel(hour, rangeLimitHour);
        return `${rangeLimitDay ? this.literals.from : ''} ${dayOfMonth} ${rangeLimitDay ? this.literals.to : ''} ${rangeLimitDay ? rangeLimitDay : ''} ${hourLabel}`;
    }
    getPeriodicityLabel(periodicity) {
        switch (periodicity) {
            case 'daily':
                return this.literals.daily;
            case 'monthly':
                return this.literals.monthly;
            case 'weekly':
                return this.literals.weekly;
            default:
                return this.literals.single;
        }
    }
    getRecurrentValue(recurrent) {
        return recurrent ? this.literals.yes : this.literals.no;
    }
    getSorterWeekDays() {
        return {
            'sunday': 0,
            'monday': 1,
            'tuesday': 2,
            'wednesday': 3,
            'thursday': 4,
            'friday': 5,
            'saturday': 6
        };
    }
    getTranslateWeekDay(day) {
        const days = {
            Sunday: this.literals.sunday,
            Monday: this.literals.monday,
            Tuesday: this.literals.tuesday,
            Wednesday: this.literals.wednesday,
            Thursday: this.literals.thursday,
            Friday: this.literals.friday,
            Saturday: this.literals.saturday
        };
        return days[day] || '';
    }
    getWeekDaysLabel(days = []) {
        const weekDaysSorted = this.sortWeekDays(days);
        return weekDaysSorted.map(day => this.getTranslateWeekDay(day)).join(', ');
    }
    getWeeklyLabelExecution(daysOfWeek, hour, rangeLimitHour) {
        if (daysOfWeek && Array.isArray(daysOfWeek)) {
            return `${this.getWeekDaysLabel(daysOfWeek)} ${this.getHourLabel(hour, rangeLimitHour)}`;
        }
        else {
            return this.literals.notReported;
        }
    }
    sortWeekDays(days = []) {
        const sorterWeekDays = this.getSorterWeekDays();
        return days.sort((a, b) => {
            const currDay = a.toLowerCase();
            const nextDay = b.toLowerCase();
            return sorterWeekDays[currDay] > sorterWeekDays[nextDay] ? 1 : -1;
        });
    }
}
PoPageJobSchedulerSummaryComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-job-scheduler-summary',
                template: "<div class=\"po-md-12\">\r\n  <po-info\r\n    *ngIf=\"noParameters\"\r\n    [p-label]=\"literals.process\"\r\n    [p-orientation]=\"infoOrientation\"\r\n    [p-value]=\"value.processID\"\r\n  >\r\n  </po-info>\r\n\r\n  <po-info [p-label]=\"literals.periodicity\" [p-orientation]=\"infoOrientation\" [p-value]=\"periodicityValue\"> </po-info>\r\n\r\n  <po-info\r\n    *ngIf=\"frequencyValue !== ''\"\r\n    [p-label]=\"literals.frequency\"\r\n    [p-orientation]=\"infoOrientation\"\r\n    [p-value]=\"frequencyValue\"\r\n  >\r\n  </po-info>\r\n\r\n  <po-info\r\n    *ngIf=\"value.periodicity !== 'single'\"\r\n    [p-label]=\"literals.execution\"\r\n    [p-orientation]=\"infoOrientation\"\r\n    [p-value]=\"executionValue\"\r\n  >\r\n  </po-info>\r\n\r\n  <po-info [p-label]=\"literals.recurrent\" [p-orientation]=\"infoOrientation\" [p-value]=\"recurrentValue\"> </po-info>\r\n\r\n  <po-info [p-label]=\"literals.firstExecution\" [p-orientation]=\"infoOrientation\" [p-value]=\"firstExecutionValue\">\r\n  </po-info>\r\n</div>\r\n\r\n<po-widget *ngIf=\"parameters && parameters.length\" class=\"po-pt-1 po-pb-1 po-md-12\" [p-title]=\"literals.parameters\">\r\n  <po-dynamic-view [p-fields]=\"parameters\" [p-value]=\"value.executionParameter\"> </po-dynamic-view>\r\n</po-widget>\r\n"
            },] }
];
PoPageJobSchedulerSummaryComponent.ctorParameters = () => [
    { type: DatePipe }
];
PoPageJobSchedulerSummaryComponent.propDecorators = {
    literals: [{ type: Input, args: ['p-literals',] }],
    parameters: [{ type: Input, args: ['p-parameters',] }],
    value: [{ type: Input, args: ['p-value',] }],
    noParameters: [{ type: Input, args: ['p-no-parameters',] }]
};
//# sourceMappingURL=data:application/json;base64,