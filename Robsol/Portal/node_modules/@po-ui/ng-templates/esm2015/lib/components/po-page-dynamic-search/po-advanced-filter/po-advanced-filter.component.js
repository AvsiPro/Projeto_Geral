import { Component, ViewChild } from '@angular/core';
import { Subscription } from 'rxjs';
import { PoDynamicFormComponent, PoLanguageService } from '@po-ui/ng-components';
import { PoAdvancedFilterBaseComponent } from './po-advanced-filter-base.component';
/**
 * @docsPrivate
 *
 * @docsExtends PoAdvancedFilterBaseComponent
 *
 * @examplePrivate
 *
 * <example-private name="po-advanced-filter" title="PO Busca AvanÃ§ada">
 *   <file name="sample-po-advanced-filter.component.html"> </file>
 *   <file name="sample-po-advanced-filter.component.ts"> </file>
 * </example-private>
 */
export class PoAdvancedFilterComponent extends PoAdvancedFilterBaseComponent {
    constructor(languageService) {
        super(languageService);
        this.subscription = new Subscription();
    }
    ngOnInit() {
        this.optionsServiceSubscribe();
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    open() {
        this.filter = this.keepFilters ? this.getInitialValuesFromFilter(this.filters) : {};
        this.poModal.open();
    }
    getOptionsServiceItem(optionServiceObject) {
        const objectItem = this.optionsServiceChosenOptions.map(option => option.value).indexOf(optionServiceObject.value);
        if (objectItem === -1) {
            this.optionsServiceChosenOptions = [...this.optionsServiceChosenOptions, optionServiceObject];
        }
    }
    getInitialValuesFromFilter(filters) {
        return filters.reduce((result, item) => Object.assign(result, { [item.property]: item.initValue }), {});
    }
    // Se inscreve para receber valores referentes a campos do tipo combo.
    optionsServiceSubscribe() {
        this.subscription.add(this.poDynamicForm.getObjectValue().subscribe(optionServiceObject => {
            if (optionServiceObject) {
                this.getOptionsServiceItem(optionServiceObject);
            }
        }));
    }
}
PoAdvancedFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-advanced-filter',
                template: "<po-modal\r\n  p-hide-close\r\n  [p-primary-action]=\"primaryAction\"\r\n  [p-secondary-action]=\"secondaryAction\"\r\n  [p-title]=\"literals.title\"\r\n>\r\n  <po-dynamic-form [p-fields]=\"filters\" [p-value]=\"filter\"> </po-dynamic-form>\r\n</po-modal>\r\n"
            },] }
];
PoAdvancedFilterComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoAdvancedFilterComponent.propDecorators = {
    poDynamicForm: [{ type: ViewChild, args: [PoDynamicFormComponent, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYWR2YW5jZWQtZmlsdGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3RlbXBsYXRlcy9zcmMvbGliL2NvbXBvbmVudHMvcG8tcGFnZS1keW5hbWljLXNlYXJjaC9wby1hZHZhbmNlZC1maWx0ZXIvcG8tYWR2YW5jZWQtZmlsdGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFxQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVwQyxPQUFPLEVBQWlCLHNCQUFzQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFaEcsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFHcEY7Ozs7Ozs7Ozs7O0dBV0c7QUFLSCxNQUFNLE9BQU8seUJBQTBCLFNBQVEsNkJBQTZCO0lBSzFFLFlBQVksZUFBa0M7UUFDNUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBSGpCLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUkxQyxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRXBGLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVPLHFCQUFxQixDQUFDLG1CQUFrQztRQUM5RCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsMkJBQTJCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVuSCxJQUFJLFVBQVUsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNyQixJQUFJLENBQUMsMkJBQTJCLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQywyQkFBMkIsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1NBQy9GO0lBQ0gsQ0FBQztJQUVPLDBCQUEwQixDQUFDLE9BQTBDO1FBQzNFLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUcsQ0FBQztJQUVELHNFQUFzRTtJQUM5RCx1QkFBdUI7UUFDN0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQ25CLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxFQUFFLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLEVBQUU7WUFDbEUsSUFBSSxtQkFBbUIsRUFBRTtnQkFDdkIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLG1CQUFtQixDQUFDLENBQUM7YUFDakQ7UUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7O1lBaERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QiwrUUFBa0Q7YUFDbkQ7OztZQXBCK0MsaUJBQWlCOzs7NEJBc0I5RCxTQUFTLFNBQUMsc0JBQXNCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkRlc3Ryb3ksIE9uSW5pdCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgUG9Db21ib09wdGlvbiwgUG9EeW5hbWljRm9ybUNvbXBvbmVudCwgUG9MYW5ndWFnZVNlcnZpY2UgfSBmcm9tICdAcG8tdWkvbmctY29tcG9uZW50cyc7XHJcblxyXG5pbXBvcnQgeyBQb0FkdmFuY2VkRmlsdGVyQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tYWR2YW5jZWQtZmlsdGVyLWJhc2UuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUG9QYWdlRHluYW1pY1NlYXJjaEZpbHRlcnMgfSBmcm9tICcuLi9wby1wYWdlLWR5bmFtaWMtc2VhcmNoLWZpbHRlcnMuaW50ZXJmYWNlJztcclxuXHJcbi8qKlxyXG4gKiBAZG9jc1ByaXZhdGVcclxuICpcclxuICogQGRvY3NFeHRlbmRzIFBvQWR2YW5jZWRGaWx0ZXJCYXNlQ29tcG9uZW50XHJcbiAqXHJcbiAqIEBleGFtcGxlUHJpdmF0ZVxyXG4gKlxyXG4gKiA8ZXhhbXBsZS1wcml2YXRlIG5hbWU9XCJwby1hZHZhbmNlZC1maWx0ZXJcIiB0aXRsZT1cIlBPIEJ1c2NhIEF2YW7Dp2FkYVwiPlxyXG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tYWR2YW5jZWQtZmlsdGVyLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cclxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWFkdmFuY2VkLWZpbHRlci5jb21wb25lbnQudHNcIj4gPC9maWxlPlxyXG4gKiA8L2V4YW1wbGUtcHJpdmF0ZT5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAncG8tYWR2YW5jZWQtZmlsdGVyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcG8tYWR2YW5jZWQtZmlsdGVyLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUG9BZHZhbmNlZEZpbHRlckNvbXBvbmVudCBleHRlbmRzIFBvQWR2YW5jZWRGaWx0ZXJCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95LCBPbkluaXQge1xyXG4gIEBWaWV3Q2hpbGQoUG9EeW5hbWljRm9ybUNvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSkgcG9EeW5hbWljRm9ybTogUG9EeW5hbWljRm9ybUNvbXBvbmVudDtcclxuXHJcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpIHtcclxuICAgIHN1cGVyKGxhbmd1YWdlU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMub3B0aW9uc1NlcnZpY2VTdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIG9wZW4oKSB7XHJcbiAgICB0aGlzLmZpbHRlciA9IHRoaXMua2VlcEZpbHRlcnMgPyB0aGlzLmdldEluaXRpYWxWYWx1ZXNGcm9tRmlsdGVyKHRoaXMuZmlsdGVycykgOiB7fTtcclxuXHJcbiAgICB0aGlzLnBvTW9kYWwub3BlbigpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRPcHRpb25zU2VydmljZUl0ZW0ob3B0aW9uU2VydmljZU9iamVjdDogUG9Db21ib09wdGlvbikge1xyXG4gICAgY29uc3Qgb2JqZWN0SXRlbSA9IHRoaXMub3B0aW9uc1NlcnZpY2VDaG9zZW5PcHRpb25zLm1hcChvcHRpb24gPT4gb3B0aW9uLnZhbHVlKS5pbmRleE9mKG9wdGlvblNlcnZpY2VPYmplY3QudmFsdWUpO1xyXG5cclxuICAgIGlmIChvYmplY3RJdGVtID09PSAtMSkge1xyXG4gICAgICB0aGlzLm9wdGlvbnNTZXJ2aWNlQ2hvc2VuT3B0aW9ucyA9IFsuLi50aGlzLm9wdGlvbnNTZXJ2aWNlQ2hvc2VuT3B0aW9ucywgb3B0aW9uU2VydmljZU9iamVjdF07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEluaXRpYWxWYWx1ZXNGcm9tRmlsdGVyKGZpbHRlcnM6IEFycmF5PFBvUGFnZUR5bmFtaWNTZWFyY2hGaWx0ZXJzPikge1xyXG4gICAgcmV0dXJuIGZpbHRlcnMucmVkdWNlKChyZXN1bHQsIGl0ZW0pID0+IE9iamVjdC5hc3NpZ24ocmVzdWx0LCB7IFtpdGVtLnByb3BlcnR5XTogaXRlbS5pbml0VmFsdWUgfSksIHt9KTtcclxuICB9XHJcblxyXG4gIC8vIFNlIGluc2NyZXZlIHBhcmEgcmVjZWJlciB2YWxvcmVzIHJlZmVyZW50ZXMgYSBjYW1wb3MgZG8gdGlwbyBjb21iby5cclxuICBwcml2YXRlIG9wdGlvbnNTZXJ2aWNlU3Vic2NyaWJlKCkge1xyXG4gICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKFxyXG4gICAgICB0aGlzLnBvRHluYW1pY0Zvcm0uZ2V0T2JqZWN0VmFsdWUoKS5zdWJzY3JpYmUob3B0aW9uU2VydmljZU9iamVjdCA9PiB7XHJcbiAgICAgICAgaWYgKG9wdGlvblNlcnZpY2VPYmplY3QpIHtcclxuICAgICAgICAgIHRoaXMuZ2V0T3B0aW9uc1NlcnZpY2VJdGVtKG9wdGlvblNlcnZpY2VPYmplY3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==