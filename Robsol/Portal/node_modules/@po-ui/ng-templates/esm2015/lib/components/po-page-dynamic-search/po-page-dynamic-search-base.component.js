import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { InputBoolean, PoLanguageService, poLocaleDefault } from '@po-ui/ng-components';
import { convertToInt } from '../../utils/util';
import { poAdvancedFiltersLiteralsDefault } from './po-advanced-filter/po-advanced-filter-base.component';
export const poPageDynamicSearchLiteralsDefault = {
    en: {
        disclaimerGroupTitle: 'Displaying results filtered by:',
        filterTitle: poAdvancedFiltersLiteralsDefault.en.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.en.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.en.confirmLabel,
        quickSearchLabel: 'Quick search:',
        searchPlaceholder: 'Search'
    },
    es: {
        disclaimerGroupTitle: 'Presentando resultados filtrados por:',
        filterTitle: poAdvancedFiltersLiteralsDefault.es.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.es.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.es.confirmLabel,
        quickSearchLabel: 'Búsqueda rápida:',
        searchPlaceholder: 'Buscar'
    },
    pt: {
        disclaimerGroupTitle: 'Apresentando resultados filtrados por:',
        filterTitle: poAdvancedFiltersLiteralsDefault.pt.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.pt.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.pt.confirmLabel,
        quickSearchLabel: 'Pesquisa rápida:',
        searchPlaceholder: 'Pesquisar'
    },
    ru: {
        disclaimerGroupTitle: 'Отображение результатов, отфильтрованных по:',
        filterTitle: poAdvancedFiltersLiteralsDefault.ru.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.ru.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.ru.confirmLabel,
        quickSearchLabel: 'Быстрый поиск:',
        searchPlaceholder: 'исследование'
    }
};
/**
 * @description
 *
 * Componente com as ações de pesquisa já definidas, bastando que o desenvolvedor implemente apenas a chamada para as APIs
 * e exiba as informações.
 */
export class PoPageDynamicSearchBaseComponent {
    constructor(languageService) {
        /** Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`. */
        this.actions = [];
        /** Objeto com propriedades do breadcrumb. */
        this.breadcrumb = { items: [] };
        /**
         * @optional
         *
         * @description
         *
         * Mantém na busca avançada os valores preenchidos do último filtro realizado pelo usuário.
         *
         * @default `false`
         */
        this.keepFilters = false;
        /**
         * @optional
         *
         * @description
         *
         * Permite a utilização da pesquisa rápida junto com a pesquisa avançada.
         *
         * Desta forma, ao ter uma pesquisa avançada estabelecida e ser
         * preenchido a pesquisa rápida, o filtro será concatenado adicionando a pesquisa
         * rápida também na lista de `disclaimers`.
         *
         * > Os valores que são emitidos no `p-quick-search` e no `p-advanced-search`
         * permanecem separados durante a emissão dos valores alterados. A concatenação
         * é apenas nos `disclaimers`.
         *
         * @default `false`
         */
        this.concatFilters = false;
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao executar a pesquisa avançada, o mesmo irá repassar um objeto com os valores preenchidos no modal de pesquisa.
         *
         * > Campos não preenchidos não irão aparecer no objeto passado por parâmetro.
         */
        this.advancedSearch = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao remover um ou todos os disclaimers pelo usuário.
         */
        this.changeDisclaimers = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao realizar uma busca pelo campo de pesquisa rápida, o mesmo será chamado repassando o valor digitado.
         */
        this.quickSearch = new EventEmitter();
        this._filters = [];
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-dynamic-search`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageDynamicSearchLiterals = {
     *    disclaimerGroupTitle: 'Filtros aplicados:',
     *    filterTitle: 'Filtro avançado',
     *    filterCancelLabel: 'Fechar',
     *    filterConfirmLabel: 'Aplicar',
     *    quickSearchLabel: 'Valor pesquisado:',
     *    searchPlaceholder: 'Pesquise aqui'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageDynamicSearchLiterals = {
     *    filterTitle: 'Filtro avançado'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-dynamic-search
     *   [p-literals]="customLiterals">
     * </po-page-dynamic-search>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poPageDynamicSearchLiteralsDefault[poLocaleDefault]), poPageDynamicSearchLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poPageDynamicSearchLiteralsDefault[this.language];
        }
        this.setAdvancedFilterLiterals(this.literals);
    }
    get literals() {
        return this._literals || poPageDynamicSearchLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista dos campos usados na busca avançada. Caso o mesmo não seja passado a busca avançada não será exibida.
     */
    set filters(filters) {
        this._filters = Array.isArray(filters) ? [...filters] : [];
        if (this.stringify(this._filters) !== this.stringify(this.previousFilters)) {
            this.onChangeFilters(this.filters);
            this.previousFilters = [...this._filters];
        }
    }
    get filters() {
        return this._filters;
    }
    /**
     * @optional
     *
     * @description
     *
     * Largura do campo de busca, utilizando o *Grid System*,
     * e limitado ao máximo de 6 colunas. O tamanho mínimo é controlado
     * conforme resolução de tela para manter a consistência do layout.
     */
    set quickSearchWidth(value) {
        this._quickSearchWidth = convertToInt(value);
    }
    get quickSearchWidth() {
        return this._quickSearchWidth;
    }
    setAdvancedFilterLiterals(literals) {
        this.advancedFilterLiterals = {
            cancelLabel: literals.filterCancelLabel,
            confirmLabel: literals.filterConfirmLabel,
            title: literals.filterTitle
        };
    }
    stringify(columns) {
        // não faz o stringify da propriedade searchService, pois pode conter objeto complexo e disparar um erro.
        return JSON.stringify(columns, (key, value) => {
            if (key !== 'searchService') {
                return value;
            }
        });
    }
}
PoPageDynamicSearchBaseComponent.decorators = [
    { type: Directive }
];
PoPageDynamicSearchBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoPageDynamicSearchBaseComponent.propDecorators = {
    actions: [{ type: Input, args: ['p-actions',] }],
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    keepFilters: [{ type: Input, args: ['p-keep-filters',] }],
    concatFilters: [{ type: Input, args: ['p-concat-filters',] }],
    onLoad: [{ type: Input, args: ['p-load',] }],
    title: [{ type: Input, args: ['p-title',] }],
    advancedSearch: [{ type: Output, args: ['p-advanced-search',] }],
    changeDisclaimers: [{ type: Output, args: ['p-change-disclaimers',] }],
    quickSearch: [{ type: Output, args: ['p-quick-search',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    filters: [{ type: Input, args: ['p-filters',] }],
    quickSearchWidth: [{ type: Input, args: ['p-quick-search-width',] }]
};
__decorate([
    InputBoolean()
], PoPageDynamicSearchBaseComponent.prototype, "keepFilters", void 0);
__decorate([
    InputBoolean()
], PoPageDynamicSearchBaseComponent.prototype, "concatFilters", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1keW5hbWljLXNlYXJjaC1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3RlbXBsYXRlcy9zcmMvbGliL2NvbXBvbmVudHMvcG8tcGFnZS1keW5hbWljLXNlYXJjaC9wby1wYWdlLWR5bmFtaWMtc2VhcmNoLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFDTCxZQUFZLEVBR1osaUJBQWlCLEVBRWpCLGVBQWUsRUFDaEIsTUFBTSxzQkFBc0IsQ0FBQztBQUU5QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHaEQsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFLMUcsTUFBTSxDQUFDLE1BQU0sa0NBQWtDLEdBQUc7SUFDaEQsRUFBRSxFQUErQjtRQUMvQixvQkFBb0IsRUFBRSxpQ0FBaUM7UUFDdkQsV0FBVyxFQUFFLGdDQUFnQyxDQUFDLEVBQUUsQ0FBQyxLQUFLO1FBQ3RELGlCQUFpQixFQUFFLGdDQUFnQyxDQUFDLEVBQUUsQ0FBQyxXQUFXO1FBQ2xFLGtCQUFrQixFQUFFLGdDQUFnQyxDQUFDLEVBQUUsQ0FBQyxZQUFZO1FBQ3BFLGdCQUFnQixFQUFFLGVBQWU7UUFDakMsaUJBQWlCLEVBQUUsUUFBUTtLQUM1QjtJQUNELEVBQUUsRUFBK0I7UUFDL0Isb0JBQW9CLEVBQUUsdUNBQXVDO1FBQzdELFdBQVcsRUFBRSxnQ0FBZ0MsQ0FBQyxFQUFFLENBQUMsS0FBSztRQUN0RCxpQkFBaUIsRUFBRSxnQ0FBZ0MsQ0FBQyxFQUFFLENBQUMsV0FBVztRQUNsRSxrQkFBa0IsRUFBRSxnQ0FBZ0MsQ0FBQyxFQUFFLENBQUMsWUFBWTtRQUNw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MEJBUzdCLE1BQU0sU0FBQyxnQkFBZ0I7dUJBaUR2QixLQUFLLFNBQUMsWUFBWTtzQkF5QmxCLEtBQUssU0FBQyxXQUFXOytCQXVCakIsS0FBSyxTQUFDLHNCQUFzQjs7QUF0TDdCO0lBRkMsWUFBWSxFQUFFO3FFQUVjO0FBcUI3QjtJQUZDLFlBQVksRUFBRTt1RUFFZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHtcclxuICBJbnB1dEJvb2xlYW4sXHJcbiAgUG9CcmVhZGNydW1iLFxyXG4gIFBvRHluYW1pY0Zvcm1GaWVsZCxcclxuICBQb0xhbmd1YWdlU2VydmljZSxcclxuICBQb1BhZ2VBY3Rpb24sXHJcbiAgcG9Mb2NhbGVEZWZhdWx0XHJcbn0gZnJvbSAnQHBvLXVpL25nLWNvbXBvbmVudHMnO1xyXG5cclxuaW1wb3J0IHsgY29udmVydFRvSW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XHJcblxyXG5pbXBvcnQgeyBQb1BhZ2VEeW5hbWljU2VhcmNoTGl0ZXJhbHMgfSBmcm9tICcuL3BvLXBhZ2UtZHluYW1pYy1zZWFyY2gtbGl0ZXJhbHMuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgcG9BZHZhbmNlZEZpbHRlcnNMaXRlcmFsc0RlZmF1bHQgfSBmcm9tICcuL3BvLWFkdmFuY2VkLWZpbHRlci9wby1hZHZhbmNlZC1maWx0ZXItYmFzZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBQb0FkdmFuY2VkRmlsdGVyTGl0ZXJhbHMgfSBmcm9tICcuL3BvLWFkdmFuY2VkLWZpbHRlci9wby1hZHZhbmNlZC1maWx0ZXItbGl0ZXJhbHMuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9QYWdlRHluYW1pY1NlYXJjaE9wdGlvbnMgfSBmcm9tICcuL3BvLXBhZ2UtZHluYW1pYy1zZWFyY2gtb3B0aW9ucy5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb1BhZ2VEeW5hbWljU2VhcmNoRmlsdGVycyB9IGZyb20gJy4vcG8tcGFnZS1keW5hbWljLXNlYXJjaC1maWx0ZXJzLmludGVyZmFjZSc7XHJcblxyXG5leHBvcnQgY29uc3QgcG9QYWdlRHluYW1pY1NlYXJjaExpdGVyYWxzRGVmYXVsdCA9IHtcclxuICBlbjogPFBvUGFnZUR5bmFtaWNTZWFyY2hMaXRlcmFscz57XHJcbiAgICBkaXNjbGFpbWVyR3JvdXBUaXRsZTogJ0Rpc3BsYXlpbmcgcmVzdWx0cyBmaWx0ZXJlZCBieTonLFxyXG4gICAgZmlsdGVyVGl0bGU6IHBvQWR2YW5jZWRGaWx0ZXJzTGl0ZXJhbHNEZWZhdWx0LmVuLnRpdGxlLFxyXG4gICAgZmlsdGVyQ2FuY2VsTGFiZWw6IHBvQWR2YW5jZWRGaWx0ZXJzTGl0ZXJhbHNEZWZhdWx0LmVuLmNhbmNlbExhYmVsLFxyXG4gICAgZmlsdGVyQ29uZmlybUxhYmVsOiBwb0FkdmFuY2VkRmlsdGVyc0xpdGVyYWxzRGVmYXVsdC5lbi5jb25maXJtTGFiZWwsXHJcbiAgICBxdWlja1NlYXJjaExhYmVsOiAnUXVpY2sgc2VhcmNoOicsXHJcbiAgICBzZWFyY2hQbGFjZWhvbGRlcjogJ1NlYXJjaCdcclxuICB9LFxyXG4gIGVzOiA8UG9QYWdlRHluYW1pY1NlYXJjaExpdGVyYWxzPntcclxuICAgIGRpc2NsYWltZXJHcm91cFRpdGxlOiAnUHJlc2VudGFuZG8gcmVzdWx0YWRvcyBmaWx0cmFkb3MgcG9yOicsXHJcbiAgICBmaWx0ZXJUaXRsZTogcG9BZHZhbmNlZEZpbHRlcnNMaXRlcmFsc0RlZmF1bHQuZXMudGl0bGUsXHJcbiAgICBmaWx0ZXJDYW5jZWxMYWJlbDogcG9BZHZhbmNlZEZpbHRlcnNMaXRlcmFsc0RlZmF1bHQuZXMuY2FuY2VsTGFiZWwsXHJcbiAgICBmaWx0ZXJDb25maXJtTGFiZWw6IHBvQWR2YW5jZWRGaWx0ZXJzTGl0ZXJhbHNEZWZhdWx0LmVzLmNvbmZpcm1MYWJlbCxcclxuICAgIHF1aWNrU2VhcmNoTGFiZWw6ICdCw7pzcXVlZGEgcsOhcGlkYTonLFxyXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdCdXNjYXInXHJcbiAgfSxcclxuICBwdDogPFBvUGFnZUR5bmFtaWNTZWFyY2hMaXRlcmFscz57XHJcbiAgICBkaXNjbGFpbWVyR3JvdXBUaXRsZTogJ0FwcmVzZW50YW5kbyByZXN1bHRhZG9zIGZpbHRyYWRvcyBwb3I6JyxcclxuICAgIGZpbHRlclRpdGxlOiBwb0FkdmFuY2VkRmlsdGVyc0xpdGVyYWxzRGVmYXVsdC5wdC50aXRsZSxcclxuICAgIGZpbHRlckNhbmNlbExhYmVsOiBwb0FkdmFuY2VkRmlsdGVyc0xpdGVyYWxzRGVmYXVsdC5wdC5jYW5jZWxMYWJlbCxcclxuICAgIGZpbHRlckNvbmZpcm1MYWJlbDogcG9BZHZhbmNlZEZpbHRlcnNMaXRlcmFsc0RlZmF1bHQucHQuY29uZmlybUxhYmVsLFxyXG4gICAgcXVpY2tTZWFyY2hMYWJlbDogJ1Blc3F1aXNhIHLDoXBpZGE6JyxcclxuICAgIHNlYXJjaFBsYWNlaG9sZGVyOiAnUGVzcXVpc2FyJ1xyXG4gIH0sXHJcbiAgcnU6IDxQb1BhZ2VEeW5hbWljU2VhcmNoTGl0ZXJhbHM+e1xyXG4gICAgZGlzY2xhaW1lckdyb3VwVGl0bGU6ICfQntGC0L7QsdGA0LDQttC10L3QuNC1INGA0LXQt9GD0LvRjNGC0LDRgtC+0LIsINC+0YLRhNC40LvRjNGC0YDQvtCy0LDQvdC90YvRhSDQv9C+OicsXHJcbiAgICBmaWx0ZXJUaXRsZTogcG9BZHZhbmNlZEZpbHRlcnNMaXRlcmFsc0RlZmF1bHQucnUudGl0bGUsXHJcbiAgICBmaWx0ZXJDYW5jZWxMYWJlbDogcG9BZHZhbmNlZEZpbHRlcnNMaXRlcmFsc0RlZmF1bHQucnUuY2FuY2VsTGFiZWwsXHJcbiAgICBmaWx0ZXJDb25maXJtTGFiZWw6IHBvQWR2YW5jZWRGaWx0ZXJzTGl0ZXJhbHNEZWZhdWx0LnJ1LmNvbmZpcm1MYWJlbCxcclxuICAgIHF1aWNrU2VhcmNoTGFiZWw6ICfQkdGL0YHRgtGA0YvQuSDQv9C+0LjRgdC6OicsXHJcbiAgICBzZWFyY2hQbGFjZWhvbGRlcjogJ9C40YHRgdC70LXQtNC+0LLQsNC90LjQtSdcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIENvbXBvbmVudGUgY29tIGFzIGHDp8O1ZXMgZGUgcGVzcXVpc2EgasOhIGRlZmluaWRhcywgYmFzdGFuZG8gcXVlIG8gZGVzZW52b2x2ZWRvciBpbXBsZW1lbnRlIGFwZW5hcyBhIGNoYW1hZGEgcGFyYSBhcyBBUElzXHJcbiAqIGUgZXhpYmEgYXMgaW5mb3JtYcOnw7Vlcy5cclxuICovXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9QYWdlRHluYW1pY1NlYXJjaEJhc2VDb21wb25lbnQge1xyXG4gIC8qKiBOZXN0YSBwcm9wcmllZGFkZSBkZXZlIHNlciBkZWZpbmlkbyB1bSBhcnJheSBkZSBvYmpldG9zIHF1ZSBpbXBsZW1lbnRhbSBhIGludGVyZmFjZSBgUG9QYWdlQWN0aW9uYC4gKi9cclxuICBASW5wdXQoJ3AtYWN0aW9ucycpIGFjdGlvbnM/OiBBcnJheTxQb1BhZ2VBY3Rpb24+ID0gW107XHJcblxyXG4gIC8qKiBPYmpldG8gY29tIHByb3ByaWVkYWRlcyBkbyBicmVhZGNydW1iLiAqL1xyXG4gIEBJbnB1dCgncC1icmVhZGNydW1iJykgYnJlYWRjcnVtYj86IFBvQnJlYWRjcnVtYiA9IHsgaXRlbXM6IFtdIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBNYW50w6ltIG5hIGJ1c2NhIGF2YW7Dp2FkYSBvcyB2YWxvcmVzIHByZWVuY2hpZG9zIGRvIMO6bHRpbW8gZmlsdHJvIHJlYWxpemFkbyBwZWxvIHVzdcOhcmlvLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAqL1xyXG4gIEBJbnB1dEJvb2xlYW4oKVxyXG4gIEBJbnB1dCgncC1rZWVwLWZpbHRlcnMnKVxyXG4gIGtlZXBGaWx0ZXJzOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBQZXJtaXRlIGEgdXRpbGl6YcOnw6NvIGRhIHBlc3F1aXNhIHLDoXBpZGEganVudG8gY29tIGEgcGVzcXVpc2EgYXZhbsOnYWRhLlxyXG4gICAqXHJcbiAgICogRGVzdGEgZm9ybWEsIGFvIHRlciB1bWEgcGVzcXVpc2EgYXZhbsOnYWRhIGVzdGFiZWxlY2lkYSBlIHNlclxyXG4gICAqIHByZWVuY2hpZG8gYSBwZXNxdWlzYSByw6FwaWRhLCBvIGZpbHRybyBzZXLDoSBjb25jYXRlbmFkbyBhZGljaW9uYW5kbyBhIHBlc3F1aXNhXHJcbiAgICogcsOhcGlkYSB0YW1iw6ltIG5hIGxpc3RhIGRlIGBkaXNjbGFpbWVyc2AuXHJcbiAgICpcclxuICAgKiA+IE9zIHZhbG9yZXMgcXVlIHPDo28gZW1pdGlkb3Mgbm8gYHAtcXVpY2stc2VhcmNoYCBlIG5vIGBwLWFkdmFuY2VkLXNlYXJjaGBcclxuICAgKiBwZXJtYW5lY2VtIHNlcGFyYWRvcyBkdXJhbnRlIGEgZW1pc3PDo28gZG9zIHZhbG9yZXMgYWx0ZXJhZG9zLiBBIGNvbmNhdGVuYcOnw6NvXHJcbiAgICogw6kgYXBlbmFzIG5vcyBgZGlzY2xhaW1lcnNgLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAqL1xyXG4gIEBJbnB1dEJvb2xlYW4oKVxyXG4gIEBJbnB1dCgncC1jb25jYXQtZmlsdGVycycpXHJcbiAgY29uY2F0RmlsdGVyczogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAvKipcclxuICAgKiBGdW7Dp8OjbyBvdSBzZXJ2acOnbyBxdWUgc2Vyw6EgZXhlY3V0YWRvIG5hIGluaWNpYWxpemHDp8OjbyBkbyBjb21wb25lbnRlLlxyXG4gICAqXHJcbiAgICogQSBwcm9wcmllZGFkZSBhY2VpdGEgb3Mgc2VndWludGVzIHRpcG9zOlxyXG4gICAqIC0gYHN0cmluZ2A6ICpFbmRwb2ludCogdXNhZG8gcGVsbyBjb21wb25lbnRlIHBhcmEgcmVxdWlzacOnw6NvIHZpYSBgUE9TVGAuXHJcbiAgICogLSBgZnVuY3Rpb25gOiBNw6l0b2RvIHF1ZSBzZXLDoSBleGVjdXRhZG8uXHJcbiAgICpcclxuICAgKiBPIHJldG9ybm8gZGVzdGEgZnVuw6fDo28gZGV2ZSBzZXIgZG8gdGlwbyBgUG9QYWdlRHluYW1pY1NlYXJjaE9wdGlvbnNgLFxyXG4gICAqIG9uZGUgbyB1c3XDoXJpbyBwb2RlcsOhIGN1c3RvbWl6YXIgbm92b3MgZmlsdHJvcywgYnJlYWRjcnVtYiwgdGl0bGUgZSBhY3Rpb25zXHJcbiAgICpcclxuICAgKiBQb3IgZXhlbXBsbzpcclxuICAgKlxyXG4gICAqIGBgYFxyXG4gICAqIGdldFBhZ2VPcHRpb25zKCk6IFBvUGFnZUR5bmFtaWNTZWFyY2hPcHRpb25zIHtcclxuICAgKiByZXR1cm4ge1xyXG4gICAqICAgYWN0aW9uczogW1xyXG4gICAqICAgICB7IGxhYmVsOiAnRmluZCBvbiBHb29nbGUnIH0sXHJcbiAgICogICBdLFxyXG4gICAqICAgZmlsdGVyczogW1xyXG4gICAqICAgICB7IHByb3BlcnR5OiAnaWRDYXJkJywgZ3JpZENvbHVtbnM6IDYgfVxyXG4gICAqICAgXVxyXG4gICAqIH07XHJcbiAgICogfVxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogUGFyYSByZWZlcmVuY2lhciBhIHN1YSBmdW7Dp8OjbyB1dGlsaXplIGEgcHJvcHJpZWRhZGUgYGJpbmRgLCBwb3IgZXhlbXBsbzpcclxuICAgKiBgYGBcclxuICAgKiAgW3AtbG9hZF09XCJvbkxvYWRPcHRpb25zLmJpbmQodGhpcylcIlxyXG4gICAqIGBgYFxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1sb2FkJykgb25Mb2FkOiBzdHJpbmcgfCAoKCkgPT4gUG9QYWdlRHluYW1pY1NlYXJjaE9wdGlvbnMpO1xyXG5cclxuICAvKiogVMOtdHVsbyBkYSBww6FnaW5hLiAqL1xyXG4gIEBJbnB1dCgncC10aXRsZScpIHRpdGxlOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBFdmVudG8gZGlzcGFyYWRvIGFvIGV4ZWN1dGFyIGEgcGVzcXVpc2EgYXZhbsOnYWRhLCBvIG1lc21vIGlyw6EgcmVwYXNzYXIgdW0gb2JqZXRvIGNvbSBvcyB2YWxvcmVzIHByZWVuY2hpZG9zIG5vIG1vZGFsIGRlIHBlc3F1aXNhLlxyXG4gICAqXHJcbiAgICogPiBDYW1wb3MgbsOjbyBwcmVlbmNoaWRvcyBuw6NvIGlyw6NvIGFwYXJlY2VyIG5vIG9iamV0byBwYXNzYWRvIHBvciBwYXLDom1ldHJvLlxyXG4gICAqL1xyXG4gIEBPdXRwdXQoJ3AtYWR2YW5jZWQtc2VhcmNoJykgYWR2YW5jZWRTZWFyY2g6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAvKipcclxuICAgKiBAb3B0aW9uYWxcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogRXZlbnRvIGRpc3BhcmFkbyBhbyByZW1vdmVyIHVtIG91IHRvZG9zIG9zIGRpc2NsYWltZXJzIHBlbG8gdXN1w6FyaW8uXHJcbiAgICovXHJcbiAgQE91dHB1dCgncC1jaGFuZ2UtZGlzY2xhaW1lcnMnKSBjaGFuZ2VEaXNjbGFpbWVyczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBFdmVudG8gZGlzcGFyYWRvIGFvIHJlYWxpemFyIHVtYSBidXNjYSBwZWxvIGNhbXBvIGRlIHBlc3F1aXNhIHLDoXBpZGEsIG8gbWVzbW8gc2Vyw6EgY2hhbWFkbyByZXBhc3NhbmRvIG8gdmFsb3IgZGlnaXRhZG8uXHJcbiAgICovXHJcbiAgQE91dHB1dCgncC1xdWljay1zZWFyY2gnKSBxdWlja1NlYXJjaDogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIGFkdmFuY2VkRmlsdGVyTGl0ZXJhbHM6IFBvQWR2YW5jZWRGaWx0ZXJMaXRlcmFscztcclxuXHJcbiAgcHJpdmF0ZSBfZmlsdGVyczogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPiA9IFtdO1xyXG4gIHByaXZhdGUgX2xpdGVyYWxzOiBQb1BhZ2VEeW5hbWljU2VhcmNoTGl0ZXJhbHM7XHJcbiAgcHJpdmF0ZSBfcXVpY2tTZWFyY2hXaWR0aDogbnVtYmVyO1xyXG5cclxuICBwcml2YXRlIHByZXZpb3VzRmlsdGVyczogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPjtcclxuICBwcml2YXRlIGxhbmd1YWdlOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBPYmpldG8gY29tIGFzIGxpdGVyYWlzIHVzYWRhcyBubyBgcG8tcGFnZS1keW5hbWljLXNlYXJjaGAuXHJcbiAgICpcclxuICAgKiBFeGlzdGVtIGR1YXMgbWFuZWlyYXMgZGUgY3VzdG9taXphciBvIGNvbXBvbmVudGUsIHBhc3NhbmRvIHVtIG9iamV0byBjb20gdG9kYXMgYXMgbGl0ZXJhaXMgZGlzcG9uw612ZWlzOlxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogIGNvbnN0IGN1c3RvbUxpdGVyYWxzOiBQb1BhZ2VEeW5hbWljU2VhcmNoTGl0ZXJhbHMgPSB7XHJcbiAgICogICAgZGlzY2xhaW1lckdyb3VwVGl0bGU6ICdGaWx0cm9zIGFwbGljYWRvczonLFxyXG4gICAqICAgIGZpbHRlclRpdGxlOiAnRmlsdHJvIGF2YW7Dp2FkbycsXHJcbiAgICogICAgZmlsdGVyQ2FuY2VsTGFiZWw6ICdGZWNoYXInLFxyXG4gICAqICAgIGZpbHRlckNvbmZpcm1MYWJlbDogJ0FwbGljYXInLFxyXG4gICAqICAgIHF1aWNrU2VhcmNoTGFiZWw6ICdWYWxvciBwZXNxdWlzYWRvOicsXHJcbiAgICogICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdQZXNxdWlzZSBhcXVpJ1xyXG4gICAqICB9O1xyXG4gICAqIGBgYFxyXG4gICAqXHJcbiAgICogT3UgcGFzc2FuZG8gYXBlbmFzIGFzIGxpdGVyYWlzIHF1ZSBkZXNlamEgY3VzdG9taXphcjpcclxuICAgKlxyXG4gICAqIGBgYFxyXG4gICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogUG9QYWdlRHluYW1pY1NlYXJjaExpdGVyYWxzID0ge1xyXG4gICAqICAgIGZpbHRlclRpdGxlOiAnRmlsdHJvIGF2YW7Dp2FkbydcclxuICAgKiAgfTtcclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqIEUgcGFyYSBjYXJyZWdhciBhcyBsaXRlcmFpcyBjdXN0b21pemFkYXMsIGJhc3RhIGFwZW5hcyBwYXNzYXIgbyBvYmpldG8gcGFyYSBvIGNvbXBvbmVudGUuXHJcbiAgICpcclxuICAgKiBgYGBcclxuICAgKiA8cG8tcGFnZS1keW5hbWljLXNlYXJjaFxyXG4gICAqICAgW3AtbGl0ZXJhbHNdPVwiY3VzdG9tTGl0ZXJhbHNcIj5cclxuICAgKiA8L3BvLXBhZ2UtZHluYW1pYy1zZWFyY2g+XHJcbiAgICogYGBgXHJcbiAgICpcclxuICAgKiA+IE8gdmFsb3IgcGFkcsOjbyBzZXLDoSB0cmFkdXppZG8gZGUgYWNvcmRvIGNvbSBvIGlkaW9tYSBjb25maWd1cmFkbyBubyBbYFBvSTE4blNlcnZpY2VgXSgvZG9jdW1lbnRhdGlvbi9wby1pMThuKSBvdSAqYnJvd3NlciouXHJcbiAgICovXHJcbiAgQElucHV0KCdwLWxpdGVyYWxzJykgc2V0IGxpdGVyYWxzKHZhbHVlOiBQb1BhZ2VEeW5hbWljU2VhcmNoTGl0ZXJhbHMpIHtcclxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCAmJiAhKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcbiAgICAgIHRoaXMuX2xpdGVyYWxzID0ge1xyXG4gICAgICAgIC4uLnBvUGFnZUR5bmFtaWNTZWFyY2hMaXRlcmFsc0RlZmF1bHRbcG9Mb2NhbGVEZWZhdWx0XSxcclxuICAgICAgICAuLi5wb1BhZ2VEeW5hbWljU2VhcmNoTGl0ZXJhbHNEZWZhdWx0W3RoaXMubGFuZ3VhZ2VdLFxyXG4gICAgICAgIC4uLnZhbHVlXHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9saXRlcmFscyA9IHBvUGFnZUR5bmFtaWNTZWFyY2hMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV07XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zZXRBZHZhbmNlZEZpbHRlckxpdGVyYWxzKHRoaXMubGl0ZXJhbHMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGxpdGVyYWxzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2xpdGVyYWxzIHx8IHBvUGFnZUR5bmFtaWNTZWFyY2hMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3B0aW9uYWxcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogTGlzdGEgZG9zIGNhbXBvcyB1c2Fkb3MgbmEgYnVzY2EgYXZhbsOnYWRhLiBDYXNvIG8gbWVzbW8gbsOjbyBzZWphIHBhc3NhZG8gYSBidXNjYSBhdmFuw6dhZGEgbsOjbyBzZXLDoSBleGliaWRhLlxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1maWx0ZXJzJykgc2V0IGZpbHRlcnMoZmlsdGVyczogQXJyYXk8UG9QYWdlRHluYW1pY1NlYXJjaEZpbHRlcnM+KSB7XHJcbiAgICB0aGlzLl9maWx0ZXJzID0gQXJyYXkuaXNBcnJheShmaWx0ZXJzKSA/IFsuLi5maWx0ZXJzXSA6IFtdO1xyXG5cclxuICAgIGlmICh0aGlzLnN0cmluZ2lmeSh0aGlzLl9maWx0ZXJzKSAhPT0gdGhpcy5zdHJpbmdpZnkodGhpcy5wcmV2aW91c0ZpbHRlcnMpKSB7XHJcbiAgICAgIHRoaXMub25DaGFuZ2VGaWx0ZXJzKHRoaXMuZmlsdGVycyk7XHJcblxyXG4gICAgICB0aGlzLnByZXZpb3VzRmlsdGVycyA9IFsuLi50aGlzLl9maWx0ZXJzXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBmaWx0ZXJzKCk6IEFycmF5PFBvUGFnZUR5bmFtaWNTZWFyY2hGaWx0ZXJzPiB7XHJcbiAgICByZXR1cm4gdGhpcy5fZmlsdGVycztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBMYXJndXJhIGRvIGNhbXBvIGRlIGJ1c2NhLCB1dGlsaXphbmRvIG8gKkdyaWQgU3lzdGVtKixcclxuICAgKiBlIGxpbWl0YWRvIGFvIG3DoXhpbW8gZGUgNiBjb2x1bmFzLiBPIHRhbWFuaG8gbcOtbmltbyDDqSBjb250cm9sYWRvXHJcbiAgICogY29uZm9ybWUgcmVzb2x1w6fDo28gZGUgdGVsYSBwYXJhIG1hbnRlciBhIGNvbnNpc3TDqm5jaWEgZG8gbGF5b3V0LlxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1xdWljay1zZWFyY2gtd2lkdGgnKSBzZXQgcXVpY2tTZWFyY2hXaWR0aCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLl9xdWlja1NlYXJjaFdpZHRoID0gY29udmVydFRvSW50KHZhbHVlKTtcclxuICB9XHJcblxyXG4gIGdldCBxdWlja1NlYXJjaFdpZHRoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fcXVpY2tTZWFyY2hXaWR0aDtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpIHtcclxuICAgIHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZVNlcnZpY2UuZ2V0U2hvcnRMYW5ndWFnZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHNldEFkdmFuY2VkRmlsdGVyTGl0ZXJhbHMobGl0ZXJhbHM6IFBvUGFnZUR5bmFtaWNTZWFyY2hMaXRlcmFscykge1xyXG4gICAgdGhpcy5hZHZhbmNlZEZpbHRlckxpdGVyYWxzID0ge1xyXG4gICAgICBjYW5jZWxMYWJlbDogbGl0ZXJhbHMuZmlsdGVyQ2FuY2VsTGFiZWwsXHJcbiAgICAgIGNvbmZpcm1MYWJlbDogbGl0ZXJhbHMuZmlsdGVyQ29uZmlybUxhYmVsLFxyXG4gICAgICB0aXRsZTogbGl0ZXJhbHMuZmlsdGVyVGl0bGVcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0cmluZ2lmeShjb2x1bW5zOiBBcnJheTxQb1BhZ2VEeW5hbWljU2VhcmNoRmlsdGVycz4pIHtcclxuICAgIC8vIG7Do28gZmF6IG8gc3RyaW5naWZ5IGRhIHByb3ByaWVkYWRlIHNlYXJjaFNlcnZpY2UsIHBvaXMgcG9kZSBjb250ZXIgb2JqZXRvIGNvbXBsZXhvIGUgZGlzcGFyYXIgdW0gZXJyby5cclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShjb2x1bW5zLCAoa2V5LCB2YWx1ZSkgPT4ge1xyXG4gICAgICBpZiAoa2V5ICE9PSAnc2VhcmNoU2VydmljZScpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWJzdHJhY3Qgb25DaGFuZ2VGaWx0ZXJzKGZpbHRlcnM6IEFycmF5PFBvUGFnZUR5bmFtaWNTZWFyY2hGaWx0ZXJzPik7XHJcbn1cclxuIl19