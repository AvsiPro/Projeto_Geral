import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { PoLanguageService, poLocaleDefault } from '@po-ui/ng-components';
import { poModalPasswordRecoveryLiterals } from './literals/i18n/po-modal-password-recovery-literals';
import { PoModalPasswordRecoveryType } from './enums/po-modal-password-recovery-type.enum';
const PoModalPasswordRecoveryDefaultMaxLength = 15;
const PoModalPasswordRecoveryDefaultMinLength = 15;
const PoModalPasswordRecoveryDefaultPhone = '(99) 99999-9999';
const PoModalPasswordRecoveryTypeDefault = PoModalPasswordRecoveryType.Email;
/**
 * @description
 *
 * O componente `po-modal-password-recovery` é utilizado como template para solicitação de troca de senha.
 *
 * É composto por uma modal que possui três telas, cada uma com as seguintes características:
 *
 * - A primeira possui campos para preenchimento de email ou número de telefone;
 * - Tela com campo para preenchimento de código SMS enviado para o número de telefone enviado;
 * - A terceira se trata de uma confirmação de envio de link para a caixa de email do usuário.
 *
 *
 * A propriedade `p-url-recovery` automatiza a rotina do componente e simplifica o processo
 * para recuperação de senha, bastando definir uma url para requisição dos recursos.
 * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
 * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
 *
 *
 * Para a modal de digitação de código SMS, é possível definir uma mensagem de erro
 * customizada com a propriedade `p-code-error` e há um link para
 * reenvio de código por SMS. Ao reenviar, o evento `p-code-submit` envia um objeto com o telefone do usuário e a quantidade
 * de vezes em que o usuário fez a solicitação de reenvio.
 *
 * > É indicada a utilização da tela de digitação para envio de código SMS apenas
 * se a opção por envio SMS for disponibilizada para o usuário.
 *
 *
 * A modal de confirmação contém uma ação de reenvio e o evento `p-submit`
 * é quem passa o objeto contendo o email em conjunto com a quantidade de tentativas de reenvio.
 *
 * > A tela de confirmação é indicada para quando o usuário solicitar a troca através do email.
 *
 * > Os textos das modals são pré-definidos, imutáveis e são traduzidos de acordo com o idioma do *browser* (pt, en e es)
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/@po-ui/style/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 */
export class PoModalPasswordRecoveryBaseComponent {
    constructor(languageService) {
        /**
         * @optional
         *
         * @description
         *
         * Ação contendo como parâmetro o código enviado por SMS e digitado pelo usuário.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-recovery`.
         */
        this.codeSubmit = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação contendo o email como parâmetro e que é executada quando o usuário clica sobres os botões de 'enviar' e 'reenviar' e-mail.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-recovery`.
         */
        this.submit = new EventEmitter();
        this.maxLength = PoModalPasswordRecoveryDefaultMaxLength;
        this.minLength = PoModalPasswordRecoveryDefaultMinLength;
        this.literals = poModalPasswordRecoveryLiterals[poLocaleDefault];
        this._phoneMask = PoModalPasswordRecoveryDefaultPhone;
        this._type = PoModalPasswordRecoveryTypeDefault;
        this.literals = Object.assign(Object.assign({}, this.literals), poModalPasswordRecoveryLiterals[languageService.getShortLanguage()]);
    }
    /**
     * @optional
     *
     * @description
     *
     * Definição do e-mail que é exibido na mensagem para contato de suporte.
     */
    set contactEmail(value) {
        this._contactEmail = value;
        this.smsCodeErrorMessage = this.concatenateSMSErrorMessage(value);
    }
    get contactEmail() {
        return this._contactEmail;
    }
    /**
     * @optional
     *
     * @description
     *
     * Definição da mascara do campo de telefone.
     *
     * @default `(99) 99999-9999`
     */
    set phoneMask(value) {
        this._phoneMask = value || PoModalPasswordRecoveryDefaultPhone;
        this.minLength = this.maxLength = this._phoneMask.length;
    }
    get phoneMask() {
        return this._phoneMask;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tipo de recuperação de senha que será exibido.
     *
     * @default `PoModalPasswordRecoveryType.Email`
     *
     */
    set type(value) {
        this._type = Object.values(PoModalPasswordRecoveryType).includes(value)
            ? value
            : PoModalPasswordRecoveryTypeDefault;
    }
    get type() {
        return this._type;
    }
    concatenateSMSErrorMessage(value) {
        const literalCodeErrorMessage = this.literals.smsCodeErrorMessagePhrase;
        return value && value !== ''
            ? `${literalCodeErrorMessage} ${this.literals.prepositionIn} ${value}.`
            : literalCodeErrorMessage;
    }
}
PoModalPasswordRecoveryBaseComponent.decorators = [
    { type: Directive }
];
PoModalPasswordRecoveryBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoModalPasswordRecoveryBaseComponent.propDecorators = {
    codeError: [{ type: Input, args: ['p-code-error',] }],
    urlRecovery: [{ type: Input, args: ['p-url-recovery',] }],
    codeSubmit: [{ type: Output, args: ['p-code-submit',] }],
    submit: [{ type: Output, args: ['p-submit',] }],
    contactEmail: [{ type: Input, args: ['p-contact-email',] }],
    phoneMask: [{ type: Input, args: ['p-phone-mask',] }],
    type: [{ type: Input, args: ['p-type',] }]
};
//# sourceMappingURL=data:application/json;base64,