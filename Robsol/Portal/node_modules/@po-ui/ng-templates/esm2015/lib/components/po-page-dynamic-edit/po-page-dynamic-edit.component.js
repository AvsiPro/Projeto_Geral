import { Component, Input, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { concat, of, EMPTY, throwError } from 'rxjs';
import { tap, catchError, map, switchMap } from 'rxjs/operators';
import { PoDialogService, PoLanguageService, PoNotificationService, poLocaleDefault } from '@po-ui/ng-components';
import { convertToBoolean, mapObjectByProperties, valuesFromObject, removeKeysProperties } from './../../utils/util';
import { PoPageDynamicService } from '../../services/po-page-dynamic/po-page-dynamic.service';
import { PoPageCustomizationService } from '../../services/po-page-customization/po-page-customization.service';
import { PoPageDynamicEditActionsService } from './po-page-dynamic-edit-actions.service';
export const poPageDynamicEditLiteralsDefault = {
    en: {
        cancelConfirmMessage: 'Are you sure you want to cancel this operation?',
        detailActionNew: 'New',
        pageActionCancel: 'Cancel',
        pageActionSave: 'Save',
        pageActionSaveNew: 'Save and new',
        registerNotFound: 'Register not found.',
        saveNotificationSuccessSave: 'Resource successfully saved.',
        saveNotificationSuccessUpdate: 'Resource successfully updated.',
        saveNotificationWarning: 'Form must be filled out correctly.'
    },
    es: {
        cancelConfirmMessage: 'Está seguro de que desea cancelar esta operación?',
        detailActionNew: 'Nuevo',
        pageActionCancel: 'Cancelar',
        pageActionSave: 'Guardar',
        pageActionSaveNew: 'Guardar y nuevo',
        registerNotFound: 'Registro no encontrado.',
        saveNotificationSuccessSave: 'Recurso salvo con éxito.',
        saveNotificationSuccessUpdate: 'Recurso actualizado con éxito.',
        saveNotificationWarning: 'El formulario debe llenarse correctamente.'
    },
    pt: {
        cancelConfirmMessage: 'Tem certeza que deseja cancelar esta operação?',
        detailActionNew: 'Novo',
        pageActionCancel: 'Cancelar',
        pageActionSave: 'Salvar',
        pageActionSaveNew: 'Salvar e novo',
        registerNotFound: 'Registro não encontrado.',
        saveNotificationSuccessSave: 'Recurso salvo com sucesso.',
        saveNotificationSuccessUpdate: 'Recurso atualizado com sucesso.',
        saveNotificationWarning: 'Formulário precisa ser preenchido corretamente.'
    },
    ru: {
        cancelConfirmMessage: 'Вы уверены, что хотите отменить эту операцию?',
        detailActionNew: 'Новый',
        pageActionCancel: 'Отменить',
        pageActionSave: 'Сохранить',
        pageActionSaveNew: 'Сохранить и создать',
        registerNotFound: 'Запись не найдена.',
        saveNotificationSuccessSave: 'Ресурс успешно сохранен.',
        saveNotificationSuccessUpdate: 'Ресурс успешно обновлен.',
        saveNotificationWarning: 'Форма должна быть заполнена правильно.'
    }
};
/**
 * @description
 *
 * O `po-page-dynamic-edit` é uma página que pode servir para editar ou criar novos registros,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * ### Utilização via rota
 *
 * Ao utilizar as rotas para carregar o template, o `page-dynamic-edit` disponibiliza propriedades para
 * poder especificar o endpoint dos dados e dos metadados. Exemplo de utilização:
 *
 * O componente primeiro irá carregar o metadado da rota definida na propriedade serviceMetadataApi
 * e depois irá buscar da rota definida na propriedade serviceLoadApi
 *
 * > Caso o servidor retornar um erro ao recuperar o metadados, será repassado o metadados salvo em cache,
 * se o cache não existe será disparado uma notificação.
 *
 * ```
 * {
 *   path: 'people',
 *   component: PoPageDynamicEditComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata', // endpoint dos metadados utilizando o método HTTP Get
 *     serviceLoadApi: 'http://localhost:3000/load-metadata' // endpoint de customizações dos metadados utilizando o método HTTP Post
 *   }
 * }
 *
 * ```
 *
 * Para carregar com um recurso já existente, deve-se ser incluído um parâmetro na rota chamado `id`:
 *
 * ```
 * {
 *   path: 'people/:id',
 *   component: PoPageDynamicEditComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata', // endpoint dos metadados
 *     serviceLoadApi: 'http://localhost:3000/load-metadata' // endpoint de customizações dos metadados
 *   }
 * }
 * ```
 *
 * A requisição dos metadados é feita na inicialização do template para buscar os metadados da página passando o
 * tipo do metadado esperado e a versão cacheada pelo browser.
 *
 * O formato esperado na resposta da requisição está especificado na interface
 * [PoPageDynamicEditMetadata](/documentation/po-page-dynamic-edit#po-page-dynamic-edit-metadata). Por exemplo:
 *
 * ```
 *  {
 *   version: 1,
 *   title: 'Person edit',
 *   fields: [
 *     { property: 'id', key: true, disabled: true },
 *     { property: 'status' },
 *     { property: 'name' },
 *     { property: 'nickname' },
 *     { property: 'birthdate', label: 'Birth date' },
 *     { property: 'genre' },
 *     { property: 'city' },
 *     { property: 'country' }
 *   ]
 * }
 * ```
 *
 * > Caso o endpoint dos metadados não seja especificado, será feito uma requisição utilizando o `serviceApi` da seguinte forma:
 * ```
 * GET {end-point}/metadata?type=edit&version={version}
 * ```
 *
 * @example
 *
 * <example name="po-page-dynamic-edit-basic" title="PO Page Dynamic Edit Basic">
 *  <file name="sample-po-page-dynamic-edit-basic/sample-po-page-dynamic-edit-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-edit-basic/sample-po-page-dynamic-edit-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-edit-user" title="PO Page Dynamic Edit - User">
 *  <file name="sample-po-page-dynamic-edit-user/sample-po-page-dynamic-edit-user.component.html"> </file>
 *  <file name="sample-po-page-dynamic-edit-user/sample-po-page-dynamic-edit-user.component.ts"> </file>
 * </example>
 */
export class PoPageDynamicEditComponent {
    constructor(router, activatedRoute, poNotification, poDialogService, poPageDynamicService, poPageCustomizationService, poPageDynamicEditActionsService, languageService) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.poNotification = poNotification;
        this.poDialogService = poDialogService;
        this.poPageDynamicService = poPageDynamicService;
        this.poPageCustomizationService = poPageCustomizationService;
        this.poPageDynamicEditActionsService = poPageDynamicEditActionsService;
        /** Objeto com propriedades do breadcrumb. */
        this.breadcrumb = { items: [] };
        this.model = {};
        // beforeSave: return boolean
        // afterSave
        // beforeRemove: return boolean
        // afterRemove
        // beforeInsert: : return boolean
        this.detailActions = {};
        this.subscriptions = [];
        this._actions = {};
        this._autoRouter = false;
        this._controlFields = [];
        this._detailFields = [];
        this._duplicates = [];
        this._fields = [];
        this._keys = [];
        this._pageActions = [];
        const language = languageService.getShortLanguage();
        this.literals = Object.assign(Object.assign({}, poPageDynamicEditLiteralsDefault[poLocaleDefault]), poPageDynamicEditLiteralsDefault[language]);
    }
    /**
     * @optional
     *
     * @description
     *
     * Ações da página.
     */
    set actions(value) {
        this._actions = this.isObject(value) ? value : {};
        this._pageActions = this.getPageActions(this._actions);
    }
    get actions() {
        return Object.assign({}, this._actions);
    }
    /**
     * @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
     *
     * @optional
     *
     * @description
     *
     * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso as ações
     * estejam definidas nas ações.
     *
     * > Para o correto funcionamento não pode haver nenhum rota coringa (`**`) especificada.
     *
     * @default false
     */
    set autoRouter(value) {
        this._autoRouter = convertToBoolean(value);
    }
    get autoRouter() {
        return this._autoRouter;
    }
    /** Lista dos campos usados na tabela e busca avançada. */
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
        this._keys = this.getKeysByFields(this._fields);
        this._duplicates = this.getDuplicatesByFields(this._fields);
        this._controlFields = this.getControlFields(this._fields);
        this._detailFields = this.getDetailFields(this._fields);
    }
    get fields() {
        return this._fields;
    }
    ngOnInit() {
        this.loadDataFromAPI();
    }
    ngOnDestroy() {
        if (this.subscriptions) {
            this.subscriptions.forEach(subscription => {
                subscription.unsubscribe();
            });
        }
    }
    detailActionNew() {
        this.gridDetail.insertRow();
    }
    get duplicates() {
        return [...this._duplicates];
    }
    get keys() {
        return [...this._keys];
    }
    get pageActions() {
        return [...this._pageActions];
    }
    get controlFields() {
        return this._controlFields;
    }
    get detailFields() {
        return this._detailFields;
    }
    loadDataFromAPI() {
        const { serviceApi: serviceApiFromRoute, serviceMetadataApi, serviceLoadApi } = this.activatedRoute.snapshot.data;
        const { id } = this.activatedRoute.snapshot.params;
        const { duplicate } = this.activatedRoute.snapshot.queryParams;
        const onLoad = serviceLoadApi || this.onLoad;
        this.serviceApi = serviceApiFromRoute || this.serviceApi;
        this.poPageDynamicService.configServiceApi({ endpoint: this.serviceApi, metadata: serviceMetadataApi });
        const metadata$ = this.getMetadata(serviceApiFromRoute, id, onLoad);
        const data$ = this.loadData(id, duplicate);
        this.subscriptions.push(concat(metadata$, data$).subscribe());
    }
    cancel(actionCancel, actionBeforeCancel) {
        if (this.dynamicForm && this.dynamicForm.form.dirty) {
            this.poDialogService.confirm({
                message: this.literals.cancelConfirmMessage,
                title: this.literals.pageActionCancel,
                confirm: this.goBack.bind(this, actionCancel, actionBeforeCancel)
            });
        }
        else {
            this.goBack(actionCancel, actionBeforeCancel);
        }
    }
    formatUniqueKey(item) {
        const keys = mapObjectByProperties(item, this.keys);
        return valuesFromObject(keys).join('|');
    }
    goBack(actionCancel, actionBeforeCancel) {
        this.subscriptions.push(this.poPageDynamicEditActionsService
            .beforeCancel(actionBeforeCancel)
            .subscribe((beforeCancelResult) => {
            this.executeBackAction(actionCancel, beforeCancelResult === null || beforeCancelResult === void 0 ? void 0 : beforeCancelResult.allowAction, beforeCancelResult === null || beforeCancelResult === void 0 ? void 0 : beforeCancelResult.newUrl);
        }));
    }
    executeBackAction(actionCancel, allowAction, newUrl) {
        const isAllowedAction = typeof allowAction === 'boolean' ? allowAction : true;
        if (isAllowedAction) {
            if (actionCancel === undefined || typeof actionCancel === 'boolean') {
                return window.history.back();
            }
            if (typeof actionCancel === 'string' || newUrl) {
                return this.router.navigate([newUrl || actionCancel]);
            }
            return actionCancel();
        }
    }
    loadData(id, duplicate) {
        if (!id) {
            try {
                this.model = duplicate ? JSON.parse(duplicate) : {};
            }
            catch (_a) {
                this.model = {};
            }
            return EMPTY;
        }
        return this.poPageDynamicService.getResource(id).pipe(tap(response => (this.model = response)), catchError(error => {
            this.model = undefined;
            this.actions = undefined;
            this._pageActions = [];
            return throwError(error);
        }));
    }
    loadOptionsOnInitialize(onLoad) {
        if (onLoad) {
            return this.getPoDynamicPageOptions(onLoad).pipe(tap(responsePoOption => this.poPageCustomizationService.changeOriginalOptionsToNewOptions(this, responsePoOption)));
        }
        return EMPTY;
    }
    getPoDynamicPageOptions(onLoad) {
        const originalOption = {
            fields: this.fields,
            actions: this.actions,
            breadcrumb: this.breadcrumb,
            title: this.title
        };
        const pageOptionSchema = {
            schema: [
                {
                    nameProp: 'fields',
                    merge: true,
                    keyForMerge: 'property'
                },
                {
                    nameProp: 'actions',
                    merge: true
                },
                {
                    nameProp: 'breadcrumb'
                },
                {
                    nameProp: 'title'
                }
            ]
        };
        return this.poPageCustomizationService.getCustomOptions(onLoad, originalOption, pageOptionSchema);
    }
    getMetadata(serviceApiFromRoute, paramId, onLoad) {
        const typeMetadata = paramId ? 'edit' : 'create';
        if (serviceApiFromRoute) {
            return this.poPageDynamicService.getMetadata(typeMetadata).pipe(tap(response => {
                this.autoRouter = response.autoRouter || this.autoRouter;
                this.actions = response.actions || this.actions;
                this.breadcrumb = response.breadcrumb || this.breadcrumb;
                this.fields = response.fields || this.fields;
                this.title = response.title || this.title;
            }), switchMap(() => this.loadOptionsOnInitialize(onLoad)));
        }
        return this.loadOptionsOnInitialize(onLoad);
    }
    navigateTo(path) {
        if (path) {
            const url = this.resolveUrl(this.model, path);
            this.router.navigate([url]);
        }
        else {
            window.history.back();
        }
    }
    resolveUniqueKey(item) {
        return this.activatedRoute.snapshot.params['id'] ? this.formatUniqueKey(item) : undefined;
    }
    resolveUrl(item, path) {
        const uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    }
    executeSave(saveRedirectPath) {
        const saveOperation$ = this.saveOperation();
        return saveOperation$.pipe(tap(message => {
            this.poNotification.success(message);
            this.navigateTo(saveRedirectPath);
        }));
    }
    updateModel(newResource = {}) {
        const dynamicNgForm = this.dynamicForm.form;
        removeKeysProperties(this.keys, newResource);
        this.model = Object.assign(Object.assign({}, this.model), newResource);
        dynamicNgForm.form.patchValue(this.model);
    }
    saveOperation() {
        if (this.dynamicForm.form.invalid) {
            this.poNotification.warning(this.literals.saveNotificationWarning);
            return EMPTY;
        }
        const paramId = this.activatedRoute.snapshot.params['id'];
        const successMsg = paramId
            ? this.literals.saveNotificationSuccessUpdate
            : this.literals.saveNotificationSuccessSave;
        const saveOperation$ = paramId
            ? this.poPageDynamicService.updateResource(paramId, this.model)
            : this.poPageDynamicService.createResource(this.model);
        return saveOperation$.pipe(map(() => successMsg));
    }
    save(action, before = 'beforeSave') {
        const executeOperation = {
            beforeSave: this.executeSave.bind(this),
            beforeSaveNew: this.executeSaveNew.bind(this)
        };
        const uniqueKey = this.resolveUniqueKey(this.model);
        this.subscriptions.push(this.poPageDynamicEditActionsService[before](this.actions[before], uniqueKey, Object.assign({}, this.model))
            .pipe(switchMap(returnBefore => {
            var _a, _b;
            const newAction = (_a = returnBefore === null || returnBefore === void 0 ? void 0 : returnBefore.newUrl) !== null && _a !== void 0 ? _a : action;
            const allowAction = (_b = returnBefore === null || returnBefore === void 0 ? void 0 : returnBefore.allowAction) !== null && _b !== void 0 ? _b : true;
            this.updateModel(returnBefore === null || returnBefore === void 0 ? void 0 : returnBefore.resource);
            if (!allowAction) {
                return of({});
            }
            if (typeof newAction === 'string') {
                return executeOperation[before](newAction);
            }
            else {
                newAction(Object.assign({}, this.model), uniqueKey);
                return EMPTY;
            }
        }))
            .subscribe());
    }
    executeSaveNew(path) {
        const paramId = this.activatedRoute.snapshot.params['id'];
        const saveOperation$ = this.saveOperation();
        return saveOperation$.pipe(tap(message => {
            if (paramId) {
                this.poNotification.success(message);
                this.navigateTo(path);
            }
            else {
                this.poNotification.success(message);
                this.model = {};
                this.dynamicForm.form.reset();
            }
        }));
    }
    getKeysByFields(fields = []) {
        return fields.filter(field => field.key === true).map(field => field.property);
    }
    getControlFields(fields = []) {
        return fields.filter(field => field.type !== 'detail');
    }
    getDetailFields(fields = []) {
        return fields.filter(field => field.type === 'detail');
    }
    getDuplicatesByFields(fields = []) {
        return fields.filter(field => field.duplicate === true).map(field => field.property);
    }
    getPageActions(actions = {}) {
        const pageActions = [{ label: this.literals.pageActionSave, action: this.save.bind(this, actions.save) }];
        if (actions.saveNew) {
            pageActions.push({
                label: this.literals.pageActionSaveNew,
                action: this.save.bind(this, actions.saveNew, 'beforeSaveNew')
            });
        }
        if (actions.cancel === undefined || actions.cancel) {
            pageActions.push({
                label: this.literals.pageActionCancel,
                action: this.cancel.bind(this, actions.cancel, this.actions.beforeCancel)
            });
        }
        return pageActions;
    }
    isObject(value) {
        return !!value && typeof value === 'object' && !Array.isArray(value);
    }
}
PoPageDynamicEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-dynamic-edit',
                template: "<po-page-default [p-actions]=\"pageActions\" [p-breadcrumb]=\"breadcrumb\" [p-title]=\"title\">\r\n  <ng-container *ngIf=\"model; then formFieldsTemplate; else registerNotFoundTemplate\"> </ng-container>\r\n</po-page-default>\r\n\r\n<ng-template #registerNotFoundTemplate>\r\n  <po-widget>\r\n    <span class=\"po-icon po-icon-info\"></span>\r\n    <span class=\"po-font-text-large\">\r\n      {{ literals.registerNotFound }}\r\n    </span>\r\n  </po-widget>\r\n</ng-template>\r\n\r\n<ng-template #formFieldsTemplate>\r\n  <po-dynamic-form #dynamicForm [p-fields]=\"controlFields\" [p-value]=\"model\"> </po-dynamic-form>\r\n\r\n  <div *ngIf=\"detailFields.length > 0\" class=\"po-sm-12\">\r\n    <po-divider [p-label]=\"detailFields[0].divider\"></po-divider>\r\n\r\n    <div class=\"po-row po-mb-2\">\r\n      <po-button [p-label]=\"literals.detailActionNew\" (p-click)=\"detailActionNew()\" p-small></po-button>\r\n    </div>\r\n\r\n    <po-grid\r\n      #gridDetail\r\n      [p-row-actions]=\"detailActions\"\r\n      [p-columns]=\"detailFields[0].detail.columns\"\r\n      [p-data]=\"model[detailFields[0].property]\"\r\n    >\r\n    </po-grid>\r\n  </div>\r\n</ng-template>\r\n",
                providers: [PoPageDynamicService]
            },] }
];
PoPageDynamicEditComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: PoNotificationService },
    { type: PoDialogService },
    { type: PoPageDynamicService },
    { type: PoPageCustomizationService },
    { type: PoPageDynamicEditActionsService },
    { type: PoLanguageService }
];
PoPageDynamicEditComponent.propDecorators = {
    dynamicForm: [{ type: ViewChild, args: ['dynamicForm',] }],
    gridDetail: [{ type: ViewChild, args: ['gridDetail',] }],
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    serviceApi: [{ type: Input, args: ['p-service-api',] }],
    title: [{ type: Input, args: ['p-title',] }],
    onLoad: [{ type: Input, args: ['p-load',] }],
    actions: [{ type: Input, args: ['p-actions',] }],
    autoRouter: [{ type: Input, args: ['p-auto-router',] }],
    fields: [{ type: Input, args: ['p-fields',] }]
};
//# sourceMappingURL=data:application/json;base64,