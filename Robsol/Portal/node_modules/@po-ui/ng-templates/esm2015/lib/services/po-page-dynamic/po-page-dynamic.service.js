import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { merge, of, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { PoLanguageService, PoNotificationService } from '@po-ui/ng-components';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@po-ui/ng-components";
export const poPageDynamicLiterals = {
    en: {
        errorRenderPage: 'Error loading page',
        notPossibleLoadMetadataPage: 'The page metadata could not be loaded'
    },
    es: {
        errorRenderPage: 'Error al cargar la página',
        notPossibleLoadMetadataPage: 'No se pudieron cargar los metadatos de la página.'
    },
    pt: {
        errorRenderPage: 'Erro ao carregar a página',
        notPossibleLoadMetadataPage: 'Não foi possível carregar os metadados da página'
    },
    ru: {
        errorRenderPage: 'Ошибка загрузки страницы',
        notPossibleLoadMetadataPage: 'Не удалось загрузить метаданные страницы'
    }
};
export class PoPageDynamicService {
    constructor(http, notification, languageService) {
        this.http = http;
        this.notification = notification;
        this.headers = new HttpHeaders({
            'X-PO-SCREEN-LOCK': 'true'
        });
        this.endpoint = '/';
        this.language = languageService.getShortLanguage();
    }
    configServiceApi(config = {}) {
        this.endpoint = config.endpoint;
        this.metadata = config.metadata || this.metadata;
    }
    getMetadata(type = 'list') {
        const key = `${this.endpoint}-${type}-metadata`;
        const cache = JSON.parse(localStorage.getItem(key)) || {};
        const metadataUrlBase = this.metadata || `${this.endpoint}/metadata`;
        const url = `${metadataUrlBase}?type=${type}&version=${cache.version || ''}`;
        return this.http.get(url).pipe(map((response) => {
            if (response.version !== undefined && response.version === cache.version) {
                return cache;
            }
            localStorage.setItem(key, JSON.stringify(response));
            return Object.assign(Object.assign({}, cache), response);
        }), catchError((error) => {
            if (Object.keys(cache).length) {
                return of(cache);
            }
            const { errorRenderPage, notPossibleLoadMetadataPage } = poPageDynamicLiterals[this.language];
            this.notification.warning(notPossibleLoadMetadataPage);
            return merge(of({ title: errorRenderPage }), throwError(error));
        }));
    }
    // Deleta um único recurso
    deleteResource(id, endpoint) {
        const localEndPoint = this.getLocalEndPoint(endpoint, true);
        const url = id ? `${localEndPoint}/${id}` : localEndPoint;
        return this.http.delete(url, { headers: this.headers });
    }
    // Deleta recursos em lote
    deleteResources(ids, endpoint) {
        return this.http.request('delete', `${this.getLocalEndPoint(endpoint)}`, { headers: this.headers, body: ids });
    }
    // Busca uma lista de recursos
    getResources(params, endpoint) {
        return this.http.get(this.getLocalEndPoint(endpoint), { headers: this.headers, params });
    }
    // Busca um único recurso
    getResource(id, endpoint) {
        return this.http.get(`${this.getLocalEndPoint(endpoint, true)}/${id}`, { headers: this.headers });
    }
    // Cria um recurso
    createResource(resource, endpoint) {
        return this.http.post(`${this.getLocalEndPoint(endpoint)}`, resource, { headers: this.headers });
    }
    // Atualiza um recurso
    updateResource(id, resource, endpoint) {
        return this.http.put(`${this.getLocalEndPoint(endpoint, true)}/${id}`, resource, { headers: this.headers });
    }
    getLocalEndPoint(endpoint, checkSingleBar = false) {
        endpoint = endpoint !== null && endpoint !== void 0 ? endpoint : this.endpoint;
        if (checkSingleBar) {
            endpoint = endpoint === '/' ? '' : endpoint;
        }
        return endpoint;
    }
}
PoPageDynamicService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PoPageDynamicService_Factory() { return new PoPageDynamicService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.PoNotificationService), i0.ɵɵinject(i2.PoLanguageService)); }, token: PoPageDynamicService, providedIn: "root" });
PoPageDynamicService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
PoPageDynamicService.ctorParameters = () => [
    { type: HttpClient },
    { type: PoNotificationService },
    { type: PoLanguageService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1keW5hbWljLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy90ZW1wbGF0ZXMvc3JjL2xpYi9zZXJ2aWNlcy9wby1wYWdlLWR5bmFtaWMvcG8tcGFnZS1keW5hbWljLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFxQixXQUFXLEVBQWMsTUFBTSxzQkFBc0IsQ0FBQztBQUU5RixPQUFPLEVBQUUsS0FBSyxFQUFjLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDekQsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7OztBQUloRixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBNkM7SUFDN0UsRUFBRSxFQUFFO1FBQ0YsZUFBZSxFQUFFLG9CQUFvQjtRQUNyQywyQkFBMkIsRUFBRSx1Q0FBdUM7S0FDckU7SUFDRCxFQUFFLEVBQUU7UUFDRixlQUFlLEVBQUUsMkJBQTJCO1FBQzVDLDJCQUEyQixFQUFFLG1EQUFtRDtLQUNqRjtJQUNELEVBQUUsRUFBRTtRQUNGLGVBQWUsRUFBRSwyQkFBMkI7UUFDNUMsMkJBQTJCLEVBQUUsa0RBQWtEO0tBQ2hGO0lBQ0QsRUFBRSxFQUFFO1FBQ0YsZUFBZSxFQUFFLDBCQUEwQjtRQUMzQywyQkFBMkIsRUFBRSwwQ0FBMEM7S0FDeEU7Q0FDRixDQUFDO0FBS0YsTUFBTSxPQUFPLG9CQUFvQjtJQVMvQixZQUNVLElBQWdCLEVBQ2hCLFlBQW1DLEVBQzNDLGVBQWtDO1FBRjFCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsaUJBQVksR0FBWixZQUFZLENBQXVC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QUMsQ0FBQztJQUM5RyxDQUFDO0lBRU8sZ0JBQWdCLENBQUMsUUFBaUIsRUFBRSxjQUFjLEdBQUcsS0FBSztRQUNoRSxRQUFRLEdBQUcsUUFBUSxhQUFSLFFBQVEsY0FBUixRQUFRLEdBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNyQyxJQUFJLGNBQWMsRUFBRTtZQUNsQixRQUFRLEdBQUcsUUFBUSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7U0FDN0M7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDOzs7O1lBOUZGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBOUJRLFVBQVU7WUFLUyxxQkFBcUI7WUFBeEMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwRXJyb3JSZXNwb25zZSwgSHR0cEhlYWRlcnMsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcblxyXG5pbXBvcnQgeyBtZXJnZSwgT2JzZXJ2YWJsZSwgb2YsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwLCBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuaW1wb3J0IHsgUG9MYW5ndWFnZVNlcnZpY2UsIFBvTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJ0Bwby11aS9uZy1jb21wb25lbnRzJztcclxuXHJcbmltcG9ydCB7IFBvUGFnZUR5bmFtaWNMaXRlcmFscyB9IGZyb20gJy4vcG8tcGFnZS1keW5hbWljLWxpdGVyYWxzLmludGVyZmFjZSc7XHJcblxyXG5leHBvcnQgY29uc3QgcG9QYWdlRHluYW1pY0xpdGVyYWxzOiB7IFtrZXk6IHN0cmluZ106IFBvUGFnZUR5bmFtaWNMaXRlcmFscyB9ID0ge1xyXG4gIGVuOiB7XHJcbiAgICBlcnJvclJlbmRlclBhZ2U6ICdFcnJvciBsb2FkaW5nIHBhZ2UnLFxyXG4gICAgbm90UG9zc2libGVMb2FkTWV0YWRhdGFQYWdlOiAnVGhlIHBhZ2UgbWV0YWRhdGEgY291bGQgbm90IGJlIGxvYWRlZCdcclxuICB9LFxyXG4gIGVzOiB7XHJcbiAgICBlcnJvclJlbmRlclBhZ2U6ICdFcnJvciBhbCBjYXJnYXIgbGEgcMOhZ2luYScsXHJcbiAgICBub3RQb3NzaWJsZUxvYWRNZXRhZGF0YVBhZ2U6ICdObyBzZSBwdWRpZXJvbiBjYXJnYXIgbG9zIG1ldGFkYXRvcyBkZSBsYSBww6FnaW5hLidcclxuICB9LFxyXG4gIHB0OiB7XHJcbiAgICBlcnJvclJlbmRlclBhZ2U6ICdFcnJvIGFvIGNhcnJlZ2FyIGEgcMOhZ2luYScsXHJcbiAgICBub3RQb3NzaWJsZUxvYWRNZXRhZGF0YVBhZ2U6ICdOw6NvIGZvaSBwb3Nzw612ZWwgY2FycmVnYXIgb3MgbWV0YWRhZG9zIGRhIHDDoWdpbmEnXHJcbiAgfSxcclxuICBydToge1xyXG4gICAgZXJyb3JSZW5kZXJQYWdlOiAn0J7RiNC40LHQutCwINC30LDQs9GA0YPQt9C60Lgg0YHRgtGA0LDQvdC40YbRiycsXHJcbiAgICBub3RQb3NzaWJsZUxvYWRNZXRhZGF0YVBhZ2U6ICfQndC1INGD0LTQsNC70L7RgdGMINC30LDQs9GA0YPQt9C40YLRjCDQvNC10YLQsNC00LDQvdC90YvQtSDRgdGC0YDQsNC90LjRhtGLJ1xyXG4gIH1cclxufTtcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFBvUGFnZUR5bmFtaWNTZXJ2aWNlIHtcclxuICByZWFkb25seSBoZWFkZXJzOiBIdHRwSGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycyh7XHJcbiAgICAnWC1QTy1TQ1JFRU4tTE9DSyc6ICd0cnVlJ1xyXG4gIH0pO1xyXG5cclxuICBwcml2YXRlIGVuZHBvaW50ID0gJy8nO1xyXG4gIHByaXZhdGUgbGFuZ3VhZ2U6IHN0cmluZztcclxuICBwcml2YXRlIG1ldGFkYXRhOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxyXG4gICAgcHJpdmF0ZSBub3RpZmljYXRpb246IFBvTm90aWZpY2F0aW9uU2VydmljZSxcclxuICAgIGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2VcclxuICApIHtcclxuICAgIHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZVNlcnZpY2UuZ2V0U2hvcnRMYW5ndWFnZSgpO1xyXG4gIH1cclxuXHJcbiAgY29uZmlnU2VydmljZUFwaShjb25maWc6IHsgZW5kcG9pbnQ/OiBzdHJpbmc7IG1ldGFkYXRhPzogc3RyaW5nIH0gPSB7fSkge1xyXG4gICAgdGhpcy5lbmRwb2ludCA9IGNvbmZpZy5lbmRwb2ludDtcclxuICAgIHRoaXMubWV0YWRhdGEgPSBjb25maWcubWV0YWRhdGEgfHwgdGhpcy5tZXRhZGF0YTtcclxuICB9XHJcblxyXG4gIGdldE1ldGFkYXRhPFQ+KHR5cGU6IHN0cmluZyA9ICdsaXN0Jyk6IE9ic2VydmFibGU8VD4ge1xyXG4gICAgY29uc3Qga2V5ID0gYCR7dGhpcy5lbmRwb2ludH0tJHt0eXBlfS1tZXRhZGF0YWA7XHJcbiAgICBjb25zdCBjYWNoZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSkgfHwge307XHJcbiAgICBjb25zdCBtZXRhZGF0YVVybEJhc2UgPSB0aGlzLm1ldGFkYXRhIHx8IGAke3RoaXMuZW5kcG9pbnR9L21ldGFkYXRhYDtcclxuXHJcbiAgICBjb25zdCB1cmwgPSBgJHttZXRhZGF0YVVybEJhc2V9P3R5cGU9JHt0eXBlfSZ2ZXJzaW9uPSR7Y2FjaGUudmVyc2lvbiB8fCAnJ31gO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFQ+KHVybCkucGlwZShcclxuICAgICAgbWFwKChyZXNwb25zZTogYW55KSA9PiB7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLnZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXNwb25zZS52ZXJzaW9uID09PSBjYWNoZS52ZXJzaW9uKSB7XHJcbiAgICAgICAgICByZXR1cm4gY2FjaGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlKSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7IC4uLmNhY2hlLCAuLi5yZXNwb25zZSB9O1xyXG4gICAgICB9KSxcclxuICAgICAgY2F0Y2hFcnJvcigoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKGNhY2hlKS5sZW5ndGgpIHtcclxuICAgICAgICAgIHJldHVybiBvZihjYWNoZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB7IGVycm9yUmVuZGVyUGFnZSwgbm90UG9zc2libGVMb2FkTWV0YWRhdGFQYWdlIH0gPSBwb1BhZ2VEeW5hbWljTGl0ZXJhbHNbdGhpcy5sYW5ndWFnZV07XHJcblxyXG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uLndhcm5pbmcobm90UG9zc2libGVMb2FkTWV0YWRhdGFQYWdlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG1lcmdlKG9mKHsgdGl0bGU6IGVycm9yUmVuZGVyUGFnZSB9KSwgdGhyb3dFcnJvcihlcnJvcikpO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIERlbGV0YSB1bSDDum5pY28gcmVjdXJzb1xyXG4gIGRlbGV0ZVJlc291cmNlKGlkPywgZW5kcG9pbnQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgbG9jYWxFbmRQb2ludCA9IHRoaXMuZ2V0TG9jYWxFbmRQb2ludChlbmRwb2ludCwgdHJ1ZSk7XHJcbiAgICBjb25zdCB1cmwgPSBpZCA/IGAke2xvY2FsRW5kUG9pbnR9LyR7aWR9YCA6IGxvY2FsRW5kUG9pbnQ7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmRlbGV0ZSh1cmwsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gRGVsZXRhIHJlY3Vyc29zIGVtIGxvdGVcclxuICBkZWxldGVSZXNvdXJjZXMoaWRzOiBBcnJheTxhbnk+LCBlbmRwb2ludD86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnJlcXVlc3QoJ2RlbGV0ZScsIGAke3RoaXMuZ2V0TG9jYWxFbmRQb2ludChlbmRwb2ludCl9YCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsIGJvZHk6IGlkcyB9KTtcclxuICB9XHJcblxyXG4gIC8vIEJ1c2NhIHVtYSBsaXN0YSBkZSByZWN1cnNvc1xyXG4gIGdldFJlc291cmNlcyhwYXJhbXM/OiBIdHRwUGFyYW1zLCBlbmRwb2ludD86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh0aGlzLmdldExvY2FsRW5kUG9pbnQoZW5kcG9pbnQpLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycywgcGFyYW1zIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gQnVzY2EgdW0gw7puaWNvIHJlY3Vyc29cclxuICBnZXRSZXNvdXJjZShpZCwgZW5kcG9pbnQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7dGhpcy5nZXRMb2NhbEVuZFBvaW50KGVuZHBvaW50LCB0cnVlKX0vJHtpZH1gLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcclxuICB9XHJcblxyXG4gIC8vIENyaWEgdW0gcmVjdXJzb1xyXG4gIGNyZWF0ZVJlc291cmNlKHJlc291cmNlLCBlbmRwb2ludD86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QoYCR7dGhpcy5nZXRMb2NhbEVuZFBvaW50KGVuZHBvaW50KX1gLCByZXNvdXJjZSwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBBdHVhbGl6YSB1bSByZWN1cnNvXHJcbiAgdXBkYXRlUmVzb3VyY2UoaWQsIHJlc291cmNlLCBlbmRwb2ludD86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnB1dChgJHt0aGlzLmdldExvY2FsRW5kUG9pbnQoZW5kcG9pbnQsIHRydWUpfS8ke2lkfWAsIHJlc291cmNlLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0TG9jYWxFbmRQb2ludChlbmRwb2ludD86IHN0cmluZywgY2hlY2tTaW5nbGVCYXIgPSBmYWxzZSkge1xyXG4gICAgZW5kcG9pbnQgPSBlbmRwb2ludCA/PyB0aGlzLmVuZHBvaW50O1xyXG4gICAgaWYgKGNoZWNrU2luZ2xlQmFyKSB7XHJcbiAgICAgIGVuZHBvaW50ID0gZW5kcG9pbnQgPT09ICcvJyA/ICcnIDogZW5kcG9pbnQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW5kcG9pbnQ7XHJcbiAgfVxyXG59XHJcbiJdfQ==