{"version":3,"file":"po-page-dynamic-search-base.component.d.ts","sources":["po-page-dynamic-search-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter } from '@angular/core';\r\nimport { PoBreadcrumb, PoLanguageService, PoPageAction } from '@po-ui/ng-components';\r\nimport { PoPageDynamicSearchLiterals } from './po-page-dynamic-search-literals.interface';\r\nimport { PoAdvancedFilterLiterals } from './po-advanced-filter/po-advanced-filter-literals.interface';\r\nimport { PoPageDynamicSearchOptions } from './po-page-dynamic-search-options.interface';\r\nimport { PoPageDynamicSearchFilters } from './po-page-dynamic-search-filters.interface';\r\nexport declare const poPageDynamicSearchLiteralsDefault: {\r\n    en: PoPageDynamicSearchLiterals;\r\n    es: PoPageDynamicSearchLiterals;\r\n    pt: PoPageDynamicSearchLiterals;\r\n    ru: PoPageDynamicSearchLiterals;\r\n};\r\n/**\r\n * @description\r\n *\r\n * Componente com as ações de pesquisa já definidas, bastando que o desenvolvedor implemente apenas a chamada para as APIs\r\n * e exiba as informações.\r\n */\r\nexport declare abstract class PoPageDynamicSearchBaseComponent {\r\n    /** Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`. */\r\n    actions?: Array<PoPageAction>;\r\n    /** Objeto com propriedades do breadcrumb. */\r\n    breadcrumb?: PoBreadcrumb;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Mantém na busca avançada os valores preenchidos do último filtro realizado pelo usuário.\r\n     *\r\n     * @default `false`\r\n     */\r\n    keepFilters: boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Permite a utilização da pesquisa rápida junto com a pesquisa avançada.\r\n     *\r\n     * Desta forma, ao ter uma pesquisa avançada estabelecida e ser\r\n     * preenchido a pesquisa rápida, o filtro será concatenado adicionando a pesquisa\r\n     * rápida também na lista de `disclaimers`.\r\n     *\r\n     * > Os valores que são emitidos no `p-quick-search` e no `p-advanced-search`\r\n     * permanecem separados durante a emissão dos valores alterados. A concatenação\r\n     * é apenas nos `disclaimers`.\r\n     *\r\n     * @default `false`\r\n     */\r\n    concatFilters: boolean;\r\n    /**\r\n     * Função ou serviço que será executado na inicialização do componente.\r\n     *\r\n     * A propriedade aceita os seguintes tipos:\r\n     * - `string`: *Endpoint* usado pelo componente para requisição via `POST`.\r\n     * - `function`: Método que será executado.\r\n     *\r\n     * O retorno desta função deve ser do tipo `PoPageDynamicSearchOptions`,\r\n     * onde o usuário poderá customizar novos filtros, breadcrumb, title e actions\r\n     *\r\n     * Por exemplo:\r\n     *\r\n     * ```\r\n     * getPageOptions(): PoPageDynamicSearchOptions {\r\n     * return {\r\n     *   actions: [\r\n     *     { label: 'Find on Google' },\r\n     *   ],\r\n     *   filters: [\r\n     *     { property: 'idCard', gridColumns: 6 }\r\n     *   ]\r\n     * };\r\n     * }\r\n     *\r\n     * ```\r\n     * Para referenciar a sua função utilize a propriedade `bind`, por exemplo:\r\n     * ```\r\n     *  [p-load]=\"onLoadOptions.bind(this)\"\r\n     * ```\r\n     */\r\n    onLoad: string | (() => PoPageDynamicSearchOptions);\r\n    /** Título da página. */\r\n    title: string;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Evento disparado ao executar a pesquisa avançada, o mesmo irá repassar um objeto com os valores preenchidos no modal de pesquisa.\r\n     *\r\n     * > Campos não preenchidos não irão aparecer no objeto passado por parâmetro.\r\n     */\r\n    advancedSearch: EventEmitter<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Evento disparado ao remover um ou todos os disclaimers pelo usuário.\r\n     */\r\n    changeDisclaimers: EventEmitter<any>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Evento disparado ao realizar uma busca pelo campo de pesquisa rápida, o mesmo será chamado repassando o valor digitado.\r\n     */\r\n    quickSearch: EventEmitter<string>;\r\n    advancedFilterLiterals: PoAdvancedFilterLiterals;\r\n    private _filters;\r\n    private _literals;\r\n    private _quickSearchWidth;\r\n    private previousFilters;\r\n    private language;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Objeto com as literais usadas no `po-page-dynamic-search`.\r\n     *\r\n     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:\r\n     *\r\n     * ```\r\n     *  const customLiterals: PoPageDynamicSearchLiterals = {\r\n     *    disclaimerGroupTitle: 'Filtros aplicados:',\r\n     *    filterTitle: 'Filtro avançado',\r\n     *    filterCancelLabel: 'Fechar',\r\n     *    filterConfirmLabel: 'Aplicar',\r\n     *    quickSearchLabel: 'Valor pesquisado:',\r\n     *    searchPlaceholder: 'Pesquise aqui'\r\n     *  };\r\n     * ```\r\n     *\r\n     * Ou passando apenas as literais que deseja customizar:\r\n     *\r\n     * ```\r\n     *  const customLiterals: PoPageDynamicSearchLiterals = {\r\n     *    filterTitle: 'Filtro avançado'\r\n     *  };\r\n     * ```\r\n     *\r\n     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\r\n     *\r\n     * ```\r\n     * <po-page-dynamic-search\r\n     *   [p-literals]=\"customLiterals\">\r\n     * </po-page-dynamic-search>\r\n     * ```\r\n     *\r\n     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.\r\n     */\r\n    set literals(value: PoPageDynamicSearchLiterals);\r\n    get literals(): PoPageDynamicSearchLiterals;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Lista dos campos usados na busca avançada. Caso o mesmo não seja passado a busca avançada não será exibida.\r\n     */\r\n    set filters(filters: Array<PoPageDynamicSearchFilters>);\r\n    get filters(): Array<PoPageDynamicSearchFilters>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Largura do campo de busca, utilizando o *Grid System*,\r\n     * e limitado ao máximo de 6 colunas. O tamanho mínimo é controlado\r\n     * conforme resolução de tela para manter a consistência do layout.\r\n     */\r\n    set quickSearchWidth(value: number);\r\n    get quickSearchWidth(): number;\r\n    constructor(languageService: PoLanguageService);\r\n    protected setAdvancedFilterLiterals(literals: PoPageDynamicSearchLiterals): void;\r\n    private stringify;\r\n    abstract onChangeFilters(filters: Array<PoPageDynamicSearchFilters>): any;\r\n}\r\n"]}