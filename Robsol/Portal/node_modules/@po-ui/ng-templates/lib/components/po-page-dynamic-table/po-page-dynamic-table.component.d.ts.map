{"version":3,"file":"po-page-dynamic-table.component.d.ts","sources":["po-page-dynamic-table.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ActivatedRoute, Router } from '@angular/router';\r\nimport { OnInit, OnDestroy } from '@angular/core';\r\nimport { PoDialogService, PoLanguageService, PoNotificationService, PoPageAction, PoTableAction, PoTableColumnSort } from '@po-ui/ng-components';\r\nimport { PoPageDynamicListBaseComponent } from './po-page-dynamic-list-base.component';\r\nimport { PoPageDynamicService } from '../../services/po-page-dynamic/po-page-dynamic.service';\r\nimport { PoPageDynamicTableActions } from './interfaces/po-page-dynamic-table-actions.interface';\r\nimport { PoPageDynamicTableOptions } from './interfaces/po-page-dynamic-table-options.interface';\r\nimport { PoPageCustomizationService } from './../../services/po-page-customization/po-page-customization.service';\r\nimport { PoPageDynamicTableActionsService } from './po-page-dynamic-table-actions.service';\r\nimport { PoPageDynamicTableCustomAction } from './interfaces/po-page-dynamic-table-custom-action.interface';\r\nimport { PoPageDynamicTableCustomTableAction } from './interfaces/po-page-dynamic-table-custom-table-action.interface';\r\n/**\r\n * @docsExtends PoPageDynamicListBaseComponent\r\n *\r\n * @description\r\n *\r\n * O `po-page-dynamic-table` é uma página que exibe uma lista de registros em uma tabela baseado em uma lista de fields,\r\n * o mesmo também suporta metadados conforme especificado na documentação.\r\n *\r\n * ### Utilização via rota\r\n *\r\n * Ao utilizar as rotas para carregar o template, o `page-dynamic-table` disponibiliza propriedades para\r\n * poder especificar o endpoint dos dados e dos metadados. Exemplo de utilização:\r\n *\r\n * O componente primeiro irá carregar o metadado da rota definida na propriedade serviceMetadataApi\r\n * e depois irá buscar da rota definida na propriedade serviceLoadApi\r\n *\r\n * > Caso o servidor retornar um erro ao recuperar o metadados, será repassado o metadados salvo em cache,\r\n * se o cache não existe será disparado uma notificação.\r\n *\r\n * ```\r\n * {\r\n *   path: 'people',\r\n *   component: PoPageDynamicTableComponent,\r\n *   data: {\r\n *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados\r\n *     serviceMetadataApi: 'http://localhost:3000/v1/metadata', // endpoint dos metadados utilizando o método HTTP Get\r\n *     serviceLoadApi: 'http://localhost:3000/load-metadata' // endpoint de customizações dos metadados utilizando o método HTTP Post\r\n *   }\r\n * }\r\n *\r\n * ```\r\n *\r\n * A requisição dos metadados é feita na inicialização do template para buscar os metadados da página passando o\r\n * tipo do metadado esperado e a versão cacheada pelo browser.\r\n *\r\n * O formato esperado na resposta da requisição está especificado na interface\r\n * [PoPageDynamicTableMetadata](/documentation/po-page-dynamic-table#po-page-dynamic-table-metadata). Por exemplo:\r\n *\r\n * ```\r\n *  {\r\n *   version: 1,\r\n *   title: 'Person Table',\r\n *   fields: [\r\n *     { property: 'id', key: true, disabled: true },\r\n *     { property: 'status' },\r\n *     { property: 'name' },\r\n *     { property: 'nickname' },\r\n *     { property: 'birthdate', label: 'Birth date' },\r\n *     { property: 'genre' },\r\n *     { property: 'city' },\r\n *     { property: 'country' }\r\n *   ],\r\n *   keepFilters: true\r\n * }\r\n * ```\r\n *\r\n * > Caso o endpoint dos metadados não seja especificado, será feito uma requisição utilizando o `serviceApi` da seguinte forma:\r\n * ```\r\n * GET {end-point}/metadata?type=list&version={version}\r\n * ```\r\n *\r\n * @example\r\n *\r\n * <example name=\"po-page-dynamic-table-basic\" title=\"PO Page Dynamic Table Basic\">\r\n *  <file name=\"sample-po-page-dynamic-table-basic/sample-po-page-dynamic-table-basic.component.html\"> </file>\r\n *  <file name=\"sample-po-page-dynamic-table-basic/sample-po-page-dynamic-table-basic.component.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-page-dynamic-table-users\" title=\"PO Page Dynamic Table - Users\">\r\n *  <file name=\"sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.component.html\"> </file>\r\n *  <file name=\"sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.component.ts\"> </file>\r\n *  <file name=\"sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.service.ts\"> </file>\r\n * </example>\r\n */\r\nexport declare class PoPageDynamicTableComponent extends PoPageDynamicListBaseComponent implements OnInit, OnDestroy {\r\n    private router;\r\n    private activatedRoute;\r\n    private poDialogService;\r\n    private poNotification;\r\n    private poPageDynamicService;\r\n    private poPageCustomizationService;\r\n    private poPageDynamicTableActionsService;\r\n    /**\r\n     * Função ou serviço que será executado na inicialização do componente.\r\n     *\r\n     * A propriedade aceita os seguintes tipos:\r\n     * - `string`: *Endpoint* usado pelo componente para requisição via `POST`.\r\n     * - `function`: Método que será executado.\r\n     *\r\n     * O retorno desta função deve ser do tipo `PoPageDynamicTableOptions`,\r\n     * onde o usuário poderá customizar novos campos, breadcrumb, title e actions\r\n     *\r\n     * Por exemplo:\r\n     *\r\n     * ```\r\n     * getPageOptions(): PoPageDynamicTableOptions {\r\n     * return {\r\n     *   actions:\r\n     *     { new: 'new', edit: 'edit/:id', remove: true },\r\n     *   fields: [\r\n     *     { property: 'idCard', gridColumns: 6 }\r\n     *   ]\r\n     * };\r\n     * }\r\n     *\r\n     * ```\r\n     * Para referenciar a sua função utilize a propriedade `bind`, por exemplo:\r\n     * ```\r\n     *  [p-load]=\"onLoadOptions.bind(this)\"\r\n     * ```\r\n     */\r\n    onLoad: string | (() => PoPageDynamicTableOptions);\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Mantém na modal de `Busca Avançada` os valores preenchidos do último filtro realizado pelo usuário.\r\n     *\r\n     * @default `false`\r\n     */\r\n    keepFilters: boolean;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Permite a utilização da pesquisa rápida junto com a pesquisa avançada.\r\n     *\r\n     * Desta forma, ao ter uma pesquisa avançada estabelecida e ser\r\n     * preenchido a pesquisa rápida, o filtro será concatenado adicionando a pesquisa\r\n     * rápida também na lista de `disclaimers` a aplicando uma nova busca com a concatenação.\r\n     *\r\n     * Por exemplo, com os seguintes filtros aplicados:\r\n     *   - filtro avançado: `{ name: 'Mike', age: '12' }`\r\n     *   - filtro rápido: `{ search: 'paper' }`\r\n     *\r\n     * A requisição dos dados na API ficará com os parâmetros:\r\n     * ```\r\n     * page=1&pageSize=10&name=Mike&age=12&search=paper\r\n     * ```\r\n     *\r\n     * @default `false`\r\n     */\r\n    concatFilters: boolean;\r\n    hasNext: boolean;\r\n    items: any[];\r\n    literals: any;\r\n    pageActions: Array<PoPageAction>;\r\n    tableActions: Array<PoTableAction>;\r\n    private _actions;\r\n    private _pageCustomActions;\r\n    private _quickSearchWidth;\r\n    private _tableCustomActions;\r\n    private page;\r\n    private params;\r\n    private sortedColumn;\r\n    private subscriptions;\r\n    private hasCustomActionWithSelectable;\r\n    private _customPageListActions;\r\n    private _customTableActions;\r\n    private _defaultPageActions;\r\n    private _defaultTableActions;\r\n    private set defaultPageActions(value);\r\n    private set defaultTableActions(value);\r\n    private set customPageListActions(value);\r\n    private set customTableActions(value);\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Ações da página e da tabela.\r\n     * > Caso utilizar a ação padrão de excluir, a mesma será exibida por último na tabela.\r\n     */\r\n    set actions(value: PoPageDynamicTableActions);\r\n    get actions(): PoPageDynamicTableActions;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Lista de ações customizadas da página que serão incorporadas às ações\r\n     * informadas através da propriedade `p-actions`.\r\n     *\r\n     * Essas ações ficam localizadas na parte superior da página em botões com ações.\r\n     *\r\n     * Exemplo de utilização:\r\n     * ```\r\n     * [\r\n     *  { label: 'Export', action: this.export.bind(this) },\r\n     *  { label: 'Print', action: this.print.bind(this) }\r\n     * ];\r\n     * ```\r\n     */\r\n    set pageCustomActions(value: Array<PoPageDynamicTableCustomAction>);\r\n    get pageCustomActions(): Array<PoPageDynamicTableCustomAction>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Lista de ações customizadas na tabela da página que serão incorporadas às ações\r\n     * informadas através da propriedade `p-actions`.\r\n     *\r\n     * Exemplo de utilização:\r\n     * ```\r\n     * [\r\n     *  { label: 'Apply discount', action: this.applyDiscount.bind(this) },\r\n     *  { label: 'Details', action: this.details.bind(this) }\r\n     * ];\r\n     * ```\r\n     * > Caso utilizar a ação padrão de excluir, a mesma será exibida por último na tabela.\r\n     */\r\n    set tableCustomActions(value: Array<PoPageDynamicTableCustomTableAction>);\r\n    get tableCustomActions(): Array<PoPageDynamicTableCustomTableAction>;\r\n    /**\r\n     * @optional\r\n     *\r\n     * @description\r\n     *\r\n     * Largura do campo de busca, utilizando o *Grid System*,\r\n     * e limitado ao máximo de 6 colunas. O tamanho mínimo é controlado\r\n     * conforme resolução de tela para manter a consistência do layout.\r\n     */\r\n    set quickSearchWidth(value: number);\r\n    get quickSearchWidth(): number;\r\n    constructor(router: Router, activatedRoute: ActivatedRoute, poDialogService: PoDialogService, poNotification: PoNotificationService, poPageDynamicService: PoPageDynamicService, poPageCustomizationService: PoPageCustomizationService, poPageDynamicTableActionsService: PoPageDynamicTableActionsService, languageService: PoLanguageService);\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    onAdvancedSearch(filter: any): void;\r\n    onChangeDisclaimers(disclaimers: any): void;\r\n    onQuickSearch(termTypedInQuickSearch: any): void;\r\n    onSort(sortedColumn: PoTableColumnSort): void;\r\n    showMore(): void;\r\n    get enableSelectionTable(): boolean;\r\n    get hasActionRemoveAll(): boolean;\r\n    private confirmRemove;\r\n    private confirmRemoveAll;\r\n    private formatUniqueKey;\r\n    private getOrderParam;\r\n    private loadData;\r\n    private getMetadata;\r\n    private navigateTo;\r\n    private openDetail;\r\n    private executeDetail;\r\n    private getPathFromNewUrl;\r\n    private openDuplicate;\r\n    private executeDuplicate;\r\n    private openEdit;\r\n    private executeEditAction;\r\n    private openEditUrl;\r\n    private modifyUITableItem;\r\n    private openNew;\r\n    private executeNew;\r\n    /**\r\n     * Caso exista mais de um identificador, será concatenado com '|'.\r\n     *\r\n     * Ex: { id: 1, company: 'po' }\r\n     *\r\n     * Para o endpoint /resources/:id será executada a url /resources/1|po\r\n     */\r\n    private remove;\r\n    private deleteAction;\r\n    private removeFromUI;\r\n    private removeAll;\r\n    private getSelectedItemsKeys;\r\n    private returnResourcesKeys;\r\n    private deleteAllAction;\r\n    private removeLocalItems;\r\n    private resolveUrl;\r\n    private setPageActions;\r\n    private transformCustomActionsToPageListAction;\r\n    private transformTableCustomActionsToTableActions;\r\n    private isDisablePageCustomAction;\r\n    private callPageCustomAction;\r\n    private callTableCustomAction;\r\n    private setRemoveAllAction;\r\n    private disableRemoveAll;\r\n    private setTableActions;\r\n    private loadDataFromAPI;\r\n    private getInitialValuesFromFilter;\r\n    private loadOptionsOnInitialize;\r\n    private getPoDynamicPageOptions;\r\n    private showRemove;\r\n    private updateFilterValue;\r\n    private updatePageActions;\r\n    private updateTableActions;\r\n}\r\n"]}