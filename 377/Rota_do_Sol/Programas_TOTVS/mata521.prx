#DEFINE GD_INSERT 1
#DEFINE GD_UPDATE 2
#DEFINE GD_DELETE 4
#INCLUDE "MATA521.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWMVCDEF.CH"
#INCLUDE "TBICONN.CH"
#INCLUDE "FWADAPTEREAI.CH"
#INCLUDE "FWLIBVERSION.CH"

Static slFuncNFe	:= FindFunction('ChamaMonit') .And. FindFunction('TransCanc') // Confere se as funcoes para tratamento do cancelamento de NFe existe
Static slFuncNFSe	:= FindFunction('CanWSNFSe') .and. FindFunction('MonitNFSe') .And. FindFunction('EnvCanNFSe') // Confere se as funcoes para tratamento do cancelamento de NFSe existe
Static _lM521TRAN	:= ExistBlock("M521TRAN")
Static aAdianta  	:= {}
Static bFilFIE   	:= {|| .T. }
Static lAdtCompart	:= .F.
Static bFilFR3   	:= {|| .T. }
Static __lMetric 	:= Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³MATA521A  ³ Rev.  ³Eduardo Riera          ³ Data ³29.12.2001  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de exclusao dos documentos de Saida                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                        ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ ATUALIZACOES SOFRIDAS DESDE A CONSTRUCAO INICIAL.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ PROGRAMADOR  ³ DATA   ³ BOPS ³  MOTIVO DA ALTERACAO                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³			                  ATUALIZACOES SOFRIDAS			                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³LuisEnríquez³16/07/18³DMINA-3630³Se replica funcionalidad atendida en    ³±±
±±³            ³        ³          ³DMINA-62 de Fact. de Anticipos. (PER)   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function MATA521A(lAutomato,cAlias,cMarca,nOpc,lAglCtb,lContab,lCarteira)

Local aArea     := GetArea()
Local aIndSF2   := {}
Local cFilSF2   := ""
Local cBakSF2   := ""
Local cQrySF2   := ""
Local lSeleciona:= .F.
local cSDoc		:= SerieNFID("SF2", 3, "F2_SERIE")
Local lNFeCancel := SuperGetMV('MV_CANCNFE',.F.,.F.) .OR. SuperGetMV('MV_CANNFSE',.F.,.F.)
Local aCores := {;
				{"Empty(F2_STATUS)",'BR_BRANCO' },;	//
				{"F2_STATUS=='015'",'BR_VERDE'},;		//Cancelamento Autorizado, mas com pendencia de processo
				{"F2_STATUS=='025'" ,'BR_LARANJA'},;	//Cancelamento não transmitido
				{"F2_STATUS=='026'" ,'DISABLE'}}		//Cancelamento não autorizado
Local lM520FIL 	:= ExistBlock( "M520FIL" )
Local lM520QRY	:= ExistBlock( "M520QRY" )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Tratamento para e-Commerce      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local lECommerce := SuperGetMV("MV_LJECOMM",,.F.)

Local nReg 	:= 1
Local nOpcX := 1

Default lAutomato	:= .F.
Default cAlias 		:= "SF2"
Default cMarca		:= ""
Default nOpc		:= 1
Default lAglCtb		:= .F.
Default lContab		:= .F.
Default lCarteira 	:= .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Carga das Variaveis Staticas do Programa                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define Array contendo as Rotinas a executar do programa  ³
//³ ----------- Elementos contidos por dimensao ------------ ³
//³ 1. Nome a aparecer no cabecalho                          ³
//³ 2. Nome da Rotina associada                              ³
//³ 3. Usado pela rotina                                     ³
//³ 4. Tipo de Transa‡„o a ser efetuada                      ³
//³    1 - Pesquisa e Posiciona em um Banco de Dados         ³
//³    2 - Simplesmente Mostra os Campos                     ³
//³    3 - Inclui registros no Bancos de Dados               ³
//³    4 - Altera o registro corrente                        ³
//³    5 - Remove o registro corrente do Banco de Dados      ³
//³    6 - Altera determinados campos sem incluir novos Regs ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE bFiltraBrw := {|| Nil}
PRIVATE bEndFilBrw := {|| EndFilBrw("SF2",aIndSF2),aIndSF2:={}}
PRIVATE cCadastro  := OemToAnsi(STR0001)	//"Exclusao dos Documento de Saida"
PRIVATE aRotina    := FwLoadMenuDef("MATA521A") //Chamada do menudef do MATA521A

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Carga das Variaveis Staticas do Programa para não ocorrer problema no FATJOBNFE³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aAdianta  	:= ProtCfgAdt()
bFilFIE   	:= Iif(aAdianta[1,4],{|| FIE->FIE_FILORI==cFilAnt .Or. Empty(FIE->FIE_FILORI)},{||.T.})
lAdtCompart	:= aAdianta[1,5] .And. 'C' $ aAdianta[1,1]+aAdianta[1,2]+aAdianta[1,3]
bFilFR3   	:= iIF(lAdtCompart,{|| FR3->FR3_FILORI == cFilAnt },{|| .T. })
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Exibe as perguntas da rotina:                                           ³
//³                                                                        ³
//³1) Modelo de Interface? Marcacao/Selecao                                ³
//³2) Selecionar Itens   ? Sim/Nao                                         ³
//³3) Emissao de         ?                                                 ³
//³4) Emissao ate        ?                                                 ³
//³5) Serie de           ?                                                 ³
//³6) Serie ate          ?                                                 ³
//³7) Documento de       ?                                                 ³
//³8) Documento ate      ?                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If !lAutomato

	If Pergunte("MT521A",.T.)

		SF2->( DBSetOrder( 1 ) )

		lSeleciona := MV_PAR02==1
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Montagem da expressao de filtro                                         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cFilSF2 := "F2_FILIAL='"+xFilial("SF2")+"' .And. "
		cQrySF2 := "F2_FILIAL='"+xFilial("SF2")+"' AND "
		cFilSF2 += "DTOS(F2_EMISSAO)>='"+Dtos(MV_PAR03)+"' .And. "
		cQrySF2 += "F2_EMISSAO>='"+Dtos(MV_PAR03)+"' AND "
		cFilSF2 += "DTOS(F2_EMISSAO)<='"+Dtos(MV_PAR04)+"' .And. "
		cQrySF2 += "F2_EMISSAO<='"+Dtos(MV_PAR04)+"' AND "
		//Bruno Cremaschi
		cFilSF2 += cSDoc + ">='"+MV_PAR05+"' .And. "
		cQrySF2 += cSDoc + ">='"+MV_PAR05+"' AND "
		cFilSF2 += cSDoc + "<='"+MV_PAR06+"' .And. "
		cQrySF2 += cSDoc + "<='"+MV_PAR06+"' AND "

		cFilSF2 += "F2_DOC>='"+MV_PAR07+"' .And. "
		cQrySF2 += "F2_DOC>='"+MV_PAR07+"' AND "
		cFilSF2 += "F2_DOC<='"+MV_PAR08+"'"
		cQrySF2 += "F2_DOC<='"+MV_PAR08+"'"

		cFilSF2 += If(lM520FIL, ".And."+ExecBlock("M520FIL",.F.,.F.), "")
		cQrySF2 := If(lM520QRY, ExecBlock("M520QRY",.F.,.F.,{ cQrySF2 , 1 }), cQrySF2)

		cBakSF2 := cFilSF2

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Realiza a Filtragem                                                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		bFiltraBrw := {|x,y|IIf(x==Nil,FilBrowse("SF2",@aIndSF2,@cFilSF2),IIf(x==1,{cBakSF2,cQrySF2},IIf(x==2,aIndSF2,cFilSF2:=y))) }

		SF2->( DBSetOrder(1) )     /// no CodeBase a função FilBrowse retornará o indice 2 19/04/2011 TI4501

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Verifica o modelo de interface                                          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If MV_PAR01 == 1
			Pergunte("MTA521",.F.)
			SetKey(VK_F12,{||Pergunte("MTA521",.T.)})

			//Telemetria
			FatLibMetric()

			A521FixRot(aRotina,"Ma521Mbrow") //remove do aRotina a opção excluir que não será utilizada

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Ponto de entrada para pre-validar os dados a serem  ³
			//³ exibidos.                                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			IF ExistBlock("M520BROW")
				ExecBlock("M520BROW",.F.,.F.)
			Endif

			If lECommerce
				cMarca	:= GetMark(,"SF2","F2_OK")
				MarkBrow("SF2","F2_OK",,,lSeleciona,cMarca,,,,,"A521VERPRS('1','" + cMarca + "')",,,,IIF(lNFeCancel,aCores,Nil),,,cFilSF2)
			Else
				MarkBrow("SF2","F2_OK",,,lSeleciona,GetMark(,"SF2","F2_OK"),,,,,,,cQrySF2,,IIF(lNFeCancel,aCores,Nil),,,Nil)
			EndIf
			SetKey(VK_F12,Nil)
		Else
			Pergunte("MTA521",.F.)
			SetKey(VK_F12,{||Pergunte("MTA521",.T.)})

			//Telemetria
			FatLibMetric()

			A521FixRot(aRotina,"Ma521MarkB") //remove do aRotina a opção excluir que não será utilizada

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Ponto de entrada para pre-validar os dados a serem  ³
			//³ exibidos.                                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			IF ExistBlock("M520BROW")
				ExecBlock("M520BROW",.F.,.F.)
			Endif

			mBrowse(7,4,20,74,"SF2",,,,,,IIF(lNFeCancel,aCores,Nil),,,,,,,,cQrySF2)
			SetKey(VK_F12,Nil)
		EndIf
	EndIf
Else
	Pergunte("MTA521",.F.)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Realiza a Filtragem                                                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	bFiltraBrw := {|x,y|IIf(x==Nil,FilBrowse("SF2",@aIndSF2,@cFilSF2),IIf(x==1,{cBakSF2,cQrySF2},IIf(x==2,aIndSF2,cFilSF2:=y))) }

	If nOpc == 1
		PcoIniLan("000101")
		Ma521Mark2(cAlias,.F.,.F.,lAglCtb,lContab,lCarteira,lAutomato,cMarca)
		PcoFinLan("000101")
	Else
		Ma521Mbrow(cAlias,nReg,nOpcX,lAutomato,lAglCtb,lContab,lCarteira)
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Restaura a integridade da rotina                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
EndFilBrw("SF2",aIndSF2)
RetIndex("SF2")
RestArea(aArea)
Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³MA521Markb³ Rev.  ³Eduardo Riera          ³ Data ³29.12.2001	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de processamento da Exclusao dos documento de saida 	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      	³±±
±±³          ³                                                            	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias                                                	³±±
±±³          ³                                                            	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ ATUALIZACOES SOFRIDAS DESDE A CONSTRUCAO INICIAL.                     	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ PROGRAMADOR  ³ DATA   ³ BOPS ³  MOTIVO DA ALTERACAO                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Ma521Markb(cAlias,nReg,nOpcX,cMarca,lInverte)
Local aArea    := GetArea()

/* Integração RISK - TOTVS Mais Negócios
 Função responsável por validar a exclusão de um titulo Mais Negocio
 pela rotina de exclusão de Nota Fiscal (MATA521) */
If FindFunction( "RskIsActive" ) .And. RskIsActive() .and. FindFunction( "RSKValCan" )
	RSKValCan( cAlias, cMarca, lInverte  )
EndIf

If !ctbValiDt( Nil, dDataBase, .T., Nil, Nil, { "FAT004" }, Nil )
	Return .F.
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis de parametrizacao de lancamentos             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ mv_par01 Mostra Lan‡.Contab ?  Sim/Nao                        ³
//³ mv_par02 Aglut. Lan‡amentos ?  Sim/Nao                        ³
//³ mv_par03 Lan‡.Contab.On-Line?  Sim/Nao                        ³
//³ mv_par04 Retornar PV        ?  Carteira/Apto a faturar        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If MsgYesNo(OemToAnsi(STR0006),; //"Confirma estorno dos documentos marcados ?"
			OemToAnsi(STR0007)) //"Aten‡„o"
	PcoIniLan("000101")
	Processa({|lEnd| Ma521Mark2(cAlias,;
		@lEnd,;
		MV_PAR01==1,;
		MV_PAR02==1,;
		MV_PAR03==1,;
		MV_PAR04==1)},,OemToAnsi(STR0008),.T.) //"Estorno dos documentos de saida"
	PcoFinLan("000101")
EndIf
RestArea(aArea)
Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³A521FixRot ³ Rev.  ³CRM/FAT         ³ Data ³15.10.2019     	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de ajuste da opçao excluir do aRotina	                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      	³±±
±±³          ³                                                            	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias                                                	³±±
±±³          ³                                                            	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ ATUALIZACOES SOFRIDAS DESDE A CONSTRUCAO INICIAL.                     	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ PROGRAMADOR  ³ DATA   ³ BOPS ³  MOTIVO DA ALTERACAO                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function A521FixRot(aRotina,cRotina)

Local nPos := 0

Default aRotina := {}
Default cRotina := ""

nPos := aScan( aRotina,{|x| x[2] == cRotina } )

If nPos > 0
	aDel( aRotina, nPos )
	aSize( aRotina, Len( aRotina )-1 )
EndIf

Return Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³MA521Mark2³ Rev.  ³Eduardo Riera          ³ Data ³29.12.2001	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de processamento da Exclusao dos documento de saida 	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      	³±±
±±³          ³                                                            	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias                                                	³±±
±±³          ³ExpL2: Controle de cancelamento                             	³±±
±±³          ³ExpL3: Mostra lancto contabil                               	³±±
±±³          ³ExpL4: Aglutina lancto contabil                             	³±±
±±³          ³ExpL5: Contabiliza On-Line                                  	³±±
±±³          ³ExpL6: Pedido em carteira                                   	³±±
±±³          ³                                                            	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ ATUALIZACOES SOFRIDAS DESDE A CONSTRUCAO INICIAL.                     	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ PROGRAMADOR  ³ DATA   ³ BOPS ³  MOTIVO DA ALTERACAO                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Ma521Mark2(cAlias,lEnd,lMostraCtb,lAglCtb,lContab,lCarteira,lAutomato,cMarca)

Local aArea     	:= GetArea()
Local aAreaSF2  	:= SF2->(GetArea())
Local aAreaDAK  	:= DAK->(GetArea())
Local aRegSD2   	:= {}
Local aRegSE1   	:= {}
Local aRegSE2   	:= {}
Local cMensagem 	:= RetTitle("F2_DOC")
Local cAliasSF2 	:= "SF2"
Local cSavFil   	:= cFilAnt
Local lInverte  	:= ThisInv()
Local lValido   	:= .F.
Local lMs520Vld 	:= ExistBlock("MS520VLD",,.T.)
Local lMs520VldE	:= ExistTemplate("MS520VLD")
Local lSF2520ET 	:= ExistTemplate("SF2520E")
Local lSF2520E  	:= Existblock("SF2520E")
Local lIntACD		:= SuperGetMV("MV_INTACD",.F.,"0") == "1"
Local lIntTms   	:= SuperGetMV("MV_INTTMS",,.F.)
Local aFiltro   	:= {}
Local aStruSF2  	:= {}
Local cQuery    	:= ""
Local nX        	:= 0
Local lM520QRY  	:= ExistBlock( "M520QRY" )
Local lIntMNT       := ( AllTrim(SuperGetMV("MV_NGMNTES", .F., "N")) == "S" ) // Verifica integracao MNT x Estoque/Compras
Local lIntegDef		:= ExistFunc("GETROTINTEG") .And. ExistFunc("FWHASEAI") .And. FWHasEAI("MATA410B",.T.,,.T.)//Integracao e rastreabilidade de pedidos ativa
Local lTeleVenda	:= IsInCallStack("TMKA150")

Default cMarca    := ThisMark()
Default lAutomato := .F.

If !lTeleVenda
	aFiltro   := Eval(bFiltraBrw,1)
EndIf

If cAlias == "SF2"	// Verifica a Tabela da MarkBrowse
	// Tratamento dos Documentos de saida
	DBSelectArea("SF2")

	cAliasSF2 := "MA521MarkB"
	aStruSF2  := SF2->(DBStruct())

	cQuery := "SELECT SF2.*,R_E_C_N_O_ SF2RECNO "
	cQuery += "FROM "+RetSqlName("SF2")+" SF2 "
	cQuery += "WHERE SF2.F2_FILIAL='"+xFilial("SF2")+"' AND "

	If ( lInverte )
		cQuery += "SF2.F2_OK<>'"+cMarca+"' AND "
	Else
		cQuery += "SF2.F2_OK='"+cMarca+"' AND "
	EndIf
	If !lTeleVenda
		If !( Empty( aFiltro ) .And. lM520QRY )
			cQuery += If (!Empty(aFiltro[2]),aFiltro[2] +" AND ", "" )
		EndIf
	Else
		cQuery += "SF2.F2_DOC='"+SUA->UA_DOC+"' AND "
	EndIf
	cQuery += "SF2.D_E_L_E_T_=' '"
	cQuery += "ORDER BY "+SqlOrder(SF2->(IndexKey()))

	cQuery := ChangeQuery(cQuery)

	DBUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSF2,.T.,.T.)

	For nX := 1 To Len(aStruSF2)
		If aStruSF2[nX][2]<>"C"
			TcSetField(cAliasSF2,aStruSF2[nX][1],aStruSF2[nX][2],aStruSF2[nX][3],aStruSF2[nX][4])
		EndIf
	Next nX

	If !lAutomato
		ProcRegua(SF2->(LastRec()))
	EndIf

	While (cAliasSF2)->( !Eof() )
		lValido := .T.
		If lValido
			SF2->( MsGoto( (cAliasSF2)->SF2RECNO) )
			cFiltro:= SF2->( DBFilter() )
			lValido := If(!Empty(cFiltro), &cFiltro, lValido)

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Integracao com o ACD - Validacao da exclusao da Nota Fiscal de Saida  		 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lIntACD
				lValido := CBMS520VLD()
			ElseIf lMs520VldE
				lValido := ExecTemplate("MS520VLD",.F.,.F.)
			EndIf

			If lValido .And. lMs520Vld
				lValido := ExecBlock("MS520VLD",.F.,.F.)
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Integracao com o TMS - Validacao da exclusao da Nota Fiscal de Saida  		 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lValido .And. lIntTms
				lValido := TMSX520VLD()
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Verifica se o estorno do documento de saida pode ser feito     ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aRegSD2 := {}
			aRegSE1 := {}
			aRegSE2 := {}

			If lValido .AND. MaCanDelF2(cAliasSF2,SF2->(RecNo()),@aRegSD2,@aRegSE1,@aRegSE2,,lAutomato,,lCarteira) .And. MA521VerSC6(SF2->F2_FILIAL,SF2->F2_DOC,SF2->F2_SERIE,SF2->F2_CLIENTE,SF2->F2_LOJA)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Integracao com o ACD - Acerto do CB0 na Exclusao da NF de devolucao via Protheus,			³
				//³ Somente se a etiqueta estiver com NF de Devolucao gravada 		  							³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If lIntACD
					CBSF2520E()
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Pontos de Entrada 	 ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				ElseIf lSF2520ET
					ExecTemplate("SF2520E",.F.,.F.)
				EndIf

				If AllTrim(Upper(SF2->F2_ESPECIE)) == "CTEOS" .And. FindFunction("GTP1ExcGZH")
					GTP1ExcGZH(SF2->F2_DOC,SF2->F2_SERIE,SF2->F2_CLIENTE,SF2->F2_LOJA)
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Agroindustria  									          ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If FindFunction("OGXUtlOrig") //Encontra a função
					If OGXUtlOrig() //Verifica se existe
						If FindFunction("OGX165") //Encontra a função
							OGX165() // Executa a função
						EndIf
					EndIf
				EndIf

				If lSF2520E
					ExecBlock("SF2520E",.F.,.F.)
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Estorna o documento de saida                                   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				SF2->(MaDelNFS(aRegSD2,aRegSE1,aRegSE2,lMostraCtb,lAglCtb,lContab,lCarteira))
			EndIf

			//Chamada da Função IntegDef para dispara a rotina de Rastreamento
			//de pedido.
			If lIntegDef
				FwIntegDef("MATA410B",,,, "MATA410B")
			Endif

			MsUnLockAll()

			//Se tiver integracao com MNT deleta registro de bomba do posto
			If lIntMNT .And. FindFunction('MNT651DTTV')
				MNT651DTTV((cAliasSF2)->F2_DOC,(cAliasSF2)->F2_SERIE)
			EndIf

		EndIf

		(cAliasSF2)->( DBSkip() )

		If !lAutomato
			IncProc(cMensagem+"..:"+(cAliasSF2)->F2_SERIE+"/"+(cAliasSF2)->F2_DOC)
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Controle de cancelamento do usuario                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lEnd
			Exit
		EndIf

	EndDo

	(cAliasSF2)->( DBCloseArea() )

	DBSelectArea("SF2")

EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura a integridade da rotina                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cFilAnt := cSavFil

RestArea(aAreaSF2)
RestArea(aAreaDAK)
RestArea(aArea)

Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³MA521Mbrow³ Rev.  ³Eduardo Riera          ³ Data ³01.01.2002	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de processamento da Exclusao dos documento de saida 	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      	³±±
±±³          ³                                                            	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias                                                	³±±
±±³          ³ExpL2: Controle de cancelamento                             	³±±
±±³          ³ExpL3: Mostra lancto contabil                               	³±±
±±³          ³ExpL4: Aglutina lancto contabil                             	³±±
±±³          ³ExpL5: Contabiliza On-Line                                  	³±±
±±³          ³ExpL6: Pedido em carteira                                   	³±±
±±³          ³                                                            	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ ATUALIZACOES SOFRIDAS DESDE A CONSTRUCAO INICIAL.                     	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ PROGRAMADOR  ³ DATA   ³ BOPS ³  MOTIVO DA ALTERACAO                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Ma521Mbrow(cAlias,nReg,nOpcX,lAutomato,lAglCtb,lContab,lCarteira)

Local aArea     	:= GetArea()
Local aAreaSF2  	:= SF2->(GetArea())
Local aRegSD2   	:= {}
Local aRegSE1   	:= {}
Local aRegSE2   	:= {}
Local cAliasSF2 	:= "SF2"
Local lValido   	:= .T.
Local lMs520Vld 	:= (existblock("MS520VLD",,.T.))
Local lMs520VldE	:= ExistTemplate("MS520VLD")
Local lSF2520ET 	:= ExistTemplate("SF2520E")
Local lSF2520E 		:= Existblock("SF2520E")
Local lIntACD		:= SuperGetMV("MV_INTACD",.F.,"0") == "1"
Local lMostraCtb	:= .F.
Local lProcessa 	:= .F.
Local lIntegDef		:= ExistFunc("GETROTINTEG") .And. ExistFunc("FWHASEAI") .And. FWHasEAI("MATA410B",.T.,,.T.)//Integracao e rastreabilidade de pedidos ativa

Default lAglCtb   := .F.
Default lContab   := .F.
Default lCarteira := .F.
Default lAutomato := .F.

/* Integração RISK - TOTVS Mais Negócios
 Função responsável por validar a exclusão de um titulo Mais Negócios
 pela rotina de exclusão de Nota Fiscal (MATA521) */
If FindFunction( "RskIsActive" ) .and. FindFunction( "RSKValCan" ) .And. RskIsActive() .and. !lAutomato  .and.  !RSKValCan( cAlias,,,nReg )
	Return .F.
EndIf


If !ctbValiDt( Nil, dDataBase, .T., Nil, Nil, { "FAT004" }, Nil )
	Return .F.
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis de parametrizacao de lancamentos             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ mv_par01 Mostra Lan‡.Contab ?  Sim/Nao                        ³
//³ mv_par02 Aglut. Lan‡amentos ?  Sim/Nao                        ³
//³ mv_par03 Lan‡.Contab.On-Line?  Sim/Nao                        ³
//³ mv_par04 Retornar PV        ?  Carteira/Apto a faturar        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lAutomato
	lProcessa := .T.
ElseIf MsgYesNo(OemToAnsi(STR0009),OemToAnsi(STR0007)) //"Confirma estorno do documento ?"###"Aten‡„o"
	lProcessa := .T.
EndIF

If lProcessa

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inicializa processo de lançamento no modulo PCO ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PcoIniLan("000101")

	If lAutomato
		lMostraCtb := .F.
	Else
		lMostraCtb := MV_PAR01==1
		lAglCtb    := MV_PAR02==1
		lContab    := MV_PAR03==1
		lCarteira  := MV_PAR04==1
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica a Tabela da MarkBrowse                                ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Do Case
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Tratamento dos Documentos de saida                             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Case cAlias == "SF2"
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Integracao com o ACD - Validacao da exclusao da Nota Fiscal de Saida  		 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lIntACD
				lValido := CBMS520VLD()
			ElseIf lMs520VldE
				lValido := ExecTemplate("MS520VLD",.F.,.F.)
			EndIf
			If lValido .And. lMs520Vld
				lValido := ExecBlock("MS520VLD",.F.,.F.)
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Verifica se o estorno do documento de saida pode ser feito     ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aRegSD2 := {}
			aRegSE1 := {}
			aRegSE2 := {}
			If lValido .AND. MaCanDelF2(cAliasSF2,SF2->(RecNo()),@aRegSD2,@aRegSE1,@aRegSE2,,lAutomato,,lCarteira) .And. MA521VerSC6(SF2->F2_FILIAL,SF2->F2_DOC,SF2->F2_SERIE,SF2->F2_CLIENTE,SF2->F2_LOJA)

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Integracao com o ACD - Acerto do CB0 na Exclusao da NF de devolucao via Protheus,			³
				//³ Somente se a etiqueta estiver com NF de Devolucao gravada 		  							³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If lIntACD
					CBSF2520E()
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Pontos de Entrada 										       ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				ElseIf lSF2520ET
					ExecTemplate("SF2520E",.F.,.F.)
				EndIf
				//Conjunto de Alterações 670872
				If AllTrim(Upper(SF2->F2_ESPECIE)) == "CTEOS" .And. FindFunction("GTP1ExcGZH")
					GTP1ExcGZH(SF2->F2_DOC,SF2->F2_SERIE,SF2->F2_CLIENTE,SF2->F2_LOJA)
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Agroindustria  									          ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If FindFunction("OGXUtlOrig") .And. OGXUtlOrig() .And. FindFunction("OGX165")
					OGX165()
				EndIf

				If lSF2520E
					ExecBlock("SF2520E",.F.,.F.)
				EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Estorna o documento de saida                                   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				SF2->(MaDelNFS(aRegSD2,aRegSE1,aRegSE2,lMostraCtb,lAglCtb,lContab,lCarteira))

				//Chamada da Função IntegDef para dispara a rotina de Rastreamento de pedido.
				If lIntegDef
					FwIntegDef("MATA410B",,,, "MATA410B")
				Endif
			EndIf
			MsUnLockAll()

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Tratamento para as Cargas                                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Case cAlias == "DAK"
			If FindFunction("OM521Exclu")
				OM521Exclu()
			EndIf
	EndCase

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Finaliza processo de lancamento no modulo PCO ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PcoFinLan("000101")

EndIf

RestArea(aAreaSF2)
RestArea(aArea)
Return(.T.)

/*/{Protheus.doc} MaCanDelF2

Validacao da exclusao dos Documentos de Saida

@author Eduardo Riera
@since 29.12.2001
@version 1.0
@param cAlias,		caracter,	Alias da Tabela (Opcional)
@param nRegSF2,		numerico,	Recno da linha da tabela (Opcional)
@param aRegSD2,		array,		Array com os Recnos do SD2 (Opcional)
@param aRegSE1,		array,		Array com os Recnos do SE1 (Opcional)
@param aRegSE2,		array,		Array com os Recnos do SE2 (Opcional)
@param cOrigFin,	caracter,	Origem a ser considerado na comparacao com registros
								gerados no modulo financeiro (Opcional)
@param lJob,		logico, se a funcao esta sendo chamada via job/Schedule (Opcional)
@param lLogExNF,	logico, se a funcao irá armazenar log na CV8 (Opcional)

@return Logico, Verdadeiro se não existe pendencia para exclusão do documento de saida
/*/
Function MaCanDelF2(cAlias,nRegSF2,aRegSD2,aRegSE1,aRegSE2,cOrigFin,lJob,lLogExNF,lCarteira)

Local aArea			:= GetArea()
Local aAreaSF2 		:= SF2->(GetArea())
Local aAreaSD2 		:= SD2->(GetArea())
Local aAreaSE2 		:= SE2->(GetArea())
Local aAreaSE1 		:= SE1->(GetArea())
Local aAreaSB6 		:= SB6->(GetArea())
Local aLockSE1 		:= {}
Local aLockSE2 		:= {}
Local aLockSC5 		:= {}
Local aLockSB2 		:= {}
Local lRetorno 		:= .T.
Local dDtDigit 		:= dDataBase
Local cAliasSD2		:= "SD2"
Local cAliasSE1		:= "SE1"
Local cAliasSE2		:= "SE2"
Local cPrefixo 		:= ""
Local cMunic   		:= PadR(GetMv("MV_MUNIC"),Len(SE2->E2_FORNECE))
Local cEstado		:= SuperGetMv( "MV_ESTADO" , .F. )
Local nExcNfs		:= SuperGetMv( "MV_EXCNFS",,180 )
Local nTpPrz		:= SuperGetMv( "MV_TIPOPRZ",,1 )
Local lVldSbt		:= SuperGetMv( "MV_VLDSBT",,.T. )
Local cSerie   		:= ""
local cSerRea		:= ""
Local cNumero  		:= ""
Local cClieFor 		:= ""
Local cLoja    		:= ""
Local cTipo    		:= ""
Local cEspecie		:= ""
Local cMensagem		:= ""
Local lMa520SE1		:= ExistBlock("MA520SE1")
Local lCondVenda	:= .F.
Local nHoras   		:= 0
Local nSpedExc 		:= GetNewPar("MV_SPEDEXC",24)
Local cTipoParc		:= MVNOTAFIS
Local cMsg	 		:= ''
Local lDocRelac 	:= .F.
Local lExcnfs		:= .T.
Local lLegMun       := .F.
Local lProcAdm      := .F.
Local nCountSE1 	:= 0
Local lPriParAdtBx 	:= .F.
Local nValorAdtFR3 	:= 0
Local dDataR 		:= CTOD("01/" + StrZero(Month(SF2->F2_EMISSAO),2) + Str(Year(SF2->F2_EMISSAO)),"DD/MM/YYYY")
Local dDataR1       := CTOD("01/" + StrZero(Month(SF2->F2_EMISSAO),2) + Str(Year(SF2->F2_EMISSAO)),"DD/MM/YYYY")
Local dDtVenISS		:= ''
Local aMunic 		:= {}
Local cMunEst 		:= ''
Local nPosMunic 	:= 0
Local aStruSD2 		:= {}
Local aStruSE1 		:= {}
Local aStruSE2 		:= {}
Local aTimeUf		:= {}
Local cAreac		:= ""
Local cQuery   		:= ""
Local nX       		:= 0
Local cAliasAux		:= "cAliasAux"
Local cQuerySD2		:= ""
Local lAlvoCERTO 	:= .F.
Local cQrySD2		:= ""
Local cAliasTmp		:= "cAliasTmp"
Local cAliasTmpc	:= ""
Local lNFeCancel 	:= SuperGetMV('MV_CANCNFE',.F.,.F.)
Local lNFSeCanc		:= SuperGetMV('MV_CANNFSE',.F.,.F.)
Local cAliasSE6 	:= ""
Local lTesCtrEst    := .F.
Local lMvLibExcl    := SuperGetMv( "MV_LIBEXCL" , .F. , .F. )
Local cHelp			:= ""
Local lAtivaDRP		:= GetNewPar("MV_LJDRP",.F.)			// Parâmetro para ativação de DRP Neogrid
Local cMVRECST		:= SuperGetMv("MV_RECST"+Alltrim(SF2->F2_EST),,"")
Local nTamForn		:= TamSX3("A2_COD")[1]
Local nTamLoja		:= TamSX3("A2_LOJA")[1]
Local nTamTpDoc		:= TamSX3("F6_TIPODOC")[1]
Local cTamParc		:= Space(TamSx3("E2_PARCELA")[1])
Local lSalv			:= .F.  //Variavel para o municipio de Salvador
Local lWmsNew    	:= SuperGetMV("MV_WMSNEW",.F.,.F.)
Local cNatISS	   	:= SuperGetMv("MV_ISS",,"")
Local cHoraRMT		:= ""
Local cNumTit       := ""
Local aFornGNRE 	:= {}
Local cFornST		:= ""
Local cLojaST 		:= ""
Local lMa521FN6		:= ExistBlock("MA521FN6") .AND. ExecBlock("MA521FN6",.F.,.F.) //PE criado temporariamente para atender a issue DSERFAT-4462, após inovação da issue DSERCTR1-7472 deverá ser retirado.
Local lIntGC		:= (SuperGetMV("MV_VEICULO",,"N") == "S")
Local lRskCanc      := IsInCallStack("Rsk020Cancel") //Cancelamento Mais Negócios

Local cFilSE2		:= ""
Local cFilSF6		:= ""
Local cFilSD2		:= ""

If lNFSeCanc .AND. CanWSNFSe()== 0 // JOB ativo, mas a prefeitura não tem WS de cancelamento
	lNFSeCanc := .F.
EndIf

aAdd(aMunic, {"SP", "São Bernardo do Campo", "3548708"})
aAdd(aMunic, {"AL", "Maceió",                "2704302"})
aAdd(aMunic, {"CE", "Fortaleza",             "2304400"})
aAdd(aMunic, {"RN", "Natal",                 "2408102"})
aAdd(aMunic, {"SP", "São Paulo",             "3550308"})
aAdd(aMunic, {"BA", "Salvador",              "2927408"})
aAdd(aMunic, {"PR", "Londrina",              "4113700"})
aAdd(aMunic, {"GO", "Goiânia",               "5208707"})
aAdd(aMunic, {"PE", "Recife",                "2611606"})
aAdd(aMunic, {"PI", "Teresina",              "2211001"})
aAdd(aMunic, {"RS", "Porto Alegre",          "4314902"})
aAdd(aMunic, {"PA", "Parauapebas",           "1505536"})
aAdd(aMunic, {"MG", "Belo Horizonte",        "3106200"})
aAdd(aMunic, {"SP", "Guarulhos",             "3518800"})
aAdd(aMunic, {"MS", "Campo Grande",          "5002704"})
aAdd(aMunic, {"DF", "Brasília",              "5300108"})
aAdd(aMunic, {"RJ", "Rio de Janeiro",        "3304557"})
aAdd(aMunic, {"AL", "Rio Largo",             "2707701"})
aAdd(aMunic, {"RO", "Porto Velho",           "1100205"})
aAdd(aMunic, {"SE", "Aracaju",               "2800308"})
aAdd(aMunic, {"SP", "São José dos Campos",   "3549904"})
aAdd(aMunic, {"SP", "Piracicaba",            "3538709"})

Default lCarteira := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posicionando registros                                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nRegSF2 <> Nil
	dbSelectArea("SF2")
	MsGoto(nRegSF2)
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Inicializa os parametros da Rotina                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DEFAULT cAlias		:= "SF2"
DEFAULT aRegSD2		:= {}
DEFAULT aRegSE1		:= {}
DEFAULT aRegSE2		:= {}
DEFAULT cOrigFin	:= "MATA460"
DEFAULT lJob		:= .F.
DEFAULT lLogExNF	:= .F.

cSerie 		:= (cAlias)->F2_SERIE
cSerRea		:= SerieNFID((cAlias), 2, "F2_SERIE")
cNumero 	:= (cAlias)->F2_DOC
cClieFor	:= (cAlias)->F2_CLIENTE
cLoja   	:= (cAlias)->F2_LOJA
cEspecie	:= (cAlias)->F2_ESPECIE
cTipo   	:= (cAlias)->F2_TIPO
dDtdigit 	:= IIf(!Empty((cAlias)->F2_DTDIGIT),(cAlias)->F2_DTDIGIT,(cAlias)->F2_EMISSAO)
cPrefixo 	:= Padr(IIf(Empty((cAlias)->F2_PREFIXO) .Or. SuperGetMv("MV_CMPDEVC",.F.,.F.),&(GetMv("MV_1DUPREF")),(cAlias)->F2_PREFIXO),TAMSX3("E1_PREFIXO")[1])

cHoraRMT := SuperGetMv("MV_HORARMT",.F.,"2")
If ValType(cHoraRMT) == "L"
	cHoraRMT := If(cHoraRMT, "1", "2")
Else
	cHoraRMT := If(cHoraRMT == NIL, "2", cHoraRMT)
EndIf

//Valida os parametros pois eles não são utilizados para Salvador(Conforme o update UpdFTEX01)
If Alltrim(SM0->M0_CODMUN) == aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Salvador"}),3]
	//Informa os valores padrões
	nExcNfs		:= 180
	nTpPrz		:= 1
	lVldSbt		:= .T.
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se existe documentos relacionados a nota, caso existir não será possível a exclusão   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !(cTipo $ "C/I/P/D")
	cQuerySD2 := "SELECT D2_NFORI,D2_SERIORI "
	cQuerySD2 += "FROM "+RetSqlName("SD2")+" SD2 "
	cQuerySD2 += "WHERE D2_FILIAL = '"+xFilial("SF2")+"' AND D2_NFORI = '"+cNumero+"' AND D2_SERIORI = '"+cSerie+"' AND D2_TIPO IN ('C','I','P') AND D_E_L_E_T_=' ' "
	cQuerySD2 += "ORDER BY D2_FILIAL,D2_NFORI,D2_SERIORI"
	cQuerySD2 := ChangeQuery(cQuerySD2)
	DBUseArea(.T.,"TOPCONN",TcGenQry(,,cQuerySD2),cAliasAux,.T.,.T.)
	If cPaisLoc <> "PER" .And. (cAliasAux)->( !Eof() )
		lRetorno 	:= .F.
		lDocRelac 	:= .T.
	EndIf
	(cAliasAux)->(DbCloseArea())
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificando se encontrou documentos relacionados               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lDocRelac
	//Documento: XXXXXX Serie:XXX não póde ser excluido.
	//Verifique documentos relacionados.
	//Bruno Cremaschi
	If IsBlind()
		Conout(STR0015+': '+cNumero+' '+STR0016+': '+cSerRea+' '+STR0017+'.'+CRLF+STR0018+'.')
	Else
		Alert(STR0015+': '+cNumero+' '+STR0016+': '+cSerRea+' '+STR0017+'.'+CRLF+;
				STR0018+'.')
	EndIf
	If lJob .And. lLogExNF
		ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;				//"Falha na exclusão do documento de saída"
					,STR0015+': '+cNumero+' '+STR0016+': '+cSerRea+' '+STR0017+'.'+CRLF+STR0018+'.';
					,"EXCLUINF")
	EndIf
EndIf

//Efetua validação da integração com o GFE
lRetorno := MATA521IPG(.F.)

//----------------------------------------------------------------------------------------------------------//
// As notas geradas através dos módulos do SIGAOFI, SIGAPEC e SIGAVEI só podem ser canceladas pelas rotinas //
// dos módulos SIGAOFI, SIGAPEC e SIGAVEI                                                                   //
//----------------------------------------------------------------------------------------------------------//
If lRetorno .and. lIntGC .and. ExistFunc("FMX_CDELF2")
	If !FMX_CDELF2(cAlias, @cMensagem, lJob)
		Help(" ",1,"NAOEXCNFS","NAOEXCNFS",cMensagem,1,0)

		If lJob .And. lLogExNF
			ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerie;			//"Falha na exclusão do documento de saída"
						,MaFmtHlp("NAOEXCNFS", cMensagem);
						,"EXCLUINF")
		EndIf

		lRetorno := .F.
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//|Validacao para verificar se possivel a exclusao de NF Serviço pra SP CAPITAL e Salvador BA|
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno .AND. cPaisLoc == "BRA" // Verifica se o campo D2_ESTOQUE existe pois o mesmo é criado por update

	cQrySD2 := " SELECT D2_DOC,D2_SERIE,D2_CLIENTE,D2_CF,D2_ESTOQUE,D2_TES,D2_LOJA,D2_CODISS,SD2.R_E_C_N_O_,F4_ISSST,F3_TIPO, F2_NFSUBST, F2_SERSUBS "
	cQrySD2 += " FROM "+RetSqlName("SD2")+" SD2 "
	cQrySD2 += " INNER JOIN "+RetSqlName("SF2")+" SF2 ON SF2.F2_FILIAL = '" + xFilial("SF2") + "' AND SF2.F2_DOC = SD2.D2_DOC AND SF2.F2_SERIE = SD2.D2_SERIE AND SF2.D_E_L_E_T_ = ' ' "
	cQrySD2 += " INNER JOIN "+RetSqlName("SF4")+" SF4 ON SF4.F4_FILIAL = '" + xFilial("SF4") + "' AND SF4.F4_CODIGO = SD2.D2_TES AND SF4.D_E_L_E_T_ = ' ' "
	cQrySD2 += " INNER JOIN "+RetSqlName("SF3")+" SF3 ON SF3.F3_FILIAL = '" + xFilial("SF3") + "' AND SF3.F3_NFISCAL = SD2.D2_DOC AND SF3.F3_SERIE = SD2.D2_SERIE AND SF3.F3_CLIEFOR = SD2.D2_CLIENTE AND SF3.F3_LOJA = SD2.D2_LOJA AND SF3.D_E_L_E_T_ = ' ' "
	cQrySD2 += " WHERE SD2.D2_FILIAL = '"+xFilial("SF2")+"' AND SD2.D2_DOC = '"+cNumero+"' AND SD2.D2_SERIE = '"+cSerie+"' AND SD2.D2_CLIENTE = '"+cClieFor+"' AND SD2.D2_LOJA = '"+cLoja+"' AND SD2.D_E_L_E_T_ = ' ' "

	If cEstado == "BA" .AND. Alltrim(SM0->M0_CODMUN) == aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Salvador"}),3]
		cQrySD2 += " AND SF2.F2_NFSUBST = '' AND SF2.F2_SERSUBS = '' "
	EndIf

	cQrySD2 := ChangeQuery(cQrySD2)

	DBUseArea(.T.,"TOPCONN",TcGenQry(,,cQrySD2),cAliasTmp,.T.,.T.)

	While (cAliasTmp)->( !Eof() )
		//Verifica se o produto atualiza estique, se apenas um produto
		//atualizar, é necessário a validação do fechamento do estoque
		If (cAliasTmp)->D2_ESTOQUE == "S"
			lTesCtrEst := .T.
		EndIf
		//Validaçao de Nf serviço
		If ( (cAliasTmp)->F3_TIPO == "S" .AND.(cAliasTmp)->D2_ESTOQUE == "N" .AND.;
			!Empty( (cAliasTmp)->D2_CODISS ) .AND. (cAliasTmp)->F4_ISSST == "1" )
			lExcNfs := .F.
		Else
			//Notas que nao sao de servico, mas TES de todos os itens da nf nao controla estoque
			//exclusçao permitida sem regras
			If (cAliasTmp)->D2_ESTOQUE == "N"
				lExcNfs := .T.
				Exit
			EndIf

		EndIf

		(cAliasTmp)->( DBSkip() )

	EndDo

	(cAliasTmp)->( DBCloseArea() )

EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//|Validacao para verificar se existe integração com DRP Neogrid, consultando o campo.
//|Preenchido, a informação da nota foi exportada e não poderá ser cancelada.
//|A única maneira após o envio é fazer uma nota fiscal de entrada (devolução).
//|Requisito M_VAR001\002206
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno .AND. lAtivaDRP .AND. SD2->(ColumnPos('D2_DRPEXP')) > 0 // Verifica se o campo D2_DRPEXP existe pois verifico se o campo foi exportado para o DRP.

	cQrySD2 := " SELECT D2_DOC,D2_SERIE,D2_CLIENTE,D2_CF,D2_ESTOQUE,D2_TES,D2_LOJA,D2_CODISS,D2_DRPEXP,SD2.R_E_C_N_O_ "
	cQrySD2 += " FROM "+RetSqlName("SD2")+" SD2 "
	cQrySD2 += " INNER JOIN "+RetSqlName("SF2")+" SF2 ON SF2.F2_FILIAL = '" + xFilial("SF2") + "' AND SF2.F2_DOC = SD2.D2_DOC AND SF2.F2_SERIE = SD2.D2_SERIE AND SF2.D_E_L_E_T_ = ' ' "
	cQrySD2 += " WHERE SD2.D2_FILIAL = '"+xFilial("SF2")+"' AND SD2.D2_DOC = '"+cNumero+"' AND SD2.D2_SERIE = '"+cSerie+"' AND SD2.D2_CLIENTE = '"+cClieFor+"' AND SD2.D2_LOJA = '"+cLoja+"' AND SD2.D_E_L_E_T_ = ' ' "

	cQrySD2 := ChangeQuery(cQrySD2)

	DBUseArea(.T.,"TOPCONN",TcGenQry(,,cQrySD2),cAliasTmp,.T.,.T.)

	While (cAliasTmp)->( !Eof() )
		//Verifica se a informação da nota foi exportada.
		//Se sim, não poderá ser cancelada.
		//Se não, a nota pode ser cancelada.
		If !Empty( (cAliasTmp)->D2_DRPEXP)
			lRetorno := .F.
			//"Nao foi possivel excluir a nota "+", pois a mesma foi exportada para o DRP Neogrid."+" Faca uma Nota Fiscal de Entrada (Devolucao)."
			If IsBlind()
				Conout(STR0059 + Alltrim(cNumero) + "/" + cSerie + STR0060 + Chr(10) + STR0061)
			Else
				MsgAlert(STR0059 + Alltrim(cNumero) + "/" + cSerie + STR0060 + Chr(10) + STR0061)
			EndIf
			Exit
		EndIf

		(cAliasTmp)->(DBSkip())

	EndDo

	(cAliasTmp)->( DBCloseArea() )

EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificando o Fechamento Fiscal                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno .And. !FisChkDt(dDtDigit)
	lRetorno := .F.
EndIf

If !lNFeCancel
	If lRetorno .And. "SPED"$cEspecie .And. ((cAlias)->F2_FIMP$"TSN") //verificacao apenas da especie como SPED e notas que foram transmitidas ou impressoo DANFE

		//Bloqueia exclusão do documento apenas para notas que tenham o cancelamento autorizado
		If !Empty(SF2->F2_DAUTNFE)
			If cHoraRMT == "3"
				aTimeUf := A103HORA()
				nHoras := SubtHoras(SF2->F2_DAUTNFE, SF2->F2_HAUTNFE,dDataBase, aTimeUf[2] )
			Else
				nHoras := SubtHoras(SF2->F2_DAUTNFE, SF2->F2_HAUTNFE,dDataBase, substr(Time(),1,2)+":"+substr(Time(),4,2) )
			EndIf
			If nHoras > nSpedExc
				If IsBlind()
					Conout(STR0069 + " " + Alltrim(STR(nSpedExc)) + " " + STR0070)		//"Não foi possível excluir a(s) nota(s), pois o prazo em horas para o cancelamento da(s) NF-e é de:"##"horas"
				Else
					MsgAlert(STR0069 + " " + Alltrim(STR(nSpedExc)) + " " + STR0070)	//"Não foi possível excluir a(s) nota(s), pois o prazo em horas para o cancelamento da(s) NF-e é de:"##"horas"
				EndIf

				If lJob .And. lLogExNF
					ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerie;									//"Falha na exclusão do documento de saída"
								,MaFmtHlp(, STR0069 + " " + Alltrim(STR(nSpedExc)) + " " + STR0070);	//"Não foi possível excluir a(s) nota(s), pois o prazo em horas para o cancelamento da(s) NF-e é de:"##"horas"
								,"EXCLUINF")
				EndIf

				lRetorno := .F.
			Endif
		EndIf
	EndIf
EndIf

If !lNFeCancel .AND. AllTrim(cEspecie) == "CTEOS"
	lRetorno := GTP001EXC(cNumero, cSerie, cClieFor, cLoja, cEspecie, cTipo, cPrefixo, dDtDigit)
EndIf

nPosMunic := aScan(aMunic,{|x| Alltrim(x[3])==AllTrim(SM0->M0_CODMUN)})

If lRetorno .And. !lExcNfs .And. (nPosMunic > 0)

	cMunEst := aMunic[nPosMunic,2] +' - '+ aMunic[nPosMunic,1]

	//Verifica se o municipio tem legislacao especial
	If (aScan(aMunic,{|x| Alltrim(x[3])==AllTrim(SM0->M0_CODMUN)}) <> 0 .And. ;
		(aScan(aMunic,{|x| Alltrim(x[1])==AllTrim(cEstado)}) <> 0))
		lLegMun := .T.
	EndIf

	dbSelectarea("SE2")
	dbSetOrder(1)

	//Busca a data de vencimento ISS
	DbSeek(xFilial("SE2") + cPrefixo+cNumero + cTamParc + "TX " + cMunic + "00")
	While (!SE2->(Eof()) .And. ((xFilial("SE2") + cPrefixo+cNumero + cTamParc + "TX " + cMunic + "00") == ;
			(SE2->E2_FILIAL + SE2->E2_PREFIXO + SE2->E2_NUM + SE2->E2_PARCELA + SE2->E2_TIPO + SE2->E2_FORNECE + SE2->E2_LOJA)))
		If (AllTrim(SE2->E2_NATUREZ) == "ISS")
			dDtVenISS = SE2->E2_VENCREA
		EndIf
		SE2->(DbSkip())
	End

	If lRetorno .And. lLegMun
		If (nTpPrz == 1)
			dDataR := UltDia(StrZero(Month(dDataR),2), StrZero(Year(dDataR),4)) + nExcNfs
			cMsg   := STR0025 + cMunEst +  STR0028 + str(nExcNfs) + STR0029 + CHR(13)+CHR(10)+ STR0026 + DtOC(dDataR) //"O prazo para exclusão de NF de serviço para o município de XXXXX é de ate o dia XX do mes subsequente da emissao." " Data Limite "
		Else
			If (nTpPrz == 2)
				dDataR := SF2->F2_EMISSAO+nExcNfs
				cMsg := STR0025 + cMunEst + STR0030 + str(nExcNfs) + STR0031 + CHR(13)+CHR(10)+ STR0026 + DtOC(dDataR)  //"O prazo para exclusão de NF de serviço para o município de XXXXXXXX é de ate XX dias a partir da sua emissão." " Data Limite "
			EndIf
		EndIf

		//Salvador e Londrina
		If (Alltrim(cEstado) == "BA" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Salvador"}),3] == Alltrim(SM0->M0_CODMUN)) .OR.;
			(Alltrim(cEstado) == "PR" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Londrina"}),3] == Alltrim(SM0->M0_CODMUN))

			If (Alltrim(cEstado) == "BA" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Salvador"}),3] == Alltrim(SM0->M0_CODMUN))
				lSalv := .T.
			EndIf

			dDataR := dDataR1 + If(lSalv,;
			                       90,;				//90 dias após a emissão da NF
								   40)				// sempre caira no proximo mes


			If MSDATE() > UltDia(StrZero(Month(dDataR),2), StrZero(Year(dDataR),4))
				If IsBlind()
					Conout(STR0025 + cMunEst +  If(lSalv,STR0062,STR0027) + CHR(13)+CHR(10)+ STR0026 + DtOC(UltDia(StrZero(Month(dDataR),3), StrZero(Year(dDataR),4))))
				Else
					Aviso("SIGAFAT",STR0025 + cMunEst +  If(lSalv,STR0062,STR0027) + CHR(13)+CHR(10)+ STR0026 + DtOC(UltDia(StrZero(Month(dDataR),3), StrZero(Year(dDataR),4))),{"Ok"},2)//"O prazo para exclusão de NF de serviço para o município de Salvador - BA é de ate o ultimo dia do mes subsequente da emissao. " Data Limite "
				EndIf

				If lJob .And. lLogExNF
					//Bruno Cremaschi
					ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerie;				//"Falha na exclusão do documento de saída"
								,"SIGAFAT"+ CHR(13)+CHR(10)+STR0025 + cMunEst +  If(lSalv,STR0062,STR0027) + CHR(13)+CHR(10)+ STR0026 + DtOC(UltDia(StrZero(Month(dDataR),3), StrZero(Year(dDataR),4)));
								,"EXCLUINF")
				EndIf
				lRetorno:= .F.
			Else
				//Vencimento do ISS ja expirado somente por processo administrativo
				If (!Empty(dDtVenISS) .And. (MSDATE() > dDtVenISS))
					lProcAdm = .T.
				EndIf
			EndIf
		Else
			//tratamento para o municipio de Aracaju se maior que 72 horas(3dias), se menor não pode ter recolhido ISS
			If (Alltrim(cEstado) == "SE" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Aracaju"}),3] == Alltrim(SM0->M0_CODMUN))
				If (MSDATE()> dDataR)
					If IsBlind()
						Conout(cMsg)
					Else
						Aviso("SIGAFAT",cMsg,{"Ok"},2)
					EndIf
					If lJob .And. lLogExNF
						//Bruno Cremaschi
						ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;			//"Falha na exclusão do documento de saída"
									,MaFmtHlp(/*Nome do Help*/, "SIGAFAT"+ CHR(13)+CHR(10)+cMsg);
									,"EXCLUINF")
					EndIf
					lRetorno:= .F.
				Else
					//Vencimento do ISS ja expirado somente por processo administrativo
					If (!Empty(dDtVenISS) .And. (MSDATE() > dDtVenISS))
						lProcAdm = .T.
					EndIf
				EndIf
			Else
				//Tratamento para Porto Velho e Rio Largo sempre por processo administrativo)
				If (Alltrim(cEstado) == "RO" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Porto Velho"}),3] == Alltrim(SM0->M0_CODMUN)) .OR.;
					(Alltrim(cEstado) == "AL" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Rio Largo"}),3] == Alltrim(SM0->M0_CODMUN))
					lProcAdm = .T.
				Else
					//Tratamento para Rio de Janeiro por processo administrativo)
					If ((Alltrim(cEstado) == "RJ" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Rio de Janeiro"}),3] == Alltrim(SM0->M0_CODMUN)))
						If ((!Empty(dDtVenISS) .And. (MSDATE() > dDtVenISS)) .Or. ;
							(MSDATE() > dDataR))
							If ((Empty((cAlias)->F2_NFSUBST)) .AND.;
								(Empty((cAlias)->F2_SERSUBS)))
								If(lVldSbt)
									If IsBlind() .Or. !(MsgYesNo(STR0032)) //"Esta nota está sem substituta. Confirma a exclusão?"
										lRetorno:= .F.
									Else
										lProcAdm = .T.
									EndIf
									If lJob .And. lLogExNF
										//Bruno Cremaschi
										ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;			//"Falha na exclusão do documento de saída"
													,MaFmtHlp(/*Nome do Help*/, "Esta nota esta sem substituta");
													,"EXCLUINF")
									EndIf
								Else
									lProcAdm = .T.
								EndIf
							EndIf
						EndIf
					Else
						If MSDATE()> dDataR
							If IsBlind()
								Conout(cMsg)
							Else
								Aviso("SIGAFAT",cMsg,{"Ok"},2)
							EndIf
							If lJob .And. lLogExNF
								//Bruno Cremaschi
								ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;					//"Falha na exclusão do documento de saída"
											,MaFmtHlp(/*Nome do Help*/, cMsg);
											,"EXCLUINF")
							EndIf
							lRetorno:= .F.
						Else
							//TipoPrz==1
							If(((Alltrim(cEstado) == "AL" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Maceió"}),3] == Alltrim(SM0->M0_CODMUN)) .OR.;
								(Alltrim(cEstado) == "CE" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Fortaleza"}),3] == Alltrim(SM0->M0_CODMUN)) .OR.;
								(Alltrim(cEstado) == "RN" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Natal"}),3] == Alltrim(SM0->M0_CODMUN)) .OR.;
								(Alltrim(cEstado) == "GO" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Goiânia"}),3] == Alltrim(SM0->M0_CODMUN)) .OR.;
								(Alltrim(cEstado) == "PE" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Recife"}),3] == Alltrim(SM0->M0_CODMUN)) .OR.;
								(Alltrim(cEstado) == "PI" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Teresina"}),3] == Alltrim(SM0->M0_CODMUN)) .OR.;
								(Alltrim(cEstado) == "RS" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Porto Alegre"}),3] == Alltrim(SM0->M0_CODMUN)) .OR.;
								(Alltrim(cEstado) == "PA" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Parauapebas"}),3] == Alltrim(SM0->M0_CODMUN)) .OR.;
								(Alltrim(cEstado) == "MG" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Belo Horizonte"}),3] == Alltrim(SM0->M0_CODMUN)) .OR.;
								(Alltrim(cEstado) == "SP" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Guarulhos"}),3] == Alltrim(SM0->M0_CODMUN)) .OR.;
								(Alltrim(cEstado) == "MS" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Campo Grande"}),3] == Alltrim(SM0->M0_CODMUN)) .OR.;
								(Alltrim(cEstado) == "DF" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="Brasília"}),3] == Alltrim(SM0->M0_CODMUN)) .OR.;
								(Alltrim(cEstado) == "SP" .And. aMunic[aScan(aMunic,{|x| Alltrim(x[2])=="São José dos Campos"}),3] == Alltrim(SM0->M0_CODMUN))))
								//Vencimento do ISS ja expirado somente por processo administrativo
								If (!Empty(dDtVenISS) .And. (MSDATE() > dDtVenISS))
									lProcAdm = .T.
								Else
									If ((Empty((cAlias)->F2_NFSUBST)) .AND. (Empty((cAlias)->F2_SERSUBS)))
										If(lVldSbt)
											If IsBlind() .Or. !(MsgYesNo(STR0032)) //"Esta nota está sem substituta. Confirma a exclusão?"
												Conout(STR0032)
												lRetorno:= .F.
											Else
												lProcAdm = .F.
											EndIf
											If lJob .And. lLogExNF
												//Bruno Cremaschi
												ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;				//"Falha na exclusão do documento de saída"
															,MaFmtHlp(/*Nome do Help*/, STR0071);					//"Esta nota está sem substituta"
															,"EXCLUINF")
											EndIf
										Else
											lProcAdm = .T.
										EndIf
									EndIf
								EndIf
							Else
								//tipoprz==2
								//Vencimento do ISS ja expirado somente por processo administrativo
								If (!Empty(dDtVenISS) .And. (MSDATE() > dDtVenISS))
									lProcAdm = .T.
								EndIf
							EndIf
						EndIf
					EndIf
				EndIf
			Endif
		EndIf
	Endif
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificando o Fechamento dos Estoques³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno .And. dDtDigit <= MVUlmes() .And. !lLegMun .AND. ( !lMvLibExcl .Or. !( lMvLibExcl .And. !lTesCtrEst ) )
	//Validação sobre a movimentação de estoque da nota, existem notas que não movimentam estoque --MV_LIBEXCL
	Help( " ", 1, "FECHTO" )
	If lJob .And. lLogExNF
		//Bruno Cremaschi
		ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;						//"Falha na exclusão do documento de saída"
				,MaFmtHlp("FECHTO");
				,"EXCLUINF")
	EndIf
	lRetorno := .F.
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificando as pendencias de localizacoes                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno .And. cPaisLoc<>"BRA" .And. !Empty((cAlias)->F2_PEDPEND)
	dbSelectArea("SC5")
	dbSetOrder(1)
	If MsSeek(xFilial("SC5")+(cAlias)->F2_PEDPEND)
		//Bruno Cremaschi
		Help(" ",1,"A520PEND",,RetTitle("F2_DOC")+" "+cSerRea+"/"+cNumero+Chr(13)+Chr(10)+RetTitle("C9_PEDIDO")+" "+(cAlias)->F2_PEDPEND,4,2)
		If lJob .And. lLogExNF
			//Bruno Cremaschi
			ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;						//"Falha na exclusão do documento de saída"
						,MaFmtHlp("A520PEND",RetTitle("F2_DOC")+" "+cSerRea+"/"+cNumero+Chr(13)+Chr(10)+RetTitle("C9_PEDIDO")+" "+(cAlias)->F2_PEDPEND);
						,"EXCLUINF")
		EndIf
		lRetorno := .F.
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificando se a NF tem como origem a rotina FINA720 Gerar NF  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno .And. !IsInCallStack('FINA720')
	cQuery := "SELECT E1_PREFIXO, E1_NUM, E1_CHAVENF "
	cQuery += " FROM "+RetSqlName("SE1")
	cQuery += " WHERE E1_FILIAL='"+xFilial("SE1")+"' AND "
	cQuery += " E1_NUM='"+SF2->(F2_DOC)+"' AND "
	cQuery += " E1_PREFIXO='"+SF2->(F2_SERIE)+"' AND "
	cQuery += " E1_CHAVENF='"+SF2->(F2_DOC+F2_SERIE)+"' AND "
	cQuery += " D_E_L_E_T_=' '"
	cQuery += " ORDER BY E1_PREFIXO, E1_NUM, E1_CHAVENF "
	cQuery := ChangeQuery(cQuery)

	dbUseArea(.T., "TopConn", TCGenQry(,,cQuery), "QRYSE1", .F., .F.)
	IF QRYSE1->(!EOF())
		Help(" ",1,"NAOEXCLREM")
		lRetorno := .F.
	EndIf
	QRYSE1->(dbCloseArea())
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificando retornos                                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno
	If !Empty(SF2->F2_CARGA) .And. !Empty(SF2->F2_SEQCAR)
		DbSelectArea("DAK")
		DbSetOrder(1)
		//Nao permite a exclusao se houve retorno
		If MsSeek(xFilial("DAK")+SF2->F2_CARGA+SF2->F2_SEQCAR)
			If DAK->DAK_ACEFIN<>"2"
				Help(" ",1,"OMS320JAFIN") //"Acerto financeiro ja efetuado"
				If lJob .And. lLogExNF
					//Bruno Cremaschi
					ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;						//"Falha na exclusão do documento de saída"
								,MaFmtHlp("OMS320JAFIN");
								,"EXCLUINF")
				EndIf
				lRetorno := .F.
			Else
				If DAK->DAK_ACECAR<>"2"
					Help(" ",1,"OMS320JAAC") //Carga ja encerrada
					If lJob .And. lLogExNF
						//Bruno Cremaschi
						ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;					//"Falha na exclusão do documento de saída"
									,MaFmtHlp("OMS320JAAC");
									,"EXCLUINF")
					EndIf
					lRetorno := .F.
				Endif
			Endif
		Endif
	Endif
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificando as integracoes com o modulo Financeiro             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If lRetorno .And. !Empty(SF2->F2_DUPL)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verificando as Notas de Debito ao Fornecedor                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno .And. (cAlias)->F2_TIPO=="D"
		dbSelectArea("SE2")
		dbSetOrder(6)

		aStruSE2 := SE2->(dbStruct())
		cAliasSE2:= "MACANDELNF"

		cQuery := "SELECT SE2.*,SE2.R_E_C_N_O_ SE2RECNO "
		cQuery += "FROM "+RetSqlName("SE2")+" SE2 "
		cQuery += "WHERE SE2.E2_FILIAL='"+xFilial("SE2")+"' AND "
		cQuery += "SE2.E2_PREFIXO='"+cPrefixo+"' AND "
		cQuery += "SE2.E2_NUM='"+(cAlias)->F2_DUPL+"' AND "
		cQuery += "SE2.E2_FORNECE='"+cClieFor+"' AND "
		cQuery += "SE2.E2_LOJA='"+cLoja+"' AND "
		cQuery += "SE2.D_E_L_E_T_=' ' "

		cQuery := ChangeQuery(cQuery)

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSE2,.T.,.T.)

		For nX := 1 To Len(aStruSE2)
			If aStruSE2[nX][2] <> "C"
				TcSetField(cAliasSE2,aStruSE2[nX][1],aStruSE2[nX][2],aStruSE2[nX][3],aStruSE2[nX][4])
			EndIf
		Next nX
		dbSelectArea(cAliasSE2)
		While ( !Eof() .And. xFilial("SE2") == (cAliasSE2)->E2_FILIAL .And.;
				cClieFor == (cAliasSE2)->E2_FORNECE .And.;
				cLoja == (cAliasSE2)->E2_LOJA .And.;
				cPrefixo == (cAliasSE2)->E2_PREFIXO .And.;
				(cAlias)->F2_DUPL == (cAliasSE2)->E2_NUM .And.;
				lRetorno )
			If (cAliasSE2)->E2_TIPO $ MV_CPNEG .And. AllTrim((cAliasSE2)->E2_ORIGEM) $ "MATA460N|MATA466N"

				If FaCanDelCP(cAliasSE2,cOrigFin,,@cHelp)
					AAdd(aLockSE2,(cAliasSE2)->E2_PREFIXO+(cAliasSE2)->E2_NUM+(cAliasSE2)->E2_PARCELA+(cAliasSE2)->E2_TIPO+(cAliasSE2)->E2_FORNECE+(cAliasSE2)->E2_LOJA)
					AAdd(aRegSE2,(cAliasSE2)->SE2RECNO)
				Else
					If lJob .And. lLogExNF
						//Bruno Cremaschi
						ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;						//"Falha na exclusão do documento de saída"
									,MaFmtHlp(cHelp);
									,"EXCLUINF")
					EndIf

					lRetorno := .F.
					Exit
				EndIf
			EndIf
			dbSelectArea(cAliasSE2)
			dbSkip()
		EndDo
		dbSelectArea(cAliasSE2)
		dbCloseArea()
		dbSelectArea("SE2")
	ElseIf lRetorno .And. (cAlias)->F2_TIPO=="N" .And. (cAlias)->F2_VALISS > 0
		cFilSE2	:= xFilial("SE2")
   	    DbSelectArea("SE2")
	    SE2->(DbsetOrder(1))//Indice E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA
	    SE2->(DbGoTop())
		If DbSeek(cFilSE2+SF2->F2_PREFIXO+SF2->F2_DOC)
			Do While SE2->(!Eof()).And. cFilSE2 == SE2->E2_FILIAL .AND. SE2->E2_PREFIXO == SF2->F2_PREFIXO .AND. SE2->E2_NUM == SF2->F2_DOC
				If ALLTRIM(SE2->E2_NATUREZ) $ Alltrim(&(cNatISS)) .AND. ALLTRIM(SE2->E2_TIPO) == "TX" .AND. ALLTRIM(SE2->E2_ORIGEM) $ "MATA460"
					If !EMPTY(SE2->E2_BAIXA)
						cMensagem := STR0072 + " " + STR0075 + " " +SE2->E2_NUM + "/" + SE2->E2_PREFIXO + CHR(10) + CHR(13)		//"Não é possível excluir esse documento pelo fato de que existe um título a pagar de imposto em Borderô."##"Título: "
						cMensagem += STR0073																					//"Para excluir esse documento, será necessário, primeiramente, estornar esse título através do módulo financeiro."
						Help(" ",1,"NAOEXCNFS","NAOEXCNFS",cMensagem,2,0)
						If lJob .And. lLogExNF
							ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;						//"Falha na exclusão do documento de saída"
										,MaFmtHlp("NAOEXCNFS",cMensagem);
										,"EXCLUINF")
						EndIf
						lRetorno := .F.
						Exit
					EndIf
				Endif
				SE2->(DbSkip())
			EndDo
		EndIf
	EndIf

	//-- SIGATMS = Retorna Tipo do Titulo (E1_TIPO) com base no parametro MV_TMSTIPT
	If IntTms() .And. nModulo==43
		TmsTpTit(@cTipoParc)
	EndIf

	//-- DMS - Retorna Tipo do Titulo (E1_TIPO) utilizado no fechamento
	If lIntGC .and. (nModulo == 11 .or. nModulo == 14 .or. nModulo == 41) .AND. ExistFunc("FMX_TPTIT")
		FMX_TPTIT(@cTipoParc, cPrefixo , (cAlias)->F2_DUPL , cClieFor , cLoja )
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verificando os titulos a receber, tranferencia automatica.     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If SuperGetMv("MV_RETAUTO",,.F.)
		cAliasSE6:= "TRANSFAUTO"
		BeginSql Alias cAliasSE6
			SELECT SE1.R_E_C_N_O_ SE1RECNO, SE1.E1_TIPO FROM %Table:SE1% SE1
			JOIN %Table:SE6% SE6
			ON	SE6.E6_FILORIG = SE1.E1_FILIAL AND
			SE6.E6_NUMSOL = SE1.E1_NUMSOL AND
			SE6.E6_PREFIXO = SE1.E1_PREFIXO AND
			SE6.E6_NUM = SE1.E1_NUM AND
			SE6.E6_PARCELA = SE1.E1_PARCELA AND
			SE6.E6_TIPO = SE1.E1_TIPO AND
			SE6.E6_SITSOL = '2' AND
			SE6.%notdel%
			WHERE SE1.E1_FILIAL= %xFilial:SE1%  AND
			SE1.E1_PREFIXO= %Exp:cPrefixo% AND
			SE1.E1_NUM= %Exp:(cAlias)->F2_DUPL% AND
			SE1.E1_CLIENTE= %Exp:cClieFor% AND
			SE1.E1_LOJA= %Exp:cLoja% AND
			SE1.E1_NUMSOL <> ' ' AND
			SE1.%notdel%
		EndSql
		While (cAliasSE6)->(!Eof())
			If (cAliasSE6)->E1_TIPO $ IIf(cPaisLoc == "BRA",cTipoParc,cEspecie)
				Fa620Estor((cAliasSE6)->SE1RECNO,.F.)
			EndIf
			(cAliasSE6)->(dbSkip())
		EndDo
		(cAliasSE6)->(DbCloseArea())
		dbSelectArea(cAliasSE1)
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verificando os titulos a receber                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea("SE1")
	dbSetOrder(2)
	aStruSE1 := SE1->(dbStruct())
	cAliasSE1:= "MACANDELNF"

	cQuery := "SELECT SE1.*,SE1.R_E_C_N_O_ SE1RECNO "
	cQuery += "FROM "+RetSqlName("SE1")+" SE1 "
	cQuery += "WHERE SE1.E1_FILIAL='"+xFilial("SE1")+"' AND "
	cQuery += "SE1.E1_PREFIXO='"+cPrefixo+"' AND "
	cQuery += "SE1.E1_NUM='"+(cAlias)->F2_DUPL+"' AND "
	cQuery += "SE1.E1_CLIENTE='"+cClieFor+"' AND "
	cQuery += "SE1.E1_LOJA='"+cLoja+"' AND "
	cQuery += "SE1.D_E_L_E_T_=' ' "
	cQuery += "ORDER BY SE1.E1_PEDIDO DESC "

	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSE1,.T.,.T.)
	For nX := 1 To Len(aStruSE1)
		If aStruSE1[nX][2] <> "C"
			TcSetField(cAliasSE1,aStruSE1[nX][1],aStruSE1[nX][2],aStruSE1[nX][3],aStruSE1[nX][4])
		EndIf
	Next nX
	dbSelectArea(cAliasSE1)

	If cPaisLoc $ "BRA|MEX" .and. (FunName() == "MATA521A" .Or. lRskCanc)
		// 1- Tem apenas Adiantamento ...
		lAlvoCERTO := .F.
		if (cAlias)->F2_TIPO != "D"
			if lRetorno .And. (cAliasSE1)->(!Eof())
				if (cAliasSE1)->E1_VALOR <> (cAliasSE1)->E1_SALDO
					if A410UsaAdi((cAlias)->F2_COND)

						cQ := "SELECT SUM(FR3_VALOR) AS FR3_VALOR "
						cQ += "FROM "+RetSqlName("FR3")+" "
						cQ += "WHERE FR3_FILIAL = '"+xFilial("FR3")+"' "
						If lAdtCompart
							cQ += " AND (FR3_FILORI = '" + cFilAnt + "' OR FR3_FILORI = ' ') "
						EndIf
						cQ += "AND FR3_CART = 'R' "
						cQ += "AND FR3_TIPO IN "	+FormatIn(MVRECANT,"/")+" "
						cQ += "AND FR3_CLIENT = '"	+SF2->F2_CLIENTE+"' "
						cQ += "AND FR3_LOJA = '"	+SF2->F2_LOJA+"' "
						cQ += "AND FR3_DOC = '"		+SF2->F2_DOC+"' "
						cQ += "AND FR3_SERIE = '"	+SF2->F2_SERIE+"' "
						cQ += "AND D_E_L_E_T_= ' ' "

						cQ := ChangeQuery(cQ)

						dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQ),"TRBFR3",.T.,.T.)
						TcSetField("TRBFR3","FR3_VALOR","N",TamSX3("FR3_VALOR")[1],TamSX3("FR3_VALOR")[2])

						nValorAdtFR3 := TRBFR3->FR3_VALOR
						TRBFR3->(dbCloseArea())

						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ compara o valor baixado para o titulo ( E1_VALOR - E1_SALDO ), com o valor dos adiantamentos. Se o valor for igual, continua a exclusao   ³
						//³ do documento, se o valor for diferente eh porque houveram outras baixas para o titulo, neste caso, nao eh possivel excluir o documento,   ³
						//³ primeiro deve-se excluir estas outras baixas no Financeiro.  												                                           ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÀÄÄÄÄÄÄÄÄÄÄÙ
						//Para o México os adiantamentos são baixados e não compensados. Portanto se houver adiantamentos apenas estorna a baixa.
						If (cPaisLoc != "MEX" .AND. (cAliasSE1)->(E1_VALOR-E1_SALDO) = nValorAdtFR3) .OR. (cPaisLoc $ "MEX|PER" .AND. nValorAdtFR3 > 0)
							If !lRskCanc
								If IsBlind() .Or. !ApMsgYesNo(STR0020 + CRLF+ STR0021) //"Por tratar-se de condição de pagamento com Adiantamento, a exclusão do Documento de Saída também irá excluir a compensação do(s) título(s) de adiantamento associado(s) a este Documento de Saida no momento da sua geração."#CRLF#"Deseja continuar?"
									Conout("FA040BAIXA")
									If lJob .And. lLogExNF
										//Bruno Cremaschi
										ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;						//"Falha na exclusão do documento de saída"
													,MaFmtHlp("FA040BAIXA");
													,"EXCLUINF")
									EndIf
									lRetorno := .F.
								Endif
							EndIf
						Else
							lRetorno := .F.
							Help(" ",1,"FA040BAIXA")
							If lJob .And. lLogExNF
								//Bruno Cremaschi
								ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;							//"Falha na exclusão do documento de saída"
											,MaFmtHlp("FA040BAIXA");
											,"EXCLUINF")
							EndIf
						Endif

						lAlvoCERTO := .T.

					Endif
				Endif
			Endif
		Endif

		If !Empty((cAliasSE1)->E1_BAIXA) .And.(cAliasSE1)->E1_SALDO = 0  .And. !lAlvoCERTO .And. !LJ861EC01((cAliasSE1)->E1_NUM, (cAliasSE1)->E1_PREFIXO, .t.)
			lRetorno := .F.
			Help(" ",1,"FA040BAIXA")
			If lJob .And. lLogExNF
				//Bruno Cremaschi
				ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;											//"Falha na exclusão do documento de saída"
							,MaFmtHlp("FA040BAIXA");
							,"EXCLUINF")
			EndIf
		Elseif !Empty((cAliasSE1)->E1_BAIXA) .And.(cAliasSE1)->E1_VALOR <> (cAliasSE1)->E1_SALDO .And. !lAlvoCERTO .And. !LJ861EC01((cAliasSE1)->E1_NUM, (cAliasSE1)->E1_PREFIXO, .t.)
			lRetorno := .F.
			Help(" ",1,"BAIXAPARC")
			If lJob .And. lLogExNF
				//Bruno Cremaschi
				ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;											//"Falha na exclusão do documento de saída"
							,MaFmtHlp("FA040BAIXA");
							,"EXCLUINF")
			EndIf
		Endif

	Endif

	dbSelectArea(cAliasSE1)

	While ( !Eof() .And. xFilial("SE1") == (cAliasSE1)->E1_FILIAL .And.;
			cClieFor == (cAliasSE1)->E1_CLIENTE .And.;
			cLoja == (cAliasSE1)->E1_LOJA .And.;
			cPrefixo == (cAliasSE1)->E1_PREFIXO .And.;
			(cAlias)->F2_DUPL == (cAliasSE1)->E1_NUM .And.;
			lRetorno )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ se for nota fiscal com adiantamento compensado, valida se a nota fiscal tem somente uma parcela no contas a receber                                          ³
		//³ se for somente 1 parcela, segue o cancelamento e nao valida se o titulo estah baixado, pois a compensacao desta parcela vai ser desfeita na rotina MaDelNfs  ³
		//³ se for mais de uma parcela, valida as parcelas a partir da segunda, para checar se hah alguma parcela baixada                                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		//	Criterio "!Empty(SE1->E1_BAIXA)" alterado:
		//  1- Exclusao da NFS sem baixa - Campo E1_BAIXA" esta com a data de baixa
		//  2- Exclusao da NFS com cancelamento de baixa - Campo E1_BAIXA" esta vazio
		//  If !Empty((cAliasSE1)->E1_BAIXA) .and. (cAliasSE1)->E1_VALOR != (cAliasSE1)->E1_SALDO  //tem baixa para o adiantamento

		If cPaisLoc $ "BRA|PER" .and. (FunName() == "MATA521A" .OR. FunName() == "MATA467N" .Or. lRskCanc)
			If (cAlias)->F2_TIPO != "D"
				If nCountSE1 = 0
					If A410UsaAdi((cAlias)->F2_COND)
						If (cAliasSE1)->E1_VALOR != (cAliasSE1)->E1_SALDO  //tem baixa para o adiantamento
							lPriParAdtBx := .T.
						Endif
					Endif
				Endif
			Endif
		Endif

		//Ajuste para permitir la eliminación de títulos provisionales de Remito
		If cPaisLoc == "EUA" .And. FunName() == "MATA462N"
			cEspecie := 'PRE'
		EndIf

		If (cAliasSE1)->E1_TIPO $ IIf(cPaisLoc == "BRA",cTipoParc,cEspecie)
			//Ajuste para permitir la eliminación de título provisional de remito en la exclusión de Remito
			If IIf((cPaisLoc $ "BRA|PER" .and. (FunName() $ "MATA521A/MATA467N" .Or. lRskCanc)  .and. lPriParAdtBx),.F., ;
				IIf(cPaisLoc $ "EUA" .And. FunName() == "MATA462N" .And. AllTrim((cAliasSE1)->E1_TIPO) == "PRE",.F.,!FaCanDelCR(cAliasSE1,cOrigFin,,@cHelp)))

				If lJob .And. lLogExNF
					//Bruno Cremaschi
					ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea; //"Falha na exclusão do documento de saída"
								,MaFmtHlp(cHelp);
								,"EXCLUINF")
				EndIf
				lRetorno := .F.
				Exit
			Else
				//Venda e-commerce não pode excluir o título, pois ele é gerado e pago antes da NF
				If !LJ861EC01((cAliasSE1)->E1_NUM, (cAliasSE1)->E1_PREFIXO, .t.)
					AAdd(aLockSE1,(cAliasSE1)->E1_CLIENTE+(cAliasSE1)->E1_LOJA+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCELA+(cAliasSE1)->E1_TIPO)
					AAdd(aRegSE1,(cAliasSE1)->SE1RECNO)
				EndIf
			EndIf
		EndIf

		//Ajuste para permitir la eliminación de títulos provisionales de Remito
		If cPaisLoc == "EUA" .And. FunName() == "MATA462N" .And. Type("M->F2_ESPECIE")!="U"
			cEspecie := M->F2_ESPECIE
		EndIf

		//
		// Template de GEM - Gestao de Empreendimentos Imobiliarios
		//
		// Verifica se a condicao de pagamento tem vinculacao com uma condicao de venda
		//
		If ExistTemplate("GMCondPagto")
			If ( lCondVenda := ExecTemplate("GMCondPagto",.F.,.F.,{(cAlias)->F2_COND,(cAliasSE1)->E1_TIPO}) )
				If IIf((cPaisLoc $ "BRA|PER" .and. (FunName() == "MATA521A" .OR. FunName() == "MATA467N")  .and. lPriParAdtBx),.F.,!FaCanDelCR(cAliasSE1,cOrigFin))
					lRetorno := .F.
					Exit
				Else
					AAdd(aLockSE1,(cAliasSE1)->E1_CLIENTE+(cAliasSE1)->E1_LOJA+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCELA+(cAliasSE1)->E1_TIPO)
					AAdd(aRegSE1,(cAliasSE1)->SE1RECNO)
				EndIf
			EndIf
			lCondVenda := .F.
		EndIf
		If lMa520SE1 .And. lRetorno
			ExecBlock("MA520SE1",.F.,.F.)
		Endif
		lPriParAdtBx := .F.
		nCountSE1++

		dbSelectArea(cAliasSE1)
		dbSkip()
	EndDo
	dbSelectArea(cAliasSE1)
	dbCloseArea()
	dbSelectArea("SE1")

EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se a NFS gerou Imposto ICMS ST(Contas a Pagar)     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno .and. cPaisloc=="BRA"

	aFornGNRE := StrToKarr(cMVRECST, ";")
	If Len(aFornGNRE) >= 2
		cFornST := PadR(aFornGNRE[1], nTamForn)
		cLojaST := PadR(aFornGNRE[2], nTamLoja)
	EndIf

	cFilSF6	:= xFilial("SF6")
	cFilSE2	:= xFilial("SE2")
	DbSelectArea("SF6")
	SF6->(DbsetOrder(3))//Indice F6_FILIAL+F6_OPERNF+F6_TIPODOC+F6_DOC+F6_SERIE+F6_CLIFOR+F6_LOJA
	If SF6->(DbSeek(cFilSF6+"2"+PadR(SF2->F2_TIPO,nTamTpDoc)+SF2->F2_DOC+SF2->F2_SERIE+SF2->F2_CLIENTE+SF2->F2_LOJA))
		While !SF6->(Eof()) .AND. cFilSF6 == SF6->F6_FILIAL .AND. SF6->F6_OPERNF=="2" .AND.;
				SF6->F6_TIPODOC == PadR(SF2->F2_TIPO,nTamTpDoc) .AND. SF6->F6_DOC== SF2->F2_DOC .AND.;
				SF6->F6_SERIE == SF2->F2_SERIE .AND. SF6->F6_CLIFOR==SF2->F2_CLIENTE .AND.;
				SF6->F6_LOJA  == SF2->F2_LOJA
			DbSelectArea("SE2")
			SE2->(DbsetOrder(1))//Indice E2_FILIAL+E2_PREFIXO+E2_NUM+E2_SERIE+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA
			If SE2->(DbSeek(cFilSE2+Alltrim(SF6->F6_NUMERO)))
				Do While SE2->(!Eof()).And. SE2->E2_FILIAL == cFilSE2 .AND. alltrim(SE2->E2_PREFIXO+SE2->E2_NUM)==Alltrim(SF6->F6_NUMERO)
					If SE2->E2_ORIGEM=="MATA460A" .And. Alltrim(SE2->E2_TIPO)=="TX" .AND. cFornST+cLojaST==ALLTRIM(SE2->E2_FORNECE+SE2->E2_LOJA)
						//Se o titulo sofreu pagamento nao permitir excluir a NFS
						If !Empty(SE2->E2_BAIXA).And. SE2->E2_SALDO<>SE2->E2_VALOR .And. ALLTRIM(SE2->E2_TIPO)=="TX"
							cMensagem := STR0074 + " " + STR0075 + " " +SE2->E2_NUM + "/" + SE2->E2_PREFIXO + CHR(10) + CHR(13)		//"Não é possível excluir esse documento pelo fato de que existe um título a pagar de imposto baixado total ou parcialmente."##"Título: "
							cMensagem += STR0073																					//"Para excluir esse documento, será necessário, primeiramente, estornar esse título através do módulo financeiro."
							Help(" ",1,"NAOEXCNFS","NAOEXCNFS",cMensagem,1,0)
							If lJob .And. lLogExNF
								//Bruno Cremaschi
								ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;									//"Falha na exclusão do documento de saída"
											,MaFmtHlp("NAOEXCNFS",cMensagem);
											,"EXCLUINF")
							EndIf
							lRetorno := .F.
						ElseIf !Empty(SE2->E2_NUMBOR) .And. ALLTRIM(SE2->E2_TIPO)=="TX"
							cMensagem := STR0072 + " " + STR0075 + " " +SE2->E2_NUM + "/" + SE2->E2_PREFIXO + CHR(10) + CHR(13)		//"Não é possível excluir esse documento pelo fato de que existe um título a pagar de imposto em Borderô."##"Título: "
							cMensagem += STR0073 																					//"Para excluir esse documento, será necessário, primeiramente, estornar esse título através do módulo financeiro."
							Help(" ",1,"NAOEXCNFS","NAOEXCNFS",cMensagem,1,0)
							If lJob .And. lLogExNF
								//Bruno Cremaschi
								ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;									//"Falha na exclusão do documento de saída"
											,MaFmtHlp("NAOEXCNFS",cMensagem);
											,"EXCLUINF")
							EndIf
							lRetorno := .F.
						Endif
					Endif
					SE2->(DbSkip())
				EndDo
			EndIf
			SF6->(DbSkip())
		EndDo
	EndIf
Endif

//-----------------------------------------------------------------------------------------------------------//
// Verifica se a NFS gerou FUNRURAL (RAT/SENAR/INSS) quando o TES da NF nao gerar duplicata (Contas a Pagar) //
//-----------------------------------------------------------------------------------------------------------//
If lRetorno .And. cPaisloc == "BRA" .And. Empty(SF2->F2_DUPL) .And. (SF2->F2_CONTSOC > 0 .Or. SF2->F2_VLSENAR > 0 .Or. SF2->F2_VALINSS > 0)
	cFilSE2	:= xFilial("SE2")
	SE2->(DbsetOrder(1)) //E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA
	If SE2->(DbSeek(cFilSE2+cPrefixo+SF2->F2_DOC))
		Do While !SE2->(Eof()) .And. SE2->E2_FILIAL == cFilSE2 .And. SE2->E2_PREFIXO == cPrefixo .And. SE2->E2_NUM == SF2->F2_DOC
			If SE2->E2_TIPO $ ("FUN|SEN|INS") .And. AllTrim(SE2->E2_ORIGEM) == "MATA460"
				//Se o titulo sofreu pagamento nao permitir excluir a NFS
				If !Empty(SE2->E2_BAIXA) .And. SE2->E2_SALDO <> SE2->E2_VALOR
					cMensagem := STR0074 + " " + STR0075 + " " +SE2->E2_NUM + "/" + SE2->E2_PREFIXO + CHR(10) + CHR(13)		//"Não é possível excluir esse documento pelo fato de que existe um título a pagar de imposto baixado total ou parcialmente."##"Título: "
					cMensagem += STR0073																					//"Para excluir esse documento, será necessário, primeiramente, estornar esse título através do módulo financeiro."
					Help(" ",1,"NAOEXCNFS","NAOEXCNFS",cMensagem,1,0)
					If lJob .And. lLogExNF
						//Bruno Cremaschi
						ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;						//"Falha na exclusão do documento de saída"
									,MaFmtHlp("NAOEXCNFS",cMensagem);
									,"EXCLUINF")
					EndIf
					lRetorno := .F.
				ElseIf !Empty(SE2->E2_NUMBOR)
					cMensagem := STR0072 + " " + STR0075 + " " +SE2->E2_NUM + "/" + SE2->E2_PREFIXO + CHR(10) + CHR(13)		//"Não é possível excluir esse documento pelo fato de que existe um título a pagar de imposto em Borderô."##"Título: "
					cMensagem += STR0073																					//"Para excluir esse documento, será necessário, primeiramente, estornar esse título através do módulo financeiro."
					Help(" ",1,"NAOEXCNFS","NAOEXCNFS",cMensagem,1,0)
					If lJob .And. lLogExNF
						//Bruno Cremaschi
						ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;						//"Falha na exclusão do documento de saída"
									,MaFmtHlp("NAOEXCNFS",cMensagem);
									,"EXCLUINF")
					EndIf
					lRetorno := .F.
				Endif
			EndIf
			SE2->(DbSkip())
		EndDo
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificando os títulos gerados pelo motor de tributos          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno .And. cPaisloc == "BRA" .And. AliasInDic("F2F") .And. AliasInDic("FK7") .And. FindFunction("xFisDelTit")
	// Opcao = 1 p/ somente validar a exclusão.
	lRetorno := xFisDelTit(SF2->F2_IDNF, "SF2", "MATA460", 1, @cNumTit)
	If !lRetorno .AND. lJob .AND. lLogExNF
		cMensagem := STR0089 + cNumTit		//"Não foi possível excluir o documento. Verifique o título "
		//Bruno Cremaschi
		ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;									//"Falha na exclusão do documento de saída"
					,MaFmtHlp("NAOEXCNFS",cMensagem);
					,"EXCLUINF")
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificando os itens do documento de Saida                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno
	cFilSD2	:= xFilial("SD2")
	dbSelectArea("SD2")
	dbSetOrder(3)

	aStruSD2  := SD2->(dbStruct())
	cAliasSD2 := "MACANDELNF"
	cQuery := "SELECT SD2.*,SD2.R_E_C_N_O_ SD2RECNO,SF4.F4_PODER3,SF4.F4_ESTOQUE "
	cQuery += "FROM "+RetSqlName("SD2")+" SD2,"
	cQuery += RetSqlName("SF4")+" SF4 "
	cQuery += "WHERE SD2.D2_FILIAL='"+cFilSD2+"' AND "
	cQuery += "SD2.D2_SERIE='"+cSerie+"' AND "
	cQuery += "SD2.D2_DOC='"+cNumero+"' AND "
	cQuery += "SD2.D2_CLIENTE='"+cClieFor+"' AND "
	cQuery += "SD2.D2_LOJA='"+cLoja+"' AND "
	cQuery += "SD2.D2_TIPO='"+cTipo+"' AND "
	cQuery += "SD2.D_E_L_E_T_= ' ' AND "
	cQuery += "SF4.F4_FILIAL='"+xFilial("SF4")+"' AND "
	cQuery += "SF4.F4_CODIGO=SD2.D2_TES AND "
	cQuery += "SF4.D_E_L_E_T_= ' '"
	cQuery += "ORDER BY "+SqlOrder(SD2->(IndexKey()))

	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSD2,.T.,.T.)

	For nX := 1 To Len(aStruSD2)
		If aStruSD2[nX][2] <> "C"
			TcSetField(cAliasSD2,aStruSD2[nX][1],aStruSD2[nX][2],aStruSD2[nX][3],aStruSD2[nX][4])
		EndIf
	Next nX
	While ( !Eof() .And. cFilSD2 == (cAliasSD2)->D2_FILIAL .And.;
			cNumero == (cAliasSD2)->D2_DOC .And.;
			cSerie == (cAliasSD2)->D2_SERIE .And.;
			cClieFor == (cAliasSD2)->D2_CLIENTE .And.;
			cLoja == (cAliasSD2)->D2_LOJA .And. lRetorno )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verificando se for remito de transferencia que ja teve entrada   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cPaisLoc !="BRA" .And. (cAliasSD2)->D2_TIPODOC == "54" .And. (cAliasSD2)->D2_QTDAFAT != (cAliasSD2)->D2_QUANT
			Help(" ",1,"NAOEXCLREM")
			lRetorno := .F.
			Exit
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verificando os embarques do modulo de exportacao - SIGAEEC     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		If NMODULO <> 29 .And. ( (!FindFunction("EECFat2NFEst") .And. !Empty((cAliasSD2)->D2_PREEMB)) .Or. ( FindFunction("EECFat2NFEst") .And. !EECFat2NFEst((cAliasSD2)->D2_PREEMB, cNumero, cTipo) ) )
			Help(" ",1,"MTA520DEL")
			If lJob .And. lLogExNF
				//Bruno Cremaschi
				ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;					//"Falha na exclusão do documento de saída"
							,MaFmtHlp("MTA520DEL");
							,"EXCLUINF")
			EndIf
			lRetorno := .F.
			Exit
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verificando se este documento possui itens devolvidos          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (cAliasSD2)->D2_QTDEDEV <> 0 .Or. (cAliasSD2)->D2_VALDEV<>0
			Help(" ",1,"NAOEXCL")
			If lJob .And. lLogExNF
				//Bruno Cremaschi
				ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;							//"Falha na exclusão do documento de saída"
							,MaFmtHlp("NAOEXCL");
							,"EXCLUINF")
			EndIf
			lRetorno := .F.
			Exit
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica se eh um remito ja faturado (Localizacoes)            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (cAliasSD2)->D2_QTDEFAT > 0
			Help(" ",1,"NAOEXCLREM")
			If lJob .And. lLogExNF
				//Bruno Cremaschi
				ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;							//"Falha na exclusão do documento de saída"
							,MaFmtHlp("NAOEXCL");
							,"EXCLUINF")
			EndIf
			lRetorno := .F.
			Exit
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica se as notas não foram geradas pelo faturamento        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (cAliasSD2)->D2_ORIGLAN $ "LF|LO|VD"
			If IsBlind()
				Conout(STR0012)
			Else
				Aviso(OemtoAnsi(STR0011),OemtoAnsi(STR0012),{OemtoAnsi(STR0013)})
			EndIf
			If lJob .And. lLogExNF
				//Bruno Cremaschi
				ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;							//"Falha na exclusão do documento de saída"
							,MaFmtHlp(/*nome do help*/,STR0012);
							,"EXCLUINF")
			EndIf
			lRetorno := .F.
			Exit
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica o Servico do WMS    						         	  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cPaisLoc <> "BRA" .And. !LocIntDCF(cAliasSD2,.F.)
			lRetorno := .F.
			Exit
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verificando os saldos do poder de terceiros                    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		If ( (cAliasSD2)->F4_PODER3=="R" )
			dbSelectArea("SB6")
			dbSetOrder(1)
			If MsSeek(xFilial("SB6")+(cAliasSD2)->D2_COD+cClieFor+cLoja+(cAliasSD2)->D2_IDENTB6)
				If SB6->B6_QUANT <> CalcTerc((cAliasSD2)->D2_COD,cClieFor,cLoja,(cAliasSD2)->D2_IDENTB6,(cAliasSD2)->D2_TES)[1]
					Help(" ",1,"A520NPODER")
					If lJob .And. lLogExNF
						//Bruno Cremaschi
						ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;						//"Falha na exclusão do documento de saída"
									,MaFmtHlp("A520NPODER");
									,"EXCLUINF")
					EndIf
					lRetorno := .F.
					Exit
				EndIf
			EndIf
		EndIf
		If ( (cAliasSD2)->F4_ESTOQUE=="S" )
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Verifica se o produto est  sendo inventariado  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If BlqInvent((cAliasSD2)->D2_COD,(cAliasSD2)->D2_LOCAL)
				Help(" ", 1, "BLQINVENT", , (cAliasSD2)->D2_COD + STR0076 + (cAliasSD2)->D2_LOCAL, 1, 11)				//"Almoxarifado:"
				If lJob .And. lLogExNF
					//Bruno Cremaschi
					ProcLogAtu( "ERRO", STR0068 + " " + cNumero + " " + cSerRea;										//"Falha na exclusão do documento de saída"
								,MaFmtHlp("BLQINVENT", (cAliasSD2)->D2_COD + STR0076 + (cAliasSD2)->D2_LOCAL);			//"Almoxarifado:"
								,"EXCLUINF")
				EndIf
				lRetorno := .F.
				Exit
			EndIf
		EndIf
		If (!Empty(SC9->C9_NUMSEQ) )
			dbSelectArea("SC9")
			dbSetOrder(7)
			If MsSeek(xFilial("SC9")+(cAliasSD2)->D2_COD+(cAliasSD2)->D2_LOCAL+(cAliasSD2)->D2_NUMSEQ) .And. SC9->C9_BLEST == "ZZ" .And. !Empty(SC9->C9_NUMSEQ)
				Help(" ",1,"A520NEST")
				If lJob .And. lLogExNF
					//Bruno Cremaschi
					ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;							//"Falha na exclusão do documento de saída"
								,MaFmtHlp("A520NEST");
								,"EXCLUINF")
				EndIf
				lRetorno := .F.
				Exit
			EndIf
		EndIf
		If lRetorno
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Verifica o Servico do WMS    				         	  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If (cAliasSD2)->F4_ESTOQUE == "S" .And. IntWms((cAliasSD2)->D2_COD) .And. lWmsNew .And. lCarteira .AND. ! WmsAvalSD2((cAliasSD2)->SD2RECNO)
				lRetorno := .F.
				Exit
			EndIf
		EndIf

		If lRetorno
			If (cAliasSD2)->F4_ESTOQUE == "S" .And. aScan(aLockSB2,(cAliasSD2)->D2_COD+(cAliasSD2)->D2_LOCAL)==0
				AAdd(aLockSB2,(cAliasSD2)->D2_COD+(cAliasSD2)->D2_LOCAL)
			EndIf
			If aScan(aLockSC5,(cAliasSD2)->D2_PEDIDO)==0
				AAdd(aLockSC5,(cAliasSD2)->D2_PEDIDO)
			EndIf
		EndIf
		AAdd( aRegSD2,(cAliasSD2)->SD2RECNO )
		dbSelectArea(cAliasSD2)
		dbSkip()
	EndDo

	dbSelectArea(cAliasSD2)
	dbCloseArea()
	dbSelectArea("SD2")

EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica os documentos de Origem                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno .AND. !Empty(SF2->F2_NEXTDOC)
	dbSelectArea("SF2")
	dbSetOrder(6)
	If MsSeek(xFilial("SF2")+SF2->F2_SERIE+SF2->F2_DOC)
		Help(" ",1,"MA521NFORI")
		If lJob .And. lLogExNF
			//Bruno Cremaschi
			ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;						//"Falha na exclusão do documento de saída"
						,MaFmtHlp("MA521NFORI");
						,"EXCLUINF")
		EndIf
		lRetorno := .F.
	EndIf
EndIf

If !lMa521FN6 //PE criado temporariamente para atender a issue DSERFAT-4462, após inovação da issue DSERCTR1-7472 deverá ser retirado.
	//-----------------------------------------------
	// Verifica se a NF foi gerada na baixa do ativo
	//-----------------------------------------------
	If lRetorno .And. !IsInCallStack("ATFA036")
		If ( GetRPORelease() >= "12.1.031" )
			lRetorno := A036FN6NF(xFilial("FN6"),xFilial("SF2"),SF2->F2_DOC,SF2->F2_SERIE )
		Else
			If !Empty(xFilial("SF2")) .And. FWModeAccess("FN6") == "C"
				cAliasTMPc := GetNextALias()
				cQuery := " SELECT COUNT(FN6_FILIAL) QTD FROM " + RetSQLName("FN6")+" FN6 "+;
								"WHERE FN6_FILIAL = '"+xFilial("FN6")+"' AND "+;
									"FN6_NUMNF= '"+SF2->F2_DOC+"' AND "+;
									"FN6_SERIE= '"+SF2->F2_SERIE+"' AND "+;
									"FN6_FILORI = '"+xFilial("SF2") +"' AND "+;
									"FN6.D_E_L_E_T_ = ' ' "
				cAreac := Alias()
				dbUseArea( .T. , "TOPCONN" , TcGenQry(,,cQuery) , cAliasTMPc , .T. , .T.)
				If (cAliasTMPc)->QTD > 0
					If cPaisLoc $ "MEX|PER|COL"
						lRetorno := .T.
						Help(" ",1, "AF036NF",,STR0067,1,0) //"Al finalizar el borrado, tendrá que realizar la Anulación de la Baja del Activo manualmente, en la rutina Bajas (ATFA036)."
					Else
						lRetorno := .F.
						Help(" ",1, "AF036NF",,STR0048,1,0) //"Nota atrelada a baixa do Ativo."
					EndIF
				Endif
				(cAliasTMPc)->(DBCloseArea())
				dbSelectArea(cAreac)
			ElseIf FWModeAccess("FN6") == "E"
				FN6->(DBSetOrder(5))
				If FN6->(DBSeek(xFilial("FN6")+SF2->F2_DOC+SF2->F2_SERIE))
					IF cPaisLoc $ "MEX|PER|COL"
						lRetorno := .T.
						Help(" ",1, "AF036NF",,STR0067,1,0) //"Al finalizar el borrado, tendrá que realizar la Anulación de la Baja del Activo manualmente, en la rutina Bajas (ATFA036)."
					Else
						lRetorno := .F.
						Help(" ",1, "AF036NF",,STR0048,1,0) //"Nota atrelada a baixa do Ativo."
					EndIf
				EndIf
			EndIf
		EndIf
	EndIf
EndIf

//primeiro tenta o bloqueio dos saldos em estoque
If lRetorno .And. !InTransact()
	lRetorno := FtMultLock(aLockSB2, 'SB2', 1)
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Efetuando o travamento dos demais registros                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno .And. !InTransact()
	If MultLock("SF2",{(cAlias)->F2_DOC+(cAlias)->F2_SERIE+(cAlias)->F2_CLIENTE+(cAlias)->F2_LOJA},1) .And.;
			MultLock("SC5",aLockSC5,1) .And.;
			MultLock("SE1",aLockSE1,2) .And.;
			MultLock("SE2",aLockSE2,1) .And.;
			MultLock(IIf((cAlias)->F2_TIPO$"DB","SA2","SA1"),{(cAlias)->F2_CLIENTE+(cAlias)->F2_LOJA},1)
	Else
		MsUnLockAll()
		lRetorno := .F.
	EndIf
EndIf

//Verifica se a factura esta "amarrada" a alguma solicitacao, caso esteja nao
//permite o seu cancelamento...
If lRetorno .And. (cPaisLoc <> "BRA") .And. SuperGetMv('MV_SOLNCP')
	aAreaSCU := SCU->(GetArea())
	SCU->(dbSetOrder(3))
	If SCU->(MsSeek(xFilial()+SF2->F2_CLIENTE+SF2->F2_LOJA+SF2->F2_DOC+SF2->F2_SERIE))
		Help(" ",1,"MA055007")
		If lJob .And. lLogExNF
			//Bruno Cremaschi
			ProcLogAtu( "ERRO",STR0068+" "+cNumero +" "+cSerRea;							//"Falha na exclusão do documento de saída"
						,MaFmtHlp("MA055007");
						,"EXCLUINF")
		EndIf
		lRetorno := .F.
	EndIf
	RestArea(aAreaSCU)
EndIf

If lRetorno
	If ExistBlock("M521CDEL")
		lRetorno := ExecBlock("M521CDEL",.F.,.F.)
	Endif
	If lProcAdm
		lRetorno := T521Tela(SF2->F2_DOC,SF2->F2_SERIE,"     ",SF2->F2_CLIENTE,SF2->F2_LOJA,"S",SF2->F2_TIPO)
	EndIf
Endif

If lRetorno
	// Se o documento de saida é para NFe  e esta habilitado o job (MV_CANCNFE)
	lFatTSS := lNFeCancel .AND. Alltrim(SF2->F2_ESPECIE) $ "SPED"

	// Se o documento de saida é para NFSe e esta habilitado o job (MV_CANNFSE)
	lFatTSS := lFatTSS .OR. (lNFSeCanc .AND. Alltrim(SF2->F2_ESPECIE) $ "RPS")

	If lFatTSS
		// E se o documento de saida foi transmitido ou aprovado
		If SF2->F2_FIMP $ 'TS' .OR. (SF2->F2_FIMP $ 'N' .AND. !Empty(SF2->F2_STATUS))
			// envio da solicitacao e recebimento da autorização do SEFAZ
			If _lM521TRAN
				lFatTSS	:= ExecBlock("M521TRAN",.F.,.F.)
				If ValType(lFatTSS) <> "L"
					lFatTSS	:= .T.
				Endif
			EndIf
			If lFatTSS
				If IsBlind()
					// Chamada da funcao SEM uso de interface de usuario
					lRetorno	:= FatComTSS(lRetorno,lJob)
				Else
					// Chamada da funcao com uso de interface de usuario
					MsAguarde({|| lRetorno	:= FatComTSS(lRetorno,lJob)})
				EndIf
			EndIf
		EndIf
	EndIf
EndIf

// Verifica se o documento está vinculado a remessa de equipamento no gestão de serviços
If lRetorno
	DbSelectArea("TEW")
	TEW->(DbSetOrder(1)) // TEW_FILIAL+TEW_CODMV
	TEW->(xFilial("TEW"))
	// caso existam dados na tabela TEW
	If TEW->(!EOF())
		// verifica se algum item possui restrição por ter recebido intervenção de cancelamento ou substituição
		BeginSQL Alias "TMPGSMOV"
			SELECT D2_ITEM
			FROM %Table:SD2% SD2
			WHERE SD2.D2_FILIAL = %xFilial:SD2%
				AND SD2.D2_SERIE = %Exp:cSerie%
				AND SD2.D2_DOC = %Exp:cNumero%
				AND SD2.D2_CLIENTE = %Exp:cClieFor%
				AND SD2.D2_LOJA = %Exp:cLoja%
				AND SD2.D2_TIPO = %Exp:cTipo%
				AND SD2.%NotDel%
				AND (
					EXISTS(
						SELECT 1
						FROM %Table:TEW% TEW
						WHERE TEW_FILIAL = %xFilial:TEW%
								AND TEW_NFSAI = D2_DOC
								AND TEW_SERSAI = D2_SERIE
								AND TEW_ITSAI = D2_ITEM
								AND TEW.%NotDel%
								AND TEW_DTAMNT <> ' '
							)
					OR (
						EXISTS (
							SELECT 1
							FROM %Table:TWR% TWR
								INNER JOIN %Table:TEW% TEW ON TEW_FILIAL = TWR_FILIAL
														AND TEW_CODMV = TWR_CODMOV
														AND TEW.%NotDel%
														AND TEW_DTAMNT <> ' '
							WHERE TWR_FILPED = D2_FILIAL
									AND TWR_SAIDOC = D2_DOC
									AND TWR_SAISER = D2_SERIE
									AND TWR_SAIITE = D2_ITEM
									AND TWR.%NotDel%
							)
						)
					)
		EndSQL

		If TMPGSMOV->(!EOF())
			lRetorno := .F.
			Help( , , "M521BlqMovGs", ,STR0065, 1, 0,,,,,,;  // "O documento possui itens que movimentaram equipamentos e sofreram alteração após a alocação."
					{STR0066}) // "Verifique as movimentações para que seja possível excluir o documento."
		EndIf
		TMPGSMOV->(DbCloseArea())
	EndIf
EndIf

RestArea(aAreaSF2)
RestArea(aAreaSD2)
RestArea(aAreaSE2)
RestArea(aAreaSE1)
RestArea(aAreaSB6)
RestArea(aArea)

Return(lRetorno)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³MaDelNFS  ³ Rev.  ³Eduardo Riera          ³ Data ³30.12.2001	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Estorno da Preparacao dos Documentos de Saida              	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica se o documento pode ser excluido              	³±±
±±³          ³                                                            	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1: Array com os Recnos do SD2                        (OPC)³±±
±±³          ³ExpA2: Array com os Recnos do SE1                        (OPC)³±±
±±³          ³ExpA3: Array com os Recnos do SE2                        (OPC)³±±
±±³          ³ExpL4: Mostra lancto contabil                            (OPC)³±±
±±³          ³ExpL5: Aglutina lancto contabil                          (OPC)³±±
±±³          ³ExpL6: Contabiliza On-Line                               (OPC)³±±
±±³          ³ExpL7: Pedido em carteira                                (OPC)³±±
±±³          ³ExpL8: Indica se estou apagando um remito                (OPC)³±±
±±³          ³ExpL9: Usado para o controle de localizacao fisica.           ³±±
±±³          ³       para forcar o parametro (MV_PDEVLOC)                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ ATUALIZACOES SOFRIDAS DESDE A CONSTRUCAO INICIAL.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ PROGRAMADOR  ³ DATA   ³ BOPS ³  MOTIVO DA ALTERACAO                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Norbert Waage³16/05/07³125161³Atualizacao do status do orcamento do     ³±±
±±³              ³        ³      ³Televendas(SIGATMK), apos exclusao da NF. ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MaDelNfs(aRegSD2,aRegSE1,aRegSE2,lDigita,lAglutina,lContab,lCarteira,lRemito,nPDevLoc,cCodDiario)

Local aArea     := GetArea()
Local aCusto    := {}
Local aCT5      := {}
Local aSd2Carga := {}
Local aRotas    := {}
Local aPedido   := {}
Local aMov		:= {}
Local nX        := 0
Local nHdlPrv   := 0
Local nTotalCtb := 0
Local nRegSF2   := 0
Local lMSd2520T := ExistTemplate("MSD2520")
Local lMSd2520  := ExistBlock("MSD2520")
Local lM521Cart := ExistBlock("M521CART")
Local lMs520Del := Existblock("MS520DEL")
Local lHeader   := .F.
Local lDetProva := .F.
Local lLctPad96 := .F.
Local lLctPad88 := .F.
Local lLctPad30 := VerPadrao("630")	// Credito de Estoque / Debito de C.M.V.
Local lLctPad33 := VerPadrao("633")	// Exclusão Rateio itens NF
Local lLctPad35 := VerPadrao("635")	// Debito de Cliente  / Credito de Venda
Local lLctPad41 := VerPadrao("641") // Itens de rateio.
Local lLctPad11 := VerPadrao("711")	// Apuracao de ICMS ST  / Estorno
Local cLoteCtb  := ""
Local cArqCtb   := ""
Local c635      := Nil
Local c688      := Nil
Local c696      := Nil
Local c641      := Nil
Local c711      := Nil
Local cAliasSC9 := "SC9"
Local cDepTrf   := GetNewPar("MV_DEPTRANS","95")  // Dep.transferencia
Local lSelLote  := GetNewPar("MV_SELLOTE","2") == "1"
Local lTranCQ   := FindFunction("IsTranCQ") .And. IsTranCQ()
Local cLocalCQ  := SuperGetMv("MV_CQ",.F.,"98")
Local aAreaTmp
Local aAreaSC5
Local aAreaSC6
Local aAreaSC9
Local aAreaSD2
Local nPrcVen
Local cQuery := ""
Local cPedRem    := ""
Local cItPedRem  := ""
Local cSeqPedRem := ""
Local cSeekD7	 := ""
Local cFilcar    := ""
Local cBlock     := 'Oms521Car(aSd2Carga,aRotas,cFilCar)'
Local bBlock     := {||.T.}
Local cRetPE     := ''
Local lContinua := .T.
Local cOmsCplInt := SuperGetMv("MV_CPLINT",.F.,"2") //Integração OMS x CPL
Local lExistFJU := FJU->(ColumnPos("FJU_RECPAI")) >0 .and. FindFunction("FinGrvEx")
Local cPrefixo  := Padr(&(GetNewPar("MV_1DUPREF")),TAMSX3("E2_PREFIXO")[1])
Local aRestSC6	:= {}

//Gestao de Contratos
Local aContrato  := {}
Local aAreaSD1   := {}
Local aCtbDia    := {}
Local lCtbInTran := IIf(CTBINTRAN(0,.F.),.T.,.F.)	// Verifica se contabilizacao pode ser executada dentro da transacao
Local lIntACD	 := SuperGetMV("MV_INTACD",.F.,"0") == "1"
Local aEmpBN     := {}
Local aAreaAt	 := {}
Local cFunName	 := IIf(Type("cFunName")=="U",Upper(Alltrim(ProcName())),cFunName)	//Funcao Origem
Local cPadraoC	 := ""
Local cPadraoI	 := ""

//Venda Direta
Local aPedBkp	 := {}
Local nFalta	:= 0
Local oMdl		 := Nil
Local oMdlCarga  := Nil

// Informações que devem ser atualizada quando Apto a Faturar
Local cIdDCFAnt  := ""
Local cNFiscal   := ""
Local cSeqSC9    := ""
Local cBlWmsAnt  := ""
Local cRomEmbAnt := ""
Local cEndPadAnt := ""
Local cLocaliAnt := ""
Local cAgregAnt  := ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Tratamento para e-Commerce      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local lECommerce := SuperGetMV("MV_LJECOMM",,.F.)
Local aRegSC5    := {}     //Ira gravar s pedidos e-Commerce para liberar no final da rotina
Local lLiberOk   := .F.    //Variavel utilizada para liberar o pedido no final da rotina
Local cNatISS	   := SuperGetMv("MV_ISS",,"")
Local lWmsNew     := SuperGetMV("MV_WMSNEW",.F.,.F.)

//Tratamento exclusão ST
Local cMVRECST	:= SuperGetMv("MV_RECST"+Alltrim(SF2->F2_EST),,"")
Local nTamForn	:= TamSX3("A2_COD")[1]
Local nTamLoja	:= TamSX3("A2_LOJA")[1]
Local cTamParc	:= Space(TamSx3("E2_PARCELA")[1])
Local nTamTipo	:= TamSx3("E2_TIPO")[1]
Local aFornGNRE := {}
Local cFornST	:= ""
Local cLojaST 	:= ""
Local cFornIcm	:= ""
Local cLjICMS	:= ""
Local lECCia 	:= lECommerce .AND. SuperGetMV("MV_LJECOMO",,.F.)  //E-commerce CiaShop Implantado?
Local cFiltro 	:= "" //filtro de Pedidos de venda
Local aAreaSL1 	:= {} //WorkArEa SL1
Local aAreaSL2 	:= {} //WorkArEa SL2
Local aAreaSF4 	:= {} //WorkArea SF4
Local lECCiaRes := lECCia .AND. !SuperGetMv("MV_RESAUT") .AND. SuperGetMv("MV_LJECOM0",.F., .F.) //Realiza reserva de estoque e-commerce CiaShop?
Local aProdRes 	:= {} //Array de produtos com reservas
Local dDtLimite := date()
Local nR		:= 0 //Contador de reservas
Local nPos 		:= 0 //Posicao do Array de reservas
Local cReserva 	:= "" //Código da Reservas
Local aAreaSC0 	:= {} //workArea de Reservas
Local nSaveSX8 	:= GetSX8Len() //LenSx8
Local nTamIDENT := TamSX3("DH_IDENTNF")[1]
Local nTamTpDoc := TamSX3("F6_TIPODOC")[1]
Local aPedLoja	:= {} //Array dos Pedidos do Controle de Loja
Local aSL1		:= {} //Array de Orçamentos
Local lDclNew	:= SuperGetMv("MV_DCLNEW",.F.,.F.)
Local lAtuSA1	:= SuperGetMv("MV_ATUSA1",.F.,.F.)
Local lTrbGen	:= IIf(FindFunction("ChkTrbGen"), ChkTrbGen("SD2","D2_IDTRIB"), .F.)
Local lIsPFS    := SuperGetMV("MV_JESCJUR",, .F.) // Indica se o sistema é utilizado por um escritório jurídico - Módulo SIGAPFS
Local lRmOrdSep	:= .F. //Indica se devemos remover o vinculo da Ord. Separacao com o Doc. Saida Excluido
Local lRskCanc  := IsInCallStack("Rsk020Cancel") //Cancelamento Mais Negócios
Local aAreaSE2  := {}
Local cAliasSE2 := ""

Local cChvCompl	:= ""
Local nVarPrUn	:= 0
Local nD2PrcVen := 0

Local lRskActive	:= FindFunction( "RskIsActive" ) .And. RskIsActive()
Local lRskMTkt	 	:= FindFunction("RskSetMTkt")
Local lLxMxAQtDl	:= FindFunction("LxMxAQtDel")
Local lExistCFF		:= .F.

Local lHabGrvLog 	 := SuperGetMV("MV_FTLOGPV",,.F.) .And. FindFunction('FATA410') .And. AliasInDic("AQ1") //Habilita a gravação do log de liberação de Pedidos de Venda
Local aLogLibPV		 := {}

DEFAULT lDigita    := .F.
DEFAULT lAglutina  := .F.
DEFAULT lContab    := .F.
DEFAULT lCarteira  := .T.
DEFAULT lRemito    := .F.
DEFAULT cCodDiario := ""
// PRIVATE lAnulaSF3  := .F.  //Determina se anula ou exclui o registro no Livro Fiscal(MaFisAtuSF3) - Localizacoes

Private lContDCL := .T.

//Tratamento exclui titulo
aFornGNRE := StrToKarr(cMVRECST, ";")
If Len(aFornGNRE) >= 2
	cFornST := PadR(aFornGNRE[1], nTamForn)
	cLojaST := PadR(aFornGNRE[2], nTamLoja)
EndIf
cFornIcm := SuperGetMv("MV_RECEST",.F.,"")
cLjICMS	 := "00"

Do Case
	Case cFunName == "MATA467N"
		lLctPad96 := VerPadrao("68M")
		lLctPad88 := VerPadrao("68E")
		cPadraoC := "68E"
		cPadraoI := "68E"
	Case cFunName == "MATA465N"
		lLctPad96 := VerPadrao("680")
		lLctPad88 := VerPadrao("68G")
		cPadraoC := "68G"
		cPadraoI := "680"
	Case cFunName == "MATA466N"
		lLctPad96 := VerPadrao("696")
		lLctPad88 := VerPadrao("688")
		cPadraoC := "688"
		cPadraoI := "696"
	Case cFunName == "MATA462N"
		lLctPad96 := VerPadrao("68P")
		lLctPad88 := VerPadrao("68H")
		cPadraoC := "68H"
		cPadraoI := "68P"
	OtherWise
		lLctPad96 := .F.
		lLctPad88 := .F.
EndCase

lAnulaSF3  := IIf( Type("lAnulaSF3")=="U",.F.,lAnulaSF3)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se o documento foi contabilizado                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lContab .And. !Empty(SF2->F2_DTLANC)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica o numero do lote contabil                           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea("SX5")
	dbSetOrder(1)
	cLoteCtb := If(MsSeek(xFilial()+"09FAT"), AllTrim(X5Descri()), "FAT ")
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Executa um execblock                                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cLoteCtb := If(At("EXEC",Upper(X5Descri())) > 0, &(X5Descri()), cLoteCtb)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inicializa o arquivo de contabilizacao                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	nHdlPrv:=HeadProva(cLoteCtb,"CTBANFS",cUserName,@cArqCtb)
	If nHdlPrv <= 0
		HELP(" ",1,"SEM_LANC")
	Else
		lHeader := .T.
	EndIf
EndIf

oMdl := MaEnvEAI(,,5,"MATA521",,,.F.)

Begin Transaction
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Se for processo de adiantamento e o titulo estiver baixado   ³
	//³ exclui a compensacao                                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If cPaisLoc == "BRA" .and. (FunName() = "MATA521A" .Or. lRskCanc)
		If Len(aRegSE1) > 0
			If A410UsaAdi(SF2->F2_COND)
				SE1->(MsGoto(aRegSE1[1]))
				If SE1->(Recno()) = aRegSE1[1]
					//
					//		Criterio "!Empty(SE1->E1_BAIXA)" alterado:
					//		1- Exclusao da NFS sem baixa - Campo E1_BAIXA" esta com data
					//		2- Exclusao da NFS com cancelamento de baixa - Campo E1_BAIXA" esta vazio
					//		If !Empty(SE1->E1_BAIXA) .and. SE1->E1_VALOR != SE1->E1_SALDO
					//
					If SE1->E1_VALOR != SE1->E1_SALDO
						If !A521CCompAd(aRegSE1)
							If IsBlind()
								Conout(STR0022)
							Else
								Aviso(STR0007,STR0022 + CRLF + STR0023,{"Ok"}) //"Atenção"#"Não foi possível excluir a compensação associada ao título deste Documento de Saída."#"Não será possível excluir o Documento de Saída."
							EndIf
							DisarmTransaction()
							RestArea(aArea)
							Return(.F.)
						Endif
					Endif
				Endif
			Endif
		Endif
	// Para o Mexico-Perú faz a baixa simples ao inves da compensação pois não há título.
	ElseIf cPaisLoc $ "MEX|PER" .AND. A410UsaAdi(SF2->F2_COND)
		If !A521CBxAdt()
			If IsBlind()
				Conout(STR0047)
			Else
				Aviso(STR0007,STR0047 + CRLF + STR0023,{STR0013}) //"Atenção"#"Não foi possível excluir a baixa do adiantamento associado ao Documento de Saída."#"Não será possível excluir o Documento de Saída."#OK
			EndIf
			DisarmTransaction()
			RestArea(aArea)
			Return(.F.)
		Endif
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se a NFS gerou Imposto ICMS ST                      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If cPaisLoc=="BRA"
		DbSelectArea("SE2")
		SE2->(DbsetOrder(1))//Indice E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA
		SE2->(DbGoTop())
		If !Empty(SF2->F2_NFICMST)//Caso nao seja vazio, gerou imposto ICMS ST
			If DbSeek(xFilial("SE2")+Alltrim(SF2->F2_NFICMST)+cTamParc+ PADR("TX",nTamTipo)+cFornST+cLojaST)
				Do While SE2->(!Eof()).And. SE2->E2_PREFIXO+SE2->E2_NUM==Alltrim(SF2->F2_NFICMST) .And. SE2->E2_FORNECE==cFornST .And. SE2->E2_LOJA==cLojaST
					If SE2->E2_ORIGEM=="MATA460A" .And. Alltrim(SE2->E2_TIPO)=="TX"
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Executa os lancamentos contabeis ( 711 ) - ICMS ST	         ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If lLctPad11 .And. lHeader
							nTotalCtb += DetProva(nHdlPrv,"711","MATA520",cLoteCtb,,,,,@c711,@aCT5)
						EndIf
						RecLock("SE2")
						SE2->(dbDelete())
						SE2->(MsUnLock())
					Endif
					SE2->(DbSkip())
				End
			Endif
			If DbSeek(xFilial("SE2")+SF2->F2_NFICMST+cTamParc+ PADR("TX",nTamTipo)+cFornIcm+cLjICMS)
				Do While SE2->(!Eof()).And. SE2->E2_PREFIXO+SE2->E2_NUM==SF2->F2_NFICMST .And. SE2->E2_FORNECE==cFornIcm .And. SE2->E2_LOJA==cLjICMS
					If SE2->E2_ORIGEM=="MATA460A" .And. Alltrim(SE2->E2_TIPO)=="TX"
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Executa os lancamentos contabeis ( 711 ) - ICMS   	         ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If lLctPad11 .And. lHeader
							nTotalCtb += DetProva(nHdlPrv,"711","MATA520",cLoteCtb,,,,,@c711,@aCT5)
						EndIf
						RecLock("SE2")
						SE2->(dbDelete())
						SE2->(MsUnLock())
					Endif
					SE2->(DbSkip())
				End
			Endif
		EndIf
		If !Empty(SF2->F2_NTFECP)//Caso nao seja vazio, gerou imposto ICMS ST
			If DbSeek(xFilial("SE2")+SF2->F2_NTFECP)
				Do While SE2->(!Eof()).And. SE2->E2_PREFIXO+SE2->E2_NUM==SF2->F2_NTFECP
					If SE2->E2_ORIGEM=="MATA460A" .And. Alltrim(SE2->E2_TIPO)=="TX"
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Executa os lancamentos contabeis ( 711 ) - ICMS ST	         ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If lLctPad11 .And. lHeader
							nTotalCtb += DetProva(nHdlPrv,"711","MATA520",cLoteCtb,,,,,@c711,@aCT5)
						EndIf
						RecLock("SE2")
						SE2->(dbDelete())
						SE2->(MsUnLock())
					Endif
					SE2->(DbSkip())
				End
			Endif
		Endif
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Exclusão dos Titulos gerados pela TPDP - PB   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If DbSeek(xFilial("SE2")+SF2->F2_SERIE+SF2->F2_DOC) .And. Alltrim(SE2->E2_NATUREZ)=="TPDP"
			Do While SE2->(!Eof()).And. SE2->E2_PREFIXO+SE2->E2_NUM==SF2->F2_SERIE+SF2->F2_DOC
				If AllTrim(SE2->E2_ORIGEM)=="MATA460" .And. Alltrim(SE2->E2_TIPO)=="TX" .And. Alltrim(SE2->E2_NATUREZ)=="TPDP"
					RecLock("SE2")
					SE2->(dbDelete())
					SE2->(MsUnLock())
				Endif
				SE2->(DbSkip())
			End
		EndIf
	Endif
	If ExistTemplate("GEMXEXCON",,.T.)
		ExecTemplate("GEMXEXCON",.F.,.F.,{aRegSD2,aRegSE1})
	EndIf

	// ** Exclusão dos títulos de ISS
	If SF2->(SF2->F2_VALISS > 0)
   	    DbSelectArea("SE2")
	    SE2->(DbsetOrder(1))//Indice E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA
	    SE2->(DbGoTop())
		If DbSeek(xFilial("SE2")+SF2->F2_PREFIXO+SF2->F2_DOC)
			Do While SE2->(!Eof()).And. SE2->E2_PREFIXO+SE2->E2_NUM==SF2->F2_PREFIXO+SF2->F2_DOC
				If AllTrim(SE2->E2_NATUREZ) $ Alltrim(&(cNatISS)) .AND. AllTrim(SE2->E2_TIPO) == "TX" .AND. AllTrim(SE2->E2_ORIGEM) $ "MATA460" .AND. Empty(SE2->E2_BAIXA)
					RecLock("SE2")
					SE2->(dbDelete())
					SE2->(MsUnLock())
				Endif
			SE2->(DbSkip())
			EndDo
		EndIf
	Endif

	//--------------------------------------------------------------------------------------------------------------------------+
	//Verifica se o título FUNRURAL está em borderô ou em Fatura e se o titulo sofreu pagamento nao permitir excluir a NF Saída	|
	//--------------------------------------------------------------------------------------------------------------------------+
	If SF2->F2_CONTSOC > 0
		aAreaSE2 := SE2->(GetArea())

		cAliasSE2 := "A521RURAL"
		cQuery := "SELECT E2_BAIXA,E2_SALDO, E2_VALOR, E2_FATURA, E2_NUM, E2_PREFIXO, E2_NUMBOR, E2_NUM "
		cQuery += "FROM "+RetSqlName("SE2")+" SE2 "
		cQuery += "WHERE SE2.E2_FILORIG='"+SF2->F2_FILIAL+"' AND "
		cQuery += "SE2.E2_PREFIXO='"+SF2->F2_PREFIXO+"' AND "
		cQuery += "SE2.E2_NUM='"+SF2->F2_DOC+"' AND "
        cQuery += "SE2.E2_TIPO='TX' AND "
        cQuery += "SE2.E2_ORIGEM LIKE 'MATA460%' AND "
		cQuery += "SE2.D_E_L_E_T_=' ' "

		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSE2,.T.,.T.)

		//Se existe Fatura não deixa excluir
		While (cAliasSE2)->(!EOF())
			If (!Empty((cAliasSE2)->E2_BAIXA) .And. (cAliasSE2)->E2_SALDO <> (cAliasSE2)->E2_VALOR) .or. !EMPTY((cAliasSE2)->E2_FATURA)
				cMensagem := STR0092
				cMensagem += STR0093 + CHR(10) + CHR(13)
				cMensagem += "( "+(cAliasSE2)->E2_NUM+"/"+(cAliasSE2)->E2_PREFIXO+") " + STR0094
				Help(" ",1,"NAOEXCNF","NAOEXCNF",cMensagem,1,0)
				DisarmTransaction()
				RestArea(aArea)
				Return (.F.)
			//Se estiver em borderô não deixa excluir
			ElseIf !Empty((cAliasSE2)->E2_NUMBOR)
				cMensagem := STR0092
				cMensagem += STR0093 + CHR(10)+CHR(13)
				cMensagem += "( "+(cAliasSE2)->E2_NUM+"/"+(cAliasSE2)->E2_PREFIXO+") " + STR0095 + CHR(10) + CHR(13)
				Help(" ",1,"NAOEXCNFS","NAOEXCNFS",cMensagem,1,0)
				DisarmTransaction()
				RestArea(aArea)
				Return (.F.)
			Endif
			(cAliasSE2)->(DBSKIP())
		EndDo
		(cAliasSE2)->(DbCloseArea())
		RestArea(aAreaSE2)
	EndIf

	//-----------------------------------------------------------------------------------------------------//
	// Exclui títulos do FUNRURAL (RAT/SENAR/INSS) quando o TES da NF nao gerar duplicata (Contas a Pagar) //
	//-----------------------------------------------------------------------------------------------------//
	If cPaisloc=="BRA" .And. Empty(SF2->F2_DUPL) .And. (SF2->F2_CONTSOC>0 .Or. SF2->F2_VLSENAR>0 .Or. SF2->F2_VALINSS>0)
		SE2->(DbsetOrder(1)) //E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA
		If SE2->(DbSeek(xFilial("SE2")+cPrefixo+SF2->F2_DOC))
			Do While !SE2->(Eof()) .And. SE2->E2_FILIAL==xFilial("SE2") .And. SE2->E2_PREFIXO==cPrefixo .And. SE2->E2_NUM==SF2->F2_DOC
				If SE2->E2_TIPO$("FUN|SEN|INS") .And. AllTrim(SE2->E2_ORIGEM)=="MATA460"
					RecLock("SE2")
					SE2->(dbDelete())
					SE2->(MsUnLock())
				EndIf
				SE2->(DbSkip())
			EndDo
		EndIf
	EndIf

	//Abaixo chamarei função para deletar as guias geradas para esta nota fiscal, geradas pelo configuador de tributos.
	If cPaisLoc == "BRA" .And. FindFunction("FisDelSF6NF") .AND. AliasInDic("CJ4")
		FisDelSF6NF(SF2->F2_IDNF)
	EndIF

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Posiciona Registros                                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea("SF2")
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se a NFS gerou Guia ICMS ST                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	DbSelectArea("SF6")
	SF6->(DbsetOrder(3))//Indice F6_FILIAL+F6_OPERNF+F6_TIPODOC+F6_DOC+F6_SERIE+F6_CLIFOR+F6_LOJA
	SF6->(DbGoTop())
	If DbSeek(xFilial("SF6")+"2"+PadR(SF2->F2_TIPO,nTamTpDoc)+SF2->F2_DOC+SF2->F2_SERIE+SF2->F2_CLIENTE+SF2->F2_LOJA)
		While !SF6->(Eof()) .AND. xFilial("SF6") == SF2->F2_FILIAL .AND. SF6->F6_OPERNF=="2" .AND.;
				SF6->F6_TIPODOC == PadR(SF2->F2_TIPO,nTamTpDoc) .AND. SF6->F6_DOC== SF2->F2_DOC .AND.;
				SF6->F6_SERIE == SF2->F2_SERIE .AND. SF6->F6_CLIFOR==SF2->F2_CLIENTE .AND.;
				SF6->F6_LOJA==SF2->F2_LOJA

			DbSelectArea("SE2")
			SE2->(DbsetOrder(1))//Indice E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA
			SE2->(DbGoTop())
			If DbSeek(xFilial("SE2")+Alltrim(SF6->F6_NUMERO))
				Do While SE2->(!Eof()).And. SE2->E2_PREFIXO+SE2->E2_NUM==Alltrim(SF6->F6_NUMERO)
					If SE2->E2_ORIGEM=="MATA460A" .And. Alltrim(SE2->E2_TIPO)=="TX"
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Executa os lancamentos contabeis ( 711 ) - ICMS ST	         ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If lLctPad11 .And. lHeader
							nTotalCtb += DetProva(nHdlPrv,"711","MATA520",cLoteCtb,,,,,@c711,@aCT5)
						EndIf
						RecLock("SE2")
						SE2->(dbDelete())
						SE2->(MsUnLock())
					Endif
					SE2->(DbSkip())
				End
			EndIf

			DbSelectArea("SF6")
			RecLock("SF6")
			SF6->(dbDelete())
			SF6->(MsUnLock())
			SF6->(DbSkip())
		EndDo
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Exclusão dos títulos gerados pelo motor de tributos          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If cPaisLoc == "BRA" .And. AliasInDic("F2F") .And. AliasInDic("FK7") .And. FindFunction("xFisDelTit") .And. FindFunction("xFisF2F") .And. SF2->(ColumnPos("F2_IDNF")) > 0
		xFisDelTit(SF2->F2_IDNF, "SF2", "MATA460", 2)
		// Exclusão da tabela de amarração NF x Título
		xFisF2F("E", SF2->F2_IDNF, "SF2")
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se a NFS gerou Complemento da Guia                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If cPaisLoc=="BRA"
		If ChkFile("CDC")
			DbSelectArea("CDC")
			CDC->(DbSetOrder(1))//Indice CDC_FILIAL+CDC_TPMOV+CDC_DOC+CDC_SERIE+CDC_CLIFOR+CDC_LOJA+CDC_GUIA+CDC_UF
			If DbSeek(xFilial("CDC")+"S"+SF2->F2_DOC+SF2->F2_SERIE+SF2->F2_CLIENTE+SF2->F2_LOJA)//+SF2->F2_NFICMST+SF2->F2_EST)
				While !Eof() .And. xFilial("CDC")+SF2->F2_DOC+SF2->F2_SERIE+SF2->F2_CLIENTE+SF2->F2_LOJA ==CDC_FILIAL+CDC_DOC+CDC_SERIE+CDC_CLIFOR+CDC_LOJA
					RecLock("CDC")
					CDC->(dbDelete())
					CDC->(MsUnLock())
					CDC->(DbSkip())
				EndDo
			Endif
		Endif
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Exclusao da tabela CDL (Complemento de Exportacao) ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ChkFile("CDL")
			aAreaAt:=GetArea()
			DbSelectArea("CDL")
			CDL->(DbSetOrder(1))
			If DbSeek(xFilial("CDL")+SF2->F2_DOC+SF2->F2_SERIE+SF2->F2_CLIENTE+SF2->F2_LOJA)//+SF2->F2_NFICMST+SF2->F2_EST)
				While !Eof() .And. xFilial("CDL")+SF2->F2_DOC+SF2->F2_SERIE+SF2->F2_CLIENTE+SF2->F2_LOJA ==;
						CDL_FILIAL+CDL_DOC+CDL_SERIE+CDL_CLIENT+CDL_LOJA
					RecLock("CDL")
					CDL->(dbDelete())
					CDL->(MsUnLock())
					CDL->(DbSkip())
				EndDo
			Endif
			RestArea(aAreaAt)
		Endif
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Exclusao da tabela CFF (Complemento Cred.Enq.Legal)³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ChkFile("CFF")
			aAreaAt:=GetArea()
			DbSelectArea("CFF")

			lExistCFF := CFF->(ColumnPos('CFF_TIPO')) > 0

			If lExistCFF
				CFF->(DbSetOrder(4))
				If CFF->(DbSeek(xFilial("CFF")+SF2->F2_DOC+SF2->F2_SERIE+SF2->F2_CLIENTE+SF2->F2_LOJA+'S'+SF2->F2_TIPO))

					While !Eof() .And. xFilial("CFF")+SF2->F2_DOC+SF2->F2_SERIE+SF2->F2_CLIENTE+SF2->F2_LOJA+SF2->F2_TIPO ==;
										CFF_FILIAL+CFF_NUMDOC+CFF_SERIE+CFF_CLIFOR+CFF_LOJA+CFF_TIPO
						RecLock("CFF")
						CFF->(dbDelete())
						CFF->(MsUnLock())
						CFF->(DbSkip())
					EndDo
				EndIf
			Else
				CFF->(DbSetOrder(1))
				If CFF->(DbSeek(xFilial("CFF")+SF2->F2_DOC+SF2->F2_SERIE+SF2->F2_CLIENTE+SF2->F2_LOJA))//+SF2->F2_NFICMST+SF2->F2_EST)

					While !Eof() .And. xFilial("CFF")+SF2->F2_DOC+SF2->F2_SERIE+SF2->F2_CLIENTE+SF2->F2_LOJA ==;
										CFF_FILIAL+CFF_NUMDOC+CFF_SERIE+CFF_CLIFOR+CFF_LOJA
						RecLock("CFF")
						CFF->(dbDelete())
						CFF->(MsUnLock())
						CFF->(DbSkip())
					EndDo
				EndIf
			Endif
			RestArea(aAreaAt)
		Endif
	Endif
	dbSelectArea("SF2")
	If SF2->F2_TIPO$"DB"
		dbSelectArea("SA2")
		dbSetOrder(1)
		MsSeek(xFilial("SA2")+SF2->F2_CLIENTE+SF2->F2_LOJA)
	Else
		dbSelectArea("SA1")
		dbSetOrder(1)
		MsSeek(xFilial("SA1")+SF2->F2_CLIENTE+SF2->F2_LOJA)
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Executa os lancamentos contabeis ( 635-688 ) - Total             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lLctPad88 .And. lHeader
		lDetProva := .T.
		nTotalCtb += DetProva(nHdlPrv,cPadraoC,"MATA520",cLoteCtb,,,,,@c688,@aCT5)
	ElseIf lLctPad35 .And. lHeader
		lDetProva := .T.
		nTotalCtb += DetProva(nHdlPrv,"635","MATA520",cLoteCtb,,,,,@c635,@aCT5)
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Cancelamento dos titulos financeiros gerados                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	For nX := 1 To Len(aRegSE1)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Posiciona nos titulos financeiros                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SE1->(MsGoto(aRegSE1[nX]))
		FaAvalSE1(2,"MATA520",,nX)

		AtuSldNat(SE1->E1_NATUREZ, SE1->E1_VENCREA, SE1->E1_MOEDA, If(SE1->E1_TIPO$MVRECANT+"/"+MV_CRNEG,"3","2"), "R", SE1->E1_VALOR, SE1->E1_VLCRUZ, If(SE1->E1_TIPO$MVABATIM,"+","-"),,FunName(),"SE1", SE1->(Recno()),0)

		If lExistFJU
			FinGrvEx("R")
		Endif
		RecLock("SE1")
		SE1->(dbDelete())
		FaAvalSE1(3,"MATA520")
		If SE1->E1_MULTNAT == "1"
			DelMultNat("SE1",0,SE1->E1_VALOR) // Apaga as naturezas geradas para o titulo
		Endif
	Next nX
	For nX := 1 To Len(aRegSE2)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Posiciona nos titulos financeiros                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SE2->(MsGoto(aRegSE2[nX]))
		FaAvalSE2(2,"MATA520")
		RecLock("SE2")
		SE2->(dbDelete())
		FaAvalSE2(3,"MATA520")
	Next nX
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Cancelamento dos itens do documento de saida                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	For nX := 1 To Len(aRegSD2)
		cChvCompl := ""
		nVarPrUn := 0

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Posiciona registros                                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SD2->(MsGoto(aRegSD2[nX]))
		RecLock( "SD2", .F. )

		If aScan(aPedBkp,SD2->D2_PEDIDO) == 0
			aAdd(aPedBkp,SD2->D2_PEDIDO)
		EndIf

		dbSelectArea("SF4")
		dbSetOrder(1)
		MsSeek(xFilial("SF4")+SD2->D2_TES)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Apaga movimentacao no SD3 Qdo Documento de transferencica       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cPaisLoc != "BRA" .And. SD2->D2_TIPODOC == '54'
			SD3->(DbSetOrder(3))   //D3_FILIAL+D3_COD+D3_LOCAL+D3_NUMSEQ
			If SD3->(MsSeek(xFilial('SD3')+SD2->D2_COD+cDepTrf+SD2->D2_NUMSEQ)) .AND. !(LocTranSB2(2))
				// Apaga transferencia RE4
				RecLock("SD3",.F.)
				DbDelete()
				MsUnlock()
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza saldo no armazem de poder de terceiros                         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		TrfSldPoder3(SD2->D2_TES,"SD2",SD2->D2_COD,.T.)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Chamada para atualizacao da movimentacao de CQ    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lTranCQ .And. AllTrim(SD2->D2_LOCAL)==AllTrim(cLocalCQ)
			dbSelectArea("SC6")
			dbSetOrder(1)
			If MsSeek(xFilial("SC6")+SD2->D2_PEDIDO+SD2->D2_ITEMPV+SD2->D2_COD) .And. !Empty(SC6->C6_NRSEQCQ)
				dbSelectArea("SD7")
				dbsetorder(3)
				If MsSeek(cSeekD7:=xFilial("SD7")+SD2->D2_COD+SD2->D2_NUMSEQ)
					Do While !Eof() .And. cSeekD7==D7_FILIAL+D7_PRODUTO+D7_NUMSEQ
						If AllTrim(D7_LOCAL)==AllTrim(cLocalCQ) .And. D7_TIPO==3 .And. D7_ESTORNO <> 'S' .And. D7_NUMSEQ==SD2->D2_NUMSEQ
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Realiza automaticamente a Transferencia do saldo para CQ               ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							aMov := {}
							aadd(aMov, {})
							aadd(aMov[Len(aMov)], 3)               //-- Tipo da Movimentação
							aadd(aMov[Len(aMov)], SC6->C6_QTDVEN)  //-- Quantidade a ser Movimentada
							aadd(aMov[Len(aMov)], SC6->C6_LOCAL)   //-- Local de Destino da Movimentacao
							aadd(aMov[Len(aMov)], dDataBase)      	//-- Data da Movimentacao
							aadd(aMov[Len(aMov)], "X")             //-- X=Estornado
							aadd(aMov[Len(aMov)], "")              //-- Motivo da Rejeicao
							aadd(aMov[Len(aMov)], "TRANSFERENCIA")	//-- Observacao
							aadd(aMov[Len(aMov)], SC6->C6_UNSVEN)  //-- Quantidade na 2a Unidade de Medida
							// Atualiza movimentacao de CQ
							fGravaCQ(SD7->D7_PRODUTO, SD7->D7_NUMERO,.T.,aMov,,,,SD2->D2_NUMSEQ)
							Exit
						EndIf
						dbSkip()
					EndDo
				EndIf
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Estorna os dados vinculados ao Pedido de venda                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(SD2->D2_PEDIDO) .And. Iif(cPaisloc=="BRA",Empty(SF2->F2_NFORI),.T.)
			dbSelectArea("SC5")
			dbSetOrder(1)
			MsSeek(xFilial("SC5")+SD2->D2_PEDIDO)

			RecLock("SC5")
			MaAvalSC5("SC5",6)

			dbSelectArea("SC6")
			dbSetOrder(1)
			MsSeek(xFilial("SC6")+SD2->D2_PEDIDO+SD2->D2_ITEMPV+SD2->D2_COD)

			RecLock("SC6")
			MaAvalSC6("SC6",6,"SC5",,,,,,,,"SD2",lRemito)

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Integracao com Average                                         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If GetNewPar("MV_EECFAT",.F.)
				AE100STATUS(SC5->C5_PEDEXP,SC5->C5_NUM)
			EndIf

			If !Empty(SF2->F2_CARGA) .And. !Empty(SF2->F2_SEQCAR)
				AAdd(aSd2Carga,{SD2->D2_PEDIDO, SD2->D2_ITEMPV, SD2->D2_COD, SF2->F2_CARGA, SF2->F2_SEQCAR, SC6->C6_ENDPAD, "3", SF2->F2_SEQENT })
			Endif

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Estorno dos itens do pedido liberado                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea("SC9")
			dbSetOrder(1)

			cAliasSC9 := "MADELNFS"
			cQuery := "SELECT C9_FILIAL,C9_PEDIDO,C9_ITEM,C9_PRODUTO,C9_BLCRED,C9_BLEST,C9_REMITO,C9_SEQUEN,C9_ITEMREM,C9_NFISCAL,C9_SERIENF,C9_BLOQUEI"+",C9_IDDCF"+",C9_CARGA,C9_QTDLIB,C9_QTDLIB2,R_E_C_N_O_ SC9RECNO "
			cQuery += "FROM "+RetSqlName("SC9")+" SC9 "
			cQuery += "WHERE SC9.C9_FILIAL='"+xFilial("SC9")+"' AND "
			cQuery += "SC9.C9_PEDIDO='"+SD2->D2_PEDIDO+"' AND "
			cQuery += "SC9.C9_ITEM='"+SD2->D2_ITEMPV+"' AND "
			cQuery += "SC9.C9_PRODUTO='"+SD2->D2_COD+"' AND "
			If cPaisLoc == "BRA" .Or. !IsRemito(1,'SD2->D2_TIPODOC')
				cQuery += "SC9.C9_NFISCAL='"+SD2->D2_DOC+"' AND "
				cQuery += "SC9.C9_SERIENF='"+SD2->D2_SERIE+"' AND  "
			Else
				cQuery += "SC9.C9_REMITO ='"+SD2->D2_DOC+"' AND "
				cQuery += "SC9.C9_SERIREM='"+SD2->D2_SERIE+"' AND  "
			Endif
			If IntWms(SD2->D2_COD) .And. !IsRemito(1,'SD2->D2_TIPODOC') //Remito não grava D2_NUMSEQ
				cQuery += "SC9.C9_NUMSEQ ='"+SD2->D2_NUMSEQ+"' AND "
			EndIf
			cQuery += "SC9.D_E_L_E_T_=' ' "
			cQuery += "ORDER BY "+SqlOrder(SC9->(IndexKey()))

			cQuery := ChangeQuery(cQuery)
			dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSC9,.T.,.T.)

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Verifica se os itens do pedido de venda, movimentam estoque e geram reservas        ³
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿

			If lECCiaRes .AND. !Empty(SC5->C5_PEDECOM) .AND. SC6->(Found()) .AND. SD2->D2_QUANT == SC6->C6_QTDVEN
				 aAreaSF4 := SF4->(GetArea())
				SF4->(dbSetOrder(1))
				SF4->(MsSeek(xFilial("SF4")+SD2->D2_TES))
				If SF4->F4_ESTOQUE == "S"
					aAdd(aProdRes, {"",; //1
					                SC6->C6_ITEM,;//2
					                SC6->C6_PRODUTO,; //3
					                SC6->C6_DESCRI,; //4
					                SC6->C6_QTDVEN,; //5
					                SC6->C6_LOCAL,; //6
					                Date(),; //7
					                SC6->C6_FILIAL,;//8
					                SC6->C6_NUM})//9
				EndIf

				 RestArea(aAreaSF4)
			EndIf
			While !Eof() .And. xFilial("SC9") == (cAliasSC9)->C9_FILIAL .And.;
					SD2->D2_PEDIDO == (cAliasSC9)->C9_PEDIDO .And.;
					SD2->D2_ITEMPV == (cAliasSC9)->C9_ITEM

				If SD2->D2_COD == (cAliasSC9)->C9_PRODUTO
					SC5->(dbSetOrder(1))
					If  lECommerce

						If  SC5->(dbSeek(xFilial("SC5")+(cAliasSC9)->C9_PEDIDO)) .AND. aScan(aRegSC5, { |r| r = SC5->(Recno())}) = 0
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Caso seja pedido e-Commerce não excluirá o SC9.                          ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If !( Empty(SC5->C5_ORCRES) ) .AND. SL1->( ColumnPos("L1_ECFLAG") > 0 ) .AND. (Posicione("SL1",1,xFilial("SL1")+SC5->C5_ORCRES,"L1_ECFLAG")=="1")
								aadd(aRegSC5, SC5->(Recno()))
							ElseIf lECCia .AND. !Empty(SC5->C5_PEDECOM)
								aadd(aRegSC5, SC5->(Recno()))
							EndIf

						EndIf
					EndIf

					//Verifica se é pedido do módulo controle de Lojas e não é pedido do e-commerce já processado
					If  aScan(aPedLoja, { |r| r = SC5->(Recno())}) = 0   .AND.  aScan(aRegSC5, { |r| r = SC5->(Recno())}) = 0  .AND. ;
						SC5->(dbSeek(xFilial("SC5")+(cAliasSC9)->C9_PEDIDO)) .AND. !Empty(SC5->C5_ORCRES)

						SL1->(DbSetOrder(1)) //L1_FILIAL + L1_NUM
						If SL1->(DbSeek(xFilial("SL1")+ SC5->C5_ORCRES))
							aSL1 := {}
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Atualizacao da Legenda da tabela SL1     |
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							aAdd(aSL1,{"L1_DOC"		, ""	})
							aAdd(aSL1,{"L1_SERIE" 	, ""	})
				    		// Atualiza SL1
					        Lj7GeraSL( "SL1", aSL1, .F., .T. )
					        aadd(aPedLoja, SC5->(Recno()))
						EndIf
					EndIf

					SC6->(dbSetOrder(1))
					SC6->(dbSeek(xFilial("SC6")+(cAliasSC9)->(C9_PEDIDO+C9_ITEM+C9_PRODUTO)))

					aEmpBN := A410CarBen((cAliasSC9)->C9_PEDIDO,(cAliasSC9)->C9_ITEM)
					If !Empty(aEmpBN)
						A410LibBen(2,aEmpBN[1,1],aEmpBN[1,2],(cAliasSC9)->C9_QTDLIB,(cAliasSC9)->C9_QTDLIB2)
					EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Atualiza o campo B2_QEMPN  ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					FatAtuEmpN("+",.T.,cAliasSC9)
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Para as notas fiscais sem remito³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If (cAliasSC9)->C9_BLCRED=="10" .And. (cAliasSC9)->C9_BLEST=="10" .And. Empty(SD2->D2_REMITO) .And.;
						SD2->D2_DOC == (cAliasSC9)->C9_NFISCAL .And. SD2->D2_SERIE == (cAliasSC9)->C9_SERIENF
						SC9->(MsGoto((cAliasSC9)->SC9RECNO))

						//-- Armazena informações necessárias na nova SC9 quando Apto a Faturar
						If IntWms(SD2->D2_COD)
							cIdDCFAnt  := SC9->C9_IDDCF
							cNFiscal   := SC9->C9_NFISCAL
							cSeqSC9    := SC9->C9_SEQUEN
							cBlWmsAnt  := SC9->C9_BLWMS
							cRomEmbAnt := SC9->C9_ROMEMB
							cEndPadAnt := SC9->C9_ENDPAD
							cAgregAnt  := SC9->C9_AGREG
							cLocaliAnt := SC6->C6_LOCALIZ
						EndIf

						/* Integração RISK - TOTVS Mais Negócios
						 Seta o número do ticket de crédito para processamento */
						If lRskActive .And. lRskMTkt
							RskSetMTkt( SC9->C9_TICKETC )
						EndIf

						RecLock("SC9")
						MaAvalSC9("SC9",12)
						SC9->(dbDelete())
						MsUnLock()

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Para as notas fiscais com remito previo, so limpar os campos de bloqueio ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf (cAliasSC9)->C9_BLCRED=="10" .And. (cAliasSC9)->C9_BLEST=="10" .And. !Empty(SD2->D2_REMITO).And.;
						SD2->D2_DOC == (cAliasSC9)->C9_NFISCAL .And. SD2->D2_SERIE == (cAliasSC9)->C9_SERIENF

						SC9->(MsGoto((cAliasSC9)->SC9RECNO))
						RecLock("SC9")
						C9_BLEST	:=	Space(Len(C9_BLEST  ))
						C9_BLCRED	:=	Space(Len(C9_BLCRED ))
						C9_NFISCAL	:=	Space(Len(C9_NFISCAL))
						C9_SERIENF	:=	Space(Len(C9_SERIENF))
						MsUnLock()
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Para os remitos.   ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf (Empty((cAliasSC9)->C9_BLCRED+(cAliasSC9)->C9_BLEST) .Or. (cPaisLoc =="MEX" .And. (cAliasSC9)->C9_BLCRED=="10" .And. (cAliasSC9)->C9_BLEST=="10" )) .And.;
							(cAliasSC9)->C9_REMITO+(cAliasSC9)->C9_ITEMREM+(cAliasSC9)->C9_SEQUEN == SD2->D2_DOC+SD2->D2_ITEM+SD2->D2_SEQUEN

						//Necessário dbGoto para atualizar informações do registro.
						SC9->(dbGoto((cAliasSC9)->SC9RECNO))

						//Armazena informações necessárias na nova SC9
						If IntWms(SD2->D2_COD)
							cIdDCFAnt  := SC9->C9_IDDCF
							cNFiscal   := SC9->C9_REMITO
							cSeqSC9    := SC9->C9_SEQUEN
							cBlWmsAnt  := SC9->C9_BLWMS
							cRomEmbAnt := SC9->C9_ROMEMB
							cEndPadAnt := SC9->C9_ENDPAD
							cAgregAnt  := SC9->C9_AGREG
							cLocaliAnt := SC6->C6_LOCALIZ
						EndIf

						RecLock("SC9")
						MaAvalSC9("SC9",12,,,,,,,,.T.)
						SC9->(dbDelete())
						MsUnLock()
					Endif
					EndIf
				dbSelectArea(cAliasSC9)
				dbSkip()
			EndDo

			dbSelectArea(cAliasSC9)
			dbCloseArea()
			dbSelectArea("SC9")

		ElseIf !Empty(SD2->D2_REMITO)
			aAreaTmp	:=	GetArea()
			aAreaSD2	:=	SD2->(GetArea())
			SD2->(DbSetOrder(3))
			cPedRem		:= ""
			cItPedRem	:= ""
			cSeqPedRem	:= ""
			If SD2->(MSSeek(xFilial("SD2")+SD2->D2_REMITO+SD2->D2_SERIREM+SD2->D2_CLIENTE+SD2->D2_LOJA+SD2->D2_COD+SD2->D2_ITEMREM))
				cPedRem		:= SD2->D2_PEDIDO
				cItPedRem	:= SD2->D2_ITEMPV
				cSeqPedRem	:= SD2->D2_SEQUEN
			Endif
			RestArea(aAreaSD2)
			If !Empty(cPedRem)
				aAreaSC5	:=	SC5->(GetArea())
				SC5->(DbSetOrder(1))
				If SC5->(MSSeek(xFilial("SC5")+cPedRem))

					RecLock("SC5")
					MaAvalSC5("SC5",6)

					aAreaSC6 :=	SC6->(GetArea())
					SC6->(dbSetOrder(1))
					If SC6->( MsSeek(xFilial("SC6")+cPedRem+cItPedRem+SD2->D2_COD) )
						RecLock("SC6")
						MaAvalSC6("SC6",6,"SC5",,,,,,,,"SD2",lRemito)

						aAreaSC9	:=	SC9->(GetArea())
						SC9->(DBSetOrder(1))
						If SC9->(MSSeek(xFilial("SC9")+cPedRem+cItPedRem+cSeqPedRem+SD2->D2_COD, .F.))
							AtuSA1Nf('SF2','SD2',SD2->D2_TIPO,'C',.T.,.T.,-1)
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Para as notas fiscais com remito previo, so limpar os campos de bloqueio ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							RecLock("SC9")
							C9_BLEST	:=	Space(Len(C9_BLEST  ))
							C9_BLCRED	:=	Space(Len(C9_BLCRED ))
							C9_NFISCAL	:=	Space(Len(C9_NFISCAL))
							C9_SERIENF	:=	Space(Len(C9_SERIENF))
							MsUnLock()
						Endif
						RestArea(aAreaSC9)
					EndIf
					RestArea(aAreaSC6)
				Endif
				RestArea(aAreaSC5)
			Endif
			RestArea(aAreaTMP)
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Estorna os dados referentes a devolucao de compra              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SF2->F2_TIPO == "D"
			dbSelectArea("SD1")
			dbSetOrder(1)
			If MsSeek(xFilial("SD1")+SD2->D2_NFORI+SD2->D2_SERIORI+SD2->D2_CLIENTE+SD2->D2_LOJA+SD2->D2_COD+SD2->D2_ITEMORI)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ13ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Estorna da baixa do CQ                                         ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Estorna o item da nota fiscal de entrada                       ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				RecLock("SD1")
				SD1->D1_QTDEDEV := Max(0,SD1->D1_QTDEDEV-SD2->D2_QUANT)
				SD1->D1_VALDEV  := Max(0,SD1->D1_VALDEV-SD2->D2_TOTAL)
				MsUnLock()

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Estorna quantidade no item do pedido de compra e altera o 		³
				//³ saldo no estoque														³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				aAreaSC7 := SC7->(GetArea())
				SC7->(DbSetOrder(1))
				If SC7->(DbSeek(xFilial("SC7")+SD1->D1_PEDIDO+SD1->D1_ITEMPC))
					nFalta := SC7->C7_QUANT-SC7->C7_QUJE
					If nFalta > 0
						If SD2->D2_QUANT <= nFalta
							nFalta := SD2->D2_QUANT
						Endif
						RecLock("SC7",.F.)
						Replace C7_QUJE With (C7_QUJE + nFalta)
						Replace C7_ENCER with IIF(C7_QUANT-C7_QUJE>0," ","E")
						MsUnlock()
						dbSelectArea("SB2")
						dbSetOrder(1)
						If msSeek(xFilial("SB2")+SC7->C7_PRODUTO+SC7->C7_LOCAL)
							GravaB2Pre("-",nFalta,SC7->C7_TPOP)
						EndIf
					Endif
				EndIf
				RestArea(aAreaSC7)

				If cPaisLoc <> "BRA"   //SOMENTE LOCALIZACOES
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Estorna tambem os campos QTDEDEV e VALDEV das notas ou remitos associados        ³
					//³aa nota ou remito original aqui posicionado.                                     ³
					//³Isso garante que futuras notas de credito ou remitos de devolucao considerem o   ³
					//³saldo a devolver corretamente.                                                   ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If "MATA102" $ Funname()
						// Pesquisa pela nota gerada pelo remito original
						cSeekSD1 := SD1->D1_FORNECE+SD1->D1_LOJA+SD1->D1_SERIE+SD1->D1_DOC+SD1->D1_ITEM
						DBSelectArea("SD1")
						DBSetOrder(10)
						If MsSeek(xFilial("SD1")+cSeekSD1 ,.F.)
							RecLock("SD1", .F.)
							SD1->D1_QTDEDEV := Max(0,SD1->D1_QTDEDEV-SD2->D2_QUANT)
							SD1->D1_VALDEV  := Max(0,SD1->D1_VALDEV-SD2->D2_TOTAL)
							MsUnlock()
						EndIf
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Na exclusao de uma devolucao de remito de entrada, atualiza a quantida-³
						//³ a classificar do remito de entrada.                                    ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If SD2->D2_TIPODOC == "61" .And. Alltrim(SD2->D2_ESPECIE) == "RCD"
							aAreaSD1 := SD1->(GetArea())
							DBSelectArea("SD1")
							DBSetOrder(1)
							If MsSeek(xFilial("SD1")+SD2->D2_NFORI+SD2->D2_SERIORI+SD2->D2_CLIENTE+SD2->D2_LOJA+SD2->D2_COD+SD2->D2_ITEMORI)
								RecLock("SD1",.F.)
								SD1->D1_QTDACLA := SD1->D1_QTDACLA + SD2->D2_QUANT
								MsUnLock()
							EndIf
							RestArea(aAreaSD1)
						EndIf
					Elseif "MATA466" $ Funname()
						// Pesquisa, se houver, o remito vinculado aa nota original
						If !Empty( SD1->D1_REMITO + SD1->D1_SERIREM )
							cSeekSD1 := SD1->D1_REMITO+SD1->D1_SERIREM+SD1->D1_FORNECE+SD1->D1_LOJA+SD1->D1_COD+SD1->D1_ITEMREM
							DBSelectArea("SD1")
							DBSetOrder(1)
							If MsSeek(xFilial("SD1")+cSeekSD1 ,.F.)
								RecLock("SD1", .F.)
								SD1->D1_QTDEDEV := Max(0,SD1->D1_QTDEDEV-SD2->D2_QUANT)
								SD1->D1_VALDEV  := Max(0,SD1->D1_VALDEV-SD2->D2_TOTAL)
								MsUnlock()
							EndIf
						EndIf
					EndIf
				EndIf
				If (lLctPad96 .And. lLctPad41 .And. lHeader )
					dbSelectArea("SDE")
					dbSetOrder(1)
					MsSeek(xFilial("SDE")+SD1->D1_DOC+SD1->D1_SERIE+SD1->D1_FORNECE+SD1->D1_LOJA+SD1->D1_ITEM)
					While ( !Eof() .And. ;
							xFilial("SDE") == SDE->DE_FILIAL .And.;
							SD1->D1_DOC == SDE->DE_DOC .And.;
							SD1->D1_SERIE == SDE->DE_SERIE .And.;
							SD1->D1_FORNECE == SDE->DE_FORNECE .And.;
							SD1->D1_LOJA == SDE->DE_LOJA .And.;
							SD1->D1_ITEM == SDE->DE_ITEMNF)

						nTotalCtb += DetProva(nHdlPrv,cPadraoI,"MATA520",cLoteCtb,,,,,@c696,@aCT5)

						dbSelectArea("SDE")
						dbSkip()
					EndDo
				ElseIf  (lLctPad30 .And. lLctPad41 .And. lHeader )
					dbSelectArea("SDE")
					dbSetOrder(1)
					MsSeek(xFilial("SDE")+SD1->D1_DOC+SD1->D1_SERIE+SD1->D1_FORNECE+SD1->D1_LOJA+SD1->D1_ITEM)
					While ( !Eof() .And. ;
							xFilial("SDE") == SDE->DE_FILIAL .And.;
							SD1->D1_DOC == SDE->DE_DOC .And.;
							SD1->D1_SERIE == SDE->DE_SERIE .And.;
							SD1->D1_FORNECE == SDE->DE_FORNECE .And.;
							SD1->D1_LOJA == SDE->DE_LOJA .And.;
							SD1->D1_ITEM == SDE->DE_ITEMNF)

						nTotalCtb += DetProva(nHdlPrv,"641","MATA520",cLoteCtb,,,,,@c641,@aCT5)

						dbSelectArea("SDE")
						dbSkip()
					EndDo
				EndIf
			EndIf
		EndIf

		If SF2->F2_TIPODOC == "21" .And. cPaisLoc == "MEX" .and. lLxMxAQtDl
			LxMxAQtDel(SD2->D2_NFORI+SD2->D2_SERIORI+SD2->D2_CLIENTE+SD2->D2_LOJA+SD2->D2_COD+SD2->D2_ITEMORI,SD2->D2_QUANT,SD2->D2_TOTAL)
		ENDIF
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Estorno dos lancamentos de Rateio Itens NF                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ( lLctPad33 .And. lHeader )
			dbSelectArea("AGH")
			AGH->(dbSetOrder(2)) //AGH->AGH_FILIAL + AGH->AGH_NUM + AGH->AGH_ITEMPD + AGH->AGH_ITEM
			If dbSeek(xFilial("AGH")+SD2->D2_DOC+SD2->D2_SERIE+SD2->D2_ITEM )
				While (!AGH->(EOF()) .And. ;
					xFilial("AGH") == AGH->AGH_FILIAL .And.;
					SD2->D2_DOC == AGH->AGH_NUM .And.;
					SD2->D2_SERIE == AGH->AGH_SERIE .And.;
					SD2->D2_ITEM == AGH->AGH_ITEMPD)

					nTotalCtb += DetProva(nHdlPrv,"633","MATA520",cLoteCtb)
					AGH->(dbSkip())
				EndDo
			EndIf
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Estorno dos lancamentos de Poder de Terceiro                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SF4->F4_PODER3<>"N"
			MaAtuSB6("SD2",4)
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Estorna os arquivos de Gerenciamento de Projetos - 2:Estorno,3:Exclusao ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If IntePms()		// Integracao PMS
			PmsWriteD2(2,"SD2")     // Estorna os custos no Projeto AF9/AFJ.
			PMsWriteD2(3,"SD2")    //  Deleta na tabela "AFS".
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Estorno das Demandas                                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SF4->F4_ESTOQUE == "S" .And. (Empty(SD2->D2_REMITO).Or.SD2->D2_TPDCENV $ "1A")
			If !(SD2->D2_TIPO $ "DBCIP")
				dbSelectArea("SB3")
				dbSetOrder(1)
				If ( MsSeek(xFilial("SB3")+SD2->D2_COD) )
					RecLock("SB3")
				Else
					RecLock("SB3",.T.)
					SB3->B3_FILIAL := xFilial("SB3")
					SB3->B3_COD    := SD2->D2_COD
				EndIf
				FieldPut(ColumnPos("B3_Q"+StrZero(Month(SD2->D2_EMISSAO),2)),FieldGet(ColumnPos("B3_Q"+StrZero(Month(SD2->D2_EMISSAO),2)))-SD2->D2_QUANT)
				SB3->B3_MES := SD2->D2_EMISSAO
				MsUnLock()
			EndIf
		Endif
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Execlui os lancamentos contabeis ( 630-696 ) - Itens         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lLctPad96
			If lHeader
				dbSelectArea("SB1")
				dbSetOrder(1)
				MsSeek(xFilial("SB1")+SD2->D2_COD)
				lDetProva := .T.
				nTotalCtb += DetProva(nHdlPrv,cPadraoI,"MATA520",cLoteCtb,,,,,@c696,@aCT5)
			EndIf
		ElseIf lLctPad30
			If lHeader
				dbSelectArea("SB1")
				dbSetOrder(1)
				MsSeek(xFilial("SB1")+SD2->D2_COD)
				lDetProva := .T.
				nTotalCtb += DetProva(nHdlPrv,"630","MATA520",cLoteCtb,,,,,,@aCT5)
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Estorno de carga do OMS                                        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(SF2->F2_CARGA)
			aRotas := {}
			OsAvalDAI("DAI",3,@aRotas,.F.,,@cFilcar,@oMdlCarga)
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Estorno da transferencia da base instalada - Field Service     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SF4->F4_ESTOQUE == "S" .And. SF4->F4_ATUTEC == "S"
			MaEstNfAA3()
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Exclui a amarracao com os conhecimentos                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		MsDocument( "SF2", SF2->( RecNo() ), 2, , 3 )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Grava os lancamentos nas contas orcamentarias SIGAPCO    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		PcoDetLan("000101","01","MATA520",.T.)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Recompõe o valor da variação de preço na Nota de Origem        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SD2->D2_TIPO == "C" .And. !Empty( SD2->D2_NFORI ) .And. !Empty( SD2->D2_SERIORI ) .And. !Empty( SD2->D2_ITEMORI )
			If SD2->D2_QUANT == 0 .And. SD2->D2_TOTAL > 0
				cChvCompl := SD2->D2_FILIAL + SD2->D2_NFORI + SD2->D2_SERIORI + SD2->D2_CLIENTE + SD2->D2_LOJA + SD2->D2_COD + SD2->D2_ITEMORI
				nVarPrUn := SD2->D2_TOTAL	//Total da NF de Complemento
				aAreaSD2 :=	SD2->( GetArea() )
				SD2->( DbSetOrder( 3 ) )
				//Posiciona na NF principal e verifica se teve reajuste de preço para fazer o estorno
				If SD2->( MSSeek( cChvCompl ) ) .And. SD2->D2_VARPRUN > 0 .And. SD2->D2_QUANT > 0
					SD2->( RecLock( "SD2", .F. ) )
					SD2->D2_VARPRUN -= (nVarPrUn / SD2->D2_QUANT)
					SD2->( MsUnLock() )
				EndIf
				RestArea(aAreaSD2)
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Exclui a Nota Fiscal - antes de atualizar o estoque por causa  ³
		//³ da INTEGRIDADE REFERENCIAL - NAO REMOVER ESTA ORDEM            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		//Faz chamada para exclusão dos tributos genéricos.
		IF lTrbGen .AND. !Empty(SD2->D2_IDTRIB)
			MaFisTG(2,,,SD2->D2_IDTRIB)
		EndIF

		SD2->(dbDelete())
		SD2->(FkCommit())
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Estorno do estoque baixado na Saida                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SF4->F4_ESTOQUE == "S" .And. (Empty(SD2->D2_REMITO).Or.SD2->D2_TPDCENV $ "1A")

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Armazena a tes original para integridade referencial pois      ³
			//³ a tes eh trocada para uma de entrada para o estorno da nota    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			lRmOrdSep	:= .F.
			aCusto      := PegaCusD2()
			SB2->(B2AtuComD2(aCusto,1,,Iif(cPaisLoc <> "BRA",!Empty(SD2->D2_PEDIDO).Or.(nPDevLoc == 1.And.Localiza(SD2->D2_COD)),Nil),nPDevLoc,,.T.,,,,,, @lRmOrdSep))

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Volta a TES original para a integridade referencial validar    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Exclui se for proviniente da geração de NF de Cobertura  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SDH->(dbSetOrder(1))
		If SDH->(MsSeek(xFilial("SDH")+SD2->D2_NUMSEQ))
			NfeDocVin("SDH",SDH->(Recno()),3,/*obsoleto*/,{{'DH_IDENTNF', Padr(SD2->D2_NUMSEQ, nTamIDENT), Nil},{'DH_REC_WT', SDH->(Recno()), Nil}})
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Estorna saldo do contrato SIGAGCT                                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(SC6->C6_ITEMED)
			CtaAvalGCT(2,aContrato,SC5->C5_MDCONTR,SC5->C5_MDPLANI,SC6->C6_ITEMED,SD2->D2_QUANT,,SC5->C5_MDNUMED,SD2->D2_TOTAL)
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza o orcamento do Televendas, se foi originado a partir³
		//³dele no modulo Call Center (SIGATMK)                         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(SD2->D2_PEDIDO)
			TkAtuTlv(SD2->D2_PEDIDO,1)
		EndIf

		//³ Remove a nota fiscal e item do movimento da locação de equipamentos ³

		At800ExNFSai(nX,Len(aRegSD2))

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Integracao com o ACD		  				  	  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lIntACD
			cRetPE := CBMSD2520(lRmOrdSep)
			cBlock += If(ValType(cRetPE)=="C",cRetPE,"")
		//Executa Novo DCL
		ElseIf lDclNew
			DCLMSD2520()
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Executa execblock                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		ElseIf	lMSd2520T
			cRetPE := ExecTemplate("MSD2520",.F.,.F.)
			cBlock += If(ValType(cRetPE)=="C",cRetPE,"")
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Refaz as reservas na SC0.      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		// C5_ORCRES verifica se o pedido foi originado pelo SIGALOJA
		If lCarteira .And. !Empty(SC9->C9_RESERVA) .And. Empty(SC5->C5_ORCRES)
			If (SC6->C6_QTDRESE == 0)
				cReserva := NextNumero("SC0",1,"C0_NUM",.T.)
			Else
				cReserva := SC6->C6_RESERVA
				If SC0->(MsSeek(xFilial("SC0")+SC6->C6_RESERVA+SC9->C9_PRODUTO+SC6->C6_LOCAL))
					RecLock("SC0", .F.)
					SC0->C0_QTDORIG := SC9->C9_QTDLIB + SC6->C6_QTDRESE
					SC0->(MsUnlock())
				EndIf
			EndIf

			If !a430Reserv({1,"PD",SC5->C5_NUM,"",cFilAnt},cReserva,SC6->C6_PRODUTO,SC6->C6_LOCAL,SC9->C9_QTDLIB,;
							{SC6->C6_NUMLOTE,;
							SC6->C6_LOTECTL,;
							SC6->C6_LOCALIZ,;
							SC6->C6_NUMSERI})
				cReserva := ""
			Else
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Atualiza a qtde em aberto do pedido de venda                 ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				dbSelectArea("SB2")
				dbSetOrder(1)
				If ( !MsSeek(xFilial("SB2")+SC6->C6_PRODUTO+SC6->C6_LOCAL) )
					CriaSB2( SC6->C6_PRODUTO,SC6->C6_LOCAL )
				EndIf
				RecLock("SB2")
				SB2->B2_QPEDVEN -= SC9->C9_QTDLIB
				SB2->B2_QPEDVE2 -= ConvUM(SB2->B2_COD, SC9->C9_QTDLIB, 0, 2)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Atualiza o saldo da reserva                                  ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				dbSelectArea("SC0")
				dbSetOrder(1)
				If (xFilial("SC0")+cReserva+SC6->C6_PRODUTO+SC6->C6_LOCAL==SC0->C0_FILIAL+SC0->C0_NUM+SC0->C0_PRODUTO+SC0->C0_LOCAL .Or. ;
						MsSeek(xFilial("SC0")+cReserva+SC6->C6_PRODUTO+aSaldos[nX,11]) )
					RecLock("SC0")
					SC0->C0_QUANT -= SC9->C9_QTDLIB
					SC0->C0_TIPO  := "PD"
					SC0->C0_QTDPED += SC9->C9_QTDLIB
				EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Atualiza o item do pedidod de venda                          ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				RecLock("SC6")
				SC6->C6_QTDRESE += SC9->C9_QTDLIB
				SC6->C6_RESERVA := cReserva
			EndIf
		Else
			MaRefazSC0()
		EndIf

		If	lMSd2520
			ExecBlock("MSD2520",.F.,.F.)
		EndIf

		//-- CodBlock a ser avaliado na gravacao do SC9
		bBlock := &('{||'+cBlock+'}')

		If lM521Cart
			lCarteira := ExecBlock("M521CART",.F.,.F.)
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Liberar pedido de venda                                        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !lCarteira .And. Empty(SC5->C5_PEDECOM) .And. !Empty(SD2->D2_PEDIDO) .And. Empty(SD2->D2_REMITO) .And. Iif(cPaisloc=="BRA",Empty(SF2->F2_NFORI),.T.)
			If lSelLote .Or. !Empty(SC6->C6_SERVIC)
				RecLock("SC6")
				nPrcVen         := SC6->C6_PRCVEN
				SC6->C6_LOTECTL := SD2->D2_LOTECTL
				SC6->C6_NUMLOTE := SD2->D2_NUMLOTE
				SC6->C6_LOCALIZ := SD2->D2_LOCALIZ
				SC6->C6_DTVALID := SD2->D2_DTVALID
				SC6->C6_NUMSERI := SD2->D2_NUMSERI
				SC6->C6_POTENCI := SD2->D2_POTENCI

				If SC5->C5_ACRSFIN > 0
					nD2PrcVen := SD2->D2_PRCVEN - a410Arred( ( ( SC6->C6_PRCVEN * SC5->C5_ACRSFIN ) / 100 ), "D2_PRCVEN" )
				Else
					nD2PrcVen := SD2->D2_PRCVEN
				EndIf

				If SC5->C5_PDESCAB > 0 .Or. SC5->C5_DESCONT > 0
					SC6->C6_PRCVEN  := xmoeda((SD2->D2_PRCVEN+(nPrcVen-SD2->D2_PRCVEN)),SF2->F2_MOEDA,SC5->C5_MOEDA,SF2->F2_EMISSAO,TamSX3("D2_PRCVEN")[2])
				Else
					//Caso utilize a Dedução de ICMS e não tenha valor de suframa soma o valor do ICMS.
					If SF4->F4_AGREG$"R" .And. SD2->D2_DESCZFR == 0
						SC6->C6_PRCVEN  := xmoeda((SD2->D2_PRCVEN+(SD2->D2_VALICM/SD2->D2_QUANT)),SF2->F2_MOEDA,SC5->C5_MOEDA,SF2->F2_EMISSAO,TamSX3("D2_PRCVEN")[2])
					Else
						SC6->C6_PRCVEN  := xmoeda((nD2PrcVen+(SD2->D2_DESCZFR/SD2->D2_QUANT)),SF2->F2_MOEDA,SC5->C5_MOEDA,SF2->F2_EMISSAO,TamSX3("D2_PRCVEN")[2])
					EndIf
				EndIf

				If IntWms(SD2->D2_COD)
					SC6->C6_LOCALIZ := cEndPadAnt
					MaLibDoFat(SC6->(RecNo()),SD2->D2_QUANT,.T.,.T.,.F.,.F.,.T.,.F.,,bBlock,,,.F.)
				Else
					MaLibDoFat(SC6->(RecNo()),SD2->D2_QUANT,.T.,.F.,.F.,.T.,.T.,.F.,,bBlock,,,.F.)
				EndIf

				SC6->C6_LOTECTL := ''//aSaldos[nX][1]
				SC6->C6_NUMLOTE := ''//aSaldos[nX][2]
				SC6->C6_LOCALIZ := ''//aSaldos[nX][3]
				SC6->C6_NUMSERI := ''//aSaldos[nX][4]
				SC6->C6_DTVALID := Ctod('')//aSaldos[nX][7]
				SC6->C6_POTENCI := 0//aSaldos[nX][6]
				SC6->C6_PRCVEN  := nPrcVen

				If IntWms(SD2->D2_COD)
					RecLock('SC9')
					SC9->C9_IDDCF  := cIdDCFAnt
					SC9->C9_BLWMS  := cBlWmsAnt
					SC9->C9_STSERV := IIf(!Empty(SC9->C9_SERVIC),"3","")
					SC9->C9_AGREG  := cAgregAnt
					SC9->C9_ENDPAD := cEndPadAnt
					SC9->C9_ROMEMB := cRomEmbAnt
					SC9->(MsUnlock())
					//-- Atualiza endereço origem
					SC6->C6_LOCALIZ := cLocaliAnt
					// Atualização da nova sequência no WMS
					If !lCarteira .And. !(cSeqSC9 == SC9->C9_SEQUEN)
						WmsSeqSC9(SC9->(Recno()),cSeqSC9)
					EndIf
				EndIf
			Else
				RecLock("SC6")
				aRestSC6 := {}
				aRestSC6 := { SC6->C6_PRCVEN,;
							SC6->C6_LOTECTL,;
							SC6->C6_NUMLOTE,;
							SC6->C6_LOCALIZ,;
							SC6->C6_NUMSERI,;
							SC6->C6_DTVALID,;
							SC6->C6_POTENCI;
							}

				SC6->C6_LOTECTL := SD2->D2_LOTECTL
				SC6->C6_NUMLOTE := SD2->D2_NUMLOTE
				SC6->C6_LOCALIZ := SD2->D2_LOCALIZ
				SC6->C6_DTVALID := SD2->D2_DTVALID
				SC6->C6_NUMSERI := SD2->D2_NUMSERI
				SC6->C6_POTENCI := SD2->D2_POTENCI

				MaLibDoFat(SC6->(RecNo()),SD2->D2_QUANT,.T.,.F.,.F.,.T.,.T.,.F.,,bBlock)

				SC6->C6_PRCVEN  := aRestSC6[1]
				SC6->C6_LOTECTL := aRestSC6[2]
				SC6->C6_NUMLOTE := aRestSC6[3]
				SC6->C6_LOCALIZ := aRestSC6[4]
				SC6->C6_NUMSERI := aRestSC6[5]
				SC6->C6_DTVALID := aRestSC6[6]
				SC6->C6_POTENCI := aRestSC6[7]
				SC6->(MsUnLock())
				aSize(aRestSC6, 0)
			EndIf
			If aScan(aPedido,SD2->D2_PEDIDO)==0
				AAdd(aPedido,SD2->D2_PEDIDO)
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Gravação do Log de Liberação do Pedido de Venda                             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lHabGrvLog .And. lCarteira //Habilita a função para gravação do log de liberação do pedido de venda
			Aadd(aLogLibPV,{SC9->C9_FILIAL,SC9->C9_PEDIDO,SC9->C9_ITEM,SC9->C9_PRODUTO,SC9->C9_QTDLIB,;
			SC5->C5_ORIGEM,SC9->C9_BLCRED,SC9->C9_BLEST,dDatabase,Time(),3,.F.,ProcName()})
		EndIf

		//No novo WMS é necessário atualizar o saldo na tabela de estoque por endereço WMS
		If SF4->F4_ESTOQUE == "S" .And. IntWms(SD2->D2_COD) .And. lWmsNew
			WmsUndoPed(SC9->(Recno()),lCarteira,cNFiscal)
		EndIf
	Next nX

	If lHabGrvLog .And. !Empty(aLogLibPV)
		FATA410(aLogLibPV)
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Estorna Registro da tabela CDA se houver                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	MAFISCDA(,,.T.,SF2->("S"+F2_ESPECIE+"S"+F2_DOC+F2_SERIE+F2_CLIENTE+F2_LOJA),"S","SF2")

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Estorna os Livros Fiscais                                      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	MaFisAtuSF3(2,"S",SF2->(RecNo()))

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Grava os lancamentos nas contas orcamentarias SIGAPCO    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PcoDetLan("000101","02","MATA521",.T.)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Estorna caucoes do Gestao de Contratos - SIGAGCT               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If len(aContrato) > 0
		CtaAbatCauc(2,aContrato[1], aRegSE1, SF2->F2_CLIENTE, SF2->F2_LOJA, SF2->F2_DOC, SF2->F2_SERIE, NIL, SF2->F2_VALBRUT )
	EndIf


	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Rotina para tratar a exclusao do rateio de itens da nota fiscal de saida.³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aAreaRat := GetArea()
	dbSelectArea("AGH")
	AGH->(dbSetOrder(1)) 	//AGH_FILIAL+AGH_NUM+AGH_SERIE+AGH_FORNEC+AGH_LOJA+AGH_ITEMPD+AGH_ITEM
	If AGH->(dbSeek(xFilial("AGH") + SF2->F2_DOC + SF2->F2_SERIE +  SF2->F2_CLIENTE  + SF2->F2_LOJA ))
		While AGH->(!Eof()) .And. AGH->(AGH_FILIAL+AGH_NUM+AGH_SERIE+AGH_FORNEC+AGH_LOJA) == xFilial("AGH") + SF2->F2_DOC + SF2->F2_SERIE +  SF2->F2_CLIENTE  + SF2->F2_LOJA
			RecLock("AGH",.F.)
			AGH->(dbDelete())
			MsUnLock()

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Grava os lancamentos nas contas orcamentarias SIGAPCO    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			PcoDetLan("000101","03","MATA521",.T.)

			AGH->(dbSkip())
		EndDo
	EndIf
	RestArea(aAreaRat)

	If lMs520Del
		ExecBlock("MS520DEL",.F.,.F.)
	EndIf

	//Elimina a Nota Fiscal do SIGAGFE
	//se integração com o mesmo estiver ativa
	If !MATA521IPG(.T.)
		DisarmTransaction()
		lContinua := .F.
	EndIf

	// Limpa vínculo com fatura no SIGAPFS
	If lContinua .And. lIsPFS
		If FindFunction("J206FatNF")
			lContinua := J206FatNF(.T., SF2->F2_DOC, SF2->F2_SERIE, SF2->F2_CLIENTE, SF2->F2_LOJA)
		EndIf
	EndIf

	If lContinua
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica se pode aproveitar a Numeração da SD9                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		LimpaSD9()
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Exclui a Nota Fiscal                                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		RecLock("SF2")
		SF2->(dbDelete())
		MsUnLock()

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Exclui o cabecalho da carga conforme integridade               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(SF2->F2_CARGA)
			OsAvalDAI("DAI",4,,,,cFilcar,@oMdlCarga)
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atualiza a Nota de Origem                                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(SF2->F2_NFORI)
			nRegSF2 := SF2->(RecNo())
			dbSelectArea("SF2")
			dbSetOrder(6)
			If !MsSeek(xFilial("SF2")+SF2->F2_SERIORI+SF2->F2_NFORI)
				SF2->(MsGoTo(nRegSF2))
				dbSelectArea("SF2")
				dbSetOrder(1)
				If MsSeek(xFilial("SF2")+SF2->F2_NFORI+SF2->F2_SERIORI)
					RecLock("SF2")
					SF2->F2_NEXTDOC := ""
					SF2->F2_NEXTSER := ""
					MsUnLock()
				EndIf
			EndIf
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Fecha os lancamentos contabeis                               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(aPedido)
			MaLiberOk(aPedido)
		EndIf

		If lCtbInTran
			If lHeader
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Fecha os lancamentos contabeis                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				lHeader   := .F.
				RodaProva(nHdlPrv,nTotalCtb)
				If ( UsaSeqCor() )
					If Empty(cCodDiario)
						cCodDiario :=CtbaVerdia()
					EndIf
					aCtbDia := {{"SF2",SF2->(RECNO()),cCodDiario,"F2_NODIA","F2_DIACTB"}}
				EndIF
				cA100Incl(cArqCtb,nHdlPrv,1,cLoteCtb,lDigita,lAglutina,,,,,,aCtbDia)
			EndIf
		EndIf
	EndIf

	// Da Rollback na transacao caso ocorra algum erro quando existir o Template DCL
	If !lContDCL
		DisarmTransaction()
		lContinua := .F.
		lContDCL := .T.
	EndIf

	//// a chamada da integração deve estar dentro do BEGIN
	If FindFunction("MaEnvEAI")
		SetRotInteg("MATA521")    // Se não tiver este comando o reponse não irá cair na INTEGDEF Correta.
		If oMdl <> Nil
			//--Exclusão NF SAIDA
			MaEnvEAI(,,5,"MATA521",,,,.F.,oMdl)
		EndIf
		If oMdlCarga <> Nil
			MaEnvEAI(,,5,"OMSA200",,,,.F.,oMdlCarga)
		EndIf
	EndIf

	//Atualiza dados históricos do cliente
	If ( lAtuSA1 .And. !( SF2->F2_TIPO $ "DB" ) )
		Ma521AtSA1()
	EndIf

	/* Integração RISK - TOTVS Mais Negócios
	Se a integração com o RISK estiver habilitada, deleta os registros
	das tabelas AR1 e AR2, vinculados a Nota Fiscal. */
	If lRskActive .And. lRskMTkt
		//Limpa da memoria id do ticket.
		RskSetMTkt( "" )
        RskNFSDelete( SF2->F2_FILIAL + SF2->F2_DOC + SF2->F2_SERIE + SF2->F2_CLIENTE + SF2->F2_LOJA )
    EndIf

End Transaction

If lContinua
	If !lCtbInTran
		If lHeader
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Fecha os lancamentos contabeis                               ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			lHeader   := .F.
			RodaProva(nHdlPrv,nTotalCtb)
			If ( UsaSeqCor() )
				If Empty(cCodDiario)
					cCodDiario :=CtbaVerdia()
				EndIf
				aCtbDia := {{"SF2",SF2->(RECNO()),cCodDiario,"F2_NODIA","F2_DIACTB"}}
			EndIF
			cA100Incl(cArqCtb,nHdlPrv,1,cLoteCtb,lDigita,lAglutina,,,,,,aCtbDia)
		EndIf
	EndIf

	If ExistBlock("M521DNFS")
		ExecBlock("M521DNFS",.F.,.F.,{aPedido})
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Para os pedidos e-Commerce processa a liberacao novamente    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	SC6->( dbSetOrder(1) )

	For  nX := 1 to Len(aRegSC5)

		lLiberOk  := .T.
		 SC5->( DbGoTo(aRegSC5[nX]) )
		 aReservas := {}
		dDtLimite := CtoD("")

		Begin Transaction

		If lECCia
			RecLock("SC5", .F.)
			SC5->C5_VOLTAPS := "1"
			SC5->( MsUnlock() )

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Realiza o cancelamento do l1_DOC/L1_SERIE da nota excluída   ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			If SL1->( ColumnPos("L1_ECFLAG") > 0 )
				aAreaSL1 := SL1->(GetArea())

				cFiltro := "L1_FILIAL = '" + xFilial("SL1") + "' .AND. L1_PEDRES = '" + Alltrim(SC5->C5_NUM) + "' .AND. L1_ECFLAG = '1' "

				SL1->(DbSetOrder(1)) // L1_FILIAL+L1_NUM
				SL1->(DbSetFilter({ || &cFiltro }, cFiltro))
				SL1->(DbGoTop())

				If SL1->(!Eof())

					RecLock("SL1", .F.)
					SL1->L1_DOC :=  ""
					SL1->L1_SERIE := ""
					SL1->L1_EMISNF := Ctod("")
					SL1->(MsUnLock())

					nPos := 1
					aReservas := {}

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Verifica se existem itens de Pedido/associado ao orçamento com reservas    ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					Do While nPos <> 0
						If (nPos := aScan( aProdRes, { |l| l[8]+l[9] = SC5->C5_FILIAL + SC5->C5_NUM}, nPos)) > 0
							If SL1->L1_DTLIM >= dDataBase
								aProdRes[nPos, 07] := SL1->L1_DTLIM
								dDtLimite := SL1->L1_DTLIM
								aProdRes[nPos, 01] := SL1->L1_FILIAL+SL1->L1_NUM
								aAdd(aReservas, aClone(aProdRes[nPos]))
							EndIf
							nPos++
						EndIf
					EndDo

				EndIf

				SL1->(DbClearFilter())
				RestArea(aAreaSL1)
			EndIf
		EndIf

		 SC6->( dbSeek(xFilial("SC6")+SC5->C5_NUM) )
		 Do  While !( SC6->(Eof()) ) .And. (SC6->C6_FILIAL+SC6->C6_NUM == xFilial("SC6")+SC5->C5_NUM)

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Localiza o item para reservar                                ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			cReserva := ""
			nR :=  aScan(aReservas, { |r| R[8] + r[9] + r[2] == SC6->C6_FILIAL + SC6->C6_NUM + SC6->C6_ITEM})
			If nR > 0
				cReserva := ""
				cReserva := CriaVar("C0_NUM")
				If Empty(cReserva)
					cReserva := NextNumero("SC0",1,"C0_NUM",.T.)
				Else
					While ( GetSX8Len() > nSaveSX8 )
						ConfirmSx8()
					EndDo
				EndIf

				If a430Reserva({1,"LJ",SC5->C5_CLIENTE,cUserName,xFilial("SC0"), xFilial("SC0")},cReserva,;
						aReservas[nR, 03],;
						aReservas[nR, 06],;
						aReservas[nR, 05],;
						{SC6->C6_NUMLOTE,SC6->C6_LOTECTL,SC6->C6_LOCALIZ,SC6->C6_NUMSERI})
					RecLock("SC6", .F.)

					SC6->C6_RESERVA := cReserva
					SC6->C6_QTDRESE :=  aReservas[nR, 05]
					SC6->(MsUnLock())

					aAreaSC0 := SC0->(GetArea())
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Vincula a reserva ao orçamento para que nao seja manipulada   ³
					//³ pelo programa Controle de Reservas (MATA340).                 ³
					//³ Procedimento tambem utilizado para amarracoes entre pedidos   ³
					//³ (SC6) e reservas (SC0) no modulo de faturamento               ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

					SC0->(DbSetOrder(1))	// C0_FILIAL+C0_NUM+C0_PRODUTO+C0_LOCAL
					If SC0->(MsSeek( xFilial("SC0")+cReserva+aReservas[nR, 03]+aReservas[nR, 06] ))
					    SC0->( RecLock("SC0",.F.)  )    //Se o Alias atual for o SC0, quando tiver mais de dois produtos ira alterar os valores sempre do segundo produto pois o a430Reserv() utiliza o RestArea().
						SC0->C0_QUANT  -= aReservas[nR, 05]
						SC0->C0_QTDPED += aReservas[nR, 05]
				    	SC0->(MsUnLock())
				  	EndIf

					RestArea(aAreaSC0)

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³  Vincula a reserva ao item do orçamento                      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					aAreaSL2 := SL2->(GetArea())

					If SL2->(DbSeek( aReservas[nR, 01] + aReservas[nR, 02]))
						SL2->(RecLock("SL2", .F.))
						SL2->L2_LOCAL :=  aReservas[nR, 06]
						SL2->L2_RESERVA := cReserva
						SL2->(MsUnLock())
					EndIf
					lLiberOk2 := .t.
					RestArea(aAreaSL2)
				EndIf

			EndIf

			MaLibDoFat(SC6->(RecNo()),SC6->C6_QTDVEN,,,.T.,.T.,.F.,.F.)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Verifica se Todos os Itens foram Liberados                              ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If  (lLiberOk .And. (SC6->C6_QTDVEN > SC6->C6_QTDEMP + SC6->C6_QTDENT .and. Empty(SC6->C6_RESERVA)) .And. AllTrim(SC6->C6_BLQ)<>"R")
				lLiberOk := .F.
			EndIf
			SC6->( dbSkip() )
		EndDo

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza do C5_LIBEROK                                                  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ( lLiberOk )
			RecLock("SC5", .F.)
			SC5->C5_LIBEROK := "S"
			SC5->( MsUnlock() )
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ PCO - Grava o lancamento de liberacao de pedido de venda ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			PcoDetLan("000103","02","MATA440")
		EndIf

		End Transaction
	Next nX
	If cOmsCplInt == "1" .And. FindFunction("OMSXDELNF")
		OMSXDELNF()//Remove info de Serie e NF da DK1 (OMS).
	EndIf
EndIf

RestArea(aArea)
Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³MATA521A  ³ Rev.  ³Eduardo Riera          ³ Data ³29.12.2001	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de exclusao dos documentos de saida por carga       	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                      	³±±
±±³          ³                                                            	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ ATUALIZACOES SOFRIDAS DESDE A CONSTRUCAO INICIAL.                     	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ PROGRAMADOR  ³ DATA   ³ BOPS ³  MOTIVO DA ALTERACAO                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MATA521B()

If FindFunction("OMSA521B")
	Return OMSA521B()
EndIf
Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³OMS521CAR ³ Rev.  ³Henry Fila             ³ Data ³29.12.2001	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de remontagem de carga                              	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1 : Array com os campos do SC9 anterior                 	³±±
±±³          ³ExpA2 : Array com dos dados da carga anterior               	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ ATUALIZACOES SOFRIDAS DESDE A CONSTRUCAO INICIAL.                     	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ PROGRAMADOR  ³ DATA   ³ BOPS ³  MOTIVO DA ALTERACAO                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Oms521Car(aSd2Carga,aRotas,cFilCar)

Local nPosPed := 0

If Len(aSd2Carga) > 0
	nPosPed := Ascan(aSd2Carga, {|x| x[1]+x[2]+x[3] == SC9->C9_PEDIDO+SC9->C9_ITEM+SC9->C9_PRODUTO})
	If nPosPed > 0 .AND. Empty(SC9->C9_BLCRED) .And. Empty(SC9->C9_BLEST) .And. Empty(SC9->C9_REMITO)
		RecLock("SC9",.F.)
		SC9->C9_CARGA  := aSd2Carga[nPosPed][4]
		SC9->C9_SEQCAR := aSd2Carga[nPosPed][5]
		SC9->C9_ENDPAD := aSd2Carga[nPosPed][6]
		SC9->C9_SEQENT := aSd2Carga[nPosPed][8]
		MsUnlock()
		MaAvalSC9("SC9",7,,,,,,aRotas,,,,,,cFilCar)
	EndIf
EndIf
Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³MaEstNfAA3³ Rev.  ³ Sergio Silveira       ³ Data ³12/08/2002	 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de transferencia da base instalada - Estorno NF saida  ³±±
±±³          ³transfere o eqto do AA3 para o cliente padrao de devolucao    ³±±
±±³          ³O SD2 deve estar posicionado.                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ ATUALIZACOES SOFRIDAS DESDE A CONSTRUCAO INICIAL                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ PROGRAMADOR  ³ DATA   ³ BOPS ³  MOTIVO DA ALTERACAO                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function MaEstNfAA3()

Local aArea     := GetArea()
Local aAreaSA1  := SA1->( GetArea() )
Local cAtEstCli := PadR( &( SuperGetMV( "MV_ATESTCL" ) ), Len( SA1->A1_COD ) )
Local cAtEstLoj := PadR( &( SuperGetMV( "MV_ATESTLJ" ) ), Len( SA1->A1_LOJA ) )
Local lM521Atec := ExistBlock("LM521ATEC")
Local cQuery    := ""
Local cAliasQry := ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se foi definido o cliente / loja de retorno           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !Empty( cAtEstCli ) .And. !Empty( cAtEstLoj )
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se o cliente / loja existe                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	SA1->( dbSetOrder( 1 ) )
	If SA1->( dbSeek( xFilial( "SA1" ) + cAtEstCli + cAtEstLoj ) )
		If !( Localiza(SD2->D2_COD) )
			If ( !Empty(SD2->D2_NUMSERI) )
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Transfere para o cliente / loja de retorno                     ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				AtTrfEqpto(SD2->D2_CODFAB,SD2->D2_LOJAFA,SD2->D2_COD,SD2->D2_NUMSERI,cAtEstCli,cAtEstLoj)

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Ponto de entrada - Transferencia                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If lM521Atec
					ExecBlock("M521ATEC",.F.,.F.)
				EndIf
			EndIf
		Else
			cAliasQry := "MANFESTAA3"
			cQuery := ""
			cQuery += "SELECT DB_NUMSERI FROM " + RetSqlname( "SDB" ) + " "
			cQuery += "WHERE "
			cQuery += "DB_FILIAL='"   + xFilial( "SDB" )             + "' AND "
			cQuery += "DB_PRODUTO='"  + SD2->D2_COD                  + "' AND "
			cQuery += "DB_LOCAL='"    + SD2->D2_LOCAL                + "' AND "
			cQuery += "DB_NUMSEQ='"   + SD2->D2_NUMSEQ               + "' AND "
			cQuery += "DB_DOC='"      + SD2->D2_DOC                  + "' AND "
			cQuery += "DB_SERIE='"    + SD2->D2_SERIE                + "' AND "
			cQuery += "DB_CLIFOR='"   + SD2->D2_CLIENTE              + "' AND "
			cQuery += "DB_LOJA='"     + SD2->D2_LOJA                 + "' AND "
			cQuery += "DB_NUMSERI<>'" + Space(Len( SDB->DB_NUMSERI)) + "' AND "
			cQuery += "D_E_L_E_T_ = ' ' "

			cQuery := ChangeQuery( cQuery )
			dbUseArea( .T., "TOPCONN", TcGenQry( ,, cQuery ), cAliasQry, .F., .T. )
			While !( cAliasQry )->( Eof() )
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Transfere para o cliente / loja de retorno                     ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				AtTrfEqpto(SD2->D2_CODFAB,SD2->D2_LOJAFA,SD2->D2_COD, ( cAliasQry )->DB_NUMSERI,cAtEstCli,cAtEstLoj)
				( cAliasQry )->( dbSkip() )
			EndDo
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Fecha a area de trabalho da query                              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			( cAliasQry )->( dbCloseArea() )
			dbSelectArea( "SDB" )
		EndIf
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura as areas de trabalho                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RestArea( aAreaSA1 )
RestArea( aArea )
Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³MA521VerSC6 ³ Rev.  ³ Vendas Clientes       ³ Data ³ 26/12/2009 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que verifica se existe amarracao no Pedido de venda com  ³±±
±±³          ³Pedido de Compra, Caso exista e se jah foi feito recebimento de ³±±
±±³          ³de alguma quantidade no pedido de compra o Pedido de venda nao  ³±±
±±³          ³podera ser cancelado.                                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Logico .T. para cancelar - .F. nao Cancela                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³PARAM01 - Filial da nota de Saida (SF2)                         ³±±
±±³          ³PARAM02 - Numero do Documento                                   ³±±
±±³          ³PARAM03 - Serie do Documento                                    ³±±
±±³          ³PARAM04 - Codigo do Cliente									  ³±±
±±³          ³PARAM05 - Codigo da Loja 										  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function MA521VerSC6(cFil, cDoc, cSerie, cCliente, cLoja)

Local lRet     := .T.
Local aArea    := GetArea()
Local cFilPCom := ""        // Filial do Pedido de Compras
Local cPedCom  := ""        // Numero do Pedido de Compras
Local cProd    := ""        // Cod do Produto
Local cItemPC  := ""        // Item do Pedido de Compra
Local cNumC7   := ""        // Guarda o num para nao correr a Tabela Inteira.

Default cFil      := ""
Default cDoc      := ""
Default cSerie    := ""
Default cCliente  := ""
Default cLoja     := ""

If !Empty(cFil) .AND. !Empty(cDoc) .AND. !Empty(cSerie) .AND. !Empty(cCliente) .AND.  !Empty(cLoja)
	DbSelectArea("SD2")
	DbSetOrder(3)
	If DbSeek(cFil + cDoc + cSerie + cCliente + cLoja )
		cFilPCom  := SD2->D2_FILIAL
		cProd     := SD2->D2_COD
		cPedCom   := SD2->D2_PEDIDO
		cItemPC   := SD2->D2_ITEM
		DbSelectArea("SC6")
		DbSetOrder(2)
		If DbSeek(cFilPCom + cProd + cPedCom + cItemPC )
			cFilPCom  := SC6->C6_FILPED
			cProd     := SC6->C6_PRODUTO
			cPedCom   := SC6->C6_PEDCOM
			cItemPC   := SC6->C6_ITPC
			DbSelectArea("SC7")
			DbSetOrder(4)
			If DbSeek(cFilPCom + cProd + cPedCom + cItemPC )
				cNumC7 := SC7->C7_NUM
				While !Eof() .And. cNumC7 == SC7->C7_NUM
					lRet := If(SC7->C7_QUJE > 0, .F., .T. )
					If !lRet .OR. cNumC7 <> SC7->C7_NUM
						Exit
					EndIf
					SC7->(DbSkip())
				End
			EndIf
		EndIf
	EndIf
EndIf

If !lRet
	Aviso(STR0007,STR0019,{ "Ok" } ) // "ATENCAO", "Documento não pode ser Excluido, pois esta associado a um Pedido de Compra",
EndIf
RestArea(aArea)
Return (lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³A521CBxAdt  ³ Rev.  ³ Vendas CRM            ³ Data ³ 29/05/2012 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Cancela Baixa dos Adiantamentos - Mexico                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Logico .T. para sucesso  - .F. falha                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A521CBxAdt()

Local lRet 		:= .T.
Local aStrFR3 	:= {}
Local aVetor 	:= {}
Local nX 		:= 0
Local nY        := 0
Local cCpoQry 	:= ""
Local cQ		:= ""
Local nBaixa	:= 1	//Baixa selecionada para cancelar na rotina fina070
Local nCount    := 0
Local nTamPref  := TamSX3("E1_PREFIXO")[1]
Local nTamNum   := TamSX3("E1_NUM")[1]
Local nTamParc  := TamSX3("E1_PARCELA")[1]
Local nTamTipoT := TamSX3("E1_TIPO")[1]
Local cKey		:= ""
Local aDocComp  := {}
Local aArea 	:= getArea()
Local cParcela  := Space(nTamParc)
Local cTpDoc    := Padr("NF", nTamTipoT, " ")
Local aPosDoc   := {}
Local aNFCan    := {}
Local nOk       := 0
Local cFilSE5   := xFilial("SE5")

aAdianta  	:= ProtCfgAdt()
bFilFIE   	:= Iif(aAdianta[1,4],{|| FIE->FIE_FILORI==cFilAnt .Or. Empty(FIE->FIE_FILORI)},{||.T.})
lAdtCompart	:= aAdianta[1,5] .And. 'C' $ aAdianta[1,1]+aAdianta[1,2]+aAdianta[1,3]
bFilFR3   	:= iIF(lAdtCompart,{|| FR3->FR3_FILORI == cFilAnt },{|| .T. })

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Carrega array com titulos compensados nesta nota    ³
//³fiscal, da tabela de Documento X Adiantamento       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aStrFR3 := FR3->(DbStruct())
For nX := 1 to Len(aStrFR3)
	cCpoQry += aStrFR3[nX][1] +" , "
Next nX

If cPaisLoc == "PER"
	cQ	:= "SELECT SUM(FR3_VALOR) AS FR3_VALOR,FR3_FILIAL,FR3_CART,FR3_PEDIDO,FR3_PREFIX,FR3_PARCEL,FR3_TIPO,FR3_CLIENT,FR3_FORNEC,FR3_LOJA,FR3_DOC,FR3_SERIE,FR3_DATAE,FR3_NUM "
Else
	cQ	:= "SELECT "+cCpoQry+" R_E_C_N_O_ AS FR3_RECNO "
EndIf

cQ += "FROM "+RetSqlName("FR3")+" "
cQ += "WHERE FR3_FILIAL = '"+xFilial("FR3")+"' "
If lAdtCompart
	cQ += " AND (FR3_FILORI = '" + cFilAnt + "' OR FR3_FILORI = ' ') "
EndIf
cQ += "AND FR3_CART = 'R' "
cQ += "AND FR3_TIPO IN "+FormatIn(MVRECANT,"/")+" "
cQ += "AND FR3_CLIENT = '"+SF2->F2_CLIENTE+"' "
cQ += "AND FR3_LOJA = '"+SF2->F2_LOJA+"' "
cQ += "AND FR3_DOC = '"+SF2->F2_DOC+"' "
cQ += "AND FR3_SERIE = '"+SF2->F2_SERIE+"' "
cQ += "AND D_E_L_E_T_= ' ' "

If cPaisLoc == "PER"
	cQ += "GROUP BY FR3_FILIAL,FR3_CART,FR3_PEDIDO,FR3_PREFIX,FR3_PARCEL,FR3_TIPO,FR3_CLIENT,FR3_FORNEC,FR3_LOJA,FR3_DOC,FR3_SERIE,FR3_DATAE,FR3_NUM"
EndIf

cQ := ChangeQuery(cQ)

DbUseArea(.T.,"TOPCONN",TcGenQry(,,cQ),"TRBFR3",.T.,.T.)
TcSetField("TRBFR3","FR3_VALOR","N",TamSX3("FR3_VALOR")[1],TamSX3("FR3_VALOR")[2])
If cPaisLoc == "PER"
	count to nCount
	("TRBFR3")->(dbGoTop())
EndIf
While !Eof()
	aVetor 	:= {}
	_LValDoc := .F.
	//Procura uma baixa não cancelada com o Valor igual ao relacionado ao adiantamento
	DbSelectArea("SE5")
	DbSetOrder(7) //E5_FILIAL+E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_CLIFOR+E5_LOJA+E5_SEQ
	If MsSeek(XFilial("SE5")+TRBFR3->FR3_PREFIX+TRBFR3->FR3_NUM+TRBFR3->FR3_PARCEL+TRBFR3->FR3_TIPO+SF2->F2_CLIENTE+SF2->F2_LOJA)
		nBaixa := 1
		If cPaisLoc == "PER"
			While SE5->(!Eof()) .and. ;
			       XFilial("SE5")+TRBFR3->FR3_PREFIX+TRBFR3->FR3_NUM+TRBFR3->FR3_PARCEL+TRBFR3->FR3_TIPO+SF2->F2_CLIENTE+SF2->F2_LOJA == ;
			       SE5->E5_FILIAL+SE5->E5_PREFIXO+SE5->E5_NUMERO+SE5->E5_PARCELA+SE5->E5_TIPO+SE5->E5_CLIFOR+SE5->E5_LOJA //jgr
				If SE5->E5_SITUACA == 'C'
					DbSkip()
					Loop
				EndIf
				if SF2->F2_MOEDA == 1 //jgr
					If SE5->E5_VALOR == TRBFR3->FR3_VALOR
						_LValDoc := .T.
						Exit
					EndIf
				else
					If SE5->E5_VLMOED2 == TRBFR3->FR3_VALOR //jgr
					   _LValDoc := .T.
						Exit
					EndIf
				endif
				nBaixa++
				DbSkip()
			EndDo
		Else
			While !Eof()
				If SE5->E5_SITUACA == 'C'
					DbSkip()
					Loop
				EndIf
				If SE5->E5_VALOR == TRBFR3->FR3_VALOR
					Exit
				EndIf
				nBaixa++
				DbSkip()
			EndDo
		EndIf
	Else
		lRet := .F.
		Exit
	EndIf

	If _LValDoc
		If cPaisLoc == "PER"
			aNFCan := {SF2->F2_SERIE, SF2->F2_DOC, cParcela, cTpDoc, SF2->F2_LOJA}
		    aPosDoc := M521POSDOC(TRBFR3->FR3_SERIE, TRBFR3->FR3_NUM, TRBFR3->FR3_PARCEL, TRBFR3->FR3_TIPO, TRBFR3->FR3_CLIENT, TRBFR3->FR3_LOJA, aNFCan)
		EndIf
		aVetor 	:= {{"E1_PREFIXO"	, SF2->F2_SERIE			,Nil},;
			{"E1_NUM"		, TRBFR3->FR3_NUM      			,Nil},;
			{"E1_PARCELA"	, TRBFR3->FR3_PARCEL			,Nil},;
			{"E1_TIPO"	    , TRBFR3->FR3_TIPO				,Nil}}
		If cPaisLoc == "PER" .And. Len(aPosDoc) > 0
			For nX := 1 To Len(aPosDoc)
				MSExecAuto({|x,y| Fina070(x,y,.F.,aPosDoc[nX][1])},aVetor,5)
				If lMsErroAuto
					DisarmTransaction()
					MostraErro()
				Else
					nOk++
				EndIf
			Next nX

			If nOk <> Len(aPosDoc)
				lRet := .F.
				Exit
			EndIf
		Else
			MSExecAuto({|x,y| Fina070(x,y,.F.,nBaixa)},aVetor,5)
		EndIf

		If lMsErroAuto
			DisarmTransaction()
			MostraErro()
			lRet := .F.
			Exit
		Else
			dbSelectArea("FR3")
			dbSetOrder(2) //FR3_FILIAL+FR3_CART+FR3_CLIENT+FR3_LOJA+FR3_PREFIX+FR3_NUM+FR3_PARCEL+FR3_TIPO+FR3_DOC+FR3_SERIE+FR3_PEDIDO
			cFr3Seek := xFilial("FR3")+"R"+TRBFR3->(FR3_CLIENT+FR3_LOJA+FR3_PREFIX+FR3_NUM+FR3_PARCEL+FR3_TIPO)+SF2->F2_DOC+SF2->F2_SERIE+TRBFR3->FR3_PEDIDO
			If FR3->(dbSeek(cFr3Seek))
				While FR3->(!Eof()) .AND. cFr3Seek == xFilial("FR3")+"R"+FR3->(FR3_CLIENT+FR3_LOJA+FR3_PREFIX+FR3_NUM+FR3_PARCEL+FR3_TIPO)+SF2->F2_DOC+SF2->F2_SERIE+FR3->FR3_PEDIDO
					dbGoto(FR3->(RECNO()))
					If dbEval(bFilFR3)
						FR3->(RecLock("FR3",.F.))
						FR3->(DbDelete())
						FR3->(MsUnlock())
					EndIf
					FR3->(dbskip())

					//Processo de exclusao de registros que tiveram o relacionamento cancelado
					//na tela de relacionamento Pedido x Adiantamento
					FIE->(dbSetOrder(1)) //FIE_FILIAL+FIE_CART+FIE_PEDIDO
					If FIE->(MsSeek(xFilial("FIE")+TRBFR3->FR3_CART+TRBFR3->FR3_PEDIDO))
						cKey := xFilial("FIE")+TRBFR3->FR3_CART+TRBFR3->FR3_PEDIDO
						While FIE->(!EOF()) .and. xFilial("FIE") + FIE->(FIE_CART + FIE_PEDIDO) == cKey
							//Se o pedido tem relacionamento
							//Verifico os relacionamentos existentes na tabela FIE mas nao contidos no array aPedidos
							If dbEval(bFilFIE)
								If xFilial("FIE")+FIE->(FIE_CLIENTE+FIE_LOJA+FIE_PREFIXO+FIE_NUM+FIE_PARCEL+FIE_TIPO) == TRBFR3->(FR3_FILIAL+FR3_CLIENT+FR3_LOJA+FR3_PREFIX+FR3_NUM+FR3_PARCEL+FR3_TIPO)
									FIE->(RecLock( "FIE",.F.))
									FIE->(DbDelete())
									FIE->(MsUnLock())
								EndIf
							EndIf
							FIE->(DbSkip())
						EndDo
					EndIf
				EndDo
			EndIf
		EndIf
	Else
		Help(" ",1,"NAOEXI-FR3","NAOEXI-FR3","Valor FR3 no Identificado en tabla de Mov. Bancarios, VERIFICAR",1,0)
		lRet := .F.
		Exit
	EndIf
	dbSelectArea("TRBFR3")
	DbSkip()
EndDo

TRBFR3->(dbCloseArea())

//Proceso de anulación de compensación de proceso Anticipo vs Factura de Venta
If cPaisLoc == "PER" .And. nCount == 0
	DbSelectArea("SE1")
	DbSetOrder(2) //E1_FILIAL + E1_CLIENTE + E1_LOJA + E1_PREFIXO + E1_NUM + E1_PARCELA + E1_TIPO
	If MsSeek(xFilial("SE1") + SF2->F2_CLIENTE + SF2->F2_LOJA + SF2->F2_SERIE + SF2->F2_DOC)
		DbSelectArea("SE5")
		DbSetOrder(7) //E5_FILIAL + E5_PREFIXO + E5_NUMERO + E5_PARCELA + E5_TIPO + E5_CLIFOR + E5_LOJA + E5_SEQ
		If MsSeek(cFilSE5 + SE1->E1_PREFIXO + SE1->E1_NUM + SE1->E1_PARCELA + SE1->E1_TIPO + SE1->E1_CLIENTE + SE1->E1_LOJA)
			While SE5->(!Eof()) .And. ;
			       cFilSE5 + SE1->E1_PREFIXO + SE1->E1_NUM + SE1->E1_PARCELA + SE1->E1_TIPO + SE1->E1_CLIENTE + SE1->E1_LOJA == ;
			       SE5->E5_FILIAL + SE5->E5_PREFIXO + SE5->E5_NUMERO + SE5->E5_PARCELA + SE5->E5_TIPO + SE5->E5_CLIFOR + SE5->E5_LOJA
				If SE5->E5_SITUACA == 'C'
					DbSkip()
					Loop
				EndIf
				//Obtiene datos del anticipo
				aAdd(aDocComp,{Subs(SE5->E5_DOCUMEN, 1,nTamPref), ;                   //Prefijo
				Subs(SE5->E5_DOCUMEN, nTamPref + 1, nTamNum), ;                       //Número de documento
				Subs(SE5->E5_DOCUMEN, nTamPref + nTamNum + 1, nTamParc),;             //Parcela
				Subs(SE5->E5_DOCUMEN, nTamPref + nTamNum + nTamParc + 1, nTamTipoT),; //Tipo
				SE5->E5_CLIFOR,;
				SE5->E5_LOJA})
				DbSkip()
			EndDo
		Else
			lRet := .F.
		EndIf
	EndIf

	If Len(aDocComp) > 0
		For nX := 1 to Len(aDocComp)
			aNFCan := {SF2->F2_SERIE, SF2->F2_DOC, cParcela, cTpDoc, SF2->F2_LOJA}
			aPosDoc := M521POSDOC(aDocComp[nX][1], aDocComp[nX][2], aDocComp[nX][3], aDocComp[nX][4], aDocComp[nX][5], aDocComp[nX][6], aNFCan)
			aVetor 	:= {{"E1_PREFIXO", aDocComp[nX][1], Nil},;
			{"E1_NUM", aDocComp[nX][2], Nil},;
			{"E1_PARCELA", aDocComp[nX][3], Nil},;
			{"E1_TIPO", aDocComp[nX][4], Nil}}

			If Len(aPosDoc) > 0
				For nY := 1 To Len(aPosDoc)
					MSExecAuto({|x,y| Fina070(x,y,.F.,aPosDoc[nY][1])},aVetor,5)
				Next nY
			EndIf
			If lMsErroAuto
				DisarmTransaction()
				MostraErro()
				lRet := .F.
			Else
				EndTran()
			EndIf
		Next nX
	EndIf
EndIf
RestArea(aArea)
Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³A521CCompAd ³ Autor ³Totvs                ³ Data ³22.04.2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Faz o cancelamento da compensacao do adiantamento           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica se a Compensacao foi excluida                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1: Array com o Recno dos titulos gerados                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observacao³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function A521CCompAd(aRegSE1)

Local aArea	:= GetArea()
Local aAreaSE1	:= SE1->(GetArea())
Local lContabiliza := .T.
Local lDigita := .T.
Local lAglutina := .F.
Local nCnt := 0 	// Variavel utilizado em loop
Local aRecNoRA := {}	// Recebe o Recno do Titulo de Adiantamento
Local aRecVlrRA := {}	// Recebe o valor limite para compensação do Titulo de Adiantamento
Local cQ := ""
Local aDocCmp := {}
/* estrutura array aDocCmp
//1 - E5_PREFIXO
//2 - E5_NUMERO
//3 - E5_PARCELA
//4 - E5_TIPO
//5 - E5_LOJA
//6 - E5_VALOR
//7 - F2_DOC
//8 - F2_SERIE
//9 - Logico - indica se compensacao foi realizada no momento da geracao do documento de saida
*/
Local nTamPref := TamSX3("E1_PREFIXO")[1]
Local nTamNum := TamSX3("E1_NUM")[1]
Local nTamParc := TamSX3("E1_PARCELA")[1]
Local nTamTipoT := TamSX3("E1_TIPO")[1]
Local nTamLoja := TamSX3("E1_LOJA")[1]
Local nPos := 0
Local nPos2 := 0
Local aRecnoFR3 := {} // array para guardar o recno dos registros da tabela FR3, referente aos adiantamentos compensados com a nota fiscal, no momento da geracao da nota
Local lRet := .T.
Local aEstorno := {} // array para guardar o conteudo do campo E5_DOCUMEN dos registros usados na compensacao
Local aEstornoTmp := {}
Local aDocCmpTmp := {}
Local nX		:= 0
Local cCpoQry 	:= ""
Local lEstAdt	:= .F.
Local nValTot	:= 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se há ao menos 1 parcela nesta venda³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len(aRegSE1) >= 1

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Carrega array com titulos compensados nesta nota    ³
	//³fiscal                                              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cQ	:= "SELECT E5_DOCUMEN,E5_VALOR,E5_NUMERO,E5_PREFIXO,E5_PARCELA,E5_TIPO,E5_CLIFOR,E5_LOJA,E5_SEQ "
	cQ += "FROM "+RetSqlName("SE5")+" "
	cQ += "WHERE E5_FILIAL = '"+xFilial("SE5")+"' "
	cQ += "AND E5_RECPAG = 'R' "
	cQ += "AND E5_SITUACA <> 'C' "
	cQ += "AND E5_DATA = '"+dTos(SF2->F2_EMISSAO)+"' "
	cQ += "AND E5_NUMERO = '"+SF2->F2_DUPL+"' "
	cQ += "AND E5_PREFIXO = '"+SF2->F2_PREFIXO+"' "
	cQ += "AND E5_CLIFOR = '"+SF2->F2_CLIENTE+"' "
	cQ += "AND E5_LOJA = '"+SF2->F2_LOJA+"' "
	cQ += "AND E5_MOTBX = 'CMP' "
	cQ += "AND E5_TIPODOC = 'CP' "
	cQ += "AND E5_TIPO = '"+MVNOTAFIS+"' "
	cQ += "AND D_E_L_E_T_= ' ' "

	cQ := ChangeQuery(cQ)
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQ),"TRBSE5",.T.,.T.)
	TcSetField("TRBSE5","E5_VALOR","N",TamSX3("E5_VALOR")[1],TamSX3("E5_VALOR")[2])
	While !Eof()

		nValTot += TRBSE5->E5_VALOR
		lEstAdt := TRBSE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_CLIFOR+E5_LOJA) ==;
				SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA) .And. (Alltrim(Str(TRBSE5->E5_VALOR)) == Alltrim(Str(SE1->E1_VALLIQ)) .Or.;
				Alltrim(Str(nValTot)) == Alltrim(Str(SE1->E1_VALLIQ)))
		
		If !TemBxCanc(TRBSE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_CLIFOR+E5_LOJA+E5_SEQ),.T.)
			aAdd(aDocCmpTmp,{Subs(TRBSE5->E5_DOCUMEN,1,nTamPref),Subs(TRBSE5->E5_DOCUMEN,nTamPref+1,nTamNum),Subs(TRBSE5->E5_DOCUMEN,nTamPref+nTamNum+1,nTamParc),;
				Subs(TRBSE5->E5_DOCUMEN,nTamPref+nTamNum+nTamParc+1,nTamTipoT),Subs(TRBSE5->E5_DOCUMEN,nTamPref+nTamNum+nTamParc+nTamTipoT+1,nTamLoja),TRBSE5->E5_VALOR,;
				SF2->F2_DOC,SF2->F2_SERIE,.F.})
		Endif
		dbSkip()
	Enddo
	TRBSE5->(dbCloseArea())

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Carrega array com titulos compensados nesta nota    ³
	//³fiscal, da tabela de Documento X Adiantamento       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aStrFR3 := FR3->(dbStruct())
	For nX := 1 to Len(aStrFR3)
		cCpoQry += aStrFR3[nX][1] +" , "
	Next nX

	cQ	:= "SELECT "+cCpoQry+" R_E_C_N_O_ AS FR3_RECNO "
	cQ += "FROM "+RetSqlName("FR3")+" "
	cQ += "WHERE FR3_FILIAL = '"+xFilial("FR3")+"' "
	If lAdtCompart
		cQ += " AND (FR3_FILORI = '" + cFilAnt + "' OR FR3_FILORI = ' ') "
	EndIf
	cQ += "AND FR3_CART = 'R' "
	cQ += "AND FR3_TIPO IN "+FormatIn(MVRECANT,"/")+" "
	cQ += "AND FR3_CLIENT = '"+SF2->F2_CLIENTE+"' "
	cQ += "AND FR3_LOJA = '"+SF2->F2_LOJA+"' "
	cQ += "AND FR3_DOC = '"+SF2->F2_DOC+"' "
	cQ += "AND FR3_SERIE = '"+SF2->F2_SERIE+"' "
	cQ += "AND D_E_L_E_T_= ' ' "

	cQ := ChangeQuery(cQ)
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQ),"TRBFR3",.T.,.T.)
	TcSetField("TRBFR3","FR3_VALOR","N",TamSX3("FR3_VALOR")[1],TamSX3("FR3_VALOR")[2])
	While !Eof()
		nPos := aScan(aDocCmpTmp,{|x| x[1]+x[2]+x[3]+x[4]+x[5]+Alltrim(Str(x[6]))+x[7]+x[8] == ;
			TRBFR3->(FR3_PREFIX+FR3_NUM+FR3_PARCEL+FR3_TIPO+FR3_LOJA)+Alltrim(Str(TRBFR3->FR3_VALOR))+TRBFR3->(FR3_DOC+FR3_SERIE)})
		
		nPos2 += 1

		If nPos ==  0 .And. lEstAdt
			aDocCmpTmp[nPos2][9] := .T.
		Else
			aDocCmpTmp[nPos][9] := .T.
		EndIf
		
		aAdd(aRecnoFR3,TRBFR3->FR3_RECNO)
		dbSkip()
	Enddo
	
	TRBFR3->(dbCloseArea())

	//grava no array aDocCmp soh os adiantamentos que pertencem a compensacao referente a geracao da nota fiscal
	For nCnt:=1 To Len(aDocCmpTmp)
		If aDocCmpTmp[nCnt][9]
			aAdd(aDocCmp,aDocCmpTmp[nCnt])
			aAdd(aRecVlrRA,aDocCmpTmp[nCnt][6])
		Endif
	Next nCnt

	If Len(aDocCmp) > 0
		//grava array aEstorno com a mesma chave do campo E5_DOCUMEN, para uso na rotina MaIntBxCr
		For nCnt:=1 To Len(aDocCmp)
			aAdd(aEstornoTmp,Rtrim(aDocCmp[nCnt][1]+aDocCmp[nCnt][2]+aDocCmp[nCnt][3]+aDocCmp[nCnt][4]+aDocCmp[nCnt][5]))
		Next nCnt
		If Len(aEstornoTmp) > 0
			aAdd(aEstorno,aEstornoTmp)
		Endif
		// grava recno dos adiantamentos compensados
		dbSelectArea("SE1")
		dbSetOrder(2) // filial+cliente+loja+prefixo+numero+parcela+tipo
		For nCnt:=1 To Len(aDocCmp)
			If dbSeek(xFilial("SE1")+SF2->F2_CLIENTE+SF2->F2_LOJA+aDocCmp[nCnt][1]+aDocCmp[nCnt][2]+aDocCmp[nCnt][3]+aDocCmp[nCnt][4])
				aAdd(aRecnoRA,SE1->(Recno()))
			Endif
		Next nCnt
		If Len(aRecnoRA) > 0.and. Len(aEstorno) > 0 .and. Len(aRecVlrRA) > 0

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Carrega o pergunte da rotina de compensação financeira³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			Pergunte("FIN330",.F.)

			lContabiliza 	:= MV_PAR09 == 1
			lDigita			:= MV_PAR07 == 1

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Excluir Compensacao dos valores no Financeiro³
			//ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			SE1->(MsGoTo(aRegSE1[1]))
			If SE1->(Recno()) = aRegSE1[1]
				lRet := .F.
				lRet := MaIntBxCR(3,{aRegSE1[1]},,aRecNoRA,,{lContabiliza,lAglutina,lDigita,.F.,.F.,.F.},,aEstorno,,,SE1->E1_VALOR,,aRecVlrRA)
			Endif

			Pergunte("MTA521",.F.)

			// busca todas as compensacoes referentes a esta nota fiscal e ajusta o valor compensado para cada pedido de venda
			If Len(aRecnoFR3) > 0 .and. lRet
				SE1->(MsGoTo(aRegSE1[1]))
				If SE1->(Recno()) = aRegSE1[1]
					//
					//		Criterio "!Empty(SE1->E1_BAIXA)" alterado:
					//		1- Exclusao da NFS sem baixa - Campo E1_BAIXA" esta com data
					//		2- Exclusao da NFS com cancelamento de baixa - Campo E1_BAIXA" esta vazio
					//		If SE1->E1_VALOR = SE1->E1_SALDO .and. Empty(SE1->E1_BAIXA) // verifica se o titulo esta em aberto
					//
					If SE1->E1_VALOR = SE1->E1_SALDO // .and. Empty(SE1->E1_BAIXA) // verifica se o titulo esta em aberto
						For nCnt:=1 To Len(aRecnoFR3)
							dbSelectArea("FR3")
							dbGoto(aRecnoFR3[nCnt])
							If Recno() = aRecnoFR3[nCnt]
								SE1->(dbSetOrder(2))
								If SE1->(MsSeek(xFilial("SE1")+FR3->(FR3_CLIENTE+FR3_LOJA+FR3_PREFIXO+FR3_NUM+FR3_PARCELA+FR3_TIPO)))
									//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									//³Ajuste do saldo do relacionamento no Financeiro³
									//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
									FPedAdtGrv("R",4,FR3->FR3_PEDIDO,{{FR3->FR3_PEDIDO,SE1->(RecNo()),(FR3->FR3_VALOR*-1)}},.T.,SF2->F2_DOC,SF2->F2_SERIE)
								Endif
							Endif
						Next nCnt

						//exclui registro do titulo principal da tabela FR3
						SE1->(MsGoTo(aRegSE1[1]))
						If SE1->(Recno()) = aRegSE1[1]
							dbSelectArea("FR3")
							dbSetOrder(2)
							If dbSeek(xFilial("FR3")+"R"+SE1->(E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO)+SF2->F2_DOC+SF2->F2_SERIE)
								While FR3->(FR3_FILIAL+FR3_CART+FR3_CLIENT+FR3_LOJA+FR3_PREFIX+FR3_NUM+FR3_PARCEL+FR3_TIPO+FR3_DOC+FR3_SERIE) == xFilial("FR3")+"R"+SE1->(E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO)+SF2->F2_DOC+SF2->F2_SERIE
									If Eval(bFilFR3)
										RecLock("FR3",.F.)
										dbDelete()
										MsUnlock()
									EndIf
									FR3->(dbSkip())
								EndDo
							Endif
						Endif
					Else
						lRet := .F.
					Endif
				Endif
			Endif
		Endif
	Endif
EndIf

SE1->(RestArea(aAreaSE1))
RestArea(aArea)
Return(lRet)

//-------------------------------------
/*	Modelo de Dados
@author  	Jefferson Tomaz
@version 	P10 R1.4
@build		7.00.101202A
@since 		06/04/2011
@return 		oModel Objeto do Modelo*/
//-------------------------------------
Static Function ModelDef()
Local oModel
Local oStructSF2      := FWFormStruct(1,"SF2")
Local oStructSD2      := FWFormStruct(1,"SD2")
Local oStruRSA1       := Nil
Local oStruDSA1       := Nil
Local oStructSF3      := Nil
Local oStructSX5	  := Nil
Local lIntGFE   := SuperGetMv('MV_INTGFE',,.F.)

If lIntGFE

	oStruRSA1      := FWFormStruct(1,"SA1",{|cCampo| AllTrim(cCampo)+"|" $ "A1_COD|A1_LOJA|A1_NREDUZ|A1_CGC|A1_END|A1_BAIRRO|A1_MUN|A1_EST|A1_COD_MUN|A1_CEP|A1_ENDENT|A1_BAIRROE|A1_CEPE|A1_MUNE|A1_ESTE|"})
	oStruDSA1      := FWFormStruct(1,"SA1",{|cCampo| AllTrim(cCampo)+"|" $ "A1_COD|A1_LOJA|A1_NREDUZ|A1_CGC|A1_END|A1_BAIRRO|A1_MUN|A1_EST|A1_COD_MUN|A1_CEP|A1_ENDENT|A1_BAIRROE|A1_CEPE|A1_MUNE|A1_ESTE|"})
	oStructSF3     := FWFormStruct(1,"SF3",{|cCampo| AllTrim(cCampo)+"|" $ "F3_SERIE|F3_NFISCAL|F3_CLIEFOR|F3_LOJA|F3_DTCANC|"})
	oStructSX5	   := FWFormStruct(1,"SX5")

	oStructSF2:AddField( ;                    		// Ord. Tipo Desc.
			"F2_CDCLF"                       , ;	// [01]  C   Titulo do campo
			"Class.frete"                    , ;	// [02]  C   ToolTip do campo
			"F2_CDCLFR"                      , ;	// [03]  C   Id do Field
			'C'                              , ;	// [04]  C   Tipo do campo
			5                                , ;	// [05]  N   Tamanho do campo
			0                                , ;	// [06]  N   Decimal do campo
			NIL                              , ;	// [07]  B   Code-block de validação do campo
			NIL                              , ;	// [08]  B   Code-block de validação When do campo
			NIL                              , ;	// [09]  A   Lista de valores permitido do campo
			NIL                              , ;	// [10]  L   Indica se o campo tem preenchimento obrigatório
			NIL                              , ;	// [11]  B   Code-block de inicializacao do campo
			NIL                              , ;	// [12]  L   Indica se trata-se de um campo chave
			NIL                              , ;	// [13]  L   Indica se o campo pode receber valor em uma operação de update.
			NIL                              )  	// [14]  L   Indica se o campo é virtual

	oStructSF2:AddField( ;                    		// Ord. Tipo Desc.
			"CGC Transp"                     , ;	// [01]  C   Titulo do campo
			"CGC Transp"                     , ;	// [02]  C   ToolTip do campo
			"F2_CGCTRP"                      , ;	// [03]  C   Id do Field
			'C'                              , ;	// [04]  C   Tipo do campo
			14                               , ;	// [05]  N   Tamanho do campo
			0                                , ;	// [06]  N   Decimal do campo
			NIL                              , ;	// [07]  B   Code-block de validação do campo
			NIL                              , ;	// [08]  B   Code-block de validação When do campo
			NIL                              , ;	// [09]  A   Lista de valores permitido do campo
			NIL                              , ;	// [10]  L   Indica se o campo tem preenchimento obrigatório
			FwBuildFeature( STRUCT_FEATURE_INIPAD,'Posicione("SA4",1,xFilial("SA4")+SF2->F2_TRANSP,"A4_CGC")' ), ;      // [11]  B   Code-block de inicializacao do campo
			NIL                              , ;	// [12]  L   Indica se trata-se de um campo chave
			NIL                              , ;	// [13]  L   Indica se o campo pode receber valor em uma operação de update.
			.T.                              )  	// [14]  L   Indica se o campo é virtual

	oStruRSA1:AddField( ;                    		// Ord. Tipo Desc.
			"IBGE Compl"                     , ;	// [01]  C   Titulo do campo
			"Cod.IBGE Compl "                , ;	// [02]  C   ToolTip do campo
			"A1_CDIBGE"                      , ;	// [03]  C   Id do Field
			'C'                              , ;	// [04]  C   Tipo do campo
			7                                , ;	// [05]  N   Tamanho do campo
			0                                , ;	// [06]  N   Decimal do campo
			NIL                              , ;	// [07]  B   Code-block de validação do campo
			NIL                              , ;	// [08]  B   Code-block de validação When do campo
			NIL                              , ;	// [09]  A   Lista de valores permitido do campo
			NIL                              , ;	// [10]  L   Indica se o campo tem preenchimento obrigatório
			FwBuildFeature( STRUCT_FEATURE_INIPAD,'TMS120CdUf(SA1->A1_EST, "1") + SA1->A1_COD_MUN' ), ;   // [11]  B   Code-block de inicializacao do campo
			NIL                              , ;	// [12]  L   Indica se trata-se de um campo chave
			NIL                              , ;	// [13]  L   Indica se o campo pode receber valor em uma operação de update.
			.T.                              )  	// [14]  L   Indica se o campo é virtual

	oStruDSA1:AddField( ;                    		// Ord. Tipo Desc.
			"IBGE Compl"                     , ;	// [01]  C   Titulo do campo
			"Cod.IBGE Compl "                , ;	// [02]  C   ToolTip do campo
			"A1_CDIBGE"                      , ;	// [03]  C   Id do Field
			'C'                              , ;	// [04]  C   Tipo do campo
			7                                , ;	// [05]  N   Tamanho do campo
			0                                , ;	// [06]  N   Decimal do campo
			NIL                              , ;	// [07]  B   Code-block de validação do campo
			NIL                              , ;	// [08]  B   Code-block de validação When do campo
			NIL                              , ;	// [09]  A   Lista de valores permitido do campo
			NIL                              , ;	// [10]  L   Indica se o campo tem preenchimento obrigatório
			FwBuildFeature( STRUCT_FEATURE_INIPAD,'TMS120CdUf(SA1->A1_EST, "1") + SA1->A1_COD_MUN' ), ;   // [11]  B   Code-block de inicializacao do campo
			NIL                              , ;	// [12]  L   Indica se trata-se de um campo chave
			NIL                              , ;	// [13]  L   Indica se o campo pode receber valor em uma operação de update.
			.T.                              )  	// [14]  L   Indica se o campo é virtual

	oStructSF2:SetProperty( '*', MODEL_FIELD_VALID, FWBuildFeature( STRUCT_FEATURE_VALID, '.T.' ) )
	oStructSF2:SetProperty( '*'         , MODEL_FIELD_WHEN,  NIL )

	oStructSD2:SetProperty( '*', MODEL_FIELD_VALID, FWBuildFeature( STRUCT_FEATURE_VALID, '.T.' ) )
	oStructSD2:SetProperty( '*'         , MODEL_FIELD_WHEN,  NIL )

	oStructSF3:SetProperty( '*', MODEL_FIELD_VALID, FWBuildFeature( STRUCT_FEATURE_VALID, '.T.' ) )
	oStructSF3:SetProperty( '*'         , MODEL_FIELD_WHEN,  NIL )

	oStruDSA1:SetProperty( '*', MODEL_FIELD_VALID, FWBuildFeature( STRUCT_FEATURE_VALID, '.T.' ) )
	oStruDSA1:SetProperty( '*'         , MODEL_FIELD_WHEN,  NIL )

	oStruRSA1:SetProperty( '*', MODEL_FIELD_VALID, FWBuildFeature( STRUCT_FEATURE_VALID, '.T.' ) )
	oStruRSA1:SetProperty( '*'         , MODEL_FIELD_WHEN,  NIL )

EndIf
oModel := MPFormModel():New("MATA521",  /*bPre*/, /*bPost*/, Nil /*bCommit*/, /*bCancel*/)

oModel:AddFields("MATA521_SF2", ,oStructSF2,/*bPre*/,/*bPost*/,/*bLoad*/)
oModel:AddGrid("MATA521_SD2","MATA521_SF2",oStructSD2,/*bLinePre*/, ,/*bPre*/,/*bPost*/,/*bLoad*/)

oModel:SetRelation("MATA521_SD2",{{"D2_FILIAL",'xFilial("SF2")'},{"D2_DOC","F2_DOC"},{"D2_SERIE","F2_SERIE"},;
									{"D2_CLIENTE","F2_CLIENTE"},{"D2_LOJA","F2_LOJA"}},"D2_FILIAL+D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA")

If lIntGFE

	oModel:AddFields("MATA521_SF3","MATA521_SF2",oStructSF3,/*bPre*/,/*bPost*/,/*bLoad*/)
	oModel:AddFields("REMETENTE_SA1","MATA521_SF2",oStruRSA1,/*bPre*/,/*bPost*/,/*bLoad*/)
	oModel:AddFields("DESTINATARIO_SA1","MATA521_SF2",oStruDSA1,/*bPre*/,/*bPost*/,/*bLoad*/)
	oModel:AddFields("TIPONF_SX5","MATA521_SF2",oStructSX5,/*bPre*/,/*bPost*/,/*bLoad*/)

	oModel:SetRelation("MATA521_SF3",{{"F3_FILIAL",'xFilial("SF3")'},{"F3_SERIE","F2_SERIE"},{"F3_NFISCAL","F2_DOC"},;
										{"F3_CLIEFOR","F2_CLIENTE"},{"F3_LOJA","F2_LOJA"}},"F3_FILIAL+F3_SERIE+F3_NFISCAL+F3_CLIEFOR+F3_LOJA")

	oModel:SetRelation("REMETENTE_SA1",{{"A1_FILIAL",'xFilial("SA1")'},{"A1_CGC","SM0->M0_CGC"}},"A1_FILIAL+A1_CGC")

	oModel:SetRelation("DESTINATARIO_SA1",{{"A1_FILIAL",'xFilial("SA1")'},{"A1_COD","F2_CLIENT"},{"A1_LOJA","F2_LOJENT"}};
											,"A1_FILIAL+A1_COD+A1_LOJA")

	oModel:SetRelation("TIPONF_SX5",{{"X5_FILIAL",'xFilial("SX5")'},{"X5_TABELA","'MQ'"}, {"X5_CHAVE","F2_TIPO"}},"X5_FILIAL+X5_TABELA+X5_CHAVE")

EndIf

oModel:SetPrimaryKey({"F2_FILIAL", "F2_DOC", "F2_SERIE", "F2_CLIENTE", "F2_LOJA" })
oModel:GetModel("MATA521_SD2"):SetDelAllLine(.T.)

oModel:SetDescription( OemToAnsi(STR0001) )

Return oModel

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ T521Tela ³ Autor ³ Mary C. Hergert       ³ Data ³ 21/11/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta a dialog da consulta                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Numero do documento                                ³±±
±±³          ³ ExpC2 = Serie                                              ³±±
±±³          ³ ExpC3 = Especie                                            ³±±
±±³          ³ ExpC4 = Cliente/Fornecedor                                 ³±±
±±³          ³ ExpC5 = Loja                                               ³±±
±±³          ³ ExpC6 = Tipo - entrada / saida                             ³±±
±±³          ³ ExpC7 = Indica se o documento e de devol/beneficiamento    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum						                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Mata521                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function T521Tela(cDoc,cSerie,cEspecie,cClieFor,cLoja,cEntSai,cTpNF)

Local aSize 		:= MsAdvSize()
Local aGets			:= {}
Local aMantem		:= {{},{},{},{},{},{},{},{},{},{}}  //Arrays 7 e 8 (Anfavea - Cab / Itens), 9 - Informações Complementares
Local aObrigat		:= {{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}} //Arrays 16 e 17 (Anfavea - Cab / Itens), 18 - Informações Complementares
Local aObjects 		:= {}
Local aInfo			:= {}
Local lRet			:= .F.
Local lValid		:= .F.
Local lRetorno      := .F.
Local oDlg
Local oPanel3
Local oFont			:= TFont():New("Arial",,14,,.F.)
Local oGrpProc
Local oGetProc
Local nAltSay		:= 10
Local nTamSay		:= 50
Local nAltGet		:= 10
Local nOpc			:= 0

Private aHProc		:= {}
Private aCProc		:= {}
Private dDatReceb   := CtoD("  /  /    ")

Private cFormul		:= ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³->Informacoes complementares a gerar:³
//³10 - Processos                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Resolve os objetos lateralmente                                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aObjects := {}

AAdd( aObjects, { 72,   40, .T., .T. } )
AAdd( aObjects, { 150,  50, .T., .T. } )

aInfo   := { aSize[ 1 ], aSize[ 2 ], aSize[ 3 ], aSize[ 4 ], 3, 3 }

DEFINE FONT oFont NAME "Arial" SIZE 0, -10
DEFINE FONT oFont2 NAME "Arial" SIZE 0, -10

DEFINE MSDIALOG oDlg FROM 00,00 TO 600,750 TITLE STR0034 OF oMainWnd PIXEL //"Complementos por documento fiscal"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Monta o Cabeçalho padrao para todos os complementos³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
T521NF(oFont,nAltSay,nTamSay,nAltGet,cDoc,cSerie,cEspecie,cClieFor,cLoja,cEntSai,cTpNF,/*@aPnlNF,*/oDlg)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Carrega o aCols e o aHeader dos complementos e das informacoes complementares ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Processa({|| T521Cols(cDoc,cSerie,cEspecie,cClieFor,cLoja,cEntSai,cTpNF,/*@aCompl,*/@aObrigat,@aMantem)})

// Processos referenciados
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Monta o painel onde serao inseridas as informacoes do complemento³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oPanel3	:= TPanel():New(110,005,'',oDlg,oDlg:oFont,.T.,.T.,,,354,180,.T.,.T.)
oGrpProc:= TGroup():New(005,005,175,355,STR0046,oPanel3,,,.T.,.T.) //"Informações complementares - processos referenciados"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Monta a Getdados ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oGetProc := MsNewGetDados():New(15,10,170,350,GD_INSERT+GD_DELETE+GD_UPDATE,/*LinhaOk*/,/*GetdadosOk*/,/*cIniPos*/,/*aAlter*/,/*.F.*/,990,/*cAmpoOk*/,/*cSuperApagar*/,/*cApagaOk*/,oGrpProc,aHProc,aCProc)
oGetProc:bLinhaOk := &("{|| T521Proc(oGetProc,aObrigat,.F.) }")

aGets := {oGetProc}

ACTIVATE MSDIALOG oDlg ON INIT ;
							EnchoiceBar(oDlg,{||(nOpc := 1, lValid := T521Valid(cDoc,cSerie,cEspecie,cClieFor,cLoja,cEntSai,cTpNF,aGets,aObrigat,aMantem),;
							Iif(lValid,Processa({||lRet := T521Fim(cDoc,cSerie,cEspecie,cClieFor,cLoja,cEntSai,cTpNF,aMantem,aGets)}),.F.),;
							Iif(lRet,oDlg:End(),.T.))},;
							{||(nOpc:= 0, oDlg:End())})

If ((nOpc == 1)  .And. (lRet))
	lRetorno = .T.
EndIf
Return lRetorno

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ T521Cols ³ Autor ³ Mary C. Hergert       ³ Data ³ 26/11/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta o aHeader e o aCols dos complementos que devem       ³±±
±±³          ³ apresentar informacoes por item - GetDados.                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpA1 = Array com os complementos                          ³±±
±±³          ³ ExpC2 = Numero da nota fiscal                              ³±±
±±³          ³ ExpC3 = Serie da nota fiscal                               ³±±
±±³          ³ ExpC4 = Especie da nota fiscal                             ³±±
±±³          ³ ExpC5 = Cliente/fornecedor                                 ³±±
±±³          ³ ExpC6 = Loja do cliente/fornecedor                         ³±±
±±³          ³ ExpC7 = Indicacao de entrada/saida                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nao ha.                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Mata521                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function T521Cols(cDoc,cSerie,cEspecie,cClieFor,cLoja,cEntSai,cTpNF,/*aCompl,*/aObrigat,aMantem)

Local aCampos 	:= {}
Local aHeader	:= {}
Local aCols		:= {}
Local aPermite	:= {}
Local aCabPer	:= {}
Local cTabela	:= ""
Local cAlias	:= ""
Local cArqInd	:= ""
Local cChave	:= ""
Local lPossui	:= .F.
Local nX 		:= 10
Local nY 		:= 0
Local nG 		:= 0
Local nCount	:= 1
Local nI		:= 0
Local nScan		:= 0

aCampos		:= {}
aCols		:= {}
aHeader		:= {}
aPermite 	:= {}
aCabPer		:= {}

// Informacoes complementares - processos referenciados
aCampos := {"CDG_PROCES","CDG_TPPROC","CDG_IFCOMP","CDG_ITPROC"}
cTabela := "CDG"

If Len(aCampos) > 0

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Montando aHeader                                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea("SX3")
	dbSetOrder(2)
	For nY := 1 to Len(aCampos)
		If SX3->(dbSeek(aCampos[nY]))
			If X3USO(SX3->X3_USADO)
				cF3 	:= SX3->X3_F3
				cValid	:= SX3->X3_VALID
				aAdd(aHeader,{Alltrim(X3Titulo(SX3->X3_TITULO)),;
					SX3->X3_CAMPO,;
					SX3->X3_PICTURE,;
					SX3->X3_TAMANHO,;
					SX3->X3_DECIMAL,;
					cValid,;
					SX3->X3_USADO,;
					SX3->X3_TIPO,;
					cF3,;
					SX3->X3_CONTEXT})
			Endif
			If X3Obrigat(SX3->X3_CAMPO)
				aAdd(aObrigat[nX],{SX3->X3_CAMPO,SX3->X3_TIPO})
			Endif
		Endif
	Next

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Monta os filtros para cada uma das tabelas para carregar o aCols ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	lPossui := T521Filtro(cTabela,@cArqInd,@cChave,@cAlias,cDoc,cSerie,cEspecie,cClieFor,cLoja,cEntSai,cTpNF)
	If !lPossui
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Para os complementos por item, carrega com o conteudo dos itens do SFT³
		//³que permitem o complemento.                                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If Len(aPermite) > 0
			For nI := 1 to Len(aPermite)
				aAdd(aCols,Array(Len(aHeader)+1))
				For nY := 1 To Len(aHeader)
					aCols[Len(aCols)][nY] := CriaVar(aHeader[nY][2])
					aCols[Len(aCols)][Len(aHeader)+1] := .F.
					nScan := aScan(aCabPer,{|x| x == Alltrim(aHeader[nY][2])})
					If nScan > 0
						aCols[Len(aCols)][nY] := aPermite[nI][nScan]
					Endif
				Next nY
			Next
		Else
			aAdd(aCols,Array(Len(aHeader)+1))
			For nY := 1 To Len(aHeader)
				aCols[Len(aCols)][nY] := CriaVar(aHeader[nY][2])
				aCols[Len(aCols)][Len(aHeader)+1] := .F.
			Next nY
		Endif
	Else
		nCount := 1
		dbSelectArea(cAlias)
		While !Eof()
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄd¿
			//³Sera necessario armazenar os complementos de importacao gravados anteriormente.         ³
			//³Como neste tipo de complemento e possivel alterar o numero do documento de importacao   ³
			//³(que faz parte da chave), armazena-se os complementos existentes para a atualização das ³
			//³informacoes prestadas pelo usuario.                                                     ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄdÙ
			If nX == 10 .And. cTabela == "CDG"
				aAdd(aMantem[2],{CDG_PROCES,CDG_TPPROC,.F.})
			Endif
			nCount++

			Aadd(aCols,Array(Len(aHeader)+1))
			For nY :=1 to Len(aHeader)
				cTipo := aHeader[nY][8]
				If cTipo == "D"
					cData					:= (cAlias)->(FieldGet(ColumnPos(aHeader[nY,2])))
					cData2					:= If(!Empty(cData), substr(cdata,7,2)+'/'+substr(cdata,5,2)+'/'+substr(cdata,1,4), "  /  /    ")
					aCols[Len(aCols)][nY]	:= Ctod(cData2)
				else
					aCols[Len(aCols)][nY]	:= (cAlias)->(FieldGet(ColumnPos(aHeader[nY,2])))
				EndIf
			Next nY
			aCols[Len(aCols)][Len(aHeader)+1] := .F.
			dbSkip()
		EndDo

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Ao reabrir a tela de complementos apos exclusao, deve-se verificar os campos que devem ser preenchidos pela	³
		//³rotina, coloca-los em ordem e apresentar na tela todos os itens da nota fiscal novamente						³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cTabela $ "CD5/CD6"
			For nG := 1 To Len(aPermite)
				If aScan(aCols,{|aX|aX[1]==aPermite[nG,7]})==0
					aAdd(aCols,Array(Len(aHeader)+1))
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Importacao - Itens excluidos sao reabertos com o campo CD5_ITEM preenchido.³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If cTabela == "CD5"
						aCols[Len(aCols)][1]	:=	aPermite[nG,7]
						For nY := 2 To Len(aHeader)
							aCols[Len(aCols)][nY] := CriaVar(aHeader[nY][2])
							aCols[Len(aCols)][Len(aHeader)+1] := .F.
						Next nY
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Combustiveis - Itens excluidos sao reabertos com os campos CD6_ITEM e CD6_COD preenchidos.³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					Elseif cTabela == "CD6"
						aCols[Len(aCols)][1]	:=	aPermite[nG,7]
						aCols[Len(aCols)][2]	:=	aPermite[nG,8]
						For nY := 3 To Len(aHeader)
							aCols[Len(aCols)][nY] := CriaVar(aHeader[nY][2])
							aCols[Len(aCols)][Len(aHeader)+1] := .F.
						Next nY
					Endif
				EndIf
			Next nG
			aSort(aCols,,,{|x,y| x[1]<y[1]})
		EndIf
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Fecha as areas montadas para o filtro³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	T521Close(cTabela,cArqInd,cAlias)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Passa o conteudo do aHeader e do aCols de acordo com o complemento         ³
	//³Carrega o aCols com os itens que devem gerar o complemento em notas fiscais³
	//³que ainda nao possuam o complemento cadastrado.                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	// processos referenciados
	aHProc	:=	aHeader
	aCProc	:=	aCols
EndIf
Return .T.


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³T521Filtro³ Autor ³ Mary C. Hergert       ³ Data ³ 26/11/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Efetua o filtro/query de todos os complementos             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Nome da tabela                                     ³±±
±±³          ³ ExpC2 = Indice criado para codebase                        ³±±
±±³          ³ ExpC3 = Alias criado para top                              ³±±
±±³          ³ ExpL4 = Indicacao de top/codebase                          ³±±
±±³          ³ ExpC5 = Numero da nota fiscal                              ³±±
±±³          ³ ExpC6 = Serie da nota fiscal                               ³±±
±±³          ³ ExpC7 = Especie da nota fiscal                             ³±±
±±³          ³ ExpC8 = Cliente/fornecedor                                 ³±±
±±³          ³ ExpC9 = Loja do cliente/fornecedor                         ³±±
±±³          ³ ExpCA = Indicacao de entrada/saida                         ³±±
±±³          ³ ExpCB = Indica se a NF e de devol./beneficiamento          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nao ha.                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Mata521                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function T521Filtro(cTabela,cArqInd,cChave,cAlias,cDoc,cSerie,cEspecie,cClieFor,cLoja,cEntSai,cTpNF)

Local aArea		:= GetArea()
Local cWhere	:= ""
Local cCondicao := ""
Local cCampo	:= ""
Local lPossui	:= .F.
Local cFrom		:= ""
Local cOrder	:= ""

cAlias := cTabela
dbSelectArea(cTabela)

If Left(cTabela,2) $ "CD"
	cCampo	:= SubStr(cTabela,1,3)
Else
	cCampo	:= SubStr(cTabela,2,3)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Monta a chave e a condicao padrao para todos os filtros³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cFrom		:= "%" + RetSqlName(cTabela) + " " + cTabela + "%"
cOrder		:= "%" + SqlOrder((cTabela)->(IndexKey())) + "%"
cWhere		:= "%" + cTabela + "." + cCampo + "_FILIAL" + " = '" + xFilial(cTabela) + "' AND "

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Monta a expressao para TOP³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cWhere		+= "CDG.CDG_TPMOV = '" + cEntSai + "' AND "
cWhere		+= "CDG.CDG_DOC = '" + cDoc + "' AND "
cWhere		+= "CDG.CDG_SERIE = '" + cSerie + "' AND "
cWhere		+= "CDG.CDG_CLIFOR = '" + cClieFor + "' AND "
cWhere		+= "CDG.CDG_LOJA = '" + cLoja  + "' AND "

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Monta a expressao para codebase³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cCondicao 	+= 'CDG_TPMOV == "' + cEntSai + '" .AND. '
cCondicao 	+= 'CDG_DOC == "' + cDoc + '" .AND. '
cCondicao 	+= 'CDG_SERIE == "' + cSerie + '" .AND. '
cCondicao 	+= 'CDG_CLIFOR == "' + cClieFor + '" .AND. '
cCondicao 	+= 'CDG_LOJA == "' + cLoja + '"'

If !Empty(cWhere) .Or. !Empty(cCondicao)
	cAlias	:= GetNextAlias()
	cWhere	+= cTabela + ".D_E_L_E_T_= ' ' %"
	BeginSql Alias cAlias
		SELECT *
		  FROM %Exp:cFrom%
		 WHERE %Exp:cWhere%
		 ORDER BY %Exp:cOrder%
	EndSql
	dbSelectArea(cAlias)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se possui o complemento ou será incluido.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Do While !(cAlias)->(Eof())
	lPossui := .T.
	Exit
Enddo
(cAlias)->(dbGotop())
RestArea(aArea)
Return lPossui

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ T521Close³ Autor ³ Mary C. Hergert       ³ Data ³ 26/11/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Fecha as areas abertas pela funcao de filtro               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Nome da tabela                                     ³±±
±±³          ³ ExpC2 = Indice criado para codebase                        ³±±
±±³          ³ ExpC3 = Alias criado para top                              ³±±
±±³          ³ ExpL4 = Indicacao de top/codebase                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nao ha.                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Mata521                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function T521Close(cTabela,cArqInd,cAlias)

dbSelectArea(cAlias)
dbCloseArea()
Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³T521Valid ³ Autor ³ Mary C. Hergert       ³ Data ³ 26/11/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Valida as informacoes apresentadas                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC5 = Numero da nota fiscal                              ³±±
±±³          ³ ExpC6 = Serie da nota fiscal                               ³±±
±±³          ³ ExpC7 = Especie da nota fiscal                             ³±±
±±³          ³ ExpC8 = Cliente/fornecedor                                 ³±±
±±³          ³ ExpC9 = Loja do cliente/fornecedor                         ³±±
±±³          ³ ExpCA = Indicacao de entrada/saida                         ³±±
±±³          ³ ExpCB = Indica se a NF e de devol./beneficiamento          ³±±
±±³          ³ ExpAC = Itens do complemento de medicamentos               ³±±
±±³          ³ ExpAD = Itens do complemento de armas de fogo              ³±±
±±³          ³ ExpAE = Itens do complemento de veiculos                   ³±±
±±³          ³ ExpAF = Itens do complemento de combustiveis               ³±±
±±³          ³ ExpAG = Itens do complemento de energia eletrica           ³±±
±±³          ³ ExpAH = Itens do complemento de gas canalizado             ³±±
±±³          ³ ExpAI = Itens do complemento de comunicacao/telecom.       ³±±
±±³          ³ ExpAJ = Complementos sugeridos pelo sistema                ³±±
±±³          ³ Exp1K = Array com as guias de recolhimento referenciadas   ³±±
±±³          ³ Exp1L = Array com os cupons fiscais referenciados          ³±±
±±³          ³ Exp1M = Array com os documentos referenciados              ³±±
±±³          ³ Exp1N = Array com os locais de coleta/entrega              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nao ha.                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Mata521                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function T521Valid(cDoc,cSerie,cEspecie,cClieFor,cLoja,cEntSai,cTpNF,aGets,aObrigat,aMantem)

Local aCols		:= {}
Local aHeader	:= {}
Local aCabec	:= {"aHProc"}
Local lGrava	:= .T.
Local nX 		:= 0

For nX := 1 to Len(aCabec)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Monta o aHeader e o aCols generico para efetuar a gravacao³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aHeader	:= &(aCabec[nX])
	If ValType(aGets[nX]) == "O"
		aCols 	:= aGets[nX]:aCols
	Else
		aCols	:= {}
	Endif
	If ValType(aGets[nX]) == "O"
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Efetua as validacoes de todos os complementos que devem ser      ³
		//³gerados para a nota fiscal. Somente apos a validacao de todos os ³
		//³complementos e que sera efetuada a gravacao.                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If T521Exist(aCols) .And. !T521Proc(aGets[nX],aObrigat,.T.)
			lGrava := .F.
		Endif
	Endif
Next
Return lGrava

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³T521Fim   ³ Autor ³ Mary C. Hergert       ³ Data ³ 26/11/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Efetua as gravacoes nas tabelas                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC5 = Numero da nota fiscal                              ³±±
±±³          ³ ExpC6 = Serie da nota fiscal                               ³±±
±±³          ³ ExpC7 = Especie da nota fiscal                             ³±±
±±³          ³ ExpC8 = Cliente/fornecedor                                 ³±±
±±³          ³ ExpC9 = Loja do cliente/fornecedor                         ³±±
±±³          ³ ExpCA = Indicacao de entrada/saida                         ³±±
±±³          ³ ExpCB = Indica se a NF e de devol./beneficiamento          ³±±
±±³          ³ Exp1M = Array com os documentos referenciados              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nao ha.                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Mata521                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function T521Fim(cDoc,cSerie,cEspecie,cClieFor,cLoja,cEntSai,cTpNF,aMantem,aGets)

Local aArea		:= GetArea()
Local aCols		:= {}
Local aHeader	:= {}
Local aCabec	:= {"aHProc"}
Local aDeleta	:= {}
Local aDel		:= {}
Local lExiste	:= .F.
Local lRet		:= .F.
Local lAtualiza	:= .T.
Local lPassou   := .F.
Local nX 		:= 0
Local nY		:= 0
Local nZ		:= 0
Local nI		:= 0
Local nPos		:= 0
Local nPos2		:= 0
Local nPos4		:= 0
Local nCount	:= 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Setando o indice das tabelas que serao atualizadas³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
CDG->(dbSetOrder(1))

Begin Transaction

	For nX := 1 to Len(aCabec)
		aDeleta := {}
		aDel	:= {}
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Monta o aHeader e o aCols generico para efetuar a gravacao³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aHeader	:= &(aCabec[nX])
		If ValType(aGets[nX]) == "O"
			aCols 	:= aGets[nX]:aCols
		Else
			aCols	:= {}
		Endif
		If ValType(aGets[nX]) == "O"
			lRet 		:= .T.
			Do Case
				Case nX  == 1
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Somente efetua o processo de gravacao se existir informacoes no aCols³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If T521Exist(aCols)
						nPos	:= aScan(aHeader,{|x| Alltrim(x[2])=="CDG_PROCES"})
						nPos2	:= aScan(aHeader,{|x| Alltrim(x[2])=="CDG_TPPROC"})
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³Verifica se existem campos deletados e nao deletados de mesma chave³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						For nI := 1 to Len(aCols)
							If aCols[nI][Len(aHeader)+1]
								aAdd(aDel,{aCols[nI][nPos],aCols[nI][nPos2]})
							Endif
						Next
						For nI := 1 to Len(aCols)
							If !aCols[nI][Len(aHeader)+1]
								If aScan(aDel,{|x| x[1] == aCols[nI][nPos] .And. x[2] == aCols[nI][nPos2]}) > 0
									aAdd(aDeleta,{aCols[nI][nPos],aCols[nI][nPos2]})
								Endif
							Endif
						Next
						For nY := 1 to Len(aCols)
							lExiste 	:= CDG->(dbSeek(xFilial("CDG")+cEntSai+cDoc+cSerie+cClieFor+cLoja+aCols[nY][nPos]+aCols[nY][nPos2]))
							lAtualiza 	:= .T.
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Verifica se o item nao esta excluido no aCols³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If !aCols[nY][Len(aHeader)+1]
								If lExiste
									RecLock("CDG",.F.)
								Else
									RecLock("CDG",.T.)
									CDG->CDG_FILIAL	:= xFilial("CDG")
									CDG->CDG_TPMOV	:= cEntSai
									CDG->CDG_DOC	:= cDoc
									CDG->CDG_SERIE	:= cSerie
									CDG->CDG_CLIFOR	:= cClieFor
									CDG->CDG_LOJA	:= cLoja
									CDG->CDG_CANC   := "S"
									lExiste := .T.
									lPassou := .T.
								Endif
								For nZ := 1 To Len(aHeader)
									CDG->(FieldPut(ColumnPos(aHeader[nZ][2]),aCols[nY][nZ]))
									lPassou := .T.
								Next nY
								MsUnLock()
								FkCommit()
							Else
								// Exclusao
								If lExiste .And. aScan(aDeleta,{|x| x[1] == aCols[nY][nPos] .And. x[2] == aCols[nY][nPos2]}) == 0
									If nCount <= 0
										lAtualiza := .F.
										RecLock("CDG",.F.)
										CDG->(dbDelete())
										MsUnLock()
										FkCommit()
										nCount ++
									Endif
								Endif
							Endif
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Atualiza o array com os documentos que permanecerao na tabela³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If lAtualiza
								nPos4 := aScan(aMantem[2],{|x| x[1]+x[2] ==;
												aCols[nY][nPos]+aCols[nY][nPos2]})
								If nPos4 > 0
									aMantem[2][nPos4][3] := .T.
								Endif
							Endif
						Next
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³Como no processo referenciado o numero e tipo de processo e a informacao complementar          ³
						//³fazem parte da chave e e possivel altera-los, apos a atualizacao das informacoes complementares³
						//³exclui-se as referencias que existiam na base mas nao existem mais devido a alteracao no acols.³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						For nI := 1 to Len(aMantem[2])
							If !aMantem[2][nI][3]
								If CDG->(dbSeek(xFilial("CDG")+cEntSai+cDoc+cSerie+cClieFor+cLoja+aMantem[2][nI][1]+aMantem[2][nI][2]))
									RecLock("CDG",.F.)
									CDG->(dbDelete())
									MsUnLock()
									FkCommit()
								Endif
							Endif
						Next
					Else
						Help("  ",1,"A926ProcObr")
						lRet := .F.
					Endif
			EndCase
		Endif
	Next

End Transaction

If (!lExiste  .Or. (!lPassou .And. nCount > 0))
	Help("  ",1,"A926ProcObr")
	lRet := .F.
EndIf
RestArea(aArea)
Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³T521Proc  ³ Autor ³ Mary C. Hergert       ³ Data ³ 26/11/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Efetua as validacoes dos processos referenciados           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpO1 = Objeto que contem a get dados                      ³±±
±±³Parametros³ ExpA2 = Array com os campos obrigatorios                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nao ha.                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Mata521                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function T521Proc(oGetProc,aObrigat,lFinal)

Local aCols		:= oGetProc:aCols
Local aPos		:= {}
Local aProcess	:= {}
Local lRet		:= .T.
Local lRepete	:= .F.
Local lObrigat	:= .F.
Local nX		:= 0
Local nAt		:= oGetProc:nAt

aAdd(aPos,aScan(aHProc,{|x| Alltrim(x[2])=="CDG_IFCOMP"}))
aAdd(aPos,aScan(aHProc,{|x| Alltrim(x[2])=="CDG_TPPROC"}))
aAdd(aPos,aScan(aHProc,{|x| Alltrim(x[2])=="CDG_PROCES"}))

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se algum campo obrigatorio nao foi digitado³
//³(apenas da linha que esta sendo manipulada - aT)    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !lFinal .And. !(aCols[nAt][Len(aHProc)+1])
	If T521Obrig(aObrigat,aHProc,aCols[nAt],10)
		lObrigat := .T.
	Endif
Endif

For nX := 1 to Len(aCols)
	If !(aCols[nX][Len(aHProc)+1])
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Verifica se algum campo obrigatorio nao foi digitado em todos os itens³
		//³(somente quando for validacao do ok da rotina)                        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lFinal
			lObrigat := T521Obrig(aObrigat,aHProc,aCols[nX],10)
		Endif
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Verifica se o processo + informacao complementar nao foi digitado em outra linha³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If aScan(aProcess,{|x| x[1] == aCols[nX][aPos[1]] .And. x[2] == aCols[nX][aPos[2]] .And. x[3] == aCols[nX][aPos[3]]}) > 0
			lRepete := .T.
		Endif
		aAdd(aProcess,{aCols[nX][aPos[1]],aCols[nX][aPos[2]],aCols[nX][aPos[3]]})
	Endif
Next

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Informa se o processo + informacao complementar nao foi digitado em outra linha³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRepete
	Help("  ",1,"A926Proc")
	lRet := .F.
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Informa se existe algum campo obrigatorio que nao foi preenchido³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lObrigat
	Help("  ",1,"A926ProcObr")
	lRet := .F.
Endif
Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³T521Exist ³ Autor ³ Mary C. Hergert       ³ Data ³ 26/11/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Verifica se o aCols foi preenchido ou se apenas foi criado ³±±
±±³          ³ em branco                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpA1 = Array com os campos do aCols                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Indicacao da existencia de campos no aCols                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Mata521                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function T521Exist(aCols)

Local lExiste	:= .F.
Local nX		:= 0
Local nY		:= 0

For nX := 1 to Len(aCols)
	If lExiste
		Exit
	Endif
	For nY := 1 to Len(aCols[nX])
		If ValType(aCols[nX][nY]) == "C"
			If !Empty(aCols[nX][nY])
				lExiste := .T.
				Exit
			Endif
		Endif
		If ValType(aCols[nX][nY]) == "N"
			If aCols[nX][nY] <> 0
				lExiste := .T.
				Exit
			Endif
		Endif
	Next
Next
Return lExiste

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ T521NF   ³ Autor ³ Mary C. Hergert       ³ Data ³ 26/11/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Cria o cabecalho dos complementos (fixo para todos os mode-³±±
±±³          ³ los com os dados da nota fiscal a ser complementada)       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpO1 = Painel onde os componentes serao inseridos         ³±±
±±³          ³ ExpO2 = Font a ser utilizada                               ³±±
±±³          ³ ExpN3 = Altura padrao dos objetos Say                      ³±±
±±³          ³ ExpN4 = Tamanho padrao dos objetos Say                     ³±±
±±³          ³ ExpN5 = Altura padrao dos objetos Get                      ³±±
±±³          ³ ExpC6 = Numero da nota fiscal                              ³±±
±±³          ³ ExpC7 = Serie da nota fiscal                               ³±±
±±³          ³ ExpC8 = Especie da nota fiscal                             ³±±
±±³          ³ ExpC9 = Codigo do cliente/fornecedor                       ³±±
±±³          ³ ExpCA = Loja do cliente/fornecedor                         ³±±
±±³          ³ ExpCB = Movimento de Entrada ou Saida                      ³±±
±±³          ³ ExpCC = Indica se a NF e de devol./beneficiamento          ³±±
±±³          ³ ExpAD = Coordenadas dos paineis principais                 ³±±
±±³          ³ ExpAE = Painel onde serao montados os dados da NF          ³±±
±±³          ³ ExpOF = Dialog principal                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nao ha.                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Mata521                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function T521NF(oFont,nAltSay,nTamSay,nAltGet,cDoc,cSerie,cEspecie,cClieFor,cLoja,cEntSai,cTpNF,oDlg)

Local aColuna		:= {15,65,145,185,250,298}
Local bSay			:= {|| Nil}
Local bVar			:= {|| Nil}
Local bWhen			:= {|| Nil}
Local cOpcao		:= ""
Local cPesqF3		:= ""
Local nLinSay		:= 19
Local nLinGet		:= 17
Local nTamGet		:= 55
Local nTamGet2		:= 30
Local oGrpNF
Local oPanel
Local   lDatRecb	:= .T.

oPanel := TPanel():New(035,005,'',oDlg,oDlg:oFont,.T.,.T.,,,365,090,.T.,.T.)
oGrpNF := TGroup():New(5,5,70,355,STR0042,oPanel,,,.T.,.T.) //"Informações do documento fiscal"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Tipo de documento - entrada/saida³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cOpcao := If (cEntSai == "S", STR0038, STR0037) //"Saída"##"Entrada"

bSay	:= &('{|| "' + STR0036 + '"}') // "Tipo"
TSay():New(nLinSay,aColuna[1],bSay,oGrpNF,,oFont,.F.,.F.,.F.,.T.,,,nTamSay,nAltSay,.F.,.F.,.F.,.F.,.F.)

bVar     := &("{ | u | If( PCount() == 0, cOpcao,cOpcao := u)}")
TGet():New(nLinGet,aColuna[2],bVar,oGrpNF,nTamGet,nAltGet,"@!",,,,,,,.T.,,, bWhen,,,,.T.,,,cDoc)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Data de Recebimento  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lDatRecb
	If CDT->(dbSeek(xFilial("CDT")+cEntSai+cDoc+cSerie+cClieFor+cLoja))
		dDatReceb	:=	CDT->CDT_DTAREC
	EndIf
	bSay	:= &('{|| "' + "Data Recebimento" + '"}')
	TSay():New(nLinSay,aColuna[5],bSay,oGrpNF,,oFont,.F.,.F.,.F.,.T.,,,nTamSay,nAltSay,.F.,.F.,.F.,.F.,.F.)
	bVar     := &("{|u| If(PCount()== 0,dDatReceb,dDatReceb :=u)}")
	TGet():New(nLinGet,aColuna[6],bVar,oGrpNF,nTamGet,nAltGet,PesqPict("CDT","CDT_DTAREC"),,,,,,,.T.,,,,,,,,,,)
	nLinSay := nLinSay + 18
	nLinGet := nLinGet + 18
Endif
lDatRecb := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Numero da nota fiscal³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bSay	:= &('{|| "' + STR0043 + '"}') // "Número"
TSay():New(nLinSay,aColuna[1],bSay,oGrpNF,,oFont,.F.,.F.,.F.,.T.,,,nTamSay,nAltSay,.F.,.F.,.F.,.F.,.F.)
bVar     := &("{ | u | If( PCount() == 0, cDoc,cDoc := u)}")
TGet():New(nLinGet,aColuna[2],bVar,oGrpNF,nTamGet,nAltGet,"@!",,,,,,,.T.,,, bWhen,,,,.T.,,,cDoc)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Serie da nota fiscal³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bSay	:= &('{|| "' + STR0035 + '"}') // "Serie"
TSay():New(nLinSay,aColuna[3],bSay,oGrpNF,,oFont,.F.,.F.,.F.,.T.,,,nTamSay,nAltSay,.F.,.F.,.F.,.F.,.F.)
bVar     := &("{ | u | If( PCount() == 0, cSerie,cSerie := u)}")
TGet():New(nLinGet,aColuna[4],bVar,oGrpNF,nTamGet2,nAltGet,"@!",,,,,,,.T.,,, bWhen,,,,.T.,,,cSerie)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Especie da nota fiscal³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bSay	:= &('{|| "' + STR0039 + '"}') // "Espécie"
TSay():New(nLinSay,aColuna[5],bSay,oGrpNF,,oFont,.F.,.F.,.F.,.T.,,,nTamSay,nAltSay,.F.,.F.,.F.,.F.,.F.)
bVar     := &("{ | u | If( PCount() == 0, cEspecie,cEspecie := u)}")
TGet():New(nLinGet,aColuna[6],bVar,oGrpNF,nTamGet2,nAltGet,"@!",,,,,,,.T.,,, bWhen,,,,.T.,,"42")

nLinSay := nLinSay + 18
nLinGet := nLinGet + 18

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Cliente/Fornecedor da nota fiscal³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bSay	:= &('{|| "' + STR0040 + '"}') // "Cliente/fornecedor"
TSay():New(nLinSay,aColuna[1],bSay,oGrpNF,,oFont,.F.,.F.,.F.,.T.,,,nTamSay,nAltSay,.F.,.F.,.F.,.F.,.F.)
bVar     := &("{ | u | If( PCount() == 0, cClieFor,cClieFor := u)}")
TGet():New(nLinGet,aColuna[2],bVar,oGrpNF,nTamGet,nAltGet,"@!",,,,,,,.T.,,, bWhen,,,,.T.,,cPesqF3)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Loja da nota fiscal ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bSay	:= &('{|| "' + STR0041 + '"}') // "Loja"
TSay():New(nLinSay,aColuna[3],bSay,oGrpNF,,oFont,.F.,.F.,.F.,.T.,,,nTamSay,nAltSay,.F.,.F.,.F.,.F.,.F.)
bVar     := &("{ | u | If( PCount() == 0, cLoja,cLoja := u)}")
TGet():New(nLinGet,aColuna[4],bVar,oGrpNF,nTamGet2,nAltGet,"@!",,,,,,,.T.,,, bWhen,,,,.T.,,)
Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³T521Obrig ³ Autor ³ Mary C. Hergert       ³ Data ³ 26/11/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Verifica se existem campos obrigatorios nao preenchidos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpA1 = Array com os campos obrigatorios                   ³±±
±±³          ³ ExpA2 = Array com os campos da get dados                   ³±±
±±³          ³ ExpA3 = Array com o conteudo do campo                      ³±±
±±³          ³ ExpN4 = Numero que indica o complemento                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ .T. para existencia de campos obrigatorios em branco       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Mata521                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function T521Obrig(aObrigat,aHeader,aCols,nComp)

Local lRet	:= .F.
Local nX	:= 0
Local nPos	:= 0
Local xConteudo
Local lObrigCmp	:=	.F.

For nX := 1 to Len(aObrigat[nComp])
	lObrigCmp	:=	.F.
	nPos := aScan(aHeader,{|x| x[2] == aObrigat[nComp][nX][1]})
	If nPos > 0
		xConteudo	:= aCols[nPos]
		If aObrigat[nComp][nX][2] == "C"
			If Empty(xConteudo)
				lRet := .T.
				lObrigCmp	:=	.T.
			Endif
		ElseIf aObrigat[nComp][nX][2] == "N"
			If xConteudo == 0
				lRet := .T.
				lObrigCmp	:=	.T.
			Endif
		Endif
		If aObrigat[nComp][nX][1] == "CDD_SERREF" .and. lRet
			aCols[2] := "   "
			lRet := .F.
		EndIf
	Endif
Next
Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} A521VERPRS
Verificação e marcação do registro no MarkBrow e Vincula NFs
@sample   A521VERPRS(cId, cMarca)
@param    cId     - Indica o cId da Acao.
@param    cMarca  - valor de marcacao da markbrow().
@return   lRet (Boolean) - sempre verdadeiro.

@author   Eduardo Vicente
@since    27.02.2013
@version  P11.5
/*/
//-------------------------------------------------------------------
Function A521VERPRS(cId,cMarca)

Local aArea		:= GetArea()       //Salva a area atual
Local oMark		:= GetMarkBrow()   //Objeto do Browser Markbrow()
Local cInfMarc	:= If(IsMark("F2_OK", cMarca)," ",cMarca)   //Se ja esta marcado ira desmarcar caso contrario ira marcar.
Local cChave	:= ""              //Chave da nota fiscal vinculada

If cId == "1"
	Reclock("SF2",.F.)
	SF2->F2_OK := cInfMarc
	SF2->( MsUnlock() )
	If SF2->(ColumnPos("F2_ECVINC1")) > 0  .AND. SF2->(ColumnPos("F2_ECVINC2")) > 0
		cChave := xFilial("SF2")+PadR(SF2->F2_ECVINC1,Len(SF2->F2_DOC))+PadR(SF2->F2_ECVINC2,Len(SF2->F2_SERIE))
		If  SF2->( dbSeek(cChave) )
			While !( SF2->(Eof()) ) .And. (SF2->F2_FILIAL+SF2->F2_DOC+SF2->F2_SERIE == cChave)
				Reclock("SF2",.F.)
				SF2->F2_OK := cInfMarc
				SF2->( MsUnlock() )
				SF2->( dbSkip() )
			End
		EndIf
	EndIf
EndIf
RestArea(aArea)
oMark:Refresh()
Eval(bFiltraBrw)
Return .T.

//-----------------------------------------------------
/*/Verifica se integração com SIGAGFE para também eliminar as Notas Fiscais
@author Felipe Machado de Oliveira
@version P11
@since 18/04/2013
/*/
//------------------------------------------------------
Function MATA521IPG(lGravando)

Local lRet := .T.
Local lIntGFE := SuperGetMv("MV_INTGFE",.F.,.F.)
Local cIntGFE2 := SuperGetMv("MV_INTGFE2",.F.,"2")
Local cIntNFS := SuperGetMv("MV_GFEI11",.F.,"2")

Default lGravando := .F.

//Integração Protheus com SIGAGFE
If lIntGFE .And. cIntGFE2 $ "1" .And. cIntNFS == "1"
	lRet := MATA521ENF(lGravando)
EndIf
Return lRet

//-----------------------------------------------------
/*/	Elimina a Nota Fiscal selecionadas no browse
@author Felipe Machado de Oliveira
@version P11
@since 18/04/2013
/*/
//------------------------------------------------------
Function MATA521ENF(lGravando)

Local aAreaGW1 := GetArea("GW1")
Local lRet := .T.
Local oModelGW1 := FWLoadModel("GFEA044")
Local cF2_CDTPDC := ""
Local cEmisDc := ""
Local aArray := {}

Default lGravando := .F.

Aadd(aArray, AllTrim(SF2->F2_DOC)     + Space( TamSx3("GW1_CDTPDC")[1] -(Len( AllTrim(SF2->F2_DOC))) ) )
Aadd(aArray, AllTrim(SF2->F2_SERIE)   + Space( TamSx3("GW1_SERDC")[1]  -(Len( AllTrim(SF2->F2_SERIE))) ) )
Aadd(aArray, AllTrim(SF2->F2_CLIENTE) + Space( TamSx3("F2_CLIENTE")[1] -(Len( AllTrim(SF2->F2_CLIENTE))) ) )
Aadd(aArray, AllTrim(SF2->F2_LOJA)    + Space( TamSx3("F2_LOJA")[1]    -(Len( AllTrim(SF2->F2_LOJA))) ) )
Aadd(aArray, AllTrim(SF2->F2_TIPO)    + Space( TamSx3("F2_TIPO")[1]    -(Len( AllTrim(SF2->F2_TIPO))) ) )

cF2_CDTPDC := Posicione("SX5",1,xFilial("SX5")+"MQ"+AllTrim(aArray[5])+"S","X5_DESCRI")

If Empty(cF2_CDTPDC)
	cF2_CDTPDC := Posicione("SX5",1,xFilial("SX5")+"MQ"+AllTrim(aArray[5]),"X5_DESCRI")
EndIf

cF2_CDTPDC := AllTrim(cF2_CDTPDC) + Space( TamSx3("GW1_CDTPDC")[1] -(Len( AllTrim(cF2_CDTPDC))) )
If FindFunction( "GFEM011COD")
	cEmisDc := GFEM011COD(,,,.T.,xFilial("SF2"))
EndIf

dbSelectArea("GW1")
GW1->( dbSetOrder(1) )
GW1->( dbSeek( xFilial("GW1")+cF2_CDTPDC+cEmisDc+aArray[2]+aArray[1] ) )
If !GW1->( Eof() ) .And. GW1->GW1_FILIAL == xFilial("GW1");
	.And. AllTrim(GW1->GW1_CDTPDC) == AllTrim(cF2_CDTPDC);
	.And. AllTrim(GW1->GW1_EMISDC) == AllTrim(cEmisDc);
	.And. AllTrim(GW1->GW1_SERDC) == AllTrim(aArray[2]);
	.And. AllTrim(GW1->GW1_NRDC) == AllTrim(aArray[1])

	oModelGW1:SetOperation( MODEL_OPERATION_DELETE )
	oModelGW1:Activate()
	lRet := oModelGW1:VldData()
	If lRet .And. lGravando
		oModelGW1:CommitData()
	Elseif !lRet
		Help( ,, STR0007,,STR0077+CRLF+CRLF+oModelGW1:GetErrorMessage()[6], 1, 0,,,,,.T. ) //"Atenção"##"Inconsistência com o Frete Embarcador (SIGAGFE): "##
		lRet := .F.
	EndIf
	oModelGW1:Deactivate()
EndIf
If lRet .And. lGravando
	If SuperGetMv("MV_FATGFE",.F.,"2") == "2"
		//Exclui a nota da GW0
		If FindFunction( "GFEM011GW0")
			GFEM011GW0()
		EndIf
	EndIf
EndIf
RestArea(aAreaGW1)
Return lRet

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Ma521Legen³Autor  ³ Vendas e CRM          ³ Data ³  .  .     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Demonstra a legenda das cores da mbrowse                     ³±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Ma521Legen()

Local aCores := {}

aCores := {{"BR_BRANCO",  STR0052},; //"Nenhuma ação tomada"
           {"BR_VERDE",   STR0053},; //"Cancelamento já autorizado e com pendencias de processo"
           {"DISABLE",    STR0054},; //"Cancelamento não autorizado"
           {"BR_LARANJA", STR0055}} //"Aguardando Cancelamento"
BrwLegenda(cCadastro,STR0056,aCores) //"Status da NFe"
Return(.T.)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Ma521Refre³Autor  ³ Vendas e CRM          ³ Data ³  .  .     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³                                                             ³±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Ma521Refre()

Local oMark := GetMarkBrow()

FatJobNFe()
If oMark <> Nil
	oMark:Refresh()
EndIf
Eval(bFiltraBrw)
Return

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FatJobNFe³Autor  ³ Vendas e CRM          ³ Data ³  .  .     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³                                                             ³±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function FatJobNFe(cCodEmp,cCodFil,nIDJob)

Local cAliasSF2 := "SF2"
Local lExecuta  := .F.
Local cArqLck   := Nil
Local cHoraUlt  := "00:00:01"
Local cHora     := cHoraUlt
Local cHoraIni  := ""
Local cHoraFim  := ""
Local nIntervalo:= 0
Local cAtivo    := "ON"
Local nJobs     := 1
Local lSchedule := ValType(cCodEmp) == "A" // Se é execuçao via Schedule
Local cQrySF2   := ""
Local ARQ_FATNFE:= GetAdv97() //"APPSERVER.INI"
Local aRegSD2   := {}
Local aRegSE1   := {}
Local aRegSE2   := {}
Local lSF2520E  := Existblock("SF2520E")
Local cParams   := ""
Local aAlias    := {"SA1", "SB1", "SB2", "SC7", "SC9", "SC6", "SD2"} //ALIAS utilizados de forma exclusiva no refaz acumulado
Local lChkFile  := .T.
Local nCount    := 0
Local aAliasOpen:= {}
Local cAlias    := ""
Local aArea		:= GetArea()
Local lNFeCancel	:= .F.
Local lNFSeCanc	:= .F.
Local lLockByFil	:= .T.
//Parametro para ativar o log com CV8 no JOB - Valor Default .F.
Local lLogExNF	:= .F.

DEFAULT nIDJob	:= 0
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Preparando o ambiente para execucao                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lschedule
	RpcSetType( 3 )
	PREPARE ENVIRONMENT EMPRESA cCodEmp[1] FILIAL cCodEmp[2] MODULO "FAT"
	cCodEmp	:= cEmpAnt
	cCodFil	:= cFilAnt
Else
	If IsBlind()
		RpcSetType( 3 )
		PREPARE ENVIRONMENT EMPRESA cCodEmp FILIAL cCodFil MODULO "FAT"
	Else
		cCodEmp	:= cEmpAnt
		cCodFil	:= cFilAnt
	EndIf
EndIf
aAdianta  	:= ProtCfgAdt()
bFilFIE   	:= Iif(aAdianta[1,4],{|| FIE->FIE_FILORI==cFilAnt .Or. Empty(FIE->FIE_FILORI)},{||.T.})
lAdtCompart	:= aAdianta[1,5] .And. 'C' $ aAdianta[1,1]+aAdianta[1,2]+aAdianta[1,3]
bFilFR3   	:= iIF(lAdtCompart,{|| FR3->FR3_FILORI == cFilAnt },{|| .T. })

lNFeCancel	:= SuperGetMV('MV_CANCNFE',.F.,.F.)
// Retorna se municipio da filial corrente permite cancelamento de NFSe através de webservice.
lNFSeCanc	:= SuperGetMV('MV_CANNFSE',.F.,.F.)
If lNFSeCanc .AND. CanWSNFSe()== 0 // JOB ativo, mas a prefeitura não tem WS de cancelamento
	lNFSeCanc := .F.
EndIf
lLockByFil	:= !Empty(cCodFil)

// qdo configurado via job, o parametro nIdJob o tipo é caracter.
// Sendo necessario a conversao para numerico
If ValType(nIDJob)=="C"
	nIDJob := Val(nIdJob)
EndIf

ConOut("FatJobNFe("+StrZero(nIDJob,2)+") Accessing environment")
ConOut("FatJobNFe("+StrZero(nIDJob,2)+"): "+cCodEmp+cCodFil)
ConOut(Repl("-",80))

cArqLck   := "FatJobNFe"+cCodEmp+cCodFil+StrZero(nIDJob,2)
cHoraIni  := GetPvProfString("FatJobNFe_"+cCodEmp+cCodFil,"START_TIME","00:00:01",ARQ_FATNFE)
cHoraFim  := GetPvProfString("FatJobNFe_"+cCodEmp+cCodFil,"FINISH_TIME","23:59:59",ARQ_FATNFE)
nIntervalo:= Val(GetPvProfString("FatJobNFe_"+cCodEmp+cCodFil,"INTERVAL","5",ARQ_FATNFE))
cAtivo    := GetPvProfString("FatJobNFe_"+cCodEmp+cCodFil,"ACTIVATE","ON",ARQ_FATNFE)
If IsBlind()
	nJobs     := Val(GetPvProfString("FatJobNFe_"+cCodEmp+cCodFil,"JOBS","1",ARQ_FATNFE))
EndIf

nIntervalo := MAX(nIntervalo,5)

ConOut("FatJobNFe("+StrZero(nIDJob,2)+"): Starting processing in [" + dtoc(MSDate()) + " " + AllTrim(cValToChar(Time())) + "] ")
ConOut("FatJobNFe("+StrZero(nIDJob,2)+"): cArqLck    - "+cArqLck)
ConOut("FatJobNFe("+StrZero(nIDJob,2)+"): cHoraIni   - "+cHoraIni)
ConOut("FatJobNFe("+StrZero(nIDJob,2)+"): cHoraFim   - "+cHoraFim)
ConOut("FatJobNFe("+StrZero(nIDJob,2)+"): nIntervalo - "+STR(nIntervalo))
ConOut("FatJobNFe("+StrZero(nIDJob,2)+"): cAtivo     - "+cAtivo)
ConOut("FatJobNFe("+StrZero(nIDJob,2)+"): nJobs      - "+STR(nJobs))
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Controle de execucao. Nao permite que o mesmo JOB seja inicializado mais³
//³de uma vez                                                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
ConOut("FatJobNFe("+StrZero(nIDJob,2)+"): Thread in use " +Alltrim(Str(ThreadID())))

If LockByName(cArqLck,.T.,lLockByFil)
	ConOut("FatJobNFe("+StrZero(nIDJob,2)+"): "+STR0078)	//"Job em execução."
	ConOut(Repl("-",80))

	For nCount := 1 to 250
		cAlias := Alias(nCount)
		If !Empty(cAlias)
			aAdd(aAliasOpen,cAlias)
		EndIf
	Next nCount

	lLogExNF	:= 	GetMV("MV_LOGEXNF",.F.)
	While (cAtivo == "ON" .And. nJobs >= nIDJob .And. !Killapp())
		If dDataBase <> MsDate() .And. IsBlind()
			dDataBase := MsDate()
		EndIF
		lExecuta := .F.
		cAtivo     := GetPvProfString("FatJobNFe_"+cCodEmp+cCodFil,"ACTIVATE","ON",ARQ_FATNFE)
		If cHoraIni > cHoraFim
			If !(Time() >= cHoraFim .And. Time() <= cHoraIni)
				cHora := cHoraUlt
				SomaDiaHor(Date(),@cHora,nIntervalo/60)
				If Time() >= cHora .Or. nIntervalo == 0
					cHoraUlt := Time()
					lExecuta := .T.
				EndIf
			Else
				cAtivo := "OFF"
			EndIf
		Else
			If Time() >= cHoraIni .And. Time() <= cHoraFim
				cHora := cHoraUlt
				SomaDiaHor(Date(),@cHora,nIntervalo/60)
				If Time() >= cHora .Or. nIntervalo == 0
					cHoraUlt := Time()
					lExecuta := .T.
				EndIf
			Else
				cAtivo := "OFF"
			EndIf
		EndIf
		If lExecuta
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Verifica os Pedidos que possuem itens liberados                         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !lSchedule
				ConOut('FatJobNFe(' + StrZero(nIDJob,2) + '): ' + 'Searching NFe... (' + AllTrim(cValToChar(Time())) + ' - ' + DtoC(Date()) + ')')
			EndIf

			cParams := '' //Reinicializa o Filtro
			If lNFeCancel .AND. lNFSeCanc
				cParams := " AND SF2.F2_ESPECIE IN('SPED','RPS')"
			Else
				If lNFeCancel
					cParams += " AND SF2.F2_ESPECIE ='SPED'"
				EndIf
				If lNFSeCanc
					cParams += " AND SF2.F2_ESPECIE ='RPS'"
				EndIf
			EndIf

			cParams += " AND SF2.F2_FIMP IN ('T','S','N')"
			cParams += " AND SF2.F2_STATUS IN ('025')"
			cParams += " AND SF2.D_E_L_E_T_ = ' '"
			lChkFile := .T.
			For nCount := 1 To Len(aAlias)
				If !ChkFile(aAlias[nCount])
					lChkFile := .F.
					ConOut('FatJobNFe(' + StrZero(nIDJob,2) + '): ' +;
					       STR0090+;										//"Não foi possível executar o processo neste momento."
					       ' Alias: ' + aAlias[nCount] + ' - '+;
					       STR0091 +;										//"Tabela aberta em modo exclusivo por outra rotina."
						   ' (' + AllTrim(cValToChar(Time())) + ' - ' + DtoC(Date()) + ')')
					Exit
				EndIf
			Next nCount

			If lChkFile

				cAliasSF2 := "FatJobNFe"
				cQrySF2 := "SELECT F2_FILIAL,F2_DOC,F2_SERIE,F2_CLIENTE,F2_LOJA,R_E_C_N_O_ SF2RECNO "
				cQrySF2 += "FROM "+RetSqlName("SF2")+" SF2 "
				cQrySF2 += "WHERE SF2.F2_FILIAL='"+xFilial("SF2")+"'"
				cQrySF2 += cParams
				cQrySF2 += " ORDER BY F2_FILIAL,F2_SERIE,F2_DOC "

				cQrySF2 := ChangeQuery(cQrySF2)
				dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQrySF2),cAliasSF2)
				Pergunte("MTA521",.F.)

				If lLogExNF
					// inicia o log de processamento
					ProcLogIni( {},"EXCLUINF")
					If lSchedule
						ProcLogAtu("INICIO",STR0079,"","EXCLUINF")	//"Iniciando exclusão da NF via Schedule"
					Else
						ProcLogAtu("INICIO",STR0080,"","EXCLUINF")	//"Iniciando exclusão da NF via Job"
					EndIf
				EndIf

				While !Eof() .And. (cAliasSF2)->F2_FILIAL == xFilial("SF2") .And. !KillApp()

					DbSelectArea("SF2")
					SF2->(DbGoTo((cAliasSF2)->SF2RECNO))

					// O documento de Saida deve avaliado
					// de forma exclusiva
					If SF2->(dbRLock())
						aRegSD2 := {}
						aRegSE1 := {}
						aRegSE2 := {}
						ConOut('FatJobNFe('+StrZero(nIDJob,2)+'): MaCanDelF2 - '+(cAliasSF2)->F2_SERIE+(cAliasSF2)->F2_DOC)
						If MaCanDelF2("SF2",SF2->(recno()),@aRegSD2,@aRegSE1,@aRegSE2,,.T.,lLogExNF) .AND. MA521VerSC6(SF2->F2_FILIAL,SF2->F2_DOC,SF2->F2_SERIE,SF2->F2_CLIENTE,SF2->F2_LOJA)
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Estorna o documento de saida                                   ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							ConOut('FatJobNFe('+StrZero(nIDJob,2)+'): MaDelNFS - '+(cAliasSF2)->F2_SERIE+(cAliasSF2)->F2_DOC)

							If lSF2520E
								ExecBlock("SF2520E",.F.,.F.)
							EndIf
							SF2->(MaDelNFS(aRegSD2,aRegSE1,aRegSE2,MV_PAR01==1,MV_PAR02==1,MV_PAR03==1,MV_PAR04==1))
						EndIf
						MsUnLockAll()
					Else
						ConOut('FatJobNFe('+StrZero(nIDJob,2)+'): NFe in use... '+(cAliasSF2)->F2_SERIE+(cAliasSF2)->F2_DOC)
					EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Verificando a troca do dia                                              ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If Time() >= cHoraIni
						dDataBase := MsDate()
					EndIf
					dbSelectArea(cAliasSF2)
					dbSkip()
				EndDo

				If lLogExNF
					// finaliza o log de processamento
					If lSchedule
						ProcLogAtu("FIM",STR0081,"","EXCLUINF")	//"Finalizando exclusão da NF via Schedule"
					Else
						ProcLogAtu("FIM",STR0082,"","EXCLUINF")	//"Finalizando exclusão da NF via Job"
					EndIf
				EndIf
				If !lSchedule
					ConOut('FatJobNFe(' + StrZero(nIDJob,2) + '): ' + 'Searched NFe... (' + AllTrim(cValToChar(Time())) + ' - ' + DtoC(Date()) + ')')
				EndIf

				(cAliasSF2)->(DbCloseArea())
				//Verificando se existe algum cancelamento pendente

				cQrySF2 := "SELECT COUNT(*) RECSF2 "
				cQrySF2 += "FROM "+RetSqlName("SF2")+" SF2 "
				cQrySF2 += "WHERE SF2.F2_FILIAL='"+xFilial("SF2")+"'"
				cQrySF2 += cParams

				cQrySF2 := ChangeQuery(cQrySF2)
				dBUseArea(.T.,"TOPCONN",TCGENQRY(,,cQrySF2),cAliasSF2)

				nCount := (cAliasSF2)->RECSF2
				ConOut(STR0083 + cValToChar(nCount))	//"Notas Pendentes: "
				(cAliasSF2)->(DbCloseArea())
				// Se uma execução por schedule ou se nao tiver mais nenhuma nota pendente,
				// fecho todas as tabelas que estiverem abertas.
				If lSchedule .OR. nCount == 0
					For nCount := 1 to 250
						cAlias := Alias(nCount)
						If !Empty(cAlias) .and. aScan(aAliasOpen,{|x| x==cAlias })==0
							(cAlias)->(dbCloseArea())
						EndIf
					Next nCount
				EndIf
			EndIf
		EndIf

		If lSchedule
			Exit
		EndIf
		If IsBlind()
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Verificando o ambiente novamente para assumir novos parametros          ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			cHoraIni   := GetPvProfString("FatJobNFe_"+cCodEmp+cCodFil,"START_TIME","00:00:01",ARQ_FATNFE)
			cHoraFim   := GetPvProfString("FatJobNFe_"+cCodEmp+cCodFil,"FINISH_TIME","23:59:59",ARQ_FATNFE)
			nIntervalo := Val(GetPvProfString("FatJobNFe_"+cCodEmp+cCodFil,"INTERVAL","5",ARQ_FATNFE))
			nJobs      := Val(GetPvProfString("FatJobNFe_"+cCodEmp+cCodFil,"JOBS","1",ARQ_FATNFE))
			nIntervalo := MAX(nIntervalo,5)
		Else
			nIDJob := nIDJob+1  //Contador para execução do refresh não entrar em looping
		EndIf
		Sleep(1000)
	EndDo
	UnLockByName(cArqLck,.T.,lLockByFil)
EndIf

If IsBlind()
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Finalisando o ambiente para execucao                                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	ConOut(Repl("-",80))
	ConOut("FatJobNFe("+StrZero(nIDJob,2)+"): "+"Environment reseted")
	ConOut(Repl("-",80))
	RESET ENVIRONMENT
EndIf

ConOut("FatJobNFe(" + StrZero(nIDJob,2) + "): Terminating processing in [" + dtoc(MSDate()) + " " + AllTrim(cValToChar(Time())) + "] ")

RestArea(aArea)
aSize(aAliasOpen,0)
aAliasOpen := NIL
Return(.T.)

/*/{Protheus.doc} FatComTSS
Transmite a solicitação de cancelamento de um documento de saida e
avaliar retorno da autorização baseado no registro posicionado na tabela SF2.

IMPORTANTE: O lock no registro da tabela SF2 deve ser sempre mantido, afim de outra thread não
fazer atualização em paralelo. Já que a mesmo pode estar executando o JOB FatJobNFe em paralelo.

@author reynaldo
@since 22/10/2014
@version 1.0
@param lRetorno,	Logico,	Verdadeiro se não existe nenhuma pendencia no documento de Saida
@param lJob,		Logico,	Verdadeiro se a rotina esta sendo executada através de JOB/Schedule

@return lRetorno, Verdadeiro - Autorizado o cancelamento(exclusão) do documento de Saida
/*/
Function FatComTSS( lRetorno, lJob, lIsNotLOJA )

Local aNFeCancel	:= {}
Local aInfMonNFe	:= {}
Local nTent			:= 0
Local nMaxTent		:= 12 // padrao
Local cStatus		:= ""
Local aArea			:= {}
Local lPendNF		:= .F.
Local cTypeNF		:= ""
Local lContinua		:= .F.
Local aAreaSF3		:= SF3->(GetArea())

DEFAULT lRetorno	:= .T.
DEFAULT lJob		:= .F.
DEFAULT lIsNotLOJA	:= .T.	//caso LOJA, somente executa o "OR" se lRetorno for igual a TRUE

If Alltrim(SF2->F2_ESPECIE) == "SPED"
	cTypeNF := "NFE" // Nota Fiscal Eletronica
	If IsBlind()
		lContinua := SF2->F2_FIMP $ 'TS' // Se o documento foi transmitido e/ou aprovado
	Else
		lContinua := SF2->F2_FIMP $ 'TSN' // Se o documento foi transmitido, aprovado ou j?teve cancelamento negado
	EndIf
	lContinua := lContinua .AND. slFuncNFe // se as funcoes do TSS para cancelamento de NFe existe no repositorio
Else
	If Alltrim(SF2->F2_ESPECIE) == "RPS"
		cTypeNF := "NFSE" // Nota Fiscal de Servicos Eletronica
		lContinua := SF2->F2_FIMP $ 'TSN' // Se o documento foi transmitido e/ou aprovado
		lContinua := lContinua .AND. slFuncNFSe // se as funcoes do TSS para cancelamento de NFSe existe no repositorio
	EndIf
EndIf

// se o documento de Saida já tem alguma pendencia
lPendNF := !lRetorno

// se o documento de saida estiver ok para excluir
// ou
// se o documento de saida tiver pendencia, mas houve tentativa anterior de envio na SEFAZ
If lRetorno .OR. ( lIsNotLOJA .AND.;
                   ((cTypeNF=="NFE" .AND. !lRetorno .AND. SF2->F2_STATUS=="025" .OR. SF2->F2_STATUS=="026") .OR. (cTypeNF=="NFSE" .AND. !lRetorno .AND. SF2->F2_STATUS=="   " .AND. CanWSNFSe()=1)) )

	aArea := GetArea()

	// se houver interface de usuario
	If !IsBlind()
		MsProcTxt(STR0084)	//"Aguardando monitoramento..."
	EndIf

	ConOut(STR0085 + AllTrim(cValToChar(Time())))			//"INICIO - Comunicação com o Monitor: "
	//1-VERIFICAÇÃO DE STATUS da NF no TSS
	aNFeCancel :={}
	aSize(aNFeCancel,0)
	AADD(aNFeCancel,SF2->F2_SERIE)	// serie desejada
	AADD(aNFeCancel,SF2->F2_DOC)	// numero do documento (inicio)
	AADD(aNFeCancel,SF2->F2_DOC)	// numero do documento (final)
	//
	// retorno vetor de 2 posicoes:
	//	[1] 1= aprovado,2=não aprovado,3=Aguardando
	aInfMonNFe := FatMonTSS(cTypeNF, aNFeCancel)

	// E feito novamente o bloqueio, pois a chamada da
	// FATMonTSS desbloqueia o registro
	dbSelectArea("SF2")

	If !SF2->( dbRLock() )
		lRetorno := .F.
	ElseIf Empty(aInfMonNFe) // Nao houve retorno do TSS
		lRetorno := .F.
	Else
		// gravo o status atual
		cStatus := SF2->F2_STATUS

		// Se teve retorno da sefaz/prefeitura
		If aInfMonNFe[1]$"1" .OR. (aInfMonNFe[1]$"2" .AND. IsBlind()) //Usuario em tela pode solicitar reprocessaemento da exclus?o
			// Atribui o codigo do retorno da SEFAZ ou Prefeitura
			cStatus := aInfMonNFe[2]
			lRetorno := (aInfMonNFe[1]=="1") // Aprovado, pode excluir a nota
		Else
			// Se for job executa uma vez.
			// Em teoria, só estou aguardando a resposta
			nMaxTent := IIf(lJob, 1,12)

			//2A-SE NAO FOI ENVIADO PARA TSS,
			cStatus := aInfMonNFe[2]

			lRetorno := .F.

			//Envio da Solicitacao de Cancelamento
			aNFeCancel :={}
			aSize(aNFeCancel,0)
			If cTypeNF == "NFE"
				If GetApoInfo("SPEDNFE.PRX")[4] < SToD('20191209')
					AADD(aNFeCancel,{})
					AADD(aNFeCancel[1],date())
					AADD(aNFeCancel[1],SF2->F2_SERIE)
					AADD(aNFeCancel[1],SF2->F2_DOC)
					AADD(aNFeCancel[1],SF2->F2_ESPECIE)
					AADD(aNFeCancel[1],'100')
				Else
					AADD(aNFeCancel,{})
					dbSelectArea("SF3")
					SF3->(DbsetOrder(6))
					If SF3->(DbSeek(xFilial("SF3")+SF2->F2_DOC+SF2->F2_SERIE))
						AADD(aNFeCancel[1],IIF(SF3->F3_CFO<"5","0","1"))
					Else
						AADD(aNFeCancel[1],"1")
					EndIf
					dbCloseArea()
					AADD(aNFeCancel[1],date())
					AADD(aNFeCancel[1],SF2->F2_SERIE)
					AADD(aNFeCancel[1],SF2->F2_DOC)
					AADD(aNFeCancel[1],SF2->F2_CLIENTE)
					AADD(aNFeCancel[1],SF2->F2_LOJA)
					AADD(aNFeCancel[1],SF2->F2_ESPECIE)
					If Empty(SF3->F3_CODRSEF)
						AADD(aNFeCancel[1],"100")
					Else
						AADD(aNFeCancel[1],SF3->F3_CODRSEF)
					EndIf
				EndIf
			Else
				If cTypeNF == "NFSE"
					AADD(aNFeCancel,SF2->F2_SERIE)	// serie desejada
					AADD(aNFeCancel,SF2->F2_DOC)	// numero do documento (inicio)
					AADD(aNFeCancel,SF2->F2_DOC)	// numero do documento (final)
				EndIf
			EndIf

			//Verifica se houve retorno positivo da transmissão do cancelamento
			If FATCANCTSS(cTypeNF, aNFeCancel)
				nTent := 1
				While nTent <= nMaxTent
					// Aguarda 5 segundos para verificar se houve retorno da sefaz
					sleep(5000)

					//2B-EVENTO
					aNFeCancel :={}
					aSize(aNFeCancel,0)
					AADD(aNFeCancel,SF2->F2_SERIE)
					AADD(aNFeCancel,SF2->F2_DOC)
					AADD(aNFeCancel,SF2->F2_DOC)
					aInfMonNFe := FatMonTSS(cTypeNF, aNFeCancel)
					// E feito novamente o bloqueio, pois a chamada da
					// FATMonTSS desbloqueia o registro
					dbSelectArea("SF2")
					dbRLock()

					If Empty(aInfMonNFe) // Nao houve retorno do TSS
						Exit
					EndIf
					// se teve retorno do TSS
					If aInfMonNFe[1]$"1;2"
						// Atribui o codigo do retorno da SEFAZ ou Prefeitura
						cStatus := aInfMonNFe[2]
						lRetorno := (aInfMonNFe[1]=="1") // Aprovado, pode excluir a nota
						Exit
					Else
						lRetorno := .F.
						// Foi não foi autorizado a solicitacao de cancelamento da NFe
						cStatus := aInfMonNFe[2]
					EndIf
					nTent++
				EndDo
			Else
				//Retorna Falso e limpa o Status, pois não foi feito a transmissão
				lRetorno := .F.
				cStatus := ""
			EndIf
		EndIf

		If !Empty(cStatus)
			SF2->(RecLock("SF2"))
			SF2->F2_STATUS := If("/" $ cStatus, SubStr(cStatus,5,3), cStatus)
			SF2->(MsUnLock())
		EndIf
	EndIf
	RestArea(aArea)
	ConOut(STR0086 + AllTrim(cValToChar(Time())))			//"FIM - Comunicação com o Monitor: "
EndIf

// Indiferente da resposta da SEFAZ, se houver pendencias na Documento de saida
// não sera liberada
If lPendNF
	lRetorno := .F.
EndIf

RestArea(aAreaSF3)
Return lRetorno

/*/{Protheus.doc} FatMonTSS
Função de monitoramento de notas de NFe ou NFSe

@param cTypeNF,	caracter, Tipo de NF
@param aNFeCancel, array, serie, numero de documento de inicio e fim

@return a validar

@author Reynaldo Tetsu Miyashita
@since 06/08/2015
@version 1.0
/*/
Static Function FatMonTSS(cType, aNFeCancel)

Local aInfMonNFe	:= {}
Local aInfRet		:= {}

//
// Tratamento do TSS para NFe - Nota Fiscal Eletronica
//
If cType == "NFE"
	aInfRet := ChamaMonit(aNFeCancel)
	If Len(aInfRet)> 0
		// Qual foi o codigo de retorno?
		//	015 - Foi autorizado a solicitacao de cancelamento da NFe
		//	030 - Inutiliza??o de numera??o autorizada.
		//	036 - Cancelamento autorizado fora do prazo.
		If ("015" $ aInfRet[1,6]) .Or. ("036" $ aInfRet[1,6]) .Or. ("030" $ aInfRet[1,6])
			aAdd(aInfMonNFe,"1") // foi aprovado
			aAdd(aInfMonNFe,aInfRet[1,6]) // [2] - Codigo de retorno
		//	026 - não foi autorizado a solicitacao de cancelamento da NFe
		ElseIf ("026" $ aInfRet[1,6])
			aAdd(aInfMonNFe,"2") // Não foi aprovado
			aAdd(aInfMonNFe,aInfRet[1,6]) // [2] - Codigo de retorno
		Else
			aAdd(aInfMonNFe,"3") // Pendente (Aguardando do TSS)
			aAdd(aInfMonNFe,"025") // [2] - Codigo de retorno
		EndIf

	EndIf
//
// Tratamento do TSS para NFSe - Nota Fiscal de Servico Eletronica
//
Else
	aInfRet := MonitNFSe(aNFeCancel)
	If Len(aInfRet)> 0
		// Qual foi o codigo de retorno?
		//	222 - Nota Fiscal Substituida
		//	333-101 - Cancelamento do RPS Autorizado
		// Então a nota ja foi autorizada, foi substituida ou foi autorizado
		If UsaColaboracao("3") .And. (("222" $ aInfRet[1,1]) .OR. ("101" $ aInfRet[1,1]) )
			aAdd(aInfMonNFe,"1") // foi aprovado
			aAdd(aInfMonNFe,aInfRet[1,6])
		ElseIf ("222" $ aInfRet[1,9,1,1]) .OR. ("333" $ aInfRet[1,9,1,1])
			aAdd(aInfMonNFe,"1") // foi aprovado
			aAdd(aInfMonNFe,aInfRet[1,9,1,1])

		// Não tem codigo padrão, assume a mensagem abaixo como Não Aprovado
		ElseIf ("Nao foi possivel cancelar o RPS." $ aInfRet[1,9,1,1]) .OR. ("Nao foi possivel cancelar o RPS." $ aInfRet[1,6])
			aAdd(aInfMonNFe,"2") // Não foi aprovado
			aAdd(aInfMonNFe,"026") //
		Else
			aAdd(aInfMonNFe,"3") // Pendente (Aguardando do TSS)
			aAdd(aInfMonNFe,"025") // [2] - Codigo de retorno
		EndIf
	EndIf
EndIf
Return aInfMonNFe

/*/{Protheus.doc} FATCANCTSS
Tranmissão da documento de saida, seja para NFe ou NFSe.
@param cTypeNF,	caracter, Tipo de NF
@param aNFeCancel, array, serie, numero de documento de inicio e fim
@return logico, verdadeiro se transmitido
@author Reynaldo Tetsu Miyashita
@since 06/08/2015
@version 1.0
/*/
Static Function FATCANCTSS(cTypeNF, aNFeCancel)

Local lRetorno 	:= .F.

//
// Tratamento do TSS para NFe - Nota Fiscal Eletronica
//
If cTypeNF == "NFE"
	lRetorno := TransCanc(aNFeCancel,,IsBlind())
	//
	// Tratamento do TSS para NFSe - Nota Fiscal de Servico Eletronica
	//
Else
	lRetorno := EnvCanNFSe(.T.,aNFeCancel)
EndIf
Return lRetorno

/*/{Protheus.doc} Ma521Pend
Consulta dos processsamentos gerados pelo job/schedule FATJOBNFE
@author Reynaldo Tetsu Miyashita
@since 26/11/2014
@version 1.0
/*/
Function Ma521Pend()

// chamada que apresenta janela com os registros da tabela CV8
ProcLogView(cFilAnt,'EXCLUINF',, )
Return

/*/{Protheus.doc} MaFmtHlp
Converte o conteudo do Help que é array para caracter.
@param cHelp
@param cMsgAdic
@return cMsg, mensagem em formato de caracter com o problema e a solução
@author Reynaldo Tetsu Miyashita
@since 26/11/2014
@version 1.0
/*/
Static Function MaFmtHlp(cHelp, cMsgAdic)

Local cMsg		:= ""
Local aHelp	:= {}

DEFAULT cHelp		:= ""
DEFAULT cMsgAdic	:= ""

If !Empty(cHelp)
	cMsg := "Help: "+ cHelp
EndIf
// busca as mensagens de help
aHelp := GetHlpSoluc(cHelp)
If Empty(aHelp[1])
	If !Empty(cMsgAdic)
		cMsg += STR0087 + AllTrim(cMsgAdic)+CHR(13)+CHR(10)	//"Problema: "
	EndIf
Else
	cMsg += STR0087 + AllTrim(aHelp[1])+CHR(13)+CHR(10)	//"Problema: "
	If !Empty(cMsgAdic)
		cMsg += AllTrim(cMsgAdic)+CHR(13)+CHR(10)
	EndIf
EndIf
If !Empty(aHelp[2])
	cMsg += STR0088 + AllTrim(aHelp[2])+CHR(13)+CHR(10)	//"Solução: "
EndIf
Return cMsg

//-------------------------------------------------------------------------
/*/{Protheus.doc} IntegDef
Função para integração via Mensagem Única Totvs na exclusao do documento de saida.
@author  Alison Leite
@version P12.1.22
@since   07/02/2019
/*/
//-------------------------------------------------------------------------
Static Function IntegDef( xEnt, nTypeTrans, cTypeMessage, cVersion, cTransaction, lJSon )
Local aRet 		:= {}

Default lJSon 	:= .F.

If lJSon .And. FindFunction("MATI461O")
	aRet:= MATI461O(xEnt, nTypeTrans, cTypeMessage)
Else
	aRet:= MATI461(xEnt, nTypeTrans, cTypeMessage, cVersion, cTransaction)
Endif
Return aRet

/*/{Protheus.doc} MaRefazSC0
Refaz as reservas na SC0. Apenas para Pedidos originados do modulo SIGALOJA.
@obs Essa função foi duplicada no fonte loja701e para que futuramente seja retirada deste fonte
@return Nulo
@author Varejo
@since 06/10/2015
@version 1.0
/*/
Static Function MaRefazSC0()

LjRefazSC0()
Return

//-------------------------------------------------------------------
/*{Protheus.doc} Ma521AtSA1
Atualiza dados do cadastro do cliente
@author CRM/Faturamento
@since 15/05/2018
@version versao
*/
//-------------------------------------------------------------------
Static Function Ma521AtSA1()

Local aArea		:= GetArea()
Local aAreaSA1	:= SA1->(GetArea())
Local cQuery		:= ""             // Montagem da query
Local cAliasTrb	:= GetNextAlias()// Alias temporario
Local cSGBD		:= TCGetDB() //Banco de dados que esta sendo utilizado
Local cPRICOM		:= ""
Local cULTCOM		:= ""
Local nMCOMPRA	:= 0
Local nMSALDO		:= 0

//Ajusta campo A1_PRICOM
cQuery := "SELECT MIN(F2_EMISSAO) F2EMISSAO FROM"+RetSqlName("SF2")+" SF2"
cQuery += " WHERE "
cQuery += " F2_FILIAL = '"+xFilial("SF2")+"' "
cQuery += " AND F2_CLIENTE = '"+SF2->F2_CLIENTE+"' "
cQuery += " AND F2_DOC <> '"+SF2->F2_DOC+"' "
cQuery += " AND F2_DUPL <> ''"
cQuery += " AND SF2.D_E_L_E_T_ = ' '
cQuery:= ChangeQuery(cQuery)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Realiza a query³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Select(cAliasTrb) > 0
	(cAliasTrb)->(dbCloseArea())
EndIf
dbUseArea(.T., "TOPCONN", TCGenQry(,,cQuery), cAliasTrb, .F., .T.)

If (cAliasTrb)->(!Eof())
	cPRICOM := (cAliasTrb)->F2EMISSAO
EndIf
(cAliasTrb)->(DbCloseArea())

cQuery 	:= ""

//Ajusta campo A1_ULTCOM
cQuery := "SELECT MAX(F2_EMISSAO) F2EMISSAO FROM"+RetSqlName("SF2")+" SF2"
cQuery += " WHERE "
cQuery += " F2_FILIAL = '"+xFilial("SF2")+"' "
cQuery += " AND F2_CLIENTE = '"+SF2->F2_CLIENTE+"' "
cQuery += " AND F2_DOC <> '"+SF2->F2_DOC+"' "
cQuery += " AND F2_DUPL <> ''"
cQuery += " AND SF2.D_E_L_E_T_ = ' '
cQuery:= ChangeQuery(cQuery)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Realiza a query³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Select(cAliasTrb) > 0
	(cAliasTrb)->(dbCloseArea())
EndIf
dbUseArea(.T., "TOPCONN", TCGenQry(,,cQuery), cAliasTrb, .F., .T.)

If (cAliasTrb)->(!Eof())
	cULTCOM := (cAliasTrb)->F2EMISSAO
EndIf
(cAliasTrb)->(DbCloseArea())

cQuery 	:= ""

If cSGBD $ "ORACLE|DB2"
	cQuery := " SELECT E1_NUM, SUM(E1_VALOR) VALOR FROM "+RetSqlName("SE1")+" SE1"
Else
	cQuery := " SELECT TOP 1 E1_NUM, SUM(E1_VALOR) VALOR FROM "+RetSqlName("SE1")+" SE1"
EndIf
cQuery += " WHERE "
cQuery += " E1_FILIAL = '"+xFilial("SE1")+"' "
cQuery += " AND E1_CLIENTE = '"+SF2->F2_CLIENTE+"' "
cQuery += " AND E1_NUM <> '"+SF2->F2_DOC+"' "
cQuery += " AND E1_TIPO NOT IN ('"+MVRECANT+"') "
cQuery += " AND E1_TIPO NOT IN ('"+MV_CRNEG+"') "
cQuery += " AND SE1.D_E_L_E_T_ = ' '

If cSGBD $ "ORACLE"
	cQuery += " AND ROWNUM = 1"
EndIf

cQuery += " GROUP BY E1_NUM"
cQuery += " ORDER BY SUM(E1_VALOR) DESC"

If cSGBD $ "DB2"
	cQuery += " FETCH FIRST 1 ROWS ONLY "
EndIf

cQuery:= ChangeQuery(cQuery)

If Select(cAliasTrb) > 0
	(cAliasTrb)->(dbCloseArea())
EndIf
dbUseArea(.T., "TOPCONN", TCGenQry(,,cQuery), cAliasTrb, .F., .T.)

If (cAliasTrb)->(!Eof())
	nMCOMPRA := (cAliasTrb)->VALOR
EndIf
(cAliasTrb)->(DbCloseArea())

cQuery 	:= ""

If cSGBD $ "ORACLE|DB2"
	cQuery := " SELECT E1_NUM, SUM(E1_VALOR) VALOR FROM "+RetSqlName("SE1")+" SE1"
Else
	cQuery := " SELECT TOP 1 E1_NUM, SUM(E1_VALOR) VALOR FROM "+RetSqlName("SE1")+" SE1"
EndIf
cQuery += " WHERE "
cQuery += " E1_FILIAL = '"+xFilial("SE1")+"' "
cQuery += " AND E1_CLIENTE = '"+SF2->F2_CLIENTE+"' "
cQuery += " AND E1_NUM <> '"+SF2->F2_DOC+"' "
cQuery += " AND E1_TIPO NOT IN ('"+MVRECANT+"/"+MV_CRNEG+"/"+MVABATIM+"/"+MVIRABT+"/"+MVFUABT+"/"+MVINABT+"/"+MVISABT+"/"+MVPIABT+"/"+MVCFABT+"') "
cQuery += " AND SE1.D_E_L_E_T_ = ' '

If cSGBD $ "ORACLE"
	cQuery += " AND ROWNUM = 1"
EndIf

cQuery += " GROUP BY E1_NUM"
cQuery += " ORDER BY SUM(E1_VALOR) DESC"

If cSGBD $ "DB2"
	cQuery += " FETCH FIRST 1 ROWS ONLY "
EndIf

cQuery:= ChangeQuery(cQuery)

If Select(cAliasTrb) > 0
	(cAliasTrb)->(dbCloseArea())
EndIf
dbUseArea(.T., "TOPCONN", TCGenQry(,,cQuery), cAliasTrb, .F., .T.)

If (cAliasTrb)->(!Eof())
	nMCOMPRA := (cAliasTrb)->VALOR
EndIf
(cAliasTrb)->(DbCloseArea())

cQuery 	:= ""

cQuery := " SELECT SUM(E1_SALDO) SALDO FROM "+RetSqlName("SE1")+" SE1"
cQuery += " WHERE "
cQuery += " E1_FILIAL = '"+xFilial("SE1")+"' "
cQuery += " AND E1_CLIENTE = '"+SF2->F2_CLIENTE+"' "
cQuery += " AND E1_NUM <> '"+SF2->F2_DOC+"' "
cQuery += " AND E1_TIPO NOT IN ('"+MVRECANT+"/"+MV_CRNEG+"/"+MVABATIM+"/"+MVIRABT+"/"+MVFUABT+"/"+MVINABT+"/"+MVISABT+"/"+MVPIABT+"/"+MVCFABT+"') "
cQuery += " AND SE1.D_E_L_E_T_ = ' '

cQuery:= ChangeQuery(cQuery)

If Select(cAliasTrb) > 0
	(cAliasTrb)->(dbCloseArea())
EndIf
dbUseArea(.T., "TOPCONN", TCGenQry(,,cQuery), cAliasTrb, .F., .T.)

If (cAliasTrb)->(!Eof())
	nMSALDO := (cAliasTrb)->SALDO
EndIf
(cAliasTrb)->(DbCloseArea())

//Grava dados na SA1
SA1->(DbsetOrder(1))//Indice A1_FILIAL+A1_COD+A1_LOJA
If SA1->(DbSeek(xFilial("SA1")+SF2->F2_CLIENTE+SF2->F2_LOJA))
	RecLock("SA1",.F.)
	SA1->A1_PRICOM	:= StoD(cPRICOM)
	SA1->A1_ULTCOM	:= StoD(cULTCOM)
	SA1->A1_MCOMPRA	:= nMCOMPRA
	SA1->A1_MSALDO	:= nMSALDO
	SA1->(MsUnlock())
EndIf

RestArea(aAreaSA1)
RestArea(aArea)
Return

/*/{Protheus.doc} M521POSDOC
//Busca la posición del documento en tabla de movimientos bancarios (SE5)
@author arodriguez
@since 13/03/2019
@version 1.0
@return ${nPos}, ${Posicion del resgitro de movimiento bancario}
@param cSerie, characters, Serie del anticipo
@param cDoc, characters, Folio del anticipo
@param cParcelc, characters, Parcela del anticipo
@param cTipo, characters, Tipo del anticipo
@param cCliente, characters, Cliente de documento de anticipo
@param cLoja, characters, Tienda de documento de anticipo
@param aDocCan, array, Arreglo con los datos del documento que compensó el anticipo
@type function
/*/
Static Function M521POSDOC(cSerie, cDoc, cParcel, cTipo, cCliente, cLoja, aDocCan)

Local nPos       := 0
Local aBaixa     := {}
Local aArea      := getArea()
Local nP         := 0
Local cTipoDoc   := "VL /V2 /BA /RA /CP /LJ /" + MV_CRNEG
Local cTpBaja    := ""
Local cFilSE5    := xFilial("SE5")

SE5->(dbSetOrder(2)) //E5_FILIAL+E5_TIPODOC+E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+DtoS(E5_DATA)+E5_CLIFOR+E5_LOJA+E5_SEQ

For nP := 1 To Len(cTipoDoc) Step 4
	cTpBaja := AllTrim(Substr(cTipoDoc, nP, 3))
	If SE5->(MsSeek(cFilSE5 + cTpBaja + cSerie + cDoc + cParcel + cTipo))
		While SE5->(!Eof()) .And. ;
		       cFilSE5 + cTpBaja + cSerie + cDoc + cParcel + cTipo == ;
		       SE5->E5_FILIAL + SE5->E5_TIPODOC + SE5->E5_PREFIXO + SE5->E5_NUMERO + SE5->E5_PARCELA + SE5->E5_TIPO
		    If SE5->E5_TIPODOC <> "ES"
			    nPos++
			    If TRIM(SE5->E5_DOCUMEN) == TRIM(aDocCan[1] + aDocCan[2] + aDocCan[3] + aDocCan[4] + aDocCan[5])
			    	aAdd(aBaixa, {nPos})
			    EndIf
		    EndIf
			SE5->(DbSkip())
		EndDo
	EndIf
Next nP
RestArea(aArea)
Return aBaixa

/*/{Protheus.doc} PROTCFGADT
//
@author Financeiro (SIGAFIN)
@since Mar/2020
@version 1.0
@return aRet
/*/
Static Function ProtCfgAdt()

Local aRet := { {FwModeAccess('FIE',1),;
                 FwModeAccess('FIE',2),;
                 FwModeAccess('FIE',3),;
                 FWSIXUtil():ExistIndex('FIE', '4'),;
                 FWSIXUtil():ExistIndex('FIE', '5')},;
                 {FwModeAccess('FR3',1),;
                 FwModeAccess('FR3',2),;
                 FwModeAccess('FR3',3),;
                 FWSIXUtil():ExistIndex('FR3', '8'),;
                 FWSIXUtil():ExistIndex('FR3', '9')},;
                 {FwModeAccess('SE1',3),;
                 FwModeAccess('SE2',3)} }
Return(aRet)

/*/{Protheus.doc} FatLibMetric
Função utilizada para validar a data da LIB para ser utilizada na Telemetria
@type       Function
@author     CRM/Faturamento
@since      Maio/2021
@version    12.1.27
@return     Nil, Nenhum
/*/
Static Function FatLibMetric()

Local lNFeCancel := .F.
Local lNFSeCanc	 := .F.

If __lMetric == Nil
	__lMetric := FWLibVersion() >= "20210517"
EndIf

If __lMetric
	//Telemetria - Tipo de Exclusão de Notas Fiscais de Saída - MV_PAR04 - "Retornar Ped.Venda ? 1-Carteira ou 2-Apto a Faturar
	FwCustomMetrics():setUniqueMetric("MATA521", "faturamento-protheus_tipo-exclusao-nota-saida_total", AllTrim(Str(MV_PAR04)), /*dDateSend*/, /*nLapTime*/,"MATA521")

	lNFeCancel := SuperGetMV('MV_CANCNFE',.F.,.F.)
	lNFSeCanc  := SuperGetMV('MV_CANNFSE',.F.,.F.)

	//Telemetria - MV_CANCNFE - Cancelamento de Nota Fiscal Eletrônica
	FwCustomMetrics():setUniqueMetric("MATA521","faturamento-protheus_utilizacao-cancelamento-notas-fiscais-eletronica_total",IIf(lNFeCancel,".T.",".F."),/*dDateSend*/,/*nLapTime*/,"MATA521")

	//Telemetria - lNFSeCanc - Cancelamento de Nota Fiscal Serviço
	FwCustomMetrics():setUniqueMetric("MATA521","faturamento-protheus_utilizacao-cancelamento-notas-fiscais-servico_total",IIf(lNFSeCanc,".T.",".F."),/*dDateSend*/,/*nLapTime*/,"MATA521")
EndIf

Return Nil

/*/{Protheus.doc} FtMultLock
Tenta realizar o lock em multiplos registros de um determinado alias informado
@type       Function
@param      aKey  , array    , Chaves a serem bloqueados na tabela informada em cAlias
@param      cAlias, Character, Nome da tabela
@param      nOrder, Numerico , Ordem do indice da tabela para busca
@author     Squad CRM/Faturamento
@since      Mai/2021
@version    12.1.27
@return     lLock, Lógico, .T. = Sucesso no lock de todos os registros
/*/
Function FtMultLock(aKey,cAlias,nOrder)

	Local nKey     := 0
	Local nKeyBack := 0
	Local nQtKey   := 0
	Local nLock    := 0
	Local nTry     := 0
	Local lLock    := .T.
	Local aArea    := ''
	Local nSleep   := 2000
	Local nTimeOut := 10000
	Local lBlind   := ISBlind()
	Local oDlg     := Nil
	Local oTimer   := Nil
	Local aArrBut  := {}
	Local aArrSay  := {}
	Local lNewTry  := .F.

	Default cAlias := 'SB2'
	Default aKey   := {}
	Default nOrder := 1

	nQtKey := Len(aKey)

	aArea := (cAlias)->(GetArea())

	AAdd(aArrSay, STR0096 + cAlias + ".")	// #"Não foi possivel bloquear os registros da tabela "
	AAdd(aArrSay, STR0097 )	// #"Para repetir a tentativa de bloqueio destes registros clique em Ok."
	AAdd(aArrSay, STR0098 )	// #"Caso deseje cancelar a exclusão do Documento de Saída clique em Cancelar."
	AAdd(aArrSay, STR0099 + AllTrim(cValToChar(nTimeOut/1000)) + STR0100 ) // #"Se não selecionar nenhuma opção em " #" segundos, a exclusão será cancelada."

	AAdd(aArrBut, {1, .T., {|| lNewTry := .T., oDlg:End()}}) // Ok
	AAdd(aArrBut, {2, .T., {|| lNewTry := .F., oDlg:End()}}) // Cancelar

	(cAlias)->(DbSetOrder(nOrder))
	While nLock < nQtKey
		For nKey := 1 to nQtKey
			If (cAlias)->(DbSeek(xFilial(cAlias)+aKey[nKey])) .And. (cAlias)->(SimpleLock())
				nLock++
			Else
				nLock := 0
				//Libera registros ja locados
				For nKeyBack := 1 to nKey-1
					If (cAlias)->(DbSeek(XFilial(cAlias)+aKey[nKeyBack]))
						(cAlias)->(MsRUnLock())
					EndIf
				Next
				If !lBlind
					nTry++
					// A cada 10 tentativas pergunta ao usuario se continua o processamento
					If (nTry % 10 == 0)
						nTry:=0

						lNewTry := .F.
						oDlg   := FtFormMsg(STR0101, aArrSay, aArrBut) // #"Tentativa de bloqueio de registros"
						oTimer := TTimer():New( nTimeOut, {|| oDlg:End()}, oDlg)
						oDlg:Activate(,,,.T.,,,{|| oTimer:Activate()})

						If !lNewTry
							lLock := .F.
							Exit
						EndIf
					Else
						Sleep(nSleep)
						Exit
					EndIf
				EndIf
			EndIf
		Next
		If !lLock
			Exit
		EndIf
	EndDo

	(cAlias)->(RestArea(aArea))

	FwFreeObj(aArea)
	FwFreeObj(aArrSay)
	FwFreeObj(aArrBut)
	FwFreeObj(oTimer)

Return(lLock)

/*/{Protheus.doc} FtFormMsg
Interface para apresentar mensagem ao usuario com as opcoes de acao por meio de botoes
@type       Function
@param      cTitle   , Character    , Titulo da janela
@param      aSays    , Array        , Array com os textos de cada linha a ser apresentado
@param      aButtons , Array        , Array com os botoes a serem apresentado na tela
				aButtons = Array com bottoes
				aButtons[i,1] = Tipo de botao
				aButtons[i,2] = Tipo de enabled
				aButtons[i,3] = bAction
@param      nAltura  , Number       , Altura do Form em Pixel (Default 250)
@param      nLargura , Number       , Largura do Form em Pixel (Default 520)
@author     Squad CRM/Faturamento
@since      Mai/2021
@version    12.1.27
@return     oDlg, Dialog, Objeto da tela da mensagem criada pela função
/*/

#DEFINE LARGURA_DO_SBUTTON 32

Static Function FtFormMsg(cTitle, aSays, aButtons, nAltura, nLargura)

Local nButtons    := Len(aButtons)
Local nSays       := Len(aSays)
Local oSay        := Nil
Local nSay        := 0
Local nButton     := 0
Local nTop        := 0
Local nType       := 0
Local lEnabled    := .F.
Local oFormPai    := Nil
Local oFont       := Nil
Local nLarguraBox := 0
Local nAlturaBox  := 0
Local nLarguraSay := 0
Local cTextSay    := ""
Local oBtn        := Nil
Local oDlg        := Nil

Default aSays    := {}
Default aButtons := {}
Default nAltura  := 250
Default nLargura := 520

// Numero maximo de linhas
If (nSays > 7)
	nSays := 7
EndIf

// Numero maximo de botoes
If (nButtons > 5)
	nButtons := 5
EndIf

oFormPai:= oMainWnd

DEFINE FONT oFont NAME "Arial" SIZE 0, -11

DEFINE MSDIALOG oDlg TITLE cTitle FROM 0,0 TO nAltura,nLargura OF oFormPai PIXEL

// Preparar a moldura no fomulario
nAlturaBox:= (nAltura-60)/2
nLarguraBox:= (nLargura-20)/2
@ 10,10 TO nAlturaBox,nLarguraBox OF oDlg PIXEL

// Preparar os textos informativos
nTop:=20
nLarguraSay:= nLarguraBox-25
For nSay := 1 to nSays
	cTextSay:= "{||'"+aSays[nSay]+"'}"
	oSay := TSay():New(nTop, 20, MontaBlock(cTextSay),oDlg,, oFont, .F., .F., .F., .T.,,, nLarguraSay, 10, .F., .F., .F., .F., .F.)
	nTop+= 10
Next nSay

// Preparar os botoes
nPosIni:= ((nLargura-20)/2) - (nButtons * LARGURA_DO_SBUTTON )
nAlturaButton:= nAlturaBox+10

For nButton := 1 to nButtons
	nType:= aButtons[nButton,1]
	lEnabled:= aButtons[nButton,2]
	Default lEnabled:= .T.

	If lEnabled
		oBtn := SButton():New(nAlturaButton, nPosIni, nType , aButtons[nButton,3], oDlg, .T., ,)
	Else
		oBtn := SButton():New(nAlturaButton, nPosIni, nType ,                    , oDlg, .F., ,)
	EndIf

	oBtn:cCaption := ""
	nPosIni += LARGURA_DO_SBUTTON
Next nButton

Return oDlg


/*/{Protheus.doc} LimpaSD9
	Limpa os campo da tabela SD9 para poder utlizar a Numeração do documento de Saida novamente.
	@type  Function
	@author Rene Julian
	@since 01/06/2022
	@version P12133
	@param
	@return
/*/
Static Function LimpaSD9()
Local cControlN := 	SuperGetMV("MV_TPNRNFS",.F.,.F.) // Parametro de controle de Numeração.
Local aArea     := GetArea()
Local aAreaSD9  := SD9->(GetArea())
Local lCGC      := SuperGetMV("MV_FATGCGC",.F.,.F.)  // Controle de numeração pelo CNPJ
Local lD9DocExcl:= SD9->(ColumnPos("D9_DOCEXCL")) > 0

If cControlN == "3" // A limpesa só deve ser feita se estiver usando o controle pela SD9
	DbSelectArea("SD9")
	DbSetOrder(2) //D9_FILIAL+D9_SERIE+D9_DOC+DTOS(D9_DTUSO)
	If DbSeek(xFilial("SD9")+SF2->F2_SERIE+SF2->F2_DOC+DtoS(SF2->F2_EMISSAO) )
		If Empty(SD9->D9_NSU)
			RecLock("SD9",.F.)
			If lCGC
				D9_FILIAL  := ''
			EndIf
			D9_HORA    := ''
			D9_DTUSO   := CtoD("  /  /    ")
			D9_USUARIO := ''
			D9_FILORI  := ''
			If lD9DocExcl
				D9_DOCEXCL := "S"
			EndIf
			MsUnLock()
		EndIf
	EndIf
	RestArea(aAreaSD9)
	RestArea(aArea)
EndIf

Return
