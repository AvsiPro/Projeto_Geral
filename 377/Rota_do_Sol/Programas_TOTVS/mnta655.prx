#INCLUDE "MNTA655.ch"
#INCLUDE "Protheus.ch"
#INCLUDE "DBINFO.CH"

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA655

Cadastro de Notas Fiscais dos Abastecimentos

@author Heverson Vitoreti
@since 27/01/2006
@version 1.0
@param cBemClick, carater, define o código do bem quando rotina chamada pelo
click da direita
@param  aDadosAut, Array   , Estrutura de dados para execução automática.
@param  nOpcAut  , Numérico, Opção a ser executada.
@sample MNTA655
@return Nil
/*/
//---------------------------------------------------------------------
Function MNTA655( cBemClick, aDadosAut, nOpcAut )

    //Guarda conteudo e declara variaveis padroes
	Local aNGBEGINPRM

	If !FindFunction( 'MNTAmIIn' ) .Or. MNTAmIIn( 95 )

		aNGBEGINPRM := NGBEGINPRM()
		
		Default cBemClick := Space(TamSx3("T9_CODBEM")[1])

		Private cUsaInt3   := AllTrim(SuperGetMv("MV_NGMNTES",.F.,"N"))  //Integracao MNT x EST (S/N)
		Private cConEst    := AllTrim(SuperGetMv("MV_ESTHOME",.F.,"N"))  //Momento em que o estoque sera debitado (S/C/N)
		Private cGeraPrev  := AllTrim(SuperGetMv("MV_NGGERPR"))  //Gera OS Prev. automatic. quando manut. vencida (S=Sim; C=Confirmacao; A=Abastecimento)
		Private cMotGer    := AllTrim(SuperGetMv("MV_NGMOTGE"))  //CPF do motorista generico
		Private cMotorista := Space(06)
		Private oPanel22
		Private lRotAbast  := .T.
		Private lNaoAlt656 := .T.

		Private cUser      := ""
		Private cComb      := " "
		Private cPosto     := ""
		Private cLoja      := ""
		Private cTanque    := ""
		Private cFilBem    := "  "
		Private cCCusto    := " "
		Private cCentrab   := " "
		Private lPrev      := .T.
		Private lPosIntAlt := .T.
		Private lValTot    := .T.
		Private lBomba     := .F.
		Private lTanque    := .F.
		Private lValuni    := .F.
		Private lExcluiTQN := .F.
		Private TipoAcom   := .F.
		Private TipoAcom2  := .F.
		Private cCadastro  := OemtoAnsi(STR0006) //"Digitaçao de Nota Fiscal de Abastecimento"
		Private nTipE      := 1
		Private nCapTan    := 0
		Private aCHKDEL    := {}
		Private aRetTPN    := {}
		Private aKms       := {}
		Private aRotina    := MenuDef()
		Private bNGGRAVA
		Private aRelac

		Private aIndTQN    := {}
		Private cRetF655   := " "
		Private lRegVir    := .F.
		Private nDIfVir    := 0
		Private cTabCC     := IIf(CtbInUse(), "CTT", "SI3")
		Private cModoCC    := NGSX2MODO(cTabCC)
		Private cModoDA4   := NGSX2MODO("DA4")
		Private cModoSB1   := NGSX2MODO("SB1")
		Private cModoSB2   := NGSX2MODO("SB2")
		Private cModoSD3   := NGSX2MODO("SD3")
		Private cModoST9   := NGSX2MODO("ST9")
		Private cModoSTC   := NGSX2MODO("STC")
		Private cModoSTZ   := NGSX2MODO("STZ")
		Private cModoTQS   := NGSX2MODO("TQS")
		Private cModoTT8   := NGSX2MODO("TT8")
		Private cModoTQI   := NGSX2MODO("TQI")
		Private cModoTQJ   := NGSX2MODO("TQJ")
		Private cModoTQN   := NGSX2MODO("TQN")
		Private nTamTable  := Len(cArqTab)
		Private aFilEmp    := {}
		Private tipoins    := 'E'
		Private lSegCont   := NGCADICBASE("TQN_POSCO2","A","TQN",.F.)
		Private lComboio   := NGCADICBASE("TQF_COMBOI","A","TQF",.F.)
		Private vRastro    := {}
		Private cFiltroTop := ""
		Private cFiliST9   := ""
		Private cFilTQN    := ""

		Private lAleat     := .F.

		Private cPrvBemClk := cBemClick
		// Usado para controle de bem que deve ser liberado
		// quando o usuário altera o código do veículo do abastecimento
		Private cOldBemLock := ""

		//Variaveis utilizadas para criar as tabelas temporárias relacionadas a contador.
		Private oTmpTblSTC := Nil
		Private oTpTbTRBF  := Nil
		Private oTmpTbl    := Nil
		Private cTRBF      := GetNextAlias()
		Private cTRBS      := GetNextAlias()
		Private CTRBEixo   := GetNextAlias()

		aARALTC := IIf(nTipE = 1,{'STP','STP->TP_FILIAL' ,'STP->TP_CODBEM' ,'STP->TP_DTLEITU','STP->TP_HORA',;
										'STP->TP_POSCONT','STP->TP_ACUMCON','STP->TP_VARDIA' ,'STP->TP_VIRACON'},;
								{'TPP','TPP->TPP_FILIAL','TPP->TPP_CODBEM','TPP->TPP_DTLEIT','TPP->TPP_HORA',;
										'TPP->TPP_POSCON','TPP->TPP_ACUMCO','TPP->TPP_VARDIA','TPP->TPP_VIRACO'})

		aARABEM := IIf(nTipE = 1,{'ST9','ST9->T9_POSCONT','ST9->T9_CONTACU','ST9->T9_DTULTAC','ST9->T9_VARDIA'},;
								{'TPE','TPE->TPE_POSCON','TPE->TPE_CONTAC','TPE->TPE_DTULTA','TPE->TPE_VARDIA'})

		cUser    := SubStr(cUsuario,7,15)
		aRelac   := {{"TQN_AUTO"  ,"'2'"},{"TQN_USUARI","cUser"},{"TQN_DTDIGI","dDatabase"}}

		If !Empty(cMotGer)
			DbSelectArea("DA4")
			DbSetOrder(03)
			If DbSeek(xFilial("DA4")+cMotGer)
				cMotorista := DA4->DA4_COD
			EndIf
			DbSetOrder(01) //usado no X3_INIBRW
		EndIf

		If aDadosAut != Nil
			Private aRotAuto := aClone( aDadosAut )
			MBrowseAuto( nOpcAut, aRotAuto, 'TQN', .T. )
		Else
			If ExistBlock("MNTA6554")
				cFiltroTop := ExecBlock("MNTA6554",.F.,.F.)
			EndIf
			If !Empty(cBemClick)
				If !Empty(cFiltroTop)
					cFiltroTop += " AND TQN_FROTA = '" + cBemClick + "'"
				Else
					cFiltroTop += "TQN_FROTA = '" + cBemClick + "'"
				EndIf
			EndIf
			DbSelectArea("TQN")
			DbSetOrder(15)
			mBrowse(6,1,22,75,"TQN",,,,,,,,,,,,,,cFiltroTop)
		EndIf

		//Retorna conteudo de variaveis padroes
		NGRETURNPRM(aNGBEGINPRM)
	
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MNA655BG
Validações ao Gravar em Incluir

@author  Heverson Vitoreti
@since   27/01/06
@version P11/P12
@param   nRecno, Numérico, Número do recno
/*/
//-------------------------------------------------------------------
Function MNA655BG(nRecno)

    Local aRep       := {}
    Local aArea      := GetArea()
    Local cFROTA655  := M->TQN_FROTA + Space(Len(ST9->T9_CODBEM)-Len(M->TQN_FROTA))
    Local cUM
    Local lTemAfer   := .F.
    Local lRet1Cont  := .F.
    Local lRet2Cont  := .F.
	Local lVerDic    := IIf("GETSXENUM" $ NGSEEKDIC("SX3", "TQN_NABAST", 2, "X3_RELACAO"), .F., .T.) // Variavel que garante que Ajuste foi implementado no MNTUTIL
    Local cFilTQF    := cFilAnt
    Local cTipoPosto := NGSEEK("TQF",M->TQN_POSTO+M->TQN_LOJA,1,"TQF_TIPPOS",xFilial("TQF",cFilTQF))
	Local aValAbast  := {}
	Local cCtCusSD3  := ""
	Local cCCAnt     := ""
	Local LQuitTrans := .F. // Verifica se deve continuar a transação (Begin/End transaction)
	Local lCompT9TQN := Len( AllTrim( xFilial( "ST9" ) ) ) == Len( AllTrim( xFilial( "TQN" ) ) )
	Local lRPORel17  := GetRPORelease() >= '12.1.017'
	Local lValCont2  := .F.
	Local aAreaTQN   := TQN->(GetArea())
	Local nY         := 0
	Local nX         := 0
	Local l655Auto   := Type( 'aRotAuto' ) != 'U'
	Local aValRet    := {}  // Array para tratar retorno de erros da função NGVALIVARD
	Local aVldMNT    := {}  // Utilizado para informar qual manutenção não irá gerar O.S. automatica
	Local lGerOsAut  := .T. // Utilizado para validar se a manuteção irá gerar O.S. automatica
	Local lCon1Vez          // Definse se está sendo executado pelo WS( Utilizado na geração de O.S. Automática )
	Local xExecSD3
	Local aGerOSAUT  := { .T., .T. } // Variável utilizada para definir se deverá ser gerada O.S. automática por contador
	
    Private nDifCont  := 0
    Private nAcum655  := 0
    Private nAcu6552  := 0
    Private lAfericao := IIf(SuperGetMv("MV_NGMNTAF",.F.,"2") == "1",.T.,.F.)//Verifica parametro que indica se deve validar com afericao

    If !MNA655CV("DT")
    	LQuitTrans := .T.
    EndIf

    If lAfericao .And. Inclui .And. !LQuitTrans
    	//Verifica a aferição da bomba
    	DbSelectArea("TQL")
    	DbSetOrder(1)
    	If DbSeek(xFilial("TQL")+M->TQN_POSTO+M->TQN_LOJA+M->TQN_TANQUE+M->TQN_BOMBA+DTOS(M->TQN_DTABAS))
    		While !Eof() .And. TQL->TQL_FILIAL + TQL->TQL_POSTO + TQL->TQL_LOJA + TQL->TQL_TANQUE+TQL->TQL_BOMBA + DTOS(TQL->TQL_DTCOLE) ==;
							   xFilial("TQL")  +   M->TQN_POSTO +   M->TQN_LOJA +   M->TQN_TANQUE+  M->TQN_BOMBA + DTOS(M->TQN_DTABAS)

    			If M->TQN_HRABAS > TQL->TQL_HRINIC .And. Empty(TQL->TQL_HRFIM)
    				lTemAfer := .T.
    			ElseIf M->TQN_HRABAS > TQL->TQL_HRINIC .And. !Empty(TQL->TQL_HRFIM) .And. M->TQN_HRABAS < TQL->TQL_HRFIM
    				lTemAfer := .T.
    			EndIf
    			TQL->(dbSkip())
    		End
    	EndIf
    	If !lTemAfer .And. TQF->TQF_TIPPOS == "2" // Se for igual a Posto Interno.
    		// "ATENÇÃO"###"Tanque/Bomba não possui aferição para data do abastecimento."###
			// "Inclua uma aferição para a mesma data e com hora infeior ao abastecimento ou selecione um Tanque/Bomba aferido."
			HELP( ' ', 1, STR0007,, STR0158, 2, 0,,,,,, { STR0159 } )
    		LQuitTrans  := .T.
    	EndIf
    EndIf

    If !LQuitTrans .And. cConEst != "N"
    	If !Inclui .And. Altera
    		If !Empty(vDadoAtu[7])
    			cFilTQF := MNT655FTQF( StoD(vDadoAtu[3]) , vDadoAtu[7] , vDadoAtu[6] ) //Data / Numseq / Quantidade
    		EndIf
    	EndIf
    EndIf

    DbSelectArea("TQN")
    nRecno := Recno()

    If !LQuitTrans .And. M->TQN_HRABAS == "  :  " .Or. Empty(M->TQN_HRABAS)
    	HELP(" ",1,"OBRIGAT",,NGSEEKDIC("SX3","TQN_HRABAS",2,"X3_TITULO")+Space(50),03)
    	LQuitTrans := .T.
    EndIf

    //Quando Posto Interno, codigo da bomba e' obrigatorio para gravar historico TTV
    If !LQuitTrans .And. Empty(M->TQN_BOMBA) .And. cTipoPosto == "2"
    	HELP(" ",1,"OBRIGAT",,NGSEEKDIC("SX3","TQN_BOMBA",2,"X3_TITULO")+Space(50),03)
    	LQuitTrans := .T.
    EndIf

    //Valida se foi inicializado Historico do Contador da Bomba
    If !LQuitTrans .And. INCLUI .And. M->TQN_HRABAS != "  :  " .And. !Empty(M->TQN_DTABAS) .And. !Empty(M->TQN_TANQUE) .And. !Empty(M->TQN_BOMBA)
    	DbSelectArea("TQF")
    	DbSetOrder(1)
    	DbSeek(xFilial("TQF",cFilTQF)+M->TQN_POSTO+M->TQN_LOJA)
    	If TQF->TQF_TIPPOS == '2'
    		lTTV := .F.
    		DbSelectArea("TTV")
    		DbSetOrder(1)
    		If DbSeek(xFilial("TTV")+M->TQN_POSTO+M->TQN_LOJA+M->TQN_TANQUE+M->TQN_BOMBA)
    			If TTV->TTV_DATA < M->TQN_DTABAS .Or. (TTV->TTV_DATA == M->TQN_DTABAS .And. TTV->TTV_HORA < M->TQN_HRABAS)
    				lTTV := .T.
    			EndIf
    		EndIf

    		If !lTTV
				// "Inclusão não permitida pois não existe histórico do Contador da Bomba com Data/Hora inferior a informada."
  				// "Informe um contador inicial no cadastro de Tanque/Bomba."
				HELP( ' ', 1, STR0007,, STR0141, 2, 0,,,,,, { STR0142 } )
    			LQuitTrans := .T.
    		EndIf

    		//verifica os abastecimentos do mesmo Posto/Loja/Tanque/Bomba
    		If !LQuitTrans .And. !NGVALABAST(M->TQN_POSTO,M->TQN_LOJA,M->TQN_TANQUE,M->TQN_BOMBA,M->TQN_DTABAS,M->TQN_HRABAS,.F.,.F.)
    			LQuitTrans := .T.
    		EndIf

    		//verifica historico de contador da Bomba
    		If !LQuitTrans .And. NGVDHBomba(M->TQN_POSTO,M->TQN_LOJA,M->TQN_TANQUE,M->TQN_BOMBA,M->TQN_DTABAS,M->TQN_HRABAS,"'2'")
    			// "Já existe uma aferição com data/hora superior a informada."
    			// "Exclua as Aferições cadastradas com data/hora superior ou altere a data/hora deste abastecimento."
				HELP( ' ', 1, STR0007,, STR0139, 2, 0,,,,,, { STR0140 } )
    			LQuitTrans := .T.
    		EndIf
    	EndIf
    EndIf


    //Verifica se Data/Hora do abastecimento é valida, de acordo com o parametro MV_MNTQDAB, que indica a data/hora limite para digitação de abastecimento.
    aRetDtPar := NgDtAbas()
    If !LQuitTrans .And. aRetDtPar[3]
    	If ValType(aRetDtPar[2]) == "C"
    		If DtoS(M->TQN_DTABAS)+M->TQN_HRABAS <  DtoS(aRetDtPar[1])+aRetDtPar[2]
				//"Nenhuma movimentação de abastecimento poderá ser processada antes da data/hora: "
				HELP( ' ', 1, STR0007,, STR0132 + DtoC( aRetDtPar[ 1 ] ) + " " + aRetDtPar[ 2 ] + ".", 2, 0,,,,,, /*Solucao*/)
    			LQuitTrans := .T.
    		EndIf
    	Else
    		
			If M->TQN_DTABAS < aRetDtPar[1]
				
				// Nenhuma movimentação de abastecimento poderá ser processada antes da data: XX/XX/XXXX.
				HELP( ' ', 1, STR0007, , STR0133 + DToC( aRetDtPar[ 1 ] ) + '.', 2, 0 )
				LQuitTrans := .T.
    		
    		EndIf
    	
    	EndIf
   
    EndIf

    If !LQuitTrans .And. cConEst != "N" .And. TQF->TQF_TIPPOS == "2" .And. Empty( M->TQN_TANQUE )
		//"Para abastecimentos em Postos Internos"###"é necessário informar o código do Tanque."###"ATENÇÃO"
		HELP( ' ', 1,STR0007,, STR0105 +CHR( 13 ) + STR0106, 2, 0,,,,,, /*Solucao*/)
		LQuitTrans := .T.
    EndIf

    //Ponto de Entrada - Validacao Personalizada ao Confirmar
    If !LQuitTrans .And. ExistBlock("MNTA6553")
    	If !ExecBlock( 'MNTA6553', .F., .F. )
    		LQuitTrans := .T.
    	EndIf
    EndIf

	If !LQuitTrans

		If !lExcluiTQN
			If cConEst == "S"
				DbSelectArea("TQF")
				DbSetOrder(1)
				DbSeek(xFilial("TQF",cFilTQF)+M->TQN_POSTO+M->TQN_LOJA)
				If TQF->TQF_TIPPOS == "2"
					cProduto := NGSEEK('TQI',M->TQN_POSTO+M->TQN_LOJA+M->TQN_TANQUE,1,'TQI->TQI_PRODUT',cFilTQF)
					DbSelectArea("SB2")
					DbSetOrder(01)
					If !DbSeek(xFilial("SB2",cFilTQF)+cProduto+M->TQN_TANQUE)
						CriaSB2(cProduto,M->TQN_TANQUE)
					EndIf
				EndIf
			EndIf
		EndIf

		If !Empty(M->TQN_PLACA)
			fBscBemPla(M->TQN_PLACA)
			cFilbem  := ST9->T9_FILIAL
			cCCusto  := ST9->T9_CCUSTO
			cCentrab := ST9->T9_CENTRAB
		Else
			dbSelectArea("ST9")
			dbSetOrder(1)
			If dbSeek(xFilial("ST9") + M->TQN_FROTA)
				cFilbem  := ST9->T9_FILIAL
				cCCusto  := ST9->T9_CCUSTO
				cCentrab := ST9->T9_CENTRAB
			EndIf
		EndIf

    	aRetTPN := MNT655TPN( M->TQN_FROTA,M->TQN_DTABAS,M->TQN_HRABAS,M->TQN_PLACA,xFilial( "ST9" ) )

		If !Empty(aRetTPN[1]) .And. !Empty(aRetTPN[2])
			cFilBem  := aRetTPN[1]
			cCCusto  := aRetTPN[2]
			cCentrab := aRetTPN[3]
		EndIf

		If Inclui
			If lCompT9TQN .And. cFilBem <> xFilial("TQN")
				cFilAnt 	  := cFilBem
				M->TQN_NABAST := GETSXENUM( 'TQN','TQN_NABAST')
				cFilAnt := cFilTQF
			ElseIf lVerDic
				M->TQN_NABAST := GETSXENUM( 'TQN','TQN_NABAST')
			EndIf
		EndIf
	EndIf

	If !LQuitTrans .And. Inclui .Or. Altera
		If Inclui
			/* Volta a numeração da TQN caso a flilial do abastecimento não for a mesma fial
		   do veiculo pois é usado o confirmSX8 ao gerar movimentação de estoque*/
			If !lVerDic .And. lCompT9TQN .And. cFilBem <> xFilial("TQN")
				RollBackSX8()
			EndIf
		EndIf
		/*
		MNT659VAL - Função que valida abastecimento de acordo com parâmetro MV_NGABAVL
		Se tiver algum retorno falso a partir da segunda posição, mostra divergencia.
		Retorno MNT659VAL
		1 - cMensagem (mensagem que será apresentada para usuário - não utilizada para importação)
		2 - Validação de Esquema Padrão    (.T. está ok , .F. com erro)
		3 - Validação de Estrutura Padrão  (.T. está ok , .F. com erro)
		4 - Validação de Manutenção Padrão (.T. está ok , .F. com erro)
		5 - Validação de Manutenção        (.T. está ok , .F. com erro)
		*/
		If FindFunction("MNT659VAL")
			aValAbast:= MNT659VAL(cFrota655,cFilBem, M->TQN_DTABAS,M->TQN_HRABAS)
			If aScan(aValAbast[2], {|x| x[1] == .F. }) > 0
				HELP( ' ', 1, STR0007,, aValAbast[ 1, 1 ], 2, 0,,,,,, /*Solucao*/ )
				LQuitTrans := .T.
			EndIf
		EndIf
	EndIf

	//Cria as tabelas temporárias
	If TipoAcom .Or. TipoAcom2
		//Função genérica inserida no mntutil_contador, após virada de release (12.1.27) retirar esta condição
		//e obsoletar a função Static fCriaTemp
		If lRPORel17 .And. FindFunction("MNTCTemp")
			MNTCTemp()
		Else
			fCriaTemp()
		EndIf
	EndIf

	If !LQuitTrans .And. Inclui

    	If !MNA655VT()
    		DbSelectArea("TQN")
    		DbSetOrder(1)
    		DbGoTo(nRecno)
    		LQuitTrans := .T.
    	EndIf

    	If !LQuitTrans .And. !MNA655BPOST("cBTOK")
    		DbSelectArea("TQN")
    		DbSetOrder(1)
    		DbGoTo(nRecno)
    		LQuitTrans := .T.
    	EndIf

    	If !LQuitTrans .And. !MNA655QC(.T.)
    		DbSelectArea("TQN")
    		DbSetOrder(1)
    		DbGoTo(nRecno)
    		LQuitTrans := .T.
    	EndIf

    	If !LQuitTrans .And. !MNT655NF(cFilTQF)
    		DbSelectArea("TQN")
    		DbSetOrder(1)
    		DbGoTo(nRecno)
    		LQuitTrans := .T.
    	EndIf

    	// Campo motorista aberto quando TipoAcom = .T., considerando que apenas
    	// veiculos tem contador (geradores nao, por exemplo). Se houver motorista
    	// generico, sera usado apenas quando o campo estiver aberto para digitar
    	If !LQuitTrans .And. Empty(M->TQN_CODMOT) .And. TipoAcom .And. !Empty(cMotGer)

			If !MNA655MO()
    			DbSelectArea("TQN")
    			DbSetOrder(1)
    			DbGoTo(nRecno)
    			LQuitTrans := .T.
    		EndIf

    		M->TQN_CODMOT := cMotorista
			M->TQN_NOMMOT := IIf( !Empty( cMotorista ), Posicione( 'DA4', 1, xFilial( 'DA4' ) + cMotorista, 'DA4_NOME' ), '' )

    	EndIf

        If !LQuitTrans .And. cConEst = "S" .And. cUsaint3 = "S" .And. cTipoPosto == "2"
           If !NGCHKMESFE(M->TQN_DTABAS,"P")
              LQuitTrans := .T.
           EndIf
        EndIf

    	If !LQuitTrans .And. NGSEEK( "SA2", M->TQN_POSTO+M->TQN_LOJA, 1, "A2_MSBLQL" ) == "1"
    		Help(1," ","REGBLOQ",,"("+NGRETTITULO("TQN_POSTO")+")",3,0)
    		LQuitTrans := .T.
    	EndIf

    	If !LQuitTrans .And. !( fChkComBem(cFROTA655 , M->TQN_CODCOM, cFilbem)[1] )
    		LQuitTrans := .T.
    	EndIf

    	aAdd( ARep,{M->TQN_NABAST, M->TQN_PLACA ,M->TQN_CODCOM,M->TQN_CNPJ  ,IIf(Empty(cMotGer),M->TQN_CODMOT,cMotorista),M->TQN_HODOM,M->TQN_QUANT,;
                    M->TQN_VALUNI,M->TQN_VALTOT,M->TQN_DTABAS,M->TQN_HRABAS,M->TQN_NABAAN,M->TQN_POSTO,M->TQN_LOJA     ,M->TQN_FROTA})

		Begin Transaction
			
			If !LQuitTrans .And. MNT655VAL(aREP)

				cFROTA655 := M->TQN_FROTA + Space(Len(ST9->T9_CODBEM)-Len(M->TQN_FROTA))

				If TipoAcom
					If !MNT655CON(1)
						LQuitTrans := .T.
					EndIf

					If !LQuitTrans .And. !MNT655HOD(1)
						LQuitTrans := .T.
					EndIf

					If !LQuitTrans

						If !l655Auto
							If !NGCHKHISTO(cFROTA655,M->TQN_DTABAS,M->TQN_HODOM,M->TQN_HRABAS,1,,.T.,cFilBem,M->TQN_CODCOM) .Or.;
								!NGVALIVARD(cFROTA655,M->TQN_HODOM,M->TQN_DTABAS,M->TQN_HRABAS,1,.T.,,cFilBem)
								LQuitTrans := .T.
								DisarmTransaction()
							EndIf
						Else
							aValRet := NGVALIVARD(cFROTA655,M->TQN_HODOM,M->TQN_DTABAS,M->TQN_HRABAS,1,.F.,,cFilBem)
							If !aValRet[ 1 ] .And. aValRet[ 2 ] $ 'comporta'
								HELP(' ', 1, STR0007,, aValRet[ 2 ], 2, 0,,,,,, /*Solucao*/)
								LQuitTrans := .T.
								DisarmTransaction()
							EndIf
							If !LQuitTrans
								aValRet := NGCHKHISTO(cFROTA655,M->TQN_DTABAS,M->TQN_HODOM,M->TQN_HRABAS,1,,.F.,cFiliST9,M->TQN_CODCOM)
								If !aValRet[ 1 ]
									HELP(' ', 1, STR0007,, aValRet[ 2 ], 2, 0,,,,,, /*Solucao*/)
									LQuitTrans := .T.
									DisarmTransaction()
								EndIf
							EndIf
						EndIf

					EndIf

					If !LQuitTrans .And. ExistBlock("MNTA655SEN") .And. !ExecBlock("MNTA655SEN", .F. , .F. )
						LQuitTrans := .T.
					EndIf

					If !LQuitTrans
						lRet1Cont := .T.
					Else
						If !LQuitTrans
							dbSelectArea("STP")
							dbSetOrder(5)
							dbSeek(xFilial("STP",cFiliST9)+cFROTA655+DTOS(M->TQN_DTABAS)+M->TQN_HRABAS)
							If STP->TP_POSCONT == M->TQN_HODOM  .And. (STP->TP_TIPOLAN $ 'CM')
								RecLock("STP",.F.)
								STP->TP_TIPOLAN := "A"
								MsUnLock("STP")
							EndIf
						EndIf
					EndIf
				EndIf

				If !LQuitTrans .And. TipoAcom2

					dbSelectArea("TPE")
					dbSetOrder(1)
					If dbSeek(xFilial("TPE", cFilBem) + cFrota655)
						If TPE->TPE_SITUAC == "1"

							If !MNT655CON(2)
								LQuitTrans := .T.
							EndIf

							If !LQuitTrans .And. lSegCont

								If !MNT655HOD(2)
									LQuitTrans := .T.
								EndIf

								If !LQuitTrans
									If !l655Auto
										If !NGCHKHISTO(cFROTA655,M->TQN_DTABAS,M->TQN_POSCO2,M->TQN_HRABAS,2,,.T.,cFilBem,M->TQN_CODCOM) .Or.;
											!NGVALIVARD(cFROTA655,M->TQN_POSCO2,M->TQN_DTABAS,M->TQN_HRABAS,2,.T.,,cFilBem)
											LQuitTrans := .T.
											DisarmTransaction()
										EndIf
									Else
										aValRet := NGCHKHISTO(cFROTA655,M->TQN_DTABAS,M->TQN_POSCO2,M->TQN_HRABAS,2,,.F.,cFilBem,M->TQN_CODCOM)
										If !aValRet[ 1 ]
											HELP(' ', 1, STR0007,, aValRet[ 2 ], 2, 0,,,,,, /*Solucao*/)											
											LQuitTrans := .T.
											DisarmTransaction()
										EndIf
										If !LQuitTrans
											aValRet := NGVALIVARD(cFROTA655,M->TQN_POSCO2,M->TQN_DTABAS,M->TQN_HRABAS,2,.F.,,cFilBem)
											If !aValRet[ 1 ] .And. 'comporta' $ aValRet[ 2 ]
												HELP(' ', 1, STR0007,, CRLF + STR0200 + CRLF + CRLF + aValRet[ 2 ], 2, 0,,,,,, /*Solucao*/)
												DisarmTransaction()
												LQuitTrans := .T.
											EndIf
										EndIf
									EndIf
								EndIf

								If !LQuitTrans .And. ExistBlock("MNTA655SEN")
									If !ExecBlock("MNTA655SEN", .F. , .F. )
										LQuitTrans := .T.
									EndIf		
								EndIf

								If !LQuitTrans
									lRet2Cont := .T.
								Else
									If !LQuitTrans
										dbSelectArea("TPP")
										dbSetOrder(5)
										dbSeek(xFilial("TPP",cFiliST9)+cFROTA655+DTOS(M->TQN_DTABAS)+M->TQN_HRABAS)
										If TPP->TPP_POSCON == M->TQN_POSCO2  .And. (TPP->TPP_TIPOLA $ 'CM')
											RecLock("TPP",.F.)
											TPP->TPP_TIPOLA := "A"
											MsUnLock("TPP")
										EndIf
									EndIf
								EndIf
							EndIf
						ElseIf !LQuitTrans .And. TPE->TPE_SITUAC != "1"
							// Atenção "Campo 2º Contador informado, porém o mesmo está desabilitado."
							// "Caso deva ser utilizado, habilitar 2º Contador através da rotina de Bens."
							HELP( ' ', 1, STR0007,,STR0176, 2, 0,,,,,, { STR0177 } )
							LQuitTrans := .T.
						EndIf
					EndIf
				EndIf

			Else

				dbSelectArea("TQN")
				dbSetOrder(1)
				dbGoTo(nRecno)
				LQuitTrans := .T.

			EndIf

			If !LQuitTrans
				If !Empty(M->TQN_POSTO)
					dbSelectArea("TQF")
					dbSetOrder(1)
					dbSeek(xFilial("TQF")+M->TQN_POSTO)
				EndIf

				If !Empty(M->TQN_CNPJ)
					dbSelectArea("TQF")
					dbSetOrder(2)
					dbSeek(xFilial("TQF")+M->TQN_CNPJ)
				EndIf

				cCtCusSD3 := cCCusto
				cCCAnt    := cCCusto
				cCTTSI3   := If(CtbInUse(), "CTT", "SI3")

				//Ponto de Entrada para Inclusão de Centro de Custo personalizável
				If ExistBlock("MNTA6558")
					cCCusto := ExecBlock("MNTA6558",.F.,.F.,{cCCusto})
					If cCCAnt <> cCCusto
						cCtCusSD3 := cCCusto
					EndIf
				EndIf

				dbSelectArea(cCTTSI3)
				dbSetOrder(1)
				If !dbSeek(xFilial(cCTTSI3)+cCCusto)
					cCtCusSD3 := ""
				EndIf
			EndIf

			//chamada da funcao para debitar do estoque
			If !LQuitTrans .And. cConEst == "S" .And. cUsaInt3 == "S" .And. cTipoPosto == "2"
				dbSelectArea("TQM")
				dbSetOrder(1)
				dbSeek(xFilial("TQM")+M->TQN_CODCOM)

				cUM := TQM->TQM_UM

				dbSelectArea("TQF")
				dbSetOrder(1)
				dbSeek(xFilial("TQF")+M->TQN_POSTO+M->TQN_LOJA)
				If TQF->TQF_TIPPOS == "2"

					cDocumSD3 := NextNumero("SD3",2,"D3_DOC",.T.)
					xExecSD3  := MntMovEst( 'RE0', M->TQN_TANQUE, cComb, M->TQN_QUANT, M->TQN_DTABAS, cDocumSD3, , cCtCusSD3, , , ,;
						M->TQN_FROTA, cFilBem, , , , , l655Auto )

					If ( l655Auto .And. xExecSD3[1] ) .Or. ( !l655Auto .And. !Empty( xExecSD3 ) )

						cNumSeqD := IIf( l655Auto, xExecSD3[2], xExecSD3 )
						vRastro  := {}
						
						TQN->( dbGoTo( TQN->( RecNo() ) ) )

						// Ponto de Entrada para alterações finais no SD3
						If ExistBlock( 'MNT655D3CC' )

							ExecBlock( 'MNT655D3CC', .F. , .F. , { 'RE0', M->TQN_FROTA, cCtCusSD3,;
								Nil ,SD3->( RecNo() ) } )

						EndIf

						DbSelectArea("TQN")
						M->TQN_NUMSEQ := cNumSeqD

					Else
						
						LQuitTrans := .T.

						If l655Auto

							lMsErroAuto := .T.
							AutoGRLog( xExecSD3[2] )
							
						EndIf

					EndIf
					
				EndIf

			EndIf

			If !LQuitTrans .And. lRet2Cont
				If lSegCont
					dbSelectArea("TPE")
					dbSetOrder(1)
					If dbSeek(xFilial("TPE", cFilBem) + cFrota655) .And. TPE->TPE_SITUAC != "1"
						// #Atenção ## "Campo 2º Contador informado, porém o mesmo está desabilitado."
						// "Caso deva ser utilizado, habilitar 2º Contador através da rotina de Bens."
						HELP( ' ', 1, STR0007,, STR0176, 2, 0,,,,,, { STR0177 } )
						LQuitTrans := .T.
					EndIf
				EndIf
			EndIf

			//grava data de pagamento
			If !LQuitTrans
				dbSelectArea("TQN")
				M->TQN_DTPGMT := MNT655DTPG(M->TQN_POSTO,M->TQN_LOJA,M->TQN_DTABAS,M->TQN_HRABAS)
				M->TQN_DTEMIS := M->TQN_DTABAS
				M->TQN_CCUSTO := cCCusto
				M->TQN_CENTRA := cCentrab
				M->TQN_ORDENA := INVERTE(M->TQN_DTABAS)
				M->TQN_NUMSGC := MN655NUMSGC(.T.)
				dbSelectArea("TQN")
				dbSetOrder(1)
				dbGoTo(nRecno)
			EndIf

			If !LQuitTrans

				DbSelectArea('TQN')
				If !l655Auto
					RestArea(aAreaTQN)
				EndIf

				If !Empty( M->TQN_PLACA )
					dbSelectArea( 'ST9' )
					dbSetOrder( 14 ) // T9_PLACA + T9_SITBEM
					If dbSeek( M->TQN_PLACA )
						cFilBem	:= ST9->T9_FILIAL
					EndIf
				EndIf

				cFilTQN  := xFilial( 'TQN' )
				cFiliST9 := xFilial( 'ST9' ) // Armazena filial corrente da ST9
				
				DbSelectArea( 'TQN' )
				DbSetOrder(1)
				RecLock('TQN',.T.)
				

				For ny := 1 To FCOUNT()
					nx := "m->" + FieldName(ny)

					If "_FILIAL"$Upper(nx)
						&nx. := cFilCad
					EndIf

					FieldPut(ny, &nx.)
				Next ny

				TQN->TQN_FILORI := cFilAnt

				If lCompT9TQN .And. cFilBem <> cFilTQN
					//Pega o numero sequencial da filial do bem.
					TQN->TQN_FILIAL := cFilBem
					TQN->TQN_NABAST := M->TQN_NABAST
				ElseIf lVerDic
					TQN->TQN_NABAST := M->TQN_NABAST
				EndIf

				TQN->( MSUNLOCK() )

				nRecaAb := TQN->( Recno() )

				EvalTrigger()       // Processa Gatilhos

				ConfirmSX8()
				//Inclui historico do contador da Bomba
				NGIncTTV(TQN->TQN_POSTO,TQN->TQN_LOJA,TQN->TQN_TANQUE,TQN->TQN_BOMBA,TQN->TQN_DTABAS,TQN->TQN_HRABAS,"1",,TQN->TQN_QUANT,TQN->TQN_NABAST)

			EndIf
			
			// Verifica a existência de manutenções do contador 1 para o veiculo abastecido
			If !LQuitTrans .And. lRet1Cont .And. M->TQN_HODOM > 0 .And. !NGVLMNT( M->TQN_FROTA, M->TQN_HODOM, IIf( cFilBem == xFilial( 'ST9'), cFilAnt, cFilBem ), ,;
				@lCon1Vez, @lGerOsAut, @aVldMNT, .F. )

				aGerOSAUT[ 1 ] := .F.

			EndIf

			// Verifica a existência de manutenções do contador 2 para o veiculo abastecido
			If !LQuitTrans .And. lSegCont .And. M->TQN_POSCO2 > 0 .And. !NGVLMNT( M->TQN_FROTA, M->TQN_POSCO2, IIf( cFilBem == xFilial( 'ST9' ), cFilAnt, cFilBem ), ,;
				@lCon1Vez, @lGerOsAut, @aVldMNT, .T. )

				aGerOSAUT[ 2 ] := .F.

			EndIf

			If LQuitTrans
				DisarmTransaction()
			EndIf
			
		End Transaction

		If !LQuitTrans
			
			If lRet1Cont
				
				NGTRETCON(cFROTA655,M->TQN_DTABAS,M->TQN_HODOM,M->TQN_HRABAS,1,,,"A",cFilBem,,,{cTRBS,cTRBF,CTRBEixo})
				
				dbSelectArea( cTRBF )
				Zap

				dbSelectArea( cTRBS )
				Zap

				dbSelectArea( cTRBEixo )
				Zap

				//GERAR O.S AUTOMATICA POR CONTADOR
				If aGerOSAUT[ 1 ] .And. (cGeraPrev = "S" .Or. cGeraPrev = "C" .Or. cGeraPrev = "A") .And. !Empty(M->TQN_HODOM)
					
					If cGeraPrev == "C"
						
						If l655Auto .Or. MsgYesNo(STR0069+chr(13)+chr(13)+; //"Deseja que seja verificado a existência de o.s automática por contador?"
							STR0068,STR0007) //"Confirma (Sim/Não)"###"ATENÇÃO"
							//--------------------------------------------------------------------------------------
							//o parâmetro de filial para a função NGGEROSAUT é tratado para que seja passado
							//o código completo no caso das tabelas de bens ST9/TPN serem compartilhadas
							//--------------------------------------------------------------------------------------
							NGGEROSAUT( M->TQN_FROTA, M->TQN_HODOM, IIf( cFilBem == xFilial("ST9"), cFilAnt, cFilBem ), ,;
								lCon1Vez, lGerOsAut, aVldMNT, 1 )

						EndIf

					Else
						
						//--------------------------------------------------------------------------------------
						//o parâmetro de filial para a função NGGEROSAUT é tratado para que seja passado
						//o código completo no caso das tabelas de bens ST9/TPN serem compartilhadas
						//--------------------------------------------------------------------------------------
						NGGEROSAUT( M->TQN_FROTA, M->TQN_HODOM, IIf( cFilBem == xFilial("ST9"), cFilAnt, cFilBem ),;
							{ cTRBS, cTRBF, CTRBEixo }, lCon1Vez, lGerOsAut, aVldMNT, 1 )

					EndIf

				EndIf

			EndIf

			If lSegCont

				dbSelectArea("TPE")
				dbSetOrder(1)
				If dbSeek(xFilial("TPE", cFilBem) + cFrota655)
					
					If TPE->TPE_SITUAC == "1"
						
						NGTRETCON(cFROTA655,M->TQN_DTABAS,M->TQN_POSCO2,M->TQN_HRABAS,2,,,"A",cFilBem,,,{cTRBS,cTRBF,CTRBEixo})

						dbSelectArea( cTRBF )
						Zap

						dbSelectArea( cTRBS )
						Zap

						dbSelectArea( cTRBEixo )
						Zap
						
						//GERAR O.S AUTOMATICA POR CONTADOR
						If aGerOSAUT[ 2 ] .And. (cGeraPrev = "S" .Or. cGeraPrev = "C" .Or. cGeraPrev = "A") .And. !Empty(M->TQN_POSCO2)
							If cGeraPrev == "C"
								If l655Auto .Or. MsgYesNo(STR0069+chr(13)+chr(13)+; //"Deseja que seja verificado a existência de o.s automática por contador?"
									STR0068,STR0007) //"Confirma (Sim/Não)"###"ATENÇÃO"
									
									//--------------------------------------------------------------------------------------
									//o parâmetro de filial para a função NGGEROSAUT é tratado para que seja passado
									//o código completo no caso das tabelas de bens ST9/TPN serem compartilhadas
									//--------------------------------------------------------------------------------------
									NGGEROSAUT( M->TQN_FROTA, M->TQN_POSCO2, IIf( cFilBem == xFilial("ST9"), cFilAnt, cFilBem ),;
										{ cTRBS, cTRBF, CTRBEixo }, lCon1Vez, lGerOsAut, aVldMNT, 2 )

								EndIf

							Else

								//--------------------------------------------------------------------------------------
								//o parâmetro de filial para a função NGGEROSAUT é tratado para que seja passado
								//o código completo no caso das tabelas de bens ST9/TPN serem compartilhadas
								//--------------------------------------------------------------------------------------
								NGGEROSAUT( M->TQN_FROTA, M->TQN_POSCO2, IIf( cFilBem == xFilial("ST9"), cFilAnt, cFilBem ),;
									{ cTRBS, cTRBF, CTRBEixo }, lCon1Vez, lGerOsAut, aVldMNT, 2 )

							EndIf

						EndIf

					EndIf

				EndIf

			EndIf

		EndIf

	EndIf

	If !LQuitTrans
	
		If Altera
				//Valida campo Nota Fiscal nao obrigatorio para abast. automatico
			If !LQuitTrans .And. !MNT655NF(cFilTQF)
				DbSelectArea("TQN")
				DbSetOrder(1)
				DbGoTo(nRecno)
				LQuitTrans := .T.
			EndIf

			If !LQuitTrans .And. !MNA655HR(cFilTQF)
				LQuitTrans := .T.
			EndIf

			If !LQuitTrans .And. ExistBlock("MNTA655SEN")
				If !ExecBlock("MNTA655SEN", .F. , .F. )
					LQuitTrans := .T.
				EndIf
			EndIf

			Begin Transaction
				If !LQuitTrans .And. M->TQN_HODOM <> vDadoAtu[5] .Or. M->TQN_FROTA <> vDadoAtu[2] .Or. DtoS(M->TQN_DTABAS) <> vDadoAtu[3]
					aARALTC :=  {'STP','STP->TP_FILIAL','STP->TP_CODBEM','STP->TP_DTLEITU','STP->TP_HORA',;
									'STP->TP_POSCONT','STP->TP_ACUMCON','STP->TP_VARDIA','STP->TP_VIRACON'}
					aARABEM := {'ST9','ST9->T9_POSCONT','ST9->T9_CONTACU','ST9->T9_DTULTAC','ST9->T9_VARDIA'}

					DbSelectArea("STP")
					DbSetOrder(5)
					If DbSeek(xFilial("STP",vDadoAtu[1])+vDadoAtu[2]+vDadoAtu[3]+vDadoAtu[4])
						nDifCont := M->TQN_HODOM - STP->TP_POSCONT
						nAcum655 := (STP->TP_ACUMCON - STP->TP_POSCONT) + M->TQN_HODOM
						nRECNSTP := Recno()
						lULTIMOP := .T.
						nACUMFIP := 0
						nCONTAFP := 0
						nVARDIFP := 0
						dDTACUFP := Ctod('  /  /  ')
						DbSkip(-1)
						If !Eof() .And. !Bof() .And. &(aARALTC[2]) = xFilial(aARALTC[1],vDadoAtu[1]) .And. &(aARALTC[3]) == vDadoAtu[2]

							nACUMFIP := &(aARALTC[7])
							dDTACUFP := &(aARALTC[4])
							nCONTAFP := &(aARALTC[6])
							nVARDIFP := &(aARALTC[8])

						EndIf

						DbGoTo(nRECNSTP)
						nACUMDEL := STP->TP_ACUMCON
						RecLock("STP",.F.)
						DbDelete()
						MsUnLock()
						dbSkip()
						If Eof() .Or. STP->TP_CODBEM <> vDadoAtu[2]
							dbSkip(-1)

							If vDadoAtu[2] == STP->TP_CODBEM
								If !Empty (TQN->TQN_PLACA)

									DbSelectArea("ST9")
									DbSetOrder(14)
									If DbSeek(TQN->TQN_PLACA + "A")
										RecLock("ST9",.F.)
										ST9->T9_POSCONT += nDifCont
										ST9->T9_CONTACU += nDifCont
										MsUnLock("ST9")
									EndIf

								Else

									DbSelectArea("ST9")
									DbSetOrder(1)
									If DbSeek(cFiliST9 + TQN->TQN_FROTA)
										RecLock("ST9",.F.)
										ST9->T9_POSCONT += nDifCont
										ST9->T9_CONTACU += nDifCont
										MsUnLock("ST9")
									EndIf

								EndIf
							EndIf
						EndIf
						MNTA875ADEL(vDadoAtu[2],StoD(vDadoAtu[3]),vDadoAtu[4],1,vDadoAtu[1],vDadoAtu[1],{cTRBS,cTRBF,CTRBEixo})
					EndIf

					If !MNT655HOD(1)
						DisarmTransaction()
						LQuitTrans := .T.
					EndIf
					If !LQuitTrans

						If !l655Auto
							If !NGCHKHISTO(cFROTA655,M->TQN_DTABAS,M->TQN_HODOM,M->TQN_HRABAS,1,,.T.,cFiliST9,M->TQN_CODCOM)
								DisarmTransaction()
								LQuitTrans := .T.
							EndIf
							If !NGVALIVARD(cFROTA655,M->TQN_HODOM,M->TQN_DTABAS,M->TQN_HRABAS,1,.T.,,cFiliST9) .And. !LQuitTrans
								DisarmTransaction()
								LQuitTrans := .T.
							EndIf
						Else
							aValRet := NGVALIVARD(cFROTA655,M->TQN_HODOM,M->TQN_DTABAS,M->TQN_HRABAS,1,.F.,,cFiliST9)
							If !aValRet[ 1 ] .And. aValRet[ 2 ] $ 'comporta'
								HELP(' ', 1, STR0007,, aValRet[ 2 ], 2, 0,,,,,, /*Solucao*/)
								DisarmTransaction()
								LQuitTrans := .T.
							EndIf
							If !LQuitTrans
								aValRet := NGCHKHISTO(cFROTA655,M->TQN_DTABAS,M->TQN_HODOM,M->TQN_HRABAS,1,,.F.,cFiliST9,M->TQN_CODCOM)
								If !aValRet[ 1 ]
									HELP(' ', 1, STR0007,, aValRet[ 2 ], 2, 0,,,,,, /*Solucao*/)
									DisarmTransaction()
									LQuitTrans := .T.
								EndIf
							EndIf
						EndIf
						lRet1Cont := .T.

					ElseIf !LQuitTrans
						DbSelectArea("STP")
						DbSetOrder(5)
						DbSeek(xFilial("STP",cFiliST9)+cFROTA655+DTOS(M->TQN_DTABAS)+M->TQN_HRABAS)
						If STP->TP_POSCONT == M->TQN_HODOM  .And. (STP->TP_TIPOLAN $ 'CM')
							RecLock("STP",.F.)
							STP->TP_TIPOLAN := "A"
							MsUnLock("STP")
						EndIf
					EndIf
				EndIf

				If lSegCont .And. TipoAcom2 .And. !LQuitTrans
					//FindFunction remover na release GetRPORelease() >= '12.1.027'
					If FindFunction("MNTCont2")
						lValCont2 := MNTCont2(cFilBem, M->TQN_FROTA)
					Else
						lValCont2 := MNT6552CNT(xFilial("TPE", cFilBem),M->TQN_FROTA) //Verifica se existe contador e/ou está ativado.
					EndIf
					If lValCont2
						If M->TQN_POSCO2 <> vDadoAtu[9] .Or. M->TQN_FROTA <> vDadoAtu[2] .Or. DtoS(M->TQN_DTABAS) <> vDadoAtu[3]
							dbSelectArea("TPP")
							dbSetOrder(5)
							If dbSeek(xFilial("TPP",vDadoAtu[1])+vDadoAtu[2]+vDadoAtu[3]+vDadoAtu[4])
								aARALTC  := {'TPP','TPP->TPP_FILIAL','TPP->TPP_CODBEM','TPP->TPP_DTLEIT','TPP->TPP_HORA',;
												'TPP->TPP_POSCON','TPP->TPP_ACUMCO','TPP->TPP_VARDIA','TPP->TPP_VIRACO'}
								aARABEM  := {'TPE','TPE->TPE_POSCON','TPE->TPE_CONTAC','TPE->TPE_DTULTA','TPE->TPE_VARDIA'}
								nAcu6552 := (TPP->TPP_ACUMCO - TPP->TPP_POSCON) + M->TQN_POSCO2
								nRECNTPP := Recno()
								lULTIMOP := .T.
								nACUMFIP := 0
								nCONTAFP := 0
								nVARDIFP := 0
								dDTACUFP := Ctod('  /  /  ')
								DbSkip(-1)
								If !Eof() .And. !Bof() .And. &(aARALTC[2]) = xFilial(aARALTC[1],cFiliST9) .And.;
										&(aARALTC[3]) == vDadoAtu[2]
									nACUMFIP := &(aARALTC[7])
									dDTACUFP := &(aARALTC[4])
									nCONTAFP := &(aARALTC[6])
									nVARDIFP := &(aARALTC[8])
								EndIf
								DbGoTo(nRECNTPP)
								nACUMDEL := TPP->TPP_ACUMCO
								RecLock("TPP",.F.)
								DbDelete()
								MsUnLock("TPP")
								MNTA875ADEL(vDadoAtu[2],StoD(vDadoAtu[3]),vDadoAtu[4],2,cFiliST9,cFiliST9,{cTRBS,cTRBF,CTRBEixo})
							EndIf

							If !MNT655HOD(2)
								RestArea(aArea)
								DisarmTransaction()
								LQuitTrans := .T.
							EndIf

							If !LQuitTrans

								If !l655Auto
									If !NGCHKHISTO(cFROTA655,M->TQN_DTABAS,M->TQN_POSCO2,M->TQN_HRABAS,2,,.T.,cFiliST9,M->TQN_CODCOM)
										LQuitTrans := .T.
									EndIf
									If !NGVALIVARD(cFROTA655,M->TQN_POSCO2,M->TQN_DTABAS,M->TQN_HRABAS,2,.T.,,cFiliST9) .And. !LQuitTrans
										RestArea(aArea)
										DisarmTransaction()
										LQuitTrans := .T.
									EndIf
								Else
									aValRet := NGVALIVARD(cFROTA655,M->TQN_POSCO2,M->TQN_DTABAS,M->TQN_HRABAS,2,.F.,,cFiliST9)
									If !aValRet[ 1 ] .And. aValRet[ 2 ] $ 'comporta'
										HELP(' ', 1, STR0007,, aValRet[ 2 ], 2, 0,,,,,, /*Solucao*/)
										DisarmTransaction()
										LQuitTrans := .T.
									EndIf
									If !LQuitTrans
										aValRet := NGCHKHISTO(cFROTA655,M->TQN_DTABAS,M->TQN_POSCO2,M->TQN_HRABAS,2,,.F.,cFiliST9,M->TQN_CODCOM)
										If !aValRet[ 1 ]
											HELP(' ', 1, STR0007,, aValRet[ 2 ], 2, 0,,,,,, /*Solucao*/)
											DisarmTransaction()
											LQuitTrans := .T.
										EndIf
									EndIf
								EndIf
								lRet2Cont := .T.
							ElseIf !LQuitTrans
								DbSelectArea("TPP")
								DbSetOrder(5)
								DbSeek(xFilial("TPP",cFiliST9)+cFROTA655+DTOS(M->TQN_DTABAS)+M->TQN_HRABAS)
								If TPP->TPP_POSCON == M->TQN_POSCO2 .And. (TPP->TPP_TIPOLA $ 'CM')
									RecLock("TPP",.F.)
									TPP->TPP_TIPOLA := "A"
									MsUnLock("TPP")
								EndIf
							EndIf

						EndIf
					EndIf
				EndIf

				If !LQuitTrans

					DbSelectArea('TQN')
					If !l655Auto
						RestArea(aAreaTQN)
					EndIf
					RecLock('TQN',.F.)
					For ny := 1 To FCOUNT()
						nx := "m->" + FieldName(ny)

						FieldPut(ny, &nx.)
					Next ny
					MsUnLock()

				EndIf

			End Transaction

			If lRet1Cont .And. !LQuitTrans
				NGTRETCON( cFROTA655, M->TQN_DTABAS, M->TQN_HODOM, M->TQN_HRABAS, 1, , , 'A', cFiliST9, , , { cTRBS, cTRBF, CTRBEixo } )
			EndIf

			If lRet2Cont .And. !LQuitTrans .And. lSegCont .And. lValCont2
				NGTRETCON( cFROTA655, M->TQN_DTABAS, M->TQN_POSCO2, M->TQN_HRABAS, 2, , , 'A', cFiliST9, , , { cTRBS, cTRBF, CTRBEixo } )
			EndIf

			//chama tela para justificativa da alteração
			If ExistBlock("MNT655JUST") .And. !LQuitTrans
				If !ExecBlock("MNT655JUST",.F.,.F.,{'1',cFilbem,M->TQN_NABAST})
					LQuitTrans := .T.
				EndIf
			EndIf
		EndIf

	EndIf

	//Deleta as tabelas temporárias relacionadas a contador
	If TipoAcom .Or. TipoAcom2
		//Função genérica inserida no mntutil_contador, após virada de release (12.1.27) retirar esta condição
		//e obsoletar a função Static fDelTemp
		If lRPORel17 .And. FindFunction("MNTDTemp")
			MNTDTemp()
		Else
			fDelTemp()
		EndIf
	EndIf

    RestArea(aArea)

Return !LQuitTrans

//-------------------------------------------------------------------
/*/{Protheus.doc} MNA655VT
Validacao do valor total

@author  Heverson Vitoreti
@since   27/01/06
@version P11/P12
@return  Lógico, define se o campo possui inconsistência
/*/
//-------------------------------------------------------------------
Function MNA655VT()

	Local lRETVH := .T.
	Local aArea  := GetArea()

	If AllTrim( SuperGetMV( 'MV_NGCONEG', .F., 'S' ) ) == 'S' .And. TQF->TQF_TIPPOS != '3'
		If M->TQN_VALUNI == 0.00
			Help(" ",1,STR0007,,STR0008,3,1) //"ATENÇÃO"###"Primeiro preencha o valor unitario."
			M->TQN_VALTOT := 0.00
		EndIf

		If M->TQN_VALTOT > (M->TQN_VALUNI * M->TQN_QUANT) + GetMv("MV_NGTOLVL")
			Help(" ",1,STR0007,,STR0009,3,1) //"ATENÇÃO"###"Valor total Errado."
			lRETVH := .F.
		EndIf

		If M->TQN_VALTOT < (M->TQN_VALUNI * M->TQN_QUANT) - GetMv("MV_NGTOLVL")
			Help(" ",1,STR0007,,STR0009,3,1) //"ATENÇÃO"###"Valor total Errado."
			lRETVH := .F.
		EndIf
	EndIf

	RestArea(aArea)

Return lRETVH

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNA655BPOST³ Autor ³Heverson Vitoreti     ³ Data ³ 24/03/06 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Validacao de tanque e  bomba pelo Codigo do posto           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNA655BPOST(cCall)
Local aArea := GetArea()
Local cConNeg := GetNewPar("MV_NGCONEG","S") //Verficar se é obrigatorio a negociação para os Postos.

DbSelectArea("TQF")
DbSetOrder(1)
dbSeek(xFilial("TQF")+M->TQN_POSTO+M->TQN_LOJA)

If TQF->TQF_LANMAN == '2'
	Help(" ",1,STR0007,,STR0070+CHR(10)+CHR(13)+STR0071,3,1) //"ATENÇÃO"###"Este posto não permite lançamentos manuais,"###"abastecimento não permitido."
	Return .F.
EndIf

If TQF->TQF_ATIVO == "2"
	HELP(" ",1,STR0007,,STR0072,3,1) //"ATENÇÃO"###"Este posto encontra-se desativado."
	Return .F.
EndIf


If TQF->TQF_TIPPOS == "2"
	lBomba        := .T.
	lTanque       := .T.
Else
	lBomba        := .F.
  	lTanque       := .F.
  	M->TQN_BOMBA  := Space(Len(M->TQN_BOMBA))
  	M->TQN_TANQUE := Space(Len(M->TQN_TANQUE))

EndIf
If TQF->TQF_TIPPOS == "3" .Or. cConNeg == "N"
	lValuni       := .T.
Else
	lValuni       := .F.
EndIf
If cCall == Nil
	If !Altera
		M->TQN_HRABAS := "  :  "
	EndIf
EndIf
RestArea(aArea)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNA655BCNPJ³ Autor ³Heverson Vitoreti     ³ Data ³ 24/03/06 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Validacao de tanque e  bomba pelo CNPJ                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNA655BCNPJ()
Local aArea := GetArea()
Local cTpPosto := ""
Local cConNeg := GetNewPar("MV_NGCONEG","S") //Verficar se é obrigatorio a negociação para os Postos.

//Posiciona na tabela 'TQF' e retorna o Tipo do Posto.
cTpPosto := NGSEEK( "TQF",M->TQN_POSTO+M->TQN_LOJA,1,"TQF_TIPPOS" )

If cTpPosto == "2" //Posto Interno.
	lBomba        := .T.
	lTanque       := .T.
Else
	lBomba        := .F.
  	lTanque       := .F.
  	M->TQN_BOMBA  := Space(Len(M->TQN_BOMBA))
  	M->TQN_TANQUE := Space(Len(M->TQN_TANQUE))
EndIf
If cTpPosto == "3" .Or. cConNeg == "N" //Tipo Posto: Não Conveniado.
	lValuni       := .T.
Else
	lValuni       := .F.
EndIf

RestArea(aArea)
If !Altera
	M->TQN_HRABAS := "  :  "
EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MNA655MO
Validacao do codigo do motorista

@author  Heverson Vitoreti
@since   27/01/06
@version P11/P12
@return  Lógico, define se o motorista informado é válido
/*/
//-------------------------------------------------------------------
Function MNA655MO()

	Local lRETVH := .T.
	Local nIndSRA, cSeekSRA
	Local aArea := GetArea()
	Local dDemissao := Ctod("  /  /  " )
	Local cNGMNTRH  := AllTrim(SuperGetMv("MV_NGMNTRH",.F.,"N"))
	Local lContCC	:= .T.
	Local cTipMot   := GetNewPar("MV_NGMOTAB","1")   //Qual tipo motorista pode abastecer (1/2/3)

	cPrvBemClk := MNT655PREV()

	If FunName() == "MNTA656"

		cMotor655 := IIf(ReadVar()=='M->TQN_CODMOT',M->TQN_CODMOT,oBrw1:aCols[n][nPOSMOTOR])
		dDatAb655 := IIf(ReadVar()=='M->TQN_DTABAS',M->TQN_DTABAS,oBrw1:aCols[n][nPOSDATAB])

	ElseIf IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)

		cMotor655 := M->TQN_CODMOT
		dDatAb655 := M->TQN_DTABAS
		If Empty(cMotor655) .And. !Empty(cMotGer)
			cMotor655 := cMotorista
		EndIf

	ElseIf FunName() == "MNTA681" .Or. FunName() == "MNTA682"
		cMotor655 := M->TQN_CODMOT
		lContCC := .F.
		If Empty(cMotor655) .And. !Empty(cMotGer)
			cMotor655 := cMotorista
		EndIf
	EndIf

	DbSelectArea("DA4")
	DbSetOrder(01)
	If !DbSeek(xFilial("DA4")+cMotor655) .And. !Empty(cMotGer)
		// "ATENÇÃO"##"Motorista genérico"##"CPF/CNPJ número "##"não encontrado no cadastro de motoristas."
		// "Cadastre o motorista/corrija o parametro MV_NGMOTGE."
		HELP( ' ', 1, STR0007,, STR0150 + " (" + STR0151 + cValToChar( cMotGer ) + ") "+ STR0152, 2, 0,,,,,, { STR0153 } )
		Return .F.
	EndIf

	//Integracao com RH
	If cNGMNTRH = "S"
		If Empty(DA4->DA4_MAT)
			//"Campo matricula do motorista está em branco." ##"Informe a matrícula no cadastro de motorista."
			HELP( ' ', 1, STR0007,, STR0130, 2, 0,,,,,, { STR0131 } )
			Return .F.
		EndIf

		If NGCADICBASE("DA4_EMPBAS","A","DA4",.F.) .And. !Empty(DA4->DA4_EMPBAS)
			NGPrepTBL({{"SRA"}},DA4->DA4_EMPBAS)
		EndIf

		nIndSRA := 13
		cSeekSRA := DA4->DA4_MAT
		If NGCADICBASE("DA4_FILBAS","A","DA4",.F.) .And. !Empty(DA4->DA4_FILBAS)
			nIndSRA := 1
			cSeekSRA := DA4->DA4_FILBAS+DA4->DA4_MAT
		EndIf

		DbSelectArea("SRA")
		DbSetOrder(nIndSRA)
		If DbSeek(cSeekSRA)
			If nIndSRA == 1
				dDemissao := SRA->RA_DEMISSA
			Else
				While !Eof() .And. SRA->RA_MAT == DA4->DA4_MAT

					If Empty(SRA->RA_DEMISSA)
						dDemissao := Ctod("  /  /  ")
						Exit
					ElseIf SRA->RA_DEMISSA > dDemissao
						dDemissao := SRA->RA_DEMISSA
					EndIf

					DbSelectArea("SRA")
					dbSkip()
				End
			EndIf
		EndIf

		If NGCADICBASE("DA4_EMPBAS","A","DA4",.F.) .And. !Empty(DA4->DA4_EMPBAS)
			NGPrepTBL({{"SRA"}},SM0->M0_CODIGO)
		EndIf

		If !Empty(dDEMISSAO) .And. dDEMISSAO < dDatAb655
			HELP(" ",1,STR0007,,STR0057+Chr(13)+STR0036,3,1)
			lRETVH := .F.
		Else
			If NGCADICBASE("DA4_EMPBAS","A","DA4",.F.) .And. !Empty(DA4->DA4_EMPBAS)
				NGPrepTBL({{"SR8"}},DA4->DA4_EMPBAS)
			EndIf
			//Verifica se houve afastamento no RH
			If lContCC .And. !NGFRHAFAST(DA4->DA4_MAT,dDatAb655,dDatAb655,.T.)
				lRETVH := .F.
			EndIf

			If NGCADICBASE("DA4_EMPBAS","A","DA4",.F.) .And. !Empty(DA4->DA4_EMPBAS)
				NGPrepTBL({{"SR8"}},SM0->M0_CODIGO)
			EndIf
		EndIf
	EndIf

	If DA4->DA4_TIPMOT == "2" .And. !("2" $ cTipMot)
		HELP(" ",1,STR0007,,STR0073,3,1) //"ATENÇÃO"###"Motorista terceirizado, abastecimento não permitido."
		lRETVH := .F.
	EndIf
	If DA4->DA4_TIPMOT == "3" .And. !("3" $ cTipMot)
		HELP(" ",1,STR0007,,STR0074,3,1) //"ATENÇÃO"###"Motorista agregado, abastecimento não permitido."
		lRETVH := .F.
	EndIf

	If ALTERA
		If !MNTA655MOT()
			lRETVH := .F.
		EndIf
	EndIf

	If lRETVH
		If DA4->DA4_BLQMOT == "1"
			HELP(" ",1,STR0007,,STR0103,3,1) //"ATENÇÃO"###"Motorista bloqueado, abastecimento não permitido."
			lRETVH := .F.
		EndIf
	EndIf
	RestArea(aArea)

Return lRETVH

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNA655OPR | Autor ³Heverson Vitoreti      ³ Data ³ 27/01/06 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Validacao do preco negociado                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNA655PR()

	Local aArea  := GetArea()
	Local dUltDt := "  /  /  "
	Local nRecno

	If 	M->TQN_POSTO <> " " .And. ;
			M->TQN_CODCOM <> " " .And.;
			IIf(lComboio .And. ;
			NGSEEK("TQF",M->TQN_POSTO+M->TQN_LOJA,1,"TQF_COMBOI") == '1',;
			.T.,M->TQN_CNPJ <> " ")

		DbSelectArea("TQH")
		DbSetOrder(1)
		DbSeek(xFilial("TQH")+M->TQN_POSTO+M->TQN_LOJA+M->TQN_CODCOM)
		dUltDt := TQH->TQH_DTNEG
		Do While !EoF() .And. xFilial("TQH") == TQH->TQH_FILIAL .And.;
				TQH->TQH_CODPOS == M->TQN_POSTO .And.;
				TQH->TQH_LOJA == M->TQN_LOJA .And.;
				TQH->TQH_CODCOM == M->TQN_CODCOM

			If dUltDt > TQH->TQH_DTNEG .Or. TQH->TQH_DTNEG > M->TQN_DTABAS
				DbSelectArea("TQH")
				DbSkip()
				Loop
			EndIf

			dUltDt := TQH->TQH_DTNEG
			nRecno := Recno()
			DbSelectArea("TQH")
			DbSkip()

		EndDo
		DbSelectArea("TQF")
		DbSetOrder(1)
		DbSeek(xFilial("TQF")+M->TQN_POSTO+M->TQN_LOJA)
		If SuperGetMV('MV_NGCONEG') == 'S' .And. TQF->TQF_TIPPOS <> "3"

			DbSelectArea("TQH")
			If !Empty(nRecno)
				DbGoTo(nRecno)
				If M->TQN_VALUNI <> TQH->TQH_PRENEG
		     		HELP(" ",1,STR0007,,STR0038,3,1) //"ATENÇÃO"### //"Valor unitario é diferente do preço negociado."
					RestArea(aArea)
				  	Return .F.
				EndIf
			EndIf
		EndIf
	EndIf

	M->TQN_VALTOT := M->TQN_QUANT*M->TQN_VALUNI

	RestArea(aArea)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNA655QC
Validacao da quantidade de combustivel abastecida

@param lGrava

@author Heverson Vitoreti
@since 27/01/2006
@version MP11
@return booleano

/*/
//---------------------------------------------------------------------
Function MNA655QC(lGrava)

	Local aArea		:= GetArea()
	Local lVal655	:= .T.
	Local lEstNeg	:= IIf(SuperGetMV("MV_ESTNEG",.F.,"S")=="S",.T.,.F.)//³ Variavel usada para identIficar se usuario permite que o estoque fique negativo. Se permitir, a variavel vale .T. ³
	Local cFilTQF	:= cFilAnt
	Local cCod		:= ""
	Local cCOMB656	:= IIf(Type("cTTAComb") <> 'U',cTTAComb,"")
	Local cPlaca655 := ""

	cPrvBemClk := MNT655PREV()

	If (IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)) .And. cConEst != "N"
		If Altera
			If !Empty(vDadoAtu[7])
				cFilTQF := MNT655FTQF( StoD(vDadoAtu[3]) , vDadoAtu[7] , vDadoAtu[6] ) //Data / Numseq / Quantidade
			EndIf
		EndIf
	EndIf

	lGrava := IIf(lGrava == Nil,.F.,lGrava)

	If FunName() == "MNTA656"
		cFrota655 := IIf(ReadVar()=='M->TQN_FROTA',M->TQN_FROTA,oBrw1:aCols[n][nPOSFROTA])
		cPosto655 := cPosto
		cLojaP655 := cLoja
		cTanqu655 := cTanque
		cBomba655 := cBomba
		cQuant655 := IIf(ReadVar()=='M->TQQ_QUANT',M->TQQ_QUANT,oBrw1:aCols[n][nPOSQUANT])
		cCNPJ655  := NGSEEK('TQF',cPosto+cLoja,1,'TQF->TQF_CNPJ')
		cCombu655 := NGSEEK('TQI',cPosto+cLoja+cTanque+cCOMB656,1,'TQI->TQI_CODCOM')
		cDtAba655 := oBrw1:aCols[n][nPOSDATAB]
		cHrAba655 := oBrw1:aCols[n][nPOSHORAB]
		lVal655 := .F.
		If Altera
			vDadoAtu := {}
			If Len(aOldCols) < n
				vDadoAtu := {.T.,.T.,.T.,.T.,.T.,oBrw1:aCols[n][nPOSQUANT]}
			Else
				vDadoAtu := {.T.,.T.,.T.,.T.,.T.,aOldCols[n][nPOSQUANT]}
			EndIf
		EndIf
		MNTA656CAP()
	ElseIf IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)
		cFrota655 := M->TQN_FROTA
		cPlaca655 := M->TQN_PLACA
		cPosto655 := M->TQN_POSTO
		cLojaP655 := M->TQN_LOJA
		cTanqu655 := M->TQN_TANQUE
		cBomba655 := M->TQN_BOMBA
		cQuant655 := M->TQN_QUANT
		cCNPJ655  := M->TQN_CNPJ
		cCombu655 := M->TQN_CODCOM
		cDtAba655 := M->TQN_DTABAS
		cHrAba655 := M->TQN_HRABAS
		If !lGrava
			M->TQN_VALTOT := M->TQN_QUANT*M->TQN_VALUNI
		EndIf
	Else
		cFrota655 := IIf(ReadVar()=='M->TQN_FROTA',M->TQN_FROTA,aCols[n][nPOSFROTA])
		cPosto655 := cPosto
		cLojaP655 := cLoja
		cTanqu655 := cTanque
		cBomba655 := cBomba
		cQuant655 := IIf(ReadVar()=='M->TQQ_QUANT',M->TQQ_QUANT,aCols[n][nPOSQUANT])
		cCNPJ655  := NGSEEK('TQF',cPosto+cLoja,1,'TQF->TQF_CNPJ')
		cCombu655 := NGSEEK('TQI',cPosto+cLoja+cTanque,1,'TQI->TQI_CODCOM')
		cDtAba655 := dDataAbast
		cHrAba655 := aCols[n][nPOSHORAB]
		lVal655 := .F.
		MNTA656CAP()
	EndIf

	If ALTERA
	//Verifica Historico de Contador de Bomba
		If NGVDHBomba(cPosto655,cLojaP655,cTanqu655,cBomba655,cDtAba655,cHrAba655,"'2','3'")
			// "Não é possível alterar a quantidade pois já existe Aferição de Bomba com data/hora superior a este abastecimento."
			// "Exclua as Aferições cadastradas com data/hora superior a este abastecimento."
			HELP( ' ', 1, STR0007,, STR0143,2,0,,,,,, { STR0144 } )
			Return .F.
		EndIf
	EndIf

	If !Empty(cPosto655)
		DbSelectArea("TQF")
		DbSetOrder(1)
		DbSeek(xFilial("TQF",cFilTQF)+cPosto655)
	EndIf

	If !Empty(cCNPJ655)
		DbSelectArea("TQF")
		DbSetOrder(2)
		DbSeek(xFilial("TQF",cFilTQF)+cCNPJ655)
	EndIf

	If cConEst == "S"
		If TQF->TQF_TIPPOS == "2"
			If !Empty(cTanqu655)
				DbSelectArea("TQI")
				DbSetOrder(1)
				DbSeek(xFilial("TQI",cFilTQF)+cPosto655+cLojaP655+cTanqu655+cCombu655)
				cCod := TQI->TQI_PRODUT

				If !lEstNeg .And. cUsaInt3 == 'S'
					DbSelectArea("SB2")
					DbSetOrder(1)
					If DbSeek(xFilial("SB2",cFilTQF)+cCod+cTanqu655)
						If !NGSALSB2(cCod,cTanqu655,IIf(!Altera,cQuant655,IIf(cQuant655 > vDadoAtu[6],cQuant655 - vDadoAtu[6],vDadoAtu[6] - cQuant655)),,,cDtAba655)
							Return .F.
						EndIf
					EndIf
				EndIf
			EndIf
		EndIf

	EndIf

	//Alterado lógica da busca do ST9, pois o mesmo estava buscando apenas pelo bem, não considerando a filial.
	If Empty(cPlaca655)
		dbSelectArea("ST9")
		dbSetOrder(1)
		dbSeek(xFilial("ST9")+cFrota655)
	Else
		fBscBemPla(cPlaca655)
	EndIf

	If !Empty(cQuant655)
		If ReadVar()== 'M->TQN_QUANT'
			aRetValTanq := fChkComBem( cFrota655,M->TQN_CODCOM ,ST9->T9_FILIAL )
			If aRetValTanq[1]
				nCapTan := aRetValTanq[2] // Retorna TT8_CAPMAX, capacidade máxima do tanque do bem
			EndIf
			If M->TQN_VALUNI == 0 .And. !MNA655HR()
				Return .F.
			EndIf
		EndIf
		MNTA655PUNI(cFilTQF,.T.) //atualiza capacidade maxima
		If cQuant655 > IIf(nCapTan <> 0 ,nCapTan,ST9->T9_CAPMAX)
			HELP(" ",1,STR0007,, STR0015 + "("+AllTrim(Str(IIf(nCapTan <> 0 ,nCapTan,ST9->T9_CAPMAX)))+").",3,1) //"ATENÇÃO"### //"Quantidade de combustivel supera a Capaci-"###"dade maxima "
			RestArea(aArea)
			Return .F.
		EndIf
	Else
		If IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)
			HELP(" ",1,STR0007,,STR0016,3,1) //"ATENÇÃO"###"Preencha a quantidade de combustivel."
			RestArea(aArea)
			Return .F.
		EndIf
	EndIf

	If GetNewPar("MV_NGPRSB2","N") == "S" .And. lVal655 .And. !lGrava
		M->TQN_VALTOT := cQuant655 * M->TQN_VALUNI
		lValTot := .F.
		If Altera
			lPrev := .F.
		EndIf
	EndIf

	If IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)
		lChkLote := .F.
		If AllTrim(	SuperGetMV("MV_NGMNTES",.F.,"N")) == 'S' .And. !Empty(cCod) .And. ((AllTrim(SuperGetMV("MV_RASTRO",.F.,"N")) == 'S' .And. ;
		   NGSEEK('SB1',cCod,1,"B1_RASTRO") <> "N") .Or. (AllTrim(SuperGetMV("MV_LOCALIZ",.F.,"N")) == 'S' .And. NGSEEK('SB1',cCod,1,"B1_LOCALIZ") == "S"))
			lChkLote := .T.
		EndIf

		If lChkLote
			If Len(vRastro) == 0
				cNComb	:= NGSEEK('TQM',M->TQN_CODCOM,1,'TQM->TQM_NOMCOM')
				vRastro 	:= NGINFRASTRO(cNComb,cCod,M->TQN_DTABAS,0,cQuant655)
				If !vRastro[7]
					vRastro := {}
					RestArea(aArea)
					Return .F.
				EndIf
			Else
				If !NGCHKFRASTO(cCod,M->TQN_DTABAS,vRastro[2],vRastro[3],vRastro[1],vRastro[4],vRastro[5],cQuant655)
					vRastro := {}
					RestArea(aArea)
					Return .F.
				EndIf
			EndIf
		EndIf
	EndIf
	MNA655ATT()

	RestArea(aArea)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNA655KM  ³ Autor ³Heverson Vitoreti      ³ Data ³ 27/01/06 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Calculo da autonomia do veiculo em Km/L                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNA655KM()
Local aArea   := GetArea()
Local nKml    := 0
Local nHodom  := M->TQN_HODOM
Local nQuant  := M->TQN_QUANT
Local nFrota  := M->TQN_FROTA
Local nPlaca  := M->TQN_PLACA
Local dMaDt   := "  /  /  "
Local dDtAbas := M->TQN_DTABAS
Local nRecno

DbSelectArea("TQN")
DbSetOrder(1)
DbSeek(xFilial("TQN")+nFrota)
dMaDt := TQN->TQN_DTABAS
Do While !EoF() .And. xFilial("TQN") == TQN->TQN_FILIAL .And.;
										  TQN->TQN_FROTA == nFrota .And.;
										  TQN->TQN_PLACA == nPlaca

	If TQN->TQN_DTABAS > dMaDt
		DbSelectArea("TQN")
		DbSkip()
		Loop
	EndIf

	If dMaDt < TQN->TQN_DTABAS .And. TQN->TQN_DTABAS > dDtAbas
		DbSelectArea("TQN")
		DbSkip()
		Loop
	EndIf

	dMaDT  := TQN->TQN_DTABAS
	nRecno := Recno()
   DbSelectArea("TQN")
   DbSkip()

End

If !Empty(nRecno)
	DbGoTo(nRecno)

	If TQN->TQN_DTABAS < dDtAbas
		nKml := (nHodom - TQN->TQN_HODOM)/nQuant
	Else
		nKml := nHodom/nQuant
	EndIf

Else
	nKml := nHodom/nQuant
EndIf

RestArea(aArea)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNA655HO  ³ Autor ³Heverson Vitoreti      ³ Data ³ 27/01/06 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Validacao do hodometro                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNA655HO(nTpContador)

	Local aArea      := GetArea()
	Local lValCont2  := .F.

	cPrvBemClk := MNT655PREV()

	If FunName() == "MNTA656"
		cFrota655 := IIf(ReadVar()=='M->TQN_FROTA',M->TQN_FROTA,oBrw1:aCols[n][nPOSFROTA])
		cHodom655 := IIf(ReadVar()=='M->TQN_HODOM',M->TQN_HODOM,oBrw1:aCols[n][nPOSHODOM])
		cFiliST9  := ST9->T9_FILIAL
	ElseIf IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)

		cFrota655 := M->TQN_FROTA
		cHodom655 := M->TQN_HODOM
		cPlaca655 := M->TQN_PLACA

		If lSegCont .And. nTpContador == 2
			//FindFunction remover na release GetRPORelease() >= '12.1.027'
			If FindFunction("MNTCont2")
				lValCont2 := MNTCont2(xFilial("TPE"), cFrota655)
			Else
				lValCont2 := MNT6552CNT(xFilial("TPE"),cFrota655) //Verifica se existe contador e/ou está ativado.
			EndIf
			If lValCont2
				cHODOM655 := M->TQN_POSCO2
			EndIf
		EndIf

		If !Empty(M->TQN_PLACA)
		    fBscBemPla(M->TQN_PLACA)
			cFilBem := ST9->T9_FILIAL
		EndIf

	Else
		cFrota655 := IIf(ReadVar()=='M->TQN_FROTA',M->TQN_FROTA,aCols[n][nPOSFROTA])
		cHodom655 := IIf(ReadVar()=='M->TQN_HODOM',M->TQN_HODOM,aCols[n][nPOSHODOM])
		If Type("M->TQN_PLACA") <> "U"
			If !Empty(M->TQN_PLACA)
				cPlaca655 := M->TQN_PLACA
			EndIf
		EndIf

		cFiliST9 := ST9->T9_FILIAL
	EndIf

	If lSegCont .And. nTpContador == 2
   		cHodom655 := M->TQN_POSCO2
	EndIf

	DbSelectArea("TQN")
	If Empty(cFilBem)
		cFilBem := TQN->TQN_FILIAL
	EndIf

	If !CHKPOSLIM(cFrota655,cHodom655,nTpContador,cFilBem)
		Return .F.
	EndIf

	If !MNTA655ALTH(nTpContador)
	   Return .F.
	EndIf

	MNA655ATT()

	RetPicVar()
	RestArea(aArea)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNA655ATT ³ Autor ³Felipe N. Welter       ³ Data ³ 05/11/08 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Atualiza campos visuais de media                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNA655ATT()

	Local lValCont2 := .F.
	cPrvBemClk := MNT655PREV()

	If !IsInCallStack( 'MNTA655' ) .And. FunName() != "MNTA700" .And. Empty(cPrvBemClk)
		Return .T.
	EndIf

	dbSelectArea("TQN")

	dbSelectArea("ST6")

	cTpUn1 := NGSEEK('ST6',ST9->T9_CODFAMI,1,'T6_MEDIA1')
	cTpUn1 := IIf(Empty(cTpUn1),"1",cTpUn1)

	nAcumAba      := 0
	vRetApBe      := NGACUMEHIS(M->TQN_FROTA,M->TQN_DTABAS,M->TQN_HRABAS,1,"A",cFilBem,'STP->TP_TIPOLAN = "A" .Or. STP->TP_TIPOLAN = "I"',.T., M->TQN_PLACA)
	M->TQN_HODANT := vRetApBe[1]
	M->TQN_VARDIA := vRetApBe[6]
	nAcumAba      := vRetApBe[2]

	M->TQN_KMROD := 0
	If M->TQN_HODOM > 0
		vRetApBe     := NGACUMEHIS(M->TQN_FROTA,M->TQN_DTABAS,M->TQN_HRABAS,1,"A",,,.T.,M->TQN_PLACA)
		nAcumHis     := vRetApBe[2]+(M->TQN_HODOM-vRetApBe[1])
		M->TQN_KMROD := nAcumHis - nAcumAba
	EndIf

	If cTpUn1 = "1"
		M->TQN_MEDIA := IIf(M->TQN_KMROD > 0,M->TQN_KMROD/M->TQN_QUANT,0)
	Else
		M->TQN_MEDIA := IIf(M->TQN_KMROD > 0,M->TQN_QUANT/M->TQN_KMROD,0)
	EndIf

	If lSegCont
		//FindFunction remover na release GetRPORelease() >= '12.1.027'
		If FindFunction("MNTCont2")
			lValCont2 := MNTCont2(xFilial("TPE"), M->TQN_FROTA)
		Else
			lValCont2 := MNT6552CNT(xFilial("TPE"),M->TQN_FROTA) //Verifica se existe contador e/ou está ativado.
		EndIf
		If lValCont2
			cTpUn2 := NGSEEK('ST6',ST9->T9_CODFAMI,1,'T6_MEDIA2')
			cTpUn2 := IIf(Empty(cTpUn2),"1",cTpUn2)

			nAcumAba      := 0
			vRetApBe      := NGACUMEHIS(M->TQN_FROTA,M->TQN_DTABAS,M->TQN_HRABAS,2,"A",,'TPP->TPP_TIPOLA = "A" .Or. TPP->TPP_TIPOLA = "I"',.T.,M->TQN_PLACA)
			M->TQN_HODAN2 := vRetApBe[1]
			M->TQN_VARDI2 := vRetApBe[6]
			nAcumAba      := vRetApBe[2]

			M->TQN_KMROD2 := 0
			If M->TQN_POSCO2 > 0
				vRetApBe      := NGACUMEHIS(M->TQN_FROTA,M->TQN_DTABAS,M->TQN_HRABAS,2,"A",,,.T.,M->TQN_PLACA)
				nAcumHis      := vRetApBe[2]+(M->TQN_POSCO2-vRetApBe[1])
				M->TQN_KMROD2 := nAcumHis - nAcumAba
			EndIf

			If cTpUn2 = "1"
				M->TQN_MEDI2 := IIf(M->TQN_KMROD2 > 0,M->TQN_KMROD2/M->TQN_QUANT,0)
			Else
				M->TQN_MEDI2 := IIf(M->TQN_KMROD2 > 0,M->TQN_QUANT/M->TQN_KMROD2,0)
			EndIf
		EndIf
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT655VAL ³ Autor ³Heverson Vitoreti      ³ Data ³ 15/02/06 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Validacao dos campos                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNT655VAL(aREP)
Local aArea     := GetArea()
Local lRet      := .T., cFUN      := " "
Local nCAPMAX   := 0  , cPOSTO    := " " , cLOJA     := " "
Local nIndSRA, cSeekSRA, dDemissao
Local nValNeg
Local cNGMNTRH  := AllTrim(SuperGetMV("MV_NGMNTRH",.F.,"N"))

If !Empty(aRep[1][2])
	DbSelectArea("ST9")
	DbSetOrder(14)
	If DbSeek(aRep[1][2])
	 	nCAPMAX := ST9->T9_CAPMAX
	ElseIf Len(AllTrim(aRep[1][2])) <> 7 //placa invalida
		HELP(" ",1,STR0007,,STR0022,3,1) //"ATENÇÃO"###"Placa invalida."
		lRet := .F.
	EndIf
Else
	DbSelectArea("ST9")
	DbSetOrder(16)
	If DbSeek(aRep[1][15])
		nCAPMAX := ST9->T9_CAPMAX
	EndIf
EndIf
If T9_DTCOMPR > M->TQN_DTABAS
	HELP(" ",1,STR0007,,STR0076,3,1) //"ATENÇÃO"###"Data da Compra do Veículo é maior que a Data do abastecimento."
	lRet := .F.
EndIf

If aRep[1][9] == 0 //Valor abastecimento zerado
	HELP(" ",1,STR0007,,STR0025,3,1) //"ATENÇÃO"###"Valor abastecido igual a zero."
	lRet := .F.
EndIf


If !lComboio .Or. (lComboio .And. NGSEEK("TQF",aRep[1][13]+aRep[1][14],1,"TQF_COMBOI") == '2')
	//Verifica se o posto é diferente de posto comum verifica se esta preenchido o CNPJ
	If NGSEEK("TQF",aRep[1][13]+aRep[1][14],1,"TQF_CONVEN") <> '4'
		If Empty(aRep[1][4])  //CNPJ nao informado
			HELP(" ",1,STR0007,,STR0026,3,1)    //"ATENÇÃO"###"CNPJ do posto nao informado."
			lRet := .F.
		ElseIf cPaisLoc == 'BRA' .And. !CNPJ655(aRep[1][4]) //CNPJ invalido
			HELP(" ",1,STR0007,,STR0027,3,1)    //"ATENÇÃO"###"CNPJ invalido."
			lRet := .F.
		EndIf
	EndIf
EndIf

DbSelectArea("TQF")
DbSetOrder(1)
If !DbSeek(xFilial("TQF")+aRep[1][13]+aRep[1][14]) //posto nao cadastrado
	HELP(" ",1,STR0007,,STR0028,3,1) //"ATENÇÃO"###"Posto nao cadastrado."
	lRet := .F.
Else
	cPOSTO := TQF->TQF_CODIGO
	cLOJA  := TQF->TQF_LOJA
EndIf

If lRet .And. GetNewPar("MV_NGPRSB2","N") == "N" .And. AllTrim( SuperGetMV( 'MV_NGCONEG', .F., 'S' ) ) == 'S' .And. TQF->TQF_TIPPOS != '3'
	DbSelectArea("TQH")
	DbSetOrder(1)
	If DbSeek(xFilial("TQH")+cPOSTO+cLOJA+aRep[1][3])
		While !Eof() .And. TQH->TQH_FILIAL = xFILIAL("TQH") .And. TQH->TQH_CODPOS == cPOSTO;
	   	          .And. TQH->TQH_LOJA == cLOJA .And. TQH->TQH_CODCOM == aRep[1][3]

			If DTOS(TQH->TQH_DTNEG)+TQH->TQH_HRNEG <= DTOS(aRep[1][10])+aRep[1][11]//TQH->TQH_DTNEG <= aRep[1][10]
				nVALNEG := TQH->TQH_PRENEG
			EndIf
			DbSelectArea("TQH")
			DbSkip()
		End

		DbSelectArea("TQF")
		DbSetOrder(1)
		DbSeek(xFilial("TQF")+M->TQN_POSTO+M->TQN_LOJA)
		If TQF->TQF_TIPPOS <> "3"

		   If nVALNEG <> aRep[1][8] .And. nVALNEG <> 0 .And. !Empty(nVALNEG)//divergencia valor negociado
   		      lRet := .F.
		   ElseIf nVALNEG == 0 //Valor negociado igual a zero
  			  lRet := .F.
		   EndIf
		EndIf
	Else  //nao ha valor negociado para esse posto
		DbSelectArea("TQF")
		DbSetOrder(1)
		DbSeek(xFilial("TQF")+M->TQN_POSTO+M->TQN_LOJA)
		If TQF->TQF_TIPPOS == "1"
			If ExistBlock("MNTA6557")
				If !ExecBlock("MNTA6557",.F.,.F.,{M->TQN_POSTO,M->TQN_LOJA,M->TQN_CNPJ})
					Return .F.
				EndIf
			Else
				HELP(" ",1,STR0007,,STR0040+Chr(10)+Chr(13)+STR0041,3,1) //"ATENÇÃO"### //"Nao ha uma negociaçao anterior a esse abas-"###"tecimento."
			EndIf
		EndIf
	EndIf
EndIf

If aRep[1][7] > IIf(nCapTan <> 0,nCapTan,nCAPMAX) //litragem maior que a maxima permitida
	HELP(" ",1,STR0007,,STR0033,3,1)    //"ATENÇÃO"###"Litragem maior que a maxima permitida."
	lRet := .F.
EndIf

If !Empty(aRep[1][5]) //Motorista nao informado
   DbSelectArea("DA4")
   DbSetOrder(1)
   If !DbSeek(xFilial("DA4")+aRep[1][5]) //CPF motorista nao existe no cadastro de funcionarios
      HELP(" ",1,STR0007,,STR0034,3,1) //"ATENÇÃO"###"Matricula do funcionario nao existe."
	  lRet := .F.
   EndIf
EndIf

cFUN := NGSEEK('DA4',aRep[1][5],1,'DA4->DA4_MAT')
If cNGMNTRH == "S"

	If NGCADICBASE("DA4_EMPBAS","A","DA4",.F.) .And. !Empty(DA4->DA4_EMPBAS)
		NGPrepTBL({{"SRA"}},DA4->DA4_EMPBAS)
	EndIf

	dDemissao := STOD("")
	nIndSRA := 13
	cSeekSRA := DA4->DA4_MAT
	If NGCADICBASE("DA4_FILBAS","A","DA4",.F.) .And. !Empty(DA4->DA4_FILBAS)
		nIndSRA := 1
		cSeekSRA := DA4->DA4_FILBAS+DA4->DA4_MAT
	EndIf

	DbSelectArea("SRA")
	DbSetOrder(nIndSRA)
	If DbSeek(cSeekSRA)
		If nIndSRA == 1
			dDemissao := SRA->RA_DEMISSA
		Else
			While !Eof() .And. SRA->RA_MAT == DA4->DA4_MAT

				If Empty(SRA->RA_DEMISSA)
					dDemissao := Ctod("  /  /  ")
					Exit
				ElseIf SRA->RA_DEMISSA > dDemissao
					dDemissao := SRA->RA_DEMISSA
				EndIf

				DbSelectArea("SRA")
				dbSkip()
			End
		EndIf
	EndIf

	If !Empty(dDemissao) .And. dDemissao < aRep[1][10] //Abastecimento apos a demissao
	    HELP(" ",1,STR0007,,STR0057+Chr(13)+STR0036,3,1)   //"ATENÇÃO"###"Abastecimento apos demissao."
		lRet := .F.
	EndIf

	If NGCADICBASE("DA4_EMPBAS","A","DA4",.F.) .And. !Empty(DA4->DA4_EMPBAS)
		NGPrepTBL({{"SRA"}},SM0->M0_CODIGO)
	EndIf

EndIf

RestArea(aArea)

DbSeek("TQN")
DbSetOrder(01)

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNA655PLACA³ Autor ³Heverson Vitoreti      ³ Data ³ 15/02/06 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Validacao da placa                                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNT655PLACA()

	Local lRETVH    := .T.
	Local lAtivo    := .F.
	Local aOldArea  := GetArea()
	Local cFrota655 := ""
	Local l655Auto  := Type( 'aRotAuto' ) != 'U'

	cPrvBemClk := MNT655PREV()

	If FunName() == "MNTA656"
		dbSelectArea("ST9")
		dbSetOrder(16)
		dbSeek(If(ReadVar()=='M->TQN_FROTA',M->TQN_FROTA,oBrw1:aCols[n][nPOSFROTA]))
		cPlaca655 := ST9->T9_PLACA
	ElseIf IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)

		cPlaca655 := M->TQN_PLACA
	Else
		dbSelectArea("ST9")
		dbSetOrder(16)
		dbSeek(If(ReadVar()=='M->TQN_FROTA',M->TQN_FROTA,aCols[n][nPOSFROTA]))
		cPlaca655 := ST9->T9_PLACA
	Endif

	If Empty(cPlaca655) .And. Empty(cPrvBemClk)
		M->TQN_FROTA := Space(TAMSX3('TQN_FROTA')[1])
		cBemAnt      := ""
		Return .T.
	EndIf

    // Alterado busca da ST9 para validar apenas pela placa, se não encontrar registro, informa que não existe.
	fBscBemPla(cPlaca655)

	If ST9->T9_SITBEM != 'A'
		While !Eof() .And. ST9->T9_PLACA == cPlaca655
			If ST9->T9_SITBEM == 'A'
				cFilBem   := ST9->T9_FILIAL
				cFrota655 := ST9->T9_CODBEM
				cBemAnt   := ST9->T9_CODBEM // Na digitação da placa, o bem é salvo em uma variavel de 'BKP'
				lnAchoBem := .T.
				lATIVO    := .T.
			EndIf
			dbSkip()
		End
	Else
		cFilBem   := ST9->T9_FILIAL
		cFrota655 := ST9->T9_CODBEM
		cBemAnt   := ST9->T9_CODBEM // Na digitação da placa, o bem é salvo em uma variavel de 'BKP'
		lnAchoBem := .T.
		lATIVO    := .T.
	EndIf

	If cPlaca655 <> ST9->T9_PLACA
		HELP(" ",1,STR0007,,STR0022,3,1) //"ATENÇÃO"###"Placa Invalida."
		lRETVH := .F.
		Return .F.
	EndIf

	If !lATIVO .And. lRETVH
		HELP(" ",1,STR0007,,STR0077,3,1) //"ATENÇÃO"###"Veículo Inativo!"
		lRETVH := .F.
		Return .F.
	EndIf

	If Inclui
		M->TQN_AUTO   := "2"
		M->TQN_USUARI := SubStr(cUsuario,7,15)
	EndIf

	//When dos campos Contador/Segundo Contador e Motorista ao digitar a placa ao invés de usar a consulta padrão (F3)
	TIPOACOM := If(ST9->T9_TEMCONT = "S",.T.,.F.)

	//Validação para fazer a busca dos contadores anterior. Essa validação só fazia para quando o bem fosse alterado.
	//Porém deve fazer a busca novamente caso a placa também tenho sido alterado.
	//FindFunction remover na release GetRPORelease() >= '12.1.027'
	If FindFunction('MNTCont2')
		TIPOACOM2 := MNTCont2(cFilBem, cFrota655)
	Else
		If MNT6552CNT(IIf(NGSX2MODO("TPE")="E",cFilBem,xFilial("TPE")),cFrota655) //Verifica se existe contador e/ou está ativado.
			TIPOACOM2     := .T.
			Store 0 To M->TQN_POSCO2,M->TQN_HODAN2,M->TQN_KMROD2,M->TQN_VARDI2
			M->TQN_DTAAN2 := Ctod("  /  /    ")
			M->TQN_HRAAN2 := "  :  "
			M->TQN_MEDI2  := 0.00
			If lSegCont
				MNT655AN2()
				If !l655Auto
					oPanel22:Show()
				EndIf
			EndIf
		Else
			TIPOACOM2     := .F.
		Endif
	EndIf
	If !TIPOACOM2
		M->TQN_POSCO2 := 0
		If !l655Auto
			oPanel22:Hide()
		EndIf
	EndIf

	RestArea(aOldArea)

Return lRETVH

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNA655NA   ³ Autor ³Heverson Vitoreti      ³ Data ³ 15/02/06 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Autonumeraçao do numero do abastecimento                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNA655NA()

	Local aArea  := GetArea()

	If Empty(cFilBem)
		cFilBem := xFilial('TQN')
	EndIf
	nseq  := '000000000000000'
	DbSelectArea('TQN')
	DbSetOrder(4)
	DbSeek(xFilial('TQN',cFilTQN)+"ZZZZZZZZZZZZZZZ",.T.)
	If !Eof()
		DbSkip(-1)
		If !Bof()
			nSeq := TQN->TQN_NABAST
		Else
			DbSkip()
			nSeq := TQN->TQN_NABAST
		EndIf
	EndIf
	nSeq := Soma1(nSeq)

	RestArea(aArea)

Return nSeq

//-------------------------------------------------------------------
/*/{Protheus.doc} MNT655EXIST
Validacao da Frota

@author  Heverson Vitoreti
@since   15/02/06
@version P11/P12
/*/
//-------------------------------------------------------------------
Function MNT655EXIST()

	Local lATIVO    := .F.
	Local nIndST9   := 1
	Local cFilST9   := ST9->T9_FILIAL
	Local lnAchoBem := .F. //variavel para verificar se o bem existe
	Local l655Auto  := Type( 'aRotAuto' ) != 'U'

	cPrvBemClk := MNT655PREV()
	If Type('cBemAnt') == 'U'
		cBemAnt := ''
	EndIf

	If cBemAnt <> M->TQN_FROTA
		// Validação feita para verificar se o bem selecionado é diferente do que foi gatilhado ao selecionar a placa.
		// Logica criado pois ao digitar a placa é gatilhado o veiculo corretamente, no entanto, ao passar pelo campo
		// Frota o sistema está disparando o valid da placa. (Ocorre em alguns casos especificos)
		// Essa nova busca está dando erro, pois pode ocorrer de o cliente possuir o mesmo código de bem, porém placas
		// e filiais diferentes. Sendo assim ao digitar a placa de outra filial, e passar pelo campo frota, ele irá buscar o bem
		// pela filial/frota corrente alterando a placa. Ou seja, outro bem do que foi digitado.
		// NÃO ALTERAR
		// Autor: Maicon André Pinheiro

		If FunName() == "MNTA656"
			cFrota655 := If(ReadVar()=='M->TQN_FROTA',M->TQN_FROTA,oBrw1:aCols[n][nPOSFROTA])
			dbSelectArea("ST9")
			dbSetOrder(16)
			dbSeek(cFrota655)
			cPlaca655 := ST9->T9_PLACA
		ElseIf IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)
			cFrota655 := M->TQN_FROTA
			cPlaca655 := M->TQN_PLACA
		Else
			cFrota655 := If(ReadVar()=='M->TQN_FROTA',M->TQN_FROTA,aCols[n][nPOSFROTA])
			dbSelectArea("ST9")
			dbSetOrder(nIndST9)
			dbSeek(cFilST9+cFrota655)
			cPlaca655 := ST9->T9_PLACA
		EndIf

		If Inclui
			M->TQN_AUTO   := "2"
			M->TQN_USUARI := SubStr(cUsuario,7,15)
		EndIf

		dbSelectArea("ST9")
		dbSetOrder(1)
		If dbSeek(xFilial('ST9') + cFrota655)
			If ST9->T9_SITBEM != 'A'
				While !Eof() .And. ST9->T9_FILIAL == xFilial("ST9") .And. ST9->T9_CODBEM == cFrota655
					If ST9->T9_SITBEM == 'A'
						cFILBEM   := ST9->T9_FILIAL
						lnAchoBem := .T.
						Exit
					EndIf
					dbSelectArea("ST9")
					dbSkip()
				End
			Else
				cFILBEM   := ST9->T9_FILIAL
				lnAchoBem := .T.
			EndIf
		EndIf

		If !lnAchoBem
			HELP(" ",1,STR0007,,STR0037,3,1) //"ATENÇÃO"###"Veiculo não cadastrado."
			Return .F.
		EndIf

		If IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)
			//FindFunction remover na release GetRPORelease() >= '12.1.027'
			If FindFunction('MNTCont2')
				TIPOACOM2 := MNTCont2(cFilBem, cFrota655)
			Else
				If MNT6552CNT(IIf(NGSX2MODO("TPE")="E",cFilBem,xFilial("TPE")),cFrota655) //Verifica se existe contador e/ou está ativado.
					TIPOACOM2     := .T.
					Store 0 To M->TQN_POSCO2,M->TQN_HODAN2,M->TQN_KMROD2,M->TQN_VARDI2
					M->TQN_DTAAN2 := Ctod("  /  /    ")
					M->TQN_HRAAN2 := "  :  "
					M->TQN_MEDI2  := 0.00
					If lSegCont
						MNT655AN2()
						If !l655Auto
							oPanel22:Show()
						EndIf
					EndIf
				Else
					 TIPOACOM2 := .F.
				EndIf
			EndIf

			If !TIPOACOM2
				M->TQN_POSCO2 := 0
				If !l655Auto
					oPanel22:Hide()
				EndIf
			EndIf
		EndIf

		dbSelectArea("ST9")
		dbSetOrder(1)
		If !dbSeek(cFilBem+cFrota655)
			HELP(" ",1,STR0007,,STR0037,3,1) //"ATENÇÃO"###"Veiculo não cadastrado."
			Return .F.
		Else
			M->TQN_PLACA  := ST9->T9_PLACA
			M->TQN_DESFRO := ST9->T9_NOME
			Store 0 To M->TQN_HODOM,M->TQN_HODANT,M->TQN_KMROD,M->TQN_VARDIA
			M->TQN_DTAANT := Ctod("  /  /    ")
			M->TQN_HRAANT := "  :  "
			M->TQN_MEDIA  := 0.00
			TIPOACOM := If(ST9->T9_TEMCONT = "S",.T.,.F.)
			If IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)
				If TIPOACOM .And. lSegCont //Verifica se o campo existe (UPDITA02)
					M->TQN_DTAAN2 := STOD("  /  /  ")
					M->TQN_HRAAN2 := "  :  "
					Store 0 To M->TQN_HODAN2,M->TQN_VARDI2,M->TQN_KMROD2,M->TQN_MEDI2,M->TQN_POSCO2
					MNT655ANT(0)

					MNT655AN2()
					If !l655Auto
						oPanelCont:Show()
					EndIf
				Else
					M->TQN_HODOM := 0
					If !l655Auto
						oPanelCont:Hide()
					EndIf
				EndIf
			EndIf
		EndIf

		If ST9->T9_SITBEM != 'A'
			While !Eof() .And. ST9->T9_PLACA == cPlaca655
				If ST9->T9_SITBEM = 'A'
					lATIVO := .T.
				EndIf
				dbSkip()
			End
		Else
			lATIVO := .T.
		EndIf
		If !lATIVO
			HELP(" ",1,STR0007,,STR0077,3,1) //"ATENÇÃO"###"Veículo Inativo!"
			Return .F.
		EndIf

	Else
		//Caso a bem gatilhado da placa seja igual ao da memória, irá zerar a variavel, para caso o cliente
		//selecionar o bem via consulta padrão, irá fazer as validações corretamente.
		cBemAnt := ''
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³CNPJ655   ³ Autor ³ Evaldo Cevinscki Jr   ³ Data ³27/01/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Valida CNPJ                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³MNTA655                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function CNPJ655(Num)

	Local vRet := NGCPFCGC(Alltrim(Num),IIf(Len(Alltrim(Num)) =14,"J","F"),.F.)

Return IIf(vRet[1],.T.,.F.)

//-------------------------------------------------------------------
/*/{Protheus.doc} MNA655HR
Validação do preço negociado.
@type function

@author  Heverson Vitoreti
@since   27/01/2006

@param   [cFilTQF], string , Filial TQF
@param   [lVldOk] , boolean, Indica que o processo foi acionado na valid. de gravação.
@return  Lógico, define se há alguma inconsistência.
/*/
//-------------------------------------------------------------------
Function MNA655HR( cFilTQF, lVldOk )

	Local dData
	Local sHora     := ""
	Local sMinu     := ""
	Local aArea     := GetArea()
	Local cUltDtH   := " "
	Local nRecno    := 0
	Local cHora     := ""
	Local lTTV      := .F.
	Local cConNeg   := GetNewPar("MV_NGCONEG","S") //Verficar se é obrigatorio a negociação para os Postos.
	Local lMMoeda   := NGCADICBASE("TL_MOEDA","A","STL",.F.) // Multi-Moeda
	Local cCOMB656  := IIf(Type("cTTAComb") <> 'U',cTTAComb,"")
	Local cPlaca655 := ""
	Local l655Auto  := Type( 'aRotAuto' ) != 'U'
	Local cVarAux   := ReadVar()
	Local cVarName  := SubStr( cVarAux, At( '>', cVarAux ) + 1, Len( cVarAux ) )
	Local lMNTA656  := FunName() == "MNTA656"

	Default cFilTQF := cFilAnt
	Default lVldOk  := .F.

	cPrvBemClk := MNT655PREV()

	If lMNTA656
		
		cFrota655 := IIf( cVarName == 'TQN_FROTA' , M->TQN_FROTA , oBrw1:aCols[n,nPOSFROTA] )
		dDatAb655 := IIf( cVarName == 'TQN_DTABAS', M->TQN_DTABAS, oBrw1:aCols[n,nPOSDATAB] )
		cHorAb655 := IIf( cVarName == 'TQN_HRABAS', M->TQN_HRABAS, oBrw1:aCols[n,nPOSHORAB] )
		cPlaca655 := IIf( cVarName == 'TQN_PLACA' , M->TQN_PLACA , oBrw1:aCols[n,nPOSPLACA] )
		cNumAbast := oBrw1:aCols[n,nPOSNABAS]
		cNotaF655 := cFolha
		cPosto655 := cPosto
		cLojaP655 := cLoja
		cBomba655 := cBomba
		cTanqu655 := cTanque
		cCombu655 := NGSEEK('TQI',cPosto+cLoja+cTanque+cCOMB656,1,'TQI->TQI_CODCOM')
		
		If lTpLub
			Return .T.
		EndIf

	ElseIf IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk) .Or. l655Auto
		
		cFrota655 := M->TQN_FROTA
		dDatAb655 := M->TQN_DTABAS
		cHorAb655 := M->TQN_HRABAS
		cNotaF655 := M->TQN_NOTFIS
		cPosto655 := M->TQN_POSTO
		cLojaP655 := M->TQN_LOJA
		cCombu655 := M->TQN_CODCOM
		cBomba655 := M->TQN_BOMBA
		cTanqu655 := M->TQN_TANQUE
		cPlaca655 := M->TQN_PLACA
		cNumAbast := M->TQN_NABAST

	Else
		cFrota655 := IIf( cVarName == 'TQN_FROTA' , M->TQN_FROTA , aCols[n,nPOSFROTA] )
		dDatAb655 := dDataAbast
		cHorAb655 := IIf( cVarName == 'TQN_HRABAS', M->TQN_HRABAS, aCols[n,nPOSHORAB] )
		cNotaF655 := cFolha
		cPosto655 := cPosto
		cLojaP655 := cLoja
		cBomba655 := cBomba
		cTanqu655 := cTanque
		cCombu655 := NGSEEK('TQI',cPosto+cLoja+cTanque,1,'TQI->TQI_CODCOM')
	EndIf

	//checa por exemplo se data de abastecimento esta dentro do periodo contabil
	If ExistBlock("MNTA6552")
		If !ExecBlock("MNTA6552", .F. , .F. )
			Return .F.
		EndIf
	EndIf

	If Alltrim(cHorAb655) == ":"
		Return .T.
	EndIf

	sHora := SubStr(cHorAb655,1,2)
	sMinu := SubStr(cHorAb655,4,2)

	If (sHora > "23" .Or. sMinu > "59" .Or. sHora < "00" .Or. sMinu < "00") .And. !(Alltrim(cHorAb655) == ":" .Or. Empty(cHorAb655))
		HELP(" ",1,STR0007,,STR0078,3,1) //"ATENÇÃO"###"Hora de abastecimento não pode ser maior que 23:59."
		Return .F.
	EndIf

	cHora := SubStr(Time(),1,5)
	dData := dDataBase

	If cHorAb655 > cHora .And. dData == dDatAb655
		HELP(" ",1,STR0007,,STR0079,3,1) //"ATENÇÃO"###"Hora do abastecimento não pode ser superior à hora da data atual."
		Return .F.
	EndIf

	If INCLUI .Or. lMNTA656

		dbSelectArea( 'TQN' )
		dbSetOrder( 1 )
		If dbSeek( xFilial( 'TQN' ) + cFrota655 + DToS( dDatAb655 ) + cHorAb655 ) .And.;
			cNumAbast != TQN->TQN_NABAST

			Help( '', 1, STR0007, ,;                  // Atenção
				STR0080 + CRLF + CRLF +;              // Já existe uma reporte com estas características: 
				STR0201 + Trim( cFrota655 ) + CRLF +; // Veículo: XXXXXXX
				STR0119 + DToC( dDatAb655 ) + CRLF +; // Data: XX/XX/XXXX
				STR0120 + Trim( cHorAb655 ), 3, 1 )   // Hora: XX:XX

			RestArea( aArea )

			Return .F.

		EndIf

	EndIf

	//Valida se foi inicializado Historico do Contador da Bomba
	If INCLUI .And. cHorAb655 != "  :  " .And. !Empty(dDatAb655) .And. !Empty(cTanqu655) .And. !Empty(cBomba655)
		DbSelectArea("TQF")
		DbSetOrder(1)
		DbSeek(xFilial("TQF",cFilTQF)+cPosto655+cLojaP655)
		If TQF->TQF_TIPPOS == '2'
			lTTV := .F.
			DbSelectArea("TTV")
			DbSetOrder(1)
			If DbSeek(xFilial("TTV")+cPosto655+cLojaP655+cTanqu655+cBomba655)
				If TTV->TTV_DATA < dDatAb655 .Or. (TTV->TTV_DATA == dDatAb655 .And. TTV->TTV_HORA < cHorAb655)
					lTTV := .T.
				EndIf
			EndIf

			If !lTTV
				// "Inclusão não permitida pois não existe histórico do Contador da Bomba com Data/Hora inferior a informada."
				// "Informe um contador inicial no cadastro de Tanque/Bomba."
				HELP( ' ', 1, STR0007,, STR0141, 2, 0,,,,,, { STR0142 } )
				Return .F.
			EndIf
		EndIf
	EndIf

	DbSelectArea("TQF")
	DbSetOrder(1)
	DbSeek(xFilial("TQF",cFilTQF)+cPosto655+cLojaP655)
	If TQF->TQF_TIPPOS <> "3" .And. !(TQF->TQF_TIPPOS == "2" .And. GetNewPar("MV_NGPRSB2","N") == "S")

		DbSelectArea("TQH")
		DbSetOrder(1)
		DbSeek(xFilial("TQH",cFilTQF)+cPosto655+cLojaP655+cCombu655)
		cUltDtH := DTOS(TQH->TQH_DTNEG)+TQH->TQH_HRNEG
		Do while !EoF() .And. xFilial("TQH",cFilTQF) == TQH->TQH_FILIAL .And. TQH->TQH_CODPOS == cPosto655 .And.;
				TQH->TQH_LOJA == cLojaP655 .And.;
				TQH->TQH_CODCOM == cCombu655

			If cUltDtH > DTOS(TQH->TQH_DTNEG)+TQH->TQH_HRNEG .Or. DTOS(TQH->TQH_DTNEG)+TQH->TQH_HRNEG > DTOS(dDatAb655)+cHorAb655
				DbSelectArea("TQH")
				DbSkip()
				Loop
			EndIf

			cUltDtH := DTOS(TQH->TQH_DTNEG)+TQH->TQH_HRNEG
			nRecno := Recno()
			DbSelectArea("TQH")
			DbSkip()

		EndDo

		If cConNeg == 'S'
			
			If !Empty( nRecno )
				
				DbGoTo(nRecno)
				
				If GetNewPar("MV_NGPRSB2","N") == "N"
					M->TQN_VALUNI := TQH->TQH_PRENEG
					If lMMoeda
						M->TQN_MOEDA := TQH->TQH_MOEDA
					EndIf
				Else
					If IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)
						If M->TQN_VALUNI == 0
							M->TQN_VALUNI := TQH->TQH_PRENEG
							If lMMoeda
								M->TQN_MOEDA := TQH->TQH_MOEDA
							EndIf
						EndIf
					EndIf
				EndIf
			
			Else
				
				If ExistBlock("MNTA6557")
					If !ExecBlock("MNTA6557",.F.,.F.,{M->TQN_POSTO,M->TQN_LOJA,M->TQN_CNPJ})
						Return .F.
					EndIf
				Else
					HELP(" ",1,STR0007,,STR0040+Chr(10)+Chr(13)+STR0041,3,1) //"ATENÇÃO"### //"Nao ha uma negociaçao anterior a esse abas-"###"tecimento."
					RestArea(aArea)
					Return .F.
				EndIf
			
			EndIf
		
		ElseIf ( cVarName == 'TQN_VALUNI' .Or. lVldOk ) .And. Empty( M->TQN_VALUNI )
			
			// ATENÇÃO ### Não foi informado o valor unitário do combustível
			Help( '', 1, STR0007, , STR0196, 3, 1 )
			RestArea(aArea)
			Return .F.

		EndIf
		
	ElseIf TQF->TQF_TIPPOS == "3"
		lValUni := .T.
	EndIf

	RestArea(aArea)
	DbSelectArea("TQN")

	If !l655Auto
		MNT655ANT(0)

		If IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)

			If Tipoacom .And. lSegCont //Verifica se o campo existe (UPDITA02)
				oPanelCont:Show()
			EndIf

			If Tipoacom2 .And. lSegCont
				oPanel22:Show()
				MNT655AN2()
			EndIf

		EndIf
	EndIf
	RestArea(aArea)

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MNTA655TAN
Validacao da relacao combustivel/bomba

@author  Evaldo
@since   13/03/06
@version P11/P12
@return  Lógico, Define se há inconsistência.
/*/
//-------------------------------------------------------------------
Function MNTA655TAN()

	Local aAreaTQF	:= TQF->(GetArea())
	Local aArea		:= GetArea()
	Local lEstNeg	:= IIf(SuperGetMV("MV_ESTNEG",.F.,"N")=="S",.T.,.F.)	//Variavel usada para identIficar se usuario permite que o estoque fique negativo. Se permitir, a variavel vale .T.
	Local lMMoeda	:= NGCADICBASE("TL_MOEDA","A","STL",.F.)		// Multi-Moeda

	cPosto	:= M->TQN_POSTO
	cLoja	:= M->TQN_LOJA
	cTanque := M->TQN_TANQUE

	//Validação de Local de Estoque para evitar erro na baixa de estoque após o abastecimento
	dbSelectArea("NNR")
	dbSetOrder(1)
	If !dbSeek(xFilial("NNR") + cTanque)
		// "Local de estoque não cadastrado para este tanque."
		HELP( ' ', 1, STR0007,, STR0187, 2, 0,,,,,, /*Solucao*/ )
		Return .F.
	EndIf

	dbSelectArea("TQI")
	dbSetOrder(1)
	If !DbSeek(xFilial("TQI")+M->TQN_POSTO+M->TQN_LOJA+M->TQN_TANQUE+M->TQN_CODCOM)
		HELP(" ",1,STR0007,,STR0081+Chr(10)+Chr(13)+STR0082,3,1) //"ATENÇÃO"###"Esse tanque não está relacionado ao combus-"###"tível informado."
		Return .F.
	Else
		cComb := TQI->TQI_PRODUT
	EndIf

	//Validação para que não permita selecionar um produto com controle de Rastro
	If GetNewPar("MV_RASTRO","N") == "S" .And. NGSEEK('SB1',cComb,1,"B1_RASTRO") <> "N"
		If !EXISTCPO('SB1',cComb)
			lRet := .F.
		Else
			If SB1->B1_RASTRO <> "N" .And. !Empty(SB1->B1_RASTRO)
				//"Não é possivel infomar um produto que utiliza rastro ou lote/sublote."
				HELP( ' ', 1, STR0007,, STR0185, 2, 0,,,,,, /*Solucao*/ )
				Return .F.
			EndIf
		EndIf
	EndIf

	If GetNewPar("MV_NGPRSB2","N") == "S" // Se busca preco medio na tabela SB2

		DbSelectArea("SB2")
		DbSetOrder(1)
		If !Dbseek( xFilial('SB2') + cComb + cTanque )
			CriaSB2( cComb, cTanque )
		EndIf

		If GetNewPar( 'MV_NGINTER', '') == 'M'
			NGMUStoLvl( cComb, cTanque ) // Atualiza saldo do produto - SB2 de acordo com o RM
		EndIf

		M->TQN_VALUNI := SB2->B2_CM1
		M->TQN_VALTOT := M->TQN_QUANT * M->TQN_VALUNI
		lValTot := .F.

		If lMMoeda
			M->TQN_MOEDA := "1"
		EndIf

		If Altera
			lPrev := .F.
		EndIf
	EndIf

	If !Empty(cPosto)
		DbSelectArea("TQF")
		DbSetOrder(1)
		DbSeek(xFilial("TQF")+cPosto)
	EndIf

	If !Empty(M->TQN_CNPJ)
		DbSelectArea("TQF")
		DbSetOrder(2)
		DbSeek(xFilial("TQF")+M->TQN_CNPJ)
	EndIf

	If cConEst == "S"
		If TQF->TQF_TIPPOS == "2"

			DbSelectArea("TQI")
			DbSetOrder()
			DbSeek(xFilial("TQI")+cPosto+cLoja+cTanque+M->TQN_CODCOM)
			cCod := TQI->TQI_PRODUT

			If !lEstNeg .And. M->TQN_QUANT > 0 .And. cUsaInt3 == 'S'
				If !NGSALSB2(cCod,cTanque,IIf(!Altera,M->TQN_QUANT,IIf(M->TQN_QUANT > vDadoAtu[6],M->TQN_QUANT - vDadoAtu[6],vDadoAtu[6] - M->TQN_QUANT)),,,M->TQN_DTABAS)
					Return .F.
				EndIf
			EndIf
		EndIf
	EndIf

	RestArea(aAreaTQF)
	RestArea(aArea)

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MNT655DTPG
Calcula data de vencimento do abastecimento com relacao a negociacao.

@author  Evaldo Cevinscki Jr
@since   28/03/2006
@version P11/P12
@param   Caracter, cVPOSTO, Posto
@param   Caracter, cVLOJA , Loja
@param   Data    , DTABAS , Data do Abastecimento
@param   Caracter, HRABAS , Hora do abastecimento
@return  Data    , Data do vencimento do abastecimento
/*/
//-------------------------------------------------------------------
Function MNT655DTPG(cVPOSTO,cVLOJA,DTABAS,HRABAS)

	Local aArea := GetArea(), dNEG , cNEG , dVENCT := Ctod('  /  /  ')

	DbSelectArea("TQG")//Data_Vencimento
	DbSetOrder(01)
	If DbSeek(xFilial("TQG")+cVPOSTO+cVLOJA)
		dNeg := TQG->TQG_DTNEG
		cNEG := TQG->TQG_HRNEG
		While !EOF().And. TQG->TQG_CODPOS == cVPOSTO .And. TQG->TQG_LOJA == cVLOJA
			If (TQG->TQG_DTNEG < DTABAS)
				dNeg := TQG->TQG_DTNEG
				cNEG := TQG->TQG_HRNEG
			ElseIf (TQG->TQG_DTNEG = DTABAS)
				If (TQG->TQG_HRNEG <= HRABAS)
					dNeg := TQG->TQG_DTNEG
					cNEG := TQG->TQG_HRNEG
				EndIf
			EndIf
			DbSkip()
		End

		DbSelectArea("TQG")//Data_Vencimento
		DbSetOrder(01)
		If DbSeek(xFilial("TQG")+cVPOSTO+cVLOJA+DTOS(dNeg)+cNEG)
			dVENCT := MNT655DTVE(cVPOSTO,cVLOJA,DTABAS,HRABAS,TQG->TQG_DIAFAT,TQG->TQG_PRAZO)
		EndIf
	EndIf
	RestArea(aArea)

RETURN dVENCT

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT935PERC³ Autor ³ Evaldo Cevinscki Jr   ³ Data ³28/03/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Calcula data de vencimento do abastecimento com relacao a   ³±±
±±³          ³negociacao.                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Objetivo  ³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNT655DTVE(cVPOSTO,cVLOJA,DTABAS,HRABAS,nDIASFAT,nPRAZO)
Local cDTVENC := CtoD("  /  /  ")

cDTABAST := Dtos(DTABAS)

cDTINIC := VAL(SubStr(cDTABAST,1,6) + "01")

If nDIASFAT <> 0
	cDTINTERV := (AllTrim(Str(cDTINIC + (nDIASFAT - 1))))

	nProxMes := VAL(SubStr(cDTABAST,5,2)) + 1
	If nProxMes > 12
		nProxMes := nProxMes - 12
	EndIf
	If nProxMes < 10
	   dData := SubStr(cDTINTERV,1,4) + StrZero(nProxMes,2) + "01"
		cULTDIAMES := Dtos(Ctod(SubStr(dData,7,2) + "/" + SubStr(dData,5,2) + "/" + SubStr(dData,1,4)) -1)
	Else
		dData := SubStr(cDTINTERV,1,4) + AllTrim(Str(nProxMes)) + "01"
		cULTDIAMES := Dtos(Ctod(SubStr(dData,7,2) + "/" + SubStr(dData,5,2) + "/" + SubStr(dData,1,4)) -1)
	EndIf

	dData := SubStr(cDTINTERV,1,4) + SubStr(cDTINTERV,5,2) + "01"
	cULTDIAMES := Dtos(Ctod(SubStr(dData,7,2) + "/" + SubStr(dData,5,2) + "/" + SubStr(dData,1,4)) -1)

	While (cDTINTERV < cDTABAST) .And. (cDTINTERV <> cULTDIAMES)


		nDIf := Ctod(SubStr(cDTINTERV,7,2)+"/"+SubStr(cDTINTERV,5,2)+"/"+SubStr(cDTINTERV,1,4)) - Ctod(SubStr(cULTDIAMES,7,2)+"/"+SubStr(cULTDIAMES,5,2)+"/"+SubStr(cULTDIAMES,1,4))
	   If nDIf < 0
	   	nDIf := nDIf * (-1)
	   ElseIf nDIf <= 4 .And. nDIf <> 0
	   	If Empty(cDTINTERV)
				cDTINTERV := cULTDIAMES
			EndIf
	   EndIf

	 	cDTINIC := DTOS(Ctod(SubStr(cDTINTERV,7,2)+"/"+SubStr(cDTINTERV,5,2)+"/"+SubStr(cDTINTERV,1,4)) + 1)
	 	If (cDTINTERV < cDTABAST)
	 		cDTINTERV := DTOS(Ctod(SubStr(cDTINTERV,7,2)+"/"+SubStr(cDTINTERV,5,2)+"/"+SubStr(cDTINTERV,1,4)) + nDIASFAT)
	   EndIf
	End

	nDIf := Ctod(SubStr(cDTINTERV,7,2)+"/"+SubStr(cDTINTERV,5,2)+"/"+SubStr(cDTINTERV,1,4)) - Ctod(SubStr(cULTDIAMES,7,2)+"/"+SubStr(cULTDIAMES,5,2)+"/"+SubStr(cULTDIAMES,1,4))
	If nDIf < 0
		nDIf = nDIf * (-1)
	ElseIf nDIf <= 4 .And. nDIf <> 0
		cDTINTERV := cULTDIAMES
	EndIf
	cDTVENC := Ctod(SubStr(cDTINTERV,7,2)+"/"+SubStr(cDTINTERV,5,2)+"/"+SubStr(cDTINTERV,1,4)) + nPRAZO
	cDTINTERV := Ctod(SubStr(cDTINTERV,7,2)+"/"+SubStr(cDTINTERV,5,2)+"/"+SubStr(cDTINTERV,1,4)) + nPRAZO
EndIf
If nDIASFAT == 0 .And. nPRAZO == 0
	cDTVENC = Ctod(SubStr(cDTABAST,7,2)+"/"+SubStr(cDTABAST,5,2)+"/"+SubStr(cDTABAST,1,4)) + 1
EndIf

Return cDTVENC

//---------------------------------------------------------------------------------
/*/{Protheus.doc} MNT655HOD
Programa para calcular a autonomia do veiculo.

@author Rafael Diogo Richter
@since 10/07/2006
@return bool lRet
@param nTpContador - Tipo de contador 1 = Primeiro ( STP ), 2 = Segundo ( TPE )
	   lTipoLan    - Falso para tipo de lançamento igual a informa contador ou
	   			 	 Verdadeiro para tipo de lançamento abastecimento ( MNTA656 )
@version MP12
/*/
//---------------------------------------------------------------------------------
Function MNT655HOD(nTpContador,lTipoLan)

	Local nKmAnt    := 0
	Local nKmPos    := 0
	Local lKmAnt    := .T.
	Local lKmPos    := .F.
	Local aKmsR     := {}
	Local aChkLan   := {}
	Local nHodom    := 0
	Local vArqDia   := {}
	Local vArqCon   := IIf(nTpContador = 1,{'m->tqn_hodom'},{'m->tqn_posco2'})
	Local lSXPosco2 := .T.
	Local lVAuton   := .F.
	Local cFili     := "" //Carrega filial do Bem, conforme busca realizada através da placa
	Local cCOMB656  := IIf(Type("cTTAComb") <> 'U',cTTAComb,"")
	Local lValCont2 := .F.
	Local l655Auto  := Type( 'aRotAuto' ) != 'U'

	Default lTipoLan := .T.

	cPrvBemClk := MNT655PREV()

	If nTpContador = Nil
		nTpContador := 1
		lVAuton     := .T.
	EndIf
	vArqCon := IIf(nTpContador = 1,{'M->TQN_HODOM'},{'M->TQN_POSCO2'})
	vArqDia := IIf(nTpContador = 1,{'STP','STP->TP_FILIAL','STP->TP_CODBEM','STP->TP_DTLEITU','STP->TP_HORA','STP->TP_TIPOLAN',;
		                                  'STP->TP_POSCONT','STP->TP_VIRACON'},;
                                   {'TPP','TPP->TPP_FILIAL','TPP->TPP_CODBEM','TPP->TPP_DTLEIT','TPP->TPP_HORA','TPP->TPP_TIPOLA',;
                                   	      'TPP->TPP_POSCON','TPP->TPP_VIRACO'})

	If FunName() == "MNTA656"
		If ReadVar() != ''
			nW := n
		EndIf
		cFrott655 := IIf(ReadVar()=='M->TQN_FROTA',M->TQN_FROTA,oBrw1:aCols[nW][nPOSFROTA])
		dDatAb655 := IIf(ReadVar()=='M->TQN_DTABAS',M->TQN_DTABAS,oBrw1:aCols[nW][nPOSDATAB])
		cHorAb655 := IIf(ReadVar()=='M->TQN_HRABAS',M->TQN_HRABAS,oBrw1:aCols[nW][nPOSHORAB])
		cPlaca656 := IIf(ReadVar()=='M->TQN_HRABAS',M->TQN_HRABAS,oBrw1:aCols[nW][nPOSPLACA])
		cCombu655 := NGSEEK('TQI',cPosto+cLoja+cTanque+cCOMB656,1,'TQI->TQI_CODCOM')
		If vArqCon[1] = "M->TQN_POSCO2"
			If lSegCont
				cHodom655 := IIf(ReadVar()=='M->TQN_POSCO2',M->TQN_POSCO2,oBrw1:aCols[nW][nPOSCONT2])
			Else
				lSXPosco2 := .F.
			EndIf
		Else
			cHodom655 := IIf(ReadVar()=='M->TQN_HODOM',M->TQN_HODOM,oBrw1:aCols[nW][nPOSHODOM])
		EndIf

		If !Empty(cPlaca656)
			fBscBemPla(cPlaca656)
			cFili := ST9->T9_FILIAL
		Else
			cFili := xFilial("ST9")
		EndIf

	ElseIf IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)
		cFrott655 := M->TQN_FROTA
		dDatAb655 := M->TQN_DTABAS
		cHorAb655 := M->TQN_HRABAS
		cCombu655 := M->TQN_CODCOM

		If !Empty(M->TQN_PLACA)
			fBscBemPla(M->TQN_PLACA)
			cFili := ST9->T9_FILIAL
		Else
			cFili := xFilial("ST9")
		EndIf

		If (vArqCon[1] == 'm->tqn_posco2')
			If lSegCont
				//FindFunction remover na release GetRPORelease() >= '12.1.027'
				If FindFunction("MNTCont2")
					lValCont2 := MNTCont2(xFilial("TPE"), M->TQN_FROTA)
				Else
					lValCont2 := MNT6552CNT(xFilial("TPE"),M->TQN_FROTA) //Verifica se existe contador e/ou está ativado.
				EndIf
				If lValCont2
					cHodom655 := &(vArqCon[1])
				Else
					lSXPosco2 := .F.
				EndIf
			Else
				lSXPosco2 := .F.
			EndIf
		Else
			cHodom655 := &(vArqCon[1])
		EndIf
	Else
		If ReadVar() != ''
			nW := n
		EndIf
		cFrott655 := IIf(ReadVar()=='M->TQN_FROTA',M->TQN_FROTA,aCols[n][nPOSFROTA])
		dDatAb655 := dDataAbast
		cHorAb655 := IIf(ReadVar()=='M->TQN_HRABAS',M->TQN_HRABAS,aCols[n][nPOSHORAB])
		cCombu655 := NGSEEK('TQI',cPosto+cLoja+cTanque,1,'TQI->TQI_CODCOM')
		If (vArqCon[1] == 'M->TQN_POSCO2')
			cHodom655 := IIf(ReadVar()=='M->TQN_POSCO2',M->TQN_POSCO2,aCols[n][nPOSCONT2])
		Else
			cHodom655 := IIf(ReadVar()=='M->TQN_HODOM',M->TQN_HODOM,aCols[n][nPOSHODOM])
		EndIf

		cPlaca656 := IIf(ReadVar()=='M->TQN_PLACA',M->TQN_PLACA,aCols[n][nPOSPLACA])

		If !Empty(cPlaca656)
			fBscBemPla(cPlaca656)
			cFiliST9 := ST9->T9_FILIAL
		Else
			cFiliST9 := xFilial("ST9")
		EndIf

	EndIf

	If lSXPosco2  //Se for Contador2 verifica se existe o campo no dicionario
		DbSelectArea("TQN")
		cFROTA655 := cFrott655 + Space(Len(ST9->T9_CODBEM)-Len(cFrott655))
		If !lSegCont
			//FindFunction remover na release GetRPORelease() >= '12.1.027'
			If FindFunction("MNTCont2")
				lValCont2 := MNTCont2(xFilial("TPE"), cFROTA655)
			Else
				lValCont2 := MNT6552CNT(xFilial("TPE"),cFROTA655) //Verifica se existe contador e/ou está ativado.
			EndIf
			If lValCont2
				M->TQN_POSCO2 := cHodom655
			EndIf
		EndIf

		aChkLan := NGCHKCINC(cFROTA655, dDatAb655, cHodom655, cHorAb655, nTpContador, .T., cFili)
		If !aChkLan[1]
			// "NÃO CONFORMIDADE"
			HELP( ' ', 1, STR0083,, aChkLan[2], 2, 0,,,,,,/*Solucao*/)
			Return .F.
		EndIf

		aKmsR := NGCONTAP(cFROTA655, DTOS(dDatAb655), cHorAb655, nTpcontador, cFili)
		nHodom := cHodom655
		nKmAnt := aKmsR[1]
		nKmPos := aKmsR[2]
		If nKmAnt == 0 .And. Altera
			DbSelectArea("TQN")
			DbSetOrder(1)
			If !DbSeek(xFilial("TQN") + cFROTA655 + DTOS(dDatAb655) + cHorAb655)
				If (!l655Auto .And. !NGCHKHISTO(cFROTA655,dDatAb655,nHodom,cHorAb655,1,,.T.,cFiliST9)) .Or.;
					(l655Auto .And. !NGCHKHISTO(cFROTA655,dDatAb655,nHodom,cHorAb655,1,,.F.,cFiliST9)[ 1 ])
					Return .F.
				EndIf
			EndIf
		EndIf

		If GetNewPar("MV_NGINTER","") == "M"
			DbSelectArea(vArqDia[1])
			DbSetOrder(5)
			If DbSeek(xFilial(vArqDia[1],cFiliST9)+cFROTA655+DTOS(dDatAb655)+cHorAb655);
					.And. MNA385APR(cFROTA655,dDatAb655,cHorAb655,nTpContador)
				//"Existem registros de apropriacao de contador posteriores a data do registro atual. Nâo é permitido alterar o valor do contador."
				HELP( ' ', 1, STR0007,, STR0160, 2, 0,,,,,, /*Solucao*/ )
				Return .F.
			EndIf
		EndIf

		If nHODOM <= aKmsR[1]
			If nHODOM == aKmsR[1] .And. aKmsR[4] == 'A' // quando o hodometro é igual ao lançamento do abastecimento anterior
				lKmAnt := lTipoLan
				If aKmsR[10] = dDatAb655
					If cCombu655 <> NGSEEK('TQN',cFROTA655+DtoS(aKmsR[10])+aKmsR[11],1,'TQN->TQN_CODCOM') //trata abastecimentos de combustiveis diferentes no mesmo cupom
						lKmAnt := .F.
					EndIf
				EndIf
			ElseIf nHODOM = aKmsR[1] .And. aKmsR[4] <> 'A'
				lKmAnt := .F.
			EndIf
			If nHODOM == aKmsR[1] .And. aKmsR[4] == 'V' .And. ((aKmsR[10] < dDatAb655) .Or. (aKmsR[10] == dDatAb655 .And. aKmsR[11] < cHorAb655))
				lKmAnt := .F.
			EndIf
			If Altera
				nKmAnt := aKmsR[5] //- (nLimite * aKmsR[7])
				If nHODOM > aKmsR[5] .And. aKmsR[6] == 'A'
					lKmAnt := .F.
				EndIf
			EndIf
			
			If lKmAnt
				
				If !isBlind() .And. (nHODOM == aKmsR[1] .And. aKmsR[4] == 'A')

					If !MsgYesNo( STR0194+Chr(10)+Chr(10)+; // "Já existe um abastecimento anterior com o mesmo contador."
								  STR0085+AllTrim(Str(nKmAnt))+Chr(13)+Chr(10)+; // "Contador Anterior: "
								  STR0119+AllTrim(DTOC(aKmsR[10]))+Chr(13)+Chr(10)+; // "Data: "
								  STR0120+AllTrim(aKmsR[11])+Chr(13)+Chr(10)+; // "Hora: "
								  IIf(!Empty(aKmsR[12]),STR0121+AllTrim(aKmsR[12])+Chr(13)+Chr(10)+; // "Posto: "
								  STR0122+AllTrim(aKmsR[13])+Chr(13)+Chr(10)+Chr(10)," ")+Chr(10)+; // "Loja: "
								  STR0086+AllTrim(Str(cHodom655))+Chr(13)+Chr(10)+; // "Contador Atual: "
								  STR0119+AllTrim(DTOC(dDatAb655))+Chr(13)+Chr(10)+; // "Data: "
								  STR0120+AllTrim(cHorAb655)+Chr(10)+Chr(13)+Chr(10)+; // "Hora: "
								  STR0166,; // "Deseja prosseguir?"
								  STR0007) // "Atenção"

						Return .F.

					EndIf

				EndIf

			EndIf

		EndIf

		If aKmsR[2] <> 0
			If nHODOM > aKmsR[2]
				If aKmsR[8] != dDatAb655 .Or. aKmsR[9] != cHorAb655
					lKmPos := .T.
				EndIf
			EndIf
			If nHODOM = aKmsR[2] .And. aKmsR[3] == 'A'
				If aKmsR[8] != dDatAb655 .Or. aKmsR[9] != cHorAb655
					lKmPos := .T.
				EndIf
				If aKmsR[8] = dDatAb655
					If cCombu655 <> NGSEEK('TQN',cFROTA655+DtoS(aKmsR[8])+aKmsR[9],1,'TQN->TQN_CODCOM') //trata abastecimentos de combustiveis diferentes no mesmo cupom
						lKmAnt := .F.
					EndIf
				EndIf
			EndIf

		//Se o Contador Atual for MAIOR que o seu posterior, mas esse posterior for uma Quebra ou uma Virada, entao ele pode ser maior, sem problemas
		//Caso nao seja nem Quebra nem Virada, deve respeitar o intervalo, nao podendo ser maior que o posterior
			If nHODOM > aKmsR[2] .And. ((aKmsR[8] > dDatAb655) .Or. (aKmsR[8] == dDatAb655 .And. aKmsR[9] > cHorAb655))
				If aKmsR[3] $ "QV"
					lKmPos := .F.
				Else
					lKmPos := .T.
				EndIf
			EndIf
			
			If lKmPos

				If !isBlind() .And. (nHODOM == aKmsR[2] .And. aKmsR[3] == 'A')
					
					If !MsgYesNo( STR0195+Chr(10)+Chr(10)+; // "Já existe um abastecimento posterior com o mesmo contador."
								  STR0091+AllTrim(Str(nKmAnt))+Chr(13)+Chr(10)+; // "Contador Anterior: "
								  STR0119+AllTrim(DTOC(aKmsR[10]))+Chr(13)+Chr(10)+; // "Data: "
								  STR0120+AllTrim(aKmsR[11])+Chr(13)+Chr(10)+; // "Hora: "
								  IIf(!Empty(aKmsR[12]),STR0121+AllTrim(aKmsR[12])+Chr(13)+Chr(10)+; // "Posto: "
								  STR0122+AllTrim(aKmsR[13])+Chr(13)+Chr(10)+Chr(10)," ")+Chr(10)+; // "Loja: "
								  STR0086+AllTrim(Str(cHodom655))+Chr(13)+Chr(10)+; // "Contador Atual: "
								  STR0119+AllTrim(DTOC(dDatAb655))+Chr(13)+Chr(10)+; // "Data: "
								  STR0120+AllTrim(cHorAb655)+Chr(10)+Chr(13)+Chr(10)+; // "Hora: "
								  STR0166,; // "Deseja prosseguir?"
								  STR0007) // "Atenção"
						Return .F.
					
					EndIf
				
				EndIf
			
			EndIf
		
		EndIf
	
	EndIf

	If FunName() == "MNTA656"
		If ReadVar() == "M->TQN_HODOM" .Or. ReadVar() == 'M->TQN_POSCO2' //(ALTERA .And. !lVAuton)// .Or. (!ALTERA .And. lVAuton)
			If !NGAUTONOMIA(cFrott655,dDatAb655,cHorAb655,cHodom655,.T.,cCombu655,nTpContador,cFiliST9)
				Return .F.
			EndIf
		EndIf
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT655CON ³ Autor ³ Thiago Olis Machado   ³ Data ³17/07/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Programa para validar os campos Motorista e Contador.       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaMNT                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNT655CON(nTpContador)

	Local aArea     := GetArea()
	Local lValCont2 := .F.

	If nTpContador = Nil
		nTpContador := 1
	EndIf

	If nTpContador = 1
		cContField := 'M->TQN_HODOM'

		DbSelectArea("TT8")
		DbSetOrder(1)
		If DbSeek(cFilBem+M->TQN_FROTA+M->TQN_CODCOM+"11")

			If Empty(&(cContField))
				HELP(" ",1,STR0007,,STR0111+CRLF+CRLF+NGRETTITULO("TQN_HODOM"),3,1) //"Preencha o contador do veiculo."###"ATENÇÃO"
				Return .F.
			EndIf
		EndIf
	Else
		If lSegCont
			//FindFunction remover na release GetRPORelease() >= '12.1.027'
			If FindFunction("MNTCont2")
				lValCont2 := MNTCont2(cFilBem, M->TQN_FROTA)
			Else
				lValCont2 := MNT6552CNT(cFilBem,M->TQN_FROTA) //Verifica se existe contador e/ou está ativado.
			EndIf
			If lValCont2
				cContField := 'M->TQN_POSCO2'
				DbSelectArea("TT8")
				DbSetOrder(1)
				If DbSeek(xFilial("TT8")+M->TQN_FROTA+M->TQN_CODCOM+"21")
					If Empty(&(cContField))
						HELP(" ",1,STR0007,,STR0111+CRLF+CRLF+NGRETTITULO("TQN_POSCO2"),3,1) //"Preencha o contador do veiculo."###"ATENÇÃO"
						Return .F.
					EndIf
				EndIf
			EndIf
		EndIf
	EndIf

	If Empty(cMotGer)
		If Empty(M->TQN_CODMOT)
			Help(" ",1,STR0007,,STR0066,3,1) //"ATENÇÃO"###"Preencha o Codigo do Motorista."
			Return .F.
		EndIf
	EndIf

	RestArea(aArea)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT655FIL ³ Autor ³ Thiago Olis Machado   ³ Data ³17/07/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Validar para nao mostrar os postos que nao permitem lancto  ³±±
±±³          ³Manual.                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaMNT                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNA655FIL()

	DbSelectArea("TQF")
	DbSetOrder(1)
	If DbSeek(xFilial("TQF")+TQN->TQN_POSTO+TQN->TQN_LOJA)
		If TQF->TQF_LANMAN == "2"
			Return .F.
		EndIf
	EndIf
	DbSelectArea("TQF")

Return .F.

//-------------------------------------------------------------------
/*/{Protheus.doc} MNTA655A
Cadastro de Notas Fiscais dos Abastecimentos - Alteracao

@author  Inacio Luiz Kolling
@since   19/07/2006
@version P11/P12
@return  Lógico, Define se há inconsistência.
/*/
//-------------------------------------------------------------------
Function MNTA655A()

	Local lIncluiOld
	Local aOldArea   := GetArea()
	Local LQuitTrans := .F. // Verifica se deve continuar a transação (Begin/End transaction)
	Local lCompT9TQN := Len( AllTrim( xFilial( "ST9" ) ) ) == Len( AllTrim( xFilial( "TQN" ) ) )

	Private vDadoAtu   := {}
	Private lPosIntAlt := .T.

	If !Empty(TQN->TQN_PLACA)
		fBscBemPla(TQN->TQN_PLACA)
		cFilBem := ST9->T9_FILIAL
	EndIf

	cFilTQN  := xFilial("TQN")
	cFiliST9 := xFilial("ST9")	//Armazena filial corrente da ST9

	If !Empty(TQN->TQN_DTCON)
		// "Abastecimento já foi conciliado e não poderá ser alterado!"
		HELP( ' ', 1, STR0007,, STR0124, 2, 0,,,,,, /*Solucao*/ )
		Return .F.
	EndIf

	If GetNewPar("MV_NGINTER","") == "M"
		If MNA385APR(TQN->TQN_FROTA,TQN->TQN_DTABAS,TQN->TQN_HRABAS,1)
			// "Existem registros de apropriacao do contador 1 posteriores a data da OS selecionada. Nâo é possível reabrir a OS."
			HELP( ' ', 1, STR0007,, STR0161, 2, 0,,,,,, /*Solucao*/ )
			Return .F.
		EndIf

		If MNA385APR(TQN->TQN_FROTA,TQN->TQN_DTABAS,TQN->TQN_HRABAS,2)
			// "Existem registros de apropriacao do contador 2 posteriores a data da OS selecionada. Nâo é possível reabrir a OS."
			HELP( ' ', 1, STR0007,, STR0162, 2, 0,,,,,, /*Solucao*/ )
			Return .F.
		EndIf
	EndIf

	If !MNT655LOTE() //Se foi pelo Abastecimento em Lote nao podera alterar
		// "Para essa operação utilize a rotina de Abastecimento em Lote"
		HELP( ' ', 1, STR0007,, STR0129, 2, 0,,,,,, /*Solucao*/ )
		Return .F.
	EndIf

	//checa por exemplo se data de abastecimento esta dentro do periodo contabil
	dDatAb655 := TQN->TQN_DTABAS
	If ExistBlock("MNTA6552")
		If !ExecBlock("MNTA6552", .F. , .F. )
			Return .F.
		EndIf
	EndIf

	If cConEst != "N"
		DbSelectArea("TQF")
		DbSetOrder(1)
		DbSeek(xFilial("TQF")+TQN->TQN_POSTO+TQN->TQN_LOJA)
		If TQF->TQF_TIPPOS == "2"
			lPosIntAlt := .F.
		EndIf
	EndIf

	lTanque := .F.
	lBomba  := .F.

	If !lSegCont
		vDadoAtu := {IIf(NGSX2MODO("STP")=="E",TQN->TQN_FILIAL,xFilial("STP")),TQN->TQN_FROTA,DTOS(TQN->TQN_DTABAS),TQN->TQN_HRABAS,TQN->TQN_HODOM,TQN->TQN_QUANT,TQN->TQN_NUMSEQ,TQN->TQN_NOTFIS}
	Else
		vDadoAtu := {IIf(NGSX2MODO("TPP")=="E",TQN->TQN_FILIAL,xFilial("TPP")),TQN->TQN_FROTA,DTOS(TQN->TQN_DTABAS),TQN->TQN_HRABAS,TQN->TQN_HODOM,TQN->TQN_QUANT,TQN->TQN_NUMSEQ,TQN->TQN_NOTFIS,TQN->TQN_POSCO2}
	EndIf

	nRecno  := Recno()
	cFilOld	:= "  "

	DbSelectArea("ST9")
	DbSetOrder(16)
	If DbSeek(TQN->TQN_FROTA)
		TIPOACOM := IIf(ST9->t9_temcont = "S",.T.,.F.)
		cFilOld	:= ST9->T9_FILIAL
	EndIf
	//FindFunction remover na release GetRPORelease() >= '12.1.027'
	If FindFunction("MNTCont2")
		TIPOACOM2 := MNTCont2(ST9->T9_FILIAL, ST9->T9_CODBEM)
	Else
		TIPOACOM2 := MNT6552CNT( IIf( NGSX2MODO("TPE") == "E", cFilOld, xFilial("TPE") ),TQN->TQN_FROTA ) //Verifica se existe contador e/ou está ativado.
	EndIf

	If !Empty(TQN->TQN_DTPREV)
		lPrev := .F.
	Else
		lPrev := .T.
	EndIf

	aRelac   := {{"TQN_AUTO","TQN->TQN_AUTO"},{"TQN_USUARI","TQN->TQN_USUARI"}}
	aRetTPN  := MNT655TPN( TQN->TQN_FROTA,TQN->TQN_DTABAS,TQN->TQN_HRABAS,TQN->TQN_PLACA,xFilial( "ST9" ) )
	cFilTPN1 := aRetTPN[1]

	If cFilTPN1 = " "
		cFilTPN1 := TQN->TQN_FILIAL
	EndIf

	Begin Transaction
		DbSelectArea("TQN")
		nRET    := MNT655SC("TQN",nRecno,4)
		nRecTQN := TQN->(RECNO())
		If nRET = 1

			DbSelectArea("TQN")
			RecLock("TQN",.F.)
			TQN->TQN_DTPROV := CTOD('  /  /  ')
			TQN->TQN_USUARI := SubStr(cUsuario,7,15)
			MsUnlock("TQN")

			If Empty(TQN->TQN_PLACA)
				DbSelectArea("ST9")
				DbSetOrder(1)
				If DbSeek(xFilial("ST9")+TQN->TQN_FROTA)
					cFilBem  := ST9->T9_FILIAL
					cCCusto  := ST9->T9_CCUSTO
					cCentrab := ST9->T9_CENTRAB
				EndIf
			Else
				fBscBemPla(TQN->TQN_PLACA)
				cFilBem	:= ST9->T9_FILIAL
				cCCusto  := ST9->T9_CCUSTO
				cCentrab := ST9->T9_CENTRAB
			EndIf

			If lCompT9TQN .And. cFilOld <> cFilTQN
				RecLock("TQN",.F.)
				TQN->TQN_FILIAL := cFilTQN
				TQN->TQN_NABAST := NGPROXABAST(cFilTQN)
				TQN->TQN_CCUSTO := cCCusto
				TQN->TQN_CENTRA := cCentrab
				MsUnLock("TQN")
			EndIf
			If DTOS(TQN->TQN_DTABAS) <> vDadoAtu[3]
				RecLock("TQN",.F.)
				TQN->TQN_DTPGMT := MNT655DTPG(TQN->TQN_POSTO,TQN->TQN_LOJA,TQN->TQN_DTABAS,TQN->TQN_HRABAS)
				TQN->TQN_DTEMIS := TQN->TQN_DTABAS
				TQN->TQN_ORDENA := INVERTE(TQN->TQN_DTABAS)
				MsUnLock("TQN")
			EndIf

			If TQN->TQN_QUANT <> vDadoAtu[6]

				//Altera historico do contador da Bomba
				NGAltTTVQnt(TQN->TQN_POSTO,TQN->TQN_LOJA,TQN->TQN_TANQUE,TQN->TQN_BOMBA,TQN->TQN_DTABAS,TQN->TQN_HRABAS,'1',TQN->TQN_QUANT)

				If !Empty(vDadoAtu[7])
					cFilTQF := MNT655FTQF( StoD(vDadoAtu[3]) , vDadoAtu[7] , vDadoAtu[6] ) //Data / Numseq / Quantidade

					DbSelectArea("TQI")
					DbSetOrder(1)
					If DbSeek(xFilial("TQI",cFilTQF)+TQN->TQN_POSTO+TQN->TQN_LOJA+TQN->TQN_TANQUE+TQN->TQN_CODCOM)
						cComb := TQI->TQI_PRODUT
					EndIf
					cUM := NGSEEK('TQM',TQN->TQN_CODCOM,1,'TQM->TQM_UM',cFilTQF)

					cDocumSD3 := ""
					DbSelectArea("SD3")
					DbSetOrder(04)
					If DbSeek(xFilial("SD3",cFilTQF)+vDadoAtu[7]+"E0")
						cDocumSD3 := SD3->D3_DOC
					EndIf

					lIncluiOld := INCLUI
					INCLUI     := .T.   //Para validar a A241QTDGRA()

					cCTTSI3 := If(CtbInUse(), "CTT", "SI3")

					dbSelectArea(cCTTSI3)
					dbSetOrder(1)
					If !dbSeek(xFilial(cCTTSI3)+TQN->TQN_CCUSTO)
						cCCusto := ''
					Else
						cCCusto := TQN->TQN_CCUSTO
					EndIf

					MntMovEst("RE0",TQN->TQN_TANQUE,cComb,vDadoAtu[6],TQN->TQN_DTABAS,cDocumSD3,cFilTQF,cCCusto,.T.,vDadoAtu[7],, TQN->TQN_FROTA, cFilBem )
					TQN->(DbGoTo(nRecTQN))

					//Ponto de Entrada para alterações finais no SD3
					If ExistBlock("MNT655D3CC")
						ExecBlock("MNT655D3CC", .F. , .F. , {'DE0',TQN->TQN_FROTA, cCCusto, cFilTQF ,SD3->(Recno())})
					EndIf

					cDocumSD3 := NextNumero("SD3",2,"D3_DOC",.T.)
					cNumSeqD  := MntMovEst('RE0',TQN->TQN_TANQUE,cComb,TQN->TQN_QUANT,TQN->TQN_DTABAS,cDocumSD3,cFilTQF,cCCusto,,,, TQN->TQN_FROTA, cFilBem)

					If Empty(cNumSeqD)
						DisarmTransaction()
						LQuitTrans := .T.
					EndIf
					vRastro := {}
					TQN->(DbGoTo(nRecTQN))

					//Ponto de Entrada para alterações finais no SD3
					If ExistBlock("MNT655D3CC") .And. !LQuitTrans
						ExecBlock("MNT655D3CC", .F. , .F. , {'RE0',TQN->TQN_FROTA, TQN->TQN_CCUSTO, cFilTQF ,SD3->(Recno()) } )
					EndIf

					INCLUI := lIncluiOld   //Para validar a A241QTDGRA()

					If !LQuitTrans
						DbSelectArea("TQN")
						RecLock("TQN",.F.)
						TQN->TQN_NUMSEQ := cNumSeqD
						MsUnLock("TQN")
					EndIf
				EndIf
			EndIf
		EndIf
	End Transaction

	If !LQuitTrans
		//Mantem campos abertos por default
		lPosIntAlt := .T.
		lPrev      := .T.

		If !Empty(cRetF655)
			bFiltraBrw := {|| FilBrowse("TQN",@aIndTQN,@cRetF655) }
			Eval(bFiltraBrw)
		EndIf

	EndIf

	RestArea(aOldArea)

Return !LQuitTrans

//-------------------------------------------------------------------
/*/{Protheus.doc} MNTA655E
Cadastro de Notas Fiscais dos Abastecimentos - Exclusao

@author  Inacio Luiz Kolling
@since   19/07/2006
@version P11/P12
@return  Lógico, Define se há inconsistência.
@obs     Necessario verificar MATXFUNB, funcao NGSD3240E que é um
processo copiado deste fonte
/*/
//-------------------------------------------------------------------
Function MNTA655E()

	Local lIncluiOld
	Local aOldArea   := GetArea()
	Local cNAbast    := ""
	Local aValAbast  := {}
	Local cFilBem    := ""
	Local cFilBkp    := cFilAnt
	Local cTipoPosto := NGSEEK("TQF",TQN->TQN_POSTO+TQN->TQN_LOJA,1,"TQF_TIPPOS",xFilial("TQF"))
	Local cFilTTV    := ''
	Local lRPORel17  := GetRPORelease() >= '12.1.017'
	Local lValCont2  := .F.
	Local l655Auto   := Type( 'aRotAuto' ) != "U"

	Private nTIPCA  := 1
	Private vVDadoE := {}

	cFilTQN    := xFilial("TQN")
	cFiliST9   := xFilial("ST9") //Armazena filial corrente da ST9
	lExcluiTQN := .T.

	/*
	MNT659VAL - Função que valida abastecimento de acordo com parâmetro MV_NGABAVL
	Se tiver algum retorno falso no segundo vetor mostra divergencia/erro.
	ex.:Retorno:
	{{"Mensagem"}- Mensagem que será apresentada no abastecimento manual
	{{.F.," 47"} - Validação de Esquema Padrão	 - código da inconsistencia pela importação
	{.F.," 48"}  - Validação de Estrutura Padrão - código da inconsistencia pela importação
	{.F.," 49"}  - Validação de Manutenção Padrão- código da inconsistencia pela importação
	{.F.," 50"}}}- Validação de Manutenção		 - código da inconsistencia pela importação
	*/
	If FindFunction("MNT659VAL")
		aValAbast:= MNT659VAL(TQN->TQN_FROTA,TQN->TQN_FILIAL,TQN->TQN_DTABAS,TQN->TQN_HRABAS)
		If aScan(aValAbast[2], {|x| x[1] == .F. }) > 0
			HELP( ' ', 1, STR0007,, aValAbast[ 1, 1 ], 2, 0,,,,,, /*Solucao*/ )
			Return .F.
		EndIf
	EndIf

	If ExistBlock("MNTA655EX")
		If !ExecBlock("MNTA655EX")
			Return .F.
		EndIf
	EndIf

	If !Empty(TQN->TQN_DTCON)
		If !l655Auto .And. !MsgYesNo(STR0123) //"Abastecimento já foi conciliado! Deseja continuar?"
			Return .F.
		EndIf
	EndIf

	If !MNT655LOTE() //Se foi pelo Abastecimento em Lote nao podera alterar
		// "Para essa operação utilize a rotina de Abastecimento em Lote"
		HELP( ' ', 1, STR0007,, STR0129, 2, 0,,,,,, /*Solucao*/ )
		Return .F.
	EndIf

	If !MNTA655OK(STR0053)
		Return .F.
	EndIf

	//Adicionada validação para verificar o parâmetro MV_ULMES antes da inicialização da exclusão do abastecimenTo.
	//Visto que estava fazendo a validação no MATA240 após a exclusão.
	If cConEst == "S" .And. cUsaint3 == "S" .And. cTipoPosTo == "2"
		If !NGCHKMESFE(TQN->TQN_DTABAS,"P")
			Return .F.
		EndIf
	EndIf

	//Alterado busca da ST9 para considerar se o cliente é multi empresa e se o bem está nessa ou em outra filial.
	If Empty(TQN->TQN_PLACA)
		DbSelectArea("ST9")
		DbSetOrder(1)
		If DbSeek(xFilial("ST9")+TQN->TQN_FROTA)
			cFilBem	:= ST9->T9_FILIAL
		EndIf
	Else
		fBscBemPla(TQN->TQN_PLACA)
		cFilBem	:= ST9->T9_FILIAL
	EndIf

	aRetTPN := MNT655TPN(TQN->TQN_FROTA,TQN->TQN_DTABAS,TQN->TQN_HRABAS,TQN->TQN_PLACA,cFilBem)
	cFilTPN := aRetTPN[1]

	If Empty(cFilTPN)
		cFilTPN := cFilBem
	EndIf

	vPosto  := TQN->TQN_POSTO
	vNotFis := TQN->TQN_NUMSGC
	cNAbast := TQN->TQN_NABAST
	vVDadoE := {TQN->TQN_FROTA,TQN->TQN_DTABAS,TQN->TQN_HRABAS,TQN->TQN_NUMSEQ,TQN->TQN_TANQUE,TQN->TQN_CODCOM,TQN->TQN_QUANT,;
				TQN->TQN_POSTO,TQN->TQN_LOJA,TQN->TQN_NOTFIS,TQN->TQN_CCUSTO,TQN->TQN_CNPJ,TQN->TQN_NABAST, TQN->TQN_BOMBA}

	If !Empty(TQN->TQN_FILORI)
		cFilAnt := TQN->TQN_FILORI
	EndIf

	DbSelectArea("TQN")
	nSetOrd := IndexOrd()
	nRET    := MNT655SC("TQN",Recno(),5)

	If nRET = 1

		//Cria as tabelas temporárias
		If TQN->TQN_HODOM <> 0 .Or. TQN->TQN_POSCO2 <> 0
			//Função genérica inserida no mntutil_contador, após virada de release (12.1.27) retirar esta condição
			//e obsoletar a função Static fCriaTemp
			If lRPORel17 .And. FindFunction("MNTCTemp")
				MNTCTemp()
			Else
				fCriaTemp()
			EndIf
		EndIf

		cFilTQF := MNT655FTQF( vVDadoE[2], vVDadoE[4], vVDadoE[7] )

		cFilTTV := IIf( Empty( TQN->TQN_FILORI ), cFilTQF, FwxFilial( 'TTV' ) )

		//Deleta historico do contador da Bomba
		If NGIFDBSEEK("TTV",vVDadoE[8]+vVDadoE[9]+vVDadoE[5]+vVDadoE[14]+; //Posto / Loja / Tanque / Bomba
						DTOS(vVDadoE[2])+vVDadoE[3],1,,cFilTTV) //Data / Hora

			NGDelTTV()
		EndIf

		//Cria uma devolucao do produto combustivel (estoque - mov. interna)
		If !Empty(vVDadoE[4])

			DbSelectArea("TQI")
			DbSetOrder(1)
			If DbSeek(xFilial("TQI",cFilTQF)+vVDadoE[8]+vVDadoE[9]+vVDadoE[5]+vVDadoE[6])
				cComb := TQI->TQI_PRODUT
			EndIf

			cDocumSD3 := ""
			DbSelectArea("SD3")
			DbSetOrder(04)
			If DbSeek(xFilial("SD3",cFilTQF)+vVDadoE[4]+"E0")
				cDocumSD3 := SD3->D3_DOC
			EndIf

			cUM        := NGSEEK('TQM',vVDadoE[6],1,'TQM->TQM_UM',cFilTQF)
			lIncluiOld := INCLUI
			INCLUI     := .T.   //Para validar a A241QTDGRA()

			MntMovEst("RE0",vVDadoE[5],cComb,vVDadoE[7],vVDadoE[2],cDocumSD3,cFilTQF,Nil,.T.,vVDadoE[4],, vVDadoE[1], cFilBem)

			//Ponto de Entrada para alterações finais no SD3
			If ExistBlock("MNT655D3CC")
				ExecBlock("MNT655D3CC", .F. , .F. , {'DE0',vVDadoE[1], vVDadoE[11], cFilTQF ,SD3->(Recno())})
			EndIf

			INCLUI := lIncluiOld   //Para validar a A241QTDGRA()
		EndIf

		//Referentes ao primeiro contador
		aARALTC := {'STP','STP->TP_FILIAL' ,'STP->TP_CODBEM' ,'STP->TP_DTLEITU','STP->TP_HORA','STP->TP_POSCONT','STP->TP_ACUMCON',;
					      'STP->TP_VARDIA' ,'STP->TP_VIRACON'}
		aARABEM := {'ST9','ST9->T9_POSCONT','ST9->T9_CONTACU','ST9->T9_DTULTAC','ST9->T9_VARDIA'}

		DbSelectArea(aARALTC[1])
		DbSetOrder(5)
		If DbSeek(xFilial(aARALTC[1],cFilTPN)+vVDadoE[1]+Dtos(vVDadoE[2])+vVDadoE[3])  //filial+frota+data+hora
			nRECNSTP := Recno()
			lULTIMOP := .T.
			nACUMFIP := 0
			nCONTAFP := 0
			nVARDIFP := 0
			dDTACUFP := Ctod('  /  /  ')
			cHRACU   := "  :  "
			DbSkip(-1)
			If !Eof() .And. !Bof() .And. &(aARALTC[2]) = xFilial(aARALTC[1],cFilTPN) .And. &(aARALTC[3]) = vVDadoE[1]
				nACUMFIP := &(aARALTC[7])
				dDTACUFP := &(aARALTC[4])
				nCONTAFP := &(aARALTC[6])
				nVARDIFP := &(aARALTC[8])
				cHRACU   := &(aARALTC[5])
			EndIf
			DbGoTo(nRECNSTP)

			nACUMDEL := STP->TP_ACUMCON

			DbSelectArea(aARALTC[1])
			RecLock(aARALTC[1],.F.)
			DbDelete()
			MsUnlock(aARALTC[1])

			MNTA875ADEL(vVDadoE[1],vVDadoE[2],vVDadoE[3],1,cFilTPN,cFilTPN,{cTRBS,cTRBF,CTRBEixo})
			If ExistBlock("NGUTIL4C")
				ExecBlock("NGUTIL4C",.F.,.F.,{vVDadoE[1],dDTACUFP,cHRACU,nCONTAFP,nACUMFIP})
			EndIf
		EndIf

		//Referentes ao segundo contador
		If lSegCont
			//FindFunction remover na release GetRPORelease() >= '12.1.027'
			If FindFunction("MNTCont2")
				lValCont2 := MNTCont2(cFiliST9, vVDadoE[1])
			Else
				lValCont2 := MNT6552CNT(IIf(NGSX2MODO("TPE")="E",cFiliST9,xFilial("TPE")),vVDadoE[1]) //Verifica se existe contador e/ou está ativado.
			EndIf
			If lValCont2
				aARALTC := {'TPP','TPP->TPP_FILIAL','TPP->TPP_CODBEM','TPP->TPP_DTLEIT','TPP->TPP_HORA','TPP->TPP_POSCON',;
					              'TPP->TPP_ACUMCO','TPP->TPP_VARDIA','TPP->TPP_VIRACO'}
				aARABEM := {'TPE','TPE->TPE_POSCON','TPE->TPE_CONTAC','TPE->TPE_DTULTA','TPE->TPE_VARDIA'}
				DbSelectArea(aARALTC[1])
				DbSetOrder(5)
				If DbSeek(xFilial(aARALTC[1],cFilTPN)+vVDadoE[1]+Dtos(vVDadoE[2])+vVDadoE[3])
					nRECNSTP := Recno()
					lULTIMOP := .T.
					nACUMFIP := 0
					nCONTAFP := 0
					nVARDIFP := 0
					dDTACUFP := Ctod('  /  /  ')
					cHRACU   := "  :  "
					DbSkip(-1)
					If !Eof() .And. !Bof() .And. &(aARALTC[2]) = xFilial(aARALTC[1],cFilTPN) .And. &(aARALTC[3]) = vVDadoE[1]
						nACUMFIP := &(aARALTC[7])
						dDTACUFP := &(aARALTC[4])
						nCONTAFP := &(aARALTC[6])
						nVARDIFP := &(aARALTC[8])
						cHRACU   := &(aARALTC[5])
					EndIf
					DbGoTo(nRECNSTP)

					nACUMDEL := TPP->TPP_ACUMCO

					DbSelectArea(aARALTC[1])
					RecLock(aARALTC[1],.F.)
					DbDelete()
					MsUnlock(aARALTC[1])

					MNTA875ADEL(vVDadoE[1],vVDadoE[2],vVDadoE[3],2,cFilTPN,cFilTPN,{cTRBS,cTRBF,CTRBEixo})
					If ExistBlock("NGUTIL4C")
						ExecBlock("NGUTIL4C",.F.,.F.,{vVDadoE[1],dDTACUFP,cHRACU,nCONTAFP,nACUMFIP})
					EndIf
				EndIf
			EndIf
		EndIf

		//Deleta as tabelas temporárias relacionadas a contador
		If TQN->TQN_HODOM <> 0 .Or. TQN->TQN_POSCO2 <> 0
			//Função genérica inserida no mntutil_contador, após virada de release (12.1.27) retirar esta condição
			//e obsoletar a função Static fDelTemp
			If lRPORel17 .And. FindFunction("MNTDTemp")
				MNTDTemp()
			Else
				fDelTemp()
			EndIf
		EndIf

		//P.E. para justificativa da exclusao
		If ExistBlock("MNT655JUST")
			If !ExecBlock("MNT655JUST",.F.,.F.,{'1',cFilTPN,vVDadoE[13]})
				Return
			EndIf
		EndIf

		//   MNT655TTA()
		DbSelectArea("TQN")
		DbSetOrder(nSetOrd)

	EndIf

	If !Empty(cRetF655)
		bFiltraBrw := {|| FilBrowse("TQN",@aIndTQN,@cRetF655) }
		Eval(bFiltraBrw)
	EndIf

	RestArea(aOldArea)

	cFilAnt := cFilBkp

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} MNTA655OK
Consistencia para alteracao e/ou exclusao

@author  Inacio Luiz Kolling
@since   19/07/2006
@version P11/P12
@param   cMenc, Caracter, Mensagem a ser concatenada com string 051.
@return  Lógico, Define se há inconsistência.
/*/
//-------------------------------------------------------------------
Function MNTA655OK(cMENC)
	If !Empty(TQN->TQN_DTPREV)
		// "Registro já foi previsionado, não poderá mais ser excluido"
		HELP( ' ', 1, STR0054,, STR0051 + " " + cMENC, 2, 0,,,,,, /*Solucao*/ )
		Return .F.
	EndIf
Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNTA655PUNI³ Autor ³Inacio Luiz Kolling    ³ Data ³19/07/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Consistencia do preco unitario na alteracao                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNTA655PUNI(cFilTQF,lBNGRAVA)

	Local aRetValTanq	:= Array( 2 )
	Local cChave		:= " "
	Local cFilBemST9	:= ''
	Local cPlacaBem		:= ''
	Local cCOMB656		:= IIf(Type("cTTAComb") <> 'U',cTTAComb,"")
	Local lRet          := .T.
	Local l655Auto      := Type( 'aRotAuto' ) != 'U'
	Local lMNTA6550     := ExistBlock( 'MNTA6550' )

	Default cFilTQF		:= cFilAnt
	Default lBNGRAVA	:= .F.

	cPrvBemClk := MNT655PREV()

	If FunName() == "MNTA656"
		cFrota655 := IIf(ReadVar()=='M->TQN_FROTA',M->TQN_FROTA,oBrw1:aCols[n][nPOSFROTA])
		cCombu655 := NGSEEK("TQI",cPosto+cLoja+cTanque+cCOMB656,1,'TQI->TQI_CODCOM')
		cPlacaBem := IIf(ReadVar()=='M->TQN_PLACA',M->TQN_PLACA,oBrw1:aCols[n][nPOSPLACA])

	ElseIf IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)
		cFrota655 := M->TQN_FROTA
		cCombu655 := M->TQN_CODCOM
		cPlacaBem := M->TQN_PLACA

		If l655Auto .Or. (ReadVar() = "M->TQN_LOJA" .And. !Empty(M->TQN_POSTO) )
		   NGIfDbSeek("SA2",M->TQN_POSTO+M->TQN_LOJA,1)
		EndIf

	Else
		cFrota655 := IIf(ReadVar()=='M->TQN_FROTA',M->TQN_FROTA,aCols[n][nPOSFROTA])
		cCombu655 := NGSEEK('TQI',cPosto+cLoja+cTanque,1,'TQI->TQI_CODCOM')
	EndIf

	lComb := .F.

	If l655Auto .Or. ReadVar() == 'M->TQN_CODCOM'
		If !Altera .And. !lBNGRAVA
			M->TQN_HRABAS := "  :  "
			M->TQN_TANQUE := Space(Len(M->TQN_TANQUE))
			M->TQN_BOMBA := Space(Len(M->TQN_BOMBA))
		EndIf
		If GetNewPar("MV_NGPRSB2","N") == "S"
			M->TQN_VALTOT := M->TQN_QUANT * M->TQN_VALUNI
			lValTot := .F.
			If Altera
				lPrev := .F.
			EndIf
		EndIf

		If !Empty(cPlacaBem)

			//Buscar a filial do Bem
			DbSelectArea("ST9")
			DbSetOrder(14)
			If DbSeek(cPlacaBem+"A")
				cFilBemST9 := ST9->T9_FILIAL
			EndIf
		Else

			// para abastecimento sem placa informada o abastecimento só deve ser realizado na filial logada

			DbSelectArea("ST9")
			DbSetOrder(1)
			If DbSeek( xFilial("ST9") + M->TQN_FROTA)
				While ST9->(!EOF()) .And. ST9->T9_FILIAL == xFilial("ST9") .And. ST9->T9_CODBEM == M->TQN_FROTA
					If ST9->T9_SITBEM == "A"
						cFilBemST9 := ST9->T9_FILIAL
						exit
					EndIf
					DbSelectArea("ST9")
					DbSkip()
				End
			EndIf
		EndIf

		If l655Auto .And. Inclui

			M->TQN_CODCOM := aRotAuto[aSCAN( aRotAuto, { |x| Trim( Upper(x[1]) ) == "TQN_CODCOM"}), 2]
			M->TQN_LOJA   := aRotAuto[aSCAN( aRotAuto, { |x| Trim( Upper(x[1]) ) == "TQN_LOJA"}), 2]

		EndIf

		// Valida compatibilidade do Combustível com o Veículo
		aRetValTanq := fChkComBem( cFrota655,M->TQN_CODCOM ,cFilBemST9 )
		lComb       := aRetValTanq[1]
		If aRetValTanq[1]
			nCapTan := aRetValTanq[2] // Retorna TT8_CAPMAX, capacidade máxima do tanque do bem
		Else
			lRet := .F.
		EndIf

		If lRet .And. ( IsInCallStack( 'MNTA655' ) .Or. !Empty( cPrvBemClk ) )

			If lMNTA6550

				lRet := ExecBlock( 'MNTA6550', .F., .F. )

			Else

				// Valida convênio do Posto X Combustível
				cTQFConven := NGSEEK("TQF",M->TQN_POSTO+M->TQN_LOJA,1,"TQF->TQF_CONVEN")
				cTQMConven := NGSEEK("TQM",M->TQN_CODCOM+cTQFConven,1,"TQM->TQM_CONVEN")
				If cTQFConven <> cTQMConven
					// "Convênio do combustível incompatível com o convênio do posto"
					HELP( ' ', 1, STR0007,, STR0186, 2, 0,,,,,, /*Solucao*/)
					lRet := .F.
				EndIf

			EndIf

		EndIf

	EndIf

	If lRet .And. ALTERA

		If !Empty(cPlacaBem)
			dbSelectArea("ST9")
			dbSetOrder(14)
			If dbSeek(cPlacaBem)
				cFilBens := ST9->T9_FILIAL
			EndIf
		Else
			cFilBens := cFiliST9
		EndIf

		cCombu655 := PadR(cCombu655,TAMSX3("TT8_CODCOM")[1])
		cChave := cFilBens+cFrota655+cCombu655+"1"

		If !(NGCADICBASE("TT8_CODBEM","A","TT8",.F.) .And. NGCADICBASE("TT8_CODCOM","A","TT8",.F.))
			DbSelectArea("ST9")
			DbSetOrder(01)
			If DbSeek(xFilial("TT8")+cFrota655)
				nCapTan := ST9->T9_CAPMAX
			EndIf
		Else

			DbSelectArea("TT8")
			DbSetOrder(1) //TT8_FILIAL+TT8_CODBEM+TT8_CODCOM+TT8_TPCONT+TT8_TIPO
			If DbSeek(cChave)
				nCapTan := TT8->TT8_CAPMAX
			EndIf

		EndIf

		lREFRESH := .T.

	EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} MNTA655MOT
Consistencia na alteracao do motorista na alteracao do regis.

@author  Inacio Luiz Kolling
@since   19/07/2006
@version P11/P12
/*/
//-------------------------------------------------------------------
Function MNTA655MOT()

	If !Empty(TQN->TQN_DINTMS)
		// "Motorista nao pode ser alterado, pois o calculo da remuneracao variavel ja foi realizado."
		HELP( ' ', 1, STR0054,, STR0055 + Chr( 13 ) + STR0056, 2, 0,,,,,, /*Solucao*/ )
		Return .F.
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNTA655ALTH³ Autor ³Inacio Luiz Kolling    ³ Data ³19/07/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Consistencia na alteracao do contador                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNTA655ALTH(nTpContador)

	Local lValCont2 := .F.

	cPrvBemClk := MNT655PREV()

	cHodom6552 := 0
	cFrota     := ''

	If FunName() == "MNTA656"
		cHodom655 := IIf(ReadVar()=='M->TQN_HODOM',M->TQN_HODOM,oBrw1:aCols[n][nPOSHODOM])
		cFrota := IIf(ReadVar()=='M->TQN_FROTA',M->TQN_FROTA,oBrw1:aCols[n][nPOSFROTA])
	ElseIf IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)
		cHodom655  := M->TQN_HODOM
		cFrota := M->TQN_FROTA
		If lSegCont
			//FindFunction remover na release GetRPORelease() >= '12.1.027'
			If FindFunction("MNTCont2")
				lValCont2 := MNTCont2(xFilial("TPE"), M->TQN_FROTA)
			Else
				lValCont2 := MNT6552CNT(xFilial("TPE"),M->TQN_FROTA) //Verifica se existe contador e/ou está ativado.
			EndIf
			If lValCont2
				cHodom6552 := M->TQN_POSCO2
			EndIf
		EndIf
	EndIf

	If ALTERA
		If lSegCont
			//FindFunction remover na release GetRPORelease() >= '12.1.027'
			If FindFunction("MNTCont2")
				lValCont2 := MNTCont2(xFilial("TPE"), cFrota)
			Else
				lValCont2 := MNT6552CNT(xFilial("TPE"),cFrota) //Verifica se existe contador e/ou está ativado.
			EndIf
			If lValCont2
				If cHodom655 > 0 .Or. cHodom6552 > 0
					If !MNT655HOD(nTpContador)
						Return .F.
					EndIf
				EndIf
			EndIf
		Else
			If cHodom655 > 0
				If !MNT655HOD(nTpContador)
					Return .F.
				EndIf
			EndIf
		EndIf
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MNT655NF
Consistencia da obrigatoriedade do campo TQN_NOTFIS p/abast. Manual

@author  Evaldo Cevinscki Jr.
@since   31/07/2006
@version P11/P12
@param   [Caracter], cFilTQF, Filial TQF
@return  Lógico, define se o campo Nota fiscal foi preenchido corretamente.
/*/
//-------------------------------------------------------------------
Function MNT655NF(cFilTQF)

	Local cTipPos
	Default cFilTQF := cFilAnt

	cTipPos := NGSEEK('TQF',M->TQN_POSTO+M->TQN_LOJA,1,'TQF->TQF_TIPPOS',cFilTQF)

	If Inclui
		If M->TQN_AUTO == "2" .And. Empty(M->TQN_NOTFIS) .And. cTipPos != '2'
			//"Para Abastecimento Manual é obrigatório informar o número da Nota Fiscal."
			HELP( ' ', 1, 'OBRIGAT',, CRLF + STR0092, 2, 0,,,,,, /*Solucao*/ )
			Return .F.
		EndIf
	Else
		If TQN->TQN_AUTO == "2" .And. Empty(M->TQN_NOTFIS) .And. cTipPos != '2'
			//"Para Abastecimento Manual é obrigatório informar o número da Nota Fiscal."
			HELP( ' ', 1, 'OBRIGAT',, CRLF + STR0092, 2, 0,,,,,, /*Solucao*/ )
			Return .F.
		EndIf
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT655CAD  ³ Autor ³Evaldo Cevinscki Jr.   ³ Data ³08/08/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Grava abastecimento para a filial do Bem.     				   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNT655CAD()

	Private cBemAnt    := ''	// Bem gatilhado quando digitado a placa.

    If !Empty(cMotGer)
    	dbSelectArea("DA4")
    	dbSetOrder(03)
    	If dbSeek(xFilial("DA4")+cMotGer)
    		cMoTorista := DA4->DA4_COD
    	EndIf
    	dbSetOrder(01) //usado no X3_INIBRW
    EndIf

	cFilTQN  := xFilial("TQN")
	cFiliST9 := xFilial("ST9")	//Armazena filial corrente da ST9
	nRET     := MNT655SC("TQN",Recno(),3)

	If !Empty(cRetF655)
		bFiltraBrw := {|| FilBrowse("TQN",@aIndTQN,@cRetF655) }
		Eval(bFiltraBrw)
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MN655NUMSGC³ Autor ³ Evaldo Cevinscki Jr. ³ Data ³20/09/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Pega ultimo NumSGC e incrementa 1 para gravar o proximo     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaSGF,MNTA635, MNTA660                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MN655NUMSGC(lMem)
Local cNumSGC := 1

cAliasQry := GetNextAlias() //"TTQN"

cQuery := " SELECT (TQN.TQN_NUMSGC) NUMSGC "
cQuery += " FROM "+RetSQLName("TQN")+" TQN"
cQuery += " WHERE TQN.R_E_C_N_O_= "
If lMem = Nil
	cQuery += " (SELECT MAX(TQN2.R_E_C_N_O_ -1) NUM "
Else
	cQuery += " (SELECT MAX(TQN2.R_E_C_N_O_) NUM "
EndIf
cQuery += " FROM "+RetSQLName("TQN")+" TQN2 )"

cQuery := ChangeQuery(cQuery)
dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

While !EOF()
	If Empty((cALIASQRY)->NUMSGC)
		cNUMSGC := 1
	Else
		cNUMSGC := Val((cALIASQRY)->NUMSGC)+1
	EndIf
	If cNUMSGC > 999999
		cNUMSGC := 1
	EndIf
	DbSelectArea(cALIASQRY)
	DbSkip()
End
(cALIASQRY)->( dbCloseArea() )
cNUMSGC := StrZero(cNUMSGC,6)

Return cNUMSGC

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNA655CV   ³ Autor ³ Marcos Wagner Junior ³ Data ³02/11/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³verifica se ja existe abastecimento c/mesma Frota,Dt e Hr   ³±±
±±³          ³verifica tambem abastecimento c/mesmo Posto,Dt e Nf         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA655						                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNA655CV(cPARAM, lVldFolha)

	Local aArea      := GetArea()
	Local aRet       := {}
	Local cCodCom    := Space(3)
	Local cCdComb    := Space(3)
	Local lRet       := .T.
	Local cPlaca655  := ""
	Local nAbastAnt  := ""
	Local cPostotAnt := ""
	Local cFrotaAnt  := ""
	Local cHoraAnt   := "  :  "
	Local dDtBlqMov  := SuperGetMV("MV_DBLQMOV",.F.,STOD("")) //data de bloqueio de movimentações no estoque.
	Local l655Auto   := Type( 'aRotAuto' ) != 'U'

	Default lVldFolha := .T.

	cPrvBemClk := MNT655PREV()
    cQry       := ""

	Store 0 To M->TQN_HODAN2,M->TQN_KMROD2,M->TQN_VARDI2,M->TQN_HODANT,M->TQN_KMROD,M->TQN_VARDIA
	Store Ctod("  /  /    ")  To M->TQN_DTAAN2,M->TQN_DTAANT
	Store "  :  "             To M->TQN_HRAAN2,M->TQN_HRAANT
	Store 0.00                To M->TQN_HRAAN2,M->TQN_HRAANT

	If FunName() == "MNTA656"
		cFrota655 := IIf(ReadVar()=='M->TQN_FROTA',M->TQN_FROTA,oBrw1:aCols[n][nPOSFROTA])
		dDatAb655 := IIf(ReadVar()=='M->TQN_DTABAS',M->TQN_DTABAS,oBrw1:aCols[n][nPOSDATAB])
		cHorAb655 := IIf(ReadVar()=='M->TQN_HRABAS',M->TQN_HRABAS,oBrw1:aCols[n][nPOSHORAB])
		cNotaF655 := cFolha
		cPosto655 := cPosto
		cLoja655  := cLoja
	ElseIf IsInCallStack( 'MNTA655' ) .Or. FunName() == "MNTA700" .Or. !Empty(cPrvBemClk)
		cFrota655 := M->TQN_FROTA
		cPlaca655 := M->TQN_PLACA
		dDatAb655 := M->TQN_DTABAS
		cHorAb655 := M->TQN_HRABAS
		cNotaF655 := M->TQN_NOTFIS
		cPosto655 := M->TQN_POSTO
		cCodCom   := M->TQN_CODCOM
		cLoja655  := M->TQN_LOJA
	Else
		cFrota655 := IIf(ReadVar()=='M->TQN_FROTA',M->TQN_FROTA,aCols[n][nPOSFROTA])
		dDatAb655 := dDataAbast
		cHorAb655 := IIf(ReadVar()=='M->TQN_HRABAS',M->TQN_HRABAS,aCols[n][nPOSHORAB])
		cNotaF655 := cFolha
		cPosto655 := cPosto
		If !Empty(cLoja)
			cLoja655  := cLoja
		Else
			cLoja655  := ""
		EndIf
	EndIf

	cQry += " TQN_FILIAL = '" + xFilial("TQN") + "' And "
	If cPARAM == 'HR'

		cQry += "     TQN_FROTA   = " + ValToSQL(cFrota655)
		cQry += " AND TQN_DTABAS  = " + ValToSQL(DTos(dDatAb655))
		cQry += " AND TQN_HRABAS  = " + ValToSQL(cHorAb655)
		cQry += " AND TQN_PLACA   = " + ValToSQL(cPlaca655)       // Adicionada a placa a busca de abastecimenTo.
		cQry += " AND D_E_L_E_T_ <> '*' "

	ElseIf cPARAM == 'DT'

		cQry += "     TQN_FROTA   = " + ValToSQL(cFrota655)
		cQry += " AND TQN_POSTO   = " + ValToSQL(cPosTo655)
		cQry += " AND TQN_DTABAS  = " + ValToSQL(DTos(dDatAb655))
		cQry += " AND TQN_NOTFIS  = " + ValToSQL(cNotaF655)
		cQry += " AND TQN_PLACA   = " + ValToSQL(cPlaca655)       // Adicionada a placa a busca de abastecimenTo.
		cQry += " AND D_E_L_E_T_ <> '*' "

		If !Empty(cCodCom)
			cQry += " AND TQN_CODCOM='"+cCodCom+"'"
		EndIf
		//É necessário a busca utilizando filial e placa, pois pode ocorre de dois bens ter o mesmo código. Dessa forma
		//a query está considerando que já existe um abastecimento para uma frota, que na verdade ainda não possui para determinada data/hora/posto.
	EndIf

	If ALTERA
		cQry += IIf(!Empty(cQry), " AND ", "") + " R_E_C_N_O_ <> "+cValToChar(TQN->(RecNo()))+" "
	EndIf

	If INCLUI .Or. Altera
		If (FunName() != "MNTA656" .Or. (FunName() == "MNTA656" .And. !Altera)) .And. lVldFolha //Verifica folha
			DbSelectArea("TQF")
			DbSetOrder(01)
			If DbSeek(xFilial("TQF")+cPosto655+cLoja655) .And. !Empty(cPosto655) .And. !Empty(cLoja655)
				If TQF->TQF_TIPPOS == "2"
					DbSelectArea("TTA")
					DbSetOrder(01)
					lRet := !DbSeek(xFilial("TTA")+cPosto655+cLoja655+cNotaF655)
					If !lRet
						HELP( ' ', 1, STR0007,, "Esta N.Nota/Reg já foi informada em outro abastecimento para este posto e loja.",2,0,,,,,, {"Altere o número da N.Nota/Reg."})
						Return .F.
					EndIf
				EndIf
			EndIf
		EndIf

		cAliasQry := GetNextAlias()
		cQuery := " SELECT TQN_NABAST,TQN_POSTO,TQN_FROTA,TQN_DTABAS,TQN_HRABAS,TQN_NOTFIS,TQN_CODCOM "
		cQuery += " FROM " + RetSqlName("TQN")
		cQuery += " WHERE " + cQry

		cQuery := ChangeQuery(cQuery)
		dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

		While !Eof()
			aAdd( aRet, { '1' } )
			nAbastAnt  := (cAliasQry)->TQN_NABAST
			cPostotAnt := (cAliasQry)->TQN_POSTO
			cFrotaAnt  := (cAliasQry)->TQN_FROTA
			cHoraAnt   := (cAliasQry)->TQN_HRABAS
			cNotaAnt   := (cAliasQry)->TQN_NOTFIS
			cCdComb := (cAliasQry)->TQN_CODCOM
			DbSkip()
		End

		(cAliasQry)->(DbCloseArea())

		If !Empty(aRet) .And. cPARAM == 'HR'
			If Empty(cCodCom) .Or. cCodCom == cCdComb
				HELP(" ",1,STR0007,,STR0093+Chr(10)+STR0094,3,1) //"ATENÇÃO"###"Já existe um abastecimento para"###" esta Frota com mesma Data e Hora!"
				Return .F.
			Else
				HELP(' ',1, STR0083,, STR0093+STR0094+Chr(10)+Chr(10)+;      //"Já existe um abastecimento para"###" esta Frota com mesma Data e Hora!"
				        STR0134+cFrota655+Chr(13)+Chr(10)+;                  //"Frota: "
				        STR0119+AllTrim(DTOC(dDatAb655))+Chr(13)+Chr(10)+;   //"Data: "
				        STR0120+AllTrim(cHorAb655)+Chr(13)+Chr(10)+;         //"Hora: "
				        STR0121+AllTrim(cPosto655)+Chr(13)+Chr(10)+;         //"Posto: "
				        STR0135+AllTrim(cCdComb)+Chr(13)+Chr(10)+;           //"Combustível: "
				        STR0136+AllTrim(cNotaF655)+Chr(13)+Chr(10)+Chr(10)+; //"Nota/Req.: "
				        STR0087+Chr(13)+Chr(10)+;                            //"Soluções Possíveis:"
				        STR0137+Chr(13)+Chr(10)+;                            // "1 - Alterar para uma hora superior."
				        STR0089,2,0,,,,,, /*Solucao*/ )

				Return .F.
			EndIf
		EndIf
		If Inclui .Or. Altera
			If !l655Auto .And. !Empty(aRet) .And. cPARAM == 'DT' .And. !Empty(cNotaF655)
				//Foi encontrado abastecimento com as mesmas características que o abastecimento atual, contendo o mesmo número de nota fiscal:
				If !MsgYesNo(STR0163+Chr(10)+Chr(10)+;
						     STR0164+Alltrim(nAbastAnt)+Chr(13)+Chr(10)+;        //Nº Abastecimento
					         STR0121+AllTrim(cPostotAnt)+Chr(13)+Chr(10)+;       //Posto
					         STR0122+Alltrim(cLoja655)+Chr(13)+Chr(10)+;         //Loja
					         STR0134+Alltrim(cFrotaAnt)+Chr(13)+Chr(10)+;        //Frota
					         STR0165+Alltrim(cPlaca655)+Chr(13)+Chr(10)+;        //Placa:
					         STR0119+AllTrim(DTOC(dDatAb655))+Chr(13)+Chr(10)+;  //Data:
					         STR0120+AllTrim(cHoraAnt)+Chr(13)+Chr(10)+;         //Hora
					         STR0136+AllTrim(cNotaAnt)+Chr(13)+Chr(10)+Chr(10)+; //Nota/Req
					         STR0166,STR0007)
					Return .F.
				EndIf
			EndIf
		EndIf
	EndIf


	If Len(Alltrim(cHorAb655)) > 1 .And. cPARAM == 'DT'
		RestArea(aArea)
		lRet := MNA655HR( , .T. )
		Return lRet
	EndIf

	DbSelectArea("TQF")
	DbSetOrder(1)
	If DbSeek(xFilial("TQF")+cPosto655+cLoja655)
		If TQF->TQF_TIPPOS == "2" .And. cUsaInt3 == "S" .And. cConEst == "S"
			If dDatAb655 <= dDtBlqMov .And. !Empty(dDatAb655)
				// "Não pode haver abastecimento se a data do mesmo for menor ou igual que a data de bloqueio de movimentações. "
				HELP(' ', 1, STR0007, , STR0178 + DTOC( dDtBlqMov ) + ".", 2, 0,,,,,, /* Solucao */ )
				Return .F.
			EndIf
		EndIf
	EndIf

	RestArea(aArea)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ MenuDef  ³ Autor ³ Rafael Diogo Richter  ³ Data ³02/02/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Utilizacao de Menu Funcional.                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaMNT                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Array com opcoes da rotina.                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Parametros do array a Rotina:                               ³±±
±±³          ³1. Nome a aparecer no cabecalho                             ³±±
±±³          ³2. Nome da Rotina associada                                 ³±±
±±³          ³3. Reservado                                                ³±±
±±³          ³4. Tipo de Transao a ser efetuada:                        ³±±
±±³          ³    1 - Pesquisa e Posiciona em um Banco de Dados           ³±±
±±³          ³    2 - Simplesmente Mostra os Campos                       ³±±
±±³          ³    3 - Inclui registros no Bancos de Dados                 ³±±
±±³          ³    4 - Altera o registro corrente                          ³±±
±±³          ³    5 - Remove o registro corrente do Banco de Dados        ³±±
±±³          ³5. Nivel de acesso                                          ³±±
±±³          ³6. Habilita Menu Funcional                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MenuDef()
Local aRotina :=	{{STR0001 ,"AxPesqui"   , 0 , 1},; //"Pesquisar"
                     {STR0002 ,"MNT655SC"   , 0 , 2},; //"Visualizar"
                     {STR0003 ,"MNT655CAD()" , 0 , 3},; //"Incluir"
                     {STR0004 ,"MNTA655A()" , 0 , 4},; //"Alterar"
					 {STR0005 ,"MNTA655E()"	, 0 , 5},; //"Excluir"
					 {STR0155 ,"MNTA655Fl"	, 0 , 3}}	//"Mostrar Dt. Atual"

	If ExistBlock( 'MNTA6559' )
		aRotina := ExecBlock( 'MNTA6559', .F., .F., { aRotina } )
	EndIf

Return aRotina

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT655ANT  ³ Autor ³Evaldo Cevinscki Jr.  ³ Data ³19/02/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Carrega campos virtuais e visuais referentes ao abastecimen-³±±
±±³          ³to anterior ao que esta sendo incluido.                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA655                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNT655ANT(nCampo)

	Local aArea   := GetArea()
	Local nRecTQN := TQN->(Recno())

	If Type("M->TQN_FROTA") != "C"
		Return .T.
	EndIf

	If !Empty(DtoS(M->TQN_DTABAS)+M->TQN_HRABAS) .And. !IsInCallStack("MNTC935")

       	//Adicionada busca da ST9 para posicionar a tabela corretamente. VisTo o grande numero de variaveis para tratar
        //de filial, nunca é possivel saber 100% se ela está correta ou se está preenchida.
		If !Empty(M->TQN_PLACA)
		    fBscBemPla(M->TQN_PLACA)
		    cFilBem := ST9->T9_FILIAL
		Else
		    cFilBem := xFilial('TQN')
		EndIf

		vRetApBe      := NGACUMEHIS(M->TQN_FROTA,M->TQN_DTABAS,M->TQN_HRABAS,1,"A",cFilBem,'STP->TP_TIPOLAN = "A" .Or. STP->TP_TIPOLAN = "I"',.T.,M->TQN_PLACA)
		M->TQN_HODANT := vRetApBe[1]
		M->TQN_VARDIA := vRetApBe[6]
		M->TQN_DTAANT := vRetApBe[3]
		M->TQN_HRAANT := vRetApBe[4]
		nAcumAba      := vRetApBe[2]

		M->TQN_KMROD := 0
		If M->TQN_HODOM > 0
			vRetApBe     := NGACUMEHIS(M->TQN_FROTA,M->TQN_DTABAS,M->TQN_HRABAS,1,"A",,,.T.,M->TQN_PLACA)
			nAcumHis     := vRetApBe[2]+(M->TQN_HODOM-vRetApBe[1])
			M->TQN_KMROD := nAcumHis - nAcumAba
		EndIf

   		If FunName() == "MNTA656"
			nPosQts := aSCAN(aHeader,{|x| Trim(Upper(x[2])) == "TQQ_QUANT"})
			M->TQN_QUANT := oBrw1:aCols[n][nPosQts]
   		EndIf

		cTpUn1 := NGSEEK('ST6',ST9->T9_CODFAMI,1,'T6_MEDIA1')
		cTpUn1 := IIf(Empty(cTpUn1),"1",cTpUn1)

		If cTpUn1 = "1"
			M->TQN_MEDIA := IIf(M->TQN_KMROD > 0,M->TQN_KMROD/M->TQN_QUANT,0)
		Else
			M->TQN_MEDIA := IIf(M->TQN_KMROD > 0,M->TQN_QUANT/M->TQN_KMROD,0)
		EndIf

		If !Inclui //Altera
			If nCampo = 1
				RestArea(aArea)
				DbSelectArea("TQN")
				DbGoTo(nRecTQN)
				Return M->TQN_DTAANT
			ElseIf nCampo = 2
				RestArea(aArea)
				DbSelectArea("TQN")
				DbGoTo(nRecTQN)
				Return M->TQN_HRAANT
			ElseIf nCampo = 3
				RestArea(aArea)
				DbSelectArea("TQN")
				DbGoTo(nRecTQN)
				Return M->TQN_HODANT
			ElseIf nCampo = 4
				RestArea(aArea)
				DbSelectArea("TQN")
				DbGoTo(nRecTQN)
				Return M->TQN_VARDIA
			ElseIf nCampo = 5
				RestArea(aArea)
				DbSelectArea("TQN")
				DbGoTo(nRecTQN)
				Return M->TQN_KMROD
			ElseIf nCampo = 6
				RestArea(aArea)
				DbSelectArea("TQN")
				DbGoTo(nRecTQN)
				Return M->TQN_MEDIA
			EndIf
		EndIf
	Else
		If nCampo = 1
			RestArea(aArea)
			DbSelectArea("TQN")
			DbGoTo(nRecTQN)
			Return CtoD("  /  /  ")
		ElseIf nCampo = 2
			RestArea(aArea)
			DbSelectArea("TQN")
			DbGoTo(nRecTQN)
			Return "  :  "
		ElseIf nCampo = 3
			RestArea(aArea)
			DbSelectArea("TQN")
			DbGoTo(nRecTQN)
			Return 0
		ElseIf nCampo = 4
			RestArea(aArea)
			DbSelectArea("TQN")
			DbGoTo(nRecTQN)
			Return 0
		ElseIf nCampo = 5
			RestArea(aArea)
			DbSelectArea("TQN")
			DbGoTo(nRecTQN)
			Return 0
		ElseIf nCampo = 6
			RestArea(aArea)
			DbSelectArea("TQN")
			DbGoTo(nRecTQN)
			Return 0
		EndIf
	EndIf

	TQN->(DbGoTo(nRecTQN))
	RestArea(aArea)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT655TTA ³ Autor ³Evaldo Cevinscki Jr.   ³ Data ³23/10/08  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Checa se foi lancado pelo abast.em lote e altera tabela TTA ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA655                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNT655TTA()
Local nRecno


	If Altera
		If (TQN->TQN_QUANT <> vDadoAtu[6] .Or. TQN->TQN_NOTFIS <> vDadoAtu[8])
			DbSelectArea("TTA")
			DbSetOrder(1)
			If DbSeek(xFilial("TTA")+TQN->TQN_POSTO+TQN->TQN_LOJA+vDadoAtu[8])
				RecLock("TTA",.F.)
				If TQN->TQN_QUANT <> vDadoAtu[6]
					//TTA->TTA_TOTCOM -= vDadoAtu[6]
					//TTA->TTA_TOTCOM += TQN->TQN_QUANT
					TTA->TTA_CONBOM -= vDadoAtu[6]
					TTA->TTA_CONBOM += TQN->TQN_QUANT
				EndIf
				If TQN->TQN_NOTFIS <> vDadoAtu[8]
					TTA->TTA_TOTCOM -= vDadoAtu[6]
				EndIf
				MsUnLock("TTA")

				nRecno := Recno()
				cDataHora := DTOS(TTA->TTA_DTABAS)+TTA->TTA_HRABAS

			EndIf
		EndIf
	EndIf


Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc} MNT655SC
Monta tela de cadastro do abastecimento.

@param cAlias, Caracter, Alias da tabela utilizada.
@param nReg, Numérico, Numero do registro.
@param nOpcX, Numérico, Numero da opção selecionada.

@author Paulo Pego
@since 27/10/08

@return nOPCa, Numérico, Numero da opção selecionada
/*/
//---------------------------------------------------------------------------------
Function MNT655SC(cAlias,nReg,nOpcX)

	Local m,i,x, lCLICK, cError, cKEY
	Local lDEL       := .T.
	Local lVerDic 	 := IIf("GETSXENUM" $ NGSEEKDIC("SX3", "TQN_NABAST", 2, "X3_RELACAO"), .F., .T.) // Variavel que garante que Ajuste foi implementado no MNTUTIL
	Local oFontB     := TFont():New("Arial",,-12,,.T.)
	Local nRecaAb    := 0
	Local aCadBtns   := {}
	Local oSize      := FwDefSize():New(.T.)
	Local nLinIniTl  := oSize:aWindSize[1] // Linha  inicial da tela
	Local nColIniTl  := oSize:aWindSize[2] // Coluna inicial da tela
	Local nLinFimTl  := oSize:aWindSize[3] // Linha  final   da tela
	Local nColFimTl  := oSize:aWindSize[4] // Coluna final   da tela
	Local aNao		 := {}
	Local aCampos	 := Nil
	Local l655Auto   := Type( 'aRotAuto' ) != 'U'

	Private oDlg, oGet, oMenu
	Private oKmRod,oMedia,oMedia2,oGetMedia,oGetMedi2,cMedia,cKmRod,cMedia2
	Private cFilCad       := xFilial(cAlias)
	Private M->TQN_DTAANT := CtoD("  /  /  ")
	Private M->TQN_HODANT := 0
	Private M->TQN_KMROD  := 0
	Private M->TQN_HRAANT := ''
	Private M->TQN_VARDIA := 0
	Private M->TQN_MEDIA  := 0
	Private M->TQN_DTAAN2 := CtoD("  /  /  ")
	Private M->TQN_HODAN2 := 0
	Private M->TQN_KMROD2 := 0
	Private M->TQN_HRAAN2 := ''
	Private M->TQN_VARDI2 := 0
	Private M->TQN_MEDI2  := 0
	//Monta a entrada de dados do arquivo
	Private aTELA[0][0]
	Private aGETS[0]
	Private aHeader[0]
	Private Continua
	Private nUsado      := 0
	Private aSize       := MsAdvSize(,.F.,430), aObjects := {}
	// Variável para o Ponto de Entrada MNTA6556
	Private aMNTA6556   := {}
	Private oPanel1
	Private oPanelCont
	Private oSplitter3
	Private oPanel21A, oPanel21B, oPanel21C
	Private oPanel22, oPanel22A, oPanel22B
	Private oPanel21T
	Private oPanel22T

	cPrvBemClk := MNT655PREV()

	cFilTQN  := xFilial("TQN")
	cFiliST9 := xFilial("ST9")	//Armazena filial corrente da ST9

	If nOpcx == 2 .Or. nOpcx == 5
		bNGGrava := {|| AllWaysTrue()}
	Else
		bNGGrava := {|| fRecord655(Recno())}
	EndIf

	// Ponto de Entrada para carregar os botões adicionais da tela de Cadastro
	If ExistBlock("MNTA6556")
		aMNTA6556 := ExecBlock("MNTA6556", .F., .F., {cAlias, nReg, nOpcX})
		If ValType(aMNTA6556) == "A"
			aCadBtns := aClone(aMNTA6556)
		EndIf
	EndIf

	If !l655Auto .And. nOpcX <> 3
		TipoAcom  := IIf(NGSEEK("ST9",TQN->TQN_FROTA,1,"T9_TEMCONT") = "S",.T.,.F.)
		//FindFunction remover na release GetRPORelease() >= '12.1.027'
		If FindFunction("MNTCont2")
			TipoAcom2 := MNTCont2(xFilial("TPE"), TQN->TQN_FROTA)
		Else
			TipoAcom2 := MNT6552CNT(xFilial("TPE"),TQN->TQN_FROTA) //Verifica se existe contador e/ou está ativado.
		EndIf
	EndIf

	If !l655Auto
		aAdd(aObjects,{050,050,.T.,.T.})
		aAdd(aObjects,{100,100,.T.,.T.})
		aInfo   := {aSize[1],aSize[2],aSize[3],aSize[4],0,0}
		aPosObj := MsObjSize(aInfo, aObjects,.T.)
		lCLICK  := (TYPE("aSMENU") == "A") .And. Len(aSMenu) > 0
		If TYPE("aPOS1") != "A"
			aPOS1 := {15,1,95,315}
		EndIf
	EndIf
	lRELAC  := (TYPE("aRELAC") == "A")

	//São preenchidos os conteudos de memoria para os campos durante alteração e verificação, para inclusão inicia-se vazio.
	RegToMemory(cAlias, (nOpcx == 3), .T., !(nOpcx == 3))

	If ExistBlock("MNTA6551") .And. nOpcx == 3
		cRetESP := ExecBlock("MNTA6551", .F. , .F. )
		If ValType(cRetESP) == "N"
			Return cRetESP
		EndIf
	EndIf

	If lRELAC
		For i := 1 to Len(aRELAC)
			cCampo := "M->" + aRELAC[i][1]
			cRelac := aRELAC[i][2]
			&cCampo. := &cRelac
		Next
	EndIf
	If !l655Auto
		nOpca := 0
		DEFINE MSDIALOG oDlg TITLE Ccadastro From nLinIniTl,nColIniTl TO nLinFimTl,nColFimTl OF oMainWnd PIXEL Style nOR(WS_VISIBLE,WS_POPUP)

		oPanel1 	     := TPanel():New(01,01,,oDlg,,,,,,10,10,.F.,.T.)
		oPanel1:Align    := CONTROL_ALIGN_ALLCLIENT

		oPanelCont	         := TPanel():New(00,00,,oDlg,,,,,,12,12,.F.,.F.)
		oPanelCont:Align    := CONTROL_ALIGN_BOTTOM
		oPanelCont:nHeight  := 200

		oSplitter3	     := tSplitter():New( 0,0,oPanelCont,200,200,0 )
		oSplitter3:Align := CONTROL_ALIGN_ALLCLIENT

		oPanel21A         := TPanel():New(00,00,,oSplitter3,,,,,,12,12,.F.,.F.)
		oPanel21A:Align   := CONTROL_ALIGN_ALLCLIENT

		oPanel21B        := TPanel():New(00,00,,oPanel21A,,,,,,12,12,.F.,.F.)
		oPanel21B:Align  := CONTROL_ALIGN_LEFT
		oPanel21B:nWidth := 200

		oPanel21C        := TPanel():New(00,00,,oPanel21A,,,,,,12,12,.F.,.F.)
		oPanel21C:Align  := CONTROL_ALIGN_LEFT
		oPanel21C:nWidth := 200

		oPanel22         := TPanel():New(00,00,,oSplitter3,,,,,,12,12,.F.,.F.)
		oPanel22:Align   := CONTROL_ALIGN_ALLCLIENT

		oPanel22A        := TPanel():New(00,00,,oPanel22,,,,,,12,12,.F.,.F.)
		oPanel22A:Align  := CONTROL_ALIGN_LEFT
		oPanel22A:nWidth := 200

		oPanel22B        := TPanel():New(00,00,,oPanel22,,,,,,12,12,.F.,.F.)
		oPanel22B:Align  := CONTROL_ALIGN_LEFT
		oPanel22B:nWidth := 200

		lMosCon1 := .T.
		If nOpcX <> 3 .And. !TipoAcom
			lMosCon1 := .F.
		EndIf

		If lMosCon1
			oPanel21T         := TPanel():New(00,00,,oPanel21A,,,,,RGB(67,70,87),12,12,.F.,.F.)
			oPanel21T:Align   := CONTROL_ALIGN_TOP
			oPanel21T:nHeight := 25
			cTit1Ct := STR0112 //"Informações do Abastecimento Anterior ( 1º Contador )"
			@ 002,010 SAY oTitulo VAR cTit1Ct SIZE 200, 08 Font oFontB Color RGB(255,255,255) OF oPanel21T PIXEL
		EndIf

		lMosCon2 := .T.
		If nOpcX <> 3 .And. !TipoAcom2
			lMosCon2 := .F.
		EndIf

		If lMosCon2
			oPanel22T         := TPanel():New(00,00,,oPanel22,,,,,RGB(67,70,87),12,12,.F.,.F.)
			oPanel22T:Align   := CONTROL_ALIGN_TOP
			oPanel22T:nHeight := 25
			cTit2Ct := STR0113 //"Informações do Abastecimento Anterior ( 2º Contador )"
			@ 002,010 SAY oTitulo VAR cTit2Ct SIZE 200, 08 Font oFontB Color RGB(255,255,255) OF oPanel22T PIXEL
		EndIf

		//QUANDO INCLUSÃO NÃO DEVE APRESENTAR O CAMPO TQN_NABAST EM TELA, ESTE SOMENTE SERÁ INCRMENTADO NO ATO DE GRAVAÇÃO DO REGISTRO.
		If nOpcx == 3 .And. lVerDic
			aCampos := {}
			aAdd(aNao, "TQN_NABAST")
			aCampos := NGCAMPNSX3(cAlias, aNao)
		EndIf

		oEnchoice := Msmget():New(cAlias, nReg, nOpcx,,,,aCampos,aPosObj[1],,3,,,,oPanel1)

		If !Empty(cPrvBemClk)
			M->TQN_FROTA	:= cPrvBemClk
			M->TQN_PLACA	:= Posicione("ST9",1,xFilial("ST9")+cPrvBemClk,"T9_PLACA")
			M->TQN_DESFRO	:= Posicione("ST9",1,xFilial("ST9")+cPrvBemClk,"T9_NOME")
		EndIf
		If lCLICK
			NGPOPUP(aSMenu,@oMenu)
			oPanel1:bRClicked        := { |o,x,y| oMenu:Activate(x,y,oPanel1)}
			oEnchoice:oBox:bRClicked := { |o,x,y| oMenu:Activate(x,y,oEnchoice:oBox)}
		EndIf

		oPanel22:Hide()

		aArea := TQN->(GetArea())
		If nOpcx == 3
			oPanelCont:Hide()
		Else
			If !lSegCont
				oPanelCont:Hide()
			EndIf
			If TipoAcom
				For m:= 1 to 6
					MNT655ANT(m)
				Next m
			EndIf
			If lSegCont .And. TipoAcom2
				MNT655AN2()
			EndIf
		EndIf
		RestArea(aArea)

		If nOpcX == 2//Posiciona a TQF na visualização para carregar corretamente o tipo de combustível na pesquisa do F3
			DbSelectArea("TQF")
			DbSetOrder(1)
			DbSeek(xFilial("TQF")+M->TQN_POSTO+M->TQN_LOJA)
		EndIf

		// Contador 1
		If lMosCon1
			@ 029,002 SAY RetTitSX3("TQN_DTAANT") SIZE 70, 08 OF oPanel21B PIXEL
			@ 028,038 Msget M->TQN_DTAANT Picture "99/99/9999" SIZE 45,7 of oPanel21B Pixel When .F. HASBUTTON

			@ 040,002 SAY STR0114 SIZE 70, 08 OF oPanel21B PIXEL //"Contador Ant."
			@ 039,038 Msget M->TQN_HODANT Picture "@E 999,999,999" SIZE 45,7 of oPanel21B Pixel When .F.

			@ 051,002 SAY STR0115 SIZE 70, 08 OF oPanel21B PIXEL //"Incremento"
			@ 050,038 Msget M->TQN_KMROD Picture "@E 999,999,999" SIZE 45,7 of oPanel21B Pixel When .F.

			@ 029,002 SAY RetTitSX3("TQN_HRAANT") SIZE 70, 08 OF oPanel21C PIXEL
			@ 028,038 Msget M->TQN_HRAANT Picture "99:99" SIZE 45,7 of oPanel21C Pixel When .F.

			@ 040,002 SAY RetTitSX3("TQN_VARDIA") SIZE 70, 08 OF oPanel21C PIXEL
			@ 039,038 Msget M->TQN_VARDIA Picture "@E 999,999" SIZE 45,7 of oPanel21C Pixel When .F.

			@ 051,002 SAY oMedia Var cMedia  SIZE 70, 08 OF oPanel21C PIXEL
			@ 050,038 Msget oGetMedia Var M->TQN_MEDIA Picture "@E 999,999.99" SIZE 45,7 of oPanel21C Pixel When .F. HASBUTTON

		EndIf

		//Contador 2
		If lMosCon2
			@ 029,002 SAY RetTitSX3("TQN_DTAANT") SIZE 70, 08 OF oPanel22A PIXEL
			@ 028,038 Msget M->TQN_DTAAN2 Picture "99/99/9999" SIZE 45,7 of oPanel22A Pixel When .F. HASBUTTON

			@ 040,002 SAY STR0114 SIZE 70, 08 OF oPanel22A PIXEL //"Contador Ant."
			@ 039,038 Msget M->TQN_HODAN2 Picture "@E 999,999,999" SIZE 45,7 of oPanel22A Pixel When .F.

			@ 051,002 SAY STR0115 SIZE 70, 08 OF oPanel22A PIXEL //"Incremento"
			@ 050,038 Msget M->TQN_KMROD2 Picture "@E 999,999,999" SIZE 45,7 of oPanel22A Pixel When .F.

			@ 029,002 SAY RetTitSX3("TQN_HRAANT") SIZE 70, 08 OF oPanel22B PIXEL
			@ 028,038 Msget M->TQN_HRAAN2 Picture "99:99" SIZE 45,7 of oPanel22B Pixel When .F.

			@ 040,002 SAY RetTitSX3("TQN_VARDIA") SIZE 70, 08 OF oPanel22B PIXEL
			@ 039,038 Msget M->TQN_VARDI2 Picture "@E 999,999" SIZE 45,7 of oPanel22B Pixel When .F.

			@ 051,002 SAY oMedia2 Var cMedia2  SIZE 70, 08 OF oPanel22B PIXEL
			@ 050,038 Msget oGetMed2 Var M->TQN_MEDI2 Picture "@E 999,999.99" SIZE 45,7 of oPanel22B Pixel When .F. HASBUTTON
		EndIf

		If lMosCon1 .Or. lMosCon2
			RetPicVar()
		EndIf

		If !Empty(cPrvBemClk) .And. nOpcx == 3
			MNT655EXIST()
		EndIf

		oEnchoice:SETFOCUS()

		ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||nOpca:=1,IIf(!obrigatorio(aGets,aTela),nOpca := 0,IIf(!Eval(bNGGRAVA),nOpca := 0,oDlg:End()))},;
	                                                {||oDlg:End()},AlignObject(oDlg,{oEnchoice:oBox},1), aCadBtns)
	Else
		nOPCA := IIf( EnchAuto( cAlias, aRotAuto, { || Eval( bNGGrava ) }, nOpcX ), 1, 0 )
	EndIf
	If nOPCA <> 1 .And. nOPCx == 3
		RollBackSX8()
	EndIf

	//Se Confirmou e a opcao excluir
	If nOPCA == 1 .And. nOPCx == 5

		//---------------------------
		// Trava bem para exclusão
		//---------------------------
		If fLockBem555( M->TQN_FROTA )

			//verifica a Integridade Referencial
			lDEL := .T.
			For i := 1 to Len(aCHKDEL)
				DbSelectArea(aCHKDEL[i][2])
				OldInd := INDEXORD()
				DbSetOrder(aCHKDEL[i][3])
				cKEY := aCHKDEL[i][1]
				lDEL := !(DbSeek(xFILIAL(aCHKDEL[i][2])+&cKEY.))
				DbSetOrder(OldInd)
				If !lDEL
					SX2->(DbSeek(aCHKDEL[i][2]))
					cError := AllTrim(FWX2Nome(aCHKDEL[i,2])) + " (" + FWX2CHAVE() + ")"
					HELP(" ",1,"NGINTMOD",,cError,5,1)
					Exit
				EndIf
			Next

			If lDEL

				dbSelectArea( 'TR6' )
				dbSetOrder( 2 ) // Placa Veicul + Data Abast. + Hora Abast.
				If msSeek( FWxFilial('TR6') + M->TQN_PLACA + DTOS(M->TQN_DTABAS) + M->TQN_HRABAS )

					RecLock( 'TR6', .F. )
					DbDelete()
					MsUnlock()

				EndIf

				DbSelectArea(cALIAS)
				RecLock(cAlias,.F.)
				DbDelete()
				(cALIAS)->(MSUNLOCK())
				EvalTrigger()       // Processa Gatilhos
			
			EndIf

			//---------------------------
			// Destrava bem na exclusão
			//---------------------------
			UnLockByName( "MNTA655" + M->TQN_FROTA )

		EndIf
	EndIf

	//Ponto de Entrada para personalizacoes finais
	If ExistBlock("MNTA6555")
		ExecBlock("MNTA6555",.F.,.F.,{(nOPCA == 1), nOPCx})
	EndIf

	lRefresh := .T.
	If !l655Auto
		RestArea(aArea)
	EndIf
	If nRecaAb != 0
		DbSelectArea("TQN")
		DbGoTo(nRecaAb)
	EndIf

Return nOPCa

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³RetPicVar ³ Autor ³ Thiago Olis Machado   ³ Data ³ 27/10/08 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Traz a label de acordo com a definicao de familia.         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA655                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function RetPicVar()

	Local aArea := GetArea(),cTipo,cUnid,cTpUn,cTipo2,cUnid2,cTpUn2
	Local l655Auto := Type( 'aRotAuto' ) != 'U'

	Store Space(1) To cTipo,cUnid,cTpUn,cTipo2,cUnid2,cTpUn2

	cPrvBemClk := MNT655PREV()

	If !IsInCallStack( 'MNTA655' ) .And. FunName() != "MNTA700" .And. Empty(cPrvBemClk)
		Return .T.
	EndIf

	If !Empty(M->TQN_PLACA)
		fBscBemPla(M->TQN_PLACA)
	Else
		DbSelectArea("ST9")
		DbSetOrder(16)
		DbSeek(M->TQN_FROTA)
	EndIf

	If !lSegCont
		cMedia := STR0116 //"Media KM/L"
		If !l655Auto
			oMedia:Refresh()
		EndIf
		RestArea(aArea)
		Return .F.
	EndIf


	cTipo := AllTrim(NGSEEK('ST6',ST9->T9_CODFAMI,1,'T6_TIPO1'))
	cUnid := AllTrim(NGSEEK('ST6',ST9->T9_CODFAMI,1,'T6_UNIDAD1'))
	cTpUn := NGSEEK('ST6',ST9->T9_CODFAMI,1,'T6_MEDIA1')
	cTpUn := IIf(Empty(cTpUn),"1",cTpUn)

	If cTpUn = "1"
		cMedia := cTipo+"/"+cUnid
	Else
		cMedia := cUnid+"/"+cTipo
	EndIf


	If Alltrim(cMedia) = "/" .Or. cMedia = Nil
		cMedia := STR0116
	EndIf

	If !l655Auto .And. lMosCon1
		oMedia:Show()
		oGetMedia:Show()
		oMedia:Refresh()
	EndIf

	cTipo2 := AllTrim(NGSEEK('ST6',ST9->T9_CODFAMI,1,'T6_TIPO2'))
	cUnid2 := AllTrim(NGSEEK('ST6',ST9->T9_CODFAMI,1,'T6_UNIDAD2'))
	cTpUn2 := NGSEEK('ST6',ST9->T9_CODFAMI,1,'T6_MEDIA2')
	cTpUn2 := IIf(Empty(cTpUn2),"1",cTpUn2)

	If cTpUn2 = "1"
		cMedia2 := cTipo2+"/"+cUnid2
	Else
		cMedia2 := cUnid2+"/"+cTipo2
	EndIf

	If Alltrim(cMedia2) = "/" .Or. cMedia2 = Nil
		cMedia2 := STR0116
	EndIf

	If !l655Auto .And. lMosCon2
		oMedia2:Show()
		oGetMed2:Show()
		oMedia2:Refresh()
	EndIf

	RestArea(aArea)

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MNT655AN2
Carrega campos virtuais e visuais referentes ao abastecimento
anterior ao que esta sendo incluido.

@author  Evaldo Cevinscki Jr.
@since   19/02/2008
@version P11/P12
/*/
//-------------------------------------------------------------------
Function MNT655AN2()

	Local aArea     := GetArea()
	Local lValCont2 := .F.
	Local l655Auto  := Type( 'aRotAuto' ) != 'U'

	//FindFunction remover na release GetRPORelease() >= '12.1.027'
	If FindFunction("MNTCont2")
		lValCont2 := MNTCont2(xFilial("TPE"), M->TQN_FROTA)
	Else
		lValCont2 := MNT6552CNT(xFilial("TPE"),M->TQN_FROTA) //Verifica se existe contador e/ou está ativado.
	EndIf

	If lValCont2
		If !Empty(DtoS(M->TQN_DTABAS)+M->TQN_HRABAS)

			vRetApBe      := NGACUMEHIS(M->TQN_FROTA,M->TQN_DTABAS,M->TQN_HRABAS,2,"A",,'TPP->TPP_TIPOLA = "A" .Or. TPP->TPP_TIPOLA = "I"',.T.,M->TQN_PLACA)
			M->TQN_HODAN2 := vRetApBe[1]
			M->TQN_VARDI2 := vRetApBe[6]
			M->TQN_DTAAN2 := vRetApBe[3]
			M->TQN_HRAAN2 := vRetApBe[4]
			nAcumAba      := vRetApBe[2]

			M->TQN_KMROD2 := 0
			If M->TQN_POSCO2 > 0
				vRetApBe      := NGACUMEHIS(M->TQN_FROTA,M->TQN_DTABAS,M->TQN_HRABAS,2,"A",,,.T.,M->TQN_PLACA)
				nAcumHis      := vRetApBe[2]+(M->TQN_POSCO2-vRetApBe[1])
				M->TQN_KMROD2 := nAcumHis - nAcumAba
			EndIf

			cTpUn2 := NGSEEK('ST6',ST9->T9_CODFAMI,1,'T6_MEDIA2')
			cTpUn2 := IIf(Empty(cTpUn2),"1",cTpUn2)

			If cTpUn2 = "1"
				M->TQN_MEDI2 := IIf(M->TQN_KMROD2 > 0,M->TQN_KMROD2/M->TQN_QUANT,0)
			Else
				M->TQN_MEDI2 := IIf(M->TQN_KMROD2 > 0,M->TQN_QUANT/M->TQN_KMROD2,0)
			EndIf
		EndIf
	EndIf
	If !l655Auto
		If M->TQN_POSCO2 > 0
			oPanel22:Show()
			oPanel21C:Align := CONTROL_ALIGN_LEFT
		Else
			oPanel21C:Align := CONTROL_ALIGN_LEFT
		EndIf
	EndIf

	RestArea(aArea)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ NgDtAbas ³ Autor ³Denis Hyroshi de Souza ³ Data ³ 01/06/08 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄ1ÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³verifica se Data/Hora do abastecimento é valida, de acordo  ´±±
±±³          ³com o parametro MV_MNTQDAB, que indica a data/hora limite   ´±±
±±³          ³para digitação de abastecimento.                            ´±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function NgDtAbas()
Local aRetDtPar := { nil , nil , .F. }
Local cConteudo := ""
Local dDataPar  := nil
Local cHoraPar  := nil
Local cDia,cMes,cAno

If SuperGetMv("MV_MNTQDAB",.F.,"-1") == "-1"
	Return aRetDtPar
EndIf
cConteudo := Alltrim( GetMV( "MV_MNTQDAB" ))

nPos1 := At("/",cConteudo)
If nPos1 > 0
	nPos2 := At("/", Substr(cConteudo,nPos1+1) )
	If nPos2 > 0
		cDia := StrZero( Val(Substr(cConteudo,1,nPos1-1)) , 2 )
		cMes := StrZero( Val(Substr(cConteudo,nPos1+1,nPos2-1)) , 2 )
		cConteudo := Alltrim(Substr(cConteudo,nPos1+nPos2+1))
		nPos3 := At(" ",cConteudo)
		cAno := ""
		If nPos3 > 2
			cAno := Substr(cConteudo,1,nPos3-1)
			cConteudo := Alltrim(Substr(cConteudo,nPos3+1))
		Else
			cAno := Alltrim(cConteudo)
			cConteudo := ""
		EndIf
		If Len(cAno) == 2
			If cAno > "50"
				cAno := "19"+cAno
			Else
				cAno := "20"+cAno
			EndIf
		EndIf
		If !Empty(cAno)
			cAno := StrZero( Val(cAno) , 4 )
			If !Empty( StoD(cAno+cMes+cDia) )
				dDataPar := StoD(cAno+cMes+cDia)
			EndIf
		EndIf
	EndIf
EndIf

If Valtype(dDataPar) == "D"
	nPos1 := At(":",cConteudo)
	If nPos1 > 0
		If NGVALHORA(cConteudo,.F.)
			cHoraPar := cConteudo
		EndIf
	EndIf
	aRetDtPar := { dDataPar , cHoraPar , .T. }
EndIf

Return aRetDtPar

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT655FIL  ³ Autor ³Marcos Wagner Junior  ³ Data ³20/12/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Filtra os abastecimentos em lote.                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA656                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNT655FIL()

ENDFILBRW("TQN",aIndTQN)
cRetF655 := BuildExpr("TQN",,cRetF655,.F.)

If !Empty(cRetF655)
	DbSelectArea("TQN")
	set filter to
	bFiltraBrw := {|| FilBrowse("TQN",@aIndTQN,@cRetF655) }
	Eval(bFiltraBrw)
EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT655FTQF ³ Autor ³Marcos Wagner Junior  ³ Data ³20/12/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Busca a filial da movimentacao do estoque                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNT655FTQF( dDataAbast, cNumSequen, nQuantAb )

Local cFilTQF := Space(2)

If !Empty(cNumSequen)
	cAliasQry := GetNextAlias()
	cQuery := " SELECT SD3.D3_FILIAL, SD3.D3_EMISSAO, SD3.D3_QUANT "
	cQuery += " FROM "+RetSQLName("SD3")+" SD3 "
	cQuery += " WHERE SD3.D3_NUMSEQ = '" + cNumSequen + "' AND SD3.D_E_L_E_T_ = ''"
	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)
	DbGoTop()
	If !Eof()
		cFilTQF := (cAliasQry)->D3_FILIAL
		While !Eof()
			If StoD( (cAliasQry)->D3_EMISSAO ) == dDataAbast
				cFilTQF := (cAliasQry)->D3_FILIAL
				If (cAliasQry)->D3_QUANT == nQuantAb
					Exit
				EndIf
			EndIf
			dbSkip()
		End
	EndIf
	(cAliasQry)->(dbCloseArea())
EndIf

Return cFilTQF

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT655IPOS ³ Autor ³ Denis                ³ Data ³20/12/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Inicialidor padrao do campo TQN_DESCPO                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNT655IPOS()
Local aAreaXXX := GetArea()
Local cRet := " "
Local cConEst := AllTrim(SuperGetMV("MV_ESTHOME",.F.,"N"))
Local cFilTQF := cFilAnt

If !Inclui
	If cConEst != "N"
		If !Empty(TQN->TQN_NUMSEQ)
			cFilTQF := MNT655FTQF( TQN->TQN_DTABAS , TQN->TQN_NUMSEQ , TQN->TQN_QUANT ) //Data / Numseq / Quantidade
		EndIf
	EndIf
	DbSelectArea("SA2")
	DbSetOrder(1)
	If DbSeek(xFilial("SA2",cFilTQF)+TQN->TQN_POSTO+TQN->TQN_LOJA)
		cRet := SA2->A2_NREDUZ
	EndIf
EndIf

RestArea(aAreaXXX)

Return cRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT655IMOT ³ Autor ³ Denis                ³ Data ³20/12/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Inicialidor padrao do campo TQN_NOMMOT                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNT655IMOT()
Local aAreaXXX := GetArea()
Local cRet := " "
Local cConEst := AllTrim(SuperGetMV("MV_ESTHOME",.F.,"N"))
Local cFilTQF := cFilAnt

If !Inclui
	If cConEst != "N"
		If !Empty(TQN->TQN_NUMSEQ)
			cFilTQF := MNT655FTQF( TQN->TQN_DTABAS , TQN->TQN_NUMSEQ , TQN->TQN_QUANT ) //Data / Numseq / Quantidade
		EndIf
	EndIf
	DbSelectArea("DA4")
	DbSetOrder(1)
	If DbSeek(xFilial("DA4",cFilTQF)+TQN->TQN_CODMOT)
		cRet := DA4->DA4_NOME
	EndIf
EndIf

RestArea(aAreaXXX)

Return cRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT655LOTE ³ Autor ³ Marcos Wagner Junior ³ Data ³20/05/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³verifica se o abastecimento se originou a do Abas. em Lote  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNT655LOTE()

	Local lRet := .T.

	DbSelectArea("TTA")
	DbSetOrder(01)
	If DbSeek(xFilial("TTA")+TQN->TQN_POSTO+TQN->TQN_LOJA+TQN->TQN_NOTFIS)
		lRet := .F.
	EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} MNTA655VLE
Valida empresa digitada no campo DA4_EMPBAS

@author  Marcos Wagner Junior
@since   21/08/09
@version P11/P12
@return  Lógico, Define se há inconsistência
/*/
//-------------------------------------------------------------------
Function MNTA655VLE()

	Local lRet     := .T.
	Local aOldArea := GetArea()

	DbSelectArea("SM0")
	If !DbSeek(M->DA4_EMPBAS)
		//"Empresa não existente!"###"ATENÇÃO"
		HELP( ' ', 1, STR0007,, STR0138, 2, 0,,,,,, /*Solucao*/ )
		lRet := .F.
	EndIf

	RestArea(aOldArea)

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNTA655RET³ Autor ³ Marcos Wagner Junior  ³ Data ³ 21/08/09 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Retorna Empresa e Filial da SM0				              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNTA655RET()

M->DA4_FILBAS := SM0->M0_CODFIL

Return SM0->M0_CODIGO

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³NGINFRASTRO³ Autor ³ Evaldo Cevinscki Jr.  ³ Data ³01/04/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Cadastramento do rastro e enderecamento fisico               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA655/MNTA656                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function NGINFRASTRO(cNComb,cProd,dDtAbas,nLin656,nQtdAbs)

	Local nopcmo     := 1
	Local vRastroRet := {}
	Local oPanel

	cLocalEs := Pad(NGSEEK('SB1',cProd,1,'SB1->B1_LOCPAD'),Len(SB1->B1_LOCPAD))
	cSubLote := Space(Len(STL->TL_NUMLOTE)) // Sub_lote
	cLoTecTl := Space(Len(STL->TL_LOTECTL)) // Lote
	cNumSeri := Space(Len(STL->TL_NUMSERI)) // Numero da serie
	cLocaliz := Space(Len(STL->TL_LOCALIZ)) // Localizacao fisica
	dDtvalid := Ctod("  /  /  ")

	M->TL_TIPOREG := "P"

	DEFINE MSDIALOG oDlgx TITLE OemToAnsi(STR0146+"..: "+Alltrim(cNComb)+" "+; //"Rastro e Endereçamento Combustível"
	                                      STR0147+"..: "+AllTrim(cProd)+IIf(nLin656<>0,STR0148+AllTrim(Str(nLin656)),""));
										  From 0,0 To 270,520/*465*/ COLOR CLR_BLACK,CLR_WHITE Pixel     //"Cod"###" Linha..:"

		oDlgx:lEscClose := .F. //Nao permite sair ao se pressionar a tecla ESC.

		oPanel       := TPanel():New(0, 0, Nil, oDlgx, Nil, .T., .F., Nil, Nil, 0, 0 , .T., .F. )
		oPanel:Align := CONTROL_ALIGN_ALLCLIENT

		@10,5    Say OemtoAnsi(NGRETTITULO("TL_LOCAL")) of oPanel Pixel //"AlmoxarIfado
		@10,40 MsGet cLocalEs Picture "@!" VALID ExistCpo("SB2",cProd+cLocalEs) SIZE 35,10 of oPanel Pixel

		@25,5    Say OemtoAnsi(NGRETTITULO("TL_LOTECTL")) of oPanel Pixel //"Numero do lote
		@25,40 MsGet cLoteCTL Picture "@!" VALID;
					IIf(!Empty(cLoTecTl),NGRASTOLOTE(cProd,cLocalEs,cLoteCTL,cSubLote,"dDtvalid"),.T.) SIZE 45,10 of oPanel Pixel

		@40,5    Say OemtoAnsi(NGRETTITULO("TL_NUMLOTE")) of oPanel Pixel//"Numero do Sub_lote
		@40,40 MsGet cSubLote Picture "@!" VALID IIf(!Empty(cSubLote),NGRASSUBLOTE(cProd,cLocalEs,cSubLote,"cLoteCTL","dDtvalid"),.T.) SIZE 45,10 of oPanel Pixel

		@55,5    Say OemtoAnsi(NGRETTITULO("TL_DTVALID")) of oPanel Pixel //"Data validade
		@55,40 MsGet dDtvalid Picture "99/99/99" SIZE 45,10 HASBUTTON When .F. of oPanel Pixel

		@70,5    Say OemtoAnsi(NGRETTITULO("TL_LOCALIZ")) of oPanel Pixel //"Localizacao fisica
		@70,40 MsGet cLocaliz Picture "@!" VALID IIf(!Empty(cLocaliz),ExistCpo("SBE",cLocalEs+cLocaliz),.T.) F3 "SBE" SIZE 60,10 HASBUTTON of oPanel Pixel

		@85,5    Say OemtoAnsi(NGRETTITULO("TL_NUMSERI")) of oPanel Pixel //"Serie
		@85,40 MsGet cNumSeri Picture "@!" SIZE 70,10 of oPanel Pixel

	ACTIVATE MSDIALOG oDlgx Centered ON INIT EnchoiceBar(oDlgx,{||nopcmo:=2,IIf(NGCHKFRASTO(cProd,dDtAbas,cSubLote,cLotecTl,cLocalEs,cNumSeri,cLocaliz,nQtdAbs),;
		                                                 oDlgx:End(),nopcmo:=1)},{||nopcmo:=1,oDlgx:End()})

	If nopcmo = 2
		vRastroRet	:= {cLocalEs,cSubLote,cLoTecTl,cNumSeri,cLocaliz,dDtvalid,.T.}
	Else
		// "Produto possui controle de Rastreabilidade/Localização Física, é obrigatório informar os dados do Lote/Localização."
		HELP(' ', 1, STR0007,, STR0149,2,0,,,,,, solucao)
		vRastroRet	:= {,,,,,,.F.}
	EndIf

Return vRastroRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³MNTA655FL ºAutor  ³Taina A. Cardoso    º Data ³  30/06/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Filtra os abastecimentos por data atual ou todos            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ MNTA655                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNTA655Fl()

lAleat := !lAleat
//SetBrwCHGAll( .F. ) // nao apresentar a tela para informar a filial
If !lAleat
	DbClearFilter()
	DbSeek(xFilial("TQN"))
Else
	MsgRun(STR0156,STR0157,{ || MNTA655MOS() }) //"Selecionando Abastecimentos"###"Aguarde..."
EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³MNTA655MOSºAutor  ³Taina A. Cardoso    º Data ³  30/06/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Seleciona os registros para filtrar o browse                º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ MNTA655                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNTA655MOS()

Local cFiltro := "TQN->TQN_DTABAS == dDataBase"

DbSelectArea("TQN")
Set Filter to &(cFiltro)
DbSeek(xFilial("TQN"))

Return .T.

//------------------------------------------------------------------------
/*/{Protheus.doc} fChkComBem()
Verifica combustivel do bem. Caso não for o correspondente retorna falso.

@author  Guilherme Benkendorf
@since   26/12/2013
@version MP11
@return  Array aReturn: [1] Boolean: indica se combustível é compatível
						[2] Float: indica capacidade máxima do tanque ( TT8_CAPMAX )
/*/
//-------------------------------------------------------------------------
Static Function fChkComBem( cChkFrota,cChkFuel, cFiliST9 )

	Local aAreaFuel  := GetArea()
	Local aReturn    := { .F.,0 }
	Local cBuscaFil  := ""
	Local cChaveTT8  := ""

	Default cFiliST9 := ""

	//Busca a Filial do Bem
	cBuscaFil := cFiliST9
	cChaveTT8 := xFilial("TT8",cBuscaFil)+PadR(cChkFrota,TAMSX3("TT8_CODBEM")[1])+PadR(cChkFuel,TAMSX3("TT8_CODCOM")[1])

	DbSelectArea("TT8")
	DbSetOrder(1)
	If (aReturn[1] := DbSeek(cChaveTT8))
		While !EoF() .And. AllTrim(TT8->TT8_FILIAL+TT8->TT8_CODBEM+TT8->TT8_CODCOM) == AllTrim(cChaveTT8)
			aReturn[2] := TT8->TT8_CAPMAX
			DbSelectArea("TT8")
			DbSkip()
		End While
	Else
		// "Combustível incompatível com tanque do bem."
		HELP(' ',1, STR0007,, STR0104, 2, 0,,,,,, /*Solucao*/ )
	EndIf

	RestArea( aAreaFuel )

Return aReturn

//---------------------------------------------------------------------
/*/{Protheus.doc} fLockBem555
Função para travar o código do bem, a rotina exige que somente um
abastecimento por veículo seja realizado por vez, para previnir
inconsistências de base relacionadas a contador reportado no
Abastecimento Manual

@param String cCodBem: código do bem para realizar o lock
@author André Felipe Joriatti
@since 25/03/2014
@return Boolean lRet: true caso consiga travar o código, false caso não
consiga
@version MP11
/*/
//---------------------------------------------------------------------

Static Function fLockBem555( cCodBem )

	Local lRet := .T.

	If !LockByName( "MNTA655" + cCodBem )
		// "ATENÇÃO"##"Já existe um reporte de abastecimento sendo feito para o veículo "
		// "Aguarde um instante e tente novamente."
		HELP( ' ', 1, STR0167,, STR0168 + cCodBem, 2, 0,,,,,, { STR0169 } )

		lRet := .F.
	EndIf

Return lRet

//---------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA655TPN
Retorna a Filial do veículo na época do abastecimento. Réplica realizada a partir
da função NgFilTPN (NGUTIL05), com o adendo de considerar a placa do veículo,
evitando ocorrências de retorno inconsistente em casos de múltiplas filiais
com códigos de bens iguais.

@param String cBem: Código do Bem, Date dData: Data do Abastecimento,
String cHora: Hora do Abastecimento, String cPlaca: Placa do Veículo
String cFilBem: Filial do Bem

@author Éwerton de Oliveira Cercal
@since 10/11/2014
@return Array aRetorno: Array contendo Filial, Centro de Custo e Centro de Trabalho
@version MP11
/*/
//---------------------------------------------------------------------------------
Function MNT655TPN(cBem, dData, cHora, cPlaca, cFilBem)

Local cFilTPN := ' ', cCCusto := ' ', cCentrab := ' '
Local aRetorno := {}
Local cTabST9, cTabTPN
Local aAreaST9 := ST9->(GetArea())

//Alteração do nome da tabela na Query para Multiempresa
DbSelectArea("ST9")
cTabST9 := Trim(DBINFO(DBI_FULLPATH))

DbSelectArea("TPN")
cTabTPN := Trim(DBINFO(DBI_FULLPATH))

If Len(cTabST9) == 6 .And. Len(cTabTPN) == 6 .And. SubStr(cTabST9, 4) != SubStr(cTabTPN, 4)

	cTabTPN := "TPN" + SubStr(cTabST9, 4)

Else

	cTabTPN := RetSQLName("TPN")

EndIf

cQry := GetNextAlias()

cQuery := " SELECT TPN.TPN_FILIAL, ST9.T9_FILIAL, TPN.TPN_CODBEM, ST9.T9_CODBEM, ST9.T9_PLACA, TPN.TPN_CCUSTO, TPN.TPN_CTRAB, TPN.TPN_DTINIC, TPN.TPN_HRINIC "
cQuery += " FROM " + cTabTPN + " TPN JOIN " + cTabST9 + " ST9  ON TPN_CODBEM = T9_CODBEM"
cQuery += " WHERE "

	If (NGSX2MODO("ST9") == NGSX2MODO("TPN"))
		cQuery += " TPN_FILIAL = T9_FILIAL AND "
	EndIf

cQuery += " TPN_FILIAL = " + ValToSQL(cFilBem)
cQuery += " AND TPN_CODBEM = " + ValToSQL(cBem)
cQuery += " AND T9_PLACA = " + ValToSQL(cPlaca)
cQuery += " AND TPN.D_E_L_E_T_ <> '*' "
cQuery += " AND ST9.D_E_L_E_T_ <> '*' "
cQuery += " ORDER BY TPN_DTINIC, TPN_HRINIC"
cQuery := ChangeQuery(cQuery)

dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cQry, .F., .T.)

DbSelectArea(cQry)
DbGoTop()

If !Empty(cPlaca)
	DbSelectArea("ST9")
	DbSetOrder(14)
	If DbSeek(cPlaca)
		While ST9->(!EOF()) .And. ST9->T9_PLACA == cPlaca

			While (cQry)->(!EOF())

				If DTOS(dData) > (cQry)->TPN_DTINIC

					cFilTPN  := (cQry)->TPN_FILIAL
					cCCusto  := (cQry)->TPN_CCUSTO
					cCentrab := (cQry)->TPN_CTRAB

				ElseIf DTOS(dData) == (cQry)->TPN_DTINIC .And. cHora >= (cQry)->TPN_HRINIC

				  	cFilTPN  := (cQry)->TPN_FILIAL
				  	cCCusto  := (cQry)->TPN_CCUSTO
					cCentrab := (cQry)->TPN_CTRAB

				EndIf

				DbSelectArea(cQry)
				DbSkip()

			End

			DbSelectArea("ST9")
			DbSkip()

		End
	EndIf
Else
	DbSelectArea("ST9")
	DbSetOrder(1)
	If DbSeek(cFilBem + cBem)
		While ST9->(!EOF()) .And. AllTrim(ST9->T9_FILIAL) == AllTrim(cFilBem) .And. AllTrim(ST9->T9_CODBEM) == AllTrim(cBem)

			While (cQry)->(!EOF())

				If DTOS(dData) > (cQry)->TPN_DTINIC

					cFilTPN  := (cQry)->TPN_FILIAL
					cCCusto  := (cQry)->TPN_CCUSTO
					cCentrab := (cQry)->TPN_CTRAB

				ElseIf DTOS(dData) == (cQry)->TPN_DTINIC .And. cHora >= (cQry)->TPN_HRINIC

				  	cFilTPN  := (cQry)->TPN_FILIAL
				  	cCCusto  := (cQry)->TPN_CCUSTO
					cCentrab := (cQry)->TPN_CTRAB

				EndIf

				DbSelectArea(cQry)
				DbSkip()

			End

			DbSelectArea("ST9")
			DbSkip()

		End
	EndIf
EndIf

(cQry)->(DbCloseArea())

aRetorno := {cFilTPN, cCCusto, cCentrab}

RestArea(aAreaST9)

Return aRetorno

//---------------------------------------------------------------------------------
/*/{Protheus.doc} fBscBemPla - Busca bem pela placa.
Faz consulta na ST9 utilizando apenas placa, indice 14.
Função criada devidas as multiplas utilizações da mesma busca.

@author Maicon André Pinheiro
@since 30/03/2016
@return .T.
@version MP12
/*/
//---------------------------------------------------------------------------------
Static Function fBscBemPla(cPlaca)

 	dbSelectArea('ST9')
 	dbSetOrder(14) //T9_PLACA + T9_SITBEM
 	dbSeek(cPlaca + "A")

Return .T.

//-------------------------------------------------------------------------------------------
/*/{Protheus.doc} MNT6552CNT
Valida se:
1) Existe o segundo contador
2) Se existe, verifica se é permitido desativar o mesmo, e retorna se está ou não ativado.

@author Maicon André Pinheiro
@since 30/03/2017
@return bool lRet
@param cTQN_Frota - Frota que está validada.
@version P12
/*/
//-------------------------------------------------------------------------------------------
Static Function MNT6552CNT(cFilVld,cTQN_Frota)

	Local lRet := .F. //Não existe segundo contador ou está desativado.

	dbSelectArea("TPE")
	dbSetOrder(1)
	If dbSeek(cFilVld + cTQN_Frota)
		lRet := TPE->TPE_SITUAC == "1"
	EndIf

Return lRet

//---------------------------------------------------------------------------------
/*/{Protheus.doc} MNT655WHEN
Função executada através do X3_WHEN

@author Bruno Lobo de Souza
@since 23/08/2017
@return lWhen, boolean, habilita/desabilita edição do campo
@version MP12
/*/
//---------------------------------------------------------------------------------
Function MNT655WHEN(cField)

	Local lWhen := .T.
	Local lRclick := If(Type("cPrvBemClk") <> 'U', !Empty(cPrvBemClk), .F.)
	Default cField := ReadVar()

	If cField == "TQN_PLACA"
		lWhen := Inclui .And. !lRclick
	ElseIf cField == "TQN_FROTA"
		lWhen := lNaoAlt656 .And. !lRclick
	EndIf

Return lWhen

//---------------------------------------------------------------------------------
/*/{Protheus.doc} MNT655PREV
Realiza a população da variavel cPrvBemClk.

@author Guilherme Freudenburg
@since 07/12/2017

@return cPrvBemClk , Caracter, Valor da variavel ou retorna espaçamento em branco.
/*/
//---------------------------------------------------------------------------------
Function MNT655PREV()

Return IIf( Type('cPrvBemClk') == 'U' , Space(TamSx3("T9_CODBEM")[1]) , cPrvBemClk )

//---------------------------------------------------------------------------------
/*/{Protheus.doc} fCriaTemp
Cria as tabelas temporárias relacionadas ao contador/estrutura de bens.

@author Tainã Alberto Cardoso
@since 17/12/2018

/*/
//---------------------------------------------------------------------------------
Static Function fCriaTemp()

	Local aIdxSTC := {{"TCODBEM"},{"TCOMPON"}}
	Local aIdxTRBF := {{"FCOMPON"},{"FDTMOVI"}}
	Local vINDEixo := {{"EIXO"}}
	Local ADBFP := {}
	Local aDBFF := {}
	Local aDBFEixo 	:= {}

	Aadd(ADBFP,{"TCODBEM","C",16,0})
	Aadd(ADBFP,{"TTIPOBE","C",01,0})
	Aadd(ADBFP,{"TCOMPON","C",16,0})
	Aadd(ADBFP,{"TTIPOCO","C",01,0})
	Aadd(ADBFP,{"TTIPOMO","C",01,0})
	Aadd(ADBFP,{"TDTMOVI","D",08,0})
	Aadd(ADBFP,{"TDTSAID","D",08,0})
	Aadd(ADBFP,{"THORAEN","C",05,0})
	Aadd(ADBFP,{"THORASA","C",05,0})
	Aadd(ADBFP,{"TSELECI","C",01,0})
	Aadd(ADBFP,{"TLOCALI","C",06,0})
	Aadd(ADBFP,{"REPASSA","C",01,0})

	oTmpTblSTC := NGFwTmpTbl(cTRBS,ADBFP,aIdxSTC)

	Aadd(aDBFF,{"FCODBEM","C",16,0})
	Aadd(aDBFF,{"FTIPOBE","C",01,0})
	Aadd(aDBFF,{"FCOMPON","C",16,0})
	Aadd(aDBFF,{"FTIPOCO","C",01,0})
	Aadd(aDBFF,{"FDTMOVI","D",08,0})
	Aadd(aDBFF,{"FTIPOMO","C",01,0})
	Aadd(aDBFF,{"FDTSAID","D",08,0})
	Aadd(aDBFF,{"FHORAEN","C",05,0})
	Aadd(aDBFF,{"FHORASA","C",05,0})
	Aadd(aDBFF,{"FLOCALI","C",06,0})
	Aadd(aDBFF,{"REPASSA","C",01,0})

	//Alias: cTRBF

	oTpTbTRBF := NGFwTmpTbl(cTRBF,aDBFF,aIdxTRBF)

	aAdd(aDBFEixo,{"OK"    , "C", 02, 0})
	aAdd(aDBFEixo,{"EIXO"  , "C", 10, 0})
	aAdd(aDBFEixo,{"DESCRI", "C", 20, 0})

	// Cria arquivos para Eixo Suspenso
	oTmpTbl := NGFwTmpTbl( CTRBEixo, aDBFEixo, vINDEixo )

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} fDelTemp
Deleta as tabelas temporárias
@author Tainã Alberto Cardoso
@since 18/12/2018
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Static Function fDelTemp()

	oTpTbTRBF:Delete()
	oTmpTblSTC:Delete()
	oTmpTbl:Delete()

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA655Rel
Aciona realação dos campos virtuais.
@type function

@author Alexandre Santos
@since 04/02/2019

@sample MNTA655Rel( 'TQN_DESFRO' )

@param  cField, Caracter, Campo a ser executado o relação.
@return Caracter, Retorno do inicializador.
/*/
//---------------------------------------------------------------------
Function MNTA655Rel( cField )

	Local cRet  := ''
	Local aArea := GetArea()

	Do Case

		Case cField == 'TQN_DESFRO'

			If !Empty( M->TQN_PLACA )

				fBscBemPla( M->TQN_PLACA )
				cRet := ST9->T9_NOME

			ElseIf !Empty( M->TQN_FROTA )

				cRet := Posicione( 'ST9', 1, xFilial( 'TQN' ) + M->TQN_FROTA, 'T9_NOME' )

			EndIf

	EndCase

	RestArea( aArea )

Return cRet

//-------------------------------------------------------------------
/*/{Protheus.doc} fRecord655
Função responsável por verificar se a frota pode ser utilizada,
então chama função para realizar as gravações do abastecimento.

@type   Function

@author Maria Elisandra
@since  20/12/2020
@param  nRecnoTQN, Numérico, Recno da TQN

@return Lógico, Define se a gravação foi realizada com sucesos.
/*/
//-------------------------------------------------------------------
Static Function fRecord655( nRecnoTQN )

	Local lRet := fLockBem555( M->TQN_FROTA )

	If lRet
	
		lRet := MNA655BG( nRecnoTQN ) // Realiza validações e gravação
		UnLockByName( "MNTA655" + M->TQN_FROTA ) // Destrava bem que havia sido lockado para o abastecimento
	
	EndIf

Return lRet
